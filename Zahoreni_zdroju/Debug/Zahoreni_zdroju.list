
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b794  0800b794  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b794  0800b794  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b794  0800b794  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  200001e0  0800b97c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0800b97c  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273f1  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048eb  00000000  00000000  000475f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0004bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0004d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f32c  00000000  00000000  0004ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e034  00000000  00000000  0006ddac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3cd2  00000000  00000000  0008bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  0012fb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b57c 	.word	0x0800b57c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b57c 	.word	0x0800b57c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	429a      	cmp	r2, r3
 800042e:	d104      	bne.n	800043a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.butt0_int = 1;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000432:	781a      	ldrb	r2, [r3, #0]
 8000434:	2110      	movs	r1, #16
 8000436:	430a      	orrs	r2, r1
 8000438:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	429a      	cmp	r2, r3
 8000444:	d104      	bne.n	8000450 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.butt1_int = 1;
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	701a      	strb	r2, [r3, #0]
	}
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000058c 	.word	0x2000058c

0800045c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000468:	429a      	cmp	r2, r3
 800046a:	d104      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.ten_ms = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	}
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000544 	.word	0x20000544
 8000484:	2000058c 	.word	0x2000058c

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f001 f8c6 	bl	800161c <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000490:	2064      	movs	r0, #100	; 0x64
 8000492:	f000 fda0 	bl	8000fd6 <createBuffer>
 8000496:	0002      	movs	r2, r0
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <main+0x84>)
 800049a:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 fd9a 	bl	8000fd6 <createBuffer>
 80004a2:	0002      	movs	r2, r0
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <main+0x88>)
 80004a6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fd92 	bl	8000fd6 <createBuffer>
 80004b2:	0002      	movs	r2, r0
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <main+0x8c>)
 80004b6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fd8a 	bl	8000fd6 <createBuffer>
 80004c2:	0002      	movs	r2, r0
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <main+0x90>)
 80004c6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa94 	bl	80009f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f009 fe82 	bl	800a1d8 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80004d4:	f000 fa72 	bl	80009bc <MX_DMA_Init>
  MX_ADC_Init();
 80004d8:	f000 f890 	bl	80005fc <MX_ADC_Init>
  MX_SPI1_Init();
 80004dc:	f000 f9ac 	bl	8000838 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80004e0:	f000 fa3c 	bl	800095c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80004e4:	f000 f9ee 	bl	80008c4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <main+0x94>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f004 fd0e 	bl	8004f0c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.ten_ms)	// 10 ms
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <main+0x98>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2201      	movs	r2, #1
 80004f6:	4013      	ands	r3, r2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <main+0x68>
	  {
		  clkHandler();
 80004fe:	f000 fb67 	bl	8000bd0 <clkHandler>
		  buttonDebounce();
 8000502:	f000 fc0f 	bl	8000d24 <buttonDebounce>
		  comHandler();
 8000506:	f000 fc89 	bl	8000e1c <comHandler>
	  if(flags.ten_ms)	// 10 ms
 800050a:	e7f1      	b.n	80004f0 <main+0x68>
 800050c:	20000448 	.word	0x20000448
 8000510:	20000450 	.word	0x20000450
 8000514:	200010ac 	.word	0x200010ac
 8000518:	200004dc 	.word	0x200004dc
 800051c:	20000544 	.word	0x20000544
 8000520:	2000058c 	.word	0x2000058c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b099      	sub	sp, #100	; 0x64
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	242c      	movs	r4, #44	; 0x2c
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f00a fbf3 	bl	800ad20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	231c      	movs	r3, #28
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2310      	movs	r3, #16
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f00a fbeb 	bl	800ad20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	231c      	movs	r3, #28
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f00a fbe4 	bl	800ad20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000558:	0021      	movs	r1, r4
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2232      	movs	r2, #50	; 0x32
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2201      	movs	r2, #1
 8000564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2210      	movs	r2, #16
 8000576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2210      	movs	r2, #16
 800057c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0212      	lsls	r2, r2, #8
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0352      	lsls	r2, r2, #13
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0018      	movs	r0, r3
 800059e:	f003 fdad 	bl	80040fc <HAL_RCC_OscConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005a6:	f000 fd11 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	211c      	movs	r1, #28
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2207      	movs	r2, #7
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2101      	movs	r1, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f004 f91d 	bl	8004808 <HAL_RCC_ClockConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005d2:	f000 fcfb 	bl	8000fcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d6:	003b      	movs	r3, r7
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	0292      	lsls	r2, r2, #10
 80005dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e4:	003b      	movs	r3, r7
 80005e6:	0018      	movs	r0, r3
 80005e8:	f004 fa8a 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f0:	f000 fcec 	bl	8000fcc <Error_Handler>
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b019      	add	sp, #100	; 0x64
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f00a fb88 	bl	800ad20 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000610:	4b87      	ldr	r3, [pc, #540]	; (8000830 <MX_ADC_Init+0x234>)
 8000612:	4a88      	ldr	r2, [pc, #544]	; (8000834 <MX_ADC_Init+0x238>)
 8000614:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000616:	4b86      	ldr	r3, [pc, #536]	; (8000830 <MX_ADC_Init+0x234>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b84      	ldr	r3, [pc, #528]	; (8000830 <MX_ADC_Init+0x234>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b83      	ldr	r3, [pc, #524]	; (8000830 <MX_ADC_Init+0x234>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000628:	4b81      	ldr	r3, [pc, #516]	; (8000830 <MX_ADC_Init+0x234>)
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b80      	ldr	r3, [pc, #512]	; (8000830 <MX_ADC_Init+0x234>)
 8000630:	2204      	movs	r2, #4
 8000632:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000634:	4b7e      	ldr	r3, [pc, #504]	; (8000830 <MX_ADC_Init+0x234>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800063a:	4b7d      	ldr	r3, [pc, #500]	; (8000830 <MX_ADC_Init+0x234>)
 800063c:	2200      	movs	r2, #0
 800063e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000640:	4b7b      	ldr	r3, [pc, #492]	; (8000830 <MX_ADC_Init+0x234>)
 8000642:	2200      	movs	r2, #0
 8000644:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b7a      	ldr	r3, [pc, #488]	; (8000830 <MX_ADC_Init+0x234>)
 8000648:	2200      	movs	r2, #0
 800064a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b78      	ldr	r3, [pc, #480]	; (8000830 <MX_ADC_Init+0x234>)
 800064e:	22c2      	movs	r2, #194	; 0xc2
 8000650:	32ff      	adds	r2, #255	; 0xff
 8000652:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b76      	ldr	r3, [pc, #472]	; (8000830 <MX_ADC_Init+0x234>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b75      	ldr	r3, [pc, #468]	; (8000830 <MX_ADC_Init+0x234>)
 800065c:	2224      	movs	r2, #36	; 0x24
 800065e:	2100      	movs	r1, #0
 8000660:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b73      	ldr	r3, [pc, #460]	; (8000830 <MX_ADC_Init+0x234>)
 8000664:	2201      	movs	r2, #1
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000668:	4b71      	ldr	r3, [pc, #452]	; (8000830 <MX_ADC_Init+0x234>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f83a 	bl	80016e4 <HAL_ADC_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 fcaa 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0552      	lsls	r2, r2, #21
 800068c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	4b67      	ldr	r3, [pc, #412]	; (8000830 <MX_ADC_Init+0x234>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f965 	bl	8001964 <HAL_ADC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 fc95 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	1d3a      	adds	r2, r7, #4
 80006aa:	4b61      	ldr	r3, [pc, #388]	; (8000830 <MX_ADC_Init+0x234>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 f958 	bl	8001964 <HAL_ADC_ConfigChannel>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006b8:	f000 fc88 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <MX_ADC_Init+0x234>)
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f94b 	bl	8001964 <HAL_ADC_ConfigChannel>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80006d2:	f000 fc7b 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2203      	movs	r2, #3
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006dc:	1d3a      	adds	r2, r7, #4
 80006de:	4b54      	ldr	r3, [pc, #336]	; (8000830 <MX_ADC_Init+0x234>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 f93e 	bl	8001964 <HAL_ADC_ConfigChannel>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80006ec:	f000 fc6e 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2204      	movs	r2, #4
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f6:	1d3a      	adds	r2, r7, #4
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <MX_ADC_Init+0x234>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f931 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000706:	f000 fc61 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2205      	movs	r2, #5
 800070e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000710:	1d3a      	adds	r2, r7, #4
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <MX_ADC_Init+0x234>)
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f924 	bl	8001964 <HAL_ADC_ConfigChannel>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000720:	f000 fc54 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2206      	movs	r2, #6
 8000728:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <MX_ADC_Init+0x234>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f917 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800073a:	f000 fc47 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_ADC_Init+0x234>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f001 f90a 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000754:	f000 fc3a 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2208      	movs	r2, #8
 800075c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075e:	1d3a      	adds	r2, r7, #4
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_ADC_Init+0x234>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f8fd 	bl	8001964 <HAL_ADC_ConfigChannel>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800076e:	f000 fc2d 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2209      	movs	r2, #9
 8000776:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000778:	1d3a      	adds	r2, r7, #4
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_ADC_Init+0x234>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f001 f8f0 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000788:	f000 fc20 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	220a      	movs	r2, #10
 8000790:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC_Init+0x234>)
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f001 f8e3 	bl	8001964 <HAL_ADC_ConfigChannel>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80007a2:	f000 fc13 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	220b      	movs	r2, #11
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC_Init+0x234>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 f8d6 	bl	8001964 <HAL_ADC_ConfigChannel>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80007bc:	f000 fc06 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC_Init+0x234>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f8c9 	bl	8001964 <HAL_ADC_ConfigChannel>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80007d6:	f000 fbf9 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	220d      	movs	r2, #13
 80007de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC_Init+0x234>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f8bc 	bl	8001964 <HAL_ADC_ConfigChannel>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80007f0:	f000 fbec 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	220e      	movs	r2, #14
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_ADC_Init+0x234>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 f8af 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800080a:	f000 fbdf 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	220f      	movs	r2, #15
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_ADC_Init+0x234>)
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f8a2 	bl	8001964 <HAL_ADC_ConfigChannel>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000824:	f000 fbd2 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b004      	add	sp, #16
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200005d4 	.word	0x200005d4
 8000834:	40012400 	.word	0x40012400

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_SPI1_Init+0x80>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_SPI1_Init+0x84>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000844:	2282      	movs	r2, #130	; 0x82
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_SPI1_Init+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000852:	22e0      	movs	r2, #224	; 0xe0
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x80>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x80>)
 800086e:	2238      	movs	r2, #56	; 0x38
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x80>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SPI1_Init+0x80>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000892:	2208      	movs	r2, #8
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000898:	0018      	movs	r0, r3
 800089a:	f004 fa2f 	bl	8004cfc <HAL_SPI_Init>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fb93 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI1_Init+0x88>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2140      	movs	r1, #64	; 0x40
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fd5e 	bl	800236e <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200004e0 	.word	0x200004e0
 80008bc:	40013000 	.word	0x40013000
 80008c0:	48000400 	.word	0x48000400

080008c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	231c      	movs	r3, #28
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f00a fa24 	bl	800ad20 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM14_Init+0x90>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e0:	222f      	movs	r2, #47	; 0x2f
 80008e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_TIM14_Init+0x94>)
 80008ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f004 fab4 	bl	8004e6c <HAL_TIM_Base_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000908:	f000 fb60 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_TIM14_Init+0x8c>)
 800090e:	0018      	movs	r0, r3
 8000910:	f004 fb4e 	bl	8004fb0 <HAL_TIM_OC_Init>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 fb58 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_TIM14_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f004 fca6 	bl	800528c <HAL_TIM_OC_ConfigChannel>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000944:	f000 fb42 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b008      	add	sp, #32
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000544 	.word	0x20000544
 8000954:	40002000 	.word	0x40002000
 8000958:	0000270f 	.word	0x0000270f

0800095c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000968:	2296      	movs	r2, #150	; 0x96
 800096a:	0212      	lsls	r2, r2, #8
 800096c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f004 ff77 	bl	8005894 <HAL_UART_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 fb0f 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000458 	.word	0x20000458
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_DMA_Init+0x38>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2009      	movs	r0, #9
 80009e0:	f001 f97a 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e4:	2009      	movs	r0, #9
 80009e6:	f001 f98c 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2414      	movs	r4, #20
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2314      	movs	r3, #20
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f00a f989 	bl	800ad20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b6a      	ldr	r3, [pc, #424]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	03c9      	lsls	r1, r1, #15
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b67      	ldr	r3, [pc, #412]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0309      	lsls	r1, r1, #12
 8000a34:	430a      	orrs	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	031b      	lsls	r3, r3, #12
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a48:	695a      	ldr	r2, [r3, #20]
 8000a4a:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0289      	lsls	r1, r1, #10
 8000a50:	430a      	orrs	r2, r1
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	029b      	lsls	r3, r3, #10
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	02c9      	lsls	r1, r1, #11
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	02db      	lsls	r3, r3, #11
 8000a78:	4013      	ands	r3, r2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0349      	lsls	r1, r1, #13
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	035b      	lsls	r3, r3, #13
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000a9a:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <MX_GPIO_Init+0x1c8>)
 8000a9c:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x1cc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fc64 	bl	800236e <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000aa6:	239e      	movs	r3, #158	; 0x9e
 8000aa8:	015b      	lsls	r3, r3, #5
 8000aaa:	4847      	ldr	r0, [pc, #284]	; (8000bc8 <MX_GPIO_Init+0x1d0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f001 fc5d 	bl	800236e <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	0219      	lsls	r1, r3, #8
 8000ab8:	2390      	movs	r3, #144	; 0x90
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fc55 	bl	800236e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <MX_GPIO_Init+0x1c8>)
 8000ac8:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2201      	movs	r2, #1
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x1cc>)
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	f001 faae 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ae8:	0021      	movs	r1, r4
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	229e      	movs	r2, #158	; 0x9e
 8000aee:	0152      	lsls	r2, r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	000c      	movs	r4, r1
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2201      	movs	r2, #1
 8000af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0x1d0>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f001 fa99 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	22c0      	movs	r2, #192	; 0xc0
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2288      	movs	r2, #136	; 0x88
 8000b1e:	0352      	lsls	r2, r2, #13
 8000b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2202      	movs	r2, #2
 8000b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	193a      	adds	r2, r7, r4
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fa87 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	00d2      	lsls	r2, r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	193a      	adds	r2, r7, r4
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fa76 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000b58:	0021      	movs	r1, r4
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0212      	lsls	r2, r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	000c      	movs	r4, r1
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fa60 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2204      	movs	r2, #4
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <MX_GPIO_Init+0x1d4>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f001 fa51 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f001 f896 	bl	8001cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bac:	2007      	movs	r0, #7
 8000bae:	f001 f8a8 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b00b      	add	sp, #44	; 0x2c
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	0000f3c4 	.word	0x0000f3c4
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00

08000bd0 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af02      	add	r7, sp, #8
	flags.ten_ms = 0;
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <clkHandler+0x138>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	438a      	bics	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
	flags.sec	= 0;
 8000be0:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <clkHandler+0x138>)
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	2102      	movs	r1, #2
 8000be6:	438a      	bics	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
	flags.min	= 0;
 8000bea:	4b47      	ldr	r3, [pc, #284]	; (8000d08 <clkHandler+0x138>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	2104      	movs	r1, #4
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
	flags.hour	= 0;
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <clkHandler+0x138>)
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	sysTime++;
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <clkHandler+0x13c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <clkHandler+0x13c>)
 8000c06:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8000c08:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <clkHandler+0x13c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2164      	movs	r1, #100	; 0x64
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb12 	bl	8000238 <__aeabi_uidivmod>
 8000c14:	1e0b      	subs	r3, r1, #0
 8000c16:	d109      	bne.n	8000c2c <clkHandler+0x5c>
	{
		sysTime_sec++;
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <clkHandler+0x140>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <clkHandler+0x140>)
 8000c20:	601a      	str	r2, [r3, #0]
		flags.sec = 1;
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <clkHandler+0x138>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	2102      	movs	r1, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
	}

	if(flags.sec)
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <clkHandler+0x138>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2202      	movs	r2, #2
 8000c32:	4013      	ands	r3, r2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d042      	beq.n	8000cc0 <clkHandler+0xf0>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <clkHandler+0x140>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	213c      	movs	r1, #60	; 0x3c
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff faf9 	bl	8000238 <__aeabi_uidivmod>
 8000c46:	1e0b      	subs	r3, r1, #0
 8000c48:	d110      	bne.n	8000c6c <clkHandler+0x9c>
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <clkHandler+0x140>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00c      	beq.n	8000c6c <clkHandler+0x9c>
		{
			sysTime_sec = 0;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <clkHandler+0x140>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <clkHandler+0x144>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <clkHandler+0x144>)
 8000c60:	601a      	str	r2, [r3, #0]
			flags.min = 1;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <clkHandler+0x138>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	2104      	movs	r1, #4
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
		}

		if(flags.min)
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <clkHandler+0x138>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2204      	movs	r2, #4
 8000c72:	4013      	ands	r3, r2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d022      	beq.n	8000cc0 <clkHandler+0xf0>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <clkHandler+0x144>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	213c      	movs	r1, #60	; 0x3c
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fad9 	bl	8000238 <__aeabi_uidivmod>
 8000c86:	1e0b      	subs	r3, r1, #0
 8000c88:	d11a      	bne.n	8000cc0 <clkHandler+0xf0>
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <clkHandler+0x144>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <clkHandler+0xf0>
			{

				sysTime_sec = 0;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <clkHandler+0x140>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <clkHandler+0x144>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <clkHandler+0x148>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <clkHandler+0x148>)
 8000ca6:	601a      	str	r2, [r3, #0]
				flags.hour = 1;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <clkHandler+0x138>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	2108      	movs	r1, #8
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
				if(sysTime_hour >= 23)
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <clkHandler+0x148>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b16      	cmp	r3, #22
 8000cb8:	d902      	bls.n	8000cc0 <clkHandler+0xf0>
					sysTime_hour = 0;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <clkHandler+0x148>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(flags.sec)
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <clkHandler+0x138>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d018      	beq.n	8000d00 <clkHandler+0x130>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <clkHandler+0x148>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <clkHandler+0x144>)
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <clkHandler+0x140>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <clkHandler+0x14c>)
 8000cdc:	0038      	movs	r0, r7
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	f00a f8df 	bl	800aea4 <siprintf>
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <clkHandler+0x150>)
 8000ce8:	681c      	ldr	r4, [r3, #0]
 8000cea:	003b      	movs	r3, r7
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fa0b 	bl	8000108 <strlen>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f000 f9d7 	bl	80010ae <pushStr>
	}
#endif
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b009      	add	sp, #36	; 0x24
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	2000058c 	.word	0x2000058c
 8000d0c:	200001fc 	.word	0x200001fc
 8000d10:	20000200 	.word	0x20000200
 8000d14:	20000204 	.word	0x20000204
 8000d18:	20000208 	.word	0x20000208
 8000d1c:	0800b594 	.word	0x0800b594
 8000d20:	200004dc 	.word	0x200004dc

08000d24 <buttonDebounce>:

void buttonDebounce()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if(flags.butt0_int)
 8000d28:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <buttonDebounce+0xe8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d031      	beq.n	8000d9a <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	009a      	lsls	r2, r3, #2
 8000d3a:	2390      	movs	r3, #144	; 0x90
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 faf7 	bl	8002334 <HAL_GPIO_ReadPin>
 8000d46:	0003      	movs	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d106      	bne.n	8000d5a <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <buttonDebounce+0xec>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <buttonDebounce+0xec>)
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e007      	b.n	8000d6a <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <buttonDebounce+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <buttonDebounce+0xe8>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	2110      	movs	r1, #16
 8000d66:	438a      	bics	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <buttonDebounce+0xec>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d913      	bls.n	8000d9a <buttonDebounce+0x76>
		{
			flags.butt0_ver = 1;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <buttonDebounce+0xe8>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	2120      	movs	r1, #32
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <buttonDebounce+0xe8>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	2110      	movs	r1, #16
 8000d82:	438a      	bics	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
			button0_Debounce = 0;
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <buttonDebounce+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <buttonDebounce+0xf0>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f001 fb07 	bl	80023a8 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.butt1_int)
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <buttonDebounce+0xe8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	4013      	ands	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02e      	beq.n	8000e06 <buttonDebounce+0xe2>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	005a      	lsls	r2, r3, #1
 8000dac:	2390      	movs	r3, #144	; 0x90
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 fabe 	bl	8002334 <HAL_GPIO_ReadPin>
 8000db8:	0003      	movs	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d106      	bne.n	8000dcc <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <buttonDebounce+0xf4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <buttonDebounce+0xf4>)
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e007      	b.n	8000ddc <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <buttonDebounce+0xf4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
			flags.butt1_int = 0;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <buttonDebounce+0xe8>)
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	438a      	bics	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <buttonDebounce+0xf4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d910      	bls.n	8000e06 <buttonDebounce+0xe2>
		{
			flags.butt1_ver = 1;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <buttonDebounce+0xe8>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4249      	negs	r1, r1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
			flags.butt1_int;
			button1_Debounce = 0;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <buttonDebounce+0xf4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	021a      	lsls	r2, r3, #8
 8000dfa:	2390      	movs	r3, #144	; 0x90
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fad1 	bl	80023a8 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000058c 	.word	0x2000058c
 8000e10:	2000020c 	.word	0x2000020c
 8000e14:	48000400 	.word	0x48000400
 8000e18:	2000020d 	.word	0x2000020d

08000e1c <comHandler>:

//_____Obsluha komunikace s PC přes USB_____//
void comHandler()
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000e22:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <comHandler+0x18c>)
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <comHandler+0x16>
 8000e30:	e088      	b.n	8000f44 <comHandler+0x128>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000e32:	e076      	b.n	8000f22 <comHandler+0x106>
		{
			uint8_t txt[30];

			switch(instruction)
 8000e34:	2337      	movs	r3, #55	; 0x37
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b73      	cmp	r3, #115	; 0x73
 8000e3c:	d008      	beq.n	8000e50 <comHandler+0x34>
 8000e3e:	dc5b      	bgt.n	8000ef8 <comHandler+0xdc>
 8000e40:	2b70      	cmp	r3, #112	; 0x70
 8000e42:	d02f      	beq.n	8000ea4 <comHandler+0x88>
 8000e44:	dc58      	bgt.n	8000ef8 <comHandler+0xdc>
 8000e46:	2b63      	cmp	r3, #99	; 0x63
 8000e48:	d017      	beq.n	8000e7a <comHandler+0x5e>
 8000e4a:	2b6b      	cmp	r3, #107	; 0x6b
 8000e4c:	d03f      	beq.n	8000ece <comHandler+0xb2>
 8000e4e:	e053      	b.n	8000ef8 <comHandler+0xdc>
			{
			case 's': ;
				//___Start testu___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
 8000e50:	4a56      	ldr	r2, [pc, #344]	; (8000fac <comHandler+0x190>)
 8000e52:	2518      	movs	r5, #24
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f00a f823 	bl	800aea4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000e5e:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <comHandler+0x194>)
 8000e60:	681c      	ldr	r4, [r3, #0]
 8000e62:	197b      	adds	r3, r7, r5
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff f94f 	bl	8000108 <strlen>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f000 f91b 	bl	80010ae <pushStr>
#endif
				break;
 8000e78:	e053      	b.n	8000f22 <comHandler+0x106>

			case'c': ;
				//___Ukončení___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <comHandler+0x198>)
 8000e7c:	2518      	movs	r5, #24
 8000e7e:	197b      	adds	r3, r7, r5
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f00a f80e 	bl	800aea4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <comHandler+0x194>)
 8000e8a:	681c      	ldr	r4, [r3, #0]
 8000e8c:	197b      	adds	r3, r7, r5
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff f93a 	bl	8000108 <strlen>
 8000e94:	0003      	movs	r3, r0
 8000e96:	001a      	movs	r2, r3
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	0020      	movs	r0, r4
 8000e9e:	f000 f906 	bl	80010ae <pushStr>
#endif
				break;
 8000ea2:	e03e      	b.n	8000f22 <comHandler+0x106>

			case'p': ;
				//___Pauza___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
 8000ea4:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <comHandler+0x19c>)
 8000ea6:	2518      	movs	r5, #24
 8000ea8:	197b      	adds	r3, r7, r5
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f009 fff9 	bl	800aea4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <comHandler+0x194>)
 8000eb4:	681c      	ldr	r4, [r3, #0]
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff f925 	bl	8000108 <strlen>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	197b      	adds	r3, r7, r5
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f000 f8f1 	bl	80010ae <pushStr>
#endif
				break;
 8000ecc:	e029      	b.n	8000f22 <comHandler+0x106>

			case'k': ;
				//___Kalibrace___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
 8000ece:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <comHandler+0x1a0>)
 8000ed0:	2518      	movs	r5, #24
 8000ed2:	197b      	adds	r3, r7, r5
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f009 ffe4 	bl	800aea4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <comHandler+0x194>)
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	197b      	adds	r3, r7, r5
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff f910 	bl	8000108 <strlen>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	001a      	movs	r2, r3
 8000eec:	197b      	adds	r3, r7, r5
 8000eee:	0019      	movs	r1, r3
 8000ef0:	0020      	movs	r0, r4
 8000ef2:	f000 f8dc 	bl	80010ae <pushStr>
#endif
				break;
 8000ef6:	e014      	b.n	8000f22 <comHandler+0x106>

			default: ;
				//___Neplatný příkaz___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <comHandler+0x1a4>)
 8000efa:	2518      	movs	r5, #24
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f009 ffcf 	bl	800aea4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <comHandler+0x194>)
 8000f08:	681c      	ldr	r4, [r3, #0]
 8000f0a:	197b      	adds	r3, r7, r5
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff f8fb 	bl	8000108 <strlen>
 8000f12:	0003      	movs	r3, r0
 8000f14:	001a      	movs	r2, r3
 8000f16:	197b      	adds	r3, r7, r5
 8000f18:	0019      	movs	r1, r3
 8000f1a:	0020      	movs	r0, r4
 8000f1c:	f000 f8c7 	bl	80010ae <pushStr>
#endif
				break;
 8000f20:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <comHandler+0x1a8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2237      	movs	r2, #55	; 0x37
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 f8e6 	bl	80010fe <pop>
 8000f32:	0003      	movs	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d000      	beq.n	8000f3a <comHandler+0x11e>
 8000f38:	e77c      	b.n	8000e34 <comHandler+0x18>
			}
		}
		flags.data_received = 0;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <comHandler+0x18c>)
 8000f3c:	785a      	ldrb	r2, [r3, #1]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	438a      	bics	r2, r1
 8000f42:	705a      	strb	r2, [r3, #1]
	}

	//___Odesílání dat___//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <comHandler+0x194>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	7d1b      	ldrb	r3, [r3, #20]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d112      	bne.n	8000f74 <comHandler+0x158>
	{
		char msg[] = {"Buffer full\n"};
 8000f4e:	2108      	movs	r1, #8
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <comHandler+0x1ac>)
 8000f54:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000f56:	c331      	stmia	r3!, {r0, r4, r5}
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff f8d1 	bl	8000108 <strlen>
 8000f66:	0003      	movs	r3, r0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f009 f9dc 	bl	800a32c <CDC_Transmit_FS>
	}
	if(USB_Tx_Buffer->filled)
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <comHandler+0x194>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00f      	beq.n	8000f9e <comHandler+0x182>
	{
		char tmp;
		while(pop(USB_Tx_Buffer, &tmp) != BUFFER_EMPTY)
 8000f7e:	e004      	b.n	8000f8a <comHandler+0x16e>
		{
			CDC_Transmit_FS(&tmp, 1);
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	2101      	movs	r1, #1
 8000f84:	0018      	movs	r0, r3
 8000f86:	f009 f9d1 	bl	800a32c <CDC_Transmit_FS>
		while(pop(USB_Tx_Buffer, &tmp) != BUFFER_EMPTY)
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <comHandler+0x194>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f8b3 	bl	80010fe <pop>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d1f0      	bne.n	8000f80 <comHandler+0x164>
		}
	}

}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b00e      	add	sp, #56	; 0x38
 8000fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	2000058c 	.word	0x2000058c
 8000fac:	0800b5a4 	.word	0x0800b5a4
 8000fb0:	200004dc 	.word	0x200004dc
 8000fb4:	0800b5ac 	.word	0x0800b5ac
 8000fb8:	0800b5b8 	.word	0x0800b5b8
 8000fbc:	0800b5c0 	.word	0x0800b5c0
 8000fc0:	0800b5cc 	.word	0x0800b5cc
 8000fc4:	200010ac 	.word	0x200010ac
 8000fc8:	0800b5e0 	.word	0x0800b5e0

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>

08000fd6 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8000fde:	2018      	movs	r0, #24
 8000fe0:	f009 fe8a 	bl	800acf8 <malloc>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <createBuffer+0x1c>
	{
		return NULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e022      	b.n	8001038 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f009 fe7f 	bl	800acf8 <malloc>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <createBuffer+0x40>
	{
		free(buffer);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	0018      	movs	r0, r3
 800100e:	f009 fe7d 	bl	800ad0c <free>
		return NULL;
 8001012:	2300      	movs	r3, #0
 8001014:	e010      	b.n	8001038 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}

08001040 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	000a      	movs	r2, r1
 800104a:	1cfb      	adds	r3, r7, #3
 800104c:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7d1b      	ldrb	r3, [r3, #20]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d101      	bne.n	800105a <push+0x1a>
		return BUFFER_FULL;
 8001056:	2302      	movs	r3, #2
 8001058:	e025      	b.n	80010a6 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	0019      	movs	r1, r3
 8001066:	0010      	movs	r0, r2
 8001068:	f7ff f9d0 	bl	800040c <__aeabi_idivmod>
 800106c:	000b      	movs	r3, r1
 800106e:	001a      	movs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	1cfa      	adds	r2, r7, #3
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	db01      	blt.n	800109e <push+0x5e>
 800109a:	2202      	movs	r2, #2
 800109c:	e000      	b.n	80010a0 <push+0x60>
 800109e:	2200      	movs	r2, #0
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}

080010ae <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6899      	ldr	r1, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	18cb      	adds	r3, r1, r3
 80010c6:	429a      	cmp	r2, r3
 80010c8:	da01      	bge.n	80010ce <pushStr+0x20>
		return BUFFER_FULL;
 80010ca:	2302      	movs	r3, #2
 80010cc:	e013      	b.n	80010f6 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e00b      	b.n	80010ec <pushStr+0x3e>
	{
		push(buffer, str[i]);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	18d3      	adds	r3, r2, r3
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ffad 	bl	8001040 <push>
	for(int i = 0; i < len; i++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbef      	blt.n	80010d4 <pushStr+0x26>
	}

	return BUFFER_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b006      	add	sp, #24
 80010fc:	bd80      	pop	{r7, pc}

080010fe <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7d1b      	ldrb	r3, [r3, #20]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <pop+0x16>
		return BUFFER_EMPTY;
 8001110:	2301      	movs	r3, #1
 8001112:	e023      	b.n	800115c <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	0019      	movs	r1, r3
 8001130:	0010      	movs	r0, r2
 8001132:	f7ff f96b 	bl	800040c <__aeabi_idivmod>
 8001136:	000b      	movs	r3, r1
 8001138:	001a      	movs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	1e5a      	subs	r2, r3, #1
 800114e:	4313      	orrs	r3, r2
 8001150:	0fdb      	lsrs	r3, r3, #31
 8001152:	b2db      	uxtb	r3, r3
 8001154:	001a      	movs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x44>)
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_MspInit+0x44>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x44>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x44>)
 8001184:	69da      	ldr	r2, [r3, #28]
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_MspInit+0x44>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0549      	lsls	r1, r1, #21
 800118c:	430a      	orrs	r2, r1
 800118e:	61da      	str	r2, [r3, #28]
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_MspInit+0x44>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	055b      	lsls	r3, r3, #21
 8001198:	4013      	ands	r3, r2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b08d      	sub	sp, #52	; 0x34
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	241c      	movs	r4, #28
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	0018      	movs	r0, r3
 80011ba:	2314      	movs	r3, #20
 80011bc:	001a      	movs	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f009 fdae 	bl	800ad20 <memset>
  if(hadc->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_ADC_MspInit+0x148>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d000      	beq.n	80011d0 <HAL_ADC_MspInit+0x24>
 80011ce:	e08d      	b.n	80012ec <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	0089      	lsls	r1, r1, #2
 80011da:	430a      	orrs	r2, r1
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0309      	lsls	r1, r1, #12
 80011f6:	430a      	orrs	r2, r1
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	4013      	ands	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0289      	lsls	r1, r1, #10
 8001212:	430a      	orrs	r2, r1
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	02c9      	lsls	r1, r1, #11
 800122e:	430a      	orrs	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <HAL_ADC_MspInit+0x14c>)
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	02db      	lsls	r3, r3, #11
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001240:	193b      	adds	r3, r7, r4
 8001242:	223f      	movs	r2, #63	; 0x3f
 8001244:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2203      	movs	r2, #3
 800124a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	193b      	adds	r3, r7, r4
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	193b      	adds	r3, r7, r4
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <HAL_ADC_MspInit+0x150>)
 8001256:	0019      	movs	r1, r3
 8001258:	0010      	movs	r0, r2
 800125a:	f000 fef3 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800125e:	193b      	adds	r3, r7, r4
 8001260:	22ff      	movs	r2, #255	; 0xff
 8001262:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	2203      	movs	r2, #3
 8001268:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	193b      	adds	r3, r7, r4
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	193a      	adds	r2, r7, r4
 8001272:	2390      	movs	r3, #144	; 0x90
 8001274:	05db      	lsls	r3, r3, #23
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f000 fee3 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2203      	movs	r2, #3
 8001282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2203      	movs	r2, #3
 8001288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	193b      	adds	r3, r7, r4
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_ADC_MspInit+0x154>)
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f000 fed4 	bl	8002044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_ADC_MspInit+0x158>)
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_ADC_MspInit+0x15c>)
 80012a0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	0052      	lsls	r2, r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fd32 	bl	8001d3c <HAL_DMA_Init>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d001      	beq.n	80012e0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80012dc:	f7ff fe76 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_ADC_MspInit+0x158>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b00d      	add	sp, #52	; 0x34
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	40012400 	.word	0x40012400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000400 	.word	0x48000400
 8001304:	20000590 	.word	0x20000590
 8001308:	40020008 	.word	0x40020008

0800130c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b08b      	sub	sp, #44	; 0x2c
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	2414      	movs	r4, #20
 8001316:	193b      	adds	r3, r7, r4
 8001318:	0018      	movs	r0, r3
 800131a:	2314      	movs	r3, #20
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f009 fcfe 	bl	800ad20 <memset>
  if(hspi->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_SPI_MspInit+0x90>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d131      	bne.n	8001392 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0149      	lsls	r1, r1, #5
 8001338:	430a      	orrs	r2, r1
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	02c9      	lsls	r1, r1, #11
 8001354:	430a      	orrs	r2, r1
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_SPI_MspInit+0x94>)
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	02db      	lsls	r3, r3, #11
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001366:	0021      	movs	r1, r4
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2238      	movs	r2, #56	; 0x38
 800136c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2202      	movs	r2, #2
 8001372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2203      	movs	r2, #3
 800137e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	187b      	adds	r3, r7, r1
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_SPI_MspInit+0x98>)
 800138a:	0019      	movs	r1, r3
 800138c:	0010      	movs	r0, r2
 800138e:	f000 fe59 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b00b      	add	sp, #44	; 0x2c
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40013000 	.word	0x40013000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_TIM_Base_MspInit+0x48>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d115      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_TIM_Base_MspInit+0x4c>)
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_Base_MspInit+0x4c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0049      	lsls	r1, r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	61da      	str	r2, [r3, #28]
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_TIM_Base_MspInit+0x4c>)
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2013      	movs	r0, #19
 80013dc:	f000 fc7c 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80013e0:	2013      	movs	r0, #19
 80013e2:	f000 fc8e 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	40002000 	.word	0x40002000
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	2414      	movs	r4, #20
 8001402:	193b      	adds	r3, r7, r4
 8001404:	0018      	movs	r0, r3
 8001406:	2314      	movs	r3, #20
 8001408:	001a      	movs	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	f009 fc88 	bl	800ad20 <memset>
  if(huart->Instance==USART3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <HAL_UART_MspInit+0xa0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d13a      	bne.n	8001490 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_UART_MspInit+0xa4>)
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_UART_MspInit+0xa4>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	02c9      	lsls	r1, r1, #11
 8001424:	430a      	orrs	r2, r1
 8001426:	61da      	str	r2, [r3, #28]
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_UART_MspInit+0xa4>)
 800142a:	69da      	ldr	r2, [r3, #28]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	02db      	lsls	r3, r3, #11
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_UART_MspInit+0xa4>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UART_MspInit+0xa4>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0309      	lsls	r1, r1, #12
 8001440:	430a      	orrs	r2, r1
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0xa4>)
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	031b      	lsls	r3, r3, #12
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	22c0      	movs	r2, #192	; 0xc0
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	0021      	movs	r1, r4
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2202      	movs	r2, #2
 8001460:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001468:	187b      	adds	r3, r7, r1
 800146a:	2203      	movs	r2, #3
 800146c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2201      	movs	r2, #1
 8001472:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	187b      	adds	r3, r7, r1
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_UART_MspInit+0xa8>)
 8001478:	0019      	movs	r1, r3
 800147a:	0010      	movs	r0, r2
 800147c:	f000 fde2 	bl	8002044 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	201d      	movs	r0, #29
 8001486:	f000 fc27 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800148a:	201d      	movs	r0, #29
 800148c:	f000 fc39 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b00b      	add	sp, #44	; 0x2c
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	40004800 	.word	0x40004800
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f8f0 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 ff80 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 ff7b 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <DMA1_Channel1_IRQHandler+0x14>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fce5 	bl	8001ec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	20000590 	.word	0x20000590

08001508 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <TIM14_IRQHandler+0x14>)
 800150e:	0018      	movs	r0, r3
 8001510:	f003 fda6 	bl	8005060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	20000544 	.word	0x20000544

08001520 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <USART3_4_IRQHandler+0x14>)
 8001526:	0018      	movs	r0, r3
 8001528:	f004 fa08 	bl	800593c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	20000458 	.word	0x20000458

08001538 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <USB_IRQHandler+0x14>)
 800153e:	0018      	movs	r0, r3
 8001540:	f001 f8a0 	bl	8002684 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	200012b0 	.word	0x200012b0

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f009 fb90 	bl	800aca4 <__errno>
 8001584:	0003      	movs	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	2301      	movs	r3, #1
 800158c:	425b      	negs	r3, r3
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	18d2      	adds	r2, r2, r3
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b006      	add	sp, #24
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20004000 	.word	0x20004000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000210 	.word	0x20000210
 80015b8:	200015b8 	.word	0x200015b8

080015bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015f2:	f7ff ffe3 	bl	80015bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80015f6:	f009 fb5b 	bl	800acb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fa:	f7fe ff45 	bl	8000488 <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
  ldr   r0, =_estack
 8001600:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800160c:	0800b79c 	.word	0x0800b79c
  ldr r2, =_sbss
 8001610:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001614:	200015b4 	.word	0x200015b4

08001618 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_COMP_IRQHandler>
	...

0800161c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_Init+0x24>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_Init+0x24>)
 8001626:	2110      	movs	r1, #16
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f809 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001632:	f7ff fd97 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_InitTick+0x5c>)
 800164e:	681c      	ldr	r4, [r3, #0]
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	0019      	movs	r1, r3
 8001656:	23fa      	movs	r3, #250	; 0xfa
 8001658:	0098      	lsls	r0, r3, #2
 800165a:	f7fe fd67 	bl	800012c <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	0019      	movs	r1, r3
 8001662:	0020      	movs	r0, r4
 8001664:	f7fe fd62 	bl	800012c <__udivsi3>
 8001668:	0003      	movs	r3, r0
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fb59 	bl	8001d22 <HAL_SYSTICK_Config>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e00f      	b.n	8001698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d80b      	bhi.n	8001696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2301      	movs	r3, #1
 8001682:	425b      	negs	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	0018      	movs	r0, r3
 8001688:	f000 fb26 	bl	8001cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_InitTick+0x64>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b003      	add	sp, #12
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	18d2      	adds	r2, r2, r3
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_IncTick+0x20>)
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000614 	.word	0x20000614

080016d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	20000614 	.word	0x20000614

080016e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e125      	b.n	800194e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10a      	bne.n	8001720 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2234      	movs	r2, #52	; 0x34
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fd46 	bl	80011ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d000      	beq.n	800172c <HAL_ADC_Init+0x48>
 800172a:	e103      	b.n	8001934 <HAL_ADC_Init+0x250>
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d000      	beq.n	8001738 <HAL_ADC_Init+0x54>
 8001736:	e0fd      	b.n	8001934 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2204      	movs	r2, #4
 8001740:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001742:	d000      	beq.n	8001746 <HAL_ADC_Init+0x62>
 8001744:	e0f6      	b.n	8001934 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	4a83      	ldr	r2, [pc, #524]	; (8001958 <HAL_ADC_Init+0x274>)
 800174c:	4013      	ands	r3, r2
 800174e:	2202      	movs	r2, #2
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d112      	bne.n	800178a <HAL_ADC_Init+0xa6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4013      	ands	r3, r2
 800176e:	2b01      	cmp	r3, #1
 8001770:	d009      	beq.n	8001786 <HAL_ADC_Init+0xa2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	401a      	ands	r2, r3
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	429a      	cmp	r2, r3
 8001784:	d101      	bne.n	800178a <HAL_ADC_Init+0xa6>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_ADC_Init+0xa8>
 800178a:	2300      	movs	r3, #0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d116      	bne.n	80017be <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2218      	movs	r2, #24
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	0899      	lsrs	r1, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4964      	ldr	r1, [pc, #400]	; (800195c <HAL_ADC_Init+0x278>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e1b      	ldrb	r3, [r3, #24]
 80017d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e5b      	ldrb	r3, [r3, #25]
 80017d8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017da:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7e9b      	ldrb	r3, [r3, #26]
 80017e0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Init+0x10e>
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	015b      	lsls	r3, r3, #5
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Init+0x110>
 80017f2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017f4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017fa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d101      	bne.n	8001808 <HAL_ADC_Init+0x124>
 8001804:	2304      	movs	r3, #4
 8001806:	e000      	b.n	800180a <HAL_ADC_Init+0x126>
 8001808:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800180a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2124      	movs	r1, #36	; 0x24
 8001810:	5c5b      	ldrb	r3, [r3, r1]
 8001812:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001814:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4313      	orrs	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7edb      	ldrb	r3, [r3, #27]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d115      	bne.n	8001850 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7e9b      	ldrb	r3, [r3, #26]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0252      	lsls	r2, r2, #9
 8001832:	4313      	orrs	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	e00b      	b.n	8001850 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	2220      	movs	r2, #32
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	2201      	movs	r2, #1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	23c2      	movs	r3, #194	; 0xc2
 8001856:	33ff      	adds	r3, #255	; 0xff
 8001858:	429a      	cmp	r2, r3
 800185a:	d007      	beq.n	800186c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001864:	4313      	orrs	r3, r2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4313      	orrs	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68d9      	ldr	r1, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	430a      	orrs	r2, r1
 800187a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	429a      	cmp	r2, r3
 8001886:	d01b      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d017      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	2b02      	cmp	r3, #2
 8001896:	d013      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	2b03      	cmp	r3, #3
 800189e:	d00f      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00b      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d007      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d003      	beq.n	80018c0 <HAL_ADC_Init+0x1dc>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	2b07      	cmp	r3, #7
 80018be:	d112      	bne.n	80018e6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2107      	movs	r1, #7
 80018cc:	438a      	bics	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6959      	ldr	r1, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	2207      	movs	r2, #7
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_ADC_Init+0x27c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d10b      	bne.n	800190e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	2203      	movs	r2, #3
 8001902:	4393      	bics	r3, r2
 8001904:	2201      	movs	r2, #1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800190c:	e01c      	b.n	8001948 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	2212      	movs	r2, #18
 8001914:	4393      	bics	r3, r2
 8001916:	2210      	movs	r2, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2201      	movs	r2, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001932:	e009      	b.n	8001948 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001938:	2210      	movs	r2, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001940:	230f      	movs	r3, #15
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	fffffefd 	.word	0xfffffefd
 800195c:	fffe0219 	.word	0xfffe0219
 8001960:	833fffe7 	.word	0x833fffe7

08001964 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	055b      	lsls	r3, r3, #21
 8001982:	429a      	cmp	r2, r3
 8001984:	d011      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x46>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d00d      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x46>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2b02      	cmp	r3, #2
 8001994:	d009      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x46>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	2b03      	cmp	r3, #3
 800199c:	d005      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x46>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d001      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x46>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2234      	movs	r2, #52	; 0x34
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x54>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0d0      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x1f6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2234      	movs	r2, #52	; 0x34
 80019bc:	2101      	movs	r1, #1
 80019be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d000      	beq.n	80019ce <HAL_ADC_ConfigChannel+0x6a>
 80019cc:	e0b4      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a64      	ldr	r2, [pc, #400]	; (8001b64 <HAL_ADC_ConfigChannel+0x200>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_ADC_ConfigChannel+0x76>
 80019d8:	e082      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	055b      	lsls	r3, r3, #21
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d037      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d033      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d02f      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d02b      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d027      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d023      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d01f      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d01b      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2107      	movs	r1, #7
 8001a40:	400b      	ands	r3, r1
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d012      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2107      	movs	r1, #7
 8001a52:	438a      	bics	r2, r1
 8001a54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2207      	movs	r2, #7
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d007      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0x120>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b11      	cmp	r3, #17
 8001a7a:	d003      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0x120>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d163      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_ADC_ConfigChannel+0x204>)
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d009      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0x140>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b11      	cmp	r3, #17
 8001a96:	d102      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x13a>
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	03db      	lsls	r3, r3, #15
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x144>
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	045b      	lsls	r3, r3, #17
 8001aa2:	e001      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x144>
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <HAL_ADC_ConfigChannel+0x204>)
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d14a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_ADC_ConfigChannel+0x208>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	492d      	ldr	r1, [pc, #180]	; (8001b70 <HAL_ADC_ConfigChannel+0x20c>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fb35 	bl	800012c <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	189b      	adds	r3, r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f9      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x16e>
 8001ade:	e035      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4099      	lsls	r1, r3
 8001aee:	000b      	movs	r3, r1
 8001af0:	43d9      	mvns	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b10      	cmp	r3, #16
 8001b00:	d007      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x1ae>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b11      	cmp	r3, #17
 8001b08:	d003      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x1ae>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d11c      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_ADC_ConfigChannel+0x204>)
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d007      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x1ca>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x1c6>
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_ADC_ConfigChannel+0x210>)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1cc>
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_ADC_ConfigChannel+0x214>)
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1cc>
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_ADC_ConfigChannel+0x218>)
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_ADC_ConfigChannel+0x204>)
 8001b32:	400b      	ands	r3, r1
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e009      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b44:	230f      	movs	r3, #15
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2234      	movs	r2, #52	; 0x34
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b004      	add	sp, #16
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	00001001 	.word	0x00001001
 8001b68:	40012708 	.word	0x40012708
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	000f4240 	.word	0x000f4240
 8001b74:	ffbfffff 	.word	0xffbfffff
 8001b78:	feffffff 	.word	0xfeffffff
 8001b7c:	ff7fffff 	.word	0xff7fffff

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b7f      	cmp	r3, #127	; 0x7f
 8001b92:	d809      	bhi.n	8001ba8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	231f      	movs	r3, #31
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_EnableIRQ+0x30>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4091      	lsls	r1, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
  }
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bc8:	d828      	bhi.n	8001c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bca:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <__NVIC_SetPriority+0xd4>)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	33c0      	adds	r3, #192	; 0xc0
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	589b      	ldr	r3, [r3, r2]
 8001bda:	1dfa      	adds	r2, r7, #7
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	0011      	movs	r1, r2
 8001be0:	2203      	movs	r2, #3
 8001be2:	400a      	ands	r2, r1
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	21ff      	movs	r1, #255	; 0xff
 8001be8:	4091      	lsls	r1, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	43d2      	mvns	r2, r2
 8001bee:	401a      	ands	r2, r3
 8001bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2303      	movs	r3, #3
 8001c02:	4003      	ands	r3, r0
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c08:	481f      	ldr	r0, [pc, #124]	; (8001c88 <__NVIC_SetPriority+0xd4>)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	430a      	orrs	r2, r1
 8001c14:	33c0      	adds	r3, #192	; 0xc0
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c1a:	e031      	b.n	8001c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <__NVIC_SetPriority+0xd8>)
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	0019      	movs	r1, r3
 8001c24:	230f      	movs	r3, #15
 8001c26:	400b      	ands	r3, r1
 8001c28:	3b08      	subs	r3, #8
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1dfa      	adds	r2, r7, #7
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	400a      	ands	r2, r1
 8001c40:	00d2      	lsls	r2, r2, #3
 8001c42:	21ff      	movs	r1, #255	; 0xff
 8001c44:	4091      	lsls	r1, r2
 8001c46:	000a      	movs	r2, r1
 8001c48:	43d2      	mvns	r2, r2
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	22ff      	movs	r2, #255	; 0xff
 8001c54:	401a      	ands	r2, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	4003      	ands	r3, r0
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <__NVIC_SetPriority+0xd8>)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	001c      	movs	r4, r3
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	4023      	ands	r3, r4
 8001c70:	3b08      	subs	r3, #8
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	430a      	orrs	r2, r1
 8001c76:	3306      	adds	r3, #6
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	18c3      	adds	r3, r0, r3
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b003      	add	sp, #12
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	045b      	lsls	r3, r3, #17
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d301      	bcc.n	8001ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e010      	b.n	8001cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <SysTick_Config+0x44>)
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	3a01      	subs	r2, #1
 8001cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff ff7c 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x44>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x44>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	1c02      	adds	r2, r0, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	0002      	movs	r2, r0
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ff33 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ffaf 	bl	8001c90 <SysTick_Config>
 8001d32:	0003      	movs	r3, r0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e036      	b.n	8001dc0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2221      	movs	r2, #33	; 0x21
 8001d56:	2102      	movs	r1, #2
 8001d58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_DMA_Init+0x8c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f932 	bl	800200c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2221      	movs	r2, #33	; 0x21
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	2100      	movs	r1, #0
 8001dbc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}  
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	ffffc00f 	.word	0xffffc00f

08001dcc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2204      	movs	r2, #4
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e020      	b.n	8001e34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	210e      	movs	r1, #14
 8001dfe:	438a      	bics	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	4091      	lsls	r1, r2
 8001e1e:	000a      	movs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2221      	movs	r2, #33	; 0x21
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	210f      	movs	r1, #15
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2221      	movs	r2, #33	; 0x21
 8001e50:	5c9b      	ldrb	r3, [r3, r2]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d006      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e028      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	210e      	movs	r1, #14
 8001e72:	438a      	bics	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	438a      	bics	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4091      	lsls	r1, r2
 8001e92:	000a      	movs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2221      	movs	r2, #33	; 0x21
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	4798      	blx	r3
    } 
  }
  return status;
 8001eb8:	230f      	movs	r3, #15
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b004      	add	sp, #16
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	d024      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x72>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d020      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	4013      	ands	r3, r2
 8001f00:	d107      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	438a      	bics	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4091      	lsls	r1, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x66>
 8001f2a:	e06a      	b.n	8002002 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	0010      	movs	r0, r2
 8001f34:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	e064      	b.n	8002002 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	d02b      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xda>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d10b      	bne.n	8001f74 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	210a      	movs	r1, #10
 8001f68:	438a      	bics	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2221      	movs	r2, #33	; 0x21
 8001f70:	2101      	movs	r1, #1
 8001f72:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d036      	beq.n	8002002 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f9e:	e030      	b.n	8002002 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	d028      	beq.n	8002002 <HAL_DMA_IRQHandler+0x13c>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d024      	beq.n	8002002 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	210e      	movs	r1, #14
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4091      	lsls	r1, r2
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2221      	movs	r2, #33	; 0x21
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	2100      	movs	r1, #0
 8001fec:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	4798      	blx	r3
    }
   }
}  
 8002000:	e7ff      	b.n	8002002 <HAL_DMA_IRQHandler+0x13c>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a08      	ldr	r2, [pc, #32]	; (800203c <DMA_CalcBaseAndBitshift+0x30>)
 800201a:	4694      	mov	ip, r2
 800201c:	4463      	add	r3, ip
 800201e:	2114      	movs	r1, #20
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe f883 	bl	800012c <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	009a      	lsls	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a03      	ldr	r2, [pc, #12]	; (8002040 <DMA_CalcBaseAndBitshift+0x34>)
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	e155      	b.n	8002300 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4091      	lsls	r1, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <HAL_GPIO_Init+0x28>
 800206a:	e146      	b.n	80022fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	4013      	ands	r3, r2
 8002074:	2b01      	cmp	r3, #1
 8002076:	d005      	beq.n	8002084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002080:	2b02      	cmp	r3, #2
 8002082:	d130      	bne.n	80020e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	409a      	lsls	r2, r3
 8002092:	0013      	movs	r3, r2
 8002094:	43da      	mvns	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	409a      	lsls	r2, r3
 80020a6:	0013      	movs	r3, r2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ba:	2201      	movs	r2, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	43da      	mvns	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	2201      	movs	r2, #1
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d017      	beq.n	8002122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	4013      	ands	r3, r2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d123      	bne.n	8002176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	58d3      	ldr	r3, [r2, r3]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2207      	movs	r2, #7
 8002140:	4013      	ands	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	43da      	mvns	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2107      	movs	r1, #7
 800215a:	400b      	ands	r3, r1
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	6939      	ldr	r1, [r7, #16]
 8002174:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	43da      	mvns	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2203      	movs	r2, #3
 8002194:	401a      	ands	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	d100      	bne.n	80021b8 <HAL_GPIO_Init+0x174>
 80021b6:	e0a0      	b.n	80022fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_GPIO_Init+0x2d4>)
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x2d4>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	619a      	str	r2, [r3, #24]
 80021c4:	4b54      	ldr	r3, [pc, #336]	; (8002318 <HAL_GPIO_Init+0x2d4>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_GPIO_Init+0x2d8>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	589b      	ldr	r3, [r3, r2]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	409a      	lsls	r2, r3
 80021ea:	0013      	movs	r3, r2
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	2390      	movs	r3, #144	; 0x90
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x1ee>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_GPIO_Init+0x2dc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x1ea>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_GPIO_Init+0x2e0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x1e6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a45      	ldr	r2, [pc, #276]	; (8002328 <HAL_GPIO_Init+0x2e4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x1e2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a44      	ldr	r2, [pc, #272]	; (800232c <HAL_GPIO_Init+0x2e8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x1de>
 800221e:	2304      	movs	r3, #4
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x1f0>
 8002222:	2305      	movs	r3, #5
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x1f0>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x1f0>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x1f0>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x1f0>
 8002232:	2300      	movs	r3, #0
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	2103      	movs	r1, #3
 8002238:	400a      	ands	r2, r1
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4093      	lsls	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002244:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_GPIO_Init+0x2d8>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43da      	mvns	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	4013      	ands	r3, r2
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43da      	mvns	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	4013      	ands	r3, r2
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	039b      	lsls	r3, r3, #14
 80022e8:	4013      	ands	r3, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	40da      	lsrs	r2, r3
 8002308:	1e13      	subs	r3, r2, #0
 800230a:	d000      	beq.n	800230e <HAL_GPIO_Init+0x2ca>
 800230c:	e6a2      	b.n	8002054 <HAL_GPIO_Init+0x10>
  } 
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b006      	add	sp, #24
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	48000400 	.word	0x48000400
 8002324:	48000800 	.word	0x48000800
 8002328:	48000c00 	.word	0x48000c00
 800232c:	48001000 	.word	0x48001000
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	000a      	movs	r2, r1
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	1cba      	adds	r2, r7, #2
 8002348:	8812      	ldrh	r2, [r2, #0]
 800234a:	4013      	ands	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800234e:	230f      	movs	r3, #15
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e003      	b.n	8002360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002360:	230f      	movs	r3, #15
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
  }
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b004      	add	sp, #16
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	0008      	movs	r0, r1
 8002378:	0011      	movs	r1, r2
 800237a:	1cbb      	adds	r3, r7, #2
 800237c:	1c02      	adds	r2, r0, #0
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	1c7b      	adds	r3, r7, #1
 8002382:	1c0a      	adds	r2, r1, #0
 8002384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002386:	1c7b      	adds	r3, r7, #1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238e:	1cbb      	adds	r3, r7, #2
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002398:	1cbb      	adds	r3, r7, #2
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023bc:	1cbb      	adds	r3, r7, #2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	1cb9      	adds	r1, r7, #2
 80023cc:	8809      	ldrh	r1, [r1, #0]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	0002      	movs	r2, r0
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	1dba      	adds	r2, r7, #6
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	4013      	ands	r3, r2
 80023f6:	d008      	beq.n	800240a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023fa:	1dba      	adds	r2, r7, #6
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7fe f807 	bl	8000418 <HAL_GPIO_EXTI_Callback>
  }
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	b08b      	sub	sp, #44	; 0x2c
 800241c:	af06      	add	r7, sp, #24
 800241e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0ff      	b.n	800262a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a81      	ldr	r2, [pc, #516]	; (8002634 <HAL_PCD_Init+0x21c>)
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	23aa      	movs	r3, #170	; 0xaa
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	2100      	movs	r1, #0
 800243e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f008 f8d0 	bl	800a5e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_PCD_Init+0x21c>)
 800244c:	2103      	movs	r1, #3
 800244e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f004 f96f 	bl	8006738 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	230f      	movs	r3, #15
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e058      	b.n	8002516 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002464:	200f      	movs	r0, #15
 8002466:	183b      	adds	r3, r7, r0
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	0013      	movs	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	189b      	adds	r3, r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	18cb      	adds	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800247e:	183b      	adds	r3, r7, r0
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	0013      	movs	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	189b      	adds	r3, r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	183a      	adds	r2, r7, r0
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002494:	0004      	movs	r4, r0
 8002496:	183b      	adds	r3, r7, r0
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	193b      	adds	r3, r7, r4
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b298      	uxth	r0, r3
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	0013      	movs	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	18cb      	adds	r3, r1, r3
 80024ac:	3336      	adds	r3, #54	; 0x36
 80024ae:	1c02      	adds	r2, r0, #0
 80024b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	0013      	movs	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	18cb      	adds	r3, r1, r3
 80024c4:	3303      	adds	r3, #3
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	0013      	movs	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	189b      	adds	r3, r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	18cb      	adds	r3, r1, r3
 80024da:	3338      	adds	r3, #56	; 0x38
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	0013      	movs	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	18cb      	adds	r3, r1, r3
 80024f0:	333c      	adds	r3, #60	; 0x3c
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	0013      	movs	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	189b      	adds	r3, r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	18cb      	adds	r3, r1, r3
 8002506:	3340      	adds	r3, #64	; 0x40
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250c:	193b      	adds	r3, r7, r4
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	193b      	adds	r3, r7, r4
 8002512:	3201      	adds	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	210f      	movs	r1, #15
 8002518:	187b      	adds	r3, r7, r1
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d39f      	bcc.n	8002464 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e056      	b.n	80025da <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800252c:	240f      	movs	r4, #15
 800252e:	193b      	adds	r3, r7, r4
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	236a      	movs	r3, #106	; 0x6a
 8002536:	33ff      	adds	r3, #255	; 0xff
 8002538:	0019      	movs	r1, r3
 800253a:	0013      	movs	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	189b      	adds	r3, r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	18c3      	adds	r3, r0, r3
 8002544:	185b      	adds	r3, r3, r1
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	23b4      	movs	r3, #180	; 0xb4
 8002552:	0059      	lsls	r1, r3, #1
 8002554:	0013      	movs	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	189b      	adds	r3, r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	18c3      	adds	r3, r0, r3
 800255e:	185b      	adds	r3, r3, r1
 8002560:	193a      	adds	r2, r7, r4
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002566:	193b      	adds	r3, r7, r4
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	236c      	movs	r3, #108	; 0x6c
 800256e:	33ff      	adds	r3, #255	; 0xff
 8002570:	0019      	movs	r1, r3
 8002572:	0013      	movs	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	189b      	adds	r3, r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	18c3      	adds	r3, r0, r3
 800257c:	185b      	adds	r3, r3, r1
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002582:	193b      	adds	r3, r7, r4
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	23bc      	movs	r3, #188	; 0xbc
 800258a:	0059      	lsls	r1, r3, #1
 800258c:	0013      	movs	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	189b      	adds	r3, r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	18c3      	adds	r3, r0, r3
 8002596:	185b      	adds	r3, r3, r1
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800259c:	193b      	adds	r3, r7, r4
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	23be      	movs	r3, #190	; 0xbe
 80025a4:	0059      	lsls	r1, r3, #1
 80025a6:	0013      	movs	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	18c3      	adds	r3, r0, r3
 80025b0:	185b      	adds	r3, r3, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	0059      	lsls	r1, r3, #1
 80025c0:	0013      	movs	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	18c3      	adds	r3, r0, r3
 80025ca:	185b      	adds	r3, r3, r1
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	3201      	adds	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	230f      	movs	r3, #15
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3a1      	bcc.n	800252c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	466a      	mov	r2, sp
 80025f0:	0011      	movs	r1, r2
 80025f2:	001a      	movs	r2, r3
 80025f4:	3210      	adds	r2, #16
 80025f6:	ca70      	ldmia	r2!, {r4, r5, r6}
 80025f8:	c170      	stmia	r1!, {r4, r5, r6}
 80025fa:	ca30      	ldmia	r2!, {r4, r5}
 80025fc:	c130      	stmia	r1!, {r4, r5}
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f004 f8b2 	bl	800676c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_PCD_Init+0x21c>)
 8002614:	2101      	movs	r1, #1
 8002616:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d103      	bne.n	8002628 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f001 fd34 	bl	8004090 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b005      	add	sp, #20
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	000002a9 	.word	0x000002a9

08002638 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	23aa      	movs	r3, #170	; 0xaa
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_PCD_Start+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e014      	b.n	800267a <HAL_PCD_Start+0x42>
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	23aa      	movs	r3, #170	; 0xaa
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	2101      	movs	r1, #1
 8002658:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0018      	movs	r0, r3
 8002660:	f004 f854 	bl	800670c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0018      	movs	r0, r3
 800266a:	f005 ffaf 	bl	80085cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	23aa      	movs	r3, #170	; 0xaa
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	2100      	movs	r1, #0
 8002676:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f005 ffb1 	bl	80085f8 <USB_ReadInterrupts>
 8002696:	0002      	movs	r2, r0
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	401a      	ands	r2, r3
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d103      	bne.n	80026ae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fbbb 	bl	8002e24 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f005 ffa0 	bl	80085f8 <USB_ReadInterrupts>
 80026b8:	0002      	movs	r2, r0
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	401a      	ands	r2, r3
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d114      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2244      	movs	r2, #68	; 0x44
 80026ce:	5a9b      	ldrh	r3, [r3, r2]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	49a2      	ldr	r1, [pc, #648]	; (8002960 <HAL_PCD_IRQHandler+0x2dc>)
 80026d8:	400a      	ands	r2, r1
 80026da:	b291      	uxth	r1, r2
 80026dc:	2244      	movs	r2, #68	; 0x44
 80026de:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f008 f80b 	bl	800a6fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2100      	movs	r1, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 f945 	bl	800297c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f005 ff7e 	bl	80085f8 <USB_ReadInterrupts>
 80026fc:	0002      	movs	r2, r0
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	01db      	lsls	r3, r3, #7
 8002702:	401a      	ands	r2, r3
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	01db      	lsls	r3, r3, #7
 8002708:	429a      	cmp	r2, r3
 800270a:	d10b      	bne.n	8002724 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2244      	movs	r2, #68	; 0x44
 8002712:	5a9b      	ldrh	r3, [r3, r2]
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4992      	ldr	r1, [pc, #584]	; (8002964 <HAL_PCD_IRQHandler+0x2e0>)
 800271c:	400a      	ands	r2, r1
 800271e:	b291      	uxth	r1, r2
 8002720:	2244      	movs	r2, #68	; 0x44
 8002722:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0018      	movs	r0, r3
 800272a:	f005 ff65 	bl	80085f8 <USB_ReadInterrupts>
 800272e:	0002      	movs	r2, r0
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	019b      	lsls	r3, r3, #6
 8002734:	401a      	ands	r2, r3
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	429a      	cmp	r2, r3
 800273c:	d10b      	bne.n	8002756 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2244      	movs	r2, #68	; 0x44
 8002744:	5a9b      	ldrh	r3, [r3, r2]
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4986      	ldr	r1, [pc, #536]	; (8002968 <HAL_PCD_IRQHandler+0x2e4>)
 800274e:	400a      	ands	r2, r1
 8002750:	b291      	uxth	r1, r2
 8002752:	2244      	movs	r2, #68	; 0x44
 8002754:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0018      	movs	r0, r3
 800275c:	f005 ff4c 	bl	80085f8 <USB_ReadInterrupts>
 8002760:	0002      	movs	r2, r0
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	401a      	ands	r2, r3
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	429a      	cmp	r2, r3
 800276e:	d137      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	5a9b      	ldrh	r3, [r3, r2]
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2104      	movs	r1, #4
 8002780:	438a      	bics	r2, r1
 8002782:	b291      	uxth	r1, r2
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	5a9b      	ldrh	r3, [r3, r2]
 8002790:	b29a      	uxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2108      	movs	r1, #8
 8002798:	438a      	bics	r2, r1
 800279a:	b291      	uxth	r1, r2
 800279c:	2240      	movs	r2, #64	; 0x40
 800279e:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	23b8      	movs	r3, #184	; 0xb8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d109      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	23b8      	movs	r3, #184	; 0xb8
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	2100      	movs	r1, #0
 80027b4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2100      	movs	r1, #0
 80027ba:	0018      	movs	r0, r3
 80027bc:	f001 fc92 	bl	80040e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f007 ffdc 	bl	800a780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2244      	movs	r2, #68	; 0x44
 80027ce:	5a9b      	ldrh	r3, [r3, r2]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <HAL_PCD_IRQHandler+0x2e8>)
 80027d8:	400a      	ands	r2, r1
 80027da:	b291      	uxth	r1, r2
 80027dc:	2244      	movs	r2, #68	; 0x44
 80027de:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f005 ff07 	bl	80085f8 <USB_ReadInterrupts>
 80027ea:	0002      	movs	r2, r0
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	401a      	ands	r2, r3
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d127      	bne.n	800284a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	5a9b      	ldrh	r3, [r3, r2]
 8002802:	b29a      	uxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2108      	movs	r1, #8
 800280a:	430a      	orrs	r2, r1
 800280c:	b291      	uxth	r1, r2
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2244      	movs	r2, #68	; 0x44
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4953      	ldr	r1, [pc, #332]	; (8002970 <HAL_PCD_IRQHandler+0x2ec>)
 8002822:	400a      	ands	r2, r1
 8002824:	b291      	uxth	r1, r2
 8002826:	2244      	movs	r2, #68	; 0x44
 8002828:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	5a9b      	ldrh	r3, [r3, r2]
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2104      	movs	r1, #4
 800283a:	430a      	orrs	r2, r1
 800283c:	b291      	uxth	r1, r2
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f007 ff7f 	bl	800a748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0018      	movs	r0, r3
 8002850:	f005 fed2 	bl	80085f8 <USB_ReadInterrupts>
 8002854:	0003      	movs	r3, r0
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	4013      	ands	r3, r2
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d145      	bne.n	80028ea <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2244      	movs	r2, #68	; 0x44
 8002864:	5a9b      	ldrh	r3, [r3, r2]
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	438a      	bics	r2, r1
 8002870:	b291      	uxth	r1, r2
 8002872:	2244      	movs	r2, #68	; 0x44
 8002874:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	23b8      	movs	r3, #184	; 0xb8
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12f      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	5a9b      	ldrh	r3, [r3, r2]
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2104      	movs	r1, #4
 8002892:	430a      	orrs	r2, r1
 8002894:	b291      	uxth	r1, r2
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2240      	movs	r2, #64	; 0x40
 80028a0:	5a9b      	ldrh	r3, [r3, r2]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2108      	movs	r1, #8
 80028aa:	430a      	orrs	r2, r1
 80028ac:	b291      	uxth	r1, r2
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	23b8      	movs	r3, #184	; 0xb8
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	2101      	movs	r1, #1
 80028ba:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2254      	movs	r2, #84	; 0x54
 80028c2:	5a9b      	ldrh	r3, [r3, r2]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	223c      	movs	r2, #60	; 0x3c
 80028ca:	4013      	ands	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	23b9      	movs	r3, #185	; 0xb9
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2101      	movs	r1, #1
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fc02 	bl	80040e4 <HAL_PCDEx_LPM_Callback>
 80028e0:	e003      	b.n	80028ea <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f007 ff2f 	bl	800a748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f005 fe82 	bl	80085f8 <USB_ReadInterrupts>
 80028f4:	0002      	movs	r2, r0
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	401a      	ands	r2, r3
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d10f      	bne.n	8002924 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2244      	movs	r2, #68	; 0x44
 800290a:	5a9b      	ldrh	r3, [r3, r2]
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4918      	ldr	r1, [pc, #96]	; (8002974 <HAL_PCD_IRQHandler+0x2f0>)
 8002914:	400a      	ands	r2, r1
 8002916:	b291      	uxth	r1, r2
 8002918:	2244      	movs	r2, #68	; 0x44
 800291a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f007 fede 	bl	800a6e0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	f005 fe65 	bl	80085f8 <USB_ReadInterrupts>
 800292e:	0002      	movs	r2, r0
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	401a      	ands	r2, r3
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2244      	movs	r2, #68	; 0x44
 8002944:	5a9b      	ldrh	r3, [r3, r2]
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_PCD_IRQHandler+0x2f4>)
 800294e:	400a      	ands	r2, r1
 8002950:	b291      	uxth	r1, r2
 8002952:	2244      	movs	r2, #68	; 0x44
 8002954:	5299      	strh	r1, [r3, r2]
  }
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	fffffbff 	.word	0xfffffbff
 8002964:	ffffbfff 	.word	0xffffbfff
 8002968:	ffffdfff 	.word	0xffffdfff
 800296c:	ffffefff 	.word	0xffffefff
 8002970:	fffff7ff 	.word	0xfffff7ff
 8002974:	fffffdff 	.word	0xfffffdff
 8002978:	fffffeff 	.word	0xfffffeff

0800297c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	000a      	movs	r2, r1
 8002986:	1cfb      	adds	r3, r7, #3
 8002988:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	23aa      	movs	r3, #170	; 0xaa
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_PCD_SetAddress+0x1e>
 8002996:	2302      	movs	r3, #2
 8002998:	e017      	b.n	80029ca <HAL_PCD_SetAddress+0x4e>
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	23aa      	movs	r3, #170	; 0xaa
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	2101      	movs	r1, #1
 80029a2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1cfa      	adds	r2, r7, #3
 80029a8:	2124      	movs	r1, #36	; 0x24
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	1cfb      	adds	r3, r7, #3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	0019      	movs	r1, r3
 80029b8:	0010      	movs	r0, r2
 80029ba:	f005 fdf3 	bl	80085a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	23aa      	movs	r3, #170	; 0xaa
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	2100      	movs	r1, #0
 80029c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029d2:	b590      	push	{r4, r7, lr}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	000c      	movs	r4, r1
 80029dc:	0010      	movs	r0, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	1cfb      	adds	r3, r7, #3
 80029e2:	1c22      	adds	r2, r4, #0
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	003b      	movs	r3, r7
 80029e8:	1c02      	adds	r2, r0, #0
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	1cbb      	adds	r3, r7, #2
 80029ee:	1c0a      	adds	r2, r1, #0
 80029f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029f2:	230b      	movs	r3, #11
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029fa:	1cfb      	adds	r3, r7, #3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b25b      	sxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0f      	bge.n	8002a24 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	1cfb      	adds	r3, r7, #3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	0013      	movs	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	18d3      	adds	r3, r2, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	705a      	strb	r2, [r3, #1]
 8002a22:	e00f      	b.n	8002a44 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2207      	movs	r2, #7
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3369      	adds	r3, #105	; 0x69
 8002a36:	33ff      	adds	r3, #255	; 0xff
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	18d3      	adds	r3, r2, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a44:	1cfb      	adds	r3, r7, #3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a52:	003b      	movs	r3, r7
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1cba      	adds	r2, r7, #2
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	785b      	ldrb	r3, [r3, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a74:	1cbb      	adds	r3, r7, #2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d102      	bne.n	8002a82 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	23aa      	movs	r3, #170	; 0xaa
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_Open+0xc0>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e013      	b.n	8002aba <HAL_PCD_EP_Open+0xe8>
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	23aa      	movs	r3, #170	; 0xaa
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	2101      	movs	r1, #1
 8002a9a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f003 fe8d 	bl	80067c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	23aa      	movs	r3, #170	; 0xaa
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002ab4:	230b      	movs	r3, #11
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b005      	add	sp, #20
 8002ac0:	bd90      	pop	{r4, r7, pc}

08002ac2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	000a      	movs	r2, r1
 8002acc:	1cfb      	adds	r3, r7, #3
 8002ace:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad0:	1cfb      	adds	r3, r7, #3
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da0f      	bge.n	8002afa <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	1cfb      	adds	r3, r7, #3
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	705a      	strb	r2, [r3, #1]
 8002af8:	e00f      	b.n	8002b1a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	1cfb      	adds	r3, r7, #3
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2207      	movs	r2, #7
 8002b00:	401a      	ands	r2, r3
 8002b02:	0013      	movs	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	3369      	adds	r3, #105	; 0x69
 8002b0c:	33ff      	adds	r3, #255	; 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b1a:	1cfb      	adds	r3, r7, #3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2207      	movs	r2, #7
 8002b20:	4013      	ands	r3, r2
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	23aa      	movs	r3, #170	; 0xaa
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_EP_Close+0x76>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e011      	b.n	8002b5c <HAL_PCD_EP_Close+0x9a>
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	23aa      	movs	r3, #170	; 0xaa
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	2101      	movs	r1, #1
 8002b40:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f004 f9ae 	bl	8006eac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	23aa      	movs	r3, #170	; 0xaa
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	2100      	movs	r1, #0
 8002b58:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	200b      	movs	r0, #11
 8002b72:	183b      	adds	r3, r7, r0
 8002b74:	1c0a      	adds	r2, r1, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	0001      	movs	r1, r0
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2207      	movs	r2, #7
 8002b80:	401a      	ands	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	3369      	adds	r3, #105	; 0x69
 8002b8c:	33ff      	adds	r3, #255	; 0xff
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d107      	bne.n	8002bd4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f004 fb2d 	bl	800722c <USB_EPStartXfer>
 8002bd2:	e006      	b.n	8002be2 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f004 fb25 	bl	800722c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b006      	add	sp, #24
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	1cfb      	adds	r3, r7, #3
 8002bf8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bfa:	1cfb      	adds	r3, r7, #3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2207      	movs	r2, #7
 8002c00:	401a      	ands	r2, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	23c2      	movs	r3, #194	; 0xc2
 8002c06:	0059      	lsls	r1, r3, #1
 8002c08:	0013      	movs	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	18c3      	adds	r3, r0, r3
 8002c12:	185b      	adds	r3, r3, r1
 8002c14:	681b      	ldr	r3, [r3, #0]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	200b      	movs	r0, #11
 8002c2c:	183b      	adds	r3, r7, r0
 8002c2e:	1c0a      	adds	r2, r1, #0
 8002c30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	18d3      	adds	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2224      	movs	r2, #36	; 0x24
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c70:	183b      	adds	r3, r7, r0
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2207      	movs	r2, #7
 8002c76:	4013      	ands	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	d107      	bne.n	8002c98 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f004 facb 	bl	800722c <USB_EPStartXfer>
 8002c96:	e006      	b.n	8002ca6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f004 fac3 	bl	800722c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cfb      	adds	r3, r7, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cbe:	1cfb      	adds	r3, r7, #3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e046      	b.n	8002d60 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd2:	1cfb      	adds	r3, r7, #3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da0f      	bge.n	8002cfc <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	1cfb      	adds	r3, r7, #3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	0013      	movs	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	18d3      	adds	r3, r2, r3
 8002cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	705a      	strb	r2, [r3, #1]
 8002cfa:	e00d      	b.n	8002d18 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cfc:	1cfb      	adds	r3, r7, #3
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	0013      	movs	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	189b      	adds	r3, r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3369      	adds	r3, #105	; 0x69
 8002d0a:	33ff      	adds	r3, #255	; 0xff
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1e:	1cfb      	adds	r3, r7, #3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2207      	movs	r2, #7
 8002d24:	4013      	ands	r3, r2
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	23aa      	movs	r3, #170	; 0xaa
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_EP_SetStall+0x8c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e011      	b.n	8002d60 <HAL_PCD_EP_SetStall+0xb0>
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	23aa      	movs	r3, #170	; 0xaa
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	2101      	movs	r1, #1
 8002d44:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 fb26 	bl	80083a0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	23aa      	movs	r3, #170	; 0xaa
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	000a      	movs	r2, r1
 8002d72:	1cfb      	adds	r3, r7, #3
 8002d74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d76:	1cfb      	adds	r3, r7, #3
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d901      	bls.n	8002d8a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e048      	b.n	8002e1c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8a:	1cfb      	adds	r3, r7, #3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da0f      	bge.n	8002db4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d94:	1cfb      	adds	r3, r7, #3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	0013      	movs	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	189b      	adds	r3, r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	705a      	strb	r2, [r3, #1]
 8002db2:	e00f      	b.n	8002dd4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	1cfb      	adds	r3, r7, #3
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2207      	movs	r2, #7
 8002dba:	401a      	ands	r2, r3
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	3369      	adds	r3, #105	; 0x69
 8002dc6:	33ff      	adds	r3, #255	; 0xff
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	1cfb      	adds	r3, r7, #3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2207      	movs	r2, #7
 8002de0:	4013      	ands	r3, r2
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	23aa      	movs	r3, #170	; 0xaa
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_EP_ClrStall+0x90>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e011      	b.n	8002e1c <HAL_PCD_EP_ClrStall+0xb4>
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	23aa      	movs	r3, #170	; 0xaa
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	2101      	movs	r1, #1
 8002e00:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f005 fb18 	bl	8008440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	23aa      	movs	r3, #170	; 0xaa
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	2100      	movs	r1, #0
 8002e18:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b096      	sub	sp, #88	; 0x58
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e2c:	f000 fbd8 	bl	80035e0 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2056      	movs	r0, #86	; 0x56
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	2144      	movs	r1, #68	; 0x44
 8002e3a:	5a52      	ldrh	r2, [r2, r1]
 8002e3c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e3e:	183b      	adds	r3, r7, r0
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	2455      	movs	r4, #85	; 0x55
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	210f      	movs	r1, #15
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d000      	beq.n	8002e58 <PCD_EP_ISR_Handler+0x34>
 8002e56:	e179      	b.n	800314c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e58:	183b      	adds	r3, r7, r0
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d154      	bne.n	8002f0c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	200e      	movs	r0, #14
 8002e6c:	183b      	adds	r3, r7, r0
 8002e6e:	49af      	ldr	r1, [pc, #700]	; (800312c <PCD_EP_ISR_Handler+0x308>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	183a      	adds	r2, r7, r0
 8002e7a:	8812      	ldrh	r2, [r2, #0]
 8002e7c:	49ac      	ldr	r1, [pc, #688]	; (8003130 <PCD_EP_ISR_Handler+0x30c>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	b292      	uxth	r2, r2
 8002e82:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3328      	adds	r3, #40	; 0x28
 8002e88:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2250      	movs	r2, #80	; 0x50
 8002e90:	5a9b      	ldrh	r3, [r3, r2]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	001a      	movs	r2, r3
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	18d2      	adds	r2, r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	4aa3      	ldr	r2, [pc, #652]	; (8003134 <PCD_EP_ISR_Handler+0x310>)
 8002ea6:	4694      	mov	ip, r2
 8002ea8:	4463      	add	r3, ip
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	059b      	lsls	r3, r3, #22
 8002eae:	0d9a      	lsrs	r2, r3, #22
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	18d2      	adds	r2, r2, r3
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f007 fbec 	bl	800a6a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	5c9b      	ldrb	r3, [r3, r2]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <PCD_EP_ISR_Handler+0xb8>
 8002ed8:	f000 fb82 	bl	80035e0 <PCD_EP_ISR_Handler+0x7bc>
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <PCD_EP_ISR_Handler+0xc4>
 8002ee4:	f000 fb7c 	bl	80035e0 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	4252      	negs	r2, r2
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b291      	uxth	r1, r2
 8002efe:	224c      	movs	r2, #76	; 0x4c
 8002f00:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	; 0x24
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	e369      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3369      	adds	r3, #105	; 0x69
 8002f10:	33ff      	adds	r3, #255	; 0xff
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2152      	movs	r1, #82	; 0x52
 8002f1a:	187b      	adds	r3, r7, r1
 8002f1c:	8812      	ldrh	r2, [r2, #0]
 8002f1e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d037      	beq.n	8002f9c <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2250      	movs	r2, #80	; 0x50
 8002f32:	5a9b      	ldrh	r3, [r3, r2]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	001a      	movs	r2, r3
 8002f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	18d2      	adds	r2, r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	4a7c      	ldr	r2, [pc, #496]	; (8003138 <PCD_EP_ISR_Handler+0x314>)
 8002f48:	4694      	mov	ip, r2
 8002f4a:	4463      	add	r3, ip
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	059b      	lsls	r3, r3, #22
 8002f50:	0d9a      	lsrs	r2, r3, #22
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	22ac      	movs	r2, #172	; 0xac
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	1899      	adds	r1, r3, r2
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f005 fb96 	bl	800869c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	2010      	movs	r0, #16
 8002f7a:	183b      	adds	r3, r7, r0
 8002f7c:	496f      	ldr	r1, [pc, #444]	; (800313c <PCD_EP_ISR_Handler+0x318>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	183a      	adds	r2, r7, r0
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f007 fb4f 	bl	800a638 <HAL_PCD_SetupStageCallback>
 8002f9a:	e321      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f9c:	2352      	movs	r3, #82	; 0x52
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db00      	blt.n	8002faa <PCD_EP_ISR_Handler+0x186>
 8002fa8:	e31a      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	201e      	movs	r0, #30
 8002fb4:	183b      	adds	r3, r7, r0
 8002fb6:	4961      	ldr	r1, [pc, #388]	; (800313c <PCD_EP_ISR_Handler+0x318>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	801a      	strh	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	183a      	adds	r2, r7, r0
 8002fc2:	8812      	ldrh	r2, [r2, #0]
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2250      	movs	r2, #80	; 0x50
 8002fd2:	5a9b      	ldrh	r3, [r3, r2]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	18d2      	adds	r2, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	18d3      	adds	r3, r2, r3
 8002fe6:	4a54      	ldr	r2, [pc, #336]	; (8003138 <PCD_EP_ISR_Handler+0x314>)
 8002fe8:	4694      	mov	ip, r2
 8002fea:	4463      	add	r3, ip
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	059b      	lsls	r3, r3, #22
 8002ff0:	0d9a      	lsrs	r2, r3, #22
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01a      	beq.n	8003034 <PCD_EP_ISR_Handler+0x210>
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	6959      	ldr	r1, [r3, #20]
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003014:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003016:	b29b      	uxth	r3, r3
 8003018:	f005 fb40 	bl	800869c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2100      	movs	r1, #0
 800302e:	0018      	movs	r0, r3
 8003030:	f007 fb17 	bl	800a662 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	001a      	movs	r2, r3
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4013      	ands	r3, r2
 8003044:	d000      	beq.n	8003048 <PCD_EP_ISR_Handler+0x224>
 8003046:	e2cb      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2250      	movs	r2, #80	; 0x50
 8003054:	5a9b      	ldrh	r3, [r3, r2]
 8003056:	b29b      	uxth	r3, r3
 8003058:	001a      	movs	r2, r3
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	189b      	adds	r3, r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <PCD_EP_ISR_Handler+0x314>)
 8003064:	4694      	mov	ip, r2
 8003066:	4463      	add	r3, ip
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <PCD_EP_ISR_Handler+0x270>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <PCD_EP_ISR_Handler+0x31c>)
 800307a:	4013      	ands	r3, r2
 800307c:	b29a      	uxth	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <PCD_EP_ISR_Handler+0x30c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	b29a      	uxth	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e02b      	b.n	80030ec <PCD_EP_ISR_Handler+0x2c8>
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b3e      	cmp	r3, #62	; 0x3e
 800309a:	d812      	bhi.n	80030c2 <PCD_EP_ISR_Handler+0x29e>
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d002      	beq.n	80030b4 <PCD_EP_ISR_Handler+0x290>
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	3301      	adds	r3, #1
 80030b2:	647b      	str	r3, [r7, #68]	; 0x44
 80030b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e014      	b.n	80030ec <PCD_EP_ISR_Handler+0x2c8>
 80030c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	221f      	movs	r2, #31
 80030d0:	4013      	ands	r3, r2
 80030d2:	d102      	bne.n	80030da <PCD_EP_ISR_Handler+0x2b6>
 80030d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d6:	3b01      	subs	r3, #1
 80030d8:	647b      	str	r3, [r7, #68]	; 0x44
 80030da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030dc:	b29b      	uxth	r3, r3
 80030de:	029b      	lsls	r3, r3, #10
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <PCD_EP_ISR_Handler+0x30c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	2012      	movs	r0, #18
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	4912      	ldr	r1, [pc, #72]	; (8003144 <PCD_EP_ISR_Handler+0x320>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	183b      	adds	r3, r7, r0
 8003100:	183a      	adds	r2, r7, r0
 8003102:	8812      	ldrh	r2, [r2, #0]
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	0149      	lsls	r1, r1, #5
 8003108:	404a      	eors	r2, r1
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	183b      	adds	r3, r7, r0
 800310e:	183a      	adds	r2, r7, r0
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0189      	lsls	r1, r1, #6
 8003116:	404a      	eors	r2, r1
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	183a      	adds	r2, r7, r0
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	4909      	ldr	r1, [pc, #36]	; (8003148 <PCD_EP_ISR_Handler+0x324>)
 8003124:	430a      	orrs	r2, r1
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e259      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
 800312c:	ffff8f0f 	.word	0xffff8f0f
 8003130:	ffff8000 	.word	0xffff8000
 8003134:	00000402 	.word	0x00000402
 8003138:	00000406 	.word	0x00000406
 800313c:	00000f8f 	.word	0x00000f8f
 8003140:	ffff83ff 	.word	0xffff83ff
 8003144:	ffffbf8f 	.word	0xffffbf8f
 8003148:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	001a      	movs	r2, r3
 8003152:	2055      	movs	r0, #85	; 0x55
 8003154:	183b      	adds	r3, r7, r0
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	18d2      	adds	r2, r2, r3
 800315c:	2152      	movs	r1, #82	; 0x52
 800315e:	187b      	adds	r3, r7, r1
 8003160:	8812      	ldrh	r2, [r2, #0]
 8003162:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003164:	187b      	adds	r3, r7, r1
 8003166:	2200      	movs	r2, #0
 8003168:	5e9b      	ldrsh	r3, [r3, r2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db00      	blt.n	8003170 <PCD_EP_ISR_Handler+0x34c>
 800316e:	e0fa      	b.n	8003366 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	001a      	movs	r2, r3
 8003176:	183b      	adds	r3, r7, r0
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	2450      	movs	r4, #80	; 0x50
 8003184:	193b      	adds	r3, r7, r4
 8003186:	49cf      	ldr	r1, [pc, #828]	; (80034c4 <PCD_EP_ISR_Handler+0x6a0>)
 8003188:	400a      	ands	r2, r1
 800318a:	801a      	strh	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	001a      	movs	r2, r3
 8003192:	183b      	adds	r3, r7, r0
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	193a      	adds	r2, r7, r4
 800319c:	8812      	ldrh	r2, [r2, #0]
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	430a      	orrs	r2, r1
 80031a2:	b292      	uxth	r2, r2
 80031a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	0013      	movs	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	3369      	adds	r3, #105	; 0x69
 80031b4:	33ff      	adds	r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031be:	7b1b      	ldrb	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d125      	bne.n	8003210 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2250      	movs	r2, #80	; 0x50
 80031ca:	5a9b      	ldrh	r3, [r3, r2]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	001a      	movs	r2, r3
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	18d2      	adds	r2, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	4aba      	ldr	r2, [pc, #744]	; (80034c8 <PCD_EP_ISR_Handler+0x6a4>)
 80031e0:	4694      	mov	ip, r2
 80031e2:	4463      	add	r3, ip
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	2448      	movs	r4, #72	; 0x48
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	0592      	lsls	r2, r2, #22
 80031ec:	0d92      	lsrs	r2, r2, #22
 80031ee:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d100      	bne.n	80031fa <PCD_EP_ISR_Handler+0x3d6>
 80031f8:	e08d      	b.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	6959      	ldr	r1, [r3, #20]
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003204:	88da      	ldrh	r2, [r3, #6]
 8003206:	193b      	adds	r3, r7, r4
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	f005 fa47 	bl	800869c <USB_ReadPMA>
 800320e:	e082      	b.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d10c      	bne.n	8003232 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003218:	2348      	movs	r3, #72	; 0x48
 800321a:	18fc      	adds	r4, r7, r3
 800321c:	2352      	movs	r3, #82	; 0x52
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 f9ee 	bl	8003608 <HAL_PCD_EP_DB_Receive>
 800322c:	0003      	movs	r3, r0
 800322e:	8023      	strh	r3, [r4, #0]
 8003230:	e071      	b.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	001a      	movs	r2, r3
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	18d3      	adds	r3, r2, r3
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29a      	uxth	r2, r3
 8003244:	204a      	movs	r0, #74	; 0x4a
 8003246:	183b      	adds	r3, r7, r0
 8003248:	49a0      	ldr	r1, [pc, #640]	; (80034cc <PCD_EP_ISR_Handler+0x6a8>)
 800324a:	400a      	ands	r2, r1
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	001a      	movs	r2, r3
 8003254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	18d3      	adds	r3, r2, r3
 800325c:	183a      	adds	r2, r7, r0
 800325e:	8812      	ldrh	r2, [r2, #0]
 8003260:	499b      	ldr	r1, [pc, #620]	; (80034d0 <PCD_EP_ISR_Handler+0x6ac>)
 8003262:	430a      	orrs	r2, r1
 8003264:	b292      	uxth	r2, r2
 8003266:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	001a      	movs	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	01db      	lsls	r3, r3, #7
 8003280:	4013      	ands	r3, r2
 8003282:	d024      	beq.n	80032ce <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2250      	movs	r2, #80	; 0x50
 800328a:	5a9b      	ldrh	r3, [r3, r2]
 800328c:	b29b      	uxth	r3, r3
 800328e:	001a      	movs	r2, r3
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	18d2      	adds	r2, r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	4a8d      	ldr	r2, [pc, #564]	; (80034d4 <PCD_EP_ISR_Handler+0x6b0>)
 80032a0:	4694      	mov	ip, r2
 80032a2:	4463      	add	r3, ip
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	2448      	movs	r4, #72	; 0x48
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	0592      	lsls	r2, r2, #22
 80032ac:	0d92      	lsrs	r2, r2, #22
 80032ae:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02e      	beq.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	6959      	ldr	r1, [r3, #20]
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	891a      	ldrh	r2, [r3, #8]
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f005 f9e8 	bl	800869c <USB_ReadPMA>
 80032cc:	e023      	b.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2250      	movs	r2, #80	; 0x50
 80032d4:	5a9b      	ldrh	r3, [r3, r2]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	001a      	movs	r2, r3
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	18d2      	adds	r2, r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <PCD_EP_ISR_Handler+0x6a4>)
 80032ea:	4694      	mov	ip, r2
 80032ec:	4463      	add	r3, ip
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	2448      	movs	r4, #72	; 0x48
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	0592      	lsls	r2, r2, #22
 80032f6:	0d92      	lsrs	r2, r2, #22
 80032f8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003308:	6959      	ldr	r1, [r3, #20]
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	895a      	ldrh	r2, [r3, #10]
 800330e:	193b      	adds	r3, r7, r4
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f005 f9c3 	bl	800869c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	2148      	movs	r1, #72	; 0x48
 800331c:	187b      	adds	r3, r7, r1
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	18d2      	adds	r2, r2, r3
 8003322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003324:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	187b      	adds	r3, r7, r1
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	18d2      	adds	r2, r2, r3
 8003330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003332:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <PCD_EP_ISR_Handler+0x524>
 800333c:	187b      	adds	r3, r7, r1
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f007 f986 	bl	800a662 <HAL_PCD_DataOutStageCallback>
 8003356:	e006      	b.n	8003366 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335e:	0011      	movs	r1, r2
 8003360:	0018      	movs	r0, r3
 8003362:	f003 ff63 	bl	800722c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003366:	2452      	movs	r4, #82	; 0x52
 8003368:	193b      	adds	r3, r7, r4
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	4013      	ands	r3, r2
 8003370:	d100      	bne.n	8003374 <PCD_EP_ISR_Handler+0x550>
 8003372:	e135      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003374:	2055      	movs	r0, #85	; 0x55
 8003376:	183b      	adds	r3, r7, r0
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	0013      	movs	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	189b      	adds	r3, r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	18d3      	adds	r3, r2, r3
 8003388:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	001a      	movs	r2, r3
 8003390:	183b      	adds	r3, r7, r0
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	2542      	movs	r5, #66	; 0x42
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	494d      	ldr	r1, [pc, #308]	; (80034d8 <PCD_EP_ISR_Handler+0x6b4>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	001a      	movs	r2, r3
 80033ac:	183b      	adds	r3, r7, r0
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	197a      	adds	r2, r7, r5
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	4948      	ldr	r1, [pc, #288]	; (80034dc <PCD_EP_ISR_Handler+0x6b8>)
 80033ba:	430a      	orrs	r2, r1
 80033bc:	b292      	uxth	r2, r2
 80033be:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c2:	78db      	ldrb	r3, [r3, #3]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d100      	bne.n	80033ca <PCD_EP_ISR_Handler+0x5a6>
 80033c8:	e0ad      	b.n	8003526 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	2240      	movs	r2, #64	; 0x40
 80033d6:	4013      	ands	r3, r2
 80033d8:	d046      	beq.n	8003468 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d125      	bne.n	800342e <PCD_EP_ISR_Handler+0x60a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2250      	movs	r2, #80	; 0x50
 80033ee:	5a9b      	ldrh	r3, [r3, r2]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	001a      	movs	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	00da      	lsls	r2, r3, #3
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	18d3      	adds	r3, r2, r3
 8003404:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <PCD_EP_ISR_Handler+0x6b0>)
 8003406:	4694      	mov	ip, r2
 8003408:	4463      	add	r3, ip
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	4a33      	ldr	r2, [pc, #204]	; (80034e0 <PCD_EP_ISR_Handler+0x6bc>)
 8003414:	4013      	ands	r3, r2
 8003416:	b29a      	uxth	r2, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	4a2e      	ldr	r2, [pc, #184]	; (80034dc <PCD_EP_ISR_Handler+0x6b8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	e073      	b.n	8003516 <PCD_EP_ISR_Handler+0x6f2>
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d16f      	bne.n	8003516 <PCD_EP_ISR_Handler+0x6f2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2250      	movs	r2, #80	; 0x50
 8003442:	5a9b      	ldrh	r3, [r3, r2]
 8003444:	b29b      	uxth	r3, r3
 8003446:	001a      	movs	r2, r3
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	189b      	adds	r3, r3, r2
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	00da      	lsls	r2, r3, #3
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	18d3      	adds	r3, r2, r3
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <PCD_EP_ISR_Handler+0x6b0>)
 800345a:	4694      	mov	ip, r2
 800345c:	4463      	add	r3, ip
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2200      	movs	r2, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	e056      	b.n	8003516 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d136      	bne.n	80034e4 <PCD_EP_ISR_Handler+0x6c0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2250      	movs	r2, #80	; 0x50
 8003482:	5a9b      	ldrh	r3, [r3, r2]
 8003484:	b29b      	uxth	r3, r3
 8003486:	001a      	movs	r2, r3
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	189b      	adds	r3, r3, r2
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00da      	lsls	r2, r3, #3
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <PCD_EP_ISR_Handler+0x6a4>)
 800349a:	4694      	mov	ip, r2
 800349c:	4463      	add	r3, ip
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <PCD_EP_ISR_Handler+0x6bc>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <PCD_EP_ISR_Handler+0x6b8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	e029      	b.n	8003516 <PCD_EP_ISR_Handler+0x6f2>
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	00000f8f 	.word	0x00000f8f
 80034c8:	00000406 	.word	0x00000406
 80034cc:	ffff8f8f 	.word	0xffff8f8f
 80034d0:	ffff80c0 	.word	0xffff80c0
 80034d4:	00000402 	.word	0x00000402
 80034d8:	ffff8f0f 	.word	0xffff8f0f
 80034dc:	ffff8000 	.word	0xffff8000
 80034e0:	ffff83ff 	.word	0xffff83ff
 80034e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d114      	bne.n	8003516 <PCD_EP_ISR_Handler+0x6f2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2250      	movs	r2, #80	; 0x50
 80034f2:	5a9b      	ldrh	r3, [r3, r2]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	001a      	movs	r2, r3
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00da      	lsls	r2, r3, #3
 8003504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <PCD_EP_ISR_Handler+0x7dc>)
 800350a:	4694      	mov	ip, r2
 800350c:	4463      	add	r3, ip
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2200      	movs	r2, #0
 8003514:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f007 f8c0 	bl	800a6a4 <HAL_PCD_DataInStageCallback>
 8003524:	e05c      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003528:	78db      	ldrb	r3, [r3, #3]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d150      	bne.n	80035d0 <PCD_EP_ISR_Handler+0x7ac>
 800352e:	2352      	movs	r3, #82	; 0x52
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d149      	bne.n	80035d0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2250      	movs	r2, #80	; 0x50
 8003542:	5a9b      	ldrh	r3, [r3, r2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	001a      	movs	r2, r3
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	18d2      	adds	r2, r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	18d3      	adds	r3, r2, r3
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <PCD_EP_ISR_Handler+0x7e0>)
 8003558:	4694      	mov	ip, r2
 800355a:	4463      	add	r3, ip
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	2140      	movs	r1, #64	; 0x40
 8003560:	187b      	adds	r3, r7, r1
 8003562:	0592      	lsls	r2, r2, #22
 8003564:	0d92      	lsrs	r2, r2, #22
 8003566:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	187b      	adds	r3, r7, r1
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d907      	bls.n	8003584 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	187b      	adds	r3, r7, r1
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003580:	619a      	str	r2, [r3, #24]
 8003582:	e002      	b.n	800358a <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d107      	bne.n	80035a2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0011      	movs	r1, r2
 800359a:	0018      	movs	r0, r3
 800359c:	f007 f882 	bl	800a6a4 <HAL_PCD_DataInStageCallback>
 80035a0:	e01e      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	2140      	movs	r1, #64	; 0x40
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	18d2      	adds	r2, r2, r3
 80035ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	18d2      	adds	r2, r2, r3
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035be:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c6:	0011      	movs	r1, r2
 80035c8:	0018      	movs	r0, r3
 80035ca:	f003 fe2f 	bl	800722c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80035ce:	e007      	b.n	80035e0 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035d0:	2352      	movs	r3, #82	; 0x52
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f930 	bl	8003840 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2244      	movs	r2, #68	; 0x44
 80035e6:	5a9b      	ldrh	r3, [r3, r2]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da01      	bge.n	80035f4 <PCD_EP_ISR_Handler+0x7d0>
 80035f0:	f7ff fc1e 	bl	8002e30 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b016      	add	sp, #88	; 0x58
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	00000406 	.word	0x00000406
 8003604:	00000402 	.word	0x00000402

08003608 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003616:	1dbb      	adds	r3, r7, #6
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	01db      	lsls	r3, r3, #7
 800361e:	4013      	ands	r3, r2
 8003620:	d100      	bne.n	8003624 <HAL_PCD_EP_DB_Receive+0x1c>
 8003622:	e07d      	b.n	8003720 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2250      	movs	r2, #80	; 0x50
 800362a:	5a9b      	ldrh	r3, [r3, r2]
 800362c:	b29b      	uxth	r3, r3
 800362e:	001a      	movs	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	18d2      	adds	r2, r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_PCD_EP_DB_Receive+0x220>)
 8003640:	4694      	mov	ip, r2
 8003642:	4463      	add	r3, ip
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	211a      	movs	r1, #26
 8003648:	187b      	adds	r3, r7, r1
 800364a:	0592      	lsls	r2, r2, #22
 800364c:	0d92      	lsrs	r2, r2, #22
 800364e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	187b      	adds	r3, r7, r1
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d307      	bcc.n	800366c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	187b      	adds	r3, r7, r1
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	619a      	str	r2, [r3, #24]
 800366a:	e002      	b.n	8003672 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	001a      	movs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	18d3      	adds	r3, r2, r3
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29a      	uxth	r2, r3
 800368c:	2018      	movs	r0, #24
 800368e:	183b      	adds	r3, r7, r0
 8003690:	4966      	ldr	r1, [pc, #408]	; (800382c <HAL_PCD_EP_DB_Receive+0x224>)
 8003692:	400a      	ands	r2, r1
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	183b      	adds	r3, r7, r0
 8003698:	183a      	adds	r2, r7, r0
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	0189      	lsls	r1, r1, #6
 80036a0:	404a      	eors	r2, r1
 80036a2:	801a      	strh	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	001a      	movs	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	183a      	adds	r2, r7, r0
 80036b4:	8812      	ldrh	r2, [r2, #0]
 80036b6:	495e      	ldr	r1, [pc, #376]	; (8003830 <HAL_PCD_EP_DB_Receive+0x228>)
 80036b8:	430a      	orrs	r2, r1
 80036ba:	b292      	uxth	r2, r2
 80036bc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	4013      	ands	r3, r2
 80036c6:	d01a      	beq.n	80036fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	001a      	movs	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	2016      	movs	r0, #22
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	4955      	ldr	r1, [pc, #340]	; (8003834 <HAL_PCD_EP_DB_Receive+0x22c>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	001a      	movs	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	183a      	adds	r2, r7, r0
 80036f4:	8812      	ldrh	r2, [r2, #0]
 80036f6:	4950      	ldr	r1, [pc, #320]	; (8003838 <HAL_PCD_EP_DB_Receive+0x230>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	b292      	uxth	r2, r2
 80036fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80036fe:	241a      	movs	r4, #26
 8003700:	193b      	adds	r3, r7, r4
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d100      	bne.n	800370a <HAL_PCD_EP_DB_Receive+0x102>
 8003708:	e086      	b.n	8003818 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6959      	ldr	r1, [r3, #20]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	891a      	ldrh	r2, [r3, #8]
 8003716:	193b      	adds	r3, r7, r4
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	f004 ffbf 	bl	800869c <USB_ReadPMA>
 800371e:	e07b      	b.n	8003818 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2250      	movs	r2, #80	; 0x50
 8003726:	5a9b      	ldrh	r3, [r3, r2]
 8003728:	b29b      	uxth	r3, r3
 800372a:	001a      	movs	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	18d2      	adds	r2, r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	4a40      	ldr	r2, [pc, #256]	; (800383c <HAL_PCD_EP_DB_Receive+0x234>)
 800373c:	4694      	mov	ip, r2
 800373e:	4463      	add	r3, ip
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	211a      	movs	r1, #26
 8003744:	187b      	adds	r3, r7, r1
 8003746:	0592      	lsls	r2, r2, #22
 8003748:	0d92      	lsrs	r2, r2, #22
 800374a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	699a      	ldr	r2, [r3, #24]
 8003750:	187b      	adds	r3, r7, r1
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d307      	bcc.n	8003768 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	187b      	adds	r3, r7, r1
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	619a      	str	r2, [r3, #24]
 8003766:	e002      	b.n	800376e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	001a      	movs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29a      	uxth	r2, r3
 8003788:	201e      	movs	r0, #30
 800378a:	183b      	adds	r3, r7, r0
 800378c:	4927      	ldr	r1, [pc, #156]	; (800382c <HAL_PCD_EP_DB_Receive+0x224>)
 800378e:	400a      	ands	r2, r1
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	183b      	adds	r3, r7, r0
 8003794:	183a      	adds	r2, r7, r0
 8003796:	8812      	ldrh	r2, [r2, #0]
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	0189      	lsls	r1, r1, #6
 800379c:	404a      	eors	r2, r1
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	001a      	movs	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	183a      	adds	r2, r7, r0
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	491f      	ldr	r1, [pc, #124]	; (8003830 <HAL_PCD_EP_DB_Receive+0x228>)
 80037b4:	430a      	orrs	r2, r1
 80037b6:	b292      	uxth	r2, r2
 80037b8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	4013      	ands	r3, r2
 80037c2:	d11a      	bne.n	80037fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	001a      	movs	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	201c      	movs	r0, #28
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_PCD_EP_DB_Receive+0x22c>)
 80037dc:	400a      	ands	r2, r1
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	001a      	movs	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	183a      	adds	r2, r7, r0
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	4911      	ldr	r1, [pc, #68]	; (8003838 <HAL_PCD_EP_DB_Receive+0x230>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	b292      	uxth	r2, r2
 80037f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80037fa:	241a      	movs	r4, #26
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6959      	ldr	r1, [r3, #20]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	895a      	ldrh	r2, [r3, #10]
 8003810:	193b      	adds	r3, r7, r4
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f004 ff42 	bl	800869c <USB_ReadPMA>
    }
  }

  return count;
 8003818:	231a      	movs	r3, #26
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	881b      	ldrh	r3, [r3, #0]
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b009      	add	sp, #36	; 0x24
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	00000402 	.word	0x00000402
 800382c:	ffffbf8f 	.word	0xffffbf8f
 8003830:	ffff8080 	.word	0xffff8080
 8003834:	ffff8f8f 	.word	0xffff8f8f
 8003838:	ffff80c0 	.word	0xffff80c0
 800383c:	00000406 	.word	0x00000406

08003840 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0a2      	sub	sp, #136	; 0x88
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	1dbb      	adds	r3, r7, #6
 800384c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	4013      	ands	r3, r2
 8003856:	d100      	bne.n	800385a <HAL_PCD_EP_DB_Transmit+0x1a>
 8003858:	e1c8      	b.n	8003bec <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2250      	movs	r2, #80	; 0x50
 8003860:	5a9b      	ldrh	r3, [r3, r2]
 8003862:	b29b      	uxth	r3, r3
 8003864:	001a      	movs	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	18d3      	adds	r3, r2, r3
 8003874:	4ad7      	ldr	r2, [pc, #860]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003876:	4694      	mov	ip, r2
 8003878:	4463      	add	r3, ip
 800387a:	881a      	ldrh	r2, [r3, #0]
 800387c:	214e      	movs	r1, #78	; 0x4e
 800387e:	187b      	adds	r3, r7, r1
 8003880:	0592      	lsls	r2, r2, #22
 8003882:	0d92      	lsrs	r2, r2, #22
 8003884:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	187b      	adds	r3, r7, r1
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d907      	bls.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	187b      	adds	r3, r7, r1
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	619a      	str	r2, [r3, #24]
 80038a0:	e002      	b.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d000      	beq.n	80038b2 <HAL_PCD_EP_DB_Transmit+0x72>
 80038b0:	e0b5      	b.n	8003a1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d125      	bne.n	8003906 <HAL_PCD_EP_DB_Transmit+0xc6>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2250      	movs	r2, #80	; 0x50
 80038c6:	5a9b      	ldrh	r3, [r3, r2]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	001a      	movs	r2, r3
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	00da      	lsls	r2, r3, #3
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	18d3      	adds	r3, r2, r3
 80038dc:	4abd      	ldr	r2, [pc, #756]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80038de:	4694      	mov	ip, r2
 80038e0:	4463      	add	r3, ip
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	4abb      	ldr	r2, [pc, #748]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4ab8      	ldr	r2, [pc, #736]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	e01b      	b.n	800393e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d117      	bne.n	800393e <HAL_PCD_EP_DB_Transmit+0xfe>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2250      	movs	r2, #80	; 0x50
 800391a:	5a9b      	ldrh	r3, [r3, r2]
 800391c:	b29b      	uxth	r3, r3
 800391e:	001a      	movs	r2, r3
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	189b      	adds	r3, r3, r2
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00da      	lsls	r2, r3, #3
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	4aa8      	ldr	r2, [pc, #672]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003932:	4694      	mov	ip, r2
 8003934:	4463      	add	r3, ip
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2200      	movs	r2, #0
 800393c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d125      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x158>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2250      	movs	r2, #80	; 0x50
 8003958:	5a9b      	ldrh	r3, [r3, r2]
 800395a:	b29b      	uxth	r3, r3
 800395c:	001a      	movs	r2, r3
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	189b      	adds	r3, r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	4a9c      	ldr	r2, [pc, #624]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003970:	4694      	mov	ip, r2
 8003972:	4463      	add	r3, ip
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4a96      	ldr	r2, [pc, #600]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 800397e:	4013      	ands	r3, r2
 8003980:	b29a      	uxth	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4a93      	ldr	r2, [pc, #588]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	b29a      	uxth	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e018      	b.n	80039ca <HAL_PCD_EP_DB_Transmit+0x18a>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d114      	bne.n	80039ca <HAL_PCD_EP_DB_Transmit+0x18a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2250      	movs	r2, #80	; 0x50
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	001a      	movs	r2, r3
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	18d3      	adds	r3, r2, r3
 80039bc:	4a88      	ldr	r2, [pc, #544]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80039be:	4694      	mov	ip, r2
 80039c0:	4463      	add	r3, ip
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2200      	movs	r2, #0
 80039c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f006 fe66 	bl	800a6a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039d8:	1dbb      	adds	r3, r7, #6
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	d100      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80039e4:	e2d4      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	001a      	movs	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	2012      	movs	r0, #18
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	4979      	ldr	r1, [pc, #484]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	001a      	movs	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	183a      	adds	r2, r7, r0
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	4974      	ldr	r1, [pc, #464]	; (8003be8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	e2b8      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a1e:	1dbb      	adds	r3, r7, #6
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	01db      	lsls	r3, r3, #7
 8003a26:	4013      	ands	r3, r2
 8003a28:	d01a      	beq.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	001a      	movs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	18d3      	adds	r3, r2, r3
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	2044      	movs	r0, #68	; 0x44
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	4968      	ldr	r1, [pc, #416]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	183a      	adds	r2, r7, r0
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	4963      	ldr	r1, [pc, #396]	; (8003be8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d000      	beq.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8003a6a:	e291      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	214e      	movs	r1, #78	; 0x4e
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	18d2      	adds	r2, r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	18d2      	adds	r2, r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d309      	bcc.n	8003aaa <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	621a      	str	r2, [r3, #32]
 8003aa8:	e016      	b.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003ab2:	234e      	movs	r3, #78	; 0x4e
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2224      	movs	r2, #36	; 0x24
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]
 8003ac2:	e009      	b.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d150      	bne.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x342>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2250      	movs	r2, #80	; 0x50
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	001a      	movs	r2, r3
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	00da      	lsls	r2, r3, #3
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	4a34      	ldr	r2, [pc, #208]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003b04:	4694      	mov	ip, r2
 8003b06:	4463      	add	r3, ip
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d110      	bne.n	8003b32 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	e044      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b34:	2b3e      	cmp	r3, #62	; 0x3e
 8003b36:	d810      	bhi.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x31a>
 8003b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
 8003b44:	d002      	beq.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	3301      	adds	r3, #1
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	029b      	lsls	r3, r3, #10
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e030      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	221f      	movs	r2, #31
 8003b64:	4013      	ands	r3, r2
 8003b66:	d102      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	e01c      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d118      	bne.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2250      	movs	r2, #80	; 0x50
 8003b96:	5a9b      	ldrh	r3, [r3, r2]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	00da      	lsls	r2, r3, #3
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003bae:	4694      	mov	ip, r2
 8003bb0:	4463      	add	r3, ip
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6959      	ldr	r1, [r3, #20]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	891a      	ldrh	r2, [r3, #8]
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f004 fd22 	bl	8008614 <USB_WritePMA>
 8003bd0:	e1de      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	00000402 	.word	0x00000402
 8003bd8:	ffff83ff 	.word	0xffff83ff
 8003bdc:	ffff8000 	.word	0xffff8000
 8003be0:	00000406 	.word	0x00000406
 8003be4:	ffff8f8f 	.word	0xffff8f8f
 8003be8:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2250      	movs	r2, #80	; 0x50
 8003bf2:	5a9b      	ldrh	r3, [r3, r2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	18d2      	adds	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	4aca      	ldr	r2, [pc, #808]	; (8003f30 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003c08:	4694      	mov	ip, r2
 8003c0a:	4463      	add	r3, ip
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	214e      	movs	r1, #78	; 0x4e
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	0592      	lsls	r2, r2, #22
 8003c14:	0d92      	lsrs	r2, r2, #22
 8003c16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d307      	bcc.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	1ad2      	subs	r2, r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	619a      	str	r2, [r3, #24]
 8003c32:	e002      	b.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d000      	beq.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x404>
 8003c42:	e0c0      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d125      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x458>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2250      	movs	r2, #80	; 0x50
 8003c58:	5a9b      	ldrh	r3, [r3, r2]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	4ab1      	ldr	r2, [pc, #708]	; (8003f34 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003c70:	4694      	mov	ip, r2
 8003c72:	4463      	add	r3, ip
 8003c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	4aae      	ldr	r2, [pc, #696]	; (8003f38 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4aab      	ldr	r2, [pc, #684]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e01b      	b.n	8003cd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d117      	bne.n	8003cd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2250      	movs	r2, #80	; 0x50
 8003cac:	5a9b      	ldrh	r3, [r3, r2]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	00da      	lsls	r2, r3, #3
 8003cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	4a9c      	ldr	r2, [pc, #624]	; (8003f34 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003cc4:	4694      	mov	ip, r2
 8003cc6:	4463      	add	r3, ip
 8003cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ccc:	2200      	movs	r2, #0
 8003cce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d130      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x500>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	187a      	adds	r2, r7, r1
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2250      	movs	r2, #80	; 0x50
 8003cee:	5a9b      	ldrh	r3, [r3, r2]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	187a      	adds	r2, r7, r1
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00da      	lsls	r2, r3, #3
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	4a89      	ldr	r2, [pc, #548]	; (8003f30 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	2184      	movs	r1, #132	; 0x84
 8003d12:	187a      	adds	r2, r7, r1
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4a86      	ldr	r2, [pc, #536]	; (8003f38 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	187b      	adds	r3, r7, r1
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4a82      	ldr	r2, [pc, #520]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e018      	b.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x532>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d114      	bne.n	8003d72 <HAL_PCD_EP_DB_Transmit+0x532>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2250      	movs	r2, #80	; 0x50
 8003d4e:	5a9b      	ldrh	r3, [r3, r2]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	001a      	movs	r2, r3
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	00da      	lsls	r2, r3, #3
 8003d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	4a72      	ldr	r2, [pc, #456]	; (8003f30 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003d66:	4694      	mov	ip, r2
 8003d68:	4463      	add	r3, ip
 8003d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d6e:	2200      	movs	r2, #0
 8003d70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f006 fc92 	bl	800a6a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d80:	1dbb      	adds	r3, r7, #6
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d000      	beq.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003d8c:	e100      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	001a      	movs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	2046      	movs	r0, #70	; 0x46
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	4966      	ldr	r1, [pc, #408]	; (8003f40 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	001a      	movs	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	183a      	adds	r2, r7, r0
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	4961      	ldr	r1, [pc, #388]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	e0e4      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	01db      	lsls	r3, r3, #7
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d11a      	bne.n	8003e08 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	204c      	movs	r0, #76	; 0x4c
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	4955      	ldr	r1, [pc, #340]	; (8003f40 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	001a      	movs	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	18d3      	adds	r3, r2, r3
 8003dfc:	183a      	adds	r2, r7, r0
 8003dfe:	8812      	ldrh	r2, [r2, #0]
 8003e00:	4950      	ldr	r1, [pc, #320]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	b292      	uxth	r2, r2
 8003e06:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	5c9b      	ldrb	r3, [r3, r2]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d000      	beq.n	8003e14 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003e12:	e0bd      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	214e      	movs	r1, #78	; 0x4e
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	18d2      	adds	r2, r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	18d2      	adds	r2, r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d309      	bcc.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	621a      	str	r2, [r3, #32]
 8003e50:	e016      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003e5a:	234e      	movs	r3, #78	; 0x4e
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]
 8003e6a:	e009      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2200      	movs	r2, #0
 8003e76:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d15c      	bne.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x708>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2250      	movs	r2, #80	; 0x50
 8003e9a:	5a9b      	ldrh	r3, [r3, r2]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00da      	lsls	r2, r3, #3
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	18d3      	adds	r3, r2, r3
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003eb2:	4694      	mov	ip, r2
 8003eb4:	4463      	add	r3, ip
 8003eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d110      	bne.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e04d      	b.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee4:	d810      	bhi.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d002      	beq.n	8003efa <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	657b      	str	r3, [r7, #84]	; 0x54
 8003efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	029b      	lsls	r3, r3, #10
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e039      	b.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f10:	221f      	movs	r2, #31
 8003f12:	4013      	ands	r3, r2
 8003f14:	d102      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e025      	b.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003f30:	00000406 	.word	0x00000406
 8003f34:	00000402 	.word	0x00000402
 8003f38:	ffff83ff 	.word	0xffff83ff
 8003f3c:	ffff8000 	.word	0xffff8000
 8003f40:	ffff8f8f 	.word	0xffff8f8f
 8003f44:	ffffc080 	.word	0xffffc080
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d115      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2250      	movs	r2, #80	; 0x50
 8003f56:	5a9b      	ldrh	r3, [r3, r2]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	667b      	str	r3, [r7, #100]	; 0x64
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003f6e:	4694      	mov	ip, r2
 8003f70:	4463      	add	r3, ip
 8003f72:	663b      	str	r3, [r7, #96]	; 0x60
 8003f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6959      	ldr	r1, [r3, #20]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	895a      	ldrh	r2, [r3, #10]
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f004 fb42 	bl	8008614 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	001a      	movs	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	2010      	movs	r0, #16
 8003fa4:	183b      	adds	r3, r7, r0
 8003fa6:	4911      	ldr	r1, [pc, #68]	; (8003fec <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	183b      	adds	r3, r7, r0
 8003fae:	183a      	adds	r2, r7, r0
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	404a      	eors	r2, r1
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	183b      	adds	r3, r7, r0
 8003fba:	183a      	adds	r2, r7, r0
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	404a      	eors	r2, r1
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	001a      	movs	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	183a      	adds	r2, r7, r0
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	4906      	ldr	r1, [pc, #24]	; (8003ff0 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b022      	add	sp, #136	; 0x88
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00000406 	.word	0x00000406
 8003fec:	ffff8fbf 	.word	0xffff8fbf
 8003ff0:	ffff8080 	.word	0xffff8080

08003ff4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	0008      	movs	r0, r1
 8003ffe:	0011      	movs	r1, r2
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	240a      	movs	r4, #10
 8004004:	193b      	adds	r3, r7, r4
 8004006:	1c02      	adds	r2, r0, #0
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	2308      	movs	r3, #8
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	1c0a      	adds	r2, r1, #0
 8004010:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004012:	0021      	movs	r1, r4
 8004014:	187b      	adds	r3, r7, r1
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	4013      	ands	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004022:	187b      	adds	r3, r7, r1
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	2207      	movs	r2, #7
 8004028:	4013      	ands	r3, r2
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	0013      	movs	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	189b      	adds	r3, r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e00b      	b.n	8004054 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800403c:	230a      	movs	r3, #10
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	0013      	movs	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	189b      	adds	r3, r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	3369      	adds	r3, #105	; 0x69
 800404c:	33ff      	adds	r3, #255	; 0xff
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004054:	2308      	movs	r3, #8
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	80da      	strh	r2, [r3, #6]
 800406c:	e00b      	b.n	8004086 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2201      	movs	r2, #1
 8004072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	b29a      	uxth	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b29a      	uxth	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b007      	add	sp, #28
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	23ba      	movs	r3, #186	; 0xba
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	2101      	movs	r1, #1
 80040a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	23b8      	movs	r3, #184	; 0xb8
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	2100      	movs	r1, #0
 80040b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2254      	movs	r2, #84	; 0x54
 80040b6:	5a9b      	ldrh	r3, [r3, r2]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2201      	movs	r2, #1
 80040bc:	4313      	orrs	r3, r2
 80040be:	b299      	uxth	r1, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2254      	movs	r2, #84	; 0x54
 80040c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2254      	movs	r2, #84	; 0x54
 80040ca:	5a9b      	ldrh	r3, [r3, r2]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2202      	movs	r2, #2
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b299      	uxth	r1, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2254      	movs	r2, #84	; 0x54
 80040d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b004      	add	sp, #16
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	000a      	movs	r2, r1
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b002      	add	sp, #8
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f000 fb76 	bl	80047fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	4013      	ands	r3, r2
 8004118:	d100      	bne.n	800411c <HAL_RCC_OscConfig+0x20>
 800411a:	e08e      	b.n	800423a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800411c:	4bc5      	ldr	r3, [pc, #788]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	220c      	movs	r2, #12
 8004122:	4013      	ands	r3, r2
 8004124:	2b04      	cmp	r3, #4
 8004126:	d00e      	beq.n	8004146 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004128:	4bc2      	ldr	r3, [pc, #776]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	220c      	movs	r2, #12
 800412e:	4013      	ands	r3, r2
 8004130:	2b08      	cmp	r3, #8
 8004132:	d117      	bne.n	8004164 <HAL_RCC_OscConfig+0x68>
 8004134:	4bbf      	ldr	r3, [pc, #764]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	23c0      	movs	r3, #192	; 0xc0
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	401a      	ands	r2, r3
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	429a      	cmp	r2, r3
 8004144:	d10e      	bne.n	8004164 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004146:	4bbb      	ldr	r3, [pc, #748]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	4013      	ands	r3, r2
 8004150:	d100      	bne.n	8004154 <HAL_RCC_OscConfig+0x58>
 8004152:	e071      	b.n	8004238 <HAL_RCC_OscConfig+0x13c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d000      	beq.n	800415e <HAL_RCC_OscConfig+0x62>
 800415c:	e06c      	b.n	8004238 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f000 fb4c 	bl	80047fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <HAL_RCC_OscConfig+0x80>
 800416c:	4bb1      	ldr	r3, [pc, #708]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4bb0      	ldr	r3, [pc, #704]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	0249      	lsls	r1, r1, #9
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e02f      	b.n	80041dc <HAL_RCC_OscConfig+0xe0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10c      	bne.n	800419e <HAL_RCC_OscConfig+0xa2>
 8004184:	4bab      	ldr	r3, [pc, #684]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4baa      	ldr	r3, [pc, #680]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800418a:	49ab      	ldr	r1, [pc, #684]	; (8004438 <HAL_RCC_OscConfig+0x33c>)
 800418c:	400a      	ands	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	4ba8      	ldr	r3, [pc, #672]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4ba7      	ldr	r3, [pc, #668]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004196:	49a9      	ldr	r1, [pc, #676]	; (800443c <HAL_RCC_OscConfig+0x340>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e01e      	b.n	80041dc <HAL_RCC_OscConfig+0xe0>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d10e      	bne.n	80041c4 <HAL_RCC_OscConfig+0xc8>
 80041a6:	4ba3      	ldr	r3, [pc, #652]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4ba2      	ldr	r3, [pc, #648]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	02c9      	lsls	r1, r1, #11
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	4b9f      	ldr	r3, [pc, #636]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b9e      	ldr	r3, [pc, #632]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	0249      	lsls	r1, r1, #9
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0xe0>
 80041c4:	4b9b      	ldr	r3, [pc, #620]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b9a      	ldr	r3, [pc, #616]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041ca:	499b      	ldr	r1, [pc, #620]	; (8004438 <HAL_RCC_OscConfig+0x33c>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	4b98      	ldr	r3, [pc, #608]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b97      	ldr	r3, [pc, #604]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80041d6:	4999      	ldr	r1, [pc, #612]	; (800443c <HAL_RCC_OscConfig+0x340>)
 80041d8:	400a      	ands	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d014      	beq.n	800420e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fa74 	bl	80016d0 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ee:	f7fd fa6f 	bl	80016d0 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e2fd      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004200:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	4013      	ands	r3, r2
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0xf2>
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fd fa5f 	bl	80016d0 <HAL_GetTick>
 8004212:	0003      	movs	r3, r0
 8004214:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004218:	f7fd fa5a 	bl	80016d0 <HAL_GetTick>
 800421c:	0002      	movs	r2, r0
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e2e8      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	4b82      	ldr	r3, [pc, #520]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	4013      	ands	r3, r2
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x11c>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2202      	movs	r2, #2
 8004240:	4013      	ands	r3, r2
 8004242:	d100      	bne.n	8004246 <HAL_RCC_OscConfig+0x14a>
 8004244:	e06c      	b.n	8004320 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004246:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	220c      	movs	r2, #12
 800424c:	4013      	ands	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004250:	4b78      	ldr	r3, [pc, #480]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	220c      	movs	r2, #12
 8004256:	4013      	ands	r3, r2
 8004258:	2b08      	cmp	r3, #8
 800425a:	d11f      	bne.n	800429c <HAL_RCC_OscConfig+0x1a0>
 800425c:	4b75      	ldr	r3, [pc, #468]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	23c0      	movs	r3, #192	; 0xc0
 8004262:	025b      	lsls	r3, r3, #9
 8004264:	401a      	ands	r2, r3
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	429a      	cmp	r2, r3
 800426c:	d116      	bne.n	800429c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	4b71      	ldr	r3, [pc, #452]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2202      	movs	r2, #2
 8004274:	4013      	ands	r3, r2
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x188>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e2bb      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b6b      	ldr	r3, [pc, #428]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	22f8      	movs	r2, #248	; 0xf8
 800428a:	4393      	bics	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00da      	lsls	r2, r3, #3
 8004294:	4b67      	ldr	r3, [pc, #412]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429a:	e041      	b.n	8004320 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d024      	beq.n	80042ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a4:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fd fa0e 	bl	80016d0 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd fa09 	bl	80016d0 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e297      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2202      	movs	r2, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d0f1      	beq.n	80042ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	22f8      	movs	r2, #248	; 0xf8
 80042dc:	4393      	bics	r3, r2
 80042de:	0019      	movs	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00da      	lsls	r2, r3, #3
 80042e6:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b51      	ldr	r3, [pc, #324]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80042f4:	2101      	movs	r1, #1
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fd f9e9 	bl	80016d0 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004304:	f7fd f9e4 	bl	80016d0 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e272      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d1f1      	bne.n	8004304 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2208      	movs	r2, #8
 8004326:	4013      	ands	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d019      	beq.n	8004366 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b40      	ldr	r3, [pc, #256]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004338:	2101      	movs	r1, #1
 800433a:	430a      	orrs	r2, r1
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fd f9c7 	bl	80016d0 <HAL_GetTick>
 8004342:	0003      	movs	r3, r0
 8004344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7fd f9c2 	bl	80016d0 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e250      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	4b36      	ldr	r3, [pc, #216]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d0f1      	beq.n	8004348 <HAL_RCC_OscConfig+0x24c>
 8004364:	e018      	b.n	8004398 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800436a:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800436c:	2101      	movs	r1, #1
 800436e:	438a      	bics	r2, r1
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004372:	f7fd f9ad 	bl	80016d0 <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800437c:	f7fd f9a8 	bl	80016d0 <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e236      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	2202      	movs	r2, #2
 8004394:	4013      	ands	r3, r2
 8004396:	d1f1      	bne.n	800437c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2204      	movs	r2, #4
 800439e:	4013      	ands	r3, r2
 80043a0:	d100      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2a8>
 80043a2:	e0b5      	b.n	8004510 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a4:	201f      	movs	r0, #31
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	055b      	lsls	r3, r3, #21
 80043b4:	4013      	ands	r3, r2
 80043b6:	d110      	bne.n	80043da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	0549      	lsls	r1, r1, #21
 80043c2:	430a      	orrs	r2, r1
 80043c4:	61da      	str	r2, [r3, #28]
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	055b      	lsls	r3, r3, #21
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043d4:	183b      	adds	r3, r7, r0
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043da:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_OscConfig+0x344>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4013      	ands	r3, r2
 80043e4:	d11a      	bne.n	800441c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_RCC_OscConfig+0x344>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <HAL_RCC_OscConfig+0x344>)
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	0049      	lsls	r1, r1, #1
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f4:	f7fd f96c 	bl	80016d0 <HAL_GetTick>
 80043f8:	0003      	movs	r3, r0
 80043fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fe:	f7fd f967 	bl	80016d0 <HAL_GetTick>
 8004402:	0002      	movs	r2, r0
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1f5      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x344>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10f      	bne.n	8004444 <HAL_RCC_OscConfig+0x348>
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	4b02      	ldr	r3, [pc, #8]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800442a:	2101      	movs	r1, #1
 800442c:	430a      	orrs	r2, r1
 800442e:	621a      	str	r2, [r3, #32]
 8004430:	e036      	b.n	80044a0 <HAL_RCC_OscConfig+0x3a4>
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	40021000 	.word	0x40021000
 8004438:	fffeffff 	.word	0xfffeffff
 800443c:	fffbffff 	.word	0xfffbffff
 8004440:	40007000 	.word	0x40007000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10c      	bne.n	8004466 <HAL_RCC_OscConfig+0x36a>
 800444c:	4bca      	ldr	r3, [pc, #808]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	4bc9      	ldr	r3, [pc, #804]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004452:	2101      	movs	r1, #1
 8004454:	438a      	bics	r2, r1
 8004456:	621a      	str	r2, [r3, #32]
 8004458:	4bc7      	ldr	r3, [pc, #796]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	4bc6      	ldr	r3, [pc, #792]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800445e:	2104      	movs	r1, #4
 8004460:	438a      	bics	r2, r1
 8004462:	621a      	str	r2, [r3, #32]
 8004464:	e01c      	b.n	80044a0 <HAL_RCC_OscConfig+0x3a4>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b05      	cmp	r3, #5
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x38c>
 800446e:	4bc2      	ldr	r3, [pc, #776]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	4bc1      	ldr	r3, [pc, #772]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004474:	2104      	movs	r1, #4
 8004476:	430a      	orrs	r2, r1
 8004478:	621a      	str	r2, [r3, #32]
 800447a:	4bbf      	ldr	r3, [pc, #764]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	4bbe      	ldr	r3, [pc, #760]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004480:	2101      	movs	r1, #1
 8004482:	430a      	orrs	r2, r1
 8004484:	621a      	str	r2, [r3, #32]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0x3a4>
 8004488:	4bbb      	ldr	r3, [pc, #748]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	4bba      	ldr	r3, [pc, #744]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800448e:	2101      	movs	r1, #1
 8004490:	438a      	bics	r2, r1
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	4bb8      	ldr	r3, [pc, #736]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	4bb7      	ldr	r3, [pc, #732]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800449a:	2104      	movs	r1, #4
 800449c:	438a      	bics	r2, r1
 800449e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d014      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fd f912 	bl	80016d0 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b0:	e009      	b.n	80044c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fd f90d 	bl	80016d0 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	4aaf      	ldr	r2, [pc, #700]	; (800477c <HAL_RCC_OscConfig+0x680>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e19a      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c6:	4bac      	ldr	r3, [pc, #688]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	2202      	movs	r2, #2
 80044cc:	4013      	ands	r3, r2
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x3b6>
 80044d0:	e013      	b.n	80044fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d2:	f7fd f8fd 	bl	80016d0 <HAL_GetTick>
 80044d6:	0003      	movs	r3, r0
 80044d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	e009      	b.n	80044f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd f8f8 	bl	80016d0 <HAL_GetTick>
 80044e0:	0002      	movs	r2, r0
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	4aa5      	ldr	r2, [pc, #660]	; (800477c <HAL_RCC_OscConfig+0x680>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e185      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f0:	4ba1      	ldr	r3, [pc, #644]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	2202      	movs	r2, #2
 80044f6:	4013      	ands	r3, r2
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044fa:	231f      	movs	r3, #31
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004504:	4b9c      	ldr	r3, [pc, #624]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	4b9b      	ldr	r3, [pc, #620]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800450a:	499d      	ldr	r1, [pc, #628]	; (8004780 <HAL_RCC_OscConfig+0x684>)
 800450c:	400a      	ands	r2, r1
 800450e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2210      	movs	r2, #16
 8004516:	4013      	ands	r3, r2
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12a      	bne.n	8004578 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004522:	4b95      	ldr	r3, [pc, #596]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	4b94      	ldr	r3, [pc, #592]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004528:	2104      	movs	r1, #4
 800452a:	430a      	orrs	r2, r1
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800452e:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004532:	4b91      	ldr	r3, [pc, #580]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004534:	2101      	movs	r1, #1
 8004536:	430a      	orrs	r2, r1
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd f8c9 	bl	80016d0 <HAL_GetTick>
 800453e:	0003      	movs	r3, r0
 8004540:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004544:	f7fd f8c4 	bl	80016d0 <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e152      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	2202      	movs	r2, #2
 800455c:	4013      	ands	r3, r2
 800455e:	d0f1      	beq.n	8004544 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004560:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	22f8      	movs	r2, #248	; 0xf8
 8004566:	4393      	bics	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	00da      	lsls	r2, r3, #3
 8004570:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004572:	430a      	orrs	r2, r1
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
 8004576:	e034      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	3305      	adds	r3, #5
 800457e:	d111      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004580:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	4b7c      	ldr	r3, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004586:	2104      	movs	r1, #4
 8004588:	438a      	bics	r2, r1
 800458a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800458c:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	22f8      	movs	r2, #248	; 0xf8
 8004592:	4393      	bics	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	00da      	lsls	r2, r3, #3
 800459c:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34
 80045a2:	e01e      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045a4:	4b74      	ldr	r3, [pc, #464]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045aa:	2104      	movs	r1, #4
 80045ac:	430a      	orrs	r2, r1
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80045b0:	4b71      	ldr	r3, [pc, #452]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045b6:	2101      	movs	r1, #1
 80045b8:	438a      	bics	r2, r1
 80045ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045bc:	f7fd f888 	bl	80016d0 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045c6:	f7fd f883 	bl	80016d0 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e111      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045d8:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	2202      	movs	r2, #2
 80045de:	4013      	ands	r3, r2
 80045e0:	d1f1      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2220      	movs	r2, #32
 80045e8:	4013      	ands	r3, r2
 80045ea:	d05c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045ec:	4b62      	ldr	r3, [pc, #392]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	220c      	movs	r2, #12
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d00e      	beq.n	8004616 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045f8:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	220c      	movs	r2, #12
 80045fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004600:	2b08      	cmp	r3, #8
 8004602:	d114      	bne.n	800462e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004604:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	23c0      	movs	r3, #192	; 0xc0
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	401a      	ands	r2, r3
 800460e:	23c0      	movs	r3, #192	; 0xc0
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	429a      	cmp	r2, r3
 8004614:	d10b      	bne.n	800462e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004616:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	025b      	lsls	r3, r3, #9
 800461e:	4013      	ands	r3, r2
 8004620:	d040      	beq.n	80046a4 <HAL_RCC_OscConfig+0x5a8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d03c      	beq.n	80046a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0e6      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01b      	beq.n	800466e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004636:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0249      	lsls	r1, r1, #9
 8004640:	430a      	orrs	r2, r1
 8004642:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd f844 	bl	80016d0 <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464e:	f7fd f83f 	bl	80016d0 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0cd      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004660:	4b45      	ldr	r3, [pc, #276]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	025b      	lsls	r3, r3, #9
 8004668:	4013      	ands	r3, r2
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x552>
 800466c:	e01b      	b.n	80046a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800466e:	4b42      	ldr	r3, [pc, #264]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004674:	4943      	ldr	r1, [pc, #268]	; (8004784 <HAL_RCC_OscConfig+0x688>)
 8004676:	400a      	ands	r2, r1
 8004678:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd f829 	bl	80016d0 <HAL_GetTick>
 800467e:	0003      	movs	r3, r0
 8004680:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004684:	f7fd f824 	bl	80016d0 <HAL_GetTick>
 8004688:	0002      	movs	r2, r0
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0b2      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	025b      	lsls	r3, r3, #9
 800469e:	4013      	ands	r3, r2
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x588>
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80046a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d100      	bne.n	80046b0 <HAL_RCC_OscConfig+0x5b4>
 80046ae:	e0a4      	b.n	80047fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	220c      	movs	r2, #12
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d100      	bne.n	80046be <HAL_RCC_OscConfig+0x5c2>
 80046bc:	e078      	b.n	80047b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d14c      	bne.n	8004760 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80046cc:	492e      	ldr	r1, [pc, #184]	; (8004788 <HAL_RCC_OscConfig+0x68c>)
 80046ce:	400a      	ands	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fc fffd 	bl	80016d0 <HAL_GetTick>
 80046d6:	0003      	movs	r3, r0
 80046d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fc fff8 	bl	80016d0 <HAL_GetTick>
 80046e0:	0002      	movs	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e086      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	049b      	lsls	r3, r3, #18
 80046f6:	4013      	ands	r3, r2
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	220f      	movs	r2, #15
 8004700:	4393      	bics	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800470a:	430a      	orrs	r2, r1
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_RCC_OscConfig+0x690>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	431a      	orrs	r2, r3
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	0449      	lsls	r1, r1, #17
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fc ffcb 	bl	80016d0 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fc ffc6 	bl	80016d0 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e054      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	049b      	lsls	r3, r3, #18
 800475a:	4013      	ands	r3, r2
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x644>
 800475e:	e04c      	b.n	80047fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_OscConfig+0x67c>)
 8004766:	4908      	ldr	r1, [pc, #32]	; (8004788 <HAL_RCC_OscConfig+0x68c>)
 8004768:	400a      	ands	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fc ffb0 	bl	80016d0 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0x6a6>
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	40021000 	.word	0x40021000
 800477c:	00001388 	.word	0x00001388
 8004780:	efffffff 	.word	0xefffffff
 8004784:	fffeffff 	.word	0xfffeffff
 8004788:	feffffff 	.word	0xfeffffff
 800478c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004790:	f7fc ff9e 	bl	80016d0 <HAL_GetTick>
 8004794:	0002      	movs	r2, r0
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e02c      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a2:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_RCC_OscConfig+0x708>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	049b      	lsls	r3, r3, #18
 80047aa:	4013      	ands	r3, r2
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x694>
 80047ae:	e024      	b.n	80047fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01f      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_RCC_OscConfig+0x708>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCC_OscConfig+0x708>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	401a      	ands	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d10e      	bne.n	80047f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	220f      	movs	r2, #15
 80047dc:	401a      	ands	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	23f0      	movs	r3, #240	; 0xf0
 80047ea:	039b      	lsls	r3, r3, #14
 80047ec:	401a      	ands	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b008      	add	sp, #32
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0bf      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	4013      	ands	r3, r2
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d911      	bls.n	800484e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	4393      	bics	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	4b5b      	ldr	r3, [pc, #364]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483c:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	4013      	ands	r3, r2
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d001      	beq.n	800484e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0a6      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2202      	movs	r2, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d015      	beq.n	8004884 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2204      	movs	r2, #4
 800485e:	4013      	ands	r3, r2
 8004860:	d006      	beq.n	8004870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004868:	21e0      	movs	r1, #224	; 0xe0
 800486a:	00c9      	lsls	r1, r1, #3
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	22f0      	movs	r2, #240	; 0xf0
 8004876:	4393      	bics	r3, r2
 8004878:	0019      	movs	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	4013      	ands	r3, r2
 800488c:	d04c      	beq.n	8004928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b44      	ldr	r3, [pc, #272]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	029b      	lsls	r3, r3, #10
 800489e:	4013      	ands	r3, r2
 80048a0:	d120      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07a      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	049b      	lsls	r3, r3, #18
 80048b6:	4013      	ands	r3, r2
 80048b8:	d114      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06e      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048c6:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 80048c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	025b      	lsls	r3, r3, #9
 80048ce:	4013      	ands	r3, r2
 80048d0:	d108      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e062      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2202      	movs	r2, #2
 80048dc:	4013      	ands	r3, r2
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e05b      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e4:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2203      	movs	r2, #3
 80048ea:	4393      	bics	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fc feea 	bl	80016d0 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004900:	e009      	b.n	8004916 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004902:	f7fc fee5 	bl	80016d0 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <HAL_RCC_ClockConfig+0x1a4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e042      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	220c      	movs	r2, #12
 800491c:	401a      	ands	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1ec      	bne.n	8004902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d211      	bcs.n	800495a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	4393      	bics	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004948:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_RCC_ClockConfig+0x19c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	4013      	ands	r3, r2
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d001      	beq.n	800495a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e020      	b.n	800499c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2204      	movs	r2, #4
 8004960:	4013      	ands	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <HAL_RCC_ClockConfig+0x1a8>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004978:	f000 f820 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497c:	0001      	movs	r1, r0
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	220f      	movs	r2, #15
 8004986:	4013      	ands	r3, r2
 8004988:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_RCC_ClockConfig+0x1ac>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	000a      	movs	r2, r1
 800498e:	40da      	lsrs	r2, r3
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004994:	2003      	movs	r0, #3
 8004996:	f7fc fe55 	bl	8001644 <HAL_InitTick>
  
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40022000 	.word	0x40022000
 80049a8:	40021000 	.word	0x40021000
 80049ac:	00001388 	.word	0x00001388
 80049b0:	fffff8ff 	.word	0xfffff8ff
 80049b4:	0800b658 	.word	0x0800b658
 80049b8:	20000000 	.word	0x20000000

080049bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b08f      	sub	sp, #60	; 0x3c
 80049c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80049c2:	2314      	movs	r3, #20
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	4a38      	ldr	r2, [pc, #224]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xec>)
 80049c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049ca:	c313      	stmia	r3!, {r0, r1, r4}
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80049d0:	1d3b      	adds	r3, r7, #4
 80049d2:	4a36      	ldr	r2, [pc, #216]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf0>)
 80049d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049d6:	c313      	stmia	r3!, {r0, r1, r4}
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e0:	2300      	movs	r3, #0
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e4:	2300      	movs	r3, #0
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	220c      	movs	r2, #12
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d047      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0xd4>
 8004a00:	d849      	bhi.n	8004a96 <HAL_RCC_GetSysClockFreq+0xda>
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d002      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x50>
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x56>
 8004a0a:	e044      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a10:	e044      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	0c9b      	lsrs	r3, r3, #18
 8004a16:	220f      	movs	r2, #15
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2214      	movs	r2, #20
 8004a1c:	18ba      	adds	r2, r7, r2
 8004a1e:	5cd3      	ldrb	r3, [r2, r3]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a22:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	220f      	movs	r2, #15
 8004a28:	4013      	ands	r3, r2
 8004a2a:	1d3a      	adds	r2, r7, #4
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a32:	23c0      	movs	r3, #192	; 0xc0
 8004a34:	025b      	lsls	r3, r3, #9
 8004a36:	401a      	ands	r2, r3
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	025b      	lsls	r3, r3, #9
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d109      	bne.n	8004a54 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a42:	481c      	ldr	r0, [pc, #112]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a44:	f7fb fb72 	bl	800012c <__udivsi3>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	4353      	muls	r3, r2
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
 8004a52:	e01a      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a56:	23c0      	movs	r3, #192	; 0xc0
 8004a58:	025b      	lsls	r3, r3, #9
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	23c0      	movs	r3, #192	; 0xc0
 8004a5e:	025b      	lsls	r3, r3, #9
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d109      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a66:	4814      	ldr	r0, [pc, #80]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a68:	f7fb fb60 	bl	800012c <__udivsi3>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	001a      	movs	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	4353      	muls	r3, r2
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7a:	4810      	ldr	r0, [pc, #64]	; (8004abc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a7c:	f7fb fb56 	bl	800012c <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	001a      	movs	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	4353      	muls	r3, r2
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a8e:	e005      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a94:	e002      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b00f      	add	sp, #60	; 0x3c
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	0800b5f0 	.word	0x0800b5f0
 8004aac:	0800b600 	.word	0x0800b600
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	02dc6c00 	.word	0x02dc6c00
 8004abc:	007a1200 	.word	0x007a1200

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ad8:	f7ff fff2 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004adc:	0001      	movs	r1, r0
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	40d9      	lsrs	r1, r3
 8004aee:	000b      	movs	r3, r1
}    
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800b668 	.word	0x0800b668

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	025b      	lsls	r3, r3, #9
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b1c:	e08e      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2017      	movs	r0, #23
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b6e      	ldr	r3, [pc, #440]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	055b      	lsls	r3, r3, #21
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d110      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b6b      	ldr	r3, [pc, #428]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	0549      	lsls	r1, r1, #21
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	61da      	str	r2, [r3, #28]
 8004b40:	4b67      	ldr	r3, [pc, #412]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	055b      	lsls	r3, r3, #21
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d11a      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	0049      	lsls	r1, r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fdaf 	bl	80016d0 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fc fdaa 	bl	80016d0 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0a6      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4013      	ands	r3, r2
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b96:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	23c0      	movs	r3, #192	; 0xc0
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d034      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	23c0      	movs	r3, #192	; 0xc0
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d02c      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb8:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4a4a      	ldr	r2, [pc, #296]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	0249      	lsls	r1, r1, #9
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd0:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bd6:	4945      	ldr	r1, [pc, #276]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bdc:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4013      	ands	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fc fd71 	bl	80016d0 <HAL_GetTick>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fc fd6c 	bl	80016d0 <HAL_GetTick>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e067      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c12:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4a34      	ldr	r2, [pc, #208]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c26:	2317      	movs	r3, #23
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b2b      	ldr	r3, [pc, #172]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c36:	492f      	ldr	r1, [pc, #188]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004c38:	400a      	ands	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	4393      	bics	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c56:	430a      	orrs	r2, r1
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	4013      	ands	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c64:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c74:	430a      	orrs	r2, r1
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	2210      	movs	r2, #16
 8004c88:	4393      	bics	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c92:	430a      	orrs	r2, r1
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	029b      	lsls	r3, r3, #10
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	4393      	bics	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	4393      	bics	r3, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	fffffcff 	.word	0xfffffcff
 8004cec:	fffeffff 	.word	0xfffeffff
 8004cf0:	00001388 	.word	0x00001388
 8004cf4:	efffffff 	.word	0xefffffff
 8004cf8:	fffcffff 	.word	0xfffcffff

08004cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0a8      	b.n	8004e60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	2382      	movs	r3, #130	; 0x82
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d009      	beq.n	8004d36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	61da      	str	r2, [r3, #28]
 8004d28:	e005      	b.n	8004d36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	225d      	movs	r2, #93	; 0x5d
 8004d40:	5c9b      	ldrb	r3, [r3, r2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	225c      	movs	r2, #92	; 0x5c
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7fc fada 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	225d      	movs	r2, #93	; 0x5d
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2140      	movs	r1, #64	; 0x40
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	23e0      	movs	r3, #224	; 0xe0
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d902      	bls.n	8004d82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e002      	b.n	8004d88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	015b      	lsls	r3, r3, #5
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	23f0      	movs	r3, #240	; 0xf0
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d008      	beq.n	8004da6 <HAL_SPI_Init+0xaa>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	23e0      	movs	r3, #224	; 0xe0
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	2382      	movs	r3, #130	; 0x82
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	401a      	ands	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6899      	ldr	r1, [r3, #8]
 8004db4:	2384      	movs	r3, #132	; 0x84
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	400b      	ands	r3, r1
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2101      	movs	r1, #1
 8004dcc:	400b      	ands	r3, r1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6999      	ldr	r1, [r3, #24]
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	400b      	ands	r3, r1
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2138      	movs	r1, #56	; 0x38
 8004de2:	400b      	ands	r3, r1
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	400b      	ands	r3, r1
 8004dee:	431a      	orrs	r2, r3
 8004df0:	0011      	movs	r1, r2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2110      	movs	r1, #16
 8004e14:	400b      	ands	r3, r1
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	2108      	movs	r1, #8
 8004e1e:	400b      	ands	r3, r1
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68d9      	ldr	r1, [r3, #12]
 8004e26:	23f0      	movs	r3, #240	; 0xf0
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	0011      	movs	r1, r2
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	015b      	lsls	r3, r3, #5
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4907      	ldr	r1, [pc, #28]	; (8004e68 <HAL_SPI_Init+0x16c>)
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	225d      	movs	r2, #93	; 0x5d
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b004      	add	sp, #16
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fffff7ff 	.word	0xfffff7ff

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	223d      	movs	r2, #61	; 0x3d
 8004e82:	5c9b      	ldrb	r3, [r3, r2]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	223c      	movs	r2, #60	; 0x3c
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fc fa87 	bl	80013a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	223d      	movs	r2, #61	; 0x3d
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	0019      	movs	r1, r3
 8004eac:	0010      	movs	r0, r2
 8004eae:	f000 fa65 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2246      	movs	r2, #70	; 0x46
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	223e      	movs	r2, #62	; 0x3e
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	223f      	movs	r2, #63	; 0x3f
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	5499      	strb	r1, [r3, r2]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2240      	movs	r2, #64	; 0x40
 8004ece:	2101      	movs	r1, #1
 8004ed0:	5499      	strb	r1, [r3, r2]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2241      	movs	r2, #65	; 0x41
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2242      	movs	r2, #66	; 0x42
 8004ede:	2101      	movs	r1, #1
 8004ee0:	5499      	strb	r1, [r3, r2]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2243      	movs	r2, #67	; 0x43
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	5499      	strb	r1, [r3, r2]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2244      	movs	r2, #68	; 0x44
 8004eee:	2101      	movs	r1, #1
 8004ef0:	5499      	strb	r1, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2245      	movs	r2, #69	; 0x45
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	223d      	movs	r2, #61	; 0x3d
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223d      	movs	r2, #61	; 0x3d
 8004f18:	5c9b      	ldrb	r3, [r3, r2]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e03b      	b.n	8004f9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	223d      	movs	r2, #61	; 0x3d
 8004f28:	2102      	movs	r1, #2
 8004f2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2101      	movs	r1, #1
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_TIM_Base_Start_IT+0x98>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x5a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	05db      	lsls	r3, r3, #23
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x5a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x5a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <HAL_TIM_Base_Start_IT+0xa0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d111      	bne.n	8004f8a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d010      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	430a      	orrs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e007      	b.n	8004f9a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b004      	add	sp, #16
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40014000 	.word	0x40014000

08004fb0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e042      	b.n	8005048 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223d      	movs	r2, #61	; 0x3d
 8004fc6:	5c9b      	ldrb	r3, [r3, r2]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	223c      	movs	r2, #60	; 0x3c
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f000 f839 	bl	8005050 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	223d      	movs	r2, #61	; 0x3d
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	0019      	movs	r1, r3
 8004ff0:	0010      	movs	r0, r2
 8004ff2:	f000 f9c3 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2246      	movs	r2, #70	; 0x46
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	223e      	movs	r2, #62	; 0x3e
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	223f      	movs	r2, #63	; 0x3f
 800500a:	2101      	movs	r1, #1
 800500c:	5499      	strb	r1, [r3, r2]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2240      	movs	r2, #64	; 0x40
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2241      	movs	r2, #65	; 0x41
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2242      	movs	r2, #66	; 0x42
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2243      	movs	r2, #67	; 0x43
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2244      	movs	r2, #68	; 0x44
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2245      	movs	r2, #69	; 0x45
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	223d      	movs	r2, #61	; 0x3d
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b002      	add	sp, #8
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2202      	movs	r2, #2
 8005070:	4013      	ands	r3, r2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d124      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	4013      	ands	r3, r2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d11d      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2203      	movs	r2, #3
 800508a:	4252      	negs	r2, r2
 800508c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2203      	movs	r2, #3
 800509c:	4013      	ands	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f952 	bl	800534c <HAL_TIM_IC_CaptureCallback>
 80050a8:	e007      	b.n	80050ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 f945 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 f951 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2204      	movs	r2, #4
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d125      	bne.n	800511a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2204      	movs	r2, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d11e      	bne.n	800511a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2205      	movs	r2, #5
 80050e2:	4252      	negs	r2, r2
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	23c0      	movs	r3, #192	; 0xc0
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 f925 	bl	800534c <HAL_TIM_IC_CaptureCallback>
 8005102:	e007      	b.n	8005114 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 f918 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 f924 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2208      	movs	r2, #8
 8005122:	4013      	ands	r3, r2
 8005124:	2b08      	cmp	r3, #8
 8005126:	d124      	bne.n	8005172 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2208      	movs	r2, #8
 8005130:	4013      	ands	r3, r2
 8005132:	2b08      	cmp	r3, #8
 8005134:	d11d      	bne.n	8005172 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2209      	movs	r2, #9
 800513c:	4252      	negs	r2, r2
 800513e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	2203      	movs	r2, #3
 800514e:	4013      	ands	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 f8f9 	bl	800534c <HAL_TIM_IC_CaptureCallback>
 800515a:	e007      	b.n	800516c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f8ec 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f8f8 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2210      	movs	r2, #16
 800517a:	4013      	ands	r3, r2
 800517c:	2b10      	cmp	r3, #16
 800517e:	d125      	bne.n	80051cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2210      	movs	r2, #16
 8005188:	4013      	ands	r3, r2
 800518a:	2b10      	cmp	r3, #16
 800518c:	d11e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2211      	movs	r2, #17
 8005194:	4252      	negs	r2, r2
 8005196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2208      	movs	r2, #8
 800519c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	23c0      	movs	r3, #192	; 0xc0
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4013      	ands	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f000 f8cc 	bl	800534c <HAL_TIM_IC_CaptureCallback>
 80051b4:	e007      	b.n	80051c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 f8bf 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 f8cb 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2201      	movs	r2, #1
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10f      	bne.n	80051fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d108      	bne.n	80051fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2202      	movs	r2, #2
 80051ee:	4252      	negs	r2, r2
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7fb f931 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2280      	movs	r2, #128	; 0x80
 8005202:	4013      	ands	r3, r2
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d10f      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	4013      	ands	r3, r2
 8005212:	2b80      	cmp	r3, #128	; 0x80
 8005214:	d108      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2281      	movs	r2, #129	; 0x81
 800521c:	4252      	negs	r2, r2
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	0018      	movs	r0, r3
 8005224:	f000 fb2e 	bl	8005884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	4013      	ands	r3, r2
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d10f      	bne.n	8005256 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2240      	movs	r2, #64	; 0x40
 800523e:	4013      	ands	r3, r2
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d108      	bne.n	8005256 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2241      	movs	r2, #65	; 0x41
 800524a:	4252      	negs	r2, r2
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f000 f88b 	bl	800536c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2220      	movs	r2, #32
 800525e:	4013      	ands	r3, r2
 8005260:	2b20      	cmp	r3, #32
 8005262:	d10f      	bne.n	8005284 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	4013      	ands	r3, r2
 800526e:	2b20      	cmp	r3, #32
 8005270:	d108      	bne.n	8005284 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2221      	movs	r2, #33	; 0x21
 8005278:	4252      	negs	r2, r2
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f000 faf8 	bl	8005874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	223c      	movs	r2, #60	; 0x3c
 80052a4:	5c9b      	ldrb	r3, [r3, r2]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_OC_ConfigChannel+0x22>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e042      	b.n	8005334 <HAL_TIM_OC_ConfigChannel+0xa8>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	223c      	movs	r2, #60	; 0x3c
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d027      	beq.n	800530c <HAL_TIM_OC_ConfigChannel+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d82c      	bhi.n	800531c <HAL_TIM_OC_ConfigChannel+0x90>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d019      	beq.n	80052fc <HAL_TIM_OC_ConfigChannel+0x70>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d826      	bhi.n	800531c <HAL_TIM_OC_ConfigChannel+0x90>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_TIM_OC_ConfigChannel+0x50>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d008      	beq.n	80052ec <HAL_TIM_OC_ConfigChannel+0x60>
 80052da:	e01f      	b.n	800531c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f8c9 	bl	800547c <TIM_OC1_SetConfig>
      break;
 80052ea:	e01c      	b.n	8005326 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	0011      	movs	r1, r2
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 f949 	bl	800558c <TIM_OC2_SetConfig>
      break;
 80052fa:	e014      	b.n	8005326 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0011      	movs	r1, r2
 8005304:	0018      	movs	r0, r3
 8005306:	f000 f9c5 	bl	8005694 <TIM_OC3_SetConfig>
      break;
 800530a:	e00c      	b.n	8005326 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	0011      	movs	r1, r2
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fa43 	bl	80057a0 <TIM_OC4_SetConfig>
      break;
 800531a:	e004      	b.n	8005326 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800531c:	2317      	movs	r3, #23
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
      break;
 8005324:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	223c      	movs	r2, #60	; 0x3c
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]

  return status;
 800532e:	2317      	movs	r3, #23
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b006      	add	sp, #24
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b002      	add	sp, #8
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}

0800537c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a34      	ldr	r2, [pc, #208]	; (8005460 <TIM_Base_SetConfig+0xe4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d008      	beq.n	80053a6 <TIM_Base_SetConfig+0x2a>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	05db      	lsls	r3, r3, #23
 800539a:	429a      	cmp	r2, r3
 800539c:	d003      	beq.n	80053a6 <TIM_Base_SetConfig+0x2a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a30      	ldr	r2, [pc, #192]	; (8005464 <TIM_Base_SetConfig+0xe8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2270      	movs	r2, #112	; 0x70
 80053aa:	4393      	bics	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_Base_SetConfig+0xe4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	05db      	lsls	r3, r3, #23
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d013      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a25      	ldr	r2, [pc, #148]	; (8005464 <TIM_Base_SetConfig+0xe8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a24      	ldr	r2, [pc, #144]	; (8005468 <TIM_Base_SetConfig+0xec>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a23      	ldr	r2, [pc, #140]	; (800546c <TIM_Base_SetConfig+0xf0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <TIM_Base_SetConfig+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0x76>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a21      	ldr	r2, [pc, #132]	; (8005474 <TIM_Base_SetConfig+0xf8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a20      	ldr	r2, [pc, #128]	; (8005478 <TIM_Base_SetConfig+0xfc>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	4393      	bics	r3, r2
 800540a:	001a      	movs	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <TIM_Base_SetConfig+0xe4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0xce>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <TIM_Base_SetConfig+0xf0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0xce>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0xf4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0xce>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <TIM_Base_SetConfig+0xf8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d103      	bne.n	8005452 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	615a      	str	r2, [r3, #20]
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b004      	add	sp, #16
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40002000 	.word	0x40002000
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	fffffcff 	.word	0xfffffcff

0800547c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	2201      	movs	r2, #1
 800548c:	4393      	bics	r3, r2
 800548e:	001a      	movs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2270      	movs	r2, #112	; 0x70
 80054aa:	4393      	bics	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2203      	movs	r2, #3
 80054b2:	4393      	bics	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2202      	movs	r2, #2
 80054c4:	4393      	bics	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <TIM_OC1_SetConfig+0xf8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_OC1_SetConfig+0x76>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a26      	ldr	r2, [pc, #152]	; (8005578 <TIM_OC1_SetConfig+0xfc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_OC1_SetConfig+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a25      	ldr	r2, [pc, #148]	; (800557c <TIM_OC1_SetConfig+0x100>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC1_SetConfig+0x76>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a24      	ldr	r2, [pc, #144]	; (8005580 <TIM_OC1_SetConfig+0x104>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10c      	bne.n	800550c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2208      	movs	r2, #8
 80054f6:	4393      	bics	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2204      	movs	r2, #4
 8005508:	4393      	bics	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a19      	ldr	r2, [pc, #100]	; (8005574 <TIM_OC1_SetConfig+0xf8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_OC1_SetConfig+0xb0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <TIM_OC1_SetConfig+0xfc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_OC1_SetConfig+0xb0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <TIM_OC1_SetConfig+0x100>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_OC1_SetConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <TIM_OC1_SetConfig+0x104>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d111      	bne.n	8005550 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC1_SetConfig+0x108>)
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4a14      	ldr	r2, [pc, #80]	; (8005588 <TIM_OC1_SetConfig+0x10c>)
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b006      	add	sp, #24
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	fffffeff 	.word	0xfffffeff
 8005588:	fffffdff 	.word	0xfffffdff

0800558c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	2210      	movs	r2, #16
 800559c:	4393      	bics	r3, r2
 800559e:	001a      	movs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <TIM_OC2_SetConfig+0xe8>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <TIM_OC2_SetConfig+0xec>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2220      	movs	r2, #32
 80055d6:	4393      	bics	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a24      	ldr	r2, [pc, #144]	; (800567c <TIM_OC2_SetConfig+0xf0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	4393      	bics	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2240      	movs	r2, #64	; 0x40
 8005606:	4393      	bics	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1b      	ldr	r2, [pc, #108]	; (800567c <TIM_OC2_SetConfig+0xf0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_OC2_SetConfig+0x9e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <TIM_OC2_SetConfig+0xf4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_OC2_SetConfig+0x9e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <TIM_OC2_SetConfig+0xf8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC2_SetConfig+0x9e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <TIM_OC2_SetConfig+0xfc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d113      	bne.n	8005652 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4a17      	ldr	r2, [pc, #92]	; (800568c <TIM_OC2_SetConfig+0x100>)
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4a16      	ldr	r2, [pc, #88]	; (8005690 <TIM_OC2_SetConfig+0x104>)
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b006      	add	sp, #24
 8005672:	bd80      	pop	{r7, pc}
 8005674:	ffff8fff 	.word	0xffff8fff
 8005678:	fffffcff 	.word	0xfffffcff
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800
 800568c:	fffffbff 	.word	0xfffffbff
 8005690:	fffff7ff 	.word	0xfffff7ff

08005694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4a35      	ldr	r2, [pc, #212]	; (8005778 <TIM_OC3_SetConfig+0xe4>)
 80056a4:	401a      	ands	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2270      	movs	r2, #112	; 0x70
 80056c0:	4393      	bics	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2203      	movs	r2, #3
 80056c8:	4393      	bics	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4a28      	ldr	r2, [pc, #160]	; (800577c <TIM_OC3_SetConfig+0xe8>)
 80056da:	4013      	ands	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a24      	ldr	r2, [pc, #144]	; (8005780 <TIM_OC3_SetConfig+0xec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10d      	bne.n	800570e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4a23      	ldr	r2, [pc, #140]	; (8005784 <TIM_OC3_SetConfig+0xf0>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <TIM_OC3_SetConfig+0xf4>)
 800570a:	4013      	ands	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <TIM_OC3_SetConfig+0xec>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC3_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1c      	ldr	r2, [pc, #112]	; (800578c <TIM_OC3_SetConfig+0xf8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC3_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <TIM_OC3_SetConfig+0xfc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <TIM_OC3_SetConfig+0x100>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d113      	bne.n	8005756 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <TIM_OC3_SetConfig+0x104>)
 8005732:	4013      	ands	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4a18      	ldr	r2, [pc, #96]	; (800579c <TIM_OC3_SetConfig+0x108>)
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b006      	add	sp, #24
 8005776:	bd80      	pop	{r7, pc}
 8005778:	fffffeff 	.word	0xfffffeff
 800577c:	fffffdff 	.word	0xfffffdff
 8005780:	40012c00 	.word	0x40012c00
 8005784:	fffff7ff 	.word	0xfffff7ff
 8005788:	fffffbff 	.word	0xfffffbff
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800
 8005798:	ffffefff 	.word	0xffffefff
 800579c:	ffffdfff 	.word	0xffffdfff

080057a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a28      	ldr	r2, [pc, #160]	; (8005850 <TIM_OC4_SetConfig+0xb0>)
 80057b0:	401a      	ands	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a22      	ldr	r2, [pc, #136]	; (8005854 <TIM_OC4_SetConfig+0xb4>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <TIM_OC4_SetConfig+0xb8>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4a1d      	ldr	r2, [pc, #116]	; (800585c <TIM_OC4_SetConfig+0xbc>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	031b      	lsls	r3, r3, #12
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <TIM_OC4_SetConfig+0xc0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_OC4_SetConfig+0x78>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <TIM_OC4_SetConfig+0xc4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_OC4_SetConfig+0x78>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a17      	ldr	r2, [pc, #92]	; (8005868 <TIM_OC4_SetConfig+0xc8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0x78>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a16      	ldr	r2, [pc, #88]	; (800586c <TIM_OC4_SetConfig+0xcc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <TIM_OC4_SetConfig+0xd0>)
 800581c:	4013      	ands	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b006      	add	sp, #24
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	ffffefff 	.word	0xffffefff
 8005854:	ffff8fff 	.word	0xffff8fff
 8005858:	fffffcff 	.word	0xfffffcff
 800585c:	ffffdfff 	.word	0xffffdfff
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800
 8005870:	ffffbfff 	.word	0xffffbfff

08005874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e044      	b.n	8005930 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d107      	bne.n	80058be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2274      	movs	r2, #116	; 0x74
 80058b2:	2100      	movs	r1, #0
 80058b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7fb fd9d 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2224      	movs	r2, #36	; 0x24
 80058c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2101      	movs	r1, #1
 80058d0:	438a      	bics	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 fb24 	bl	8005f24 <UART_SetConfig>
 80058dc:	0003      	movs	r3, r0
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e024      	b.n	8005930 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 fc9f 	bl	8006234 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	490d      	ldr	r1, [pc, #52]	; (8005938 <HAL_UART_Init+0xa4>)
 8005902:	400a      	ands	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	212a      	movs	r1, #42	; 0x2a
 8005912:	438a      	bics	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2101      	movs	r1, #1
 8005922:	430a      	orrs	r2, r1
 8005924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f000 fd37 	bl	800639c <UART_CheckIdleState>
 800592e:	0003      	movs	r3, r0
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b002      	add	sp, #8
 8005936:	bd80      	pop	{r7, pc}
 8005938:	ffffb7ff 	.word	0xffffb7ff

0800593c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b0ab      	sub	sp, #172	; 0xac
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	22a4      	movs	r2, #164	; 0xa4
 800594c:	18b9      	adds	r1, r7, r2
 800594e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	20a0      	movs	r0, #160	; 0xa0
 8005958:	1839      	adds	r1, r7, r0
 800595a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	219c      	movs	r1, #156	; 0x9c
 8005964:	1879      	adds	r1, r7, r1
 8005966:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005968:	0011      	movs	r1, r2
 800596a:	18bb      	adds	r3, r7, r2
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a99      	ldr	r2, [pc, #612]	; (8005bd4 <HAL_UART_IRQHandler+0x298>)
 8005970:	4013      	ands	r3, r2
 8005972:	2298      	movs	r2, #152	; 0x98
 8005974:	18bc      	adds	r4, r7, r2
 8005976:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005978:	18bb      	adds	r3, r7, r2
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005980:	187b      	adds	r3, r7, r1
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2220      	movs	r2, #32
 8005986:	4013      	ands	r3, r2
 8005988:	d00f      	beq.n	80059aa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800598a:	183b      	adds	r3, r7, r0
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2220      	movs	r2, #32
 8005990:	4013      	ands	r3, r2
 8005992:	d00a      	beq.n	80059aa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005998:	2b00      	cmp	r3, #0
 800599a:	d100      	bne.n	800599e <HAL_UART_IRQHandler+0x62>
 800599c:	e296      	b.n	8005ecc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	0010      	movs	r0, r2
 80059a6:	4798      	blx	r3
      }
      return;
 80059a8:	e290      	b.n	8005ecc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059aa:	2398      	movs	r3, #152	; 0x98
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d100      	bne.n	80059b6 <HAL_UART_IRQHandler+0x7a>
 80059b4:	e114      	b.n	8005be0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059b6:	239c      	movs	r3, #156	; 0x9c
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	d106      	bne.n	80059d0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059c2:	23a0      	movs	r3, #160	; 0xa0
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <HAL_UART_IRQHandler+0x29c>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	d100      	bne.n	80059d0 <HAL_UART_IRQHandler+0x94>
 80059ce:	e107      	b.n	8005be0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059d0:	23a4      	movs	r3, #164	; 0xa4
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	4013      	ands	r3, r2
 80059da:	d012      	beq.n	8005a02 <HAL_UART_IRQHandler+0xc6>
 80059dc:	23a0      	movs	r3, #160	; 0xa0
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	589b      	ldr	r3, [r3, r2]
 80059f8:	2201      	movs	r2, #1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a02:	23a4      	movs	r3, #164	; 0xa4
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d011      	beq.n	8005a32 <HAL_UART_IRQHandler+0xf6>
 8005a0e:	239c      	movs	r3, #156	; 0x9c
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	589b      	ldr	r3, [r3, r2]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a32:	23a4      	movs	r3, #164	; 0xa4
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d011      	beq.n	8005a62 <HAL_UART_IRQHandler+0x126>
 8005a3e:	239c      	movs	r3, #156	; 0x9c
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2201      	movs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	589b      	ldr	r3, [r3, r2]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a62:	23a4      	movs	r3, #164	; 0xa4
 8005a64:	18fb      	adds	r3, r7, r3
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a6e:	23a0      	movs	r3, #160	; 0xa0
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2220      	movs	r2, #32
 8005a76:	4013      	ands	r3, r2
 8005a78:	d105      	bne.n	8005a86 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a7a:	239c      	movs	r3, #156	; 0x9c
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a84:	d00b      	beq.n	8005a9e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	589b      	ldr	r3, [r3, r2]
 8005a94:	2208      	movs	r2, #8
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a9e:	23a4      	movs	r3, #164	; 0xa4
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	2380      	movs	r3, #128	; 0x80
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x198>
 8005aac:	23a0      	movs	r3, #160	; 0xa0
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	04db      	lsls	r3, r3, #19
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d00c      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	589b      	ldr	r3, [r3, r2]
 8005aca:	2220      	movs	r2, #32
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2180      	movs	r1, #128	; 0x80
 8005ad2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	589b      	ldr	r3, [r3, r2]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d100      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x1a4>
 8005ade:	e1f7      	b.n	8005ed0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ae0:	23a4      	movs	r3, #164	; 0xa4
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aec:	23a0      	movs	r3, #160	; 0xa0
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2220      	movs	r2, #32
 8005af4:	4013      	ands	r3, r2
 8005af6:	d008      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	0010      	movs	r0, r2
 8005b08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	589b      	ldr	r3, [r3, r2]
 8005b10:	2194      	movs	r1, #148	; 0x94
 8005b12:	187a      	adds	r2, r7, r1
 8005b14:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d004      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2228      	movs	r2, #40	; 0x28
 8005b2a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b2c:	d047      	beq.n	8005bbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 fd3f 	bl	80065b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2240      	movs	r2, #64	; 0x40
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d137      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b44:	f3ef 8310 	mrs	r3, PRIMASK
 8005b48:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4c:	2090      	movs	r0, #144	; 0x90
 8005b4e:	183a      	adds	r2, r7, r0
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2140      	movs	r1, #64	; 0x40
 8005b6a:	438a      	bics	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
 8005b6e:	183b      	adds	r3, r7, r0
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <HAL_UART_IRQHandler+0x2a0>)
 8005b8a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7fc f953 	bl	8001e3c <HAL_DMA_Abort_IT>
 8005b96:	1e03      	subs	r3, r0, #0
 8005b98:	d01a      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e012      	b.n	8005bd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f9a5 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	e00d      	b.n	8005bd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f000 f9a0 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e008      	b.n	8005bd0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f99b 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2280      	movs	r2, #128	; 0x80
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005bce:	e17f      	b.n	8005ed0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	46c0      	nop			; (mov r8, r8)
    return;
 8005bd2:	e17d      	b.n	8005ed0 <HAL_UART_IRQHandler+0x594>
 8005bd4:	0000080f 	.word	0x0000080f
 8005bd8:	04000120 	.word	0x04000120
 8005bdc:	08006679 	.word	0x08006679

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d000      	beq.n	8005bea <HAL_UART_IRQHandler+0x2ae>
 8005be8:	e131      	b.n	8005e4e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bea:	23a4      	movs	r3, #164	; 0xa4
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d100      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x2bc>
 8005bf6:	e12a      	b.n	8005e4e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bf8:	23a0      	movs	r3, #160	; 0xa0
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	4013      	ands	r3, r2
 8005c02:	d100      	bne.n	8005c06 <HAL_UART_IRQHandler+0x2ca>
 8005c04:	e123      	b.n	8005e4e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2240      	movs	r2, #64	; 0x40
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d000      	beq.n	8005c1e <HAL_UART_IRQHandler+0x2e2>
 8005c1c:	e09b      	b.n	8005d56 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	217e      	movs	r1, #126	; 0x7e
 8005c28:	187b      	adds	r3, r7, r1
 8005c2a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005c2c:	187b      	adds	r3, r7, r1
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d100      	bne.n	8005c36 <HAL_UART_IRQHandler+0x2fa>
 8005c34:	e14e      	b.n	8005ed4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2258      	movs	r2, #88	; 0x58
 8005c3a:	5a9b      	ldrh	r3, [r3, r2]
 8005c3c:	187a      	adds	r2, r7, r1
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d300      	bcc.n	8005c46 <HAL_UART_IRQHandler+0x30a>
 8005c44:	e146      	b.n	8005ed4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	187a      	adds	r2, r7, r1
 8005c4a:	215a      	movs	r1, #90	; 0x5a
 8005c4c:	8812      	ldrh	r2, [r2, #0]
 8005c4e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d06e      	beq.n	8005d38 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c64:	2301      	movs	r3, #1
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	f383 8810 	msr	PRIMASK, r3
}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	499a      	ldr	r1, [pc, #616]	; (8005ee4 <HAL_UART_IRQHandler+0x5a8>)
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	677b      	str	r3, [r7, #116]	; 0x74
 8005c96:	2301      	movs	r3, #1
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ca0:	46c0      	nop			; (mov r8, r8)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2101      	movs	r1, #1
 8005cae:	438a      	bics	r2, r1
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005cc8:	2301      	movs	r3, #1
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cce:	f383 8810 	msr	PRIMASK, r3
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2140      	movs	r1, #64	; 0x40
 8005ce0:	438a      	bics	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cea:	f383 8810 	msr	PRIMASK, r3
}
 8005cee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d06:	2301      	movs	r3, #1
 8005d08:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2110      	movs	r1, #16
 8005d1e:	438a      	bics	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fc f84a 	bl	8001dcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2258      	movs	r2, #88	; 0x58
 8005d3c:	5a9a      	ldrh	r2, [r3, r2]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	215a      	movs	r1, #90	; 0x5a
 8005d42:	5a5b      	ldrh	r3, [r3, r1]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0011      	movs	r1, r2
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f000 f8dc 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d54:	e0be      	b.n	8005ed4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2258      	movs	r2, #88	; 0x58
 8005d5a:	5a99      	ldrh	r1, [r3, r2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	225a      	movs	r2, #90	; 0x5a
 8005d60:	5a9b      	ldrh	r3, [r3, r2]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	208e      	movs	r0, #142	; 0x8e
 8005d66:	183b      	adds	r3, r7, r0
 8005d68:	1a8a      	subs	r2, r1, r2
 8005d6a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	225a      	movs	r2, #90	; 0x5a
 8005d70:	5a9b      	ldrh	r3, [r3, r2]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d100      	bne.n	8005d7a <HAL_UART_IRQHandler+0x43e>
 8005d78:	e0ae      	b.n	8005ed8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005d7a:	183b      	adds	r3, r7, r0
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d100      	bne.n	8005d84 <HAL_UART_IRQHandler+0x448>
 8005d82:	e0a9      	b.n	8005ed8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d84:	f3ef 8310 	mrs	r3, PRIMASK
 8005d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8c:	2488      	movs	r4, #136	; 0x88
 8005d8e:	193a      	adds	r2, r7, r4
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	2301      	movs	r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	494f      	ldr	r1, [pc, #316]	; (8005ee8 <HAL_UART_IRQHandler+0x5ac>)
 8005daa:	400a      	ands	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f383 8810 	msr	PRIMASK, r3
}
 8005dba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dc2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	2484      	movs	r4, #132	; 0x84
 8005dc6:	193a      	adds	r2, r7, r4
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	2301      	movs	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	438a      	bics	r2, r1
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	193b      	adds	r3, r7, r4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e06:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0e:	2480      	movs	r4, #128	; 0x80
 8005e10:	193a      	adds	r2, r7, r4
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	2301      	movs	r3, #1
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	f383 8810 	msr	PRIMASK, r3
}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	193b      	adds	r3, r7, r4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	f383 8810 	msr	PRIMASK, r3
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e3e:	183b      	adds	r3, r7, r0
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 f860 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e4c:	e044      	b.n	8005ed8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e4e:	23a4      	movs	r3, #164	; 0xa4
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	035b      	lsls	r3, r3, #13
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d010      	beq.n	8005e7e <HAL_UART_IRQHandler+0x542>
 8005e5c:	239c      	movs	r3, #156	; 0x9c
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	2380      	movs	r3, #128	; 0x80
 8005e64:	03db      	lsls	r3, r3, #15
 8005e66:	4013      	ands	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	0352      	lsls	r2, r2, #13
 8005e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 fc40 	bl	80066fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e7c:	e02f      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e7e:	23a4      	movs	r3, #164	; 0xa4
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2280      	movs	r2, #128	; 0x80
 8005e86:	4013      	ands	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e8a:	23a0      	movs	r3, #160	; 0xa0
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	4013      	ands	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01e      	beq.n	8005edc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	0010      	movs	r0, r2
 8005ea6:	4798      	blx	r3
    }
    return;
 8005ea8:	e018      	b.n	8005edc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eaa:	23a4      	movs	r3, #164	; 0xa4
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2240      	movs	r2, #64	; 0x40
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d013      	beq.n	8005ede <HAL_UART_IRQHandler+0x5a2>
 8005eb6:	23a0      	movs	r3, #160	; 0xa0
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d00d      	beq.n	8005ede <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 fbee 	bl	80066a6 <UART_EndTransmit_IT>
    return;
 8005eca:	e008      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
      return;
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	e006      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
    return;
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	e004      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
      return;
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	e002      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
      return;
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	e000      	b.n	8005ede <HAL_UART_IRQHandler+0x5a2>
    return;
 8005edc:	46c0      	nop			; (mov r8, r8)
  }

}
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b02b      	add	sp, #172	; 0xac
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	fffffeff 	.word	0xfffffeff
 8005ee8:	fffffedf 	.word	0xfffffedf

08005eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	000a      	movs	r2, r1
 8005f16:	1cbb      	adds	r3, r7, #2
 8005f18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2c:	231e      	movs	r3, #30
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4aaf      	ldr	r2, [pc, #700]	; (8006210 <UART_SetConfig+0x2ec>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4aaa      	ldr	r2, [pc, #680]	; (8006214 <UART_SetConfig+0x2f0>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4aa1      	ldr	r2, [pc, #644]	; (8006218 <UART_SetConfig+0x2f4>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	0019      	movs	r1, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a9d      	ldr	r2, [pc, #628]	; (800621c <UART_SetConfig+0x2f8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d127      	bne.n	8005ffa <UART_SetConfig+0xd6>
 8005faa:	4b9d      	ldr	r3, [pc, #628]	; (8006220 <UART_SetConfig+0x2fc>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d00d      	beq.n	8005fd2 <UART_SetConfig+0xae>
 8005fb6:	d81b      	bhi.n	8005ff0 <UART_SetConfig+0xcc>
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d014      	beq.n	8005fe6 <UART_SetConfig+0xc2>
 8005fbc:	d818      	bhi.n	8005ff0 <UART_SetConfig+0xcc>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <UART_SetConfig+0xa4>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d00a      	beq.n	8005fdc <UART_SetConfig+0xb8>
 8005fc6:	e013      	b.n	8005ff0 <UART_SetConfig+0xcc>
 8005fc8:	231f      	movs	r3, #31
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e065      	b.n	800609e <UART_SetConfig+0x17a>
 8005fd2:	231f      	movs	r3, #31
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e060      	b.n	800609e <UART_SetConfig+0x17a>
 8005fdc:	231f      	movs	r3, #31
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e05b      	b.n	800609e <UART_SetConfig+0x17a>
 8005fe6:	231f      	movs	r3, #31
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	2208      	movs	r2, #8
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e056      	b.n	800609e <UART_SetConfig+0x17a>
 8005ff0:	231f      	movs	r3, #31
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e051      	b.n	800609e <UART_SetConfig+0x17a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a89      	ldr	r2, [pc, #548]	; (8006224 <UART_SetConfig+0x300>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d134      	bne.n	800606e <UART_SetConfig+0x14a>
 8006004:	4b86      	ldr	r3, [pc, #536]	; (8006220 <UART_SetConfig+0x2fc>)
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	23c0      	movs	r3, #192	; 0xc0
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	4013      	ands	r3, r2
 800600e:	22c0      	movs	r2, #192	; 0xc0
 8006010:	0292      	lsls	r2, r2, #10
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <UART_SetConfig+0x122>
 8006016:	22c0      	movs	r2, #192	; 0xc0
 8006018:	0292      	lsls	r2, r2, #10
 800601a:	4293      	cmp	r3, r2
 800601c:	d822      	bhi.n	8006064 <UART_SetConfig+0x140>
 800601e:	2280      	movs	r2, #128	; 0x80
 8006020:	0292      	lsls	r2, r2, #10
 8006022:	4293      	cmp	r3, r2
 8006024:	d019      	beq.n	800605a <UART_SetConfig+0x136>
 8006026:	2280      	movs	r2, #128	; 0x80
 8006028:	0292      	lsls	r2, r2, #10
 800602a:	4293      	cmp	r3, r2
 800602c:	d81a      	bhi.n	8006064 <UART_SetConfig+0x140>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <UART_SetConfig+0x118>
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	0252      	lsls	r2, r2, #9
 8006036:	4293      	cmp	r3, r2
 8006038:	d00a      	beq.n	8006050 <UART_SetConfig+0x12c>
 800603a:	e013      	b.n	8006064 <UART_SetConfig+0x140>
 800603c:	231f      	movs	r3, #31
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e02b      	b.n	800609e <UART_SetConfig+0x17a>
 8006046:	231f      	movs	r3, #31
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e026      	b.n	800609e <UART_SetConfig+0x17a>
 8006050:	231f      	movs	r3, #31
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	2204      	movs	r2, #4
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e021      	b.n	800609e <UART_SetConfig+0x17a>
 800605a:	231f      	movs	r3, #31
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2208      	movs	r2, #8
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e01c      	b.n	800609e <UART_SetConfig+0x17a>
 8006064:	231f      	movs	r3, #31
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	2210      	movs	r2, #16
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e017      	b.n	800609e <UART_SetConfig+0x17a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6d      	ldr	r2, [pc, #436]	; (8006228 <UART_SetConfig+0x304>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d104      	bne.n	8006082 <UART_SetConfig+0x15e>
 8006078:	231f      	movs	r3, #31
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	2200      	movs	r2, #0
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e00d      	b.n	800609e <UART_SetConfig+0x17a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a69      	ldr	r2, [pc, #420]	; (800622c <UART_SetConfig+0x308>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d104      	bne.n	8006096 <UART_SetConfig+0x172>
 800608c:	231f      	movs	r3, #31
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e003      	b.n	800609e <UART_SetConfig+0x17a>
 8006096:	231f      	movs	r3, #31
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	2210      	movs	r2, #16
 800609c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d15d      	bne.n	8006166 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80060aa:	231f      	movs	r3, #31
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d015      	beq.n	80060e0 <UART_SetConfig+0x1bc>
 80060b4:	dc18      	bgt.n	80060e8 <UART_SetConfig+0x1c4>
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d00d      	beq.n	80060d6 <UART_SetConfig+0x1b2>
 80060ba:	dc15      	bgt.n	80060e8 <UART_SetConfig+0x1c4>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <UART_SetConfig+0x1a2>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d005      	beq.n	80060d0 <UART_SetConfig+0x1ac>
 80060c4:	e010      	b.n	80060e8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fe fd05 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80060ca:	0003      	movs	r3, r0
 80060cc:	61bb      	str	r3, [r7, #24]
        break;
 80060ce:	e012      	b.n	80060f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b57      	ldr	r3, [pc, #348]	; (8006230 <UART_SetConfig+0x30c>)
 80060d2:	61bb      	str	r3, [r7, #24]
        break;
 80060d4:	e00f      	b.n	80060f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fe fc71 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 80060da:	0003      	movs	r3, r0
 80060dc:	61bb      	str	r3, [r7, #24]
        break;
 80060de:	e00a      	b.n	80060f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	61bb      	str	r3, [r7, #24]
        break;
 80060e6:	e006      	b.n	80060f6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ec:	231e      	movs	r3, #30
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
        break;
 80060f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d100      	bne.n	80060fe <UART_SetConfig+0x1da>
 80060fc:	e07b      	b.n	80061f6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	18d2      	adds	r2, r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	0019      	movs	r1, r3
 8006110:	0010      	movs	r0, r2
 8006112:	f7fa f80b 	bl	800012c <__udivsi3>
 8006116:	0003      	movs	r3, r0
 8006118:	b29b      	uxth	r3, r3
 800611a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d91c      	bls.n	800615c <UART_SetConfig+0x238>
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	025b      	lsls	r3, r3, #9
 8006128:	429a      	cmp	r2, r3
 800612a:	d217      	bcs.n	800615c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	b29a      	uxth	r2, r3
 8006130:	200e      	movs	r0, #14
 8006132:	183b      	adds	r3, r7, r0
 8006134:	210f      	movs	r1, #15
 8006136:	438a      	bics	r2, r1
 8006138:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	2207      	movs	r2, #7
 8006142:	4013      	ands	r3, r2
 8006144:	b299      	uxth	r1, r3
 8006146:	183b      	adds	r3, r7, r0
 8006148:	183a      	adds	r2, r7, r0
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	183a      	adds	r2, r7, r0
 8006156:	8812      	ldrh	r2, [r2, #0]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	e04c      	b.n	80061f6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800615c:	231e      	movs	r3, #30
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e047      	b.n	80061f6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006166:	231f      	movs	r3, #31
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d015      	beq.n	800619c <UART_SetConfig+0x278>
 8006170:	dc18      	bgt.n	80061a4 <UART_SetConfig+0x280>
 8006172:	2b04      	cmp	r3, #4
 8006174:	d00d      	beq.n	8006192 <UART_SetConfig+0x26e>
 8006176:	dc15      	bgt.n	80061a4 <UART_SetConfig+0x280>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <UART_SetConfig+0x25e>
 800617c:	2b02      	cmp	r3, #2
 800617e:	d005      	beq.n	800618c <UART_SetConfig+0x268>
 8006180:	e010      	b.n	80061a4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fe fca7 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8006186:	0003      	movs	r3, r0
 8006188:	61bb      	str	r3, [r7, #24]
        break;
 800618a:	e012      	b.n	80061b2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <UART_SetConfig+0x30c>)
 800618e:	61bb      	str	r3, [r7, #24]
        break;
 8006190:	e00f      	b.n	80061b2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006192:	f7fe fc13 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 8006196:	0003      	movs	r3, r0
 8006198:	61bb      	str	r3, [r7, #24]
        break;
 800619a:	e00a      	b.n	80061b2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	61bb      	str	r3, [r7, #24]
        break;
 80061a2:	e006      	b.n	80061b2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061a8:	231e      	movs	r3, #30
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
        break;
 80061b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01e      	beq.n	80061f6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	085a      	lsrs	r2, r3, #1
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	18d2      	adds	r2, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	0019      	movs	r1, r3
 80061c8:	0010      	movs	r0, r2
 80061ca:	f7f9 ffaf 	bl	800012c <__udivsi3>
 80061ce:	0003      	movs	r3, r0
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d909      	bls.n	80061ee <UART_SetConfig+0x2ca>
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	025b      	lsls	r3, r3, #9
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d204      	bcs.n	80061ee <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e003      	b.n	80061f6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80061ee:	231e      	movs	r3, #30
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006202:	231e      	movs	r3, #30
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	781b      	ldrb	r3, [r3, #0]
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b008      	add	sp, #32
 800620e:	bd80      	pop	{r7, pc}
 8006210:	efff69f3 	.word	0xefff69f3
 8006214:	ffffcfff 	.word	0xffffcfff
 8006218:	fffff4ff 	.word	0xfffff4ff
 800621c:	40013800 	.word	0x40013800
 8006220:	40021000 	.word	0x40021000
 8006224:	40004400 	.word	0x40004400
 8006228:	40004800 	.word	0x40004800
 800622c:	40004c00 	.word	0x40004c00
 8006230:	007a1200 	.word	0x007a1200

08006234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2201      	movs	r2, #1
 8006242:	4013      	ands	r3, r2
 8006244:	d00b      	beq.n	800625e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a4a      	ldr	r2, [pc, #296]	; (8006378 <UART_AdvFeatureConfig+0x144>)
 800624e:	4013      	ands	r3, r2
 8006250:	0019      	movs	r1, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	d00b      	beq.n	8006280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4a43      	ldr	r2, [pc, #268]	; (800637c <UART_AdvFeatureConfig+0x148>)
 8006270:	4013      	ands	r3, r2
 8006272:	0019      	movs	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2204      	movs	r2, #4
 8006286:	4013      	ands	r3, r2
 8006288:	d00b      	beq.n	80062a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4a3b      	ldr	r2, [pc, #236]	; (8006380 <UART_AdvFeatureConfig+0x14c>)
 8006292:	4013      	ands	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2208      	movs	r2, #8
 80062a8:	4013      	ands	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4a34      	ldr	r2, [pc, #208]	; (8006384 <UART_AdvFeatureConfig+0x150>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2210      	movs	r2, #16
 80062ca:	4013      	ands	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <UART_AdvFeatureConfig+0x154>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2220      	movs	r2, #32
 80062ec:	4013      	ands	r3, r2
 80062ee:	d00b      	beq.n	8006308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	4a25      	ldr	r2, [pc, #148]	; (800638c <UART_AdvFeatureConfig+0x158>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	4013      	ands	r3, r2
 8006310:	d01d      	beq.n	800634e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <UART_AdvFeatureConfig+0x15c>)
 800631a:	4013      	ands	r3, r2
 800631c:	0019      	movs	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	035b      	lsls	r3, r3, #13
 8006332:	429a      	cmp	r2, r3
 8006334:	d10b      	bne.n	800634e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <UART_AdvFeatureConfig+0x160>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	4013      	ands	r3, r2
 8006356:	d00b      	beq.n	8006370 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4a0e      	ldr	r2, [pc, #56]	; (8006398 <UART_AdvFeatureConfig+0x164>)
 8006360:	4013      	ands	r3, r2
 8006362:	0019      	movs	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}
 8006378:	fffdffff 	.word	0xfffdffff
 800637c:	fffeffff 	.word	0xfffeffff
 8006380:	fffbffff 	.word	0xfffbffff
 8006384:	ffff7fff 	.word	0xffff7fff
 8006388:	ffffefff 	.word	0xffffefff
 800638c:	ffffdfff 	.word	0xffffdfff
 8006390:	ffefffff 	.word	0xffefffff
 8006394:	ff9fffff 	.word	0xff9fffff
 8006398:	fff7ffff 	.word	0xfff7ffff

0800639c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	2100      	movs	r1, #0
 80063aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063ac:	f7fb f990 	bl	80016d0 <HAL_GetTick>
 80063b0:	0003      	movs	r3, r0
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2208      	movs	r2, #8
 80063bc:	4013      	ands	r3, r2
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d10c      	bne.n	80063dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	0391      	lsls	r1, r2, #14
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <UART_CheckIdleState+0x8c>)
 80063cc:	9200      	str	r2, [sp, #0]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f000 f82c 	bl	800642c <UART_WaitOnFlagUntilTimeout>
 80063d4:	1e03      	subs	r3, r0, #0
 80063d6:	d001      	beq.n	80063dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e021      	b.n	8006420 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2204      	movs	r2, #4
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d10c      	bne.n	8006404 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	03d1      	lsls	r1, r2, #15
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <UART_CheckIdleState+0x8c>)
 80063f4:	9200      	str	r2, [sp, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f000 f818 	bl	800642c <UART_WaitOnFlagUntilTimeout>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d001      	beq.n	8006404 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e00d      	b.n	8006420 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2274      	movs	r2, #116	; 0x74
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	0018      	movs	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	b004      	add	sp, #16
 8006426:	bd80      	pop	{r7, pc}
 8006428:	01ffffff 	.word	0x01ffffff

0800642c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b094      	sub	sp, #80	; 0x50
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	1dfb      	adds	r3, r7, #7
 800643a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643c:	e0a3      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006440:	3301      	adds	r3, #1
 8006442:	d100      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006444:	e09f      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fb f943 	bl	80016d0 <HAL_GetTick>
 800644a:	0002      	movs	r2, r0
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <UART_WaitOnFlagUntilTimeout+0x30>
 8006456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006458:	2b00      	cmp	r3, #0
 800645a:	d13d      	bne.n	80064d8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	2301      	movs	r3, #1
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	494c      	ldr	r1, [pc, #304]	; (80065b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800647e:	400a      	ands	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
 8006498:	2301      	movs	r3, #1
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2101      	movs	r1, #1
 80064b0:	438a      	bics	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2274      	movs	r2, #116	; 0x74
 80064d0:	2100      	movs	r1, #0
 80064d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e067      	b.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2204      	movs	r2, #4
 80064e0:	4013      	ands	r3, r2
 80064e2:	d050      	beq.n	8006586 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	401a      	ands	r2, r3
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d146      	bne.n	8006586 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2280      	movs	r2, #128	; 0x80
 80064fe:	0112      	lsls	r2, r2, #4
 8006500:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006502:	f3ef 8310 	mrs	r3, PRIMASK
 8006506:	613b      	str	r3, [r7, #16]
  return(result);
 8006508:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f383 8810 	msr	PRIMASK, r3
}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4923      	ldr	r1, [pc, #140]	; (80065b0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006524:	400a      	ands	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006534:	f3ef 8310 	mrs	r3, PRIMASK
 8006538:	61fb      	str	r3, [r7, #28]
  return(result);
 800653a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
 800653e:	2301      	movs	r3, #1
 8006540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2101      	movs	r1, #1
 8006556:	438a      	bics	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	f383 8810 	msr	PRIMASK, r3
}
 8006564:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2280      	movs	r2, #128	; 0x80
 8006576:	2120      	movs	r1, #32
 8006578:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2274      	movs	r2, #116	; 0x74
 800657e:	2100      	movs	r1, #0
 8006580:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e010      	b.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	425a      	negs	r2, r3
 8006596:	4153      	adcs	r3, r2
 8006598:	b2db      	uxtb	r3, r3
 800659a:	001a      	movs	r2, r3
 800659c:	1dfb      	adds	r3, r7, #7
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d100      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80065a4:	e74b      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	0018      	movs	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b014      	add	sp, #80	; 0x50
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	fffffe5f 	.word	0xfffffe5f

080065b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08e      	sub	sp, #56	; 0x38
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065bc:	f3ef 8310 	mrs	r3, PRIMASK
 80065c0:	617b      	str	r3, [r7, #20]
  return(result);
 80065c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
 80065c6:	2301      	movs	r3, #1
 80065c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f383 8810 	msr	PRIMASK, r3
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4925      	ldr	r1, [pc, #148]	; (8006674 <UART_EndRxTransfer+0xc0>)
 80065de:	400a      	ands	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f383 8810 	msr	PRIMASK, r3
}
 80065ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ee:	f3ef 8310 	mrs	r3, PRIMASK
 80065f2:	623b      	str	r3, [r7, #32]
  return(result);
 80065f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
 80065f8:	2301      	movs	r3, #1
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f383 8810 	msr	PRIMASK, r3
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2101      	movs	r1, #1
 8006610:	438a      	bics	r2, r1
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f383 8810 	msr	PRIMASK, r3
}
 800661e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	2b01      	cmp	r3, #1
 8006626:	d118      	bne.n	800665a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006628:	f3ef 8310 	mrs	r3, PRIMASK
 800662c:	60bb      	str	r3, [r7, #8]
  return(result);
 800662e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006632:	2301      	movs	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f383 8810 	msr	PRIMASK, r3
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2110      	movs	r1, #16
 800664a:	438a      	bics	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f383 8810 	msr	PRIMASK, r3
}
 8006658:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b00e      	add	sp, #56	; 0x38
 8006672:	bd80      	pop	{r7, pc}
 8006674:	fffffedf 	.word	0xfffffedf

08006678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	225a      	movs	r2, #90	; 0x5a
 800668a:	2100      	movs	r1, #0
 800668c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2252      	movs	r2, #82	; 0x52
 8006692:	2100      	movs	r1, #0
 8006694:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	0018      	movs	r0, r3
 800669a:	f7ff fc2f 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b004      	add	sp, #16
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ae:	f3ef 8310 	mrs	r3, PRIMASK
 80066b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	2301      	movs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f383 8810 	msr	PRIMASK, r3
}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2140      	movs	r1, #64	; 0x40
 80066d0:	438a      	bics	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f383 8810 	msr	PRIMASK, r3
}
 80066de:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7ff fbfc 	bl	8005eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b006      	add	sp, #24
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2244      	movs	r2, #68	; 0x44
 8006718:	2100      	movs	r1, #0
 800671a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <USB_EnableGlobalInt+0x28>)
 800671e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	b299      	uxth	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2240      	movs	r2, #64	; 0x40
 8006728:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b004      	add	sp, #16
 8006732:	bd80      	pop	{r7, pc}
 8006734:	0000bf80 	.word	0x0000bf80

08006738 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006740:	4b09      	ldr	r3, [pc, #36]	; (8006768 <USB_DisableGlobalInt+0x30>)
 8006742:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2240      	movs	r2, #64	; 0x40
 8006748:	5a9b      	ldrh	r3, [r3, r2]
 800674a:	b29b      	uxth	r3, r3
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	b292      	uxth	r2, r2
 8006750:	43d2      	mvns	r2, r2
 8006752:	b292      	uxth	r2, r2
 8006754:	4013      	ands	r3, r2
 8006756:	b299      	uxth	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2240      	movs	r2, #64	; 0x40
 800675c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	0018      	movs	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	b004      	add	sp, #16
 8006766:	bd80      	pop	{r7, pc}
 8006768:	0000bf80 	.word	0x0000bf80

0800676c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800676c:	b084      	sub	sp, #16
 800676e:	b590      	push	{r4, r7, lr}
 8006770:	46c6      	mov	lr, r8
 8006772:	b500      	push	{lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	2004      	movs	r0, #4
 800677c:	2410      	movs	r4, #16
 800677e:	46a4      	mov	ip, r4
 8006780:	2408      	movs	r4, #8
 8006782:	46a0      	mov	r8, r4
 8006784:	44b8      	add	r8, r7
 8006786:	44c4      	add	ip, r8
 8006788:	4460      	add	r0, ip
 800678a:	6001      	str	r1, [r0, #0]
 800678c:	6042      	str	r2, [r0, #4]
 800678e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2240      	movs	r2, #64	; 0x40
 8006794:	2101      	movs	r1, #1
 8006796:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	2100      	movs	r1, #0
 800679e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2244      	movs	r2, #68	; 0x44
 80067a4:	2100      	movs	r1, #0
 80067a6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2250      	movs	r2, #80	; 0x50
 80067ac:	2100      	movs	r1, #0
 80067ae:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bc80      	pop	{r7}
 80067ba:	46b8      	mov	r8, r7
 80067bc:	bc90      	pop	{r4, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	b004      	add	sp, #16
 80067c2:	4718      	bx	r3

080067c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b09c      	sub	sp, #112	; 0x70
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ce:	236f      	movs	r3, #111	; 0x6f
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	18d3      	adds	r3, r2, r3
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	236c      	movs	r3, #108	; 0x6c
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	49cf      	ldr	r1, [pc, #828]	; (8006b28 <USB_ActivateEndpoint+0x364>)
 80067ea:	400a      	ands	r2, r1
 80067ec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d017      	beq.n	8006826 <USB_ActivateEndpoint+0x62>
 80067f6:	dc28      	bgt.n	800684a <USB_ActivateEndpoint+0x86>
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d00e      	beq.n	800681a <USB_ActivateEndpoint+0x56>
 80067fc:	dc25      	bgt.n	800684a <USB_ActivateEndpoint+0x86>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <USB_ActivateEndpoint+0x44>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d018      	beq.n	8006838 <USB_ActivateEndpoint+0x74>
 8006806:	e020      	b.n	800684a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006808:	226c      	movs	r2, #108	; 0x6c
 800680a:	18bb      	adds	r3, r7, r2
 800680c:	18ba      	adds	r2, r7, r2
 800680e:	8812      	ldrh	r2, [r2, #0]
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	0089      	lsls	r1, r1, #2
 8006814:	430a      	orrs	r2, r1
 8006816:	801a      	strh	r2, [r3, #0]
      break;
 8006818:	e01c      	b.n	8006854 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800681a:	226c      	movs	r2, #108	; 0x6c
 800681c:	18bb      	adds	r3, r7, r2
 800681e:	18ba      	adds	r2, r7, r2
 8006820:	8812      	ldrh	r2, [r2, #0]
 8006822:	801a      	strh	r2, [r3, #0]
      break;
 8006824:	e016      	b.n	8006854 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006826:	226c      	movs	r2, #108	; 0x6c
 8006828:	18bb      	adds	r3, r7, r2
 800682a:	18ba      	adds	r2, r7, r2
 800682c:	8812      	ldrh	r2, [r2, #0]
 800682e:	21c0      	movs	r1, #192	; 0xc0
 8006830:	00c9      	lsls	r1, r1, #3
 8006832:	430a      	orrs	r2, r1
 8006834:	801a      	strh	r2, [r3, #0]
      break;
 8006836:	e00d      	b.n	8006854 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006838:	226c      	movs	r2, #108	; 0x6c
 800683a:	18bb      	adds	r3, r7, r2
 800683c:	18ba      	adds	r2, r7, r2
 800683e:	8812      	ldrh	r2, [r2, #0]
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	00c9      	lsls	r1, r1, #3
 8006844:	430a      	orrs	r2, r1
 8006846:	801a      	strh	r2, [r3, #0]
      break;
 8006848:	e004      	b.n	8006854 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800684a:	236f      	movs	r3, #111	; 0x6f
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
      break;
 8006852:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	18d3      	adds	r3, r2, r3
 800685e:	226c      	movs	r2, #108	; 0x6c
 8006860:	18ba      	adds	r2, r7, r2
 8006862:	8812      	ldrh	r2, [r2, #0]
 8006864:	49b1      	ldr	r1, [pc, #708]	; (8006b2c <USB_ActivateEndpoint+0x368>)
 8006866:	430a      	orrs	r2, r1
 8006868:	b292      	uxth	r2, r2
 800686a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	b21b      	sxth	r3, r3
 800687c:	4aac      	ldr	r2, [pc, #688]	; (8006b30 <USB_ActivateEndpoint+0x36c>)
 800687e:	4013      	ands	r3, r2
 8006880:	b21a      	sxth	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b21b      	sxth	r3, r3
 8006888:	4313      	orrs	r3, r2
 800688a:	b21a      	sxth	r2, r3
 800688c:	2166      	movs	r1, #102	; 0x66
 800688e:	187b      	adds	r3, r7, r1
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	18d3      	adds	r3, r2, r3
 800689c:	187a      	adds	r2, r7, r1
 800689e:	8812      	ldrh	r2, [r2, #0]
 80068a0:	49a2      	ldr	r1, [pc, #648]	; (8006b2c <USB_ActivateEndpoint+0x368>)
 80068a2:	430a      	orrs	r2, r1
 80068a4:	b292      	uxth	r2, r2
 80068a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d000      	beq.n	80068b2 <USB_ActivateEndpoint+0xee>
 80068b0:	e150      	b.n	8006b54 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d100      	bne.n	80068bc <USB_ActivateEndpoint+0xf8>
 80068ba:	e07a      	b.n	80069b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2250      	movs	r2, #80	; 0x50
 80068c4:	5a9b      	ldrh	r3, [r3, r2]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	001a      	movs	r2, r3
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	00da      	lsls	r2, r3, #3
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	00d2      	lsls	r2, r2, #3
 80068de:	4694      	mov	ip, r2
 80068e0:	4463      	add	r3, ip
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	88db      	ldrh	r3, [r3, #6]
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	18db      	adds	r3, r3, r3
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	18d2      	adds	r2, r2, r3
 80068fe:	2112      	movs	r1, #18
 8006900:	187b      	adds	r3, r7, r1
 8006902:	8812      	ldrh	r2, [r2, #0]
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	187b      	adds	r3, r7, r1
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	4013      	ands	r3, r2
 800690e:	d016      	beq.n	800693e <USB_ActivateEndpoint+0x17a>
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	18d3      	adds	r3, r2, r3
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29a      	uxth	r2, r3
 800691e:	2010      	movs	r0, #16
 8006920:	183b      	adds	r3, r7, r0
 8006922:	4983      	ldr	r1, [pc, #524]	; (8006b30 <USB_ActivateEndpoint+0x36c>)
 8006924:	400a      	ands	r2, r1
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	18d3      	adds	r3, r2, r3
 8006932:	183a      	adds	r2, r7, r0
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	497f      	ldr	r1, [pc, #508]	; (8006b34 <USB_ActivateEndpoint+0x370>)
 8006938:	430a      	orrs	r2, r1
 800693a:	b292      	uxth	r2, r2
 800693c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	78db      	ldrb	r3, [r3, #3]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d01d      	beq.n	8006982 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	18d3      	adds	r3, r2, r3
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29a      	uxth	r2, r3
 8006954:	200c      	movs	r0, #12
 8006956:	183b      	adds	r3, r7, r0
 8006958:	4977      	ldr	r1, [pc, #476]	; (8006b38 <USB_ActivateEndpoint+0x374>)
 800695a:	400a      	ands	r2, r1
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	183b      	adds	r3, r7, r0
 8006960:	183a      	adds	r2, r7, r0
 8006962:	8812      	ldrh	r2, [r2, #0]
 8006964:	2120      	movs	r1, #32
 8006966:	404a      	eors	r2, r1
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	18d3      	adds	r3, r2, r3
 8006974:	183a      	adds	r2, r7, r0
 8006976:	8812      	ldrh	r2, [r2, #0]
 8006978:	496c      	ldr	r1, [pc, #432]	; (8006b2c <USB_ActivateEndpoint+0x368>)
 800697a:	430a      	orrs	r2, r1
 800697c:	b292      	uxth	r2, r2
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e27a      	b.n	8006e78 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	18d3      	adds	r3, r2, r3
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29a      	uxth	r2, r3
 8006990:	200e      	movs	r0, #14
 8006992:	183b      	adds	r3, r7, r0
 8006994:	4968      	ldr	r1, [pc, #416]	; (8006b38 <USB_ActivateEndpoint+0x374>)
 8006996:	400a      	ands	r2, r1
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	183a      	adds	r2, r7, r0
 80069a6:	8812      	ldrh	r2, [r2, #0]
 80069a8:	4960      	ldr	r1, [pc, #384]	; (8006b2c <USB_ActivateEndpoint+0x368>)
 80069aa:	430a      	orrs	r2, r1
 80069ac:	b292      	uxth	r2, r2
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e262      	b.n	8006e78 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2250      	movs	r2, #80	; 0x50
 80069ba:	5a9b      	ldrh	r3, [r3, r2]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	001a      	movs	r2, r3
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	633b      	str	r3, [r7, #48]	; 0x30
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	00da      	lsls	r2, r3, #3
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	4a5a      	ldr	r2, [pc, #360]	; (8006b3c <USB_ActivateEndpoint+0x378>)
 80069d2:	4694      	mov	ip, r2
 80069d4:	4463      	add	r3, ip
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	88db      	ldrh	r3, [r3, #6]
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	18db      	adds	r3, r3, r3
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2250      	movs	r2, #80	; 0x50
 80069f0:	5a9b      	ldrh	r3, [r3, r2]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	001a      	movs	r2, r3
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	189b      	adds	r3, r3, r2
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	00da      	lsls	r2, r3, #3
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	18d3      	adds	r3, r2, r3
 8006a06:	4a4e      	ldr	r2, [pc, #312]	; (8006b40 <USB_ActivateEndpoint+0x37c>)
 8006a08:	4694      	mov	ip, r2
 8006a0a:	4463      	add	r3, ip
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d110      	bne.n	8006a38 <USB_ActivateEndpoint+0x274>
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4a49      	ldr	r2, [pc, #292]	; (8006b44 <USB_ActivateEndpoint+0x380>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4a46      	ldr	r2, [pc, #280]	; (8006b48 <USB_ActivateEndpoint+0x384>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	e02b      	b.n	8006a90 <USB_ActivateEndpoint+0x2cc>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3e:	d812      	bhi.n	8006a66 <USB_ActivateEndpoint+0x2a2>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d002      	beq.n	8006a58 <USB_ActivateEndpoint+0x294>
 8006a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a54:	3301      	adds	r3, #1
 8006a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e014      	b.n	8006a90 <USB_ActivateEndpoint+0x2cc>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	221f      	movs	r2, #31
 8006a74:	4013      	ands	r3, r2
 8006a76:	d102      	bne.n	8006a7e <USB_ActivateEndpoint+0x2ba>
 8006a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	029b      	lsls	r3, r3, #10
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4a30      	ldr	r2, [pc, #192]	; (8006b48 <USB_ActivateEndpoint+0x384>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	18d2      	adds	r2, r2, r3
 8006a9a:	2122      	movs	r1, #34	; 0x22
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	8812      	ldrh	r2, [r2, #0]
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	2380      	movs	r3, #128	; 0x80
 8006aa8:	01db      	lsls	r3, r3, #7
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d016      	beq.n	8006adc <USB_ActivateEndpoint+0x318>
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	18d3      	adds	r3, r2, r3
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	2020      	movs	r0, #32
 8006abe:	183b      	adds	r3, r7, r0
 8006ac0:	491b      	ldr	r1, [pc, #108]	; (8006b30 <USB_ActivateEndpoint+0x36c>)
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	18d3      	adds	r3, r2, r3
 8006ad0:	183a      	adds	r2, r7, r0
 8006ad2:	8812      	ldrh	r2, [r2, #0]
 8006ad4:	491d      	ldr	r1, [pc, #116]	; (8006b4c <USB_ActivateEndpoint+0x388>)
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	18d3      	adds	r3, r2, r3
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	201e      	movs	r0, #30
 8006aec:	183b      	adds	r3, r7, r0
 8006aee:	4918      	ldr	r1, [pc, #96]	; (8006b50 <USB_ActivateEndpoint+0x38c>)
 8006af0:	400a      	ands	r2, r1
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	183b      	adds	r3, r7, r0
 8006af6:	183a      	adds	r2, r7, r0
 8006af8:	8812      	ldrh	r2, [r2, #0]
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	0149      	lsls	r1, r1, #5
 8006afe:	404a      	eors	r2, r1
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	183b      	adds	r3, r7, r0
 8006b04:	183a      	adds	r2, r7, r0
 8006b06:	8812      	ldrh	r2, [r2, #0]
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	0189      	lsls	r1, r1, #6
 8006b0c:	404a      	eors	r2, r1
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	18d3      	adds	r3, r2, r3
 8006b1a:	183a      	adds	r2, r7, r0
 8006b1c:	8812      	ldrh	r2, [r2, #0]
 8006b1e:	4903      	ldr	r1, [pc, #12]	; (8006b2c <USB_ActivateEndpoint+0x368>)
 8006b20:	430a      	orrs	r2, r1
 8006b22:	b292      	uxth	r2, r2
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e1a7      	b.n	8006e78 <USB_ActivateEndpoint+0x6b4>
 8006b28:	ffff898f 	.word	0xffff898f
 8006b2c:	ffff8080 	.word	0xffff8080
 8006b30:	ffff8f8f 	.word	0xffff8f8f
 8006b34:	ffff80c0 	.word	0xffff80c0
 8006b38:	ffff8fbf 	.word	0xffff8fbf
 8006b3c:	00000404 	.word	0x00000404
 8006b40:	00000406 	.word	0x00000406
 8006b44:	ffff83ff 	.word	0xffff83ff
 8006b48:	ffff8000 	.word	0xffff8000
 8006b4c:	ffffc080 	.word	0xffffc080
 8006b50:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	78db      	ldrb	r3, [r3, #3]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d117      	bne.n	8006b8c <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	2062      	movs	r0, #98	; 0x62
 8006b6c:	183b      	adds	r3, r7, r0
 8006b6e:	49c6      	ldr	r1, [pc, #792]	; (8006e88 <USB_ActivateEndpoint+0x6c4>)
 8006b70:	400a      	ands	r2, r1
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	18d3      	adds	r3, r2, r3
 8006b7e:	183a      	adds	r2, r7, r0
 8006b80:	8812      	ldrh	r2, [r2, #0]
 8006b82:	49c2      	ldr	r1, [pc, #776]	; (8006e8c <USB_ActivateEndpoint+0x6c8>)
 8006b84:	430a      	orrs	r2, r1
 8006b86:	b292      	uxth	r2, r2
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e016      	b.n	8006bba <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	18d3      	adds	r3, r2, r3
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	2064      	movs	r0, #100	; 0x64
 8006b9c:	183b      	adds	r3, r7, r0
 8006b9e:	49bc      	ldr	r1, [pc, #752]	; (8006e90 <USB_ActivateEndpoint+0x6cc>)
 8006ba0:	400a      	ands	r2, r1
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	183a      	adds	r2, r7, r0
 8006bb0:	8812      	ldrh	r2, [r2, #0]
 8006bb2:	49b8      	ldr	r1, [pc, #736]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2250      	movs	r2, #80	; 0x50
 8006bc2:	5a9b      	ldrh	r3, [r3, r2]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bca:	189b      	adds	r3, r3, r2
 8006bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	00da      	lsls	r2, r3, #3
 8006bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd6:	18d3      	adds	r3, r2, r3
 8006bd8:	2280      	movs	r2, #128	; 0x80
 8006bda:	00d2      	lsls	r2, r2, #3
 8006bdc:	4694      	mov	ip, r2
 8006bde:	4463      	add	r3, ip
 8006be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	891b      	ldrh	r3, [r3, #8]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	18db      	adds	r3, r3, r3
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2250      	movs	r2, #80	; 0x50
 8006bfa:	5a9b      	ldrh	r3, [r3, r2]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	001a      	movs	r2, r3
 8006c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c02:	189b      	adds	r3, r3, r2
 8006c04:	657b      	str	r3, [r7, #84]	; 0x54
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0e:	18d3      	adds	r3, r2, r3
 8006c10:	4aa1      	ldr	r2, [pc, #644]	; (8006e98 <USB_ActivateEndpoint+0x6d4>)
 8006c12:	4694      	mov	ip, r2
 8006c14:	4463      	add	r3, ip
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	895b      	ldrh	r3, [r3, #10]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	18db      	adds	r3, r3, r3
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d000      	beq.n	8006c32 <USB_ActivateEndpoint+0x46e>
 8006c30:	e087      	b.n	8006d42 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	18d2      	adds	r2, r2, r3
 8006c3c:	2140      	movs	r1, #64	; 0x40
 8006c3e:	187b      	adds	r3, r7, r1
 8006c40:	8812      	ldrh	r2, [r2, #0]
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	187b      	adds	r3, r7, r1
 8006c46:	881a      	ldrh	r2, [r3, #0]
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	01db      	lsls	r3, r3, #7
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d016      	beq.n	8006c7e <USB_ActivateEndpoint+0x4ba>
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	18d3      	adds	r3, r2, r3
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	203e      	movs	r0, #62	; 0x3e
 8006c60:	183b      	adds	r3, r7, r0
 8006c62:	4989      	ldr	r1, [pc, #548]	; (8006e88 <USB_ActivateEndpoint+0x6c4>)
 8006c64:	400a      	ands	r2, r1
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	18d3      	adds	r3, r2, r3
 8006c72:	183a      	adds	r2, r7, r0
 8006c74:	8812      	ldrh	r2, [r2, #0]
 8006c76:	4989      	ldr	r1, [pc, #548]	; (8006e9c <USB_ActivateEndpoint+0x6d8>)
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	18d2      	adds	r2, r2, r3
 8006c88:	213c      	movs	r1, #60	; 0x3c
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	8812      	ldrh	r2, [r2, #0]
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	2240      	movs	r2, #64	; 0x40
 8006c96:	4013      	ands	r3, r2
 8006c98:	d016      	beq.n	8006cc8 <USB_ActivateEndpoint+0x504>
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	18d3      	adds	r3, r2, r3
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	203a      	movs	r0, #58	; 0x3a
 8006caa:	183b      	adds	r3, r7, r0
 8006cac:	4976      	ldr	r1, [pc, #472]	; (8006e88 <USB_ActivateEndpoint+0x6c4>)
 8006cae:	400a      	ands	r2, r1
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	18d3      	adds	r3, r2, r3
 8006cbc:	183a      	adds	r2, r7, r0
 8006cbe:	8812      	ldrh	r2, [r2, #0]
 8006cc0:	4977      	ldr	r1, [pc, #476]	; (8006ea0 <USB_ActivateEndpoint+0x6dc>)
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	b292      	uxth	r2, r2
 8006cc6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	2038      	movs	r0, #56	; 0x38
 8006cd8:	183b      	adds	r3, r7, r0
 8006cda:	4972      	ldr	r1, [pc, #456]	; (8006ea4 <USB_ActivateEndpoint+0x6e0>)
 8006cdc:	400a      	ands	r2, r1
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	183b      	adds	r3, r7, r0
 8006ce2:	183a      	adds	r2, r7, r0
 8006ce4:	8812      	ldrh	r2, [r2, #0]
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	0149      	lsls	r1, r1, #5
 8006cea:	404a      	eors	r2, r1
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	183b      	adds	r3, r7, r0
 8006cf0:	183a      	adds	r2, r7, r0
 8006cf2:	8812      	ldrh	r2, [r2, #0]
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	0189      	lsls	r1, r1, #6
 8006cf8:	404a      	eors	r2, r1
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	18d3      	adds	r3, r2, r3
 8006d06:	183a      	adds	r2, r7, r0
 8006d08:	8812      	ldrh	r2, [r2, #0]
 8006d0a:	4962      	ldr	r1, [pc, #392]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	18d3      	adds	r3, r2, r3
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	2036      	movs	r0, #54	; 0x36
 8006d22:	183b      	adds	r3, r7, r0
 8006d24:	4960      	ldr	r1, [pc, #384]	; (8006ea8 <USB_ActivateEndpoint+0x6e4>)
 8006d26:	400a      	ands	r2, r1
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	18d3      	adds	r3, r2, r3
 8006d34:	183a      	adds	r2, r7, r0
 8006d36:	8812      	ldrh	r2, [r2, #0]
 8006d38:	4956      	ldr	r1, [pc, #344]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e09a      	b.n	8006e78 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	18d2      	adds	r2, r2, r3
 8006d4c:	214e      	movs	r1, #78	; 0x4e
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	881a      	ldrh	r2, [r3, #0]
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	01db      	lsls	r3, r3, #7
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d016      	beq.n	8006d8e <USB_ActivateEndpoint+0x5ca>
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	204c      	movs	r0, #76	; 0x4c
 8006d70:	183b      	adds	r3, r7, r0
 8006d72:	4945      	ldr	r1, [pc, #276]	; (8006e88 <USB_ActivateEndpoint+0x6c4>)
 8006d74:	400a      	ands	r2, r1
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	18d3      	adds	r3, r2, r3
 8006d82:	183a      	adds	r2, r7, r0
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	4945      	ldr	r1, [pc, #276]	; (8006e9c <USB_ActivateEndpoint+0x6d8>)
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	18d2      	adds	r2, r2, r3
 8006d98:	214a      	movs	r1, #74	; 0x4a
 8006d9a:	187b      	adds	r3, r7, r1
 8006d9c:	8812      	ldrh	r2, [r2, #0]
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	187b      	adds	r3, r7, r1
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	2240      	movs	r2, #64	; 0x40
 8006da6:	4013      	ands	r3, r2
 8006da8:	d016      	beq.n	8006dd8 <USB_ActivateEndpoint+0x614>
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	2048      	movs	r0, #72	; 0x48
 8006dba:	183b      	adds	r3, r7, r0
 8006dbc:	4932      	ldr	r1, [pc, #200]	; (8006e88 <USB_ActivateEndpoint+0x6c4>)
 8006dbe:	400a      	ands	r2, r1
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	183a      	adds	r2, r7, r0
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	4933      	ldr	r1, [pc, #204]	; (8006ea0 <USB_ActivateEndpoint+0x6dc>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d01d      	beq.n	8006e1c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	18d3      	adds	r3, r2, r3
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	2044      	movs	r0, #68	; 0x44
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	492d      	ldr	r1, [pc, #180]	; (8006ea8 <USB_ActivateEndpoint+0x6e4>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	183b      	adds	r3, r7, r0
 8006dfa:	183a      	adds	r2, r7, r0
 8006dfc:	8812      	ldrh	r2, [r2, #0]
 8006dfe:	2120      	movs	r1, #32
 8006e00:	404a      	eors	r2, r1
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	18d3      	adds	r3, r2, r3
 8006e0e:	183a      	adds	r2, r7, r0
 8006e10:	8812      	ldrh	r2, [r2, #0]
 8006e12:	4920      	ldr	r1, [pc, #128]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006e14:	430a      	orrs	r2, r1
 8006e16:	b292      	uxth	r2, r2
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e016      	b.n	8006e4a <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	18d3      	adds	r3, r2, r3
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	2046      	movs	r0, #70	; 0x46
 8006e2c:	183b      	adds	r3, r7, r0
 8006e2e:	491e      	ldr	r1, [pc, #120]	; (8006ea8 <USB_ActivateEndpoint+0x6e4>)
 8006e30:	400a      	ands	r2, r1
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	183a      	adds	r2, r7, r0
 8006e40:	8812      	ldrh	r2, [r2, #0]
 8006e42:	4914      	ldr	r1, [pc, #80]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006e44:	430a      	orrs	r2, r1
 8006e46:	b292      	uxth	r2, r2
 8006e48:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	18d3      	adds	r3, r2, r3
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	2042      	movs	r0, #66	; 0x42
 8006e5a:	183b      	adds	r3, r7, r0
 8006e5c:	4911      	ldr	r1, [pc, #68]	; (8006ea4 <USB_ActivateEndpoint+0x6e0>)
 8006e5e:	400a      	ands	r2, r1
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	18d3      	adds	r3, r2, r3
 8006e6c:	183a      	adds	r2, r7, r0
 8006e6e:	8812      	ldrh	r2, [r2, #0]
 8006e70:	4908      	ldr	r1, [pc, #32]	; (8006e94 <USB_ActivateEndpoint+0x6d0>)
 8006e72:	430a      	orrs	r2, r1
 8006e74:	b292      	uxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8006e78:	236f      	movs	r3, #111	; 0x6f
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	781b      	ldrb	r3, [r3, #0]
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b01c      	add	sp, #112	; 0x70
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	ffff8f8f 	.word	0xffff8f8f
 8006e8c:	ffff8180 	.word	0xffff8180
 8006e90:	ffff8e8f 	.word	0xffff8e8f
 8006e94:	ffff8080 	.word	0xffff8080
 8006e98:	00000404 	.word	0x00000404
 8006e9c:	ffffc080 	.word	0xffffc080
 8006ea0:	ffff80c0 	.word	0xffff80c0
 8006ea4:	ffffbf8f 	.word	0xffffbf8f
 8006ea8:	ffff8fbf 	.word	0xffff8fbf

08006eac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08c      	sub	sp, #48	; 0x30
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	7b1b      	ldrb	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d000      	beq.n	8006ec0 <USB_DeactivateEndpoint+0x14>
 8006ebe:	e07e      	b.n	8006fbe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d03c      	beq.n	8006f42 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	18d2      	adds	r2, r2, r3
 8006ed2:	210c      	movs	r1, #12
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	8812      	ldrh	r2, [r2, #0]
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	187b      	adds	r3, r7, r1
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	2240      	movs	r2, #64	; 0x40
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d016      	beq.n	8006f12 <USB_DeactivateEndpoint+0x66>
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	18d3      	adds	r3, r2, r3
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	200a      	movs	r0, #10
 8006ef4:	183b      	adds	r3, r7, r0
 8006ef6:	49c7      	ldr	r1, [pc, #796]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8006ef8:	400a      	ands	r2, r1
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	18d3      	adds	r3, r2, r3
 8006f06:	183a      	adds	r2, r7, r0
 8006f08:	8812      	ldrh	r2, [r2, #0]
 8006f0a:	49c3      	ldr	r1, [pc, #780]	; (8007218 <USB_DeactivateEndpoint+0x36c>)
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	18d3      	adds	r3, r2, r3
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	2008      	movs	r0, #8
 8006f22:	183b      	adds	r3, r7, r0
 8006f24:	49bd      	ldr	r1, [pc, #756]	; (800721c <USB_DeactivateEndpoint+0x370>)
 8006f26:	400a      	ands	r2, r1
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	18d3      	adds	r3, r2, r3
 8006f34:	183a      	adds	r2, r7, r0
 8006f36:	8812      	ldrh	r2, [r2, #0]
 8006f38:	49b9      	ldr	r1, [pc, #740]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	e163      	b.n	800720a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	18d2      	adds	r2, r2, r3
 8006f4c:	2112      	movs	r1, #18
 8006f4e:	187b      	adds	r3, r7, r1
 8006f50:	8812      	ldrh	r2, [r2, #0]
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	2380      	movs	r3, #128	; 0x80
 8006f5a:	01db      	lsls	r3, r3, #7
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	d016      	beq.n	8006f8e <USB_DeactivateEndpoint+0xe2>
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	18d3      	adds	r3, r2, r3
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	2010      	movs	r0, #16
 8006f70:	183b      	adds	r3, r7, r0
 8006f72:	49a8      	ldr	r1, [pc, #672]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8006f74:	400a      	ands	r2, r1
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	18d3      	adds	r3, r2, r3
 8006f82:	183a      	adds	r2, r7, r0
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	49a7      	ldr	r1, [pc, #668]	; (8007224 <USB_DeactivateEndpoint+0x378>)
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	18d3      	adds	r3, r2, r3
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	200e      	movs	r0, #14
 8006f9e:	183b      	adds	r3, r7, r0
 8006fa0:	49a1      	ldr	r1, [pc, #644]	; (8007228 <USB_DeactivateEndpoint+0x37c>)
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	18d3      	adds	r3, r2, r3
 8006fb0:	183a      	adds	r2, r7, r0
 8006fb2:	8812      	ldrh	r2, [r2, #0]
 8006fb4:	499a      	ldr	r1, [pc, #616]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e125      	b.n	800720a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d000      	beq.n	8006fc8 <USB_DeactivateEndpoint+0x11c>
 8006fc6:	e090      	b.n	80070ea <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	18d2      	adds	r2, r2, r3
 8006fd2:	2120      	movs	r1, #32
 8006fd4:	187b      	adds	r3, r7, r1
 8006fd6:	8812      	ldrh	r2, [r2, #0]
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	2380      	movs	r3, #128	; 0x80
 8006fe0:	01db      	lsls	r3, r3, #7
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d016      	beq.n	8007014 <USB_DeactivateEndpoint+0x168>
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	18d3      	adds	r3, r2, r3
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	201e      	movs	r0, #30
 8006ff6:	183b      	adds	r3, r7, r0
 8006ff8:	4986      	ldr	r1, [pc, #536]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8006ffa:	400a      	ands	r2, r1
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	18d3      	adds	r3, r2, r3
 8007008:	183a      	adds	r2, r7, r0
 800700a:	8812      	ldrh	r2, [r2, #0]
 800700c:	4985      	ldr	r1, [pc, #532]	; (8007224 <USB_DeactivateEndpoint+0x378>)
 800700e:	430a      	orrs	r2, r1
 8007010:	b292      	uxth	r2, r2
 8007012:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	18d2      	adds	r2, r2, r3
 800701e:	211c      	movs	r1, #28
 8007020:	187b      	adds	r3, r7, r1
 8007022:	8812      	ldrh	r2, [r2, #0]
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	187b      	adds	r3, r7, r1
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	4013      	ands	r3, r2
 800702e:	d016      	beq.n	800705e <USB_DeactivateEndpoint+0x1b2>
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	18d3      	adds	r3, r2, r3
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29a      	uxth	r2, r3
 800703e:	201a      	movs	r0, #26
 8007040:	183b      	adds	r3, r7, r0
 8007042:	4974      	ldr	r1, [pc, #464]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8007044:	400a      	ands	r2, r1
 8007046:	801a      	strh	r2, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	18d3      	adds	r3, r2, r3
 8007052:	183a      	adds	r2, r7, r0
 8007054:	8812      	ldrh	r2, [r2, #0]
 8007056:	4970      	ldr	r1, [pc, #448]	; (8007218 <USB_DeactivateEndpoint+0x36c>)
 8007058:	430a      	orrs	r2, r1
 800705a:	b292      	uxth	r2, r2
 800705c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	18d3      	adds	r3, r2, r3
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29a      	uxth	r2, r3
 800706c:	2018      	movs	r0, #24
 800706e:	183b      	adds	r3, r7, r0
 8007070:	4968      	ldr	r1, [pc, #416]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8007072:	400a      	ands	r2, r1
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	18d3      	adds	r3, r2, r3
 8007080:	183a      	adds	r2, r7, r0
 8007082:	8812      	ldrh	r2, [r2, #0]
 8007084:	4964      	ldr	r1, [pc, #400]	; (8007218 <USB_DeactivateEndpoint+0x36c>)
 8007086:	430a      	orrs	r2, r1
 8007088:	b292      	uxth	r2, r2
 800708a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29a      	uxth	r2, r3
 800709a:	2016      	movs	r0, #22
 800709c:	183b      	adds	r3, r7, r0
 800709e:	4962      	ldr	r1, [pc, #392]	; (8007228 <USB_DeactivateEndpoint+0x37c>)
 80070a0:	400a      	ands	r2, r1
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	18d3      	adds	r3, r2, r3
 80070ae:	183a      	adds	r2, r7, r0
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	495b      	ldr	r1, [pc, #364]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 80070b4:	430a      	orrs	r2, r1
 80070b6:	b292      	uxth	r2, r2
 80070b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	18d3      	adds	r3, r2, r3
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	2014      	movs	r0, #20
 80070ca:	183b      	adds	r3, r7, r0
 80070cc:	4953      	ldr	r1, [pc, #332]	; (800721c <USB_DeactivateEndpoint+0x370>)
 80070ce:	400a      	ands	r2, r1
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	18d3      	adds	r3, r2, r3
 80070dc:	183a      	adds	r2, r7, r0
 80070de:	8812      	ldrh	r2, [r2, #0]
 80070e0:	494f      	ldr	r1, [pc, #316]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	b292      	uxth	r2, r2
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	e08f      	b.n	800720a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	18d2      	adds	r2, r2, r3
 80070f4:	212e      	movs	r1, #46	; 0x2e
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	8812      	ldrh	r2, [r2, #0]
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	187b      	adds	r3, r7, r1
 80070fe:	881a      	ldrh	r2, [r3, #0]
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	01db      	lsls	r3, r3, #7
 8007104:	4013      	ands	r3, r2
 8007106:	d016      	beq.n	8007136 <USB_DeactivateEndpoint+0x28a>
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	18d3      	adds	r3, r2, r3
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29a      	uxth	r2, r3
 8007116:	202c      	movs	r0, #44	; 0x2c
 8007118:	183b      	adds	r3, r7, r0
 800711a:	493e      	ldr	r1, [pc, #248]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 800711c:	400a      	ands	r2, r1
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	18d3      	adds	r3, r2, r3
 800712a:	183a      	adds	r2, r7, r0
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	493d      	ldr	r1, [pc, #244]	; (8007224 <USB_DeactivateEndpoint+0x378>)
 8007130:	430a      	orrs	r2, r1
 8007132:	b292      	uxth	r2, r2
 8007134:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	18d2      	adds	r2, r2, r3
 8007140:	212a      	movs	r1, #42	; 0x2a
 8007142:	187b      	adds	r3, r7, r1
 8007144:	8812      	ldrh	r2, [r2, #0]
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	187b      	adds	r3, r7, r1
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	4013      	ands	r3, r2
 8007150:	d016      	beq.n	8007180 <USB_DeactivateEndpoint+0x2d4>
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	18d3      	adds	r3, r2, r3
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29a      	uxth	r2, r3
 8007160:	2028      	movs	r0, #40	; 0x28
 8007162:	183b      	adds	r3, r7, r0
 8007164:	492b      	ldr	r1, [pc, #172]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8007166:	400a      	ands	r2, r1
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	18d3      	adds	r3, r2, r3
 8007174:	183a      	adds	r2, r7, r0
 8007176:	8812      	ldrh	r2, [r2, #0]
 8007178:	4927      	ldr	r1, [pc, #156]	; (8007218 <USB_DeactivateEndpoint+0x36c>)
 800717a:	430a      	orrs	r2, r1
 800717c:	b292      	uxth	r2, r2
 800717e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	18d3      	adds	r3, r2, r3
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29a      	uxth	r2, r3
 800718e:	2026      	movs	r0, #38	; 0x26
 8007190:	183b      	adds	r3, r7, r0
 8007192:	4920      	ldr	r1, [pc, #128]	; (8007214 <USB_DeactivateEndpoint+0x368>)
 8007194:	400a      	ands	r2, r1
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	18d3      	adds	r3, r2, r3
 80071a2:	183a      	adds	r2, r7, r0
 80071a4:	8812      	ldrh	r2, [r2, #0]
 80071a6:	491f      	ldr	r1, [pc, #124]	; (8007224 <USB_DeactivateEndpoint+0x378>)
 80071a8:	430a      	orrs	r2, r1
 80071aa:	b292      	uxth	r2, r2
 80071ac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	18d3      	adds	r3, r2, r3
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	2024      	movs	r0, #36	; 0x24
 80071be:	183b      	adds	r3, r7, r0
 80071c0:	4916      	ldr	r1, [pc, #88]	; (800721c <USB_DeactivateEndpoint+0x370>)
 80071c2:	400a      	ands	r2, r1
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	18d3      	adds	r3, r2, r3
 80071d0:	183a      	adds	r2, r7, r0
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	4912      	ldr	r1, [pc, #72]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 80071d6:	430a      	orrs	r2, r1
 80071d8:	b292      	uxth	r2, r2
 80071da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	18d3      	adds	r3, r2, r3
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	2022      	movs	r0, #34	; 0x22
 80071ec:	183b      	adds	r3, r7, r0
 80071ee:	490e      	ldr	r1, [pc, #56]	; (8007228 <USB_DeactivateEndpoint+0x37c>)
 80071f0:	400a      	ands	r2, r1
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	18d3      	adds	r3, r2, r3
 80071fe:	183a      	adds	r2, r7, r0
 8007200:	8812      	ldrh	r2, [r2, #0]
 8007202:	4907      	ldr	r1, [pc, #28]	; (8007220 <USB_DeactivateEndpoint+0x374>)
 8007204:	430a      	orrs	r2, r1
 8007206:	b292      	uxth	r2, r2
 8007208:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	0018      	movs	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	b00c      	add	sp, #48	; 0x30
 8007212:	bd80      	pop	{r7, pc}
 8007214:	ffff8f8f 	.word	0xffff8f8f
 8007218:	ffff80c0 	.word	0xffff80c0
 800721c:	ffff8fbf 	.word	0xffff8fbf
 8007220:	ffff8080 	.word	0xffff8080
 8007224:	ffffc080 	.word	0xffffc080
 8007228:	ffffbf8f 	.word	0xffffbf8f

0800722c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b0c3      	sub	sp, #268	; 0x10c
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d001      	beq.n	8007242 <USB_EPStartXfer+0x16>
 800723e:	f000 fcef 	bl	8007c20 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	d905      	bls.n	800725a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	1d7a      	adds	r2, r7, #5
 8007254:	32ff      	adds	r2, #255	; 0xff
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e004      	b.n	8007264 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	1d7a      	adds	r2, r7, #5
 8007260:	32ff      	adds	r2, #255	; 0xff
 8007262:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	7b1b      	ldrb	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d125      	bne.n	80072b8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	6959      	ldr	r1, [r3, #20]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	88da      	ldrh	r2, [r3, #6]
 8007274:	1d7b      	adds	r3, r7, #5
 8007276:	33ff      	adds	r3, #255	; 0xff
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f9c9 	bl	8008614 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2250      	movs	r2, #80	; 0x50
 800728a:	5a9b      	ldrh	r3, [r3, r2]
 800728c:	b29b      	uxth	r3, r3
 800728e:	001a      	movs	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	189b      	adds	r3, r3, r2
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	00da      	lsls	r2, r3, #3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	18d3      	adds	r3, r2, r3
 80072a0:	4acc      	ldr	r2, [pc, #816]	; (80075d4 <USB_EPStartXfer+0x3a8>)
 80072a2:	4694      	mov	ip, r2
 80072a4:	4463      	add	r3, ip
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	1d7b      	adds	r3, r7, #5
 80072aa:	33ff      	adds	r3, #255	; 0xff
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	f000 fc8f 	bl	8007bd6 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	78db      	ldrb	r3, [r3, #3]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d000      	beq.n	80072c2 <USB_EPStartXfer+0x96>
 80072c0:	e33a      	b.n	8007938 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d800      	bhi.n	80072d0 <USB_EPStartXfer+0xa4>
 80072ce:	e2df      	b.n	8007890 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	18d3      	adds	r3, r2, r3
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	2056      	movs	r0, #86	; 0x56
 80072e0:	183b      	adds	r3, r7, r0
 80072e2:	49bd      	ldr	r1, [pc, #756]	; (80075d8 <USB_EPStartXfer+0x3ac>)
 80072e4:	400a      	ands	r2, r1
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	18d3      	adds	r3, r2, r3
 80072f2:	183a      	adds	r2, r7, r0
 80072f4:	8812      	ldrh	r2, [r2, #0]
 80072f6:	49b9      	ldr	r1, [pc, #740]	; (80075dc <USB_EPStartXfer+0x3b0>)
 80072f8:	430a      	orrs	r2, r1
 80072fa:	b292      	uxth	r2, r2
 80072fc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6a1a      	ldr	r2, [r3, #32]
 8007302:	1d7b      	adds	r3, r7, #5
 8007304:	33ff      	adds	r3, #255	; 0xff
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	18d3      	adds	r3, r2, r3
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	001a      	movs	r2, r3
 800731e:	2340      	movs	r3, #64	; 0x40
 8007320:	4013      	ands	r3, r2
 8007322:	d100      	bne.n	8007326 <USB_EPStartXfer+0xfa>
 8007324:	e162      	b.n	80075ec <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d16a      	bne.n	8007408 <USB_EPStartXfer+0x1dc>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2250      	movs	r2, #80	; 0x50
 800733a:	5a9b      	ldrh	r3, [r3, r2]
 800733c:	b29b      	uxth	r3, r3
 800733e:	001a      	movs	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	189b      	adds	r3, r3, r2
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	00da      	lsls	r2, r3, #3
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	4aa3      	ldr	r2, [pc, #652]	; (80075e0 <USB_EPStartXfer+0x3b4>)
 8007352:	4694      	mov	ip, r2
 8007354:	4463      	add	r3, ip
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	1d7b      	adds	r3, r7, #5
 800735a:	33ff      	adds	r3, #255	; 0xff
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d110      	bne.n	8007384 <USB_EPStartXfer+0x158>
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	4a9e      	ldr	r2, [pc, #632]	; (80075e4 <USB_EPStartXfer+0x3b8>)
 800736a:	4013      	ands	r3, r2
 800736c:	b29a      	uxth	r2, r3
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	4a9b      	ldr	r2, [pc, #620]	; (80075e8 <USB_EPStartXfer+0x3bc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e05c      	b.n	800743e <USB_EPStartXfer+0x212>
 8007384:	1d7b      	adds	r3, r7, #5
 8007386:	33ff      	adds	r3, #255	; 0xff
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b3e      	cmp	r3, #62	; 0x3e
 800738c:	d81c      	bhi.n	80073c8 <USB_EPStartXfer+0x19c>
 800738e:	1d7b      	adds	r3, r7, #5
 8007390:	33ff      	adds	r3, #255	; 0xff
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	1c7a      	adds	r2, r7, #1
 8007398:	32ff      	adds	r2, #255	; 0xff
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	1d7b      	adds	r3, r7, #5
 800739e:	33ff      	adds	r3, #255	; 0xff
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	4013      	ands	r3, r2
 80073a6:	d006      	beq.n	80073b6 <USB_EPStartXfer+0x18a>
 80073a8:	1c7b      	adds	r3, r7, #1
 80073aa:	33ff      	adds	r3, #255	; 0xff
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	1c7a      	adds	r2, r7, #1
 80073b2:	32ff      	adds	r2, #255	; 0xff
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	1c7b      	adds	r3, r7, #1
 80073b8:	33ff      	adds	r3, #255	; 0xff
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	029b      	lsls	r3, r3, #10
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e03a      	b.n	800743e <USB_EPStartXfer+0x212>
 80073c8:	1d7b      	adds	r3, r7, #5
 80073ca:	33ff      	adds	r3, #255	; 0xff
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	1c7a      	adds	r2, r7, #1
 80073d2:	32ff      	adds	r2, #255	; 0xff
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	1d7b      	adds	r3, r7, #5
 80073d8:	33ff      	adds	r3, #255	; 0xff
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	221f      	movs	r2, #31
 80073de:	4013      	ands	r3, r2
 80073e0:	d106      	bne.n	80073f0 <USB_EPStartXfer+0x1c4>
 80073e2:	1c7b      	adds	r3, r7, #1
 80073e4:	33ff      	adds	r3, #255	; 0xff
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	1c7a      	adds	r2, r7, #1
 80073ec:	32ff      	adds	r2, #255	; 0xff
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	1c7b      	adds	r3, r7, #1
 80073f2:	33ff      	adds	r3, #255	; 0xff
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4a7a      	ldr	r2, [pc, #488]	; (80075e8 <USB_EPStartXfer+0x3bc>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e01a      	b.n	800743e <USB_EPStartXfer+0x212>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d116      	bne.n	800743e <USB_EPStartXfer+0x212>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2250      	movs	r2, #80	; 0x50
 8007414:	5a9b      	ldrh	r3, [r3, r2]
 8007416:	b29b      	uxth	r3, r3
 8007418:	001a      	movs	r2, r3
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	189b      	adds	r3, r3, r2
 800741e:	633b      	str	r3, [r7, #48]	; 0x30
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	00da      	lsls	r2, r3, #3
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	4a6d      	ldr	r2, [pc, #436]	; (80075e0 <USB_EPStartXfer+0x3b4>)
 800742c:	4694      	mov	ip, r2
 800742e:	4463      	add	r3, ip
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007432:	1d7b      	adds	r3, r7, #5
 8007434:	33ff      	adds	r3, #255	; 0xff
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800743e:	2076      	movs	r0, #118	; 0x76
 8007440:	183b      	adds	r3, r7, r0
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	8952      	ldrh	r2, [r2, #10]
 8007446:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6959      	ldr	r1, [r3, #20]
 800744c:	1d7b      	adds	r3, r7, #5
 800744e:	33ff      	adds	r3, #255	; 0xff
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b29c      	uxth	r4, r3
 8007454:	183b      	adds	r3, r7, r0
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	0023      	movs	r3, r4
 800745c:	f001 f8da 	bl	8008614 <USB_WritePMA>
            ep->xfer_buff += len;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	1d7b      	adds	r3, r7, #5
 8007466:	33ff      	adds	r3, #255	; 0xff
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	18d2      	adds	r2, r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	6a1a      	ldr	r2, [r3, #32]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	429a      	cmp	r2, r3
 800747a:	d908      	bls.n	800748e <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	1d7b      	adds	r3, r7, #5
 8007482:	33ff      	adds	r3, #255	; 0xff
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	621a      	str	r2, [r3, #32]
 800748c:	e007      	b.n	800749e <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	1d7a      	adds	r2, r7, #5
 8007494:	32ff      	adds	r2, #255	; 0xff
 8007496:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d166      	bne.n	8007574 <USB_EPStartXfer+0x348>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2250      	movs	r2, #80	; 0x50
 80074ae:	5a9b      	ldrh	r3, [r3, r2]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	001a      	movs	r2, r3
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	189b      	adds	r3, r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00da      	lsls	r2, r3, #3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	18d3      	adds	r3, r2, r3
 80074c4:	4a43      	ldr	r2, [pc, #268]	; (80075d4 <USB_EPStartXfer+0x3a8>)
 80074c6:	4694      	mov	ip, r2
 80074c8:	4463      	add	r3, ip
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	1d7b      	adds	r3, r7, #5
 80074ce:	33ff      	adds	r3, #255	; 0xff
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d110      	bne.n	80074f8 <USB_EPStartXfer+0x2cc>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	4a41      	ldr	r2, [pc, #260]	; (80075e4 <USB_EPStartXfer+0x3b8>)
 80074de:	4013      	ands	r3, r2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4a3e      	ldr	r2, [pc, #248]	; (80075e8 <USB_EPStartXfer+0x3bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e05a      	b.n	80075ae <USB_EPStartXfer+0x382>
 80074f8:	1d7b      	adds	r3, r7, #5
 80074fa:	33ff      	adds	r3, #255	; 0xff
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007500:	d81a      	bhi.n	8007538 <USB_EPStartXfer+0x30c>
 8007502:	1d7b      	adds	r3, r7, #5
 8007504:	33ff      	adds	r3, #255	; 0xff
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	21fc      	movs	r1, #252	; 0xfc
 800750c:	187a      	adds	r2, r7, r1
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	1d7b      	adds	r3, r7, #5
 8007512:	33ff      	adds	r3, #255	; 0xff
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2201      	movs	r2, #1
 8007518:	4013      	ands	r3, r2
 800751a:	d004      	beq.n	8007526 <USB_EPStartXfer+0x2fa>
 800751c:	187b      	adds	r3, r7, r1
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	187a      	adds	r2, r7, r1
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	23fc      	movs	r3, #252	; 0xfc
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	029b      	lsls	r3, r3, #10
 8007530:	b29a      	uxth	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	e03a      	b.n	80075ae <USB_EPStartXfer+0x382>
 8007538:	1d7b      	adds	r3, r7, #5
 800753a:	33ff      	adds	r3, #255	; 0xff
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	21fc      	movs	r1, #252	; 0xfc
 8007542:	187a      	adds	r2, r7, r1
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	1d7b      	adds	r3, r7, #5
 8007548:	33ff      	adds	r3, #255	; 0xff
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	221f      	movs	r2, #31
 800754e:	4013      	ands	r3, r2
 8007550:	d104      	bne.n	800755c <USB_EPStartXfer+0x330>
 8007552:	187b      	adds	r3, r7, r1
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3b01      	subs	r3, #1
 8007558:	187a      	adds	r2, r7, r1
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	23fc      	movs	r3, #252	; 0xfc
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	029b      	lsls	r3, r3, #10
 8007566:	b29b      	uxth	r3, r3
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <USB_EPStartXfer+0x3bc>)
 800756a:	4313      	orrs	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e01c      	b.n	80075ae <USB_EPStartXfer+0x382>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d118      	bne.n	80075ae <USB_EPStartXfer+0x382>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2250      	movs	r2, #80	; 0x50
 8007584:	5a9b      	ldrh	r3, [r3, r2]
 8007586:	b29b      	uxth	r3, r3
 8007588:	001a      	movs	r2, r3
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	189b      	adds	r3, r3, r2
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	00da      	lsls	r2, r3, #3
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	18d3      	adds	r3, r2, r3
 800759a:	4a0e      	ldr	r2, [pc, #56]	; (80075d4 <USB_EPStartXfer+0x3a8>)
 800759c:	4694      	mov	ip, r2
 800759e:	4463      	add	r3, ip
 80075a0:	61fb      	str	r3, [r7, #28]
 80075a2:	1d7b      	adds	r3, r7, #5
 80075a4:	33ff      	adds	r3, #255	; 0xff
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075ae:	2076      	movs	r0, #118	; 0x76
 80075b0:	183b      	adds	r3, r7, r0
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	8912      	ldrh	r2, [r2, #8]
 80075b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6959      	ldr	r1, [r3, #20]
 80075bc:	1d7b      	adds	r3, r7, #5
 80075be:	33ff      	adds	r3, #255	; 0xff
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	b29c      	uxth	r4, r3
 80075c4:	183b      	adds	r3, r7, r0
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	0023      	movs	r3, r4
 80075cc:	f001 f822 	bl	8008614 <USB_WritePMA>
 80075d0:	e301      	b.n	8007bd6 <USB_EPStartXfer+0x9aa>
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	00000402 	.word	0x00000402
 80075d8:	ffff8f8f 	.word	0xffff8f8f
 80075dc:	ffff8180 	.word	0xffff8180
 80075e0:	00000406 	.word	0x00000406
 80075e4:	ffff83ff 	.word	0xffff83ff
 80075e8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d166      	bne.n	80076c2 <USB_EPStartXfer+0x496>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2250      	movs	r2, #80	; 0x50
 80075fc:	5a9b      	ldrh	r3, [r3, r2]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	001a      	movs	r2, r3
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	189b      	adds	r3, r3, r2
 8007606:	64bb      	str	r3, [r7, #72]	; 0x48
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	00da      	lsls	r2, r3, #3
 800760e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007610:	18d3      	adds	r3, r2, r3
 8007612:	4ac3      	ldr	r2, [pc, #780]	; (8007920 <USB_EPStartXfer+0x6f4>)
 8007614:	4694      	mov	ip, r2
 8007616:	4463      	add	r3, ip
 8007618:	647b      	str	r3, [r7, #68]	; 0x44
 800761a:	1d7b      	adds	r3, r7, #5
 800761c:	33ff      	adds	r3, #255	; 0xff
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d110      	bne.n	8007646 <USB_EPStartXfer+0x41a>
 8007624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	4abe      	ldr	r2, [pc, #760]	; (8007924 <USB_EPStartXfer+0x6f8>)
 800762c:	4013      	ands	r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	4abb      	ldr	r2, [pc, #748]	; (8007928 <USB_EPStartXfer+0x6fc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	e05a      	b.n	80076fc <USB_EPStartXfer+0x4d0>
 8007646:	1d7b      	adds	r3, r7, #5
 8007648:	33ff      	adds	r3, #255	; 0xff
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b3e      	cmp	r3, #62	; 0x3e
 800764e:	d81a      	bhi.n	8007686 <USB_EPStartXfer+0x45a>
 8007650:	1d7b      	adds	r3, r7, #5
 8007652:	33ff      	adds	r3, #255	; 0xff
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	21f8      	movs	r1, #248	; 0xf8
 800765a:	187a      	adds	r2, r7, r1
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	1d7b      	adds	r3, r7, #5
 8007660:	33ff      	adds	r3, #255	; 0xff
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2201      	movs	r2, #1
 8007666:	4013      	ands	r3, r2
 8007668:	d004      	beq.n	8007674 <USB_EPStartXfer+0x448>
 800766a:	187b      	adds	r3, r7, r1
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	187a      	adds	r2, r7, r1
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	23f8      	movs	r3, #248	; 0xf8
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	029b      	lsls	r3, r3, #10
 800767e:	b29a      	uxth	r2, r3
 8007680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e03a      	b.n	80076fc <USB_EPStartXfer+0x4d0>
 8007686:	1d7b      	adds	r3, r7, #5
 8007688:	33ff      	adds	r3, #255	; 0xff
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	21f8      	movs	r1, #248	; 0xf8
 8007690:	187a      	adds	r2, r7, r1
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	1d7b      	adds	r3, r7, #5
 8007696:	33ff      	adds	r3, #255	; 0xff
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	221f      	movs	r2, #31
 800769c:	4013      	ands	r3, r2
 800769e:	d104      	bne.n	80076aa <USB_EPStartXfer+0x47e>
 80076a0:	187b      	adds	r3, r7, r1
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	187a      	adds	r2, r7, r1
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	23f8      	movs	r3, #248	; 0xf8
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4a9c      	ldr	r2, [pc, #624]	; (8007928 <USB_EPStartXfer+0x6fc>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e01c      	b.n	80076fc <USB_EPStartXfer+0x4d0>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d118      	bne.n	80076fc <USB_EPStartXfer+0x4d0>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	653b      	str	r3, [r7, #80]	; 0x50
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2250      	movs	r2, #80	; 0x50
 80076d2:	5a9b      	ldrh	r3, [r3, r2]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	001a      	movs	r2, r3
 80076d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076da:	189b      	adds	r3, r3, r2
 80076dc:	653b      	str	r3, [r7, #80]	; 0x50
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	00da      	lsls	r2, r3, #3
 80076e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e6:	18d3      	adds	r3, r2, r3
 80076e8:	4a8d      	ldr	r2, [pc, #564]	; (8007920 <USB_EPStartXfer+0x6f4>)
 80076ea:	4694      	mov	ip, r2
 80076ec:	4463      	add	r3, ip
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f0:	1d7b      	adds	r3, r7, #5
 80076f2:	33ff      	adds	r3, #255	; 0xff
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076fc:	2076      	movs	r0, #118	; 0x76
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	8912      	ldrh	r2, [r2, #8]
 8007704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	1d7b      	adds	r3, r7, #5
 800770c:	33ff      	adds	r3, #255	; 0xff
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	b29c      	uxth	r4, r3
 8007712:	183b      	adds	r3, r7, r0
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	0023      	movs	r3, r4
 800771a:	f000 ff7b 	bl	8008614 <USB_WritePMA>
            ep->xfer_buff += len;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	1d7b      	adds	r3, r7, #5
 8007724:	33ff      	adds	r3, #255	; 0xff
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	18d2      	adds	r2, r2, r3
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	429a      	cmp	r2, r3
 8007738:	d908      	bls.n	800774c <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	1d7b      	adds	r3, r7, #5
 8007740:	33ff      	adds	r3, #255	; 0xff
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	621a      	str	r2, [r3, #32]
 800774a:	e007      	b.n	800775c <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	1d7a      	adds	r2, r7, #5
 8007752:	32ff      	adds	r2, #255	; 0xff
 8007754:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	643b      	str	r3, [r7, #64]	; 0x40
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d166      	bne.n	8007836 <USB_EPStartXfer+0x60a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2250      	movs	r2, #80	; 0x50
 8007770:	5a9b      	ldrh	r3, [r3, r2]
 8007772:	b29b      	uxth	r3, r3
 8007774:	001a      	movs	r2, r3
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	189b      	adds	r3, r3, r2
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	00da      	lsls	r2, r3, #3
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	18d3      	adds	r3, r2, r3
 8007786:	4a69      	ldr	r2, [pc, #420]	; (800792c <USB_EPStartXfer+0x700>)
 8007788:	4694      	mov	ip, r2
 800778a:	4463      	add	r3, ip
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	1d7b      	adds	r3, r7, #5
 8007790:	33ff      	adds	r3, #255	; 0xff
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d110      	bne.n	80077ba <USB_EPStartXfer+0x58e>
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	4a61      	ldr	r2, [pc, #388]	; (8007924 <USB_EPStartXfer+0x6f8>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4a5e      	ldr	r2, [pc, #376]	; (8007928 <USB_EPStartXfer+0x6fc>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e058      	b.n	800786c <USB_EPStartXfer+0x640>
 80077ba:	1d7b      	adds	r3, r7, #5
 80077bc:	33ff      	adds	r3, #255	; 0xff
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b3e      	cmp	r3, #62	; 0x3e
 80077c2:	d81a      	bhi.n	80077fa <USB_EPStartXfer+0x5ce>
 80077c4:	1d7b      	adds	r3, r7, #5
 80077c6:	33ff      	adds	r3, #255	; 0xff
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	21f4      	movs	r1, #244	; 0xf4
 80077ce:	187a      	adds	r2, r7, r1
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	1d7b      	adds	r3, r7, #5
 80077d4:	33ff      	adds	r3, #255	; 0xff
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2201      	movs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d004      	beq.n	80077e8 <USB_EPStartXfer+0x5bc>
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	187a      	adds	r2, r7, r1
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	23f4      	movs	r3, #244	; 0xf4
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	e038      	b.n	800786c <USB_EPStartXfer+0x640>
 80077fa:	1d7b      	adds	r3, r7, #5
 80077fc:	33ff      	adds	r3, #255	; 0xff
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	21f4      	movs	r1, #244	; 0xf4
 8007804:	187a      	adds	r2, r7, r1
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	1d7b      	adds	r3, r7, #5
 800780a:	33ff      	adds	r3, #255	; 0xff
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	221f      	movs	r2, #31
 8007810:	4013      	ands	r3, r2
 8007812:	d104      	bne.n	800781e <USB_EPStartXfer+0x5f2>
 8007814:	187b      	adds	r3, r7, r1
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	187a      	adds	r2, r7, r1
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	23f4      	movs	r3, #244	; 0xf4
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	b29b      	uxth	r3, r3
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <USB_EPStartXfer+0x6fc>)
 800782c:	4313      	orrs	r3, r2
 800782e:	b29a      	uxth	r2, r3
 8007830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e01a      	b.n	800786c <USB_EPStartXfer+0x640>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d116      	bne.n	800786c <USB_EPStartXfer+0x640>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2250      	movs	r2, #80	; 0x50
 8007842:	5a9b      	ldrh	r3, [r3, r2]
 8007844:	b29b      	uxth	r3, r3
 8007846:	001a      	movs	r2, r3
 8007848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784a:	189b      	adds	r3, r3, r2
 800784c:	643b      	str	r3, [r7, #64]	; 0x40
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	00da      	lsls	r2, r3, #3
 8007854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007856:	18d3      	adds	r3, r2, r3
 8007858:	4a34      	ldr	r2, [pc, #208]	; (800792c <USB_EPStartXfer+0x700>)
 800785a:	4694      	mov	ip, r2
 800785c:	4463      	add	r3, ip
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007860:	1d7b      	adds	r3, r7, #5
 8007862:	33ff      	adds	r3, #255	; 0xff
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800786c:	2076      	movs	r0, #118	; 0x76
 800786e:	183b      	adds	r3, r7, r0
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	8952      	ldrh	r2, [r2, #10]
 8007874:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6959      	ldr	r1, [r3, #20]
 800787a:	1d7b      	adds	r3, r7, #5
 800787c:	33ff      	adds	r3, #255	; 0xff
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	b29c      	uxth	r4, r3
 8007882:	183b      	adds	r3, r7, r0
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	0023      	movs	r3, r4
 800788a:	f000 fec3 	bl	8008614 <USB_WritePMA>
 800788e:	e1a2      	b.n	8007bd6 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	1d7a      	adds	r2, r7, #5
 8007896:	32ff      	adds	r2, #255	; 0xff
 8007898:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	2062      	movs	r0, #98	; 0x62
 80078aa:	183b      	adds	r3, r7, r0
 80078ac:	4920      	ldr	r1, [pc, #128]	; (8007930 <USB_EPStartXfer+0x704>)
 80078ae:	400a      	ands	r2, r1
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	18d3      	adds	r3, r2, r3
 80078bc:	183a      	adds	r2, r7, r0
 80078be:	8812      	ldrh	r2, [r2, #0]
 80078c0:	491c      	ldr	r1, [pc, #112]	; (8007934 <USB_EPStartXfer+0x708>)
 80078c2:	430a      	orrs	r2, r1
 80078c4:	b292      	uxth	r2, r2
 80078c6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2250      	movs	r2, #80	; 0x50
 80078d0:	5a9b      	ldrh	r3, [r3, r2]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	001a      	movs	r2, r3
 80078d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e4:	18d3      	adds	r3, r2, r3
 80078e6:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <USB_EPStartXfer+0x6f4>)
 80078e8:	4694      	mov	ip, r2
 80078ea:	4463      	add	r3, ip
 80078ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ee:	1d7b      	adds	r3, r7, #5
 80078f0:	33ff      	adds	r3, #255	; 0xff
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078fa:	2076      	movs	r0, #118	; 0x76
 80078fc:	183b      	adds	r3, r7, r0
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	8912      	ldrh	r2, [r2, #8]
 8007902:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6959      	ldr	r1, [r3, #20]
 8007908:	1d7b      	adds	r3, r7, #5
 800790a:	33ff      	adds	r3, #255	; 0xff
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	b29c      	uxth	r4, r3
 8007910:	183b      	adds	r3, r7, r0
 8007912:	881a      	ldrh	r2, [r3, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	0023      	movs	r3, r4
 8007918:	f000 fe7c 	bl	8008614 <USB_WritePMA>
 800791c:	e15b      	b.n	8007bd6 <USB_EPStartXfer+0x9aa>
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	00000402 	.word	0x00000402
 8007924:	ffff83ff 	.word	0xffff83ff
 8007928:	ffff8000 	.word	0xffff8000
 800792c:	00000406 	.word	0x00000406
 8007930:	ffff8e8f 	.word	0xffff8e8f
 8007934:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6a1a      	ldr	r2, [r3, #32]
 800793c:	1d7b      	adds	r3, r7, #5
 800793e:	33ff      	adds	r3, #255	; 0xff
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	18d3      	adds	r3, r2, r3
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	001a      	movs	r2, r3
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	4013      	ands	r3, r2
 800795c:	d100      	bne.n	8007960 <USB_EPStartXfer+0x734>
 800795e:	e099      	b.n	8007a94 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	673b      	str	r3, [r7, #112]	; 0x70
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d166      	bne.n	8007a3a <USB_EPStartXfer+0x80e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2250      	movs	r2, #80	; 0x50
 8007974:	5a9b      	ldrh	r3, [r3, r2]
 8007976:	b29b      	uxth	r3, r3
 8007978:	001a      	movs	r2, r3
 800797a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800797c:	189b      	adds	r3, r3, r2
 800797e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	00da      	lsls	r2, r3, #3
 8007986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007988:	18d3      	adds	r3, r2, r3
 800798a:	4ad0      	ldr	r2, [pc, #832]	; (8007ccc <USB_EPStartXfer+0xaa0>)
 800798c:	4694      	mov	ip, r2
 800798e:	4463      	add	r3, ip
 8007990:	667b      	str	r3, [r7, #100]	; 0x64
 8007992:	1d7b      	adds	r3, r7, #5
 8007994:	33ff      	adds	r3, #255	; 0xff
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d110      	bne.n	80079be <USB_EPStartXfer+0x792>
 800799c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4acb      	ldr	r2, [pc, #812]	; (8007cd0 <USB_EPStartXfer+0xaa4>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4ac8      	ldr	r2, [pc, #800]	; (8007cd4 <USB_EPStartXfer+0xaa8>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	e058      	b.n	8007a70 <USB_EPStartXfer+0x844>
 80079be:	1d7b      	adds	r3, r7, #5
 80079c0:	33ff      	adds	r3, #255	; 0xff
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b3e      	cmp	r3, #62	; 0x3e
 80079c6:	d81a      	bhi.n	80079fe <USB_EPStartXfer+0x7d2>
 80079c8:	1d7b      	adds	r3, r7, #5
 80079ca:	33ff      	adds	r3, #255	; 0xff
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	21f0      	movs	r1, #240	; 0xf0
 80079d2:	187a      	adds	r2, r7, r1
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	1d7b      	adds	r3, r7, #5
 80079d8:	33ff      	adds	r3, #255	; 0xff
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2201      	movs	r2, #1
 80079de:	4013      	ands	r3, r2
 80079e0:	d004      	beq.n	80079ec <USB_EPStartXfer+0x7c0>
 80079e2:	187b      	adds	r3, r7, r1
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	187a      	adds	r2, r7, r1
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	23f0      	movs	r3, #240	; 0xf0
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e038      	b.n	8007a70 <USB_EPStartXfer+0x844>
 80079fe:	1d7b      	adds	r3, r7, #5
 8007a00:	33ff      	adds	r3, #255	; 0xff
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	21f0      	movs	r1, #240	; 0xf0
 8007a08:	187a      	adds	r2, r7, r1
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	1d7b      	adds	r3, r7, #5
 8007a0e:	33ff      	adds	r3, #255	; 0xff
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	221f      	movs	r2, #31
 8007a14:	4013      	ands	r3, r2
 8007a16:	d104      	bne.n	8007a22 <USB_EPStartXfer+0x7f6>
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	187a      	adds	r2, r7, r1
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	23f0      	movs	r3, #240	; 0xf0
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4aa9      	ldr	r2, [pc, #676]	; (8007cd4 <USB_EPStartXfer+0xaa8>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e01a      	b.n	8007a70 <USB_EPStartXfer+0x844>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d116      	bne.n	8007a70 <USB_EPStartXfer+0x844>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2250      	movs	r2, #80	; 0x50
 8007a46:	5a9b      	ldrh	r3, [r3, r2]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	673b      	str	r3, [r7, #112]	; 0x70
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	00da      	lsls	r2, r3, #3
 8007a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a5a:	18d3      	adds	r3, r2, r3
 8007a5c:	4a9b      	ldr	r2, [pc, #620]	; (8007ccc <USB_EPStartXfer+0xaa0>)
 8007a5e:	4694      	mov	ip, r2
 8007a60:	4463      	add	r3, ip
 8007a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a64:	1d7b      	adds	r3, r7, #5
 8007a66:	33ff      	adds	r3, #255	; 0xff
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007a70:	2076      	movs	r0, #118	; 0x76
 8007a72:	183b      	adds	r3, r7, r0
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	8952      	ldrh	r2, [r2, #10]
 8007a78:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6959      	ldr	r1, [r3, #20]
 8007a7e:	1d7b      	adds	r3, r7, #5
 8007a80:	33ff      	adds	r3, #255	; 0xff
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b29c      	uxth	r4, r3
 8007a86:	183b      	adds	r3, r7, r0
 8007a88:	881a      	ldrh	r2, [r3, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	0023      	movs	r3, r4
 8007a8e:	f000 fdc1 	bl	8008614 <USB_WritePMA>
 8007a92:	e0a0      	b.n	8007bd6 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d166      	bne.n	8007b6a <USB_EPStartXfer+0x93e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2250      	movs	r2, #80	; 0x50
 8007aa4:	5a9b      	ldrh	r3, [r3, r2]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	001a      	movs	r2, r3
 8007aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007aac:	189b      	adds	r3, r3, r2
 8007aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	00da      	lsls	r2, r3, #3
 8007ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	4a87      	ldr	r2, [pc, #540]	; (8007cd8 <USB_EPStartXfer+0xaac>)
 8007abc:	4694      	mov	ip, r2
 8007abe:	4463      	add	r3, ip
 8007ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ac2:	1d7b      	adds	r3, r7, #5
 8007ac4:	33ff      	adds	r3, #255	; 0xff
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d110      	bne.n	8007aee <USB_EPStartXfer+0x8c2>
 8007acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	4a7f      	ldr	r2, [pc, #508]	; (8007cd0 <USB_EPStartXfer+0xaa4>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4a7c      	ldr	r2, [pc, #496]	; (8007cd4 <USB_EPStartXfer+0xaa8>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	e062      	b.n	8007bb4 <USB_EPStartXfer+0x988>
 8007aee:	1d7b      	adds	r3, r7, #5
 8007af0:	33ff      	adds	r3, #255	; 0xff
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b3e      	cmp	r3, #62	; 0x3e
 8007af6:	d81a      	bhi.n	8007b2e <USB_EPStartXfer+0x902>
 8007af8:	1d7b      	adds	r3, r7, #5
 8007afa:	33ff      	adds	r3, #255	; 0xff
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	21ec      	movs	r1, #236	; 0xec
 8007b02:	187a      	adds	r2, r7, r1
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	1d7b      	adds	r3, r7, #5
 8007b08:	33ff      	adds	r3, #255	; 0xff
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d004      	beq.n	8007b1c <USB_EPStartXfer+0x8f0>
 8007b12:	187b      	adds	r3, r7, r1
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	187a      	adds	r2, r7, r1
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	23ec      	movs	r3, #236	; 0xec
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	029b      	lsls	r3, r3, #10
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e042      	b.n	8007bb4 <USB_EPStartXfer+0x988>
 8007b2e:	1d7b      	adds	r3, r7, #5
 8007b30:	33ff      	adds	r3, #255	; 0xff
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	21ec      	movs	r1, #236	; 0xec
 8007b38:	187a      	adds	r2, r7, r1
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	1d7b      	adds	r3, r7, #5
 8007b3e:	33ff      	adds	r3, #255	; 0xff
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	221f      	movs	r2, #31
 8007b44:	4013      	ands	r3, r2
 8007b46:	d104      	bne.n	8007b52 <USB_EPStartXfer+0x926>
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	187a      	adds	r2, r7, r1
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	23ec      	movs	r3, #236	; 0xec
 8007b54:	18fb      	adds	r3, r7, r3
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4a5d      	ldr	r2, [pc, #372]	; (8007cd4 <USB_EPStartXfer+0xaa8>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e024      	b.n	8007bb4 <USB_EPStartXfer+0x988>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d120      	bne.n	8007bb4 <USB_EPStartXfer+0x988>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2184      	movs	r1, #132	; 0x84
 8007b76:	187a      	adds	r2, r7, r1
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2250      	movs	r2, #80	; 0x50
 8007b7e:	5a9b      	ldrh	r3, [r3, r2]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	001a      	movs	r2, r3
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	189b      	adds	r3, r3, r2
 8007b8a:	187a      	adds	r2, r7, r1
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	18d3      	adds	r3, r2, r3
 8007b9a:	4a4f      	ldr	r2, [pc, #316]	; (8007cd8 <USB_EPStartXfer+0xaac>)
 8007b9c:	4694      	mov	ip, r2
 8007b9e:	4463      	add	r3, ip
 8007ba0:	2180      	movs	r1, #128	; 0x80
 8007ba2:	187a      	adds	r2, r7, r1
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	1d7b      	adds	r3, r7, #5
 8007ba8:	33ff      	adds	r3, #255	; 0xff
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	187b      	adds	r3, r7, r1
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bb4:	2076      	movs	r0, #118	; 0x76
 8007bb6:	183b      	adds	r3, r7, r0
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	8912      	ldrh	r2, [r2, #8]
 8007bbc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6959      	ldr	r1, [r3, #20]
 8007bc2:	1d7b      	adds	r3, r7, #5
 8007bc4:	33ff      	adds	r3, #255	; 0xff
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	b29c      	uxth	r4, r3
 8007bca:	183b      	adds	r3, r7, r0
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	0023      	movs	r3, r4
 8007bd2:	f000 fd1f 	bl	8008614 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	18d3      	adds	r3, r2, r3
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	200a      	movs	r0, #10
 8007be6:	183b      	adds	r3, r7, r0
 8007be8:	493c      	ldr	r1, [pc, #240]	; (8007cdc <USB_EPStartXfer+0xab0>)
 8007bea:	400a      	ands	r2, r1
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	183b      	adds	r3, r7, r0
 8007bf0:	183a      	adds	r2, r7, r0
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	2110      	movs	r1, #16
 8007bf6:	404a      	eors	r2, r1
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	183b      	adds	r3, r7, r0
 8007bfc:	183a      	adds	r2, r7, r0
 8007bfe:	8812      	ldrh	r2, [r2, #0]
 8007c00:	2120      	movs	r1, #32
 8007c02:	404a      	eors	r2, r1
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	183a      	adds	r2, r7, r0
 8007c12:	8812      	ldrh	r2, [r2, #0]
 8007c14:	4932      	ldr	r1, [pc, #200]	; (8007ce0 <USB_EPStartXfer+0xab4>)
 8007c16:	430a      	orrs	r2, r1
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	f000 fbaf 	bl	800837e <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	7b1b      	ldrb	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d000      	beq.n	8007c2a <USB_EPStartXfer+0x9fe>
 8007c28:	e09e      	b.n	8007d68 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d90d      	bls.n	8007c52 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	1d7a      	adds	r2, r7, #5
 8007c3c:	32ff      	adds	r2, #255	; 0xff
 8007c3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	1d7b      	adds	r3, r7, #5
 8007c46:	33ff      	adds	r3, #255	; 0xff
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	619a      	str	r2, [r3, #24]
 8007c50:	e007      	b.n	8007c62 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	1d7a      	adds	r2, r7, #5
 8007c58:	32ff      	adds	r2, #255	; 0xff
 8007c5a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2190      	movs	r1, #144	; 0x90
 8007c66:	187a      	adds	r2, r7, r1
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2250      	movs	r2, #80	; 0x50
 8007c6e:	5a9b      	ldrh	r3, [r3, r2]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	001a      	movs	r2, r3
 8007c74:	187b      	adds	r3, r7, r1
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	187a      	adds	r2, r7, r1
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	00da      	lsls	r2, r3, #3
 8007c84:	187b      	adds	r3, r7, r1
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	18d3      	adds	r3, r2, r3
 8007c8a:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <USB_EPStartXfer+0xaa0>)
 8007c8c:	4694      	mov	ip, r2
 8007c8e:	4463      	add	r3, ip
 8007c90:	218c      	movs	r1, #140	; 0x8c
 8007c92:	187a      	adds	r2, r7, r1
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	1d7b      	adds	r3, r7, #5
 8007c98:	33ff      	adds	r3, #255	; 0xff
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d121      	bne.n	8007ce4 <USB_EPStartXfer+0xab8>
 8007ca0:	187b      	adds	r3, r7, r1
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <USB_EPStartXfer+0xaa4>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	187b      	adds	r3, r7, r1
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	187b      	adds	r3, r7, r1
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4a05      	ldr	r2, [pc, #20]	; (8007cd4 <USB_EPStartXfer+0xaa8>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	e334      	b.n	8008334 <USB_EPStartXfer+0x1108>
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	00000406 	.word	0x00000406
 8007cd0:	ffff83ff 	.word	0xffff83ff
 8007cd4:	ffff8000 	.word	0xffff8000
 8007cd8:	00000402 	.word	0x00000402
 8007cdc:	ffff8fbf 	.word	0xffff8fbf
 8007ce0:	ffff8080 	.word	0xffff8080
 8007ce4:	1d7b      	adds	r3, r7, #5
 8007ce6:	33ff      	adds	r3, #255	; 0xff
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b3e      	cmp	r3, #62	; 0x3e
 8007cec:	d81c      	bhi.n	8007d28 <USB_EPStartXfer+0xafc>
 8007cee:	1d7b      	adds	r3, r7, #5
 8007cf0:	33ff      	adds	r3, #255	; 0xff
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	21e8      	movs	r1, #232	; 0xe8
 8007cf8:	187a      	adds	r2, r7, r1
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	1d7b      	adds	r3, r7, #5
 8007cfe:	33ff      	adds	r3, #255	; 0xff
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2201      	movs	r2, #1
 8007d04:	4013      	ands	r3, r2
 8007d06:	d004      	beq.n	8007d12 <USB_EPStartXfer+0xae6>
 8007d08:	187b      	adds	r3, r7, r1
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	187a      	adds	r2, r7, r1
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	23e8      	movs	r3, #232	; 0xe8
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	238c      	movs	r3, #140	; 0x8c
 8007d20:	18fb      	adds	r3, r7, r3
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e305      	b.n	8008334 <USB_EPStartXfer+0x1108>
 8007d28:	1d7b      	adds	r3, r7, #5
 8007d2a:	33ff      	adds	r3, #255	; 0xff
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	21e8      	movs	r1, #232	; 0xe8
 8007d32:	187a      	adds	r2, r7, r1
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	1d7b      	adds	r3, r7, #5
 8007d38:	33ff      	adds	r3, #255	; 0xff
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	221f      	movs	r2, #31
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d104      	bne.n	8007d4c <USB_EPStartXfer+0xb20>
 8007d42:	187b      	adds	r3, r7, r1
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	187a      	adds	r2, r7, r1
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	23e8      	movs	r3, #232	; 0xe8
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4aca      	ldr	r2, [pc, #808]	; (8008084 <USB_EPStartXfer+0xe58>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	238c      	movs	r3, #140	; 0x8c
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e2e5      	b.n	8008334 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	78db      	ldrb	r3, [r3, #3]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d000      	beq.n	8007d72 <USB_EPStartXfer+0xb46>
 8007d70:	e16f      	b.n	8008052 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d16f      	bne.n	8007e5a <USB_EPStartXfer+0xc2e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	21ac      	movs	r1, #172	; 0xac
 8007d7e:	187a      	adds	r2, r7, r1
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2250      	movs	r2, #80	; 0x50
 8007d86:	5a9b      	ldrh	r3, [r3, r2]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	187b      	adds	r3, r7, r1
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	187a      	adds	r2, r7, r1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	00da      	lsls	r2, r3, #3
 8007d9c:	187b      	adds	r3, r7, r1
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	18d3      	adds	r3, r2, r3
 8007da2:	4ab9      	ldr	r2, [pc, #740]	; (8008088 <USB_EPStartXfer+0xe5c>)
 8007da4:	4694      	mov	ip, r2
 8007da6:	4463      	add	r3, ip
 8007da8:	21a8      	movs	r1, #168	; 0xa8
 8007daa:	187a      	adds	r2, r7, r1
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d114      	bne.n	8007de0 <USB_EPStartXfer+0xbb4>
 8007db6:	187b      	adds	r3, r7, r1
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4ab3      	ldr	r2, [pc, #716]	; (800808c <USB_EPStartXfer+0xe60>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	4aac      	ldr	r2, [pc, #688]	; (8008084 <USB_EPStartXfer+0xe58>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e060      	b.n	8007ea2 <USB_EPStartXfer+0xc76>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b3e      	cmp	r3, #62	; 0x3e
 8007de6:	d81a      	bhi.n	8007e1e <USB_EPStartXfer+0xbf2>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	21e4      	movs	r1, #228	; 0xe4
 8007df0:	187a      	adds	r2, r7, r1
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <USB_EPStartXfer+0xbdc>
 8007dfe:	187b      	adds	r3, r7, r1
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	187a      	adds	r2, r7, r1
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	23e4      	movs	r3, #228	; 0xe4
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	23a8      	movs	r3, #168	; 0xa8
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e041      	b.n	8007ea2 <USB_EPStartXfer+0xc76>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	21e4      	movs	r1, #228	; 0xe4
 8007e26:	187a      	adds	r2, r7, r1
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	221f      	movs	r2, #31
 8007e30:	4013      	ands	r3, r2
 8007e32:	d104      	bne.n	8007e3e <USB_EPStartXfer+0xc12>
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	187a      	adds	r2, r7, r1
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	23e4      	movs	r3, #228	; 0xe4
 8007e40:	18fb      	adds	r3, r7, r3
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4a8e      	ldr	r2, [pc, #568]	; (8008084 <USB_EPStartXfer+0xe58>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	23a8      	movs	r3, #168	; 0xa8
 8007e52:	18fb      	adds	r3, r7, r3
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e023      	b.n	8007ea2 <USB_EPStartXfer+0xc76>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d11f      	bne.n	8007ea2 <USB_EPStartXfer+0xc76>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	21b4      	movs	r1, #180	; 0xb4
 8007e66:	187a      	adds	r2, r7, r1
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2250      	movs	r2, #80	; 0x50
 8007e6e:	5a9b      	ldrh	r3, [r3, r2]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	001a      	movs	r2, r3
 8007e74:	187b      	adds	r3, r7, r1
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	189b      	adds	r3, r3, r2
 8007e7a:	187a      	adds	r2, r7, r1
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00da      	lsls	r2, r3, #3
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	4a7f      	ldr	r2, [pc, #508]	; (8008088 <USB_EPStartXfer+0xe5c>)
 8007e8c:	4694      	mov	ip, r2
 8007e8e:	4463      	add	r3, ip
 8007e90:	21b0      	movs	r1, #176	; 0xb0
 8007e92:	187a      	adds	r2, r7, r1
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	22a4      	movs	r2, #164	; 0xa4
 8007ea6:	18ba      	adds	r2, r7, r2
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d16f      	bne.n	8007f92 <USB_EPStartXfer+0xd66>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	219c      	movs	r1, #156	; 0x9c
 8007eb6:	187a      	adds	r2, r7, r1
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2250      	movs	r2, #80	; 0x50
 8007ebe:	5a9b      	ldrh	r3, [r3, r2]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	187b      	adds	r3, r7, r1
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	187a      	adds	r2, r7, r1
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	00da      	lsls	r2, r3, #3
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	18d3      	adds	r3, r2, r3
 8007eda:	4a6d      	ldr	r2, [pc, #436]	; (8008090 <USB_EPStartXfer+0xe64>)
 8007edc:	4694      	mov	ip, r2
 8007ede:	4463      	add	r3, ip
 8007ee0:	2198      	movs	r1, #152	; 0x98
 8007ee2:	187a      	adds	r2, r7, r1
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d114      	bne.n	8007f18 <USB_EPStartXfer+0xcec>
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4a65      	ldr	r2, [pc, #404]	; (800808c <USB_EPStartXfer+0xe60>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4a5e      	ldr	r2, [pc, #376]	; (8008084 <USB_EPStartXfer+0xe58>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	187b      	adds	r3, r7, r1
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	e05d      	b.n	8007fd4 <USB_EPStartXfer+0xda8>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1e:	d81a      	bhi.n	8007f56 <USB_EPStartXfer+0xd2a>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	21e0      	movs	r1, #224	; 0xe0
 8007f28:	187a      	adds	r2, r7, r1
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2201      	movs	r2, #1
 8007f32:	4013      	ands	r3, r2
 8007f34:	d004      	beq.n	8007f40 <USB_EPStartXfer+0xd14>
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	187a      	adds	r2, r7, r1
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	23e0      	movs	r3, #224	; 0xe0
 8007f42:	18fb      	adds	r3, r7, r3
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	029b      	lsls	r3, r3, #10
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	2398      	movs	r3, #152	; 0x98
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	801a      	strh	r2, [r3, #0]
 8007f54:	e03e      	b.n	8007fd4 <USB_EPStartXfer+0xda8>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	21e0      	movs	r1, #224	; 0xe0
 8007f5e:	187a      	adds	r2, r7, r1
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	221f      	movs	r2, #31
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d104      	bne.n	8007f76 <USB_EPStartXfer+0xd4a>
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	187a      	adds	r2, r7, r1
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	23e0      	movs	r3, #224	; 0xe0
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	029b      	lsls	r3, r3, #10
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	4a40      	ldr	r2, [pc, #256]	; (8008084 <USB_EPStartXfer+0xe58>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	2398      	movs	r3, #152	; 0x98
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e020      	b.n	8007fd4 <USB_EPStartXfer+0xda8>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d11c      	bne.n	8007fd4 <USB_EPStartXfer+0xda8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2250      	movs	r2, #80	; 0x50
 8007f9e:	5a9b      	ldrh	r3, [r3, r2]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	21a4      	movs	r1, #164	; 0xa4
 8007fa6:	187b      	adds	r3, r7, r1
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	187a      	adds	r2, r7, r1
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	00da      	lsls	r2, r3, #3
 8007fb6:	187b      	adds	r3, r7, r1
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	18d3      	adds	r3, r2, r3
 8007fbc:	4a34      	ldr	r2, [pc, #208]	; (8008090 <USB_EPStartXfer+0xe64>)
 8007fbe:	4694      	mov	ip, r2
 8007fc0:	4463      	add	r3, ip
 8007fc2:	21a0      	movs	r1, #160	; 0xa0
 8007fc4:	187a      	adds	r2, r7, r1
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	187b      	adds	r3, r7, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d100      	bne.n	8007fde <USB_EPStartXfer+0xdb2>
 8007fdc:	e1aa      	b.n	8008334 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	18d2      	adds	r2, r2, r3
 8007fe8:	2196      	movs	r1, #150	; 0x96
 8007fea:	187b      	adds	r3, r7, r1
 8007fec:	8812      	ldrh	r2, [r2, #0]
 8007fee:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ff0:	187b      	adds	r3, r7, r1
 8007ff2:	881a      	ldrh	r2, [r3, #0]
 8007ff4:	2380      	movs	r3, #128	; 0x80
 8007ff6:	01db      	lsls	r3, r3, #7
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d004      	beq.n	8008006 <USB_EPStartXfer+0xdda>
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	4013      	ands	r3, r2
 8008004:	d10d      	bne.n	8008022 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008006:	2196      	movs	r1, #150	; 0x96
 8008008:	187b      	adds	r3, r7, r1
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008012:	d000      	beq.n	8008016 <USB_EPStartXfer+0xdea>
 8008014:	e18e      	b.n	8008334 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008016:	187b      	adds	r3, r7, r1
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	4013      	ands	r3, r2
 800801e:	d000      	beq.n	8008022 <USB_EPStartXfer+0xdf6>
 8008020:	e188      	b.n	8008334 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	18d3      	adds	r3, r2, r3
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	2094      	movs	r0, #148	; 0x94
 8008032:	183b      	adds	r3, r7, r0
 8008034:	4917      	ldr	r1, [pc, #92]	; (8008094 <USB_EPStartXfer+0xe68>)
 8008036:	400a      	ands	r2, r1
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	18d3      	adds	r3, r2, r3
 8008044:	183a      	adds	r2, r7, r0
 8008046:	8812      	ldrh	r2, [r2, #0]
 8008048:	4913      	ldr	r1, [pc, #76]	; (8008098 <USB_EPStartXfer+0xe6c>)
 800804a:	430a      	orrs	r2, r1
 800804c:	b292      	uxth	r2, r2
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e170      	b.n	8008334 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	78db      	ldrb	r3, [r3, #3]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d000      	beq.n	800805c <USB_EPStartXfer+0xe30>
 800805a:	e169      	b.n	8008330 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	429a      	cmp	r2, r3
 8008066:	d919      	bls.n	800809c <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	1d7a      	adds	r2, r7, #5
 800806e:	32ff      	adds	r2, #255	; 0xff
 8008070:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	1d7b      	adds	r3, r7, #5
 8008078:	33ff      	adds	r3, #255	; 0xff
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	1ad2      	subs	r2, r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	619a      	str	r2, [r3, #24]
 8008082:	e013      	b.n	80080ac <USB_EPStartXfer+0xe80>
 8008084:	ffff8000 	.word	0xffff8000
 8008088:	00000402 	.word	0x00000402
 800808c:	ffff83ff 	.word	0xffff83ff
 8008090:	00000406 	.word	0x00000406
 8008094:	ffff8f8f 	.word	0xffff8f8f
 8008098:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	1d7a      	adds	r2, r7, #5
 80080a2:	32ff      	adds	r2, #255	; 0xff
 80080a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d000      	beq.n	80080b6 <USB_EPStartXfer+0xe8a>
 80080b4:	e075      	b.n	80081a2 <USB_EPStartXfer+0xf76>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	21cc      	movs	r1, #204	; 0xcc
 80080ba:	187a      	adds	r2, r7, r1
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2250      	movs	r2, #80	; 0x50
 80080c2:	5a9b      	ldrh	r3, [r3, r2]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	001a      	movs	r2, r3
 80080c8:	187b      	adds	r3, r7, r1
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	189b      	adds	r3, r3, r2
 80080ce:	187a      	adds	r2, r7, r1
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	00da      	lsls	r2, r3, #3
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	18d3      	adds	r3, r2, r3
 80080de:	4aaa      	ldr	r2, [pc, #680]	; (8008388 <USB_EPStartXfer+0x115c>)
 80080e0:	4694      	mov	ip, r2
 80080e2:	4463      	add	r3, ip
 80080e4:	21c8      	movs	r1, #200	; 0xc8
 80080e6:	187a      	adds	r2, r7, r1
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	1d7b      	adds	r3, r7, #5
 80080ec:	33ff      	adds	r3, #255	; 0xff
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d114      	bne.n	800811e <USB_EPStartXfer+0xef2>
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4aa3      	ldr	r2, [pc, #652]	; (800838c <USB_EPStartXfer+0x1160>)
 80080fe:	4013      	ands	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	187b      	adds	r3, r7, r1
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	187b      	adds	r3, r7, r1
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4a9f      	ldr	r2, [pc, #636]	; (8008390 <USB_EPStartXfer+0x1164>)
 8008112:	4313      	orrs	r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	187b      	adds	r3, r7, r1
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e066      	b.n	80081ec <USB_EPStartXfer+0xfc0>
 800811e:	1d7b      	adds	r3, r7, #5
 8008120:	33ff      	adds	r3, #255	; 0xff
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b3e      	cmp	r3, #62	; 0x3e
 8008126:	d81c      	bhi.n	8008162 <USB_EPStartXfer+0xf36>
 8008128:	1d7b      	adds	r3, r7, #5
 800812a:	33ff      	adds	r3, #255	; 0xff
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	21dc      	movs	r1, #220	; 0xdc
 8008132:	187a      	adds	r2, r7, r1
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	1d7b      	adds	r3, r7, #5
 8008138:	33ff      	adds	r3, #255	; 0xff
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2201      	movs	r2, #1
 800813e:	4013      	ands	r3, r2
 8008140:	d004      	beq.n	800814c <USB_EPStartXfer+0xf20>
 8008142:	187b      	adds	r3, r7, r1
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	187a      	adds	r2, r7, r1
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	23dc      	movs	r3, #220	; 0xdc
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	029b      	lsls	r3, r3, #10
 8008156:	b29a      	uxth	r2, r3
 8008158:	23c8      	movs	r3, #200	; 0xc8
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e044      	b.n	80081ec <USB_EPStartXfer+0xfc0>
 8008162:	1d7b      	adds	r3, r7, #5
 8008164:	33ff      	adds	r3, #255	; 0xff
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	21dc      	movs	r1, #220	; 0xdc
 800816c:	187a      	adds	r2, r7, r1
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	1d7b      	adds	r3, r7, #5
 8008172:	33ff      	adds	r3, #255	; 0xff
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	221f      	movs	r2, #31
 8008178:	4013      	ands	r3, r2
 800817a:	d104      	bne.n	8008186 <USB_EPStartXfer+0xf5a>
 800817c:	187b      	adds	r3, r7, r1
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	187a      	adds	r2, r7, r1
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	23dc      	movs	r3, #220	; 0xdc
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	029b      	lsls	r3, r3, #10
 8008190:	b29b      	uxth	r3, r3
 8008192:	4a7f      	ldr	r2, [pc, #508]	; (8008390 <USB_EPStartXfer+0x1164>)
 8008194:	4313      	orrs	r3, r2
 8008196:	b29a      	uxth	r2, r3
 8008198:	23c8      	movs	r3, #200	; 0xc8
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	e024      	b.n	80081ec <USB_EPStartXfer+0xfc0>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d120      	bne.n	80081ec <USB_EPStartXfer+0xfc0>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	21d4      	movs	r1, #212	; 0xd4
 80081ae:	187a      	adds	r2, r7, r1
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2250      	movs	r2, #80	; 0x50
 80081b6:	5a9b      	ldrh	r3, [r3, r2]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	001a      	movs	r2, r3
 80081bc:	187b      	adds	r3, r7, r1
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	189b      	adds	r3, r3, r2
 80081c2:	187a      	adds	r2, r7, r1
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	00da      	lsls	r2, r3, #3
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	18d3      	adds	r3, r2, r3
 80081d2:	4a6d      	ldr	r2, [pc, #436]	; (8008388 <USB_EPStartXfer+0x115c>)
 80081d4:	4694      	mov	ip, r2
 80081d6:	4463      	add	r3, ip
 80081d8:	21d0      	movs	r1, #208	; 0xd0
 80081da:	187a      	adds	r2, r7, r1
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	1d7b      	adds	r3, r7, #5
 80081e0:	33ff      	adds	r3, #255	; 0xff
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	22c4      	movs	r2, #196	; 0xc4
 80081f0:	18ba      	adds	r2, r7, r2
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d000      	beq.n	80081fe <USB_EPStartXfer+0xfd2>
 80081fc:	e075      	b.n	80082ea <USB_EPStartXfer+0x10be>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	21bc      	movs	r1, #188	; 0xbc
 8008202:	187a      	adds	r2, r7, r1
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2250      	movs	r2, #80	; 0x50
 800820a:	5a9b      	ldrh	r3, [r3, r2]
 800820c:	b29b      	uxth	r3, r3
 800820e:	001a      	movs	r2, r3
 8008210:	187b      	adds	r3, r7, r1
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	189b      	adds	r3, r3, r2
 8008216:	187a      	adds	r2, r7, r1
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	00da      	lsls	r2, r3, #3
 8008220:	187b      	adds	r3, r7, r1
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	18d3      	adds	r3, r2, r3
 8008226:	4a5b      	ldr	r2, [pc, #364]	; (8008394 <USB_EPStartXfer+0x1168>)
 8008228:	4694      	mov	ip, r2
 800822a:	4463      	add	r3, ip
 800822c:	21b8      	movs	r1, #184	; 0xb8
 800822e:	187a      	adds	r2, r7, r1
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	1d7b      	adds	r3, r7, #5
 8008234:	33ff      	adds	r3, #255	; 0xff
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d114      	bne.n	8008266 <USB_EPStartXfer+0x103a>
 800823c:	187b      	adds	r3, r7, r1
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	4a51      	ldr	r2, [pc, #324]	; (800838c <USB_EPStartXfer+0x1160>)
 8008246:	4013      	ands	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	187b      	adds	r3, r7, r1
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	187b      	adds	r3, r7, r1
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	4a4d      	ldr	r2, [pc, #308]	; (8008390 <USB_EPStartXfer+0x1164>)
 800825a:	4313      	orrs	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	187b      	adds	r3, r7, r1
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	e066      	b.n	8008334 <USB_EPStartXfer+0x1108>
 8008266:	1d7b      	adds	r3, r7, #5
 8008268:	33ff      	adds	r3, #255	; 0xff
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b3e      	cmp	r3, #62	; 0x3e
 800826e:	d81c      	bhi.n	80082aa <USB_EPStartXfer+0x107e>
 8008270:	1d7b      	adds	r3, r7, #5
 8008272:	33ff      	adds	r3, #255	; 0xff
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	21d8      	movs	r1, #216	; 0xd8
 800827a:	187a      	adds	r2, r7, r1
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	1d7b      	adds	r3, r7, #5
 8008280:	33ff      	adds	r3, #255	; 0xff
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2201      	movs	r2, #1
 8008286:	4013      	ands	r3, r2
 8008288:	d004      	beq.n	8008294 <USB_EPStartXfer+0x1068>
 800828a:	187b      	adds	r3, r7, r1
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3301      	adds	r3, #1
 8008290:	187a      	adds	r2, r7, r1
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	23d8      	movs	r3, #216	; 0xd8
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29a      	uxth	r2, r3
 80082a0:	23b8      	movs	r3, #184	; 0xb8
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	e044      	b.n	8008334 <USB_EPStartXfer+0x1108>
 80082aa:	1d7b      	adds	r3, r7, #5
 80082ac:	33ff      	adds	r3, #255	; 0xff
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	21d8      	movs	r1, #216	; 0xd8
 80082b4:	187a      	adds	r2, r7, r1
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	1d7b      	adds	r3, r7, #5
 80082ba:	33ff      	adds	r3, #255	; 0xff
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	221f      	movs	r2, #31
 80082c0:	4013      	ands	r3, r2
 80082c2:	d104      	bne.n	80082ce <USB_EPStartXfer+0x10a2>
 80082c4:	187b      	adds	r3, r7, r1
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	187a      	adds	r2, r7, r1
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	23d8      	movs	r3, #216	; 0xd8
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4a2d      	ldr	r2, [pc, #180]	; (8008390 <USB_EPStartXfer+0x1164>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	23b8      	movs	r3, #184	; 0xb8
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e024      	b.n	8008334 <USB_EPStartXfer+0x1108>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d120      	bne.n	8008334 <USB_EPStartXfer+0x1108>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2250      	movs	r2, #80	; 0x50
 80082f6:	5a9b      	ldrh	r3, [r3, r2]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	001a      	movs	r2, r3
 80082fc:	21c4      	movs	r1, #196	; 0xc4
 80082fe:	187b      	adds	r3, r7, r1
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	189b      	adds	r3, r3, r2
 8008304:	187a      	adds	r2, r7, r1
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	00da      	lsls	r2, r3, #3
 800830e:	187b      	adds	r3, r7, r1
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	4a1f      	ldr	r2, [pc, #124]	; (8008394 <USB_EPStartXfer+0x1168>)
 8008316:	4694      	mov	ip, r2
 8008318:	4463      	add	r3, ip
 800831a:	21c0      	movs	r1, #192	; 0xc0
 800831c:	187a      	adds	r2, r7, r1
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	1d7b      	adds	r3, r7, #5
 8008322:	33ff      	adds	r3, #255	; 0xff
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	b29a      	uxth	r2, r3
 8008328:	187b      	adds	r3, r7, r1
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e001      	b.n	8008334 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e025      	b.n	8008380 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	18d3      	adds	r3, r2, r3
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29a      	uxth	r2, r3
 8008342:	208a      	movs	r0, #138	; 0x8a
 8008344:	183b      	adds	r3, r7, r0
 8008346:	4914      	ldr	r1, [pc, #80]	; (8008398 <USB_EPStartXfer+0x116c>)
 8008348:	400a      	ands	r2, r1
 800834a:	801a      	strh	r2, [r3, #0]
 800834c:	183b      	adds	r3, r7, r0
 800834e:	183a      	adds	r2, r7, r0
 8008350:	8812      	ldrh	r2, [r2, #0]
 8008352:	2180      	movs	r1, #128	; 0x80
 8008354:	0149      	lsls	r1, r1, #5
 8008356:	404a      	eors	r2, r1
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	183b      	adds	r3, r7, r0
 800835c:	183a      	adds	r2, r7, r0
 800835e:	8812      	ldrh	r2, [r2, #0]
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	0189      	lsls	r1, r1, #6
 8008364:	404a      	eors	r2, r1
 8008366:	801a      	strh	r2, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	18d3      	adds	r3, r2, r3
 8008372:	183a      	adds	r2, r7, r0
 8008374:	8812      	ldrh	r2, [r2, #0]
 8008376:	4909      	ldr	r1, [pc, #36]	; (800839c <USB_EPStartXfer+0x1170>)
 8008378:	430a      	orrs	r2, r1
 800837a:	b292      	uxth	r2, r2
 800837c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	0018      	movs	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	b043      	add	sp, #268	; 0x10c
 8008386:	bd90      	pop	{r4, r7, pc}
 8008388:	00000402 	.word	0x00000402
 800838c:	ffff83ff 	.word	0xffff83ff
 8008390:	ffff8000 	.word	0xffff8000
 8008394:	00000406 	.word	0x00000406
 8008398:	ffffbf8f 	.word	0xffffbf8f
 800839c:	ffff8080 	.word	0xffff8080

080083a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01d      	beq.n	80083ee <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	18d3      	adds	r3, r2, r3
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29a      	uxth	r2, r3
 80083c0:	200c      	movs	r0, #12
 80083c2:	183b      	adds	r3, r7, r0
 80083c4:	491b      	ldr	r1, [pc, #108]	; (8008434 <USB_EPSetStall+0x94>)
 80083c6:	400a      	ands	r2, r1
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	183b      	adds	r3, r7, r0
 80083cc:	183a      	adds	r2, r7, r0
 80083ce:	8812      	ldrh	r2, [r2, #0]
 80083d0:	2110      	movs	r1, #16
 80083d2:	404a      	eors	r2, r1
 80083d4:	801a      	strh	r2, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	18d3      	adds	r3, r2, r3
 80083e0:	183a      	adds	r2, r7, r0
 80083e2:	8812      	ldrh	r2, [r2, #0]
 80083e4:	4914      	ldr	r1, [pc, #80]	; (8008438 <USB_EPSetStall+0x98>)
 80083e6:	430a      	orrs	r2, r1
 80083e8:	b292      	uxth	r2, r2
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	e01d      	b.n	800842a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18d3      	adds	r3, r2, r3
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	200e      	movs	r0, #14
 80083fe:	183b      	adds	r3, r7, r0
 8008400:	490e      	ldr	r1, [pc, #56]	; (800843c <USB_EPSetStall+0x9c>)
 8008402:	400a      	ands	r2, r1
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	183b      	adds	r3, r7, r0
 8008408:	183a      	adds	r2, r7, r0
 800840a:	8812      	ldrh	r2, [r2, #0]
 800840c:	2180      	movs	r1, #128	; 0x80
 800840e:	0149      	lsls	r1, r1, #5
 8008410:	404a      	eors	r2, r1
 8008412:	801a      	strh	r2, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	18d3      	adds	r3, r2, r3
 800841e:	183a      	adds	r2, r7, r0
 8008420:	8812      	ldrh	r2, [r2, #0]
 8008422:	4905      	ldr	r1, [pc, #20]	; (8008438 <USB_EPSetStall+0x98>)
 8008424:	430a      	orrs	r2, r1
 8008426:	b292      	uxth	r2, r2
 8008428:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	b004      	add	sp, #16
 8008432:	bd80      	pop	{r7, pc}
 8008434:	ffff8fbf 	.word	0xffff8fbf
 8008438:	ffff8080 	.word	0xffff8080
 800843c:	ffffbf8f 	.word	0xffffbf8f

08008440 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	7b1b      	ldrb	r3, [r3, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d000      	beq.n	8008454 <USB_EPClearStall+0x14>
 8008452:	e095      	b.n	8008580 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d046      	beq.n	80084ea <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	18d2      	adds	r2, r2, r3
 8008466:	2110      	movs	r1, #16
 8008468:	187b      	adds	r3, r7, r1
 800846a:	8812      	ldrh	r2, [r2, #0]
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	187b      	adds	r3, r7, r1
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	2240      	movs	r2, #64	; 0x40
 8008474:	4013      	ands	r3, r2
 8008476:	d016      	beq.n	80084a6 <USB_EPClearStall+0x66>
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	18d3      	adds	r3, r2, r3
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29a      	uxth	r2, r3
 8008486:	200e      	movs	r0, #14
 8008488:	183b      	adds	r3, r7, r0
 800848a:	4940      	ldr	r1, [pc, #256]	; (800858c <USB_EPClearStall+0x14c>)
 800848c:	400a      	ands	r2, r1
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	183a      	adds	r2, r7, r0
 800849c:	8812      	ldrh	r2, [r2, #0]
 800849e:	493c      	ldr	r1, [pc, #240]	; (8008590 <USB_EPClearStall+0x150>)
 80084a0:	430a      	orrs	r2, r1
 80084a2:	b292      	uxth	r2, r2
 80084a4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d068      	beq.n	8008580 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	18d3      	adds	r3, r2, r3
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	200c      	movs	r0, #12
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	4934      	ldr	r1, [pc, #208]	; (8008594 <USB_EPClearStall+0x154>)
 80084c2:	400a      	ands	r2, r1
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	183b      	adds	r3, r7, r0
 80084c8:	183a      	adds	r2, r7, r0
 80084ca:	8812      	ldrh	r2, [r2, #0]
 80084cc:	2120      	movs	r1, #32
 80084ce:	404a      	eors	r2, r1
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	18d3      	adds	r3, r2, r3
 80084dc:	183a      	adds	r2, r7, r0
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	492d      	ldr	r1, [pc, #180]	; (8008598 <USB_EPClearStall+0x158>)
 80084e2:	430a      	orrs	r2, r1
 80084e4:	b292      	uxth	r2, r2
 80084e6:	801a      	strh	r2, [r3, #0]
 80084e8:	e04a      	b.n	8008580 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	18d2      	adds	r2, r2, r3
 80084f4:	2116      	movs	r1, #22
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	8812      	ldrh	r2, [r2, #0]
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	187b      	adds	r3, r7, r1
 80084fe:	881a      	ldrh	r2, [r3, #0]
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	01db      	lsls	r3, r3, #7
 8008504:	4013      	ands	r3, r2
 8008506:	d016      	beq.n	8008536 <USB_EPClearStall+0xf6>
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	18d3      	adds	r3, r2, r3
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29a      	uxth	r2, r3
 8008516:	2014      	movs	r0, #20
 8008518:	183b      	adds	r3, r7, r0
 800851a:	491c      	ldr	r1, [pc, #112]	; (800858c <USB_EPClearStall+0x14c>)
 800851c:	400a      	ands	r2, r1
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	18d3      	adds	r3, r2, r3
 800852a:	183a      	adds	r2, r7, r0
 800852c:	8812      	ldrh	r2, [r2, #0]
 800852e:	491b      	ldr	r1, [pc, #108]	; (800859c <USB_EPClearStall+0x15c>)
 8008530:	430a      	orrs	r2, r1
 8008532:	b292      	uxth	r2, r2
 8008534:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29a      	uxth	r2, r3
 8008544:	2012      	movs	r0, #18
 8008546:	183b      	adds	r3, r7, r0
 8008548:	4915      	ldr	r1, [pc, #84]	; (80085a0 <USB_EPClearStall+0x160>)
 800854a:	400a      	ands	r2, r1
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	183b      	adds	r3, r7, r0
 8008550:	183a      	adds	r2, r7, r0
 8008552:	8812      	ldrh	r2, [r2, #0]
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	0149      	lsls	r1, r1, #5
 8008558:	404a      	eors	r2, r1
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	183b      	adds	r3, r7, r0
 800855e:	183a      	adds	r2, r7, r0
 8008560:	8812      	ldrh	r2, [r2, #0]
 8008562:	2180      	movs	r1, #128	; 0x80
 8008564:	0189      	lsls	r1, r1, #6
 8008566:	404a      	eors	r2, r1
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	18d3      	adds	r3, r2, r3
 8008574:	183a      	adds	r2, r7, r0
 8008576:	8812      	ldrh	r2, [r2, #0]
 8008578:	4907      	ldr	r1, [pc, #28]	; (8008598 <USB_EPClearStall+0x158>)
 800857a:	430a      	orrs	r2, r1
 800857c:	b292      	uxth	r2, r2
 800857e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	0018      	movs	r0, r3
 8008584:	46bd      	mov	sp, r7
 8008586:	b006      	add	sp, #24
 8008588:	bd80      	pop	{r7, pc}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	ffff8f8f 	.word	0xffff8f8f
 8008590:	ffff80c0 	.word	0xffff80c0
 8008594:	ffff8fbf 	.word	0xffff8fbf
 8008598:	ffff8080 	.word	0xffff8080
 800859c:	ffffc080 	.word	0xffffc080
 80085a0:	ffffbf8f 	.word	0xffffbf8f

080085a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	000a      	movs	r2, r1
 80085ae:	1cfb      	adds	r3, r7, #3
 80085b0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80085b2:	1cfb      	adds	r3, r7, #3
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d103      	bne.n	80085c2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	224c      	movs	r2, #76	; 0x4c
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b002      	add	sp, #8
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2258      	movs	r2, #88	; 0x58
 80085d8:	5a9b      	ldrh	r3, [r3, r2]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4a05      	ldr	r2, [pc, #20]	; (80085f4 <USB_DevConnect+0x28>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	b299      	uxth	r1, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2258      	movs	r2, #88	; 0x58
 80085e6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	0018      	movs	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	b002      	add	sp, #8
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	ffff8000 	.word	0xffff8000

080085f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2244      	movs	r2, #68	; 0x44
 8008604:	5a9b      	ldrh	r3, [r3, r2]
 8008606:	b29b      	uxth	r3, r3
 8008608:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b004      	add	sp, #16
 8008612:	bd80      	pop	{r7, pc}

08008614 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08c      	sub	sp, #48	; 0x30
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	0019      	movs	r1, r3
 8008620:	1dbb      	adds	r3, r7, #6
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	1c0a      	adds	r2, r1, #0
 8008628:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	085b      	lsrs	r3, r3, #1
 8008632:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800863c:	1dbb      	adds	r3, r7, #6
 800863e:	881a      	ldrh	r2, [r3, #0]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	2280      	movs	r2, #128	; 0x80
 8008646:	00d2      	lsls	r2, r2, #3
 8008648:	4694      	mov	ip, r2
 800864a:	4463      	add	r3, ip
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008652:	e01b      	b.n	800868c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	3301      	adds	r3, #1
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	b29b      	uxth	r3, r3
 800866a:	001a      	movs	r2, r3
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	b29a      	uxth	r2, r3
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	3302      	adds	r3, #2
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	3301      	adds	r3, #1
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	3b01      	subs	r3, #1
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e0      	bne.n	8008654 <USB_WritePMA+0x40>
  }
}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	46c0      	nop			; (mov r8, r8)
 8008696:	46bd      	mov	sp, r7
 8008698:	b00c      	add	sp, #48	; 0x30
 800869a:	bd80      	pop	{r7, pc}

0800869c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	0019      	movs	r1, r3
 80086a8:	1dbb      	adds	r3, r7, #6
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	1c0a      	adds	r2, r1, #0
 80086b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086c4:	1dbb      	adds	r3, r7, #6
 80086c6:	881a      	ldrh	r2, [r3, #0]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	18d3      	adds	r3, r2, r3
 80086cc:	2280      	movs	r2, #128	; 0x80
 80086ce:	00d2      	lsls	r2, r2, #3
 80086d0:	4694      	mov	ip, r2
 80086d2:	4463      	add	r3, ip
 80086d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
 80086da:	e018      	b.n	800870e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	3302      	adds	r3, #2
 80086e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	3301      	adds	r3, #1
 80086f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	3301      	adds	r3, #1
 8008706:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	3b01      	subs	r3, #1
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e3      	bne.n	80086dc <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	2201      	movs	r2, #1
 800871a:	4013      	ands	r3, r2
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	b2da      	uxtb	r2, r3
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	701a      	strb	r2, [r3, #0]
  }
}
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	46bd      	mov	sp, r7
 8008736:	b00a      	add	sp, #40	; 0x28
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	000a      	movs	r2, r1
 8008744:	1cfb      	adds	r3, r7, #3
 8008746:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008748:	230f      	movs	r3, #15
 800874a:	18fb      	adds	r3, r7, r3
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7c1b      	ldrb	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d116      	bne.n	8008786 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008758:	2380      	movs	r3, #128	; 0x80
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	2181      	movs	r1, #129	; 0x81
 8008762:	f002 f8b4 	bl	800a8ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	2101      	movs	r1, #1
 8008776:	f002 f8aa 	bl	800a8ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	23b6      	movs	r3, #182	; 0xb6
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	2101      	movs	r1, #1
 8008782:	50d1      	str	r1, [r2, r3]
 8008784:	e013      	b.n	80087ae <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	2202      	movs	r2, #2
 800878c:	2181      	movs	r1, #129	; 0x81
 800878e:	f002 f89e 	bl	800a8ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	2202      	movs	r2, #2
 800879e:	2101      	movs	r1, #1
 80087a0:	f002 f895 	bl	800a8ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	23b6      	movs	r3, #182	; 0xb6
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	2101      	movs	r1, #1
 80087ac:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	2308      	movs	r3, #8
 80087b2:	2203      	movs	r2, #3
 80087b4:	2182      	movs	r1, #130	; 0x82
 80087b6:	f002 f88a 	bl	800a8ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087c0:	2387      	movs	r3, #135	; 0x87
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f002 fa1b 	bl	800ac00 <USBD_static_malloc>
 80087ca:	0001      	movs	r1, r0
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	23ae      	movs	r3, #174	; 0xae
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	23ae      	movs	r3, #174	; 0xae
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	58d3      	ldr	r3, [r2, r3]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80087e0:	230f      	movs	r3, #15
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	e02c      	b.n	8008844 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	23ae      	movs	r3, #174	; 0xae
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	58d3      	ldr	r3, [r2, r3]
 80087f2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	23af      	movs	r3, #175	; 0xaf
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	58d3      	ldr	r3, [r2, r3]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	2385      	movs	r3, #133	; 0x85
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	2100      	movs	r1, #0
 8008808:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	2386      	movs	r3, #134	; 0x86
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	2100      	movs	r1, #0
 8008812:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7c1b      	ldrb	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	2381      	movs	r3, #129	; 0x81
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	58d2      	ldr	r2, [r2, r3]
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	2101      	movs	r1, #1
 800882c:	f002 f99a 	bl	800ab64 <USBD_LL_PrepareReceive>
 8008830:	e008      	b.n	8008844 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	2381      	movs	r3, #129	; 0x81
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	58d2      	ldr	r2, [r2, r3]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	2101      	movs	r1, #1
 8008840:	f002 f990 	bl	800ab64 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008844:	230f      	movs	r3, #15
 8008846:	18fb      	adds	r3, r7, r3
 8008848:	781b      	ldrb	r3, [r3, #0]
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b004      	add	sp, #16
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	000a      	movs	r2, r1
 800885c:	1cfb      	adds	r3, r7, #3
 800885e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008860:	230f      	movs	r3, #15
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2181      	movs	r1, #129	; 0x81
 800886c:	0018      	movs	r0, r3
 800886e:	f002 f865 	bl	800a93c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2101      	movs	r1, #1
 800887c:	0018      	movs	r0, r3
 800887e:	f002 f85d 	bl	800a93c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	23b6      	movs	r3, #182	; 0xb6
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	2100      	movs	r1, #0
 800888a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2182      	movs	r1, #130	; 0x82
 8008890:	0018      	movs	r0, r3
 8008892:	f002 f853 	bl	800a93c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	23ae      	movs	r3, #174	; 0xae
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	58d3      	ldr	r3, [r2, r3]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d011      	beq.n	80088cc <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	23af      	movs	r3, #175	; 0xaf
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	58d3      	ldr	r3, [r2, r3]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	23ae      	movs	r3, #174	; 0xae
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	58d3      	ldr	r3, [r2, r3]
 80088bc:	0018      	movs	r0, r3
 80088be:	f002 f9ab 	bl	800ac18 <USBD_static_free>
    pdev->pClassData = NULL;
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	23ae      	movs	r3, #174	; 0xae
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	2100      	movs	r1, #0
 80088ca:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80088cc:	230f      	movs	r3, #15
 80088ce:	18fb      	adds	r3, r7, r3
 80088d0:	781b      	ldrb	r3, [r3, #0]
}
 80088d2:	0018      	movs	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b004      	add	sp, #16
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	23ae      	movs	r3, #174	; 0xae
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	58d3      	ldr	r3, [r2, r3]
 80088ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80088f0:	230f      	movs	r3, #15
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80088f8:	230c      	movs	r3, #12
 80088fa:	18fb      	adds	r3, r7, r3
 80088fc:	2200      	movs	r2, #0
 80088fe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008900:	2317      	movs	r3, #23
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	001a      	movs	r2, r3
 800890e:	2360      	movs	r3, #96	; 0x60
 8008910:	4013      	ands	r3, r2
 8008912:	d03d      	beq.n	8008990 <USBD_CDC_Setup+0xb4>
 8008914:	2b20      	cmp	r3, #32
 8008916:	d000      	beq.n	800891a <USBD_CDC_Setup+0x3e>
 8008918:	e094      	b.n	8008a44 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d02b      	beq.n	800897a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b25b      	sxtb	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	da12      	bge.n	8008952 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	23af      	movs	r3, #175	; 0xaf
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	58d3      	ldr	r3, [r2, r3]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800893a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	88d2      	ldrh	r2, [r2, #6]
 8008940:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008942:	6939      	ldr	r1, [r7, #16]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	88da      	ldrh	r2, [r3, #6]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	0018      	movs	r0, r3
 800894c:	f001 fbb2 	bl	800a0b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008950:	e083      	b.n	8008a5a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	7859      	ldrb	r1, [r3, #1]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	2380      	movs	r3, #128	; 0x80
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	b2d9      	uxtb	r1, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4a40      	ldr	r2, [pc, #256]	; (8008a68 <USBD_CDC_Setup+0x18c>)
 8008968:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800896a:	6939      	ldr	r1, [r7, #16]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	88da      	ldrh	r2, [r3, #6]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	0018      	movs	r0, r3
 8008974:	f001 fbd1 	bl	800a11a <USBD_CtlPrepareRx>
      break;
 8008978:	e06f      	b.n	8008a5a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	23af      	movs	r3, #175	; 0xaf
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	58d3      	ldr	r3, [r2, r3]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	7850      	ldrb	r0, [r2, #1]
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	4798      	blx	r3
      break;
 800898e:	e064      	b.n	8008a5a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b0b      	cmp	r3, #11
 8008996:	d037      	beq.n	8008a08 <USBD_CDC_Setup+0x12c>
 8008998:	dc47      	bgt.n	8008a2a <USBD_CDC_Setup+0x14e>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <USBD_CDC_Setup+0xc8>
 800899e:	2b0a      	cmp	r3, #10
 80089a0:	d019      	beq.n	80089d6 <USBD_CDC_Setup+0xfa>
 80089a2:	e042      	b.n	8008a2a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	23a7      	movs	r3, #167	; 0xa7
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	5cd3      	ldrb	r3, [r2, r3]
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d107      	bne.n	80089c0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089b0:	230c      	movs	r3, #12
 80089b2:	18f9      	adds	r1, r7, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	0018      	movs	r0, r3
 80089ba:	f001 fb7b 	bl	800a0b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089be:	e040      	b.n	8008a42 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	0011      	movs	r1, r2
 80089c6:	0018      	movs	r0, r3
 80089c8:	f001 faf6 	bl	8009fb8 <USBD_CtlError>
            ret = USBD_FAIL;
 80089cc:	2317      	movs	r3, #23
 80089ce:	18fb      	adds	r3, r7, r3
 80089d0:	2202      	movs	r2, #2
 80089d2:	701a      	strb	r2, [r3, #0]
          break;
 80089d4:	e035      	b.n	8008a42 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	23a7      	movs	r3, #167	; 0xa7
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	5cd3      	ldrb	r3, [r2, r3]
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d107      	bne.n	80089f2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80089e2:	230f      	movs	r3, #15
 80089e4:	18f9      	adds	r1, r7, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	0018      	movs	r0, r3
 80089ec:	f001 fb62 	bl	800a0b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089f0:	e027      	b.n	8008a42 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	0011      	movs	r1, r2
 80089f8:	0018      	movs	r0, r3
 80089fa:	f001 fadd 	bl	8009fb8 <USBD_CtlError>
            ret = USBD_FAIL;
 80089fe:	2317      	movs	r3, #23
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	2202      	movs	r2, #2
 8008a04:	701a      	strb	r2, [r3, #0]
          break;
 8008a06:	e01c      	b.n	8008a42 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	23a7      	movs	r3, #167	; 0xa7
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	5cd3      	ldrb	r3, [r2, r3]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d015      	beq.n	8008a40 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f001 facc 	bl	8009fb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a20:	2317      	movs	r3, #23
 8008a22:	18fb      	adds	r3, r7, r3
 8008a24:	2202      	movs	r2, #2
 8008a26:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008a28:	e00a      	b.n	8008a40 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	0011      	movs	r1, r2
 8008a30:	0018      	movs	r0, r3
 8008a32:	f001 fac1 	bl	8009fb8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a36:	2317      	movs	r3, #23
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	701a      	strb	r2, [r3, #0]
          break;
 8008a3e:	e000      	b.n	8008a42 <USBD_CDC_Setup+0x166>
          break;
 8008a40:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008a42:	e00a      	b.n	8008a5a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	0011      	movs	r1, r2
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f001 fab4 	bl	8009fb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a50:	2317      	movs	r3, #23
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	2202      	movs	r2, #2
 8008a56:	701a      	strb	r2, [r3, #0]
      break;
 8008a58:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008a5a:	2317      	movs	r3, #23
 8008a5c:	18fb      	adds	r3, r7, r3
 8008a5e:	781b      	ldrb	r3, [r3, #0]
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b006      	add	sp, #24
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	00000201 	.word	0x00000201

08008a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	000a      	movs	r2, r1
 8008a76:	1cfb      	adds	r3, r7, #3
 8008a78:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	23ae      	movs	r3, #174	; 0xae
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	58d3      	ldr	r3, [r2, r3]
 8008a82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	23b0      	movs	r3, #176	; 0xb0
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	58d3      	ldr	r3, [r2, r3]
 8008a8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	23ae      	movs	r3, #174	; 0xae
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	58d3      	ldr	r3, [r2, r3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d03e      	beq.n	8008b18 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a9a:	1cfb      	adds	r3, r7, #3
 8008a9c:	781a      	ldrb	r2, [r3, #0]
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	0013      	movs	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	18cb      	adds	r3, r1, r3
 8008aaa:	331c      	adds	r3, #28
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02b      	beq.n	8008b0a <USBD_CDC_DataIn+0x9e>
 8008ab2:	1cfb      	adds	r3, r7, #3
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	0013      	movs	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	18cb      	adds	r3, r1, r3
 8008ac2:	331c      	adds	r3, #28
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	1cfb      	adds	r3, r7, #3
 8008ac8:	781a      	ldrb	r2, [r3, #0]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	0013      	movs	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	189b      	adds	r3, r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	18cb      	adds	r3, r1, r3
 8008ad6:	3338      	adds	r3, #56	; 0x38
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0019      	movs	r1, r3
 8008adc:	f7f7 fbac 	bl	8000238 <__aeabi_uidivmod>
 8008ae0:	1e0b      	subs	r3, r1, #0
 8008ae2:	d112      	bne.n	8008b0a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ae4:	1cfb      	adds	r3, r7, #3
 8008ae6:	781a      	ldrb	r2, [r3, #0]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	0013      	movs	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	189b      	adds	r3, r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	18cb      	adds	r3, r1, r3
 8008af4:	331c      	adds	r3, #28
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008afa:	1cfb      	adds	r3, r7, #3
 8008afc:	7819      	ldrb	r1, [r3, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	2300      	movs	r3, #0
 8008b02:	2200      	movs	r2, #0
 8008b04:	f001 fff7 	bl	800aaf6 <USBD_LL_Transmit>
 8008b08:	e004      	b.n	8008b14 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	2385      	movs	r3, #133	; 0x85
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	2100      	movs	r1, #0
 8008b12:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e000      	b.n	8008b1a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8008b18:	2302      	movs	r3, #2
  }
}
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b004      	add	sp, #16
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	000a      	movs	r2, r1
 8008b2c:	1cfb      	adds	r3, r7, #3
 8008b2e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	23ae      	movs	r3, #174	; 0xae
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	58d3      	ldr	r3, [r2, r3]
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b3a:	1cfb      	adds	r3, r7, #3
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	0011      	movs	r1, r2
 8008b42:	0018      	movs	r0, r3
 8008b44:	f002 f845 	bl	800abd2 <USBD_LL_GetRxDataSize>
 8008b48:	0001      	movs	r1, r0
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	2383      	movs	r3, #131	; 0x83
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	23ae      	movs	r3, #174	; 0xae
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	58d3      	ldr	r3, [r2, r3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d011      	beq.n	8008b82 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	23af      	movs	r3, #175	; 0xaf
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	58d3      	ldr	r3, [r2, r3]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	2381      	movs	r3, #129	; 0x81
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	58c8      	ldr	r0, [r1, r3]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2183      	movs	r1, #131	; 0x83
 8008b74:	0089      	lsls	r1, r1, #2
 8008b76:	468c      	mov	ip, r1
 8008b78:	4463      	add	r3, ip
 8008b7a:	0019      	movs	r1, r3
 8008b7c:	4790      	blx	r2

    return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e000      	b.n	8008b84 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8008b82:	2302      	movs	r3, #2
  }
}
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b004      	add	sp, #16
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	23ae      	movs	r3, #174	; 0xae
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	58d3      	ldr	r3, [r2, r3]
 8008b9c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	23af      	movs	r3, #175	; 0xaf
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	58d3      	ldr	r3, [r2, r3]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d019      	beq.n	8008bde <USBD_CDC_EP0_RxReady+0x52>
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	5cd3      	ldrb	r3, [r2, r3]
 8008bb2:	2bff      	cmp	r3, #255	; 0xff
 8008bb4:	d013      	beq.n	8008bde <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	23af      	movs	r3, #175	; 0xaf
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	58d3      	ldr	r3, [r2, r3]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	2280      	movs	r2, #128	; 0x80
 8008bc4:	0092      	lsls	r2, r2, #2
 8008bc6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8008bc8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4c06      	ldr	r4, [pc, #24]	; (8008be8 <USBD_CDC_EP0_RxReady+0x5c>)
 8008bce:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	2380      	movs	r3, #128	; 0x80
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	21ff      	movs	r1, #255	; 0xff
 8008bdc:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b005      	add	sp, #20
 8008be6:	bd90      	pop	{r4, r7, pc}
 8008be8:	00000201 	.word	0x00000201

08008bec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2243      	movs	r2, #67	; 0x43
 8008bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008bfa:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b002      	add	sp, #8
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20000094 	.word	0x20000094

08008c08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2243      	movs	r2, #67	; 0x43
 8008c14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c16:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8008c18:	0018      	movs	r0, r3
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	b002      	add	sp, #8
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000050 	.word	0x20000050

08008c24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2243      	movs	r2, #67	; 0x43
 8008c30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c32:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8008c34:	0018      	movs	r0, r3
 8008c36:	46bd      	mov	sp, r7
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200000d8 	.word	0x200000d8

08008c40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	220a      	movs	r2, #10
 8008c4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c4e:	4b02      	ldr	r3, [pc, #8]	; (8008c58 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008c50:	0018      	movs	r0, r3
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b002      	add	sp, #8
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	2000000c 	.word	0x2000000c

08008c5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c66:	200f      	movs	r0, #15
 8008c68:	183b      	adds	r3, r7, r0
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	23af      	movs	r3, #175	; 0xaf
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8008c7e:	183b      	adds	r3, r7, r0
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008c84:	230f      	movs	r3, #15
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	781b      	ldrb	r3, [r3, #0]
}
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	b004      	add	sp, #16
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	1dbb      	adds	r3, r7, #6
 8008c9e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	23ae      	movs	r3, #174	; 0xae
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	58d3      	ldr	r3, [r2, r3]
 8008ca8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	2382      	movs	r3, #130	; 0x82
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8008cb4:	1dbb      	adds	r3, r7, #6
 8008cb6:	8819      	ldrh	r1, [r3, #0]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	2384      	movs	r3, #132	; 0x84
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b006      	add	sp, #24
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	23ae      	movs	r3, #174	; 0xae
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	58d3      	ldr	r3, [r2, r3]
 8008cdc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	2381      	movs	r3, #129	; 0x81
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	0018      	movs	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b004      	add	sp, #16
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	23ae      	movs	r3, #174	; 0xae
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	58d3      	ldr	r3, [r2, r3]
 8008d02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	23ae      	movs	r3, #174	; 0xae
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	58d3      	ldr	r3, [r2, r3]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d022      	beq.n	8008d56 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	2385      	movs	r3, #133	; 0x85
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	58d3      	ldr	r3, [r2, r3]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d11a      	bne.n	8008d52 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	2385      	movs	r3, #133	; 0x85
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	2101      	movs	r1, #1
 8008d24:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	2384      	movs	r3, #132	; 0x84
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	58d2      	ldr	r2, [r2, r3]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	2382      	movs	r3, #130	; 0x82
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	2384      	movs	r3, #132	; 0x84
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	000a      	movs	r2, r1
 8008d48:	2181      	movs	r1, #129	; 0x81
 8008d4a:	f001 fed4 	bl	800aaf6 <USBD_LL_Transmit>

      return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e002      	b.n	8008d58 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d56:	2302      	movs	r3, #2
  }
}
 8008d58:	0018      	movs	r0, r3
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	b004      	add	sp, #16
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	23ae      	movs	r3, #174	; 0xae
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	58d3      	ldr	r3, [r2, r3]
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	23ae      	movs	r3, #174	; 0xae
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	58d3      	ldr	r3, [r2, r3]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d019      	beq.n	8008db2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7c1b      	ldrb	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	2381      	movs	r3, #129	; 0x81
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	58d2      	ldr	r2, [r2, r3]
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	2101      	movs	r1, #1
 8008d96:	f001 fee5 	bl	800ab64 <USBD_LL_PrepareReceive>
 8008d9a:	e008      	b.n	8008dae <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	2381      	movs	r3, #129	; 0x81
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	58d2      	ldr	r2, [r2, r3]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	2340      	movs	r3, #64	; 0x40
 8008da8:	2101      	movs	r1, #1
 8008daa:	f001 fedb 	bl	800ab64 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e000      	b.n	8008db4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8008db2:	2302      	movs	r3, #2
  }
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b004      	add	sp, #16
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	1dfb      	adds	r3, r7, #7
 8008dc8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e020      	b.n	8008e16 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	23ad      	movs	r3, #173	; 0xad
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	58d3      	ldr	r3, [r2, r3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	23ad      	movs	r3, #173	; 0xad
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	2100      	movs	r1, #0
 8008de8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	23ac      	movs	r3, #172	; 0xac
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	23a7      	movs	r3, #167	; 0xa7
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	2101      	movs	r1, #1
 8008e02:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	1dfa      	adds	r2, r7, #7
 8008e08:	7812      	ldrb	r2, [r2, #0]
 8008e0a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f001 fcd4 	bl	800a7bc <USBD_LL_Init>

  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	0018      	movs	r0, r3
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b004      	add	sp, #16
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e28:	200f      	movs	r0, #15
 8008e2a:	183b      	adds	r3, r7, r0
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	23ad      	movs	r3, #173	; 0xad
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008e40:	183b      	adds	r3, r7, r0
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	e003      	b.n	8008e50 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e48:	230f      	movs	r3, #15
 8008e4a:	18fb      	adds	r3, r7, r3
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008e50:	230f      	movs	r3, #15
 8008e52:	18fb      	adds	r3, r7, r3
 8008e54:	781b      	ldrb	r3, [r3, #0]
}
 8008e56:	0018      	movs	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	b004      	add	sp, #16
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f001 fd0b 	bl	800a884 <USBD_LL_Start>

  return USBD_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b002      	add	sp, #8
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	0018      	movs	r0, r3
 8008e84:	46bd      	mov	sp, r7
 8008e86:	b002      	add	sp, #8
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e8a:	b590      	push	{r4, r7, lr}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	000a      	movs	r2, r1
 8008e94:	1cfb      	adds	r3, r7, #3
 8008e96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e98:	240f      	movs	r4, #15
 8008e9a:	193b      	adds	r3, r7, r4
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	23ad      	movs	r3, #173	; 0xad
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	58d3      	ldr	r3, [r2, r3]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00e      	beq.n	8008eca <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	23ad      	movs	r3, #173	; 0xad
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	58d3      	ldr	r3, [r2, r3]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	1cfa      	adds	r2, r7, #3
 8008eb8:	7811      	ldrb	r1, [r2, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	0010      	movs	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	1e03      	subs	r3, r0, #0
 8008ec2:	d102      	bne.n	8008eca <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8008ec4:	193b      	adds	r3, r7, r4
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8008eca:	230f      	movs	r3, #15
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	781b      	ldrb	r3, [r3, #0]
}
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	b005      	add	sp, #20
 8008ed6:	bd90      	pop	{r4, r7, pc}

08008ed8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	000a      	movs	r2, r1
 8008ee2:	1cfb      	adds	r3, r7, #3
 8008ee4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	23ad      	movs	r3, #173	; 0xad
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	58d3      	ldr	r3, [r2, r3]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	1cfa      	adds	r2, r7, #3
 8008ef2:	7811      	ldrb	r1, [r2, #0]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	0010      	movs	r0, r2
 8008ef8:	4798      	blx	r3

  return USBD_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	0018      	movs	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b002      	add	sp, #8
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	22aa      	movs	r2, #170	; 0xaa
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	4694      	mov	ip, r2
 8008f16:	4463      	add	r3, ip
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f001 f810 	bl	8009f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	23a5      	movs	r3, #165	; 0xa5
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	2101      	movs	r1, #1
 8008f2a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a23      	ldr	r2, [pc, #140]	; (8008fbc <USBD_LL_SetupStage+0xb8>)
 8008f30:	5a9b      	ldrh	r3, [r3, r2]
 8008f32:	0019      	movs	r1, r3
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	23a6      	movs	r3, #166	; 0xa6
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	23aa      	movs	r3, #170	; 0xaa
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	5cd3      	ldrb	r3, [r2, r3]
 8008f44:	001a      	movs	r2, r3
 8008f46:	231f      	movs	r3, #31
 8008f48:	4013      	ands	r3, r2
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d019      	beq.n	8008f82 <USBD_LL_SetupStage+0x7e>
 8008f4e:	d822      	bhi.n	8008f96 <USBD_LL_SetupStage+0x92>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <USBD_LL_SetupStage+0x56>
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d00a      	beq.n	8008f6e <USBD_LL_SetupStage+0x6a>
 8008f58:	e01d      	b.n	8008f96 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	22aa      	movs	r2, #170	; 0xaa
 8008f5e:	0092      	lsls	r2, r2, #2
 8008f60:	189a      	adds	r2, r3, r2
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	0011      	movs	r1, r2
 8008f66:	0018      	movs	r0, r3
 8008f68:	f000 fa10 	bl	800938c <USBD_StdDevReq>
      break;
 8008f6c:	e020      	b.n	8008fb0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	22aa      	movs	r2, #170	; 0xaa
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	189a      	adds	r2, r3, r2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	0011      	movs	r1, r2
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f000 fa78 	bl	8009470 <USBD_StdItfReq>
      break;
 8008f80:	e016      	b.n	8008fb0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	22aa      	movs	r2, #170	; 0xaa
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	189a      	adds	r2, r3, r2
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	0011      	movs	r1, r2
 8008f8e:	0018      	movs	r0, r3
 8008f90:	f000 fac5 	bl	800951e <USBD_StdEPReq>
      break;
 8008f94:	e00c      	b.n	8008fb0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	23aa      	movs	r3, #170	; 0xaa
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	5cd3      	ldrb	r3, [r2, r3]
 8008f9e:	227f      	movs	r2, #127	; 0x7f
 8008fa0:	4393      	bics	r3, r2
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f001 fcf2 	bl	800a992 <USBD_LL_StallEP>
      break;
 8008fae:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b002      	add	sp, #8
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	000002ae 	.word	0x000002ae

08008fc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	200b      	movs	r0, #11
 8008fcc:	183b      	adds	r3, r7, r0
 8008fce:	1c0a      	adds	r2, r1, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fd2:	183b      	adds	r3, r7, r0
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d154      	bne.n	8009084 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3355      	adds	r3, #85	; 0x55
 8008fde:	33ff      	adds	r3, #255	; 0xff
 8008fe0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	23a5      	movs	r3, #165	; 0xa5
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	58d3      	ldr	r3, [r2, r3]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d139      	bne.n	8009062 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d919      	bls.n	800902e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009010:	429a      	cmp	r2, r3
 8009012:	d203      	bcs.n	800901c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009018:	b29b      	uxth	r3, r3
 800901a:	e002      	b.n	8009022 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009020:	b29b      	uxth	r3, r3
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	001a      	movs	r2, r3
 8009028:	f001 f89b 	bl	800a162 <USBD_CtlContinueRx>
 800902c:	e045      	b.n	80090ba <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	23ad      	movs	r3, #173	; 0xad
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	58d3      	ldr	r3, [r2, r3]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	23a7      	movs	r3, #167	; 0xa7
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009044:	2b03      	cmp	r3, #3
 8009046:	d107      	bne.n	8009058 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	23ad      	movs	r3, #173	; 0xad
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	58d3      	ldr	r3, [r2, r3]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	0010      	movs	r0, r2
 8009056:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	0018      	movs	r0, r3
 800905c:	f001 f894 	bl	800a188 <USBD_CtlSendStatus>
 8009060:	e02b      	b.n	80090ba <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	23a5      	movs	r3, #165	; 0xa5
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	58d3      	ldr	r3, [r2, r3]
 800906a:	2b05      	cmp	r3, #5
 800906c:	d125      	bne.n	80090ba <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	23a5      	movs	r3, #165	; 0xa5
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	2100      	movs	r1, #0
 8009076:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2100      	movs	r1, #0
 800907c:	0018      	movs	r0, r3
 800907e:	f001 fc88 	bl	800a992 <USBD_LL_StallEP>
 8009082:	e01a      	b.n	80090ba <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	23ad      	movs	r3, #173	; 0xad
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	58d3      	ldr	r3, [r2, r3]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d011      	beq.n	80090b6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	23a7      	movs	r3, #167	; 0xa7
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800909a:	2b03      	cmp	r3, #3
 800909c:	d10b      	bne.n	80090b6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	23ad      	movs	r3, #173	; 0xad
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	58d3      	ldr	r3, [r2, r3]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	220b      	movs	r2, #11
 80090aa:	18ba      	adds	r2, r7, r2
 80090ac:	7811      	ldrb	r1, [r2, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	0010      	movs	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	e001      	b.n	80090ba <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	e000      	b.n	80090bc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	0018      	movs	r0, r3
 80090be:	46bd      	mov	sp, r7
 80090c0:	b006      	add	sp, #24
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	200b      	movs	r0, #11
 80090d0:	183b      	adds	r3, r7, r0
 80090d2:	1c0a      	adds	r2, r1, #0
 80090d4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090d6:	183b      	adds	r3, r7, r0
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d000      	beq.n	80090e0 <USBD_LL_DataInStage+0x1c>
 80090de:	e08e      	b.n	80091fe <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3314      	adds	r3, #20
 80090e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	23a5      	movs	r3, #165	; 0xa5
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	58d3      	ldr	r3, [r2, r3]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d164      	bne.n	80091bc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d915      	bls.n	800912a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	b29a      	uxth	r2, r3
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	0018      	movs	r0, r3
 8009118:	f000 ffec 	bl	800a0f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	f001 fd1e 	bl	800ab64 <USBD_LL_PrepareReceive>
 8009128:	e059      	b.n	80091de <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	0019      	movs	r1, r3
 8009134:	0010      	movs	r0, r2
 8009136:	f7f7 f87f 	bl	8000238 <__aeabi_uidivmod>
 800913a:	1e0b      	subs	r3, r1, #0
 800913c:	d11f      	bne.n	800917e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009146:	429a      	cmp	r2, r3
 8009148:	d319      	bcc.n	800917e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	23a6      	movs	r3, #166	; 0xa6
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009156:	429a      	cmp	r2, r3
 8009158:	d211      	bcs.n	800917e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	2100      	movs	r1, #0
 8009160:	0018      	movs	r0, r3
 8009162:	f000 ffc7 	bl	800a0f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	23a6      	movs	r3, #166	; 0xa6
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	2100      	movs	r1, #0
 800916e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	f001 fcf4 	bl	800ab64 <USBD_LL_PrepareReceive>
 800917c:	e02f      	b.n	80091de <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	23ad      	movs	r3, #173	; 0xad
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	58d3      	ldr	r3, [r2, r3]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00d      	beq.n	80091a8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	23a7      	movs	r3, #167	; 0xa7
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009194:	2b03      	cmp	r3, #3
 8009196:	d107      	bne.n	80091a8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	23ad      	movs	r3, #173	; 0xad
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	58d3      	ldr	r3, [r2, r3]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	0010      	movs	r0, r2
 80091a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2180      	movs	r1, #128	; 0x80
 80091ac:	0018      	movs	r0, r3
 80091ae:	f001 fbf0 	bl	800a992 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 fffb 	bl	800a1b0 <USBD_CtlReceiveStatus>
 80091ba:	e010      	b.n	80091de <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	23a5      	movs	r3, #165	; 0xa5
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	58d3      	ldr	r3, [r2, r3]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d005      	beq.n	80091d4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	23a5      	movs	r3, #165	; 0xa5
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	0018      	movs	r0, r3
 80091da:	f001 fbda 	bl	800a992 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	23a8      	movs	r3, #168	; 0xa8
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	5cd3      	ldrb	r3, [r2, r3]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d124      	bne.n	8009234 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	0018      	movs	r0, r3
 80091ee:	f7ff fe43 	bl	8008e78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	23a8      	movs	r3, #168	; 0xa8
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	2100      	movs	r1, #0
 80091fa:	54d1      	strb	r1, [r2, r3]
 80091fc:	e01a      	b.n	8009234 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	23ad      	movs	r3, #173	; 0xad
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	58d3      	ldr	r3, [r2, r3]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d011      	beq.n	8009230 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	23a7      	movs	r3, #167	; 0xa7
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009214:	2b03      	cmp	r3, #3
 8009216:	d10b      	bne.n	8009230 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	23ad      	movs	r3, #173	; 0xad
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	58d3      	ldr	r3, [r2, r3]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	220b      	movs	r2, #11
 8009224:	18ba      	adds	r2, r7, r2
 8009226:	7811      	ldrb	r1, [r2, #0]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	0010      	movs	r0, r2
 800922c:	4798      	blx	r3
 800922e:	e001      	b.n	8009234 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009230:	2302      	movs	r3, #2
 8009232:	e000      	b.n	8009236 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	0018      	movs	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	b006      	add	sp, #24
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	2200      	movs	r2, #0
 800924c:	2100      	movs	r1, #0
 800924e:	f001 fb3e 	bl	800a8ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	23ac      	movs	r3, #172	; 0xac
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	2101      	movs	r1, #1
 800925a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	23b2      	movs	r3, #178	; 0xb2
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	2140      	movs	r1, #64	; 0x40
 8009264:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	2340      	movs	r3, #64	; 0x40
 800926a:	2200      	movs	r2, #0
 800926c:	2180      	movs	r1, #128	; 0x80
 800926e:	f001 fb2e 	bl	800a8ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2240      	movs	r2, #64	; 0x40
 800927c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	23a7      	movs	r3, #167	; 0xa7
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	2101      	movs	r1, #1
 8009286:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	23a5      	movs	r3, #165	; 0xa5
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	2100      	movs	r1, #0
 8009290:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	23a9      	movs	r3, #169	; 0xa9
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	2100      	movs	r1, #0
 80092a0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	23ae      	movs	r3, #174	; 0xae
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	58d3      	ldr	r3, [r2, r3]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	23ad      	movs	r3, #173	; 0xad
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	58d3      	ldr	r3, [r2, r3]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	b2d9      	uxtb	r1, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	0018      	movs	r0, r3
 80092c2:	4790      	blx	r2
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	0018      	movs	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	b002      	add	sp, #8
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	000a      	movs	r2, r1
 80092d8:	1cfb      	adds	r3, r7, #3
 80092da:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1cfa      	adds	r2, r7, #3
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b002      	add	sp, #8
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	23a7      	movs	r3, #167	; 0xa7
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	5cd1      	ldrb	r1, [r2, r3]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a06      	ldr	r2, [pc, #24]	; (800931c <USBD_LL_Suspend+0x2c>)
 8009304:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	23a7      	movs	r3, #167	; 0xa7
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	2104      	movs	r1, #4
 800930e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	b002      	add	sp, #8
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	0000029d 	.word	0x0000029d

08009320 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	23a7      	movs	r3, #167	; 0xa7
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	5cd3      	ldrb	r3, [r2, r3]
 8009330:	2b04      	cmp	r3, #4
 8009332:	d106      	bne.n	8009342 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a05      	ldr	r2, [pc, #20]	; (800934c <USBD_LL_Resume+0x2c>)
 8009338:	5c99      	ldrb	r1, [r3, r2]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	23a7      	movs	r3, #167	; 0xa7
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	0018      	movs	r0, r3
 8009346:	46bd      	mov	sp, r7
 8009348:	b002      	add	sp, #8
 800934a:	bd80      	pop	{r7, pc}
 800934c:	0000029d 	.word	0x0000029d

08009350 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	23a7      	movs	r3, #167	; 0xa7
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	5cd3      	ldrb	r3, [r2, r3]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d10e      	bne.n	8009382 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	23ad      	movs	r3, #173	; 0xad
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	58d3      	ldr	r3, [r2, r3]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	23ad      	movs	r3, #173	; 0xad
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	58d3      	ldr	r3, [r2, r3]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	0010      	movs	r0, r2
 8009380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	b002      	add	sp, #8
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009396:	230f      	movs	r3, #15
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	001a      	movs	r2, r3
 80093a4:	2360      	movs	r3, #96	; 0x60
 80093a6:	4013      	ands	r3, r2
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d004      	beq.n	80093b6 <USBD_StdDevReq+0x2a>
 80093ac:	d84f      	bhi.n	800944e <USBD_StdDevReq+0xc2>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00b      	beq.n	80093ca <USBD_StdDevReq+0x3e>
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d14b      	bne.n	800944e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	23ad      	movs	r3, #173	; 0xad
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	58d3      	ldr	r3, [r2, r3]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	0010      	movs	r0, r2
 80093c6:	4798      	blx	r3
      break;
 80093c8:	e048      	b.n	800945c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d835      	bhi.n	800943e <USBD_StdDevReq+0xb2>
 80093d2:	009a      	lsls	r2, r3, #2
 80093d4:	4b25      	ldr	r3, [pc, #148]	; (800946c <USBD_StdDevReq+0xe0>)
 80093d6:	18d3      	adds	r3, r2, r3
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	0011      	movs	r1, r2
 80093e2:	0018      	movs	r0, r3
 80093e4:	f000 fa52 	bl	800988c <USBD_GetDescriptor>
          break;
 80093e8:	e030      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	0011      	movs	r1, r2
 80093f0:	0018      	movs	r0, r3
 80093f2:	f000 fbfd 	bl	8009bf0 <USBD_SetAddress>
          break;
 80093f6:	e029      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	0011      	movs	r1, r2
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 fc4a 	bl	8009c98 <USBD_SetConfig>
          break;
 8009404:	e022      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	0011      	movs	r1, r2
 800940c:	0018      	movs	r0, r3
 800940e:	f000 fce7 	bl	8009de0 <USBD_GetConfig>
          break;
 8009412:	e01b      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	0011      	movs	r1, r2
 800941a:	0018      	movs	r0, r3
 800941c:	f000 fd1b 	bl	8009e56 <USBD_GetStatus>
          break;
 8009420:	e014      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	0011      	movs	r1, r2
 8009428:	0018      	movs	r0, r3
 800942a:	f000 fd4e 	bl	8009eca <USBD_SetFeature>
          break;
 800942e:	e00d      	b.n	800944c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	0011      	movs	r1, r2
 8009436:	0018      	movs	r0, r3
 8009438:	f000 fd5d 	bl	8009ef6 <USBD_ClrFeature>
          break;
 800943c:	e006      	b.n	800944c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	0011      	movs	r1, r2
 8009444:	0018      	movs	r0, r3
 8009446:	f000 fdb7 	bl	8009fb8 <USBD_CtlError>
          break;
 800944a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800944c:	e006      	b.n	800945c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	0011      	movs	r1, r2
 8009454:	0018      	movs	r0, r3
 8009456:	f000 fdaf 	bl	8009fb8 <USBD_CtlError>
      break;
 800945a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800945c:	230f      	movs	r3, #15
 800945e:	18fb      	adds	r3, r7, r3
 8009460:	781b      	ldrb	r3, [r3, #0]
}
 8009462:	0018      	movs	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	b004      	add	sp, #16
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	0800b670 	.word	0x0800b670

08009470 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009470:	b5b0      	push	{r4, r5, r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	230f      	movs	r3, #15
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	001a      	movs	r2, r3
 8009488:	2360      	movs	r3, #96	; 0x60
 800948a:	4013      	ands	r3, r2
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d004      	beq.n	800949a <USBD_StdItfReq+0x2a>
 8009490:	d839      	bhi.n	8009506 <USBD_StdItfReq+0x96>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <USBD_StdItfReq+0x2a>
 8009496:	2b20      	cmp	r3, #32
 8009498:	d135      	bne.n	8009506 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	23a7      	movs	r3, #167	; 0xa7
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	5cd3      	ldrb	r3, [r2, r3]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d825      	bhi.n	80094f4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	889b      	ldrh	r3, [r3, #4]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d819      	bhi.n	80094e6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	23ad      	movs	r3, #173	; 0xad
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	58d3      	ldr	r3, [r2, r3]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	250f      	movs	r5, #15
 80094be:	197c      	adds	r4, r7, r5
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	0010      	movs	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	0003      	movs	r3, r0
 80094ca:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	88db      	ldrh	r3, [r3, #6]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d116      	bne.n	8009502 <USBD_StdItfReq+0x92>
 80094d4:	197b      	adds	r3, r7, r5
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d112      	bne.n	8009502 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	0018      	movs	r0, r3
 80094e0:	f000 fe52 	bl	800a188 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094e4:	e00d      	b.n	8009502 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	0011      	movs	r1, r2
 80094ec:	0018      	movs	r0, r3
 80094ee:	f000 fd63 	bl	8009fb8 <USBD_CtlError>
          break;
 80094f2:	e006      	b.n	8009502 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	0011      	movs	r1, r2
 80094fa:	0018      	movs	r0, r3
 80094fc:	f000 fd5c 	bl	8009fb8 <USBD_CtlError>
          break;
 8009500:	e000      	b.n	8009504 <USBD_StdItfReq+0x94>
          break;
 8009502:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009504:	e006      	b.n	8009514 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	0011      	movs	r1, r2
 800950c:	0018      	movs	r0, r3
 800950e:	f000 fd53 	bl	8009fb8 <USBD_CtlError>
      break;
 8009512:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	0018      	movs	r0, r3
 8009518:	46bd      	mov	sp, r7
 800951a:	b004      	add	sp, #16
 800951c:	bdb0      	pop	{r4, r5, r7, pc}

0800951e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800951e:	b5b0      	push	{r4, r5, r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009528:	230f      	movs	r3, #15
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	889a      	ldrh	r2, [r3, #4]
 8009534:	230e      	movs	r3, #14
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	001a      	movs	r2, r3
 8009540:	2360      	movs	r3, #96	; 0x60
 8009542:	4013      	ands	r3, r2
 8009544:	2b40      	cmp	r3, #64	; 0x40
 8009546:	d006      	beq.n	8009556 <USBD_StdEPReq+0x38>
 8009548:	d900      	bls.n	800954c <USBD_StdEPReq+0x2e>
 800954a:	e190      	b.n	800986e <USBD_StdEPReq+0x350>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <USBD_StdEPReq+0x4c>
 8009550:	2b20      	cmp	r3, #32
 8009552:	d000      	beq.n	8009556 <USBD_StdEPReq+0x38>
 8009554:	e18b      	b.n	800986e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	23ad      	movs	r3, #173	; 0xad
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	58d3      	ldr	r3, [r2, r3]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	0010      	movs	r0, r2
 8009566:	4798      	blx	r3
      break;
 8009568:	e188      	b.n	800987c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	001a      	movs	r2, r3
 8009570:	2360      	movs	r3, #96	; 0x60
 8009572:	4013      	ands	r3, r2
 8009574:	2b20      	cmp	r3, #32
 8009576:	d10f      	bne.n	8009598 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	23ad      	movs	r3, #173	; 0xad
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	58d3      	ldr	r3, [r2, r3]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	250f      	movs	r5, #15
 8009584:	197c      	adds	r4, r7, r5
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	0010      	movs	r0, r2
 800958c:	4798      	blx	r3
 800958e:	0003      	movs	r3, r0
 8009590:	7023      	strb	r3, [r4, #0]

        return ret;
 8009592:	197b      	adds	r3, r7, r5
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	e174      	b.n	8009882 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b03      	cmp	r3, #3
 800959e:	d007      	beq.n	80095b0 <USBD_StdEPReq+0x92>
 80095a0:	dd00      	ble.n	80095a4 <USBD_StdEPReq+0x86>
 80095a2:	e15c      	b.n	800985e <USBD_StdEPReq+0x340>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d100      	bne.n	80095aa <USBD_StdEPReq+0x8c>
 80095a8:	e092      	b.n	80096d0 <USBD_StdEPReq+0x1b2>
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d04b      	beq.n	8009646 <USBD_StdEPReq+0x128>
 80095ae:	e156      	b.n	800985e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	23a7      	movs	r3, #167	; 0xa7
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	5cd3      	ldrb	r3, [r2, r3]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d002      	beq.n	80095c2 <USBD_StdEPReq+0xa4>
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d01d      	beq.n	80095fc <USBD_StdEPReq+0xde>
 80095c0:	e039      	b.n	8009636 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095c2:	220e      	movs	r2, #14
 80095c4:	18bb      	adds	r3, r7, r2
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d010      	beq.n	80095ee <USBD_StdEPReq+0xd0>
 80095cc:	18bb      	adds	r3, r7, r2
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d00c      	beq.n	80095ee <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095d4:	18bb      	adds	r3, r7, r2
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0011      	movs	r1, r2
 80095dc:	0018      	movs	r0, r3
 80095de:	f001 f9d8 	bl	800a992 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2180      	movs	r1, #128	; 0x80
 80095e6:	0018      	movs	r0, r3
 80095e8:	f001 f9d3 	bl	800a992 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095ec:	e02a      	b.n	8009644 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	0011      	movs	r1, r2
 80095f4:	0018      	movs	r0, r3
 80095f6:	f000 fcdf 	bl	8009fb8 <USBD_CtlError>
              break;
 80095fa:	e023      	b.n	8009644 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	885b      	ldrh	r3, [r3, #2]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d113      	bne.n	800962c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009604:	220e      	movs	r2, #14
 8009606:	18bb      	adds	r3, r7, r2
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <USBD_StdEPReq+0x10e>
 800960e:	18bb      	adds	r3, r7, r2
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b80      	cmp	r3, #128	; 0x80
 8009614:	d00a      	beq.n	800962c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	88db      	ldrh	r3, [r3, #6]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800961e:	18bb      	adds	r3, r7, r2
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	0011      	movs	r1, r2
 8009626:	0018      	movs	r0, r3
 8009628:	f001 f9b3 	bl	800a992 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	0018      	movs	r0, r3
 8009630:	f000 fdaa 	bl	800a188 <USBD_CtlSendStatus>

              break;
 8009634:	e006      	b.n	8009644 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	0011      	movs	r1, r2
 800963c:	0018      	movs	r0, r3
 800963e:	f000 fcbb 	bl	8009fb8 <USBD_CtlError>
              break;
 8009642:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009644:	e112      	b.n	800986c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	23a7      	movs	r3, #167	; 0xa7
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	5cd3      	ldrb	r3, [r2, r3]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d002      	beq.n	8009658 <USBD_StdEPReq+0x13a>
 8009652:	2b03      	cmp	r3, #3
 8009654:	d01d      	beq.n	8009692 <USBD_StdEPReq+0x174>
 8009656:	e032      	b.n	80096be <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009658:	220e      	movs	r2, #14
 800965a:	18bb      	adds	r3, r7, r2
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d010      	beq.n	8009684 <USBD_StdEPReq+0x166>
 8009662:	18bb      	adds	r3, r7, r2
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b80      	cmp	r3, #128	; 0x80
 8009668:	d00c      	beq.n	8009684 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800966a:	18bb      	adds	r3, r7, r2
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	0011      	movs	r1, r2
 8009672:	0018      	movs	r0, r3
 8009674:	f001 f98d 	bl	800a992 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2180      	movs	r1, #128	; 0x80
 800967c:	0018      	movs	r0, r3
 800967e:	f001 f988 	bl	800a992 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009682:	e024      	b.n	80096ce <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f000 fc94 	bl	8009fb8 <USBD_CtlError>
              break;
 8009690:	e01d      	b.n	80096ce <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d118      	bne.n	80096cc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800969a:	210e      	movs	r1, #14
 800969c:	187b      	adds	r3, r7, r1
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	227f      	movs	r2, #127	; 0x7f
 80096a2:	4013      	ands	r3, r2
 80096a4:	d006      	beq.n	80096b4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	0011      	movs	r1, r2
 80096ae:	0018      	movs	r0, r3
 80096b0:	f001 f99a 	bl	800a9e8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	0018      	movs	r0, r3
 80096b8:	f000 fd66 	bl	800a188 <USBD_CtlSendStatus>
              }
              break;
 80096bc:	e006      	b.n	80096cc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0011      	movs	r1, r2
 80096c4:	0018      	movs	r0, r3
 80096c6:	f000 fc77 	bl	8009fb8 <USBD_CtlError>
              break;
 80096ca:	e000      	b.n	80096ce <USBD_StdEPReq+0x1b0>
              break;
 80096cc:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80096ce:	e0cd      	b.n	800986c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	23a7      	movs	r3, #167	; 0xa7
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	5cd3      	ldrb	r3, [r2, r3]
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d002      	beq.n	80096e2 <USBD_StdEPReq+0x1c4>
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d03c      	beq.n	800975a <USBD_StdEPReq+0x23c>
 80096e0:	e0b5      	b.n	800984e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096e2:	220e      	movs	r2, #14
 80096e4:	18bb      	adds	r3, r7, r2
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00a      	beq.n	8009702 <USBD_StdEPReq+0x1e4>
 80096ec:	18bb      	adds	r3, r7, r2
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b80      	cmp	r3, #128	; 0x80
 80096f2:	d006      	beq.n	8009702 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	0011      	movs	r1, r2
 80096fa:	0018      	movs	r0, r3
 80096fc:	f000 fc5c 	bl	8009fb8 <USBD_CtlError>
                break;
 8009700:	e0ac      	b.n	800985c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009702:	220e      	movs	r2, #14
 8009704:	18bb      	adds	r3, r7, r2
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b25b      	sxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	da0c      	bge.n	8009728 <USBD_StdEPReq+0x20a>
 800970e:	18bb      	adds	r3, r7, r2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	227f      	movs	r2, #127	; 0x7f
 8009714:	401a      	ands	r2, r3
 8009716:	0013      	movs	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	189b      	adds	r3, r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	3310      	adds	r3, #16
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	18d3      	adds	r3, r2, r3
 8009724:	3304      	adds	r3, #4
 8009726:	e00d      	b.n	8009744 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009728:	230e      	movs	r3, #14
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	227f      	movs	r2, #127	; 0x7f
 8009730:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009732:	0013      	movs	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	189b      	adds	r3, r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	3351      	adds	r3, #81	; 0x51
 800973c:	33ff      	adds	r3, #255	; 0xff
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	18d3      	adds	r3, r2, r3
 8009742:	3304      	adds	r3, #4
 8009744:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	0018      	movs	r0, r3
 8009754:	f000 fcae 	bl	800a0b4 <USBD_CtlSendData>
              break;
 8009758:	e080      	b.n	800985c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800975a:	220e      	movs	r2, #14
 800975c:	18bb      	adds	r3, r7, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b25b      	sxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	da14      	bge.n	8009790 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009766:	18bb      	adds	r3, r7, r2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	220f      	movs	r2, #15
 800976c:	401a      	ands	r2, r3
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	0013      	movs	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	189b      	adds	r3, r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	18cb      	adds	r3, r1, r3
 800977a:	3318      	adds	r3, #24
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11e      	bne.n	80097c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	0011      	movs	r1, r2
 8009788:	0018      	movs	r0, r3
 800978a:	f000 fc15 	bl	8009fb8 <USBD_CtlError>
                  break;
 800978e:	e065      	b.n	800985c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009790:	230e      	movs	r3, #14
 8009792:	18fb      	adds	r3, r7, r3
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	220f      	movs	r2, #15
 8009798:	401a      	ands	r2, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	23ac      	movs	r3, #172	; 0xac
 800979e:	0059      	lsls	r1, r3, #1
 80097a0:	0013      	movs	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	18c3      	adds	r3, r0, r3
 80097aa:	185b      	adds	r3, r3, r1
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0011      	movs	r1, r2
 80097b8:	0018      	movs	r0, r3
 80097ba:	f000 fbfd 	bl	8009fb8 <USBD_CtlError>
                  break;
 80097be:	e04d      	b.n	800985c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097c0:	220e      	movs	r2, #14
 80097c2:	18bb      	adds	r3, r7, r2
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da0c      	bge.n	80097e6 <USBD_StdEPReq+0x2c8>
 80097cc:	18bb      	adds	r3, r7, r2
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	227f      	movs	r2, #127	; 0x7f
 80097d2:	401a      	ands	r2, r3
 80097d4:	0013      	movs	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	189b      	adds	r3, r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	3310      	adds	r3, #16
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	3304      	adds	r3, #4
 80097e4:	e00d      	b.n	8009802 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097e6:	230e      	movs	r3, #14
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	227f      	movs	r2, #127	; 0x7f
 80097ee:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f0:	0013      	movs	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	189b      	adds	r3, r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	3351      	adds	r3, #81	; 0x51
 80097fa:	33ff      	adds	r3, #255	; 0xff
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	18d3      	adds	r3, r2, r3
 8009800:	3304      	adds	r3, #4
 8009802:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009804:	220e      	movs	r2, #14
 8009806:	18bb      	adds	r3, r7, r2
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <USBD_StdEPReq+0x2f8>
 800980e:	18bb      	adds	r3, r7, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b80      	cmp	r3, #128	; 0x80
 8009814:	d103      	bne.n	800981e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e010      	b.n	8009840 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800981e:	230e      	movs	r3, #14
 8009820:	18fb      	adds	r3, r7, r3
 8009822:	781a      	ldrb	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	0011      	movs	r1, r2
 8009828:	0018      	movs	r0, r3
 800982a:	f001 f908 	bl	800aa3e <USBD_LL_IsStallEP>
 800982e:	1e03      	subs	r3, r0, #0
 8009830:	d003      	beq.n	800983a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2201      	movs	r2, #1
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	e002      	b.n	8009840 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	0018      	movs	r0, r3
 8009848:	f000 fc34 	bl	800a0b4 <USBD_CtlSendData>
              break;
 800984c:	e006      	b.n	800985c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	0011      	movs	r1, r2
 8009854:	0018      	movs	r0, r3
 8009856:	f000 fbaf 	bl	8009fb8 <USBD_CtlError>
              break;
 800985a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800985c:	e006      	b.n	800986c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	0011      	movs	r1, r2
 8009864:	0018      	movs	r0, r3
 8009866:	f000 fba7 	bl	8009fb8 <USBD_CtlError>
          break;
 800986a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800986c:	e006      	b.n	800987c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	0011      	movs	r1, r2
 8009874:	0018      	movs	r0, r3
 8009876:	f000 fb9f 	bl	8009fb8 <USBD_CtlError>
      break;
 800987a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800987c:	230f      	movs	r3, #15
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	781b      	ldrb	r3, [r3, #0]
}
 8009882:	0018      	movs	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	b004      	add	sp, #16
 8009888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800988c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009896:	2308      	movs	r3, #8
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	2200      	movs	r2, #0
 800989c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098a2:	230b      	movs	r3, #11
 80098a4:	18fb      	adds	r3, r7, r3
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b07      	cmp	r3, #7
 80098b4:	d900      	bls.n	80098b8 <USBD_GetDescriptor+0x2c>
 80098b6:	e159      	b.n	8009b6c <USBD_GetDescriptor+0x2e0>
 80098b8:	009a      	lsls	r2, r3, #2
 80098ba:	4bcb      	ldr	r3, [pc, #812]	; (8009be8 <USBD_GetDescriptor+0x35c>)
 80098bc:	18d3      	adds	r3, r2, r3
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	23ac      	movs	r3, #172	; 0xac
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	58d3      	ldr	r3, [r2, r3]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	7c12      	ldrb	r2, [r2, #16]
 80098d0:	2108      	movs	r1, #8
 80098d2:	1879      	adds	r1, r7, r1
 80098d4:	0010      	movs	r0, r2
 80098d6:	4798      	blx	r3
 80098d8:	0003      	movs	r3, r0
 80098da:	60fb      	str	r3, [r7, #12]
      break;
 80098dc:	e153      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7c1b      	ldrb	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10f      	bne.n	8009906 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	23ad      	movs	r3, #173	; 0xad
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	58d3      	ldr	r3, [r2, r3]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	2208      	movs	r2, #8
 80098f2:	18ba      	adds	r2, r7, r2
 80098f4:	0010      	movs	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	0003      	movs	r3, r0
 80098fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	2202      	movs	r2, #2
 8009902:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009904:	e13f      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	23ad      	movs	r3, #173	; 0xad
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	58d3      	ldr	r3, [r2, r3]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	2208      	movs	r2, #8
 8009912:	18ba      	adds	r2, r7, r2
 8009914:	0010      	movs	r0, r2
 8009916:	4798      	blx	r3
 8009918:	0003      	movs	r3, r0
 800991a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	2202      	movs	r2, #2
 8009922:	701a      	strb	r2, [r3, #0]
      break;
 8009924:	e12f      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b05      	cmp	r3, #5
 800992e:	d900      	bls.n	8009932 <USBD_GetDescriptor+0xa6>
 8009930:	e0d0      	b.n	8009ad4 <USBD_GetDescriptor+0x248>
 8009932:	009a      	lsls	r2, r3, #2
 8009934:	4bad      	ldr	r3, [pc, #692]	; (8009bec <USBD_GetDescriptor+0x360>)
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	23ac      	movs	r3, #172	; 0xac
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	58d3      	ldr	r3, [r2, r3]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	23ac      	movs	r3, #172	; 0xac
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	58d3      	ldr	r3, [r2, r3]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7c12      	ldrb	r2, [r2, #16]
 8009958:	2108      	movs	r1, #8
 800995a:	1879      	adds	r1, r7, r1
 800995c:	0010      	movs	r0, r2
 800995e:	4798      	blx	r3
 8009960:	0003      	movs	r3, r0
 8009962:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009964:	e0c3      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	0011      	movs	r1, r2
 800996c:	0018      	movs	r0, r3
 800996e:	f000 fb23 	bl	8009fb8 <USBD_CtlError>
            err++;
 8009972:	210b      	movs	r1, #11
 8009974:	187b      	adds	r3, r7, r1
 8009976:	781a      	ldrb	r2, [r3, #0]
 8009978:	187b      	adds	r3, r7, r1
 800997a:	3201      	adds	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
          break;
 800997e:	e0b6      	b.n	8009aee <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	23ac      	movs	r3, #172	; 0xac
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	58d3      	ldr	r3, [r2, r3]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00d      	beq.n	80099aa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	23ac      	movs	r3, #172	; 0xac
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	58d3      	ldr	r3, [r2, r3]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7c12      	ldrb	r2, [r2, #16]
 800999c:	2108      	movs	r1, #8
 800999e:	1879      	adds	r1, r7, r1
 80099a0:	0010      	movs	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	0003      	movs	r3, r0
 80099a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099a8:	e0a1      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	0011      	movs	r1, r2
 80099b0:	0018      	movs	r0, r3
 80099b2:	f000 fb01 	bl	8009fb8 <USBD_CtlError>
            err++;
 80099b6:	210b      	movs	r1, #11
 80099b8:	187b      	adds	r3, r7, r1
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	187b      	adds	r3, r7, r1
 80099be:	3201      	adds	r2, #1
 80099c0:	701a      	strb	r2, [r3, #0]
          break;
 80099c2:	e094      	b.n	8009aee <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	23ac      	movs	r3, #172	; 0xac
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	58d3      	ldr	r3, [r2, r3]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00d      	beq.n	80099ee <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	23ac      	movs	r3, #172	; 0xac
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	58d3      	ldr	r3, [r2, r3]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	2108      	movs	r1, #8
 80099e2:	1879      	adds	r1, r7, r1
 80099e4:	0010      	movs	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	0003      	movs	r3, r0
 80099ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ec:	e07f      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	0011      	movs	r1, r2
 80099f4:	0018      	movs	r0, r3
 80099f6:	f000 fadf 	bl	8009fb8 <USBD_CtlError>
            err++;
 80099fa:	210b      	movs	r1, #11
 80099fc:	187b      	adds	r3, r7, r1
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	187b      	adds	r3, r7, r1
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
          break;
 8009a06:	e072      	b.n	8009aee <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	23ac      	movs	r3, #172	; 0xac
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	58d3      	ldr	r3, [r2, r3]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	23ac      	movs	r3, #172	; 0xac
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	58d3      	ldr	r3, [r2, r3]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7c12      	ldrb	r2, [r2, #16]
 8009a24:	2108      	movs	r1, #8
 8009a26:	1879      	adds	r1, r7, r1
 8009a28:	0010      	movs	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	0003      	movs	r3, r0
 8009a2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a30:	e05d      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0011      	movs	r1, r2
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f000 fabd 	bl	8009fb8 <USBD_CtlError>
            err++;
 8009a3e:	210b      	movs	r1, #11
 8009a40:	187b      	adds	r3, r7, r1
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	3201      	adds	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
          break;
 8009a4a:	e050      	b.n	8009aee <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	23ac      	movs	r3, #172	; 0xac
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	58d3      	ldr	r3, [r2, r3]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	23ac      	movs	r3, #172	; 0xac
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	58d3      	ldr	r3, [r2, r3]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	2108      	movs	r1, #8
 8009a6a:	1879      	adds	r1, r7, r1
 8009a6c:	0010      	movs	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	0003      	movs	r3, r0
 8009a72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a74:	e03b      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f000 fa9b 	bl	8009fb8 <USBD_CtlError>
            err++;
 8009a82:	210b      	movs	r1, #11
 8009a84:	187b      	adds	r3, r7, r1
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	3201      	adds	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
          break;
 8009a8e:	e02e      	b.n	8009aee <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	23ac      	movs	r3, #172	; 0xac
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	58d3      	ldr	r3, [r2, r3]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	23ac      	movs	r3, #172	; 0xac
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	58d3      	ldr	r3, [r2, r3]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	7c12      	ldrb	r2, [r2, #16]
 8009aac:	2108      	movs	r1, #8
 8009aae:	1879      	adds	r1, r7, r1
 8009ab0:	0010      	movs	r0, r2
 8009ab2:	4798      	blx	r3
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab8:	e019      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f000 fa79 	bl	8009fb8 <USBD_CtlError>
            err++;
 8009ac6:	210b      	movs	r1, #11
 8009ac8:	187b      	adds	r3, r7, r1
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	3201      	adds	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
          break;
 8009ad2:	e00c      	b.n	8009aee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	0011      	movs	r1, r2
 8009ada:	0018      	movs	r0, r3
 8009adc:	f000 fa6c 	bl	8009fb8 <USBD_CtlError>
          err++;
 8009ae0:	210b      	movs	r1, #11
 8009ae2:	187b      	adds	r3, r7, r1
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	187b      	adds	r3, r7, r1
 8009ae8:	3201      	adds	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009aec:	e04b      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>
 8009aee:	e04a      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	7c1b      	ldrb	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	23ad      	movs	r3, #173	; 0xad
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	58d3      	ldr	r3, [r2, r3]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	2208      	movs	r2, #8
 8009b04:	18ba      	adds	r2, r7, r2
 8009b06:	0010      	movs	r0, r2
 8009b08:	4798      	blx	r3
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b0e:	e03a      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	0011      	movs	r1, r2
 8009b16:	0018      	movs	r0, r3
 8009b18:	f000 fa4e 	bl	8009fb8 <USBD_CtlError>
        err++;
 8009b1c:	210b      	movs	r1, #11
 8009b1e:	187b      	adds	r3, r7, r1
 8009b20:	781a      	ldrb	r2, [r3, #0]
 8009b22:	187b      	adds	r3, r7, r1
 8009b24:	3201      	adds	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
      break;
 8009b28:	e02d      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7c1b      	ldrb	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10f      	bne.n	8009b52 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	23ad      	movs	r3, #173	; 0xad
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	58d3      	ldr	r3, [r2, r3]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	18ba      	adds	r2, r7, r2
 8009b40:	0010      	movs	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	0003      	movs	r3, r0
 8009b46:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	2207      	movs	r2, #7
 8009b4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b50:	e019      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	0011      	movs	r1, r2
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f000 fa2d 	bl	8009fb8 <USBD_CtlError>
        err++;
 8009b5e:	210b      	movs	r1, #11
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	187b      	adds	r3, r7, r1
 8009b66:	3201      	adds	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
      break;
 8009b6a:	e00c      	b.n	8009b86 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	0011      	movs	r1, r2
 8009b72:	0018      	movs	r0, r3
 8009b74:	f000 fa20 	bl	8009fb8 <USBD_CtlError>
      err++;
 8009b78:	210b      	movs	r1, #11
 8009b7a:	187b      	adds	r3, r7, r1
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	187b      	adds	r3, r7, r1
 8009b80:	3201      	adds	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
      break;
 8009b84:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8009b86:	230b      	movs	r3, #11
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d127      	bne.n	8009be0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b90:	2108      	movs	r1, #8
 8009b92:	187b      	adds	r3, r7, r1
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d019      	beq.n	8009bce <USBD_GetDescriptor+0x342>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	88db      	ldrh	r3, [r3, #6]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d015      	beq.n	8009bce <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88da      	ldrh	r2, [r3, #6]
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	1c18      	adds	r0, r3, #0
 8009bac:	1c11      	adds	r1, r2, #0
 8009bae:	b28a      	uxth	r2, r1
 8009bb0:	b283      	uxth	r3, r0
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d900      	bls.n	8009bb8 <USBD_GetDescriptor+0x32c>
 8009bb6:	1c01      	adds	r1, r0, #0
 8009bb8:	b28a      	uxth	r2, r1
 8009bba:	2108      	movs	r1, #8
 8009bbc:	187b      	adds	r3, r7, r1
 8009bbe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	881a      	ldrh	r2, [r3, #0]
 8009bc4:	68f9      	ldr	r1, [r7, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f000 fa73 	bl	800a0b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d105      	bne.n	8009be2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f000 fad5 	bl	800a188 <USBD_CtlSendStatus>
 8009bde:	e000      	b.n	8009be2 <USBD_GetDescriptor+0x356>
    return;
 8009be0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b004      	add	sp, #16
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	0800b698 	.word	0x0800b698
 8009bec:	0800b6b8 	.word	0x0800b6b8

08009bf0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bf0:	b590      	push	{r4, r7, lr}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d13d      	bne.n	8009c7e <USBD_SetAddress+0x8e>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d139      	bne.n	8009c7e <USBD_SetAddress+0x8e>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c10:	d835      	bhi.n	8009c7e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	230f      	movs	r3, #15
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	217f      	movs	r1, #127	; 0x7f
 8009c1e:	400a      	ands	r2, r1
 8009c20:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	23a7      	movs	r3, #167	; 0xa7
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	5cd3      	ldrb	r3, [r2, r3]
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d106      	bne.n	8009c3c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	0011      	movs	r1, r2
 8009c34:	0018      	movs	r0, r3
 8009c36:	f000 f9bf 	bl	8009fb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	e027      	b.n	8009c8c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	240f      	movs	r4, #15
 8009c40:	193a      	adds	r2, r7, r4
 8009c42:	4914      	ldr	r1, [pc, #80]	; (8009c94 <USBD_SetAddress+0xa4>)
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c48:	193b      	adds	r3, r7, r4
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0011      	movs	r1, r2
 8009c50:	0018      	movs	r0, r3
 8009c52:	f000 ff25 	bl	800aaa0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f000 fa95 	bl	800a188 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c5e:	193b      	adds	r3, r7, r4
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	23a7      	movs	r3, #167	; 0xa7
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	2102      	movs	r1, #2
 8009c6e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c70:	e00c      	b.n	8009c8c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	23a7      	movs	r3, #167	; 0xa7
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	2101      	movs	r1, #1
 8009c7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7c:	e006      	b.n	8009c8c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	0011      	movs	r1, r2
 8009c84:	0018      	movs	r0, r3
 8009c86:	f000 f997 	bl	8009fb8 <USBD_CtlError>
  }
}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	46c0      	nop			; (mov r8, r8)
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	b005      	add	sp, #20
 8009c92:	bd90      	pop	{r4, r7, pc}
 8009c94:	0000029e 	.word	0x0000029e

08009c98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	4b4c      	ldr	r3, [pc, #304]	; (8009ddc <USBD_SetConfig+0x144>)
 8009caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cac:	4b4b      	ldr	r3, [pc, #300]	; (8009ddc <USBD_SetConfig+0x144>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d906      	bls.n	8009cc2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	0011      	movs	r1, r2
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f000 f97c 	bl	8009fb8 <USBD_CtlError>
 8009cc0:	e088      	b.n	8009dd4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	23a7      	movs	r3, #167	; 0xa7
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	5cd3      	ldrb	r3, [r2, r3]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d002      	beq.n	8009cd4 <USBD_SetConfig+0x3c>
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d029      	beq.n	8009d26 <USBD_SetConfig+0x8e>
 8009cd2:	e071      	b.n	8009db8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cd4:	4b41      	ldr	r3, [pc, #260]	; (8009ddc <USBD_SetConfig+0x144>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01f      	beq.n	8009d1c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8009cdc:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <USBD_SetConfig+0x144>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	23a7      	movs	r3, #167	; 0xa7
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	2103      	movs	r1, #3
 8009cee:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009cf0:	4b3a      	ldr	r3, [pc, #232]	; (8009ddc <USBD_SetConfig+0x144>)
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	0011      	movs	r1, r2
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f7ff f8c6 	bl	8008e8a <USBD_SetClassConfig>
 8009cfe:	0003      	movs	r3, r0
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d106      	bne.n	8009d12 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f000 f954 	bl	8009fb8 <USBD_CtlError>
            return;
 8009d10:	e060      	b.n	8009dd4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f000 fa37 	bl	800a188 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d1a:	e05b      	b.n	8009dd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f000 fa32 	bl	800a188 <USBD_CtlSendStatus>
        break;
 8009d24:	e056      	b.n	8009dd4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d26:	4b2d      	ldr	r3, [pc, #180]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d115      	bne.n	8009d5a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	23a7      	movs	r3, #167	; 0xa7
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	2102      	movs	r1, #2
 8009d36:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009d38:	4b28      	ldr	r3, [pc, #160]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	001a      	movs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d42:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	0011      	movs	r1, r2
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	f7ff f8c4 	bl	8008ed8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	0018      	movs	r0, r3
 8009d54:	f000 fa18 	bl	800a188 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d58:	e03c      	b.n	8009dd4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8009d5a:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	001a      	movs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d022      	beq.n	8009dae <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0011      	movs	r1, r2
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7ff f8b0 	bl	8008ed8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d78:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	001a      	movs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d82:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <USBD_SetConfig+0x144>)
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	0011      	movs	r1, r2
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7ff f87d 	bl	8008e8a <USBD_SetClassConfig>
 8009d90:	0003      	movs	r3, r0
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d106      	bne.n	8009da4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	0011      	movs	r1, r2
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f000 f90b 	bl	8009fb8 <USBD_CtlError>
            return;
 8009da2:	e017      	b.n	8009dd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	0018      	movs	r0, r3
 8009da8:	f000 f9ee 	bl	800a188 <USBD_CtlSendStatus>
        break;
 8009dac:	e012      	b.n	8009dd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	0018      	movs	r0, r3
 8009db2:	f000 f9e9 	bl	800a188 <USBD_CtlSendStatus>
        break;
 8009db6:	e00d      	b.n	8009dd4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	0011      	movs	r1, r2
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f000 f8fa 	bl	8009fb8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <USBD_SetConfig+0x144>)
 8009dc6:	781a      	ldrb	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	0011      	movs	r1, r2
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7ff f883 	bl	8008ed8 <USBD_ClrClassConfig>
        break;
 8009dd2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	20000214 	.word	0x20000214

08009de0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d006      	beq.n	8009e00 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	0011      	movs	r1, r2
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f000 f8dd 	bl	8009fb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dfe:	e026      	b.n	8009e4e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	23a7      	movs	r3, #167	; 0xa7
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	5cd3      	ldrb	r3, [r2, r3]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	dc02      	bgt.n	8009e12 <USBD_GetConfig+0x32>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dc03      	bgt.n	8009e18 <USBD_GetConfig+0x38>
 8009e10:	e016      	b.n	8009e40 <USBD_GetConfig+0x60>
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d00c      	beq.n	8009e30 <USBD_GetConfig+0x50>
 8009e16:	e013      	b.n	8009e40 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3308      	adds	r3, #8
 8009e22:	0019      	movs	r1, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f000 f943 	bl	800a0b4 <USBD_CtlSendData>
        break;
 8009e2e:	e00e      	b.n	8009e4e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	1d19      	adds	r1, r3, #4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f000 f93b 	bl	800a0b4 <USBD_CtlSendData>
        break;
 8009e3e:	e006      	b.n	8009e4e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	0011      	movs	r1, r2
 8009e46:	0018      	movs	r0, r3
 8009e48:	f000 f8b6 	bl	8009fb8 <USBD_CtlError>
        break;
 8009e4c:	46c0      	nop			; (mov r8, r8)
}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	23a7      	movs	r3, #167	; 0xa7
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	5cd3      	ldrb	r3, [r2, r3]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d822      	bhi.n	8009eb4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d006      	beq.n	8009e84 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	0011      	movs	r1, r2
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f000 f89b 	bl	8009fb8 <USBD_CtlError>
        break;
 8009e82:	e01e      	b.n	8009ec2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	23a9      	movs	r3, #169	; 0xa9
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	58d3      	ldr	r3, [r2, r3]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	330c      	adds	r3, #12
 8009ea6:	0019      	movs	r1, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	0018      	movs	r0, r3
 8009eae:	f000 f901 	bl	800a0b4 <USBD_CtlSendData>
      break;
 8009eb2:	e006      	b.n	8009ec2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0011      	movs	r1, r2
 8009eba:	0018      	movs	r0, r3
 8009ebc:	f000 f87c 	bl	8009fb8 <USBD_CtlError>
      break;
 8009ec0:	46c0      	nop			; (mov r8, r8)
  }
}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b002      	add	sp, #8
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	885b      	ldrh	r3, [r3, #2]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d108      	bne.n	8009eee <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	23a9      	movs	r3, #169	; 0xa9
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f000 f94d 	bl	800a188 <USBD_CtlSendStatus>
  }
}
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	b002      	add	sp, #8
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	23a7      	movs	r3, #167	; 0xa7
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	5cd3      	ldrb	r3, [r2, r3]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d80d      	bhi.n	8009f2a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d110      	bne.n	8009f38 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	23a9      	movs	r3, #169	; 0xa9
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	0018      	movs	r0, r3
 8009f24:	f000 f930 	bl	800a188 <USBD_CtlSendStatus>
      }
      break;
 8009f28:	e006      	b.n	8009f38 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	0011      	movs	r1, r2
 8009f30:	0018      	movs	r0, r3
 8009f32:	f000 f841 	bl	8009fb8 <USBD_CtlError>
      break;
 8009f36:	e000      	b.n	8009f3a <USBD_ClrFeature+0x44>
      break;
 8009f38:	46c0      	nop			; (mov r8, r8)
  }
}
 8009f3a:	46c0      	nop			; (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b002      	add	sp, #8
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781a      	ldrb	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	785a      	ldrb	r2, [r3, #1]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	3302      	adds	r3, #2
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	3303      	adds	r3, #3
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	18d3      	adds	r3, r2, r3
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	3305      	adds	r3, #5
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	021b      	lsls	r3, r3, #8
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	18d3      	adds	r3, r2, r3
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	3306      	adds	r3, #6
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	3307      	adds	r3, #7
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	021b      	lsls	r3, r3, #8
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	18d3      	adds	r3, r2, r3
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	80da      	strh	r2, [r3, #6]

}
 8009fb0:	46c0      	nop			; (mov r8, r8)
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b002      	add	sp, #8
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2180      	movs	r1, #128	; 0x80
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f000 fce3 	bl	800a992 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2100      	movs	r1, #0
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f000 fcde 	bl	800a992 <USBD_LL_StallEP>
}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	b002      	add	sp, #8
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fde:	b590      	push	{r4, r7, lr}
 8009fe0:	b087      	sub	sp, #28
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fea:	2417      	movs	r4, #23
 8009fec:	193b      	adds	r3, r7, r4
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d03c      	beq.n	800a072 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 f83d 	bl	800a07a <USBD_GetLen>
 800a000:	0003      	movs	r3, r0
 800a002:	3301      	adds	r3, #1
 800a004:	b29b      	uxth	r3, r3
 800a006:	18db      	adds	r3, r3, r3
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a00e:	193b      	adds	r3, r7, r4
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	193a      	adds	r2, r7, r4
 800a014:	1c59      	adds	r1, r3, #1
 800a016:	7011      	strb	r1, [r2, #0]
 800a018:	001a      	movs	r2, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	189b      	adds	r3, r3, r2
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a024:	193b      	adds	r3, r7, r4
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	193a      	adds	r2, r7, r4
 800a02a:	1c59      	adds	r1, r3, #1
 800a02c:	7011      	strb	r1, [r2, #0]
 800a02e:	001a      	movs	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	189b      	adds	r3, r3, r2
 800a034:	2203      	movs	r2, #3
 800a036:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a038:	e017      	b.n	800a06a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	60fa      	str	r2, [r7, #12]
 800a040:	2417      	movs	r4, #23
 800a042:	193a      	adds	r2, r7, r4
 800a044:	7812      	ldrb	r2, [r2, #0]
 800a046:	1939      	adds	r1, r7, r4
 800a048:	1c50      	adds	r0, r2, #1
 800a04a:	7008      	strb	r0, [r1, #0]
 800a04c:	0011      	movs	r1, r2
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	1852      	adds	r2, r2, r1
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a056:	193b      	adds	r3, r7, r4
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	193a      	adds	r2, r7, r4
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	7011      	strb	r1, [r2, #0]
 800a060:	001a      	movs	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	189b      	adds	r3, r3, r2
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e3      	bne.n	800a03a <USBD_GetString+0x5c>
    }
  }
}
 800a072:	46c0      	nop			; (mov r8, r8)
 800a074:	46bd      	mov	sp, r7
 800a076:	b007      	add	sp, #28
 800a078:	bd90      	pop	{r4, r7, pc}

0800a07a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a082:	230f      	movs	r3, #15
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	2200      	movs	r2, #0
 800a088:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a08a:	e008      	b.n	800a09e <USBD_GetLen+0x24>
  {
    len++;
 800a08c:	210f      	movs	r1, #15
 800a08e:	187b      	adds	r3, r7, r1
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	187b      	adds	r3, r7, r1
 800a094:	3201      	adds	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
    buf++;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3301      	adds	r3, #1
 800a09c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f2      	bne.n	800a08c <USBD_GetLen+0x12>
  }

  return len;
 800a0a6:	230f      	movs	r3, #15
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	781b      	ldrb	r3, [r3, #0]
}
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	b004      	add	sp, #16
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	1dbb      	adds	r3, r7, #6
 800a0c0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	23a5      	movs	r3, #165	; 0xa5
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a0cc:	1dbb      	adds	r3, r7, #6
 800a0ce:	881a      	ldrh	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a0d4:	1dbb      	adds	r3, r7, #6
 800a0d6:	881a      	ldrh	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0dc:	1dbb      	adds	r3, r7, #6
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	f000 fd06 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	b004      	add	sp, #16
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	1dbb      	adds	r3, r7, #6
 800a100:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a102:	1dbb      	adds	r3, r7, #6
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	2100      	movs	r1, #0
 800a10c:	f000 fcf3 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	0018      	movs	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	b004      	add	sp, #16
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	1dbb      	adds	r3, r7, #6
 800a126:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	23a5      	movs	r3, #165	; 0xa5
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	2103      	movs	r1, #3
 800a130:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a132:	1dbb      	adds	r3, r7, #6
 800a134:	8819      	ldrh	r1, [r3, #0]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	23ae      	movs	r3, #174	; 0xae
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a13e:	1dbb      	adds	r3, r7, #6
 800a140:	8819      	ldrh	r1, [r3, #0]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	23b0      	movs	r3, #176	; 0xb0
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a14a:	1dbb      	adds	r3, r7, #6
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	2100      	movs	r1, #0
 800a154:	f000 fd06 	bl	800ab64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b004      	add	sp, #16
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	1dbb      	adds	r3, r7, #6
 800a16e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a170:	1dbb      	adds	r3, r7, #6
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	2100      	movs	r1, #0
 800a17a:	f000 fcf3 	bl	800ab64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	0018      	movs	r0, r3
 800a182:	46bd      	mov	sp, r7
 800a184:	b004      	add	sp, #16
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	23a5      	movs	r3, #165	; 0xa5
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	2104      	movs	r1, #4
 800a198:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	2300      	movs	r3, #0
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f000 fca8 	bl	800aaf6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	23a5      	movs	r3, #165	; 0xa5
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	2105      	movs	r1, #5
 800a1c0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	f000 fccb 	bl	800ab64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1dc:	4914      	ldr	r1, [pc, #80]	; (800a230 <MX_USB_DEVICE_Init+0x58>)
 800a1de:	4b15      	ldr	r3, [pc, #84]	; (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f7fe fdea 	bl	8008dbc <USBD_Init>
 800a1e8:	1e03      	subs	r3, r0, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1ec:	f7f6 feee 	bl	8000fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1f0:	4a11      	ldr	r2, [pc, #68]	; (800a238 <MX_USB_DEVICE_Init+0x60>)
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a1f4:	0011      	movs	r1, r2
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f7fe fe11 	bl	8008e1e <USBD_RegisterClass>
 800a1fc:	1e03      	subs	r3, r0, #0
 800a1fe:	d001      	beq.n	800a204 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a200:	f7f6 fee4 	bl	8000fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a204:	4a0d      	ldr	r2, [pc, #52]	; (800a23c <MX_USB_DEVICE_Init+0x64>)
 800a206:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a208:	0011      	movs	r1, r2
 800a20a:	0018      	movs	r0, r3
 800a20c:	f7fe fd26 	bl	8008c5c <USBD_CDC_RegisterInterface>
 800a210:	1e03      	subs	r3, r0, #0
 800a212:	d001      	beq.n	800a218 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a214:	f7f6 feda 	bl	8000fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a218:	4b06      	ldr	r3, [pc, #24]	; (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a21a:	0018      	movs	r0, r3
 800a21c:	f7fe fe1f 	bl	8008e5e <USBD_Start>
 800a220:	1e03      	subs	r3, r0, #0
 800a222:	d001      	beq.n	800a228 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a224:	f7f6 fed2 	bl	8000fcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a228:	46c0      	nop			; (mov r8, r8)
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	2000012c 	.word	0x2000012c
 800a234:	20000618 	.word	0x20000618
 800a238:	20000018 	.word	0x20000018
 800a23c:	2000011c 	.word	0x2000011c

0800a240 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a244:	4907      	ldr	r1, [pc, #28]	; (800a264 <CDC_Init_FS+0x24>)
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <CDC_Init_FS+0x28>)
 800a248:	2200      	movs	r2, #0
 800a24a:	0018      	movs	r0, r3
 800a24c:	f7fe fd21 	bl	8008c92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a250:	4a06      	ldr	r2, [pc, #24]	; (800a26c <CDC_Init_FS+0x2c>)
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <CDC_Init_FS+0x28>)
 800a254:	0011      	movs	r1, r2
 800a256:	0018      	movs	r0, r3
 800a258:	f7fe fd37 	bl	8008cca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a25c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a25e:	0018      	movs	r0, r3
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20000cc4 	.word	0x20000cc4
 800a268:	20000618 	.word	0x20000618
 800a26c:	200008dc 	.word	0x200008dc

0800a270 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a274:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a276:	0018      	movs	r0, r3
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6039      	str	r1, [r7, #0]
 800a284:	0011      	movs	r1, r2
 800a286:	1dfb      	adds	r3, r7, #7
 800a288:	1c02      	adds	r2, r0, #0
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	1d3b      	adds	r3, r7, #4
 800a28e:	1c0a      	adds	r2, r1, #0
 800a290:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a292:	1dfb      	adds	r3, r7, #7
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b23      	cmp	r3, #35	; 0x23
 800a298:	d804      	bhi.n	800a2a4 <CDC_Control_FS+0x28>
 800a29a:	009a      	lsls	r2, r3, #2
 800a29c:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <CDC_Control_FS+0x34>)
 800a29e:	18d3      	adds	r3, r2, r3
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2a4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800a2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	b002      	add	sp, #8
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	0800b6d0 	.word	0x0800b6d0

0800a2b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800a2be:	4b18      	ldr	r3, [pc, #96]	; (800a320 <CDC_Receive_FS+0x6c>)
 800a2c0:	785a      	ldrb	r2, [r3, #1]
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	705a      	strb	r2, [r3, #1]

  for(uint8_t i = 0; i < *Len; i++)
 800a2c8:	230f      	movs	r3, #15
 800a2ca:	18fb      	adds	r3, r7, r3
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	e00f      	b.n	800a2f2 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <CDC_Receive_FS+0x70>)
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	240f      	movs	r4, #15
 800a2d8:	193b      	adds	r3, r7, r4
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	18d3      	adds	r3, r2, r3
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	0019      	movs	r1, r3
 800a2e4:	f7f6 feac 	bl	8001040 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800a2e8:	193b      	adds	r3, r7, r4
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	193b      	adds	r3, r7, r4
 800a2ee:	3201      	adds	r2, #1
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	230f      	movs	r3, #15
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d3e8      	bcc.n	800a2d2 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <CDC_Receive_FS+0x74>)
 800a304:	0011      	movs	r1, r2
 800a306:	0018      	movs	r0, r3
 800a308:	f7fe fcdf 	bl	8008cca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <CDC_Receive_FS+0x74>)
 800a30e:	0018      	movs	r0, r3
 800a310:	f7fe fd26 	bl	8008d60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a316:	0018      	movs	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	b005      	add	sp, #20
 800a31c:	bd90      	pop	{r4, r7, pc}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	2000058c 	.word	0x2000058c
 800a324:	200010ac 	.word	0x200010ac
 800a328:	20000618 	.word	0x20000618

0800a32c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	000a      	movs	r2, r1
 800a336:	1cbb      	adds	r3, r7, #2
 800a338:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a33a:	230f      	movs	r3, #15
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a342:	4a11      	ldr	r2, [pc, #68]	; (800a388 <CDC_Transmit_FS+0x5c>)
 800a344:	23ae      	movs	r3, #174	; 0xae
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	58d3      	ldr	r3, [r2, r3]
 800a34a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	2385      	movs	r3, #133	; 0x85
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a358:	2301      	movs	r3, #1
 800a35a:	e010      	b.n	800a37e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a35c:	1cbb      	adds	r3, r7, #2
 800a35e:	881a      	ldrh	r2, [r3, #0]
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <CDC_Transmit_FS+0x5c>)
 800a364:	0018      	movs	r0, r3
 800a366:	f7fe fc94 	bl	8008c92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a36a:	250f      	movs	r5, #15
 800a36c:	197c      	adds	r4, r7, r5
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <CDC_Transmit_FS+0x5c>)
 800a370:	0018      	movs	r0, r3
 800a372:	f7fe fcbe 	bl	8008cf2 <USBD_CDC_TransmitPacket>
 800a376:	0003      	movs	r3, r0
 800a378:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a37a:	197b      	adds	r3, r7, r5
 800a37c:	781b      	ldrb	r3, [r3, #0]
}
 800a37e:	0018      	movs	r0, r3
 800a380:	46bd      	mov	sp, r7
 800a382:	b004      	add	sp, #16
 800a384:	bdb0      	pop	{r4, r5, r7, pc}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	20000618 	.word	0x20000618

0800a38c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	0002      	movs	r2, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	1dfb      	adds	r3, r7, #7
 800a398:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2212      	movs	r2, #18
 800a39e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	b002      	add	sp, #8
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	20000148 	.word	0x20000148

0800a3b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	0002      	movs	r2, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	1dfb      	adds	r3, r7, #7
 800a3bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b002      	add	sp, #8
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	2000015c 	.word	0x2000015c

0800a3d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	0002      	movs	r2, r0
 800a3dc:	6039      	str	r1, [r7, #0]
 800a3de:	1dfb      	adds	r3, r7, #7
 800a3e0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a3e2:	1dfb      	adds	r3, r7, #7
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4908      	ldr	r1, [pc, #32]	; (800a410 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <USBD_FS_ProductStrDescriptor+0x40>)
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f7ff fdf4 	bl	8009fde <USBD_GetString>
 800a3f6:	e005      	b.n	800a404 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	4905      	ldr	r1, [pc, #20]	; (800a410 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <USBD_FS_ProductStrDescriptor+0x40>)
 800a3fe:	0018      	movs	r0, r3
 800a400:	f7ff fded 	bl	8009fde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a404:	4b02      	ldr	r3, [pc, #8]	; (800a410 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a406:	0018      	movs	r0, r3
 800a408:	46bd      	mov	sp, r7
 800a40a:	b002      	add	sp, #8
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	200010b0 	.word	0x200010b0
 800a414:	0800b610 	.word	0x0800b610

0800a418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	0002      	movs	r2, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	1dfb      	adds	r3, r7, #7
 800a424:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4904      	ldr	r1, [pc, #16]	; (800a43c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a42c:	0018      	movs	r0, r3
 800a42e:	f7ff fdd6 	bl	8009fde <USBD_GetString>
  return USBD_StrDesc;
 800a432:	4b02      	ldr	r3, [pc, #8]	; (800a43c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b002      	add	sp, #8
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200010b0 	.word	0x200010b0
 800a440:	0800b628 	.word	0x0800b628

0800a444 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	0002      	movs	r2, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	1dfb      	adds	r3, r7, #7
 800a450:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	221a      	movs	r2, #26
 800a456:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a458:	f000 f84c 	bl	800a4f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a45e:	0018      	movs	r0, r3
 800a460:	46bd      	mov	sp, r7
 800a462:	b002      	add	sp, #8
 800a464:	bd80      	pop	{r7, pc}
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	20000160 	.word	0x20000160

0800a46c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	0002      	movs	r2, r0
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	1dfb      	adds	r3, r7, #7
 800a478:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a47a:	1dfb      	adds	r3, r7, #7
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	4908      	ldr	r1, [pc, #32]	; (800a4a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <USBD_FS_ConfigStrDescriptor+0x40>)
 800a488:	0018      	movs	r0, r3
 800a48a:	f7ff fda8 	bl	8009fde <USBD_GetString>
 800a48e:	e005      	b.n	800a49c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	4905      	ldr	r1, [pc, #20]	; (800a4a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <USBD_FS_ConfigStrDescriptor+0x40>)
 800a496:	0018      	movs	r0, r3
 800a498:	f7ff fda1 	bl	8009fde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	200010b0 	.word	0x200010b0
 800a4ac:	0800b63c 	.word	0x0800b63c

0800a4b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	0002      	movs	r2, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	1dfb      	adds	r3, r7, #7
 800a4bc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a4be:	1dfb      	adds	r3, r7, #7
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4908      	ldr	r1, [pc, #32]	; (800a4ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f7ff fd86 	bl	8009fde <USBD_GetString>
 800a4d2:	e005      	b.n	800a4e0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	4905      	ldr	r1, [pc, #20]	; (800a4ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f7ff fd7f 	bl	8009fde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4e0:	4b02      	ldr	r3, [pc, #8]	; (800a4ec <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b002      	add	sp, #8
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	46c0      	nop			; (mov r8, r8)
 800a4ec:	200010b0 	.word	0x200010b0
 800a4f0:	0800b648 	.word	0x0800b648

0800a4f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4fa:	4b10      	ldr	r3, [pc, #64]	; (800a53c <Get_SerialNum+0x48>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <Get_SerialNum+0x4c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a506:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <Get_SerialNum+0x50>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	18d3      	adds	r3, r2, r3
 800a512:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00b      	beq.n	800a532 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a51a:	490b      	ldr	r1, [pc, #44]	; (800a548 <Get_SerialNum+0x54>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2208      	movs	r2, #8
 800a520:	0018      	movs	r0, r3
 800a522:	f000 f815 	bl	800a550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a526:	4909      	ldr	r1, [pc, #36]	; (800a54c <Get_SerialNum+0x58>)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2204      	movs	r2, #4
 800a52c:	0018      	movs	r0, r3
 800a52e:	f000 f80f 	bl	800a550 <IntToUnicode>
  }
}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	46bd      	mov	sp, r7
 800a536:	b004      	add	sp, #16
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	1ffff7ac 	.word	0x1ffff7ac
 800a540:	1ffff7b0 	.word	0x1ffff7b0
 800a544:	1ffff7b4 	.word	0x1ffff7b4
 800a548:	20000162 	.word	0x20000162
 800a54c:	20000172 	.word	0x20000172

0800a550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	1dfb      	adds	r3, r7, #7
 800a55c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a55e:	2117      	movs	r1, #23
 800a560:	187b      	adds	r3, r7, r1
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a566:	187b      	adds	r3, r7, r1
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e02f      	b.n	800a5ce <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	0f1b      	lsrs	r3, r3, #28
 800a572:	2b09      	cmp	r3, #9
 800a574:	d80d      	bhi.n	800a592 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	0f1b      	lsrs	r3, r3, #28
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	2317      	movs	r3, #23
 800a57e:	18fb      	adds	r3, r7, r3
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	0019      	movs	r1, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	185b      	adds	r3, r3, r1
 800a58a:	3230      	adds	r2, #48	; 0x30
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e00c      	b.n	800a5ac <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	0f1b      	lsrs	r3, r3, #28
 800a596:	b2da      	uxtb	r2, r3
 800a598:	2317      	movs	r3, #23
 800a59a:	18fb      	adds	r3, r7, r3
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	0019      	movs	r1, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	185b      	adds	r3, r3, r1
 800a5a6:	3237      	adds	r2, #55	; 0x37
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5b2:	2117      	movs	r1, #23
 800a5b4:	187b      	adds	r3, r7, r1
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	18d3      	adds	r3, r2, r3
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5c4:	187b      	adds	r3, r7, r1
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	187b      	adds	r3, r7, r1
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	2317      	movs	r3, #23
 800a5d0:	18fa      	adds	r2, r7, r3
 800a5d2:	1dfb      	adds	r3, r7, #7
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d3c8      	bcc.n	800a56e <IntToUnicode+0x1e>
  }
}
 800a5dc:	46c0      	nop			; (mov r8, r8)
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	b006      	add	sp, #24
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a0e      	ldr	r2, [pc, #56]	; (800a630 <HAL_PCD_MspInit+0x48>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d115      	bne.n	800a626 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <HAL_PCD_MspInit+0x4c>)
 800a5fc:	69da      	ldr	r2, [r3, #28]
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_PCD_MspInit+0x4c>)
 800a600:	2180      	movs	r1, #128	; 0x80
 800a602:	0409      	lsls	r1, r1, #16
 800a604:	430a      	orrs	r2, r1
 800a606:	61da      	str	r2, [r3, #28]
 800a608:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <HAL_PCD_MspInit+0x4c>)
 800a60a:	69da      	ldr	r2, [r3, #28]
 800a60c:	2380      	movs	r3, #128	; 0x80
 800a60e:	041b      	lsls	r3, r3, #16
 800a610:	4013      	ands	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	201f      	movs	r0, #31
 800a61c:	f7f7 fb5c 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a620:	201f      	movs	r0, #31
 800a622:	f7f7 fb6e 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	46bd      	mov	sp, r7
 800a62a:	b004      	add	sp, #16
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	40005c00 	.word	0x40005c00
 800a634:	40021000 	.word	0x40021000

0800a638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	23bc      	movs	r3, #188	; 0xbc
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	58d2      	ldr	r2, [r2, r3]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	21ac      	movs	r1, #172	; 0xac
 800a64c:	0089      	lsls	r1, r1, #2
 800a64e:	468c      	mov	ip, r1
 800a650:	4463      	add	r3, ip
 800a652:	0019      	movs	r1, r3
 800a654:	0010      	movs	r0, r2
 800a656:	f7fe fc55 	bl	8008f04 <USBD_LL_SetupStage>
}
 800a65a:	46c0      	nop			; (mov r8, r8)
 800a65c:	46bd      	mov	sp, r7
 800a65e:	b002      	add	sp, #8
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a662:	b590      	push	{r4, r7, lr}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	000a      	movs	r2, r1
 800a66c:	1cfb      	adds	r3, r7, #3
 800a66e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	23bc      	movs	r3, #188	; 0xbc
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	58d4      	ldr	r4, [r2, r3]
 800a678:	1cfb      	adds	r3, r7, #3
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	23be      	movs	r3, #190	; 0xbe
 800a680:	0059      	lsls	r1, r3, #1
 800a682:	0013      	movs	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	189b      	adds	r3, r3, r2
 800a688:	00db      	lsls	r3, r3, #3
 800a68a:	18c3      	adds	r3, r0, r3
 800a68c:	185b      	adds	r3, r3, r1
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	1cfb      	adds	r3, r7, #3
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	0019      	movs	r1, r3
 800a696:	0020      	movs	r0, r4
 800a698:	f7fe fc92 	bl	8008fc0 <USBD_LL_DataOutStage>
}
 800a69c:	46c0      	nop			; (mov r8, r8)
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bd90      	pop	{r4, r7, pc}

0800a6a4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	000a      	movs	r2, r1
 800a6ae:	1cfb      	adds	r3, r7, #3
 800a6b0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	23bc      	movs	r3, #188	; 0xbc
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	58d0      	ldr	r0, [r2, r3]
 800a6ba:	1cfb      	adds	r3, r7, #3
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	0013      	movs	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	189b      	adds	r3, r3, r2
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	18cb      	adds	r3, r1, r3
 800a6ca:	333c      	adds	r3, #60	; 0x3c
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	1cfb      	adds	r3, r7, #3
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	0019      	movs	r1, r3
 800a6d4:	f7fe fcf6 	bl	80090c4 <USBD_LL_DataInStage>
}
 800a6d8:	46c0      	nop			; (mov r8, r8)
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b002      	add	sp, #8
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	23bc      	movs	r3, #188	; 0xbc
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	58d3      	ldr	r3, [r2, r3]
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f7fe fe2d 	bl	8009350 <USBD_LL_SOF>
}
 800a6f6:	46c0      	nop			; (mov r8, r8)
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	b002      	add	sp, #8
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a706:	230f      	movs	r3, #15
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	2201      	movs	r2, #1
 800a70c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d001      	beq.n	800a71a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a716:	f7f6 fc59 	bl	8000fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	23bc      	movs	r3, #188	; 0xbc
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	58d2      	ldr	r2, [r2, r3]
 800a722:	230f      	movs	r3, #15
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	0019      	movs	r1, r3
 800a72a:	0010      	movs	r0, r2
 800a72c:	f7fe fdcf 	bl	80092ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	23bc      	movs	r3, #188	; 0xbc
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	58d3      	ldr	r3, [r2, r3]
 800a738:	0018      	movs	r0, r3
 800a73a:	f7fe fd80 	bl	800923e <USBD_LL_Reset>
}
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	46bd      	mov	sp, r7
 800a742:	b004      	add	sp, #16
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	23bc      	movs	r3, #188	; 0xbc
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	58d3      	ldr	r3, [r2, r3]
 800a758:	0018      	movs	r0, r3
 800a75a:	f7fe fdc9 	bl	80092f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <HAL_PCD_SuspendCallback+0x34>)
 800a768:	691a      	ldr	r2, [r3, #16]
 800a76a:	4b04      	ldr	r3, [pc, #16]	; (800a77c <HAL_PCD_SuspendCallback+0x34>)
 800a76c:	2106      	movs	r1, #6
 800a76e:	430a      	orrs	r2, r1
 800a770:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	46bd      	mov	sp, r7
 800a776:	b002      	add	sp, #8
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	46c0      	nop			; (mov r8, r8)
 800a77c:	e000ed00 	.word	0xe000ed00

0800a780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a790:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <HAL_PCD_ResumeCallback+0x38>)
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <HAL_PCD_ResumeCallback+0x38>)
 800a796:	2106      	movs	r1, #6
 800a798:	438a      	bics	r2, r1
 800a79a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a79c:	f000 fa44 	bl	800ac28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	23bc      	movs	r3, #188	; 0xbc
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	58d3      	ldr	r3, [r2, r3]
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f7fe fdb9 	bl	8009320 <USBD_LL_Resume>
}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b002      	add	sp, #8
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	e000ed00 	.word	0xe000ed00

0800a7bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a7c4:	4a2d      	ldr	r2, [pc, #180]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7c6:	23bc      	movs	r3, #188	; 0xbc
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	23b0      	movs	r3, #176	; 0xb0
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4929      	ldr	r1, [pc, #164]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7d6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a7d8:	4b28      	ldr	r3, [pc, #160]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7da:	4a29      	ldr	r2, [pc, #164]	; (800a880 <USBD_LL_Init+0xc4>)
 800a7dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7de:	4b27      	ldr	r3, [pc, #156]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7e4:	4b25      	ldr	r3, [pc, #148]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7ea:	4b24      	ldr	r3, [pc, #144]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7f0:	4b22      	ldr	r3, [pc, #136]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7f6:	4b21      	ldr	r3, [pc, #132]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7fc:	4b1f      	ldr	r3, [pc, #124]	; (800a87c <USBD_LL_Init+0xc0>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a802:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <USBD_LL_Init+0xc0>)
 800a804:	0018      	movs	r0, r3
 800a806:	f7f7 fe07 	bl	8002418 <HAL_PCD_Init>
 800a80a:	1e03      	subs	r3, r0, #0
 800a80c:	d001      	beq.n	800a812 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800a80e:	f7f6 fbdd 	bl	8000fcc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	23b0      	movs	r3, #176	; 0xb0
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	58d0      	ldr	r0, [r2, r3]
 800a81a:	2318      	movs	r3, #24
 800a81c:	2200      	movs	r2, #0
 800a81e:	2100      	movs	r1, #0
 800a820:	f7f9 fbe8 	bl	8003ff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	23b0      	movs	r3, #176	; 0xb0
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	58d0      	ldr	r0, [r2, r3]
 800a82c:	2358      	movs	r3, #88	; 0x58
 800a82e:	2200      	movs	r2, #0
 800a830:	2180      	movs	r1, #128	; 0x80
 800a832:	f7f9 fbdf 	bl	8003ff4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	23b0      	movs	r3, #176	; 0xb0
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	58d0      	ldr	r0, [r2, r3]
 800a83e:	23c0      	movs	r3, #192	; 0xc0
 800a840:	2200      	movs	r2, #0
 800a842:	2181      	movs	r1, #129	; 0x81
 800a844:	f7f9 fbd6 	bl	8003ff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	23b0      	movs	r3, #176	; 0xb0
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	58d0      	ldr	r0, [r2, r3]
 800a850:	2388      	movs	r3, #136	; 0x88
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	2200      	movs	r2, #0
 800a856:	2101      	movs	r1, #1
 800a858:	f7f9 fbcc 	bl	8003ff4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	23b0      	movs	r3, #176	; 0xb0
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	58d0      	ldr	r0, [r2, r3]
 800a864:	2380      	movs	r3, #128	; 0x80
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	2200      	movs	r2, #0
 800a86a:	2182      	movs	r1, #130	; 0x82
 800a86c:	f7f9 fbc2 	bl	8003ff4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	0018      	movs	r0, r3
 800a874:	46bd      	mov	sp, r7
 800a876:	b002      	add	sp, #8
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	200012b0 	.word	0x200012b0
 800a880:	40005c00 	.word	0x40005c00

0800a884 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88c:	210f      	movs	r1, #15
 800a88e:	187b      	adds	r3, r7, r1
 800a890:	2200      	movs	r2, #0
 800a892:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a894:	260e      	movs	r6, #14
 800a896:	19bb      	adds	r3, r7, r6
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	23b0      	movs	r3, #176	; 0xb0
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	58d3      	ldr	r3, [r2, r3]
 800a8a4:	000d      	movs	r5, r1
 800a8a6:	187c      	adds	r4, r7, r1
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f7f7 fec5 	bl	8002638 <HAL_PCD_Start>
 800a8ae:	0003      	movs	r3, r0
 800a8b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b2:	19bc      	adds	r4, r7, r6
 800a8b4:	197b      	adds	r3, r7, r5
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	f000 f9bc 	bl	800ac36 <USBD_Get_USB_Status>
 800a8be:	0003      	movs	r3, r0
 800a8c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a8c2:	19bb      	adds	r3, r7, r6
 800a8c4:	781b      	ldrb	r3, [r3, #0]
}
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b005      	add	sp, #20
 800a8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	000c      	movs	r4, r1
 800a8d8:	0010      	movs	r0, r2
 800a8da:	0019      	movs	r1, r3
 800a8dc:	1cfb      	adds	r3, r7, #3
 800a8de:	1c22      	adds	r2, r4, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	1cbb      	adds	r3, r7, #2
 800a8e4:	1c02      	adds	r2, r0, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	003b      	movs	r3, r7
 800a8ea:	1c0a      	adds	r2, r1, #0
 800a8ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ee:	260f      	movs	r6, #15
 800a8f0:	19bb      	adds	r3, r7, r6
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	250e      	movs	r5, #14
 800a8f8:	197b      	adds	r3, r7, r5
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	23b0      	movs	r3, #176	; 0xb0
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	58d0      	ldr	r0, [r2, r3]
 800a906:	19bc      	adds	r4, r7, r6
 800a908:	1cbb      	adds	r3, r7, #2
 800a90a:	781d      	ldrb	r5, [r3, #0]
 800a90c:	003b      	movs	r3, r7
 800a90e:	881a      	ldrh	r2, [r3, #0]
 800a910:	1cfb      	adds	r3, r7, #3
 800a912:	7819      	ldrb	r1, [r3, #0]
 800a914:	002b      	movs	r3, r5
 800a916:	f7f8 f85c 	bl	80029d2 <HAL_PCD_EP_Open>
 800a91a:	0003      	movs	r3, r0
 800a91c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a91e:	250e      	movs	r5, #14
 800a920:	197c      	adds	r4, r7, r5
 800a922:	19bb      	adds	r3, r7, r6
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	0018      	movs	r0, r3
 800a928:	f000 f985 	bl	800ac36 <USBD_Get_USB_Status>
 800a92c:	0003      	movs	r3, r0
 800a92e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a930:	197b      	adds	r3, r7, r5
 800a932:	781b      	ldrb	r3, [r3, #0]
}
 800a934:	0018      	movs	r0, r3
 800a936:	46bd      	mov	sp, r7
 800a938:	b005      	add	sp, #20
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a93c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	000a      	movs	r2, r1
 800a946:	1cfb      	adds	r3, r7, #3
 800a948:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94a:	210f      	movs	r1, #15
 800a94c:	187b      	adds	r3, r7, r1
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a952:	260e      	movs	r6, #14
 800a954:	19bb      	adds	r3, r7, r6
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	23b0      	movs	r3, #176	; 0xb0
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	58d2      	ldr	r2, [r2, r3]
 800a962:	000d      	movs	r5, r1
 800a964:	187c      	adds	r4, r7, r1
 800a966:	1cfb      	adds	r3, r7, #3
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	0019      	movs	r1, r3
 800a96c:	0010      	movs	r0, r2
 800a96e:	f7f8 f8a8 	bl	8002ac2 <HAL_PCD_EP_Close>
 800a972:	0003      	movs	r3, r0
 800a974:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	19bc      	adds	r4, r7, r6
 800a978:	197b      	adds	r3, r7, r5
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	0018      	movs	r0, r3
 800a97e:	f000 f95a 	bl	800ac36 <USBD_Get_USB_Status>
 800a982:	0003      	movs	r3, r0
 800a984:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a986:	19bb      	adds	r3, r7, r6
 800a988:	781b      	ldrb	r3, [r3, #0]
}
 800a98a:	0018      	movs	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b005      	add	sp, #20
 800a990:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a992 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a992:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	000a      	movs	r2, r1
 800a99c:	1cfb      	adds	r3, r7, #3
 800a99e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a0:	210f      	movs	r1, #15
 800a9a2:	187b      	adds	r3, r7, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a8:	260e      	movs	r6, #14
 800a9aa:	19bb      	adds	r3, r7, r6
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	23b0      	movs	r3, #176	; 0xb0
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	58d2      	ldr	r2, [r2, r3]
 800a9b8:	000d      	movs	r5, r1
 800a9ba:	187c      	adds	r4, r7, r1
 800a9bc:	1cfb      	adds	r3, r7, #3
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	0019      	movs	r1, r3
 800a9c2:	0010      	movs	r0, r2
 800a9c4:	f7f8 f974 	bl	8002cb0 <HAL_PCD_EP_SetStall>
 800a9c8:	0003      	movs	r3, r0
 800a9ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9cc:	19bc      	adds	r4, r7, r6
 800a9ce:	197b      	adds	r3, r7, r5
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f000 f92f 	bl	800ac36 <USBD_Get_USB_Status>
 800a9d8:	0003      	movs	r3, r0
 800a9da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a9dc:	19bb      	adds	r3, r7, r6
 800a9de:	781b      	ldrb	r3, [r3, #0]
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b005      	add	sp, #20
 800a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	000a      	movs	r2, r1
 800a9f2:	1cfb      	adds	r3, r7, #3
 800a9f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f6:	210f      	movs	r1, #15
 800a9f8:	187b      	adds	r3, r7, r1
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fe:	260e      	movs	r6, #14
 800aa00:	19bb      	adds	r3, r7, r6
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	23b0      	movs	r3, #176	; 0xb0
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	58d2      	ldr	r2, [r2, r3]
 800aa0e:	000d      	movs	r5, r1
 800aa10:	187c      	adds	r4, r7, r1
 800aa12:	1cfb      	adds	r3, r7, #3
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	0019      	movs	r1, r3
 800aa18:	0010      	movs	r0, r2
 800aa1a:	f7f8 f9a5 	bl	8002d68 <HAL_PCD_EP_ClrStall>
 800aa1e:	0003      	movs	r3, r0
 800aa20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa22:	19bc      	adds	r4, r7, r6
 800aa24:	197b      	adds	r3, r7, r5
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f000 f904 	bl	800ac36 <USBD_Get_USB_Status>
 800aa2e:	0003      	movs	r3, r0
 800aa30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aa32:	19bb      	adds	r3, r7, r6
 800aa34:	781b      	ldrb	r3, [r3, #0]
}
 800aa36:	0018      	movs	r0, r3
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	b005      	add	sp, #20
 800aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa3e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	000a      	movs	r2, r1
 800aa48:	1cfb      	adds	r3, r7, #3
 800aa4a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	23b0      	movs	r3, #176	; 0xb0
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	58d3      	ldr	r3, [r2, r3]
 800aa54:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa56:	1cfb      	adds	r3, r7, #3
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b25b      	sxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	da0d      	bge.n	800aa7c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa60:	1cfb      	adds	r3, r7, #3
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	227f      	movs	r2, #127	; 0x7f
 800aa66:	4013      	ands	r3, r2
 800aa68:	68f9      	ldr	r1, [r7, #12]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	0013      	movs	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	189b      	adds	r3, r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	18cb      	adds	r3, r1, r3
 800aa76:	3302      	adds	r3, #2
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	e00d      	b.n	800aa98 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa7c:	1cfb      	adds	r3, r7, #3
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	227f      	movs	r2, #127	; 0x7f
 800aa82:	401a      	ands	r2, r3
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	23b5      	movs	r3, #181	; 0xb5
 800aa88:	0059      	lsls	r1, r3, #1
 800aa8a:	0013      	movs	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	189b      	adds	r3, r3, r2
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	18c3      	adds	r3, r0, r3
 800aa94:	185b      	adds	r3, r3, r1
 800aa96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa98:	0018      	movs	r0, r3
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	b004      	add	sp, #16
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	000a      	movs	r2, r1
 800aaaa:	1cfb      	adds	r3, r7, #3
 800aaac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaae:	210f      	movs	r1, #15
 800aab0:	187b      	adds	r3, r7, r1
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab6:	260e      	movs	r6, #14
 800aab8:	19bb      	adds	r3, r7, r6
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	23b0      	movs	r3, #176	; 0xb0
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	58d2      	ldr	r2, [r2, r3]
 800aac6:	000d      	movs	r5, r1
 800aac8:	187c      	adds	r4, r7, r1
 800aaca:	1cfb      	adds	r3, r7, #3
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	0019      	movs	r1, r3
 800aad0:	0010      	movs	r0, r2
 800aad2:	f7f7 ff53 	bl	800297c <HAL_PCD_SetAddress>
 800aad6:	0003      	movs	r3, r0
 800aad8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aada:	19bc      	adds	r4, r7, r6
 800aadc:	197b      	adds	r3, r7, r5
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	0018      	movs	r0, r3
 800aae2:	f000 f8a8 	bl	800ac36 <USBD_Get_USB_Status>
 800aae6:	0003      	movs	r3, r0
 800aae8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aaea:	19bb      	adds	r3, r7, r6
 800aaec:	781b      	ldrb	r3, [r3, #0]
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b005      	add	sp, #20
 800aaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf8:	b087      	sub	sp, #28
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	0008      	movs	r0, r1
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	0019      	movs	r1, r3
 800ab04:	230b      	movs	r3, #11
 800ab06:	18fb      	adds	r3, r7, r3
 800ab08:	1c02      	adds	r2, r0, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	2408      	movs	r4, #8
 800ab0e:	193b      	adds	r3, r7, r4
 800ab10:	1c0a      	adds	r2, r1, #0
 800ab12:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab14:	2117      	movs	r1, #23
 800ab16:	187b      	adds	r3, r7, r1
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1c:	2516      	movs	r5, #22
 800ab1e:	197b      	adds	r3, r7, r5
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	23b0      	movs	r3, #176	; 0xb0
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	58d0      	ldr	r0, [r2, r3]
 800ab2c:	193b      	adds	r3, r7, r4
 800ab2e:	881d      	ldrh	r5, [r3, #0]
 800ab30:	000e      	movs	r6, r1
 800ab32:	187c      	adds	r4, r7, r1
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	230b      	movs	r3, #11
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	7819      	ldrb	r1, [r3, #0]
 800ab3c:	002b      	movs	r3, r5
 800ab3e:	f7f8 f86e 	bl	8002c1e <HAL_PCD_EP_Transmit>
 800ab42:	0003      	movs	r3, r0
 800ab44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab46:	2516      	movs	r5, #22
 800ab48:	197c      	adds	r4, r7, r5
 800ab4a:	19bb      	adds	r3, r7, r6
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f000 f871 	bl	800ac36 <USBD_Get_USB_Status>
 800ab54:	0003      	movs	r3, r0
 800ab56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ab58:	197b      	adds	r3, r7, r5
 800ab5a:	781b      	ldrb	r3, [r3, #0]
}
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b007      	add	sp, #28
 800ab62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	0008      	movs	r0, r1
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	0019      	movs	r1, r3
 800ab72:	230b      	movs	r3, #11
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	1c02      	adds	r2, r0, #0
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	2408      	movs	r4, #8
 800ab7c:	193b      	adds	r3, r7, r4
 800ab7e:	1c0a      	adds	r2, r1, #0
 800ab80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab82:	2117      	movs	r1, #23
 800ab84:	187b      	adds	r3, r7, r1
 800ab86:	2200      	movs	r2, #0
 800ab88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab8a:	2516      	movs	r5, #22
 800ab8c:	197b      	adds	r3, r7, r5
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	23b0      	movs	r3, #176	; 0xb0
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	58d0      	ldr	r0, [r2, r3]
 800ab9a:	193b      	adds	r3, r7, r4
 800ab9c:	881d      	ldrh	r5, [r3, #0]
 800ab9e:	000e      	movs	r6, r1
 800aba0:	187c      	adds	r4, r7, r1
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	230b      	movs	r3, #11
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	7819      	ldrb	r1, [r3, #0]
 800abaa:	002b      	movs	r3, r5
 800abac:	f7f7 ffda 	bl	8002b64 <HAL_PCD_EP_Receive>
 800abb0:	0003      	movs	r3, r0
 800abb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb4:	2516      	movs	r5, #22
 800abb6:	197c      	adds	r4, r7, r5
 800abb8:	19bb      	adds	r3, r7, r6
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	0018      	movs	r0, r3
 800abbe:	f000 f83a 	bl	800ac36 <USBD_Get_USB_Status>
 800abc2:	0003      	movs	r3, r0
 800abc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800abc6:	197b      	adds	r3, r7, r5
 800abc8:	781b      	ldrb	r3, [r3, #0]
}
 800abca:	0018      	movs	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	b007      	add	sp, #28
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	000a      	movs	r2, r1
 800abdc:	1cfb      	adds	r3, r7, #3
 800abde:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	23b0      	movs	r3, #176	; 0xb0
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	58d2      	ldr	r2, [r2, r3]
 800abe8:	1cfb      	adds	r3, r7, #3
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	0019      	movs	r1, r3
 800abee:	0010      	movs	r0, r2
 800abf0:	f7f7 fffc 	bl	8002bec <HAL_PCD_EP_GetRxCount>
 800abf4:	0003      	movs	r3, r0
}
 800abf6:	0018      	movs	r0, r3
 800abf8:	46bd      	mov	sp, r7
 800abfa:	b002      	add	sp, #8
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <USBD_static_malloc+0x14>)
}
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	20000218 	.word	0x20000218

0800ac18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

}
 800ac20:	46c0      	nop			; (mov r8, r8)
 800ac22:	46bd      	mov	sp, r7
 800ac24:	b002      	add	sp, #8
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ac2c:	f7f5 fc7a 	bl	8000524 <SystemClock_Config>
}
 800ac30:	46c0      	nop			; (mov r8, r8)
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	0002      	movs	r2, r0
 800ac3e:	1dfb      	adds	r3, r7, #7
 800ac40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac42:	230f      	movs	r3, #15
 800ac44:	18fb      	adds	r3, r7, r3
 800ac46:	2200      	movs	r2, #0
 800ac48:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ac4a:	1dfb      	adds	r3, r7, #7
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d017      	beq.n	800ac82 <USBD_Get_USB_Status+0x4c>
 800ac52:	dc1b      	bgt.n	800ac8c <USBD_Get_USB_Status+0x56>
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d00f      	beq.n	800ac78 <USBD_Get_USB_Status+0x42>
 800ac58:	dc18      	bgt.n	800ac8c <USBD_Get_USB_Status+0x56>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <USBD_Get_USB_Status+0x2e>
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d005      	beq.n	800ac6e <USBD_Get_USB_Status+0x38>
 800ac62:	e013      	b.n	800ac8c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac64:	230f      	movs	r3, #15
 800ac66:	18fb      	adds	r3, r7, r3
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
    break;
 800ac6c:	e013      	b.n	800ac96 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac6e:	230f      	movs	r3, #15
 800ac70:	18fb      	adds	r3, r7, r3
 800ac72:	2202      	movs	r2, #2
 800ac74:	701a      	strb	r2, [r3, #0]
    break;
 800ac76:	e00e      	b.n	800ac96 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac78:	230f      	movs	r3, #15
 800ac7a:	18fb      	adds	r3, r7, r3
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	701a      	strb	r2, [r3, #0]
    break;
 800ac80:	e009      	b.n	800ac96 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac82:	230f      	movs	r3, #15
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	2202      	movs	r2, #2
 800ac88:	701a      	strb	r2, [r3, #0]
    break;
 800ac8a:	e004      	b.n	800ac96 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ac8c:	230f      	movs	r3, #15
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	2202      	movs	r2, #2
 800ac92:	701a      	strb	r2, [r3, #0]
    break;
 800ac94:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800ac96:	230f      	movs	r3, #15
 800ac98:	18fb      	adds	r3, r7, r3
 800ac9a:	781b      	ldrb	r3, [r3, #0]
}
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	b004      	add	sp, #16
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <__errno>:
 800aca4:	4b01      	ldr	r3, [pc, #4]	; (800acac <__errno+0x8>)
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	4770      	bx	lr
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	2000017c 	.word	0x2000017c

0800acb0 <__libc_init_array>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	2600      	movs	r6, #0
 800acb4:	4d0c      	ldr	r5, [pc, #48]	; (800ace8 <__libc_init_array+0x38>)
 800acb6:	4c0d      	ldr	r4, [pc, #52]	; (800acec <__libc_init_array+0x3c>)
 800acb8:	1b64      	subs	r4, r4, r5
 800acba:	10a4      	asrs	r4, r4, #2
 800acbc:	42a6      	cmp	r6, r4
 800acbe:	d109      	bne.n	800acd4 <__libc_init_array+0x24>
 800acc0:	2600      	movs	r6, #0
 800acc2:	f000 fc5b 	bl	800b57c <_init>
 800acc6:	4d0a      	ldr	r5, [pc, #40]	; (800acf0 <__libc_init_array+0x40>)
 800acc8:	4c0a      	ldr	r4, [pc, #40]	; (800acf4 <__libc_init_array+0x44>)
 800acca:	1b64      	subs	r4, r4, r5
 800accc:	10a4      	asrs	r4, r4, #2
 800acce:	42a6      	cmp	r6, r4
 800acd0:	d105      	bne.n	800acde <__libc_init_array+0x2e>
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	00b3      	lsls	r3, r6, #2
 800acd6:	58eb      	ldr	r3, [r5, r3]
 800acd8:	4798      	blx	r3
 800acda:	3601      	adds	r6, #1
 800acdc:	e7ee      	b.n	800acbc <__libc_init_array+0xc>
 800acde:	00b3      	lsls	r3, r6, #2
 800ace0:	58eb      	ldr	r3, [r5, r3]
 800ace2:	4798      	blx	r3
 800ace4:	3601      	adds	r6, #1
 800ace6:	e7f2      	b.n	800acce <__libc_init_array+0x1e>
 800ace8:	0800b794 	.word	0x0800b794
 800acec:	0800b794 	.word	0x0800b794
 800acf0:	0800b794 	.word	0x0800b794
 800acf4:	0800b798 	.word	0x0800b798

0800acf8 <malloc>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <malloc+0x10>)
 800acfc:	0001      	movs	r1, r0
 800acfe:	6818      	ldr	r0, [r3, #0]
 800ad00:	f000 f860 	bl	800adc4 <_malloc_r>
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	2000017c 	.word	0x2000017c

0800ad0c <free>:
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	4b03      	ldr	r3, [pc, #12]	; (800ad1c <free+0x10>)
 800ad10:	0001      	movs	r1, r0
 800ad12:	6818      	ldr	r0, [r3, #0]
 800ad14:	f000 f80c 	bl	800ad30 <_free_r>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	46c0      	nop			; (mov r8, r8)
 800ad1c:	2000017c 	.word	0x2000017c

0800ad20 <memset>:
 800ad20:	0003      	movs	r3, r0
 800ad22:	1882      	adds	r2, r0, r2
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d100      	bne.n	800ad2a <memset+0xa>
 800ad28:	4770      	bx	lr
 800ad2a:	7019      	strb	r1, [r3, #0]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	e7f9      	b.n	800ad24 <memset+0x4>

0800ad30 <_free_r>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	0005      	movs	r5, r0
 800ad34:	2900      	cmp	r1, #0
 800ad36:	d010      	beq.n	800ad5a <_free_r+0x2a>
 800ad38:	1f0c      	subs	r4, r1, #4
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	da00      	bge.n	800ad42 <_free_r+0x12>
 800ad40:	18e4      	adds	r4, r4, r3
 800ad42:	0028      	movs	r0, r5
 800ad44:	f000 f8ce 	bl	800aee4 <__malloc_lock>
 800ad48:	4a1d      	ldr	r2, [pc, #116]	; (800adc0 <_free_r+0x90>)
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d105      	bne.n	800ad5c <_free_r+0x2c>
 800ad50:	6063      	str	r3, [r4, #4]
 800ad52:	6014      	str	r4, [r2, #0]
 800ad54:	0028      	movs	r0, r5
 800ad56:	f000 f8cd 	bl	800aef4 <__malloc_unlock>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d908      	bls.n	800ad72 <_free_r+0x42>
 800ad60:	6821      	ldr	r1, [r4, #0]
 800ad62:	1860      	adds	r0, r4, r1
 800ad64:	4283      	cmp	r3, r0
 800ad66:	d1f3      	bne.n	800ad50 <_free_r+0x20>
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	1841      	adds	r1, r0, r1
 800ad6e:	6021      	str	r1, [r4, #0]
 800ad70:	e7ee      	b.n	800ad50 <_free_r+0x20>
 800ad72:	001a      	movs	r2, r3
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <_free_r+0x4e>
 800ad7a:	42a3      	cmp	r3, r4
 800ad7c:	d9f9      	bls.n	800ad72 <_free_r+0x42>
 800ad7e:	6811      	ldr	r1, [r2, #0]
 800ad80:	1850      	adds	r0, r2, r1
 800ad82:	42a0      	cmp	r0, r4
 800ad84:	d10b      	bne.n	800ad9e <_free_r+0x6e>
 800ad86:	6820      	ldr	r0, [r4, #0]
 800ad88:	1809      	adds	r1, r1, r0
 800ad8a:	1850      	adds	r0, r2, r1
 800ad8c:	6011      	str	r1, [r2, #0]
 800ad8e:	4283      	cmp	r3, r0
 800ad90:	d1e0      	bne.n	800ad54 <_free_r+0x24>
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	1841      	adds	r1, r0, r1
 800ad98:	6011      	str	r1, [r2, #0]
 800ad9a:	6053      	str	r3, [r2, #4]
 800ad9c:	e7da      	b.n	800ad54 <_free_r+0x24>
 800ad9e:	42a0      	cmp	r0, r4
 800ada0:	d902      	bls.n	800ada8 <_free_r+0x78>
 800ada2:	230c      	movs	r3, #12
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	e7d5      	b.n	800ad54 <_free_r+0x24>
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	1860      	adds	r0, r4, r1
 800adac:	4283      	cmp	r3, r0
 800adae:	d103      	bne.n	800adb8 <_free_r+0x88>
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	1841      	adds	r1, r0, r1
 800adb6:	6021      	str	r1, [r4, #0]
 800adb8:	6063      	str	r3, [r4, #4]
 800adba:	6054      	str	r4, [r2, #4]
 800adbc:	e7ca      	b.n	800ad54 <_free_r+0x24>
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	20000438 	.word	0x20000438

0800adc4 <_malloc_r>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	2303      	movs	r3, #3
 800adc8:	1ccd      	adds	r5, r1, #3
 800adca:	439d      	bics	r5, r3
 800adcc:	3508      	adds	r5, #8
 800adce:	0006      	movs	r6, r0
 800add0:	2d0c      	cmp	r5, #12
 800add2:	d21f      	bcs.n	800ae14 <_malloc_r+0x50>
 800add4:	250c      	movs	r5, #12
 800add6:	42a9      	cmp	r1, r5
 800add8:	d81e      	bhi.n	800ae18 <_malloc_r+0x54>
 800adda:	0030      	movs	r0, r6
 800addc:	f000 f882 	bl	800aee4 <__malloc_lock>
 800ade0:	4925      	ldr	r1, [pc, #148]	; (800ae78 <_malloc_r+0xb4>)
 800ade2:	680a      	ldr	r2, [r1, #0]
 800ade4:	0014      	movs	r4, r2
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	d11a      	bne.n	800ae20 <_malloc_r+0x5c>
 800adea:	4f24      	ldr	r7, [pc, #144]	; (800ae7c <_malloc_r+0xb8>)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <_malloc_r+0x38>
 800adf2:	0021      	movs	r1, r4
 800adf4:	0030      	movs	r0, r6
 800adf6:	f000 f843 	bl	800ae80 <_sbrk_r>
 800adfa:	6038      	str	r0, [r7, #0]
 800adfc:	0029      	movs	r1, r5
 800adfe:	0030      	movs	r0, r6
 800ae00:	f000 f83e 	bl	800ae80 <_sbrk_r>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d12b      	bne.n	800ae60 <_malloc_r+0x9c>
 800ae08:	230c      	movs	r3, #12
 800ae0a:	0030      	movs	r0, r6
 800ae0c:	6033      	str	r3, [r6, #0]
 800ae0e:	f000 f871 	bl	800aef4 <__malloc_unlock>
 800ae12:	e003      	b.n	800ae1c <_malloc_r+0x58>
 800ae14:	2d00      	cmp	r5, #0
 800ae16:	dade      	bge.n	800add6 <_malloc_r+0x12>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	6033      	str	r3, [r6, #0]
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	1b5b      	subs	r3, r3, r5
 800ae24:	d419      	bmi.n	800ae5a <_malloc_r+0x96>
 800ae26:	2b0b      	cmp	r3, #11
 800ae28:	d903      	bls.n	800ae32 <_malloc_r+0x6e>
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	18e4      	adds	r4, r4, r3
 800ae2e:	6025      	str	r5, [r4, #0]
 800ae30:	e003      	b.n	800ae3a <_malloc_r+0x76>
 800ae32:	6863      	ldr	r3, [r4, #4]
 800ae34:	42a2      	cmp	r2, r4
 800ae36:	d10e      	bne.n	800ae56 <_malloc_r+0x92>
 800ae38:	600b      	str	r3, [r1, #0]
 800ae3a:	0030      	movs	r0, r6
 800ae3c:	f000 f85a 	bl	800aef4 <__malloc_unlock>
 800ae40:	0020      	movs	r0, r4
 800ae42:	2207      	movs	r2, #7
 800ae44:	300b      	adds	r0, #11
 800ae46:	1d23      	adds	r3, r4, #4
 800ae48:	4390      	bics	r0, r2
 800ae4a:	1ac2      	subs	r2, r0, r3
 800ae4c:	4298      	cmp	r0, r3
 800ae4e:	d0e6      	beq.n	800ae1e <_malloc_r+0x5a>
 800ae50:	1a1b      	subs	r3, r3, r0
 800ae52:	50a3      	str	r3, [r4, r2]
 800ae54:	e7e3      	b.n	800ae1e <_malloc_r+0x5a>
 800ae56:	6053      	str	r3, [r2, #4]
 800ae58:	e7ef      	b.n	800ae3a <_malloc_r+0x76>
 800ae5a:	0022      	movs	r2, r4
 800ae5c:	6864      	ldr	r4, [r4, #4]
 800ae5e:	e7c2      	b.n	800ade6 <_malloc_r+0x22>
 800ae60:	2303      	movs	r3, #3
 800ae62:	1cc4      	adds	r4, r0, #3
 800ae64:	439c      	bics	r4, r3
 800ae66:	42a0      	cmp	r0, r4
 800ae68:	d0e1      	beq.n	800ae2e <_malloc_r+0x6a>
 800ae6a:	1a21      	subs	r1, r4, r0
 800ae6c:	0030      	movs	r0, r6
 800ae6e:	f000 f807 	bl	800ae80 <_sbrk_r>
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d1db      	bne.n	800ae2e <_malloc_r+0x6a>
 800ae76:	e7c7      	b.n	800ae08 <_malloc_r+0x44>
 800ae78:	20000438 	.word	0x20000438
 800ae7c:	2000043c 	.word	0x2000043c

0800ae80 <_sbrk_r>:
 800ae80:	2300      	movs	r3, #0
 800ae82:	b570      	push	{r4, r5, r6, lr}
 800ae84:	4d06      	ldr	r5, [pc, #24]	; (800aea0 <_sbrk_r+0x20>)
 800ae86:	0004      	movs	r4, r0
 800ae88:	0008      	movs	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f6 fb60 	bl	8001550 <_sbrk>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d103      	bne.n	800ae9c <_sbrk_r+0x1c>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d000      	beq.n	800ae9c <_sbrk_r+0x1c>
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	200015a4 	.word	0x200015a4

0800aea4 <siprintf>:
 800aea4:	b40e      	push	{r1, r2, r3}
 800aea6:	b500      	push	{lr}
 800aea8:	490b      	ldr	r1, [pc, #44]	; (800aed8 <siprintf+0x34>)
 800aeaa:	b09c      	sub	sp, #112	; 0x70
 800aeac:	ab1d      	add	r3, sp, #116	; 0x74
 800aeae:	9002      	str	r0, [sp, #8]
 800aeb0:	9006      	str	r0, [sp, #24]
 800aeb2:	9107      	str	r1, [sp, #28]
 800aeb4:	9104      	str	r1, [sp, #16]
 800aeb6:	4809      	ldr	r0, [pc, #36]	; (800aedc <siprintf+0x38>)
 800aeb8:	4909      	ldr	r1, [pc, #36]	; (800aee0 <siprintf+0x3c>)
 800aeba:	cb04      	ldmia	r3!, {r2}
 800aebc:	9105      	str	r1, [sp, #20]
 800aebe:	6800      	ldr	r0, [r0, #0]
 800aec0:	a902      	add	r1, sp, #8
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	f000 f880 	bl	800afc8 <_svfiprintf_r>
 800aec8:	2300      	movs	r3, #0
 800aeca:	9a02      	ldr	r2, [sp, #8]
 800aecc:	7013      	strb	r3, [r2, #0]
 800aece:	b01c      	add	sp, #112	; 0x70
 800aed0:	bc08      	pop	{r3}
 800aed2:	b003      	add	sp, #12
 800aed4:	4718      	bx	r3
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	7fffffff 	.word	0x7fffffff
 800aedc:	2000017c 	.word	0x2000017c
 800aee0:	ffff0208 	.word	0xffff0208

0800aee4 <__malloc_lock>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	4802      	ldr	r0, [pc, #8]	; (800aef0 <__malloc_lock+0xc>)
 800aee8:	f000 faf0 	bl	800b4cc <__retarget_lock_acquire_recursive>
 800aeec:	bd10      	pop	{r4, pc}
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	200015ac 	.word	0x200015ac

0800aef4 <__malloc_unlock>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4802      	ldr	r0, [pc, #8]	; (800af00 <__malloc_unlock+0xc>)
 800aef8:	f000 fae9 	bl	800b4ce <__retarget_lock_release_recursive>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	200015ac 	.word	0x200015ac

0800af04 <__ssputs_r>:
 800af04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af06:	688e      	ldr	r6, [r1, #8]
 800af08:	b085      	sub	sp, #20
 800af0a:	0007      	movs	r7, r0
 800af0c:	000c      	movs	r4, r1
 800af0e:	9203      	str	r2, [sp, #12]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	429e      	cmp	r6, r3
 800af14:	d83c      	bhi.n	800af90 <__ssputs_r+0x8c>
 800af16:	2390      	movs	r3, #144	; 0x90
 800af18:	898a      	ldrh	r2, [r1, #12]
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	421a      	tst	r2, r3
 800af1e:	d034      	beq.n	800af8a <__ssputs_r+0x86>
 800af20:	2503      	movs	r5, #3
 800af22:	6909      	ldr	r1, [r1, #16]
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	1a5b      	subs	r3, r3, r1
 800af28:	9302      	str	r3, [sp, #8]
 800af2a:	6963      	ldr	r3, [r4, #20]
 800af2c:	9802      	ldr	r0, [sp, #8]
 800af2e:	435d      	muls	r5, r3
 800af30:	0feb      	lsrs	r3, r5, #31
 800af32:	195d      	adds	r5, r3, r5
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	106d      	asrs	r5, r5, #1
 800af38:	3301      	adds	r3, #1
 800af3a:	181b      	adds	r3, r3, r0
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	d900      	bls.n	800af42 <__ssputs_r+0x3e>
 800af40:	001d      	movs	r5, r3
 800af42:	0553      	lsls	r3, r2, #21
 800af44:	d532      	bpl.n	800afac <__ssputs_r+0xa8>
 800af46:	0029      	movs	r1, r5
 800af48:	0038      	movs	r0, r7
 800af4a:	f7ff ff3b 	bl	800adc4 <_malloc_r>
 800af4e:	1e06      	subs	r6, r0, #0
 800af50:	d109      	bne.n	800af66 <__ssputs_r+0x62>
 800af52:	230c      	movs	r3, #12
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	2001      	movs	r0, #1
 800af5a:	89a2      	ldrh	r2, [r4, #12]
 800af5c:	4240      	negs	r0, r0
 800af5e:	4313      	orrs	r3, r2
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	b005      	add	sp, #20
 800af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af66:	9a02      	ldr	r2, [sp, #8]
 800af68:	6921      	ldr	r1, [r4, #16]
 800af6a:	f000 fabc 	bl	800b4e6 <memcpy>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	4a14      	ldr	r2, [pc, #80]	; (800afc4 <__ssputs_r+0xc0>)
 800af72:	401a      	ands	r2, r3
 800af74:	2380      	movs	r3, #128	; 0x80
 800af76:	4313      	orrs	r3, r2
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	9b02      	ldr	r3, [sp, #8]
 800af7c:	6126      	str	r6, [r4, #16]
 800af7e:	18f6      	adds	r6, r6, r3
 800af80:	6026      	str	r6, [r4, #0]
 800af82:	6165      	str	r5, [r4, #20]
 800af84:	9e01      	ldr	r6, [sp, #4]
 800af86:	1aed      	subs	r5, r5, r3
 800af88:	60a5      	str	r5, [r4, #8]
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	429e      	cmp	r6, r3
 800af8e:	d900      	bls.n	800af92 <__ssputs_r+0x8e>
 800af90:	9e01      	ldr	r6, [sp, #4]
 800af92:	0032      	movs	r2, r6
 800af94:	9903      	ldr	r1, [sp, #12]
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	f000 faae 	bl	800b4f8 <memmove>
 800af9c:	68a3      	ldr	r3, [r4, #8]
 800af9e:	2000      	movs	r0, #0
 800afa0:	1b9b      	subs	r3, r3, r6
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	199e      	adds	r6, r3, r6
 800afa8:	6026      	str	r6, [r4, #0]
 800afaa:	e7da      	b.n	800af62 <__ssputs_r+0x5e>
 800afac:	002a      	movs	r2, r5
 800afae:	0038      	movs	r0, r7
 800afb0:	f000 fab5 	bl	800b51e <_realloc_r>
 800afb4:	1e06      	subs	r6, r0, #0
 800afb6:	d1e0      	bne.n	800af7a <__ssputs_r+0x76>
 800afb8:	0038      	movs	r0, r7
 800afba:	6921      	ldr	r1, [r4, #16]
 800afbc:	f7ff feb8 	bl	800ad30 <_free_r>
 800afc0:	e7c7      	b.n	800af52 <__ssputs_r+0x4e>
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	fffffb7f 	.word	0xfffffb7f

0800afc8 <_svfiprintf_r>:
 800afc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afca:	b0a1      	sub	sp, #132	; 0x84
 800afcc:	9003      	str	r0, [sp, #12]
 800afce:	001d      	movs	r5, r3
 800afd0:	898b      	ldrh	r3, [r1, #12]
 800afd2:	000f      	movs	r7, r1
 800afd4:	0016      	movs	r6, r2
 800afd6:	061b      	lsls	r3, r3, #24
 800afd8:	d511      	bpl.n	800affe <_svfiprintf_r+0x36>
 800afda:	690b      	ldr	r3, [r1, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10e      	bne.n	800affe <_svfiprintf_r+0x36>
 800afe0:	2140      	movs	r1, #64	; 0x40
 800afe2:	f7ff feef 	bl	800adc4 <_malloc_r>
 800afe6:	6038      	str	r0, [r7, #0]
 800afe8:	6138      	str	r0, [r7, #16]
 800afea:	2800      	cmp	r0, #0
 800afec:	d105      	bne.n	800affa <_svfiprintf_r+0x32>
 800afee:	230c      	movs	r3, #12
 800aff0:	9a03      	ldr	r2, [sp, #12]
 800aff2:	3801      	subs	r0, #1
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	b021      	add	sp, #132	; 0x84
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800affa:	2340      	movs	r3, #64	; 0x40
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	2300      	movs	r3, #0
 800b000:	ac08      	add	r4, sp, #32
 800b002:	6163      	str	r3, [r4, #20]
 800b004:	3320      	adds	r3, #32
 800b006:	7663      	strb	r3, [r4, #25]
 800b008:	3310      	adds	r3, #16
 800b00a:	76a3      	strb	r3, [r4, #26]
 800b00c:	9507      	str	r5, [sp, #28]
 800b00e:	0035      	movs	r5, r6
 800b010:	782b      	ldrb	r3, [r5, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <_svfiprintf_r+0x52>
 800b016:	2b25      	cmp	r3, #37	; 0x25
 800b018:	d147      	bne.n	800b0aa <_svfiprintf_r+0xe2>
 800b01a:	1bab      	subs	r3, r5, r6
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	42b5      	cmp	r5, r6
 800b020:	d00c      	beq.n	800b03c <_svfiprintf_r+0x74>
 800b022:	0032      	movs	r2, r6
 800b024:	0039      	movs	r1, r7
 800b026:	9803      	ldr	r0, [sp, #12]
 800b028:	f7ff ff6c 	bl	800af04 <__ssputs_r>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d100      	bne.n	800b032 <_svfiprintf_r+0x6a>
 800b030:	e0ae      	b.n	800b190 <_svfiprintf_r+0x1c8>
 800b032:	6962      	ldr	r2, [r4, #20]
 800b034:	9b05      	ldr	r3, [sp, #20]
 800b036:	4694      	mov	ip, r2
 800b038:	4463      	add	r3, ip
 800b03a:	6163      	str	r3, [r4, #20]
 800b03c:	782b      	ldrb	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d100      	bne.n	800b044 <_svfiprintf_r+0x7c>
 800b042:	e0a5      	b.n	800b190 <_svfiprintf_r+0x1c8>
 800b044:	2201      	movs	r2, #1
 800b046:	2300      	movs	r3, #0
 800b048:	4252      	negs	r2, r2
 800b04a:	6062      	str	r2, [r4, #4]
 800b04c:	a904      	add	r1, sp, #16
 800b04e:	3254      	adds	r2, #84	; 0x54
 800b050:	1852      	adds	r2, r2, r1
 800b052:	1c6e      	adds	r6, r5, #1
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	60e3      	str	r3, [r4, #12]
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	7013      	strb	r3, [r2, #0]
 800b05c:	65a3      	str	r3, [r4, #88]	; 0x58
 800b05e:	2205      	movs	r2, #5
 800b060:	7831      	ldrb	r1, [r6, #0]
 800b062:	4854      	ldr	r0, [pc, #336]	; (800b1b4 <_svfiprintf_r+0x1ec>)
 800b064:	f000 fa34 	bl	800b4d0 <memchr>
 800b068:	1c75      	adds	r5, r6, #1
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d11f      	bne.n	800b0ae <_svfiprintf_r+0xe6>
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	06d3      	lsls	r3, r2, #27
 800b072:	d504      	bpl.n	800b07e <_svfiprintf_r+0xb6>
 800b074:	2353      	movs	r3, #83	; 0x53
 800b076:	a904      	add	r1, sp, #16
 800b078:	185b      	adds	r3, r3, r1
 800b07a:	2120      	movs	r1, #32
 800b07c:	7019      	strb	r1, [r3, #0]
 800b07e:	0713      	lsls	r3, r2, #28
 800b080:	d504      	bpl.n	800b08c <_svfiprintf_r+0xc4>
 800b082:	2353      	movs	r3, #83	; 0x53
 800b084:	a904      	add	r1, sp, #16
 800b086:	185b      	adds	r3, r3, r1
 800b088:	212b      	movs	r1, #43	; 0x2b
 800b08a:	7019      	strb	r1, [r3, #0]
 800b08c:	7833      	ldrb	r3, [r6, #0]
 800b08e:	2b2a      	cmp	r3, #42	; 0x2a
 800b090:	d016      	beq.n	800b0c0 <_svfiprintf_r+0xf8>
 800b092:	0035      	movs	r5, r6
 800b094:	2100      	movs	r1, #0
 800b096:	200a      	movs	r0, #10
 800b098:	68e3      	ldr	r3, [r4, #12]
 800b09a:	782a      	ldrb	r2, [r5, #0]
 800b09c:	1c6e      	adds	r6, r5, #1
 800b09e:	3a30      	subs	r2, #48	; 0x30
 800b0a0:	2a09      	cmp	r2, #9
 800b0a2:	d94e      	bls.n	800b142 <_svfiprintf_r+0x17a>
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d111      	bne.n	800b0cc <_svfiprintf_r+0x104>
 800b0a8:	e017      	b.n	800b0da <_svfiprintf_r+0x112>
 800b0aa:	3501      	adds	r5, #1
 800b0ac:	e7b0      	b.n	800b010 <_svfiprintf_r+0x48>
 800b0ae:	4b41      	ldr	r3, [pc, #260]	; (800b1b4 <_svfiprintf_r+0x1ec>)
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	1ac0      	subs	r0, r0, r3
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4083      	lsls	r3, r0
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	002e      	movs	r6, r5
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	e7ce      	b.n	800b05e <_svfiprintf_r+0x96>
 800b0c0:	9b07      	ldr	r3, [sp, #28]
 800b0c2:	1d19      	adds	r1, r3, #4
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	9107      	str	r1, [sp, #28]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	db01      	blt.n	800b0d0 <_svfiprintf_r+0x108>
 800b0cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ce:	e004      	b.n	800b0da <_svfiprintf_r+0x112>
 800b0d0:	425b      	negs	r3, r3
 800b0d2:	60e3      	str	r3, [r4, #12]
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	782b      	ldrb	r3, [r5, #0]
 800b0dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b0de:	d10a      	bne.n	800b0f6 <_svfiprintf_r+0x12e>
 800b0e0:	786b      	ldrb	r3, [r5, #1]
 800b0e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e4:	d135      	bne.n	800b152 <_svfiprintf_r+0x18a>
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	3502      	adds	r5, #2
 800b0ea:	1d1a      	adds	r2, r3, #4
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	9207      	str	r2, [sp, #28]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db2b      	blt.n	800b14c <_svfiprintf_r+0x184>
 800b0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f6:	4e30      	ldr	r6, [pc, #192]	; (800b1b8 <_svfiprintf_r+0x1f0>)
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	0030      	movs	r0, r6
 800b0fc:	7829      	ldrb	r1, [r5, #0]
 800b0fe:	f000 f9e7 	bl	800b4d0 <memchr>
 800b102:	2800      	cmp	r0, #0
 800b104:	d006      	beq.n	800b114 <_svfiprintf_r+0x14c>
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	1b80      	subs	r0, r0, r6
 800b10a:	4083      	lsls	r3, r0
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	3501      	adds	r5, #1
 800b110:	4313      	orrs	r3, r2
 800b112:	6023      	str	r3, [r4, #0]
 800b114:	7829      	ldrb	r1, [r5, #0]
 800b116:	2206      	movs	r2, #6
 800b118:	4828      	ldr	r0, [pc, #160]	; (800b1bc <_svfiprintf_r+0x1f4>)
 800b11a:	1c6e      	adds	r6, r5, #1
 800b11c:	7621      	strb	r1, [r4, #24]
 800b11e:	f000 f9d7 	bl	800b4d0 <memchr>
 800b122:	2800      	cmp	r0, #0
 800b124:	d03c      	beq.n	800b1a0 <_svfiprintf_r+0x1d8>
 800b126:	4b26      	ldr	r3, [pc, #152]	; (800b1c0 <_svfiprintf_r+0x1f8>)
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d125      	bne.n	800b178 <_svfiprintf_r+0x1b0>
 800b12c:	2207      	movs	r2, #7
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	3307      	adds	r3, #7
 800b132:	4393      	bics	r3, r2
 800b134:	3308      	adds	r3, #8
 800b136:	9307      	str	r3, [sp, #28]
 800b138:	6963      	ldr	r3, [r4, #20]
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	189b      	adds	r3, r3, r2
 800b13e:	6163      	str	r3, [r4, #20]
 800b140:	e765      	b.n	800b00e <_svfiprintf_r+0x46>
 800b142:	4343      	muls	r3, r0
 800b144:	0035      	movs	r5, r6
 800b146:	2101      	movs	r1, #1
 800b148:	189b      	adds	r3, r3, r2
 800b14a:	e7a6      	b.n	800b09a <_svfiprintf_r+0xd2>
 800b14c:	2301      	movs	r3, #1
 800b14e:	425b      	negs	r3, r3
 800b150:	e7d0      	b.n	800b0f4 <_svfiprintf_r+0x12c>
 800b152:	2300      	movs	r3, #0
 800b154:	200a      	movs	r0, #10
 800b156:	001a      	movs	r2, r3
 800b158:	3501      	adds	r5, #1
 800b15a:	6063      	str	r3, [r4, #4]
 800b15c:	7829      	ldrb	r1, [r5, #0]
 800b15e:	1c6e      	adds	r6, r5, #1
 800b160:	3930      	subs	r1, #48	; 0x30
 800b162:	2909      	cmp	r1, #9
 800b164:	d903      	bls.n	800b16e <_svfiprintf_r+0x1a6>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0c5      	beq.n	800b0f6 <_svfiprintf_r+0x12e>
 800b16a:	9209      	str	r2, [sp, #36]	; 0x24
 800b16c:	e7c3      	b.n	800b0f6 <_svfiprintf_r+0x12e>
 800b16e:	4342      	muls	r2, r0
 800b170:	0035      	movs	r5, r6
 800b172:	2301      	movs	r3, #1
 800b174:	1852      	adds	r2, r2, r1
 800b176:	e7f1      	b.n	800b15c <_svfiprintf_r+0x194>
 800b178:	ab07      	add	r3, sp, #28
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	003a      	movs	r2, r7
 800b17e:	0021      	movs	r1, r4
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <_svfiprintf_r+0x1fc>)
 800b182:	9803      	ldr	r0, [sp, #12]
 800b184:	e000      	b.n	800b188 <_svfiprintf_r+0x1c0>
 800b186:	bf00      	nop
 800b188:	9004      	str	r0, [sp, #16]
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	3301      	adds	r3, #1
 800b18e:	d1d3      	bne.n	800b138 <_svfiprintf_r+0x170>
 800b190:	89bb      	ldrh	r3, [r7, #12]
 800b192:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b194:	065b      	lsls	r3, r3, #25
 800b196:	d400      	bmi.n	800b19a <_svfiprintf_r+0x1d2>
 800b198:	e72d      	b.n	800aff6 <_svfiprintf_r+0x2e>
 800b19a:	2001      	movs	r0, #1
 800b19c:	4240      	negs	r0, r0
 800b19e:	e72a      	b.n	800aff6 <_svfiprintf_r+0x2e>
 800b1a0:	ab07      	add	r3, sp, #28
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	003a      	movs	r2, r7
 800b1a6:	0021      	movs	r1, r4
 800b1a8:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <_svfiprintf_r+0x1fc>)
 800b1aa:	9803      	ldr	r0, [sp, #12]
 800b1ac:	f000 f87c 	bl	800b2a8 <_printf_i>
 800b1b0:	e7ea      	b.n	800b188 <_svfiprintf_r+0x1c0>
 800b1b2:	46c0      	nop			; (mov r8, r8)
 800b1b4:	0800b760 	.word	0x0800b760
 800b1b8:	0800b766 	.word	0x0800b766
 800b1bc:	0800b76a 	.word	0x0800b76a
 800b1c0:	00000000 	.word	0x00000000
 800b1c4:	0800af05 	.word	0x0800af05

0800b1c8 <_printf_common>:
 800b1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ca:	0015      	movs	r5, r2
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	688a      	ldr	r2, [r1, #8]
 800b1d0:	690b      	ldr	r3, [r1, #16]
 800b1d2:	000c      	movs	r4, r1
 800b1d4:	9000      	str	r0, [sp, #0]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	da00      	bge.n	800b1dc <_printf_common+0x14>
 800b1da:	0013      	movs	r3, r2
 800b1dc:	0022      	movs	r2, r4
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	3243      	adds	r2, #67	; 0x43
 800b1e2:	7812      	ldrb	r2, [r2, #0]
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	d001      	beq.n	800b1ec <_printf_common+0x24>
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	069b      	lsls	r3, r3, #26
 800b1f0:	d502      	bpl.n	800b1f8 <_printf_common+0x30>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	3302      	adds	r3, #2
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	2306      	movs	r3, #6
 800b1fc:	0017      	movs	r7, r2
 800b1fe:	401f      	ands	r7, r3
 800b200:	421a      	tst	r2, r3
 800b202:	d027      	beq.n	800b254 <_printf_common+0x8c>
 800b204:	0023      	movs	r3, r4
 800b206:	3343      	adds	r3, #67	; 0x43
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	1e5a      	subs	r2, r3, #1
 800b20c:	4193      	sbcs	r3, r2
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	0692      	lsls	r2, r2, #26
 800b212:	d430      	bmi.n	800b276 <_printf_common+0xae>
 800b214:	0022      	movs	r2, r4
 800b216:	9901      	ldr	r1, [sp, #4]
 800b218:	9800      	ldr	r0, [sp, #0]
 800b21a:	9e08      	ldr	r6, [sp, #32]
 800b21c:	3243      	adds	r2, #67	; 0x43
 800b21e:	47b0      	blx	r6
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d025      	beq.n	800b270 <_printf_common+0xa8>
 800b224:	2306      	movs	r3, #6
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	682a      	ldr	r2, [r5, #0]
 800b22a:	68e1      	ldr	r1, [r4, #12]
 800b22c:	2500      	movs	r5, #0
 800b22e:	4003      	ands	r3, r0
 800b230:	2b04      	cmp	r3, #4
 800b232:	d103      	bne.n	800b23c <_printf_common+0x74>
 800b234:	1a8d      	subs	r5, r1, r2
 800b236:	43eb      	mvns	r3, r5
 800b238:	17db      	asrs	r3, r3, #31
 800b23a:	401d      	ands	r5, r3
 800b23c:	68a3      	ldr	r3, [r4, #8]
 800b23e:	6922      	ldr	r2, [r4, #16]
 800b240:	4293      	cmp	r3, r2
 800b242:	dd01      	ble.n	800b248 <_printf_common+0x80>
 800b244:	1a9b      	subs	r3, r3, r2
 800b246:	18ed      	adds	r5, r5, r3
 800b248:	2700      	movs	r7, #0
 800b24a:	42bd      	cmp	r5, r7
 800b24c:	d120      	bne.n	800b290 <_printf_common+0xc8>
 800b24e:	2000      	movs	r0, #0
 800b250:	e010      	b.n	800b274 <_printf_common+0xac>
 800b252:	3701      	adds	r7, #1
 800b254:	68e3      	ldr	r3, [r4, #12]
 800b256:	682a      	ldr	r2, [r5, #0]
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	42bb      	cmp	r3, r7
 800b25c:	ddd2      	ble.n	800b204 <_printf_common+0x3c>
 800b25e:	0022      	movs	r2, r4
 800b260:	2301      	movs	r3, #1
 800b262:	9901      	ldr	r1, [sp, #4]
 800b264:	9800      	ldr	r0, [sp, #0]
 800b266:	9e08      	ldr	r6, [sp, #32]
 800b268:	3219      	adds	r2, #25
 800b26a:	47b0      	blx	r6
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d1f0      	bne.n	800b252 <_printf_common+0x8a>
 800b270:	2001      	movs	r0, #1
 800b272:	4240      	negs	r0, r0
 800b274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b276:	2030      	movs	r0, #48	; 0x30
 800b278:	18e1      	adds	r1, r4, r3
 800b27a:	3143      	adds	r1, #67	; 0x43
 800b27c:	7008      	strb	r0, [r1, #0]
 800b27e:	0021      	movs	r1, r4
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	3145      	adds	r1, #69	; 0x45
 800b284:	7809      	ldrb	r1, [r1, #0]
 800b286:	18a2      	adds	r2, r4, r2
 800b288:	3243      	adds	r2, #67	; 0x43
 800b28a:	3302      	adds	r3, #2
 800b28c:	7011      	strb	r1, [r2, #0]
 800b28e:	e7c1      	b.n	800b214 <_printf_common+0x4c>
 800b290:	0022      	movs	r2, r4
 800b292:	2301      	movs	r3, #1
 800b294:	9901      	ldr	r1, [sp, #4]
 800b296:	9800      	ldr	r0, [sp, #0]
 800b298:	9e08      	ldr	r6, [sp, #32]
 800b29a:	321a      	adds	r2, #26
 800b29c:	47b0      	blx	r6
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	d0e6      	beq.n	800b270 <_printf_common+0xa8>
 800b2a2:	3701      	adds	r7, #1
 800b2a4:	e7d1      	b.n	800b24a <_printf_common+0x82>
	...

0800b2a8 <_printf_i>:
 800b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2aa:	b08b      	sub	sp, #44	; 0x2c
 800b2ac:	9206      	str	r2, [sp, #24]
 800b2ae:	000a      	movs	r2, r1
 800b2b0:	3243      	adds	r2, #67	; 0x43
 800b2b2:	9307      	str	r3, [sp, #28]
 800b2b4:	9005      	str	r0, [sp, #20]
 800b2b6:	9204      	str	r2, [sp, #16]
 800b2b8:	7e0a      	ldrb	r2, [r1, #24]
 800b2ba:	000c      	movs	r4, r1
 800b2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2be:	2a78      	cmp	r2, #120	; 0x78
 800b2c0:	d806      	bhi.n	800b2d0 <_printf_i+0x28>
 800b2c2:	2a62      	cmp	r2, #98	; 0x62
 800b2c4:	d808      	bhi.n	800b2d8 <_printf_i+0x30>
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	d100      	bne.n	800b2cc <_printf_i+0x24>
 800b2ca:	e0c0      	b.n	800b44e <_printf_i+0x1a6>
 800b2cc:	2a58      	cmp	r2, #88	; 0x58
 800b2ce:	d052      	beq.n	800b376 <_printf_i+0xce>
 800b2d0:	0026      	movs	r6, r4
 800b2d2:	3642      	adds	r6, #66	; 0x42
 800b2d4:	7032      	strb	r2, [r6, #0]
 800b2d6:	e022      	b.n	800b31e <_printf_i+0x76>
 800b2d8:	0010      	movs	r0, r2
 800b2da:	3863      	subs	r0, #99	; 0x63
 800b2dc:	2815      	cmp	r0, #21
 800b2de:	d8f7      	bhi.n	800b2d0 <_printf_i+0x28>
 800b2e0:	f7f4 ff1a 	bl	8000118 <__gnu_thumb1_case_shi>
 800b2e4:	001f0016 	.word	0x001f0016
 800b2e8:	fff6fff6 	.word	0xfff6fff6
 800b2ec:	fff6fff6 	.word	0xfff6fff6
 800b2f0:	fff6001f 	.word	0xfff6001f
 800b2f4:	fff6fff6 	.word	0xfff6fff6
 800b2f8:	00a8fff6 	.word	0x00a8fff6
 800b2fc:	009a0036 	.word	0x009a0036
 800b300:	fff6fff6 	.word	0xfff6fff6
 800b304:	fff600b9 	.word	0xfff600b9
 800b308:	fff60036 	.word	0xfff60036
 800b30c:	009efff6 	.word	0x009efff6
 800b310:	0026      	movs	r6, r4
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	3642      	adds	r6, #66	; 0x42
 800b316:	1d11      	adds	r1, r2, #4
 800b318:	6019      	str	r1, [r3, #0]
 800b31a:	6813      	ldr	r3, [r2, #0]
 800b31c:	7033      	strb	r3, [r6, #0]
 800b31e:	2301      	movs	r3, #1
 800b320:	e0a7      	b.n	800b472 <_printf_i+0x1ca>
 800b322:	6808      	ldr	r0, [r1, #0]
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	1d0a      	adds	r2, r1, #4
 800b328:	0605      	lsls	r5, r0, #24
 800b32a:	d50b      	bpl.n	800b344 <_printf_i+0x9c>
 800b32c:	680d      	ldr	r5, [r1, #0]
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	2d00      	cmp	r5, #0
 800b332:	da03      	bge.n	800b33c <_printf_i+0x94>
 800b334:	232d      	movs	r3, #45	; 0x2d
 800b336:	9a04      	ldr	r2, [sp, #16]
 800b338:	426d      	negs	r5, r5
 800b33a:	7013      	strb	r3, [r2, #0]
 800b33c:	4b61      	ldr	r3, [pc, #388]	; (800b4c4 <_printf_i+0x21c>)
 800b33e:	270a      	movs	r7, #10
 800b340:	9303      	str	r3, [sp, #12]
 800b342:	e032      	b.n	800b3aa <_printf_i+0x102>
 800b344:	680d      	ldr	r5, [r1, #0]
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	0641      	lsls	r1, r0, #25
 800b34a:	d5f1      	bpl.n	800b330 <_printf_i+0x88>
 800b34c:	b22d      	sxth	r5, r5
 800b34e:	e7ef      	b.n	800b330 <_printf_i+0x88>
 800b350:	680d      	ldr	r5, [r1, #0]
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	1d08      	adds	r0, r1, #4
 800b356:	6018      	str	r0, [r3, #0]
 800b358:	062e      	lsls	r6, r5, #24
 800b35a:	d501      	bpl.n	800b360 <_printf_i+0xb8>
 800b35c:	680d      	ldr	r5, [r1, #0]
 800b35e:	e003      	b.n	800b368 <_printf_i+0xc0>
 800b360:	066d      	lsls	r5, r5, #25
 800b362:	d5fb      	bpl.n	800b35c <_printf_i+0xb4>
 800b364:	680d      	ldr	r5, [r1, #0]
 800b366:	b2ad      	uxth	r5, r5
 800b368:	4b56      	ldr	r3, [pc, #344]	; (800b4c4 <_printf_i+0x21c>)
 800b36a:	270a      	movs	r7, #10
 800b36c:	9303      	str	r3, [sp, #12]
 800b36e:	2a6f      	cmp	r2, #111	; 0x6f
 800b370:	d117      	bne.n	800b3a2 <_printf_i+0xfa>
 800b372:	2708      	movs	r7, #8
 800b374:	e015      	b.n	800b3a2 <_printf_i+0xfa>
 800b376:	3145      	adds	r1, #69	; 0x45
 800b378:	700a      	strb	r2, [r1, #0]
 800b37a:	4a52      	ldr	r2, [pc, #328]	; (800b4c4 <_printf_i+0x21c>)
 800b37c:	9203      	str	r2, [sp, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	6821      	ldr	r1, [r4, #0]
 800b382:	ca20      	ldmia	r2!, {r5}
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	0608      	lsls	r0, r1, #24
 800b388:	d550      	bpl.n	800b42c <_printf_i+0x184>
 800b38a:	07cb      	lsls	r3, r1, #31
 800b38c:	d502      	bpl.n	800b394 <_printf_i+0xec>
 800b38e:	2320      	movs	r3, #32
 800b390:	4319      	orrs	r1, r3
 800b392:	6021      	str	r1, [r4, #0]
 800b394:	2710      	movs	r7, #16
 800b396:	2d00      	cmp	r5, #0
 800b398:	d103      	bne.n	800b3a2 <_printf_i+0xfa>
 800b39a:	2320      	movs	r3, #32
 800b39c:	6822      	ldr	r2, [r4, #0]
 800b39e:	439a      	bics	r2, r3
 800b3a0:	6022      	str	r2, [r4, #0]
 800b3a2:	0023      	movs	r3, r4
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	3343      	adds	r3, #67	; 0x43
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	6863      	ldr	r3, [r4, #4]
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	db03      	blt.n	800b3ba <_printf_i+0x112>
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	6821      	ldr	r1, [r4, #0]
 800b3b6:	4391      	bics	r1, r2
 800b3b8:	6021      	str	r1, [r4, #0]
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	d102      	bne.n	800b3c4 <_printf_i+0x11c>
 800b3be:	9e04      	ldr	r6, [sp, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <_printf_i+0x136>
 800b3c4:	9e04      	ldr	r6, [sp, #16]
 800b3c6:	0028      	movs	r0, r5
 800b3c8:	0039      	movs	r1, r7
 800b3ca:	f7f4 ff35 	bl	8000238 <__aeabi_uidivmod>
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	3e01      	subs	r6, #1
 800b3d2:	5c5b      	ldrb	r3, [r3, r1]
 800b3d4:	7033      	strb	r3, [r6, #0]
 800b3d6:	002b      	movs	r3, r5
 800b3d8:	0005      	movs	r5, r0
 800b3da:	429f      	cmp	r7, r3
 800b3dc:	d9f3      	bls.n	800b3c6 <_printf_i+0x11e>
 800b3de:	2f08      	cmp	r7, #8
 800b3e0:	d109      	bne.n	800b3f6 <_printf_i+0x14e>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	07db      	lsls	r3, r3, #31
 800b3e6:	d506      	bpl.n	800b3f6 <_printf_i+0x14e>
 800b3e8:	6863      	ldr	r3, [r4, #4]
 800b3ea:	6922      	ldr	r2, [r4, #16]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	dc02      	bgt.n	800b3f6 <_printf_i+0x14e>
 800b3f0:	2330      	movs	r3, #48	; 0x30
 800b3f2:	3e01      	subs	r6, #1
 800b3f4:	7033      	strb	r3, [r6, #0]
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	1b9b      	subs	r3, r3, r6
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	9b07      	ldr	r3, [sp, #28]
 800b3fe:	0021      	movs	r1, r4
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	9805      	ldr	r0, [sp, #20]
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	aa09      	add	r2, sp, #36	; 0x24
 800b408:	f7ff fede 	bl	800b1c8 <_printf_common>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d135      	bne.n	800b47c <_printf_i+0x1d4>
 800b410:	2001      	movs	r0, #1
 800b412:	4240      	negs	r0, r0
 800b414:	b00b      	add	sp, #44	; 0x2c
 800b416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b418:	2220      	movs	r2, #32
 800b41a:	6809      	ldr	r1, [r1, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	6022      	str	r2, [r4, #0]
 800b420:	0022      	movs	r2, r4
 800b422:	2178      	movs	r1, #120	; 0x78
 800b424:	3245      	adds	r2, #69	; 0x45
 800b426:	7011      	strb	r1, [r2, #0]
 800b428:	4a27      	ldr	r2, [pc, #156]	; (800b4c8 <_printf_i+0x220>)
 800b42a:	e7a7      	b.n	800b37c <_printf_i+0xd4>
 800b42c:	0648      	lsls	r0, r1, #25
 800b42e:	d5ac      	bpl.n	800b38a <_printf_i+0xe2>
 800b430:	b2ad      	uxth	r5, r5
 800b432:	e7aa      	b.n	800b38a <_printf_i+0xe2>
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	680d      	ldr	r5, [r1, #0]
 800b438:	1d10      	adds	r0, r2, #4
 800b43a:	6949      	ldr	r1, [r1, #20]
 800b43c:	6018      	str	r0, [r3, #0]
 800b43e:	6813      	ldr	r3, [r2, #0]
 800b440:	062e      	lsls	r6, r5, #24
 800b442:	d501      	bpl.n	800b448 <_printf_i+0x1a0>
 800b444:	6019      	str	r1, [r3, #0]
 800b446:	e002      	b.n	800b44e <_printf_i+0x1a6>
 800b448:	066d      	lsls	r5, r5, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0x19c>
 800b44c:	8019      	strh	r1, [r3, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	9e04      	ldr	r6, [sp, #16]
 800b452:	6123      	str	r3, [r4, #16]
 800b454:	e7d2      	b.n	800b3fc <_printf_i+0x154>
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	1d11      	adds	r1, r2, #4
 800b45a:	6019      	str	r1, [r3, #0]
 800b45c:	6816      	ldr	r6, [r2, #0]
 800b45e:	2100      	movs	r1, #0
 800b460:	0030      	movs	r0, r6
 800b462:	6862      	ldr	r2, [r4, #4]
 800b464:	f000 f834 	bl	800b4d0 <memchr>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d001      	beq.n	800b470 <_printf_i+0x1c8>
 800b46c:	1b80      	subs	r0, r0, r6
 800b46e:	6060      	str	r0, [r4, #4]
 800b470:	6863      	ldr	r3, [r4, #4]
 800b472:	6123      	str	r3, [r4, #16]
 800b474:	2300      	movs	r3, #0
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	7013      	strb	r3, [r2, #0]
 800b47a:	e7bf      	b.n	800b3fc <_printf_i+0x154>
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	0032      	movs	r2, r6
 800b480:	9906      	ldr	r1, [sp, #24]
 800b482:	9805      	ldr	r0, [sp, #20]
 800b484:	9d07      	ldr	r5, [sp, #28]
 800b486:	47a8      	blx	r5
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d0c1      	beq.n	800b410 <_printf_i+0x168>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	079b      	lsls	r3, r3, #30
 800b490:	d415      	bmi.n	800b4be <_printf_i+0x216>
 800b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b494:	68e0      	ldr	r0, [r4, #12]
 800b496:	4298      	cmp	r0, r3
 800b498:	dabc      	bge.n	800b414 <_printf_i+0x16c>
 800b49a:	0018      	movs	r0, r3
 800b49c:	e7ba      	b.n	800b414 <_printf_i+0x16c>
 800b49e:	0022      	movs	r2, r4
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	9906      	ldr	r1, [sp, #24]
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	9e07      	ldr	r6, [sp, #28]
 800b4a8:	3219      	adds	r2, #25
 800b4aa:	47b0      	blx	r6
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d0af      	beq.n	800b410 <_printf_i+0x168>
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b6:	1a9b      	subs	r3, r3, r2
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	dcf0      	bgt.n	800b49e <_printf_i+0x1f6>
 800b4bc:	e7e9      	b.n	800b492 <_printf_i+0x1ea>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	e7f7      	b.n	800b4b2 <_printf_i+0x20a>
 800b4c2:	46c0      	nop			; (mov r8, r8)
 800b4c4:	0800b771 	.word	0x0800b771
 800b4c8:	0800b782 	.word	0x0800b782

0800b4cc <__retarget_lock_acquire_recursive>:
 800b4cc:	4770      	bx	lr

0800b4ce <__retarget_lock_release_recursive>:
 800b4ce:	4770      	bx	lr

0800b4d0 <memchr>:
 800b4d0:	b2c9      	uxtb	r1, r1
 800b4d2:	1882      	adds	r2, r0, r2
 800b4d4:	4290      	cmp	r0, r2
 800b4d6:	d101      	bne.n	800b4dc <memchr+0xc>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	4770      	bx	lr
 800b4dc:	7803      	ldrb	r3, [r0, #0]
 800b4de:	428b      	cmp	r3, r1
 800b4e0:	d0fb      	beq.n	800b4da <memchr+0xa>
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	e7f6      	b.n	800b4d4 <memchr+0x4>

0800b4e6 <memcpy>:
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d100      	bne.n	800b4f0 <memcpy+0xa>
 800b4ee:	bd10      	pop	{r4, pc}
 800b4f0:	5ccc      	ldrb	r4, [r1, r3]
 800b4f2:	54c4      	strb	r4, [r0, r3]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	e7f8      	b.n	800b4ea <memcpy+0x4>

0800b4f8 <memmove>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4288      	cmp	r0, r1
 800b4fc:	d902      	bls.n	800b504 <memmove+0xc>
 800b4fe:	188b      	adds	r3, r1, r2
 800b500:	4298      	cmp	r0, r3
 800b502:	d303      	bcc.n	800b50c <memmove+0x14>
 800b504:	2300      	movs	r3, #0
 800b506:	e007      	b.n	800b518 <memmove+0x20>
 800b508:	5c8b      	ldrb	r3, [r1, r2]
 800b50a:	5483      	strb	r3, [r0, r2]
 800b50c:	3a01      	subs	r2, #1
 800b50e:	d2fb      	bcs.n	800b508 <memmove+0x10>
 800b510:	bd10      	pop	{r4, pc}
 800b512:	5ccc      	ldrb	r4, [r1, r3]
 800b514:	54c4      	strb	r4, [r0, r3]
 800b516:	3301      	adds	r3, #1
 800b518:	429a      	cmp	r2, r3
 800b51a:	d1fa      	bne.n	800b512 <memmove+0x1a>
 800b51c:	e7f8      	b.n	800b510 <memmove+0x18>

0800b51e <_realloc_r>:
 800b51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b520:	0007      	movs	r7, r0
 800b522:	000d      	movs	r5, r1
 800b524:	0016      	movs	r6, r2
 800b526:	2900      	cmp	r1, #0
 800b528:	d105      	bne.n	800b536 <_realloc_r+0x18>
 800b52a:	0011      	movs	r1, r2
 800b52c:	f7ff fc4a 	bl	800adc4 <_malloc_r>
 800b530:	0004      	movs	r4, r0
 800b532:	0020      	movs	r0, r4
 800b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b536:	2a00      	cmp	r2, #0
 800b538:	d103      	bne.n	800b542 <_realloc_r+0x24>
 800b53a:	f7ff fbf9 	bl	800ad30 <_free_r>
 800b53e:	0034      	movs	r4, r6
 800b540:	e7f7      	b.n	800b532 <_realloc_r+0x14>
 800b542:	f000 f812 	bl	800b56a <_malloc_usable_size_r>
 800b546:	002c      	movs	r4, r5
 800b548:	42b0      	cmp	r0, r6
 800b54a:	d2f2      	bcs.n	800b532 <_realloc_r+0x14>
 800b54c:	0031      	movs	r1, r6
 800b54e:	0038      	movs	r0, r7
 800b550:	f7ff fc38 	bl	800adc4 <_malloc_r>
 800b554:	1e04      	subs	r4, r0, #0
 800b556:	d0ec      	beq.n	800b532 <_realloc_r+0x14>
 800b558:	0029      	movs	r1, r5
 800b55a:	0032      	movs	r2, r6
 800b55c:	f7ff ffc3 	bl	800b4e6 <memcpy>
 800b560:	0029      	movs	r1, r5
 800b562:	0038      	movs	r0, r7
 800b564:	f7ff fbe4 	bl	800ad30 <_free_r>
 800b568:	e7e3      	b.n	800b532 <_realloc_r+0x14>

0800b56a <_malloc_usable_size_r>:
 800b56a:	1f0b      	subs	r3, r1, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	1f18      	subs	r0, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	da01      	bge.n	800b578 <_malloc_usable_size_r+0xe>
 800b574:	580b      	ldr	r3, [r1, r0]
 800b576:	18c0      	adds	r0, r0, r3
 800b578:	4770      	bx	lr
	...

0800b57c <_init>:
 800b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b582:	bc08      	pop	{r3}
 800b584:	469e      	mov	lr, r3
 800b586:	4770      	bx	lr

0800b588 <_fini>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b58e:	bc08      	pop	{r3}
 800b590:	469e      	mov	lr, r3
 800b592:	4770      	bx	lr
