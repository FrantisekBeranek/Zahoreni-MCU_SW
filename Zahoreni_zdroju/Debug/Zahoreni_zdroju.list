
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a4  0800b8a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8a4  0800b8a4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8a4  0800b8a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a4  0800b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a8  0800b8a8  0001b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  200001e0  0800ba8c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0800ba8c  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002742e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f4  00000000  00000000  00047636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0004bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0004d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f32c  00000000  00000000  0004eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e056  00000000  00000000  0006ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3cd9  00000000  00000000  0008be4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fb23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  0012fb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b68c 	.word	0x0800b68c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b68c 	.word	0x0800b68c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	429a      	cmp	r2, r3
 800042e:	d104      	bne.n	800043a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.butt0_int = 1;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000432:	781a      	ldrb	r2, [r3, #0]
 8000434:	2110      	movs	r1, #16
 8000436:	430a      	orrs	r2, r1
 8000438:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	429a      	cmp	r2, r3
 8000444:	d104      	bne.n	8000450 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.butt1_int = 1;
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	701a      	strb	r2, [r3, #0]
	}
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000058c 	.word	0x2000058c

0800045c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000468:	429a      	cmp	r2, r3
 800046a:	d104      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.ten_ms = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	}
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000544 	.word	0x20000544
 8000484:	2000058c 	.word	0x2000058c

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f001 f94e 	bl	800172c <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000490:	2064      	movs	r0, #100	; 0x64
 8000492:	f000 fe28 	bl	80010e6 <createBuffer>
 8000496:	0002      	movs	r2, r0
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <main+0x84>)
 800049a:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 fe22 	bl	80010e6 <createBuffer>
 80004a2:	0002      	movs	r2, r0
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <main+0x88>)
 80004a6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fe1a 	bl	80010e6 <createBuffer>
 80004b2:	0002      	movs	r2, r0
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <main+0x8c>)
 80004b6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe12 	bl	80010e6 <createBuffer>
 80004c2:	0002      	movs	r2, r0
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <main+0x90>)
 80004c6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa94 	bl	80009f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f009 ff0a 	bl	800a2e8 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80004d4:	f000 fa72 	bl	80009bc <MX_DMA_Init>
  MX_ADC_Init();
 80004d8:	f000 f890 	bl	80005fc <MX_ADC_Init>
  MX_SPI1_Init();
 80004dc:	f000 f9ac 	bl	8000838 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80004e0:	f000 fa3c 	bl	800095c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80004e4:	f000 f9ee 	bl	80008c4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <main+0x94>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f004 fd96 	bl	800501c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.ten_ms)	// 10 ms
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <main+0x98>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2201      	movs	r2, #1
 80004f6:	4013      	ands	r3, r2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <main+0x68>
	  {
		  clkHandler();
 80004fe:	f000 fb67 	bl	8000bd0 <clkHandler>
		  buttonDebounce();
 8000502:	f000 fc0f 	bl	8000d24 <buttonDebounce>
		  comHandler();
 8000506:	f000 fc89 	bl	8000e1c <comHandler>
	  if(flags.ten_ms)	// 10 ms
 800050a:	e7f1      	b.n	80004f0 <main+0x68>
 800050c:	20000448 	.word	0x20000448
 8000510:	20000450 	.word	0x20000450
 8000514:	200010ac 	.word	0x200010ac
 8000518:	200004dc 	.word	0x200004dc
 800051c:	20000544 	.word	0x20000544
 8000520:	2000058c 	.word	0x2000058c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b099      	sub	sp, #100	; 0x64
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	242c      	movs	r4, #44	; 0x2c
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f00a fc7b 	bl	800ae30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	231c      	movs	r3, #28
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2310      	movs	r3, #16
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f00a fc73 	bl	800ae30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	231c      	movs	r3, #28
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f00a fc6c 	bl	800ae30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000558:	0021      	movs	r1, r4
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2232      	movs	r2, #50	; 0x32
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2201      	movs	r2, #1
 8000564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2201      	movs	r2, #1
 8000570:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2210      	movs	r2, #16
 8000576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2210      	movs	r2, #16
 800057c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0212      	lsls	r2, r2, #8
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0352      	lsls	r2, r2, #13
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0018      	movs	r0, r3
 800059e:	f003 fe35 	bl	800420c <HAL_RCC_OscConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005a6:	f000 fd99 	bl	80010dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	211c      	movs	r1, #28
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2207      	movs	r2, #7
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2101      	movs	r1, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f004 f9a5 	bl	8004918 <HAL_RCC_ClockConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005d2:	f000 fd83 	bl	80010dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d6:	003b      	movs	r3, r7
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	0292      	lsls	r2, r2, #10
 80005dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e4:	003b      	movs	r3, r7
 80005e6:	0018      	movs	r0, r3
 80005e8:	f004 fb12 	bl	8004c10 <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f0:	f000 fd74 	bl	80010dc <Error_Handler>
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b019      	add	sp, #100	; 0x64
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f00a fc10 	bl	800ae30 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000610:	4b87      	ldr	r3, [pc, #540]	; (8000830 <MX_ADC_Init+0x234>)
 8000612:	4a88      	ldr	r2, [pc, #544]	; (8000834 <MX_ADC_Init+0x238>)
 8000614:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000616:	4b86      	ldr	r3, [pc, #536]	; (8000830 <MX_ADC_Init+0x234>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b84      	ldr	r3, [pc, #528]	; (8000830 <MX_ADC_Init+0x234>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b83      	ldr	r3, [pc, #524]	; (8000830 <MX_ADC_Init+0x234>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000628:	4b81      	ldr	r3, [pc, #516]	; (8000830 <MX_ADC_Init+0x234>)
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b80      	ldr	r3, [pc, #512]	; (8000830 <MX_ADC_Init+0x234>)
 8000630:	2204      	movs	r2, #4
 8000632:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000634:	4b7e      	ldr	r3, [pc, #504]	; (8000830 <MX_ADC_Init+0x234>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800063a:	4b7d      	ldr	r3, [pc, #500]	; (8000830 <MX_ADC_Init+0x234>)
 800063c:	2200      	movs	r2, #0
 800063e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000640:	4b7b      	ldr	r3, [pc, #492]	; (8000830 <MX_ADC_Init+0x234>)
 8000642:	2200      	movs	r2, #0
 8000644:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b7a      	ldr	r3, [pc, #488]	; (8000830 <MX_ADC_Init+0x234>)
 8000648:	2200      	movs	r2, #0
 800064a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b78      	ldr	r3, [pc, #480]	; (8000830 <MX_ADC_Init+0x234>)
 800064e:	22c2      	movs	r2, #194	; 0xc2
 8000650:	32ff      	adds	r2, #255	; 0xff
 8000652:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b76      	ldr	r3, [pc, #472]	; (8000830 <MX_ADC_Init+0x234>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b75      	ldr	r3, [pc, #468]	; (8000830 <MX_ADC_Init+0x234>)
 800065c:	2224      	movs	r2, #36	; 0x24
 800065e:	2100      	movs	r1, #0
 8000660:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b73      	ldr	r3, [pc, #460]	; (8000830 <MX_ADC_Init+0x234>)
 8000664:	2201      	movs	r2, #1
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000668:	4b71      	ldr	r3, [pc, #452]	; (8000830 <MX_ADC_Init+0x234>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f8c2 	bl	80017f4 <HAL_ADC_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 fd32 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0552      	lsls	r2, r2, #21
 800068c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	4b67      	ldr	r3, [pc, #412]	; (8000830 <MX_ADC_Init+0x234>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f9ed 	bl	8001a74 <HAL_ADC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 fd1d 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	1d3a      	adds	r2, r7, #4
 80006aa:	4b61      	ldr	r3, [pc, #388]	; (8000830 <MX_ADC_Init+0x234>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 f9e0 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006b8:	f000 fd10 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <MX_ADC_Init+0x234>)
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f9d3 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80006d2:	f000 fd03 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2203      	movs	r2, #3
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006dc:	1d3a      	adds	r2, r7, #4
 80006de:	4b54      	ldr	r3, [pc, #336]	; (8000830 <MX_ADC_Init+0x234>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 f9c6 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80006ec:	f000 fcf6 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2204      	movs	r2, #4
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f6:	1d3a      	adds	r2, r7, #4
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <MX_ADC_Init+0x234>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f9b9 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000706:	f000 fce9 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2205      	movs	r2, #5
 800070e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000710:	1d3a      	adds	r2, r7, #4
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <MX_ADC_Init+0x234>)
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f9ac 	bl	8001a74 <HAL_ADC_ConfigChannel>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000720:	f000 fcdc 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2206      	movs	r2, #6
 8000728:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <MX_ADC_Init+0x234>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f99f 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800073a:	f000 fccf 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_ADC_Init+0x234>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f001 f992 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000754:	f000 fcc2 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2208      	movs	r2, #8
 800075c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075e:	1d3a      	adds	r2, r7, #4
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_ADC_Init+0x234>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f985 	bl	8001a74 <HAL_ADC_ConfigChannel>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800076e:	f000 fcb5 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2209      	movs	r2, #9
 8000776:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000778:	1d3a      	adds	r2, r7, #4
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_ADC_Init+0x234>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f001 f978 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000788:	f000 fca8 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	220a      	movs	r2, #10
 8000790:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC_Init+0x234>)
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f001 f96b 	bl	8001a74 <HAL_ADC_ConfigChannel>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80007a2:	f000 fc9b 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	220b      	movs	r2, #11
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC_Init+0x234>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 f95e 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80007bc:	f000 fc8e 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC_Init+0x234>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f951 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80007d6:	f000 fc81 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	220d      	movs	r2, #13
 80007de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC_Init+0x234>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 f944 	bl	8001a74 <HAL_ADC_ConfigChannel>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80007f0:	f000 fc74 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	220e      	movs	r2, #14
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_ADC_Init+0x234>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 f937 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800080a:	f000 fc67 	bl	80010dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	220f      	movs	r2, #15
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_ADC_Init+0x234>)
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f92a 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000824:	f000 fc5a 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b004      	add	sp, #16
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200005d4 	.word	0x200005d4
 8000834:	40012400 	.word	0x40012400

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_SPI1_Init+0x80>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_SPI1_Init+0x84>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000844:	2282      	movs	r2, #130	; 0x82
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_SPI1_Init+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000852:	22e0      	movs	r2, #224	; 0xe0
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x80>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x80>)
 800086e:	2238      	movs	r2, #56	; 0x38
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x80>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SPI1_Init+0x80>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000892:	2208      	movs	r2, #8
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SPI1_Init+0x80>)
 8000898:	0018      	movs	r0, r3
 800089a:	f004 fab7 	bl	8004e0c <HAL_SPI_Init>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fc1b 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI1_Init+0x88>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2140      	movs	r1, #64	; 0x40
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fde6 	bl	800247e <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200004e0 	.word	0x200004e0
 80008bc:	40013000 	.word	0x40013000
 80008c0:	48000400 	.word	0x48000400

080008c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	231c      	movs	r3, #28
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f00a faac 	bl	800ae30 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM14_Init+0x90>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e0:	222f      	movs	r2, #47	; 0x2f
 80008e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_TIM14_Init+0x94>)
 80008ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_TIM14_Init+0x8c>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f004 fb3c 	bl	8004f7c <HAL_TIM_Base_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000908:	f000 fbe8 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_TIM14_Init+0x8c>)
 800090e:	0018      	movs	r0, r3
 8000910:	f004 fbd6 	bl	80050c0 <HAL_TIM_OC_Init>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 fbe0 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_TIM14_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f004 fd2e 	bl	800539c <HAL_TIM_OC_ConfigChannel>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000944:	f000 fbca 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b008      	add	sp, #32
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000544 	.word	0x20000544
 8000954:	40002000 	.word	0x40002000
 8000958:	0000270f 	.word	0x0000270f

0800095c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART3_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000968:	2296      	movs	r2, #150	; 0x96
 800096a:	0212      	lsls	r2, r2, #8
 800096c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_USART3_UART_Init+0x58>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f004 ffff 	bl	80059a4 <HAL_UART_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 fb97 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000458 	.word	0x20000458
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_DMA_Init+0x38>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2009      	movs	r0, #9
 80009e0:	f001 fa02 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e4:	2009      	movs	r0, #9
 80009e6:	f001 fa14 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	2414      	movs	r4, #20
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2314      	movs	r3, #20
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f00a fa11 	bl	800ae30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b6a      	ldr	r3, [pc, #424]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	03c9      	lsls	r1, r1, #15
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b67      	ldr	r3, [pc, #412]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0309      	lsls	r1, r1, #12
 8000a34:	430a      	orrs	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	031b      	lsls	r3, r3, #12
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a48:	695a      	ldr	r2, [r3, #20]
 8000a4a:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	0289      	lsls	r1, r1, #10
 8000a50:	430a      	orrs	r2, r1
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	029b      	lsls	r3, r3, #10
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	02c9      	lsls	r1, r1, #11
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	02db      	lsls	r3, r3, #11
 8000a78:	4013      	ands	r3, r2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0349      	lsls	r1, r1, #13
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <MX_GPIO_Init+0x1c4>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	035b      	lsls	r3, r3, #13
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000a9a:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <MX_GPIO_Init+0x1c8>)
 8000a9c:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <MX_GPIO_Init+0x1cc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fcec 	bl	800247e <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000aa6:	239e      	movs	r3, #158	; 0x9e
 8000aa8:	015b      	lsls	r3, r3, #5
 8000aaa:	4847      	ldr	r0, [pc, #284]	; (8000bc8 <MX_GPIO_Init+0x1d0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f001 fce5 	bl	800247e <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	0219      	lsls	r1, r3, #8
 8000ab8:	2390      	movs	r3, #144	; 0x90
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fcdd 	bl	800247e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <MX_GPIO_Init+0x1c8>)
 8000ac8:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2201      	movs	r2, #1
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x1cc>)
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	f001 fb36 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ae8:	0021      	movs	r1, r4
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	229e      	movs	r2, #158	; 0x9e
 8000aee:	0152      	lsls	r2, r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	000c      	movs	r4, r1
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2201      	movs	r2, #1
 8000af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0x1d0>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f001 fb21 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	22c0      	movs	r2, #192	; 0xc0
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2288      	movs	r2, #136	; 0x88
 8000b1e:	0352      	lsls	r2, r2, #13
 8000b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2202      	movs	r2, #2
 8000b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	193a      	adds	r2, r7, r4
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fb0f 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	00d2      	lsls	r2, r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	193a      	adds	r2, r7, r4
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fafe 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000b58:	0021      	movs	r1, r4
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0212      	lsls	r2, r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	000c      	movs	r4, r1
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fae8 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2204      	movs	r2, #4
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <MX_GPIO_Init+0x1d4>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f001 fad9 	bl	8002154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f001 f91e 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bac:	2007      	movs	r0, #7
 8000bae:	f001 f930 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b00b      	add	sp, #44	; 0x2c
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	0000f3c4 	.word	0x0000f3c4
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00

08000bd0 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af02      	add	r7, sp, #8
	flags.ten_ms = 0;
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <clkHandler+0x138>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	438a      	bics	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
	flags.sec	= 0;
 8000be0:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <clkHandler+0x138>)
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	2102      	movs	r1, #2
 8000be6:	438a      	bics	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
	flags.min	= 0;
 8000bea:	4b47      	ldr	r3, [pc, #284]	; (8000d08 <clkHandler+0x138>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	2104      	movs	r1, #4
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
	flags.hour	= 0;
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <clkHandler+0x138>)
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	sysTime++;
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <clkHandler+0x13c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <clkHandler+0x13c>)
 8000c06:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8000c08:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <clkHandler+0x13c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2164      	movs	r1, #100	; 0x64
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb12 	bl	8000238 <__aeabi_uidivmod>
 8000c14:	1e0b      	subs	r3, r1, #0
 8000c16:	d109      	bne.n	8000c2c <clkHandler+0x5c>
	{
		sysTime_sec++;
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <clkHandler+0x140>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <clkHandler+0x140>)
 8000c20:	601a      	str	r2, [r3, #0]
		flags.sec = 1;
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <clkHandler+0x138>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	2102      	movs	r1, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
	}

	if(flags.sec)
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <clkHandler+0x138>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2202      	movs	r2, #2
 8000c32:	4013      	ands	r3, r2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d042      	beq.n	8000cc0 <clkHandler+0xf0>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <clkHandler+0x140>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	213c      	movs	r1, #60	; 0x3c
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff faf9 	bl	8000238 <__aeabi_uidivmod>
 8000c46:	1e0b      	subs	r3, r1, #0
 8000c48:	d110      	bne.n	8000c6c <clkHandler+0x9c>
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <clkHandler+0x140>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00c      	beq.n	8000c6c <clkHandler+0x9c>
		{
			sysTime_sec = 0;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <clkHandler+0x140>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <clkHandler+0x144>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <clkHandler+0x144>)
 8000c60:	601a      	str	r2, [r3, #0]
			flags.min = 1;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <clkHandler+0x138>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	2104      	movs	r1, #4
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
		}

		if(flags.min)
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <clkHandler+0x138>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2204      	movs	r2, #4
 8000c72:	4013      	ands	r3, r2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d022      	beq.n	8000cc0 <clkHandler+0xf0>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <clkHandler+0x144>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	213c      	movs	r1, #60	; 0x3c
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fad9 	bl	8000238 <__aeabi_uidivmod>
 8000c86:	1e0b      	subs	r3, r1, #0
 8000c88:	d11a      	bne.n	8000cc0 <clkHandler+0xf0>
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <clkHandler+0x144>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d016      	beq.n	8000cc0 <clkHandler+0xf0>
			{

				sysTime_sec = 0;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <clkHandler+0x140>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <clkHandler+0x144>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <clkHandler+0x148>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <clkHandler+0x148>)
 8000ca6:	601a      	str	r2, [r3, #0]
				flags.hour = 1;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <clkHandler+0x138>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	2108      	movs	r1, #8
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
				if(sysTime_hour >= 23)
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <clkHandler+0x148>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b16      	cmp	r3, #22
 8000cb8:	d902      	bls.n	8000cc0 <clkHandler+0xf0>
					sysTime_hour = 0;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <clkHandler+0x148>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(flags.sec)
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <clkHandler+0x138>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d018      	beq.n	8000d00 <clkHandler+0x130>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <clkHandler+0x148>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <clkHandler+0x144>)
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <clkHandler+0x140>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <clkHandler+0x14c>)
 8000cdc:	0038      	movs	r0, r7
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	f00a f967 	bl	800afb4 <siprintf>
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <clkHandler+0x150>)
 8000ce8:	681c      	ldr	r4, [r3, #0]
 8000cea:	003b      	movs	r3, r7
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fa0b 	bl	8000108 <strlen>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f000 fa5f 	bl	80011be <pushStr>
	}
#endif
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b009      	add	sp, #36	; 0x24
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	2000058c 	.word	0x2000058c
 8000d0c:	200001fc 	.word	0x200001fc
 8000d10:	20000200 	.word	0x20000200
 8000d14:	20000204 	.word	0x20000204
 8000d18:	20000208 	.word	0x20000208
 8000d1c:	0800b6a4 	.word	0x0800b6a4
 8000d20:	200004dc 	.word	0x200004dc

08000d24 <buttonDebounce>:

void buttonDebounce()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if(flags.butt0_int)
 8000d28:	4b38      	ldr	r3, [pc, #224]	; (8000e0c <buttonDebounce+0xe8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d031      	beq.n	8000d9a <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	009a      	lsls	r2, r3, #2
 8000d3a:	2390      	movs	r3, #144	; 0x90
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 fb7f 	bl	8002444 <HAL_GPIO_ReadPin>
 8000d46:	0003      	movs	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d106      	bne.n	8000d5a <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <buttonDebounce+0xec>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <buttonDebounce+0xec>)
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e007      	b.n	8000d6a <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <buttonDebounce+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <buttonDebounce+0xe8>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	2110      	movs	r1, #16
 8000d66:	438a      	bics	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <buttonDebounce+0xec>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d913      	bls.n	8000d9a <buttonDebounce+0x76>
		{
			flags.butt0_ver = 1;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <buttonDebounce+0xe8>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	2120      	movs	r1, #32
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <buttonDebounce+0xe8>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	2110      	movs	r1, #16
 8000d82:	438a      	bics	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
			button0_Debounce = 0;
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <buttonDebounce+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <buttonDebounce+0xf0>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f001 fb8f 	bl	80024b8 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.butt1_int)
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <buttonDebounce+0xe8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	4013      	ands	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02e      	beq.n	8000e06 <buttonDebounce+0xe2>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	005a      	lsls	r2, r3, #1
 8000dac:	2390      	movs	r3, #144	; 0x90
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 fb46 	bl	8002444 <HAL_GPIO_ReadPin>
 8000db8:	0003      	movs	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d106      	bne.n	8000dcc <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <buttonDebounce+0xf4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <buttonDebounce+0xf4>)
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e007      	b.n	8000ddc <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <buttonDebounce+0xf4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
			flags.butt1_int = 0;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <buttonDebounce+0xe8>)
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	438a      	bics	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <buttonDebounce+0xf4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d910      	bls.n	8000e06 <buttonDebounce+0xe2>
		{
			flags.butt1_ver = 1;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <buttonDebounce+0xe8>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4249      	negs	r1, r1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
			flags.butt1_int;
			button1_Debounce = 0;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <buttonDebounce+0xf4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	021a      	lsls	r2, r3, #8
 8000dfa:	2390      	movs	r3, #144	; 0x90
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fb59 	bl	80024b8 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000058c 	.word	0x2000058c
 8000e10:	2000020c 	.word	0x2000020c
 8000e14:	48000400 	.word	0x48000400
 8000e18:	2000020d 	.word	0x2000020d

08000e1c <comHandler>:

//_____Obsluha komunikace s PC přes USB_____//
void comHandler()
{
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b099      	sub	sp, #100	; 0x64
 8000e20:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000e22:	4ba5      	ldr	r3, [pc, #660]	; (80010b8 <comHandler+0x29c>)
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <comHandler+0x16>
 8000e30:	e0d1      	b.n	8000fd6 <comHandler+0x1ba>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000e32:	e0bc      	b.n	8000fae <comHandler+0x192>
		{
			uint8_t txt[30];

			switch(instruction)
 8000e34:	232f      	movs	r3, #47	; 0x2f
 8000e36:	2220      	movs	r2, #32
 8000e38:	4694      	mov	ip, r2
 8000e3a:	44bc      	add	ip, r7
 8000e3c:	4463      	add	r3, ip
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b73      	cmp	r3, #115	; 0x73
 8000e42:	d00a      	beq.n	8000e5a <comHandler+0x3e>
 8000e44:	dd00      	ble.n	8000e48 <comHandler+0x2c>
 8000e46:	e090      	b.n	8000f6a <comHandler+0x14e>
 8000e48:	2b70      	cmp	r3, #112	; 0x70
 8000e4a:	d04a      	beq.n	8000ee2 <comHandler+0xc6>
 8000e4c:	dd00      	ble.n	8000e50 <comHandler+0x34>
 8000e4e:	e08c      	b.n	8000f6a <comHandler+0x14e>
 8000e50:	2b63      	cmp	r3, #99	; 0x63
 8000e52:	d024      	beq.n	8000e9e <comHandler+0x82>
 8000e54:	2b6b      	cmp	r3, #107	; 0x6b
 8000e56:	d066      	beq.n	8000f26 <comHandler+0x10a>
 8000e58:	e087      	b.n	8000f6a <comHandler+0x14e>
			{
			case 's': ;
				//___Start testu___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
 8000e5a:	4a98      	ldr	r2, [pc, #608]	; (80010bc <comHandler+0x2a0>)
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	001c      	movs	r4, r3
 8000e60:	2120      	movs	r1, #32
 8000e62:	468c      	mov	ip, r1
 8000e64:	44bc      	add	ip, r7
 8000e66:	4463      	add	r3, ip
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f00a f8a2 	bl	800afb4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000e70:	4b93      	ldr	r3, [pc, #588]	; (80010c0 <comHandler+0x2a4>)
 8000e72:	681e      	ldr	r6, [r3, #0]
 8000e74:	0023      	movs	r3, r4
 8000e76:	001c      	movs	r4, r3
 8000e78:	2220      	movs	r2, #32
 8000e7a:	4694      	mov	ip, r2
 8000e7c:	44bc      	add	ip, r7
 8000e7e:	4463      	add	r3, ip
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff f941 	bl	8000108 <strlen>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	0023      	movs	r3, r4
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	468c      	mov	ip, r1
 8000e90:	44bc      	add	ip, r7
 8000e92:	4463      	add	r3, ip
 8000e94:	0019      	movs	r1, r3
 8000e96:	0030      	movs	r0, r6
 8000e98:	f000 f991 	bl	80011be <pushStr>
#endif
				break;
 8000e9c:	e087      	b.n	8000fae <comHandler+0x192>

			case'c': ;
				//___Ukončení___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
 8000e9e:	4a89      	ldr	r2, [pc, #548]	; (80010c4 <comHandler+0x2a8>)
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	001c      	movs	r4, r3
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	468c      	mov	ip, r1
 8000ea8:	44bc      	add	ip, r7
 8000eaa:	4463      	add	r3, ip
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f00a f880 	bl	800afb4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000eb4:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <comHandler+0x2a4>)
 8000eb6:	681e      	ldr	r6, [r3, #0]
 8000eb8:	0023      	movs	r3, r4
 8000eba:	001c      	movs	r4, r3
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	4694      	mov	ip, r2
 8000ec0:	44bc      	add	ip, r7
 8000ec2:	4463      	add	r3, ip
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff f91f 	bl	8000108 <strlen>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	001a      	movs	r2, r3
 8000ece:	0023      	movs	r3, r4
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	468c      	mov	ip, r1
 8000ed4:	44bc      	add	ip, r7
 8000ed6:	4463      	add	r3, ip
 8000ed8:	0019      	movs	r1, r3
 8000eda:	0030      	movs	r0, r6
 8000edc:	f000 f96f 	bl	80011be <pushStr>
#endif
				break;
 8000ee0:	e065      	b.n	8000fae <comHandler+0x192>

			case'p': ;
				//___Pauza___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
 8000ee2:	4a79      	ldr	r2, [pc, #484]	; (80010c8 <comHandler+0x2ac>)
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	2120      	movs	r1, #32
 8000eea:	468c      	mov	ip, r1
 8000eec:	44bc      	add	ip, r7
 8000eee:	4463      	add	r3, ip
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f00a f85e 	bl	800afb4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000ef8:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <comHandler+0x2a4>)
 8000efa:	681e      	ldr	r6, [r3, #0]
 8000efc:	0023      	movs	r3, r4
 8000efe:	001c      	movs	r4, r3
 8000f00:	2220      	movs	r2, #32
 8000f02:	4694      	mov	ip, r2
 8000f04:	44bc      	add	ip, r7
 8000f06:	4463      	add	r3, ip
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f8fd 	bl	8000108 <strlen>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	001a      	movs	r2, r3
 8000f12:	0023      	movs	r3, r4
 8000f14:	2120      	movs	r1, #32
 8000f16:	468c      	mov	ip, r1
 8000f18:	44bc      	add	ip, r7
 8000f1a:	4463      	add	r3, ip
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	0030      	movs	r0, r6
 8000f20:	f000 f94d 	bl	80011be <pushStr>
#endif
				break;
 8000f24:	e043      	b.n	8000fae <comHandler+0x192>

			case'k': ;
				//___Kalibrace___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
 8000f26:	4a69      	ldr	r2, [pc, #420]	; (80010cc <comHandler+0x2b0>)
 8000f28:	2310      	movs	r3, #16
 8000f2a:	001c      	movs	r4, r3
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	468c      	mov	ip, r1
 8000f30:	44bc      	add	ip, r7
 8000f32:	4463      	add	r3, ip
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f00a f83c 	bl	800afb4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f3c:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <comHandler+0x2a4>)
 8000f3e:	681e      	ldr	r6, [r3, #0]
 8000f40:	0023      	movs	r3, r4
 8000f42:	001c      	movs	r4, r3
 8000f44:	2220      	movs	r2, #32
 8000f46:	4694      	mov	ip, r2
 8000f48:	44bc      	add	ip, r7
 8000f4a:	4463      	add	r3, ip
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff f8db 	bl	8000108 <strlen>
 8000f52:	0003      	movs	r3, r0
 8000f54:	001a      	movs	r2, r3
 8000f56:	0023      	movs	r3, r4
 8000f58:	2120      	movs	r1, #32
 8000f5a:	468c      	mov	ip, r1
 8000f5c:	44bc      	add	ip, r7
 8000f5e:	4463      	add	r3, ip
 8000f60:	0019      	movs	r1, r3
 8000f62:	0030      	movs	r0, r6
 8000f64:	f000 f92b 	bl	80011be <pushStr>
#endif
				break;
 8000f68:	e021      	b.n	8000fae <comHandler+0x192>

			default: ;
				//___Neplatný příkaz___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
 8000f6a:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <comHandler+0x2b4>)
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	001c      	movs	r4, r3
 8000f70:	2120      	movs	r1, #32
 8000f72:	468c      	mov	ip, r1
 8000f74:	44bc      	add	ip, r7
 8000f76:	4463      	add	r3, ip
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f00a f81a 	bl	800afb4 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f80:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <comHandler+0x2a4>)
 8000f82:	681e      	ldr	r6, [r3, #0]
 8000f84:	0023      	movs	r3, r4
 8000f86:	001c      	movs	r4, r3
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	44bc      	add	ip, r7
 8000f8e:	4463      	add	r3, ip
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff f8b9 	bl	8000108 <strlen>
 8000f96:	0003      	movs	r3, r0
 8000f98:	001a      	movs	r2, r3
 8000f9a:	0023      	movs	r3, r4
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	468c      	mov	ip, r1
 8000fa0:	44bc      	add	ip, r7
 8000fa2:	4463      	add	r3, ip
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	0030      	movs	r0, r6
 8000fa8:	f000 f909 	bl	80011be <pushStr>
#endif
				break;
 8000fac:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <comHandler+0x2b8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	222f      	movs	r2, #47	; 0x2f
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	468c      	mov	ip, r1
 8000fb8:	44bc      	add	ip, r7
 8000fba:	4462      	add	r2, ip
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f925 	bl	800120e <pop>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d000      	beq.n	8000fcc <comHandler+0x1b0>
 8000fca:	e733      	b.n	8000e34 <comHandler+0x18>
			}
		}
		flags.data_received = 0;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <comHandler+0x29c>)
 8000fce:	785a      	ldrb	r2, [r3, #1]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	705a      	strb	r2, [r3, #1]
	}

	//___Odesílání dat___//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <comHandler+0x2a4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	7d1b      	ldrb	r3, [r3, #20]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d113      	bne.n	8001008 <comHandler+0x1ec>
	{
		char msg[] = {"Buffer full\n"};
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <comHandler+0x2bc>)
 8000fe6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fe8:	c313      	stmia	r3!, {r0, r1, r4}
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000fee:	2320      	movs	r3, #32
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff f888 	bl	8000108 <strlen>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f009 fa1a 	bl	800a43c <CDC_Transmit_FS>
	}
	if(USB_Tx_Buffer->filled)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <comHandler+0x2a4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d04e      	beq.n	80010b0 <comHandler+0x294>
	{
 8001012:	466b      	mov	r3, sp
 8001014:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <comHandler+0x2a4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	65bb      	str	r3, [r7, #88]	; 0x58
		//char tmp;
		char tmpStr[size+1];
 800101e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001020:	3301      	adds	r3, #1
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	657a      	str	r2, [r7, #84]	; 0x54
 8001026:	001a      	movs	r2, r3
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	2200      	movs	r2, #0
 800102c:	60fa      	str	r2, [r7, #12]
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	68f9      	ldr	r1, [r7, #12]
 8001032:	0002      	movs	r2, r0
 8001034:	0f52      	lsrs	r2, r2, #29
 8001036:	000c      	movs	r4, r1
 8001038:	00e4      	lsls	r4, r4, #3
 800103a:	61fc      	str	r4, [r7, #28]
 800103c:	69fc      	ldr	r4, [r7, #28]
 800103e:	4314      	orrs	r4, r2
 8001040:	61fc      	str	r4, [r7, #28]
 8001042:	0002      	movs	r2, r0
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	61ba      	str	r2, [r7, #24]
 8001048:	001a      	movs	r2, r3
 800104a:	603a      	str	r2, [r7, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	0002      	movs	r2, r0
 8001056:	0f52      	lsrs	r2, r2, #29
 8001058:	000c      	movs	r4, r1
 800105a:	00e4      	lsls	r4, r4, #3
 800105c:	617c      	str	r4, [r7, #20]
 800105e:	697c      	ldr	r4, [r7, #20]
 8001060:	4314      	orrs	r4, r2
 8001062:	617c      	str	r4, [r7, #20]
 8001064:	0002      	movs	r2, r0
 8001066:	00d2      	lsls	r2, r2, #3
 8001068:	613a      	str	r2, [r7, #16]
 800106a:	3307      	adds	r3, #7
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	466a      	mov	r2, sp
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	469d      	mov	sp, r3
 8001076:	466b      	mov	r3, sp
 8001078:	3300      	adds	r3, #0
 800107a:	653b      	str	r3, [r7, #80]	; 0x50
		//int i = 0;
		for(int i = 0; i < size; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001080:	e00a      	b.n	8001098 <comHandler+0x27c>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <comHandler+0x2a4>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	0019      	movs	r1, r3
 800108e:	f000 f8be 	bl	800120e <pop>
		for(int i = 0; i < size; i++)
 8001092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001094:	3301      	adds	r3, #1
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800109a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <comHandler+0x266>
		}
		CDC_Transmit_FS(tmpStr, size);
 80010a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010a4:	b292      	uxth	r2, r2
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f009 f9c7 	bl	800a43c <CDC_Transmit_FS>
 80010ae:	46b5      	mov	sp, r6
		{
			i++;
		}*/
	}

}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b019      	add	sp, #100	; 0x64
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	2000058c 	.word	0x2000058c
 80010bc:	0800b6b4 	.word	0x0800b6b4
 80010c0:	200004dc 	.word	0x200004dc
 80010c4:	0800b6bc 	.word	0x0800b6bc
 80010c8:	0800b6c8 	.word	0x0800b6c8
 80010cc:	0800b6d0 	.word	0x0800b6d0
 80010d0:	0800b6dc 	.word	0x0800b6dc
 80010d4:	200010ac 	.word	0x200010ac
 80010d8:	0800b6f0 	.word	0x0800b6f0

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>

080010e6 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80010ee:	2018      	movs	r0, #24
 80010f0:	f009 fe8a 	bl	800ae08 <malloc>
 80010f4:	0003      	movs	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <createBuffer+0x1c>
	{
		return NULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	e022      	b.n	8001148 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	0018      	movs	r0, r3
 8001106:	f009 fe7f 	bl	800ae08 <malloc>
 800110a:	0003      	movs	r3, r0
 800110c:	001a      	movs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <createBuffer+0x40>
	{
		free(buffer);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	0018      	movs	r0, r3
 800111e:	f009 fe7d 	bl	800ae1c <free>
		return NULL;
 8001122:	2300      	movs	r3, #0
 8001124:	e010      	b.n	8001148 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}

08001150 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	000a      	movs	r2, r1
 800115a:	1cfb      	adds	r3, r7, #3
 800115c:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7d1b      	ldrb	r3, [r3, #20]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d101      	bne.n	800116a <push+0x1a>
		return BUFFER_FULL;
 8001166:	2302      	movs	r3, #2
 8001168:	e025      	b.n	80011b6 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	f7ff f948 	bl	800040c <__aeabi_idivmod>
 800117c:	000b      	movs	r3, r1
 800117e:	001a      	movs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	1cfa      	adds	r2, r7, #3
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	db01      	blt.n	80011ae <push+0x5e>
 80011aa:	2202      	movs	r2, #2
 80011ac:	e000      	b.n	80011b0 <push+0x60>
 80011ae:	2200      	movs	r2, #0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}

080011be <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6899      	ldr	r1, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	18cb      	adds	r3, r1, r3
 80011d6:	429a      	cmp	r2, r3
 80011d8:	da01      	bge.n	80011de <pushStr+0x20>
		return BUFFER_FULL;
 80011da:	2302      	movs	r3, #2
 80011dc:	e013      	b.n	8001206 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e00b      	b.n	80011fc <pushStr+0x3e>
	{
		push(buffer, str[i]);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	0011      	movs	r1, r2
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ffad 	bl	8001150 <push>
	for(int i = 0; i < len; i++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbef      	blt.n	80011e4 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b006      	add	sp, #24
 800120c:	bd80      	pop	{r7, pc}

0800120e <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7d1b      	ldrb	r3, [r3, #20]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <pop+0x16>
		return BUFFER_EMPTY;
 8001220:	2301      	movs	r3, #1
 8001222:	e023      	b.n	800126c <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	0019      	movs	r1, r3
 8001240:	0010      	movs	r0, r2
 8001242:	f7ff f8e3 	bl	800040c <__aeabi_idivmod>
 8001246:	000b      	movs	r3, r1
 8001248:	001a      	movs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	4313      	orrs	r3, r2
 8001260:	0fdb      	lsrs	r3, r3, #31
 8001262:	b2db      	uxtb	r3, r3
 8001264:	001a      	movs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0549      	lsls	r1, r1, #21
 800129c:	430a      	orrs	r2, r1
 800129e:	61da      	str	r2, [r3, #28]
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_MspInit+0x44>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	4013      	ands	r3, r2
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08d      	sub	sp, #52	; 0x34
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	241c      	movs	r4, #28
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f009 fdae 	bl	800ae30 <memset>
  if(hadc->Instance==ADC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4a      	ldr	r2, [pc, #296]	; (8001404 <HAL_ADC_MspInit+0x148>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d000      	beq.n	80012e0 <HAL_ADC_MspInit+0x24>
 80012de:	e08d      	b.n	80013fc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	0089      	lsls	r1, r1, #2
 80012ea:	430a      	orrs	r2, r1
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0309      	lsls	r1, r1, #12
 8001306:	430a      	orrs	r2, r1
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	031b      	lsls	r3, r3, #12
 8001312:	4013      	ands	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0289      	lsls	r1, r1, #10
 8001322:	430a      	orrs	r2, r1
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	029b      	lsls	r3, r3, #10
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	02c9      	lsls	r1, r1, #11
 800133e:	430a      	orrs	r2, r1
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_ADC_MspInit+0x14c>)
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	02db      	lsls	r3, r3, #11
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001350:	193b      	adds	r3, r7, r4
 8001352:	223f      	movs	r2, #63	; 0x3f
 8001354:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	193b      	adds	r3, r7, r4
 8001358:	2203      	movs	r2, #3
 800135a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	193b      	adds	r3, r7, r4
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	193b      	adds	r3, r7, r4
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_ADC_MspInit+0x150>)
 8001366:	0019      	movs	r1, r3
 8001368:	0010      	movs	r0, r2
 800136a:	f000 fef3 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800136e:	193b      	adds	r3, r7, r4
 8001370:	22ff      	movs	r2, #255	; 0xff
 8001372:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2203      	movs	r2, #3
 8001378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	193a      	adds	r2, r7, r4
 8001382:	2390      	movs	r3, #144	; 0x90
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f000 fee3 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	2203      	movs	r2, #3
 8001392:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2203      	movs	r2, #3
 8001398:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_ADC_MspInit+0x154>)
 80013a4:	0019      	movs	r1, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	f000 fed4 	bl	8002154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <HAL_ADC_MspInit+0x15c>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 fd32 	bl	8001e4c <HAL_DMA_Init>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80013ec:	f7ff fe76 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_ADC_MspInit+0x158>)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b00d      	add	sp, #52	; 0x34
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	40012400 	.word	0x40012400
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800
 8001410:	48000400 	.word	0x48000400
 8001414:	20000590 	.word	0x20000590
 8001418:	40020008 	.word	0x40020008

0800141c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2414      	movs	r4, #20
 8001426:	193b      	adds	r3, r7, r4
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f009 fcfe 	bl	800ae30 <memset>
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_SPI_MspInit+0x90>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d131      	bne.n	80014a2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0149      	lsls	r1, r1, #5
 8001448:	430a      	orrs	r2, r1
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	02c9      	lsls	r1, r1, #11
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	02db      	lsls	r3, r3, #11
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001476:	0021      	movs	r1, r4
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2238      	movs	r2, #56	; 0x38
 800147c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2203      	movs	r2, #3
 800148e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	187b      	adds	r3, r7, r1
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_SPI_MspInit+0x98>)
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f000 fe59 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b00b      	add	sp, #44	; 0x2c
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_TIM_Base_MspInit+0x48>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d115      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0049      	lsls	r1, r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	61da      	str	r2, [r3, #28]
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2013      	movs	r0, #19
 80014ec:	f000 fc7c 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80014f0:	2013      	movs	r0, #19
 80014f2:	f000 fc8e 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40002000 	.word	0x40002000
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	2414      	movs	r4, #20
 8001512:	193b      	adds	r3, r7, r4
 8001514:	0018      	movs	r0, r3
 8001516:	2314      	movs	r3, #20
 8001518:	001a      	movs	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	f009 fc88 	bl	800ae30 <memset>
  if(huart->Instance==USART3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0xa0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d13a      	bne.n	80015a0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_UART_MspInit+0xa4>)
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_UART_MspInit+0xa4>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	02c9      	lsls	r1, r1, #11
 8001534:	430a      	orrs	r2, r1
 8001536:	61da      	str	r2, [r3, #28]
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0xa4>)
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	02db      	lsls	r3, r3, #11
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0xa4>)
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_UART_MspInit+0xa4>)
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	430a      	orrs	r2, r1
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0xa4>)
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	031b      	lsls	r3, r3, #12
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	22c0      	movs	r2, #192	; 0xc0
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	0021      	movs	r1, r4
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2202      	movs	r2, #2
 8001570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2203      	movs	r2, #3
 800157c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2201      	movs	r2, #1
 8001582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	187b      	adds	r3, r7, r1
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_UART_MspInit+0xa8>)
 8001588:	0019      	movs	r1, r3
 800158a:	0010      	movs	r0, r2
 800158c:	f000 fde2 	bl	8002154 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	201d      	movs	r0, #29
 8001596:	f000 fc27 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800159a:	201d      	movs	r0, #29
 800159c:	f000 fc39 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b00b      	add	sp, #44	; 0x2c
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	40004800 	.word	0x40004800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000800 	.word	0x48000800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f8f0 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 ff80 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 ff7b 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <DMA1_Channel1_IRQHandler+0x14>)
 8001606:	0018      	movs	r0, r3
 8001608:	f000 fce5 	bl	8001fd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	20000590 	.word	0x20000590

08001618 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <TIM14_IRQHandler+0x14>)
 800161e:	0018      	movs	r0, r3
 8001620:	f003 fda6 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	20000544 	.word	0x20000544

08001630 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <USART3_4_IRQHandler+0x14>)
 8001636:	0018      	movs	r0, r3
 8001638:	f004 fa08 	bl	8005a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20000458 	.word	0x20000458

08001648 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <USB_IRQHandler+0x14>)
 800164e:	0018      	movs	r0, r3
 8001650:	f001 f8a0 	bl	8002794 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	200012b0 	.word	0x200012b0

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f009 fb90 	bl	800adb4 <__errno>
 8001694:	0003      	movs	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	2301      	movs	r3, #1
 800169c:	425b      	negs	r3, r3
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	18d2      	adds	r2, r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b006      	add	sp, #24
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20004000 	.word	0x20004000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000210 	.word	0x20000210
 80016c8:	200015b8 	.word	0x200015b8

080016cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001702:	f7ff ffe3 	bl	80016cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001706:	f009 fb5b 	bl	800adc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170a:	f7fe febd 	bl	8000488 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   r0, =_estack
 8001710:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800171c:	0800b8ac 	.word	0x0800b8ac
  ldr r2, =_sbss
 8001720:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001724:	200015b4 	.word	0x200015b4

08001728 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_COMP_IRQHandler>
	...

0800172c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_Init+0x24>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_Init+0x24>)
 8001736:	2110      	movs	r1, #16
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f809 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001742:	f7ff fd97 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40022000 	.word	0x40022000

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_InitTick+0x5c>)
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	0019      	movs	r1, r3
 8001766:	23fa      	movs	r3, #250	; 0xfa
 8001768:	0098      	lsls	r0, r3, #2
 800176a:	f7fe fcdf 	bl	800012c <__udivsi3>
 800176e:	0003      	movs	r3, r0
 8001770:	0019      	movs	r1, r3
 8001772:	0020      	movs	r0, r4
 8001774:	f7fe fcda 	bl	800012c <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fb59 	bl	8001e32 <HAL_SYSTICK_Config>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00f      	b.n	80017a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d80b      	bhi.n	80017a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2301      	movs	r3, #1
 8001792:	425b      	negs	r3, r3
 8001794:	2200      	movs	r2, #0
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fb26 	bl	8001de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_InitTick+0x64>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b003      	add	sp, #12
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	18d2      	adds	r2, r2, r3
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_IncTick+0x20>)
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000614 	.word	0x20000614

080017e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	20000614 	.word	0x20000614

080017f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e125      	b.n	8001a5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2234      	movs	r2, #52	; 0x34
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fd46 	bl	80012bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	2210      	movs	r2, #16
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_Init+0x48>
 800183a:	e103      	b.n	8001a44 <HAL_ADC_Init+0x250>
 800183c:	230f      	movs	r3, #15
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <HAL_ADC_Init+0x54>
 8001846:	e0fd      	b.n	8001a44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001852:	d000      	beq.n	8001856 <HAL_ADC_Init+0x62>
 8001854:	e0f6      	b.n	8001a44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	4a83      	ldr	r2, [pc, #524]	; (8001a68 <HAL_ADC_Init+0x274>)
 800185c:	4013      	ands	r3, r2
 800185e:	2202      	movs	r2, #2
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2203      	movs	r2, #3
 800186e:	4013      	ands	r3, r2
 8001870:	2b01      	cmp	r3, #1
 8001872:	d112      	bne.n	800189a <HAL_ADC_Init+0xa6>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	2b01      	cmp	r3, #1
 8001880:	d009      	beq.n	8001896 <HAL_ADC_Init+0xa2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	401a      	ands	r2, r3
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	429a      	cmp	r2, r3
 8001894:	d101      	bne.n	800189a <HAL_ADC_Init+0xa6>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_ADC_Init+0xa8>
 800189a:	2300      	movs	r3, #0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d116      	bne.n	80018ce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2218      	movs	r2, #24
 80018a8:	4393      	bics	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	0899      	lsrs	r1, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4964      	ldr	r1, [pc, #400]	; (8001a6c <HAL_ADC_Init+0x278>)
 80018da:	400a      	ands	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7e1b      	ldrb	r3, [r3, #24]
 80018e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e5b      	ldrb	r3, [r3, #25]
 80018e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e9b      	ldrb	r3, [r3, #26]
 80018f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d002      	beq.n	8001902 <HAL_ADC_Init+0x10e>
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	e000      	b.n	8001904 <HAL_ADC_Init+0x110>
 8001902:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001904:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800190a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d101      	bne.n	8001918 <HAL_ADC_Init+0x124>
 8001914:	2304      	movs	r3, #4
 8001916:	e000      	b.n	800191a <HAL_ADC_Init+0x126>
 8001918:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800191a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2124      	movs	r1, #36	; 0x24
 8001920:	5c5b      	ldrb	r3, [r3, r1]
 8001922:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001924:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4313      	orrs	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7edb      	ldrb	r3, [r3, #27]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d115      	bne.n	8001960 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e9b      	ldrb	r3, [r3, #26]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	0252      	lsls	r2, r2, #9
 8001942:	4313      	orrs	r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	e00b      	b.n	8001960 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	2220      	movs	r2, #32
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	2201      	movs	r2, #1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	23c2      	movs	r3, #194	; 0xc2
 8001966:	33ff      	adds	r3, #255	; 0xff
 8001968:	429a      	cmp	r2, r3
 800196a:	d007      	beq.n	800197c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001974:	4313      	orrs	r3, r2
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4313      	orrs	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68d9      	ldr	r1, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	429a      	cmp	r2, r3
 8001996:	d01b      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2b01      	cmp	r3, #1
 800199e:	d017      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d013      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d00f      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d00b      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d007      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	d003      	beq.n	80019d0 <HAL_ADC_Init+0x1dc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d112      	bne.n	80019f6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2107      	movs	r1, #7
 80019dc:	438a      	bics	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6959      	ldr	r1, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	2207      	movs	r2, #7
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <HAL_ADC_Init+0x27c>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10b      	bne.n	8001a1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	2203      	movs	r2, #3
 8001a12:	4393      	bics	r3, r2
 8001a14:	2201      	movs	r2, #1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a1c:	e01c      	b.n	8001a58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	2212      	movs	r2, #18
 8001a24:	4393      	bics	r3, r2
 8001a26:	2210      	movs	r2, #16
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	2201      	movs	r2, #1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a42:	e009      	b.n	8001a58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	2210      	movs	r2, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	fffffefd 	.word	0xfffffefd
 8001a6c:	fffe0219 	.word	0xfffe0219
 8001a70:	833fffe7 	.word	0x833fffe7

08001a74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7e:	230f      	movs	r3, #15
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	055b      	lsls	r3, r3, #21
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d011      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x46>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d00d      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x46>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d009      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x46>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d005      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x46>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d001      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x46>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2234      	movs	r2, #52	; 0x34
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x54>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e0d0      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1f6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2234      	movs	r2, #52	; 0x34
 8001acc:	2101      	movs	r1, #1
 8001ace:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d000      	beq.n	8001ade <HAL_ADC_ConfigChannel+0x6a>
 8001adc:	e0b4      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <HAL_ADC_ConfigChannel+0x200>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x76>
 8001ae8:	e082      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d037      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d033      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d02f      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d02b      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d027      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d023      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d01f      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d01b      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2107      	movs	r1, #7
 8001b50:	400b      	ands	r3, r1
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d012      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2107      	movs	r1, #7
 8001b62:	438a      	bics	r2, r1
 8001b64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6959      	ldr	r1, [r3, #20]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2207      	movs	r2, #7
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d007      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x120>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d003      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x120>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b12      	cmp	r3, #18
 8001b92:	d163      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_ADC_ConfigChannel+0x204>)
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d009      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x140>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b11      	cmp	r3, #17
 8001ba6:	d102      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x13a>
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	03db      	lsls	r3, r3, #15
 8001bac:	e004      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x144>
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	045b      	lsls	r3, r3, #17
 8001bb2:	e001      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x144>
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <HAL_ADC_ConfigChannel+0x204>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d14a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_ADC_ConfigChannel+0x208>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	492d      	ldr	r1, [pc, #180]	; (8001c80 <HAL_ADC_ConfigChannel+0x20c>)
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe faad 	bl	800012c <__udivsi3>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f9      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x16e>
 8001bee:	e035      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4099      	lsls	r1, r3
 8001bfe:	000b      	movs	r3, r1
 8001c00:	43d9      	mvns	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	400a      	ands	r2, r1
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d007      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x1ae>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b11      	cmp	r3, #17
 8001c18:	d003      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x1ae>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d11c      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_ADC_ConfigChannel+0x204>)
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x1ca>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x1c6>
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_ADC_ConfigChannel+0x210>)
 8001c38:	e002      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1cc>
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_ADC_ConfigChannel+0x214>)
 8001c3c:	e000      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1cc>
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_ConfigChannel+0x218>)
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_ADC_ConfigChannel+0x204>)
 8001c42:	400b      	ands	r3, r1
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e009      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001c54:	230f      	movs	r3, #15
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2234      	movs	r2, #52	; 0x34
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	00001001 	.word	0x00001001
 8001c78:	40012708 	.word	0x40012708
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	000f4240 	.word	0x000f4240
 8001c84:	ffbfffff 	.word	0xffbfffff
 8001c88:	feffffff 	.word	0xfeffffff
 8001c8c:	ff7fffff 	.word	0xff7fffff

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	0002      	movs	r2, r0
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca2:	d809      	bhi.n	8001cb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	401a      	ands	r2, r3
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_EnableIRQ+0x30>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4091      	lsls	r1, r2
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
  }
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd8:	d828      	bhi.n	8001d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cda:	4a2f      	ldr	r2, [pc, #188]	; (8001d98 <__NVIC_SetPriority+0xd4>)
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	33c0      	adds	r3, #192	; 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	589b      	ldr	r3, [r3, r2]
 8001cea:	1dfa      	adds	r2, r7, #7
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	0011      	movs	r1, r2
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	00d2      	lsls	r2, r2, #3
 8001cf6:	21ff      	movs	r1, #255	; 0xff
 8001cf8:	4091      	lsls	r1, r2
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	43d2      	mvns	r2, r2
 8001cfe:	401a      	ands	r2, r3
 8001d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	22ff      	movs	r2, #255	; 0xff
 8001d08:	401a      	ands	r2, r3
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	2303      	movs	r3, #3
 8001d12:	4003      	ands	r3, r0
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d18:	481f      	ldr	r0, [pc, #124]	; (8001d98 <__NVIC_SetPriority+0xd4>)
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	33c0      	adds	r3, #192	; 0xc0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d2a:	e031      	b.n	8001d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0019      	movs	r1, r3
 8001d34:	230f      	movs	r3, #15
 8001d36:	400b      	ands	r3, r1
 8001d38:	3b08      	subs	r3, #8
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	3304      	adds	r3, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1dfa      	adds	r2, r7, #7
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	400a      	ands	r2, r1
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	21ff      	movs	r1, #255	; 0xff
 8001d54:	4091      	lsls	r1, r2
 8001d56:	000a      	movs	r2, r1
 8001d58:	43d2      	mvns	r2, r2
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	22ff      	movs	r2, #255	; 0xff
 8001d64:	401a      	ands	r2, r3
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	4003      	ands	r3, r0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	001c      	movs	r4, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	4023      	ands	r3, r4
 8001d80:	3b08      	subs	r3, #8
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	430a      	orrs	r2, r1
 8001d86:	3306      	adds	r3, #6
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	18c3      	adds	r3, r0, r3
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b003      	add	sp, #12
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	045b      	lsls	r3, r3, #17
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d301      	bcc.n	8001db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db4:	2301      	movs	r3, #1
 8001db6:	e010      	b.n	8001dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <SysTick_Config+0x44>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff7c 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x44>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x44>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	210f      	movs	r1, #15
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	1c02      	adds	r2, r0, #0
 8001df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	0011      	movs	r1, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	0002      	movs	r2, r0
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff33 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffaf 	bl	8001da0 <SysTick_Config>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e036      	b.n	8001ed0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	2102      	movs	r1, #2
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_DMA_Init+0x8c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f932 	bl	800211c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2221      	movs	r2, #33	; 0x21
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}  
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	ffffc00f 	.word	0xffffc00f

08001edc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2221      	movs	r2, #33	; 0x21
 8001ee8:	5c9b      	ldrb	r3, [r3, r2]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e020      	b.n	8001f44 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	210e      	movs	r1, #14
 8001f0e:	438a      	bics	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	438a      	bics	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4091      	lsls	r1, r2
 8001f2e:	000a      	movs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2221      	movs	r2, #33	; 0x21
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	210f      	movs	r1, #15
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2221      	movs	r2, #33	; 0x21
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d006      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e028      	b.n	8001fc8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	210e      	movs	r1, #14
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	438a      	bics	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4091      	lsls	r1, r2
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2221      	movs	r2, #33	; 0x21
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	4798      	blx	r3
    } 
  }
  return status;
 8001fc8:	230f      	movs	r3, #15
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x72>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d020      	beq.n	8002048 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2220      	movs	r2, #32
 800200e:	4013      	ands	r3, r2
 8002010:	d107      	bne.n	8002022 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2104      	movs	r1, #4
 800201e:	438a      	bics	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	2104      	movs	r1, #4
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <HAL_DMA_IRQHandler+0x66>
 800203a:	e06a      	b.n	8002112 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	0010      	movs	r0, r2
 8002044:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002046:	e064      	b.n	8002112 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2202      	movs	r2, #2
 800204e:	409a      	lsls	r2, r3
 8002050:	0013      	movs	r3, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	d02b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xda>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d027      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	4013      	ands	r3, r2
 800206a:	d10b      	bne.n	8002084 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	210a      	movs	r1, #10
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2221      	movs	r2, #33	; 0x21
 8002080:	2101      	movs	r1, #1
 8002082:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	2102      	movs	r1, #2
 800208e:	4091      	lsls	r1, r2
 8002090:	000a      	movs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d036      	beq.n	8002112 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	0010      	movs	r0, r2
 80020ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80020ae:	e030      	b.n	8002112 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2208      	movs	r2, #8
 80020b6:	409a      	lsls	r2, r3
 80020b8:	0013      	movs	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	d028      	beq.n	8002112 <HAL_DMA_IRQHandler+0x13c>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2208      	movs	r2, #8
 80020c4:	4013      	ands	r3, r2
 80020c6:	d024      	beq.n	8002112 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	210e      	movs	r1, #14
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	2101      	movs	r1, #1
 80020e2:	4091      	lsls	r1, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2221      	movs	r2, #33	; 0x21
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	0010      	movs	r0, r2
 800210e:	4798      	blx	r3
    }
   }
}  
 8002110:	e7ff      	b.n	8002112 <HAL_DMA_IRQHandler+0x13c>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <DMA_CalcBaseAndBitshift+0x30>)
 800212a:	4694      	mov	ip, r2
 800212c:	4463      	add	r3, ip
 800212e:	2114      	movs	r1, #20
 8002130:	0018      	movs	r0, r3
 8002132:	f7fd fffb 	bl	800012c <__udivsi3>
 8002136:	0003      	movs	r3, r0
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <DMA_CalcBaseAndBitshift+0x34>)
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}
 800214c:	bffdfff8 	.word	0xbffdfff8
 8002150:	40020000 	.word	0x40020000

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002162:	e155      	b.n	8002410 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4091      	lsls	r1, r2
 800216e:	000a      	movs	r2, r1
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <HAL_GPIO_Init+0x28>
 800217a:	e146      	b.n	800240a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	2b01      	cmp	r3, #1
 8002186:	d005      	beq.n	8002194 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2203      	movs	r2, #3
 800218e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002190:	2b02      	cmp	r3, #2
 8002192:	d130      	bne.n	80021f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	43da      	mvns	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	0013      	movs	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ca:	2201      	movs	r2, #1
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
 80021d0:	0013      	movs	r3, r2
 80021d2:	43da      	mvns	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	2201      	movs	r2, #1
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
 80021e8:	0013      	movs	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d017      	beq.n	8002232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2203      	movs	r2, #3
 8002238:	4013      	ands	r3, r2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d123      	bne.n	8002286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	58d3      	ldr	r3, [r2, r3]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2207      	movs	r2, #7
 8002250:	4013      	ands	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	43da      	mvns	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2107      	movs	r1, #7
 800226a:	400b      	ands	r3, r1
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	6939      	ldr	r1, [r7, #16]
 8002284:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	43da      	mvns	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	401a      	ands	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	23c0      	movs	r3, #192	; 0xc0
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	4013      	ands	r3, r2
 80022c4:	d100      	bne.n	80022c8 <HAL_GPIO_Init+0x174>
 80022c6:	e0a0      	b.n	800240a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <HAL_GPIO_Init+0x2d4>)
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <HAL_GPIO_Init+0x2d4>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]
 80022d4:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_GPIO_Init+0x2d4>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_GPIO_Init+0x2d8>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	589b      	ldr	r3, [r3, r2]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2203      	movs	r2, #3
 80022f2:	4013      	ands	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	409a      	lsls	r2, r3
 80022fa:	0013      	movs	r3, r2
 80022fc:	43da      	mvns	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	2390      	movs	r3, #144	; 0x90
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	429a      	cmp	r2, r3
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x1ee>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_GPIO_Init+0x2dc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1ea>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_GPIO_Init+0x2e0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1e6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a45      	ldr	r2, [pc, #276]	; (8002438 <HAL_GPIO_Init+0x2e4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1e2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a44      	ldr	r2, [pc, #272]	; (800243c <HAL_GPIO_Init+0x2e8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1de>
 800232e:	2304      	movs	r3, #4
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x1f0>
 8002332:	2305      	movs	r3, #5
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x1f0>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x1f0>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x1f0>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x1f0>
 8002342:	2300      	movs	r3, #0
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	2103      	movs	r1, #3
 8002348:	400a      	ands	r2, r1
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x2d8>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b37      	ldr	r3, [pc, #220]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43da      	mvns	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	4013      	ands	r3, r2
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43da      	mvns	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	4013      	ands	r3, r2
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43da      	mvns	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	035b      	lsls	r3, r3, #13
 80023ce:	4013      	ands	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	039b      	lsls	r3, r3, #14
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_GPIO_Init+0x2ec>)
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	40da      	lsrs	r2, r3
 8002418:	1e13      	subs	r3, r2, #0
 800241a:	d000      	beq.n	800241e <HAL_GPIO_Init+0x2ca>
 800241c:	e6a2      	b.n	8002164 <HAL_GPIO_Init+0x10>
  } 
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b006      	add	sp, #24
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	48000c00 	.word	0x48000c00
 800243c:	48001000 	.word	0x48001000
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	000a      	movs	r2, r1
 800244e:	1cbb      	adds	r3, r7, #2
 8002450:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	1cba      	adds	r2, r7, #2
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	4013      	ands	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e003      	b.n	8002470 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002468:	230f      	movs	r3, #15
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002470:	230f      	movs	r3, #15
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
  }
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	0008      	movs	r0, r1
 8002488:	0011      	movs	r1, r2
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	1c02      	adds	r2, r0, #0
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	1c7b      	adds	r3, r7, #1
 8002492:	1c0a      	adds	r2, r1, #0
 8002494:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002496:	1c7b      	adds	r3, r7, #1
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249e:	1cbb      	adds	r3, r7, #2
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a6:	e003      	b.n	80024b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a8:	1cbb      	adds	r3, r7, #2
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	000a      	movs	r2, r1
 80024c2:	1cbb      	adds	r3, r7, #2
 80024c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	1cbb      	adds	r3, r7, #2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	1cb9      	adds	r1, r7, #2
 80024dc:	8809      	ldrh	r1, [r1, #0]
 80024de:	400b      	ands	r3, r1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	0002      	movs	r2, r0
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	1dba      	adds	r2, r7, #6
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	4013      	ands	r3, r2
 8002506:	d008      	beq.n	800251a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800250a:	1dba      	adds	r2, r7, #6
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	0018      	movs	r0, r3
 8002516:	f7fd ff7f 	bl	8000418 <HAL_GPIO_EXTI_Callback>
  }
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b08b      	sub	sp, #44	; 0x2c
 800252c:	af06      	add	r7, sp, #24
 800252e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0ff      	b.n	800273a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a81      	ldr	r2, [pc, #516]	; (8002744 <HAL_PCD_Init+0x21c>)
 800253e:	5c9b      	ldrb	r3, [r3, r2]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	23aa      	movs	r3, #170	; 0xaa
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	2100      	movs	r1, #0
 800254e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f008 f8d0 	bl	800a6f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <HAL_PCD_Init+0x21c>)
 800255c:	2103      	movs	r1, #3
 800255e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0018      	movs	r0, r3
 8002566:	f004 f96f 	bl	8006848 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256a:	230f      	movs	r3, #15
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e058      	b.n	8002626 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002574:	200f      	movs	r0, #15
 8002576:	183b      	adds	r3, r7, r0
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	0013      	movs	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	189b      	adds	r3, r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	18cb      	adds	r3, r1, r3
 8002588:	3301      	adds	r3, #1
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800258e:	183b      	adds	r3, r7, r0
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	0013      	movs	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	189b      	adds	r3, r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	183a      	adds	r2, r7, r0
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025a4:	0004      	movs	r4, r0
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	193b      	adds	r3, r7, r4
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b298      	uxth	r0, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	0013      	movs	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	18cb      	adds	r3, r1, r3
 80025bc:	3336      	adds	r3, #54	; 0x36
 80025be:	1c02      	adds	r2, r0, #0
 80025c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	0013      	movs	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	18cb      	adds	r3, r1, r3
 80025d4:	3303      	adds	r3, #3
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	0013      	movs	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	189b      	adds	r3, r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	18cb      	adds	r3, r1, r3
 80025ea:	3338      	adds	r3, #56	; 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	0013      	movs	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	189b      	adds	r3, r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	18cb      	adds	r3, r1, r3
 8002600:	333c      	adds	r3, #60	; 0x3c
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	0013      	movs	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	189b      	adds	r3, r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	18cb      	adds	r3, r1, r3
 8002616:	3340      	adds	r3, #64	; 0x40
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	193b      	adds	r3, r7, r4
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	193b      	adds	r3, r7, r4
 8002622:	3201      	adds	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	210f      	movs	r1, #15
 8002628:	187b      	adds	r3, r7, r1
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d39f      	bcc.n	8002574 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e056      	b.n	80026ea <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800263c:	240f      	movs	r4, #15
 800263e:	193b      	adds	r3, r7, r4
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	236a      	movs	r3, #106	; 0x6a
 8002646:	33ff      	adds	r3, #255	; 0xff
 8002648:	0019      	movs	r1, r3
 800264a:	0013      	movs	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	189b      	adds	r3, r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	18c3      	adds	r3, r0, r3
 8002654:	185b      	adds	r3, r3, r1
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800265a:	193b      	adds	r3, r7, r4
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	23b4      	movs	r3, #180	; 0xb4
 8002662:	0059      	lsls	r1, r3, #1
 8002664:	0013      	movs	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	189b      	adds	r3, r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	18c3      	adds	r3, r0, r3
 800266e:	185b      	adds	r3, r3, r1
 8002670:	193a      	adds	r2, r7, r4
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002676:	193b      	adds	r3, r7, r4
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	236c      	movs	r3, #108	; 0x6c
 800267e:	33ff      	adds	r3, #255	; 0xff
 8002680:	0019      	movs	r1, r3
 8002682:	0013      	movs	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	189b      	adds	r3, r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	18c3      	adds	r3, r0, r3
 800268c:	185b      	adds	r3, r3, r1
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002692:	193b      	adds	r3, r7, r4
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	23bc      	movs	r3, #188	; 0xbc
 800269a:	0059      	lsls	r1, r3, #1
 800269c:	0013      	movs	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	18c3      	adds	r3, r0, r3
 80026a6:	185b      	adds	r3, r3, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	23be      	movs	r3, #190	; 0xbe
 80026b4:	0059      	lsls	r1, r3, #1
 80026b6:	0013      	movs	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	18c3      	adds	r3, r0, r3
 80026c0:	185b      	adds	r3, r3, r1
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	0059      	lsls	r1, r3, #1
 80026d0:	0013      	movs	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	189b      	adds	r3, r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	18c3      	adds	r3, r0, r3
 80026da:	185b      	adds	r3, r3, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	3201      	adds	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3a1      	bcc.n	800263c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	466a      	mov	r2, sp
 8002700:	0011      	movs	r1, r2
 8002702:	001a      	movs	r2, r3
 8002704:	3210      	adds	r2, #16
 8002706:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002708:	c170      	stmia	r1!, {r4, r5, r6}
 800270a:	ca30      	ldmia	r2!, {r4, r5}
 800270c:	c130      	stmia	r1!, {r4, r5}
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f004 f8b2 	bl	800687c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_PCD_Init+0x21c>)
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d103      	bne.n	8002738 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f001 fd34 	bl	80041a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b005      	add	sp, #20
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	000002a9 	.word	0x000002a9

08002748 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	23aa      	movs	r3, #170	; 0xaa
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_PCD_Start+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e014      	b.n	800278a <HAL_PCD_Start+0x42>
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	23aa      	movs	r3, #170	; 0xaa
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	2101      	movs	r1, #1
 8002768:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0018      	movs	r0, r3
 8002770:	f004 f854 	bl	800681c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0018      	movs	r0, r3
 800277a:	f005 ffaf 	bl	80086dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	23aa      	movs	r3, #170	; 0xaa
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	2100      	movs	r1, #0
 8002786:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f005 ffb1 	bl	8008708 <USB_ReadInterrupts>
 80027a6:	0002      	movs	r2, r0
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d103      	bne.n	80027be <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fbbb 	bl	8002f34 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f005 ffa0 	bl	8008708 <USB_ReadInterrupts>
 80027c8:	0002      	movs	r2, r0
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	401a      	ands	r2, r3
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d114      	bne.n	8002802 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2244      	movs	r2, #68	; 0x44
 80027de:	5a9b      	ldrh	r3, [r3, r2]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	49a2      	ldr	r1, [pc, #648]	; (8002a70 <HAL_PCD_IRQHandler+0x2dc>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	b291      	uxth	r1, r2
 80027ec:	2244      	movs	r2, #68	; 0x44
 80027ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f008 f80b 	bl	800a80e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2100      	movs	r1, #0
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f945 	bl	8002a8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0018      	movs	r0, r3
 8002808:	f005 ff7e 	bl	8008708 <USB_ReadInterrupts>
 800280c:	0002      	movs	r2, r0
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	01db      	lsls	r3, r3, #7
 8002812:	401a      	ands	r2, r3
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	429a      	cmp	r2, r3
 800281a:	d10b      	bne.n	8002834 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2244      	movs	r2, #68	; 0x44
 8002822:	5a9b      	ldrh	r3, [r3, r2]
 8002824:	b29a      	uxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4992      	ldr	r1, [pc, #584]	; (8002a74 <HAL_PCD_IRQHandler+0x2e0>)
 800282c:	400a      	ands	r2, r1
 800282e:	b291      	uxth	r1, r2
 8002830:	2244      	movs	r2, #68	; 0x44
 8002832:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0018      	movs	r0, r3
 800283a:	f005 ff65 	bl	8008708 <USB_ReadInterrupts>
 800283e:	0002      	movs	r2, r0
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	019b      	lsls	r3, r3, #6
 8002844:	401a      	ands	r2, r3
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	429a      	cmp	r2, r3
 800284c:	d10b      	bne.n	8002866 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2244      	movs	r2, #68	; 0x44
 8002854:	5a9b      	ldrh	r3, [r3, r2]
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4986      	ldr	r1, [pc, #536]	; (8002a78 <HAL_PCD_IRQHandler+0x2e4>)
 800285e:	400a      	ands	r2, r1
 8002860:	b291      	uxth	r1, r2
 8002862:	2244      	movs	r2, #68	; 0x44
 8002864:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	0018      	movs	r0, r3
 800286c:	f005 ff4c 	bl	8008708 <USB_ReadInterrupts>
 8002870:	0002      	movs	r2, r0
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	015b      	lsls	r3, r3, #5
 8002876:	401a      	ands	r2, r3
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	429a      	cmp	r2, r3
 800287e:	d137      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	5a9b      	ldrh	r3, [r3, r2]
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2104      	movs	r1, #4
 8002890:	438a      	bics	r2, r1
 8002892:	b291      	uxth	r1, r2
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	5a9b      	ldrh	r3, [r3, r2]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2108      	movs	r1, #8
 80028a8:	438a      	bics	r2, r1
 80028aa:	b291      	uxth	r1, r2
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	23b8      	movs	r3, #184	; 0xb8
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d109      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	23b8      	movs	r3, #184	; 0xb8
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	2100      	movs	r1, #0
 80028c4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2100      	movs	r1, #0
 80028ca:	0018      	movs	r0, r3
 80028cc:	f001 fc92 	bl	80041f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f007 ffdc 	bl	800a890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2244      	movs	r2, #68	; 0x44
 80028de:	5a9b      	ldrh	r3, [r3, r2]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_PCD_IRQHandler+0x2e8>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	b291      	uxth	r1, r2
 80028ec:	2244      	movs	r2, #68	; 0x44
 80028ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f005 ff07 	bl	8008708 <USB_ReadInterrupts>
 80028fa:	0002      	movs	r2, r0
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	401a      	ands	r2, r3
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	429a      	cmp	r2, r3
 8002908:	d127      	bne.n	800295a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	5a9b      	ldrh	r3, [r3, r2]
 8002912:	b29a      	uxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2108      	movs	r1, #8
 800291a:	430a      	orrs	r2, r1
 800291c:	b291      	uxth	r1, r2
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2244      	movs	r2, #68	; 0x44
 8002928:	5a9b      	ldrh	r3, [r3, r2]
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4953      	ldr	r1, [pc, #332]	; (8002a80 <HAL_PCD_IRQHandler+0x2ec>)
 8002932:	400a      	ands	r2, r1
 8002934:	b291      	uxth	r1, r2
 8002936:	2244      	movs	r2, #68	; 0x44
 8002938:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	5a9b      	ldrh	r3, [r3, r2]
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2104      	movs	r1, #4
 800294a:	430a      	orrs	r2, r1
 800294c:	b291      	uxth	r1, r2
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f007 ff7f 	bl	800a858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0018      	movs	r0, r3
 8002960:	f005 fed2 	bl	8008708 <USB_ReadInterrupts>
 8002964:	0003      	movs	r3, r0
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	4013      	ands	r3, r2
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d145      	bne.n	80029fa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2244      	movs	r2, #68	; 0x44
 8002974:	5a9b      	ldrh	r3, [r3, r2]
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	438a      	bics	r2, r1
 8002980:	b291      	uxth	r1, r2
 8002982:	2244      	movs	r2, #68	; 0x44
 8002984:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	23b8      	movs	r3, #184	; 0xb8
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12f      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	5a9b      	ldrh	r3, [r3, r2]
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2104      	movs	r1, #4
 80029a2:	430a      	orrs	r2, r1
 80029a4:	b291      	uxth	r1, r2
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	5a9b      	ldrh	r3, [r3, r2]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2108      	movs	r1, #8
 80029ba:	430a      	orrs	r2, r1
 80029bc:	b291      	uxth	r1, r2
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	23b8      	movs	r3, #184	; 0xb8
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	2101      	movs	r1, #1
 80029ca:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2254      	movs	r2, #84	; 0x54
 80029d2:	5a9b      	ldrh	r3, [r3, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	223c      	movs	r2, #60	; 0x3c
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	23b9      	movs	r3, #185	; 0xb9
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2101      	movs	r1, #1
 80029ea:	0018      	movs	r0, r3
 80029ec:	f001 fc02 	bl	80041f4 <HAL_PCDEx_LPM_Callback>
 80029f0:	e003      	b.n	80029fa <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f007 ff2f 	bl	800a858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f005 fe82 	bl	8008708 <USB_ReadInterrupts>
 8002a04:	0002      	movs	r2, r0
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d10f      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2244      	movs	r2, #68	; 0x44
 8002a1a:	5a9b      	ldrh	r3, [r3, r2]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4918      	ldr	r1, [pc, #96]	; (8002a84 <HAL_PCD_IRQHandler+0x2f0>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	b291      	uxth	r1, r2
 8002a28:	2244      	movs	r2, #68	; 0x44
 8002a2a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f007 fede 	bl	800a7f0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f005 fe65 	bl	8008708 <USB_ReadInterrupts>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	401a      	ands	r2, r3
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10b      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2244      	movs	r2, #68	; 0x44
 8002a54:	5a9b      	ldrh	r3, [r3, r2]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_PCD_IRQHandler+0x2f4>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	b291      	uxth	r1, r2
 8002a62:	2244      	movs	r2, #68	; 0x44
 8002a64:	5299      	strh	r1, [r3, r2]
  }
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	fffffbff 	.word	0xfffffbff
 8002a74:	ffffbfff 	.word	0xffffbfff
 8002a78:	ffffdfff 	.word	0xffffdfff
 8002a7c:	ffffefff 	.word	0xffffefff
 8002a80:	fffff7ff 	.word	0xfffff7ff
 8002a84:	fffffdff 	.word	0xfffffdff
 8002a88:	fffffeff 	.word	0xfffffeff

08002a8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	000a      	movs	r2, r1
 8002a96:	1cfb      	adds	r3, r7, #3
 8002a98:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	23aa      	movs	r3, #170	; 0xaa
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_SetAddress+0x1e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e017      	b.n	8002ada <HAL_PCD_SetAddress+0x4e>
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	23aa      	movs	r3, #170	; 0xaa
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1cfa      	adds	r2, r7, #3
 8002ab8:	2124      	movs	r1, #36	; 0x24
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	1cfb      	adds	r3, r7, #3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f005 fdf3 	bl	80086b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	23aa      	movs	r3, #170	; 0xaa
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ae2:	b590      	push	{r4, r7, lr}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	000c      	movs	r4, r1
 8002aec:	0010      	movs	r0, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	1cfb      	adds	r3, r7, #3
 8002af2:	1c22      	adds	r2, r4, #0
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	003b      	movs	r3, r7
 8002af8:	1c02      	adds	r2, r0, #0
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	1cbb      	adds	r3, r7, #2
 8002afe:	1c0a      	adds	r2, r1, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b02:	230b      	movs	r3, #11
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b0a:	1cfb      	adds	r3, r7, #3
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da0f      	bge.n	8002b34 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b14:	1cfb      	adds	r3, r7, #3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2207      	movs	r2, #7
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	0013      	movs	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	18d3      	adds	r3, r2, r3
 8002b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	705a      	strb	r2, [r3, #1]
 8002b32:	e00f      	b.n	8002b54 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	1cfb      	adds	r3, r7, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2207      	movs	r2, #7
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	3369      	adds	r3, #105	; 0x69
 8002b46:	33ff      	adds	r3, #255	; 0xff
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	18d3      	adds	r3, r2, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	1cfb      	adds	r3, r7, #3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b62:	003b      	movs	r3, r7
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1cba      	adds	r2, r7, #2
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b84:	1cbb      	adds	r3, r7, #2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d102      	bne.n	8002b92 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	23aa      	movs	r3, #170	; 0xaa
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_EP_Open+0xc0>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e013      	b.n	8002bca <HAL_PCD_EP_Open+0xe8>
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	23aa      	movs	r3, #170	; 0xaa
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	2101      	movs	r1, #1
 8002baa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f003 fe8d 	bl	80068d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	23aa      	movs	r3, #170	; 0xaa
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b005      	add	sp, #20
 8002bd0:	bd90      	pop	{r4, r7, pc}

08002bd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	000a      	movs	r2, r1
 8002bdc:	1cfb      	adds	r3, r7, #3
 8002bde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be0:	1cfb      	adds	r3, r7, #3
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da0f      	bge.n	8002c0a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	1cfb      	adds	r3, r7, #3
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	18d3      	adds	r3, r2, r3
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	705a      	strb	r2, [r3, #1]
 8002c08:	e00f      	b.n	8002c2a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	1cfb      	adds	r3, r7, #3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2207      	movs	r2, #7
 8002c10:	401a      	ands	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	3369      	adds	r3, #105	; 0x69
 8002c1c:	33ff      	adds	r3, #255	; 0xff
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c2a:	1cfb      	adds	r3, r7, #3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4013      	ands	r3, r2
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	23aa      	movs	r3, #170	; 0xaa
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_PCD_EP_Close+0x76>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e011      	b.n	8002c6c <HAL_PCD_EP_Close+0x9a>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	23aa      	movs	r3, #170	; 0xaa
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	2101      	movs	r1, #1
 8002c50:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f004 f9ae 	bl	8006fbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	23aa      	movs	r3, #170	; 0xaa
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	2100      	movs	r1, #0
 8002c68:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b004      	add	sp, #16
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	200b      	movs	r0, #11
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	1c0a      	adds	r2, r1, #0
 8002c86:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	0001      	movs	r1, r0
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2207      	movs	r2, #7
 8002c90:	401a      	ands	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	3369      	adds	r3, #105	; 0x69
 8002c9c:	33ff      	adds	r3, #255	; 0xff
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	18d3      	adds	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d107      	bne.n	8002ce4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f004 fb2d 	bl	800733c <USB_EPStartXfer>
 8002ce2:	e006      	b.n	8002cf2 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	0011      	movs	r1, r2
 8002cec:	0018      	movs	r0, r3
 8002cee:	f004 fb25 	bl	800733c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	000a      	movs	r2, r1
 8002d06:	1cfb      	adds	r3, r7, #3
 8002d08:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d0a:	1cfb      	adds	r3, r7, #3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2207      	movs	r2, #7
 8002d10:	401a      	ands	r2, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	23c2      	movs	r3, #194	; 0xc2
 8002d16:	0059      	lsls	r1, r3, #1
 8002d18:	0013      	movs	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	18c3      	adds	r3, r0, r3
 8002d22:	185b      	adds	r3, r3, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	200b      	movs	r0, #11
 8002d3c:	183b      	adds	r3, r7, r0
 8002d3e:	1c0a      	adds	r2, r1, #0
 8002d40:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	183b      	adds	r3, r7, r0
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	18d3      	adds	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2207      	movs	r2, #7
 8002d86:	4013      	ands	r3, r2
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2207      	movs	r2, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	d107      	bne.n	8002da8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f004 facb 	bl	800733c <USB_EPStartXfer>
 8002da6:	e006      	b.n	8002db6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	0011      	movs	r1, r2
 8002db0:	0018      	movs	r0, r3
 8002db2:	f004 fac3 	bl	800733c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	000a      	movs	r2, r1
 8002dca:	1cfb      	adds	r3, r7, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dce:	1cfb      	adds	r3, r7, #3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d901      	bls.n	8002de2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e046      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	1cfb      	adds	r3, r7, #3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da0f      	bge.n	8002e0c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dec:	1cfb      	adds	r3, r7, #3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2207      	movs	r2, #7
 8002df2:	4013      	ands	r3, r2
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	0013      	movs	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	705a      	strb	r2, [r3, #1]
 8002e0a:	e00d      	b.n	8002e28 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e0c:	1cfb      	adds	r3, r7, #3
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	0013      	movs	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3369      	adds	r3, #105	; 0x69
 8002e1a:	33ff      	adds	r3, #255	; 0xff
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2e:	1cfb      	adds	r3, r7, #3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2207      	movs	r2, #7
 8002e34:	4013      	ands	r3, r2
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	23aa      	movs	r3, #170	; 0xaa
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_EP_SetStall+0x8c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e011      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xb0>
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	23aa      	movs	r3, #170	; 0xaa
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	2101      	movs	r1, #1
 8002e54:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f005 fb26 	bl	80084b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	23aa      	movs	r3, #170	; 0xaa
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	000a      	movs	r2, r1
 8002e82:	1cfb      	adds	r3, r7, #3
 8002e84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e86:	1cfb      	adds	r3, r7, #3
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d901      	bls.n	8002e9a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e048      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e9a:	1cfb      	adds	r3, r7, #3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da0f      	bge.n	8002ec4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	1cfb      	adds	r3, r7, #3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	4013      	ands	r3, r2
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	0013      	movs	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	1cfb      	adds	r3, r7, #3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2207      	movs	r2, #7
 8002eca:	401a      	ands	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	3369      	adds	r3, #105	; 0x69
 8002ed6:	33ff      	adds	r3, #255	; 0xff
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	1cfb      	adds	r3, r7, #3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2207      	movs	r2, #7
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	23aa      	movs	r3, #170	; 0xaa
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_EP_ClrStall+0x90>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e011      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xb4>
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	23aa      	movs	r3, #170	; 0xaa
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	2101      	movs	r1, #1
 8002f10:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f005 fb18 	bl	8008550 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	23aa      	movs	r3, #170	; 0xaa
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	2100      	movs	r1, #0
 8002f28:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b096      	sub	sp, #88	; 0x58
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f3c:	f000 fbd8 	bl	80036f0 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2056      	movs	r0, #86	; 0x56
 8002f46:	183b      	adds	r3, r7, r0
 8002f48:	2144      	movs	r1, #68	; 0x44
 8002f4a:	5a52      	ldrh	r2, [r2, r1]
 8002f4c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	2455      	movs	r4, #85	; 0x55
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	210f      	movs	r1, #15
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d000      	beq.n	8002f68 <PCD_EP_ISR_Handler+0x34>
 8002f66:	e179      	b.n	800325c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d154      	bne.n	800301c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	200e      	movs	r0, #14
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	49af      	ldr	r1, [pc, #700]	; (800323c <PCD_EP_ISR_Handler+0x308>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	183a      	adds	r2, r7, r0
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	49ac      	ldr	r1, [pc, #688]	; (8003240 <PCD_EP_ISR_Handler+0x30c>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	b292      	uxth	r2, r2
 8002f92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3328      	adds	r3, #40	; 0x28
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2250      	movs	r2, #80	; 0x50
 8002fa0:	5a9b      	ldrh	r3, [r3, r2]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	18d2      	adds	r2, r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	18d3      	adds	r3, r2, r3
 8002fb4:	4aa3      	ldr	r2, [pc, #652]	; (8003244 <PCD_EP_ISR_Handler+0x310>)
 8002fb6:	4694      	mov	ip, r2
 8002fb8:	4463      	add	r3, ip
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	059b      	lsls	r3, r3, #22
 8002fbe:	0d9a      	lsrs	r2, r3, #22
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	18d2      	adds	r2, r2, r3
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f007 fbec 	bl	800a7b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	5c9b      	ldrb	r3, [r3, r2]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <PCD_EP_ISR_Handler+0xb8>
 8002fe8:	f000 fb82 	bl	80036f0 <PCD_EP_ISR_Handler+0x7bc>
 8002fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0xc4>
 8002ff4:	f000 fb7c 	bl	80036f0 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	5c9b      	ldrb	r3, [r3, r2]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	4252      	negs	r2, r2
 8003004:	4313      	orrs	r3, r2
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b291      	uxth	r1, r2
 800300e:	224c      	movs	r2, #76	; 0x4c
 8003010:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2224      	movs	r2, #36	; 0x24
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	e369      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3369      	adds	r3, #105	; 0x69
 8003020:	33ff      	adds	r3, #255	; 0xff
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2152      	movs	r1, #82	; 0x52
 800302a:	187b      	adds	r3, r7, r1
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003030:	187b      	adds	r3, r7, r1
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4013      	ands	r3, r2
 800303a:	d037      	beq.n	80030ac <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2250      	movs	r2, #80	; 0x50
 8003042:	5a9b      	ldrh	r3, [r3, r2]
 8003044:	b29b      	uxth	r3, r3
 8003046:	001a      	movs	r2, r3
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	18d2      	adds	r2, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	18d3      	adds	r3, r2, r3
 8003056:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <PCD_EP_ISR_Handler+0x314>)
 8003058:	4694      	mov	ip, r2
 800305a:	4463      	add	r3, ip
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	059b      	lsls	r3, r3, #22
 8003060:	0d9a      	lsrs	r2, r3, #22
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	22ac      	movs	r2, #172	; 0xac
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	1899      	adds	r1, r3, r2
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800307a:	b29b      	uxth	r3, r3
 800307c:	f005 fb96 	bl	80087ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29a      	uxth	r2, r3
 8003088:	2010      	movs	r0, #16
 800308a:	183b      	adds	r3, r7, r0
 800308c:	496f      	ldr	r1, [pc, #444]	; (800324c <PCD_EP_ISR_Handler+0x318>)
 800308e:	400a      	ands	r2, r1
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	183a      	adds	r2, r7, r0
 8003098:	8812      	ldrh	r2, [r2, #0]
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	430a      	orrs	r2, r1
 800309e:	b292      	uxth	r2, r2
 80030a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f007 fb4f 	bl	800a748 <HAL_PCD_SetupStageCallback>
 80030aa:	e321      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030ac:	2352      	movs	r3, #82	; 0x52
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	5e9b      	ldrsh	r3, [r3, r2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db00      	blt.n	80030ba <PCD_EP_ISR_Handler+0x186>
 80030b8:	e31a      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	201e      	movs	r0, #30
 80030c4:	183b      	adds	r3, r7, r0
 80030c6:	4961      	ldr	r1, [pc, #388]	; (800324c <PCD_EP_ISR_Handler+0x318>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	183a      	adds	r2, r7, r0
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	430a      	orrs	r2, r1
 80030d8:	b292      	uxth	r2, r2
 80030da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2250      	movs	r2, #80	; 0x50
 80030e2:	5a9b      	ldrh	r3, [r3, r2]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	001a      	movs	r2, r3
 80030e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	18d2      	adds	r2, r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	4a54      	ldr	r2, [pc, #336]	; (8003248 <PCD_EP_ISR_Handler+0x314>)
 80030f8:	4694      	mov	ip, r2
 80030fa:	4463      	add	r3, ip
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	059b      	lsls	r3, r3, #22
 8003100:	0d9a      	lsrs	r2, r3, #22
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01a      	beq.n	8003144 <PCD_EP_ISR_Handler+0x210>
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	6959      	ldr	r1, [r3, #20]
 800311e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003120:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003126:	b29b      	uxth	r3, r3
 8003128:	f005 fb40 	bl	80087ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	18d2      	adds	r2, r2, r3
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2100      	movs	r1, #0
 800313e:	0018      	movs	r0, r3
 8003140:	f007 fb17 	bl	800a772 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	001a      	movs	r2, r3
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d000      	beq.n	8003158 <PCD_EP_ISR_Handler+0x224>
 8003156:	e2cb      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2250      	movs	r2, #80	; 0x50
 8003164:	5a9b      	ldrh	r3, [r3, r2]
 8003166:	b29b      	uxth	r3, r3
 8003168:	001a      	movs	r2, r3
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	189b      	adds	r3, r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4a35      	ldr	r2, [pc, #212]	; (8003248 <PCD_EP_ISR_Handler+0x314>)
 8003174:	4694      	mov	ip, r2
 8003176:	4463      	add	r3, ip
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d110      	bne.n	80031a4 <PCD_EP_ISR_Handler+0x270>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <PCD_EP_ISR_Handler+0x31c>)
 800318a:	4013      	ands	r3, r2
 800318c:	b29a      	uxth	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <PCD_EP_ISR_Handler+0x30c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	b29a      	uxth	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	801a      	strh	r2, [r3, #0]
 80031a2:	e02b      	b.n	80031fc <PCD_EP_ISR_Handler+0x2c8>
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b3e      	cmp	r3, #62	; 0x3e
 80031aa:	d812      	bhi.n	80031d2 <PCD_EP_ISR_Handler+0x29e>
 80031ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	647b      	str	r3, [r7, #68]	; 0x44
 80031b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2201      	movs	r2, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	d002      	beq.n	80031c4 <PCD_EP_ISR_Handler+0x290>
 80031be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c0:	3301      	adds	r3, #1
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	801a      	strh	r2, [r3, #0]
 80031d0:	e014      	b.n	80031fc <PCD_EP_ISR_Handler+0x2c8>
 80031d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	221f      	movs	r2, #31
 80031e0:	4013      	ands	r3, r2
 80031e2:	d102      	bne.n	80031ea <PCD_EP_ISR_Handler+0x2b6>
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	3b01      	subs	r3, #1
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <PCD_EP_ISR_Handler+0x30c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29a      	uxth	r2, r3
 8003204:	2012      	movs	r0, #18
 8003206:	183b      	adds	r3, r7, r0
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <PCD_EP_ISR_Handler+0x320>)
 800320a:	400a      	ands	r2, r1
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	183b      	adds	r3, r7, r0
 8003210:	183a      	adds	r2, r7, r0
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0149      	lsls	r1, r1, #5
 8003218:	404a      	eors	r2, r1
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	183b      	adds	r3, r7, r0
 800321e:	183a      	adds	r2, r7, r0
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	0189      	lsls	r1, r1, #6
 8003226:	404a      	eors	r2, r1
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	183a      	adds	r2, r7, r0
 8003230:	8812      	ldrh	r2, [r2, #0]
 8003232:	4909      	ldr	r1, [pc, #36]	; (8003258 <PCD_EP_ISR_Handler+0x324>)
 8003234:	430a      	orrs	r2, r1
 8003236:	b292      	uxth	r2, r2
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	e259      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
 800323c:	ffff8f0f 	.word	0xffff8f0f
 8003240:	ffff8000 	.word	0xffff8000
 8003244:	00000402 	.word	0x00000402
 8003248:	00000406 	.word	0x00000406
 800324c:	00000f8f 	.word	0x00000f8f
 8003250:	ffff83ff 	.word	0xffff83ff
 8003254:	ffffbf8f 	.word	0xffffbf8f
 8003258:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	2055      	movs	r0, #85	; 0x55
 8003264:	183b      	adds	r3, r7, r0
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	18d2      	adds	r2, r2, r3
 800326c:	2152      	movs	r1, #82	; 0x52
 800326e:	187b      	adds	r3, r7, r1
 8003270:	8812      	ldrh	r2, [r2, #0]
 8003272:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003274:	187b      	adds	r3, r7, r1
 8003276:	2200      	movs	r2, #0
 8003278:	5e9b      	ldrsh	r3, [r3, r2]
 800327a:	2b00      	cmp	r3, #0
 800327c:	db00      	blt.n	8003280 <PCD_EP_ISR_Handler+0x34c>
 800327e:	e0fa      	b.n	8003476 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	001a      	movs	r2, r3
 8003286:	183b      	adds	r3, r7, r0
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29a      	uxth	r2, r3
 8003292:	2450      	movs	r4, #80	; 0x50
 8003294:	193b      	adds	r3, r7, r4
 8003296:	49cf      	ldr	r1, [pc, #828]	; (80035d4 <PCD_EP_ISR_Handler+0x6a0>)
 8003298:	400a      	ands	r2, r1
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	001a      	movs	r2, r3
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	18d3      	adds	r3, r2, r3
 80032aa:	193a      	adds	r2, r7, r4
 80032ac:	8812      	ldrh	r2, [r2, #0]
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	430a      	orrs	r2, r1
 80032b2:	b292      	uxth	r2, r2
 80032b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	0013      	movs	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	3369      	adds	r3, #105	; 0x69
 80032c4:	33ff      	adds	r3, #255	; 0xff
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	18d3      	adds	r3, r2, r3
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ce:	7b1b      	ldrb	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d125      	bne.n	8003320 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2250      	movs	r2, #80	; 0x50
 80032da:	5a9b      	ldrh	r3, [r3, r2]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	001a      	movs	r2, r3
 80032e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	18d3      	adds	r3, r2, r3
 80032ee:	4aba      	ldr	r2, [pc, #744]	; (80035d8 <PCD_EP_ISR_Handler+0x6a4>)
 80032f0:	4694      	mov	ip, r2
 80032f2:	4463      	add	r3, ip
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	2448      	movs	r4, #72	; 0x48
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	0592      	lsls	r2, r2, #22
 80032fc:	0d92      	lsrs	r2, r2, #22
 80032fe:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d100      	bne.n	800330a <PCD_EP_ISR_Handler+0x3d6>
 8003308:	e08d      	b.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003310:	6959      	ldr	r1, [r3, #20]
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	88da      	ldrh	r2, [r3, #6]
 8003316:	193b      	adds	r3, r7, r4
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f005 fa47 	bl	80087ac <USB_ReadPMA>
 800331e:	e082      	b.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	78db      	ldrb	r3, [r3, #3]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d10c      	bne.n	8003342 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003328:	2348      	movs	r3, #72	; 0x48
 800332a:	18fc      	adds	r4, r7, r3
 800332c:	2352      	movs	r3, #82	; 0x52
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	881a      	ldrh	r2, [r3, #0]
 8003332:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	0018      	movs	r0, r3
 8003338:	f000 f9ee 	bl	8003718 <HAL_PCD_EP_DB_Receive>
 800333c:	0003      	movs	r3, r0
 800333e:	8023      	strh	r3, [r4, #0]
 8003340:	e071      	b.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	001a      	movs	r2, r3
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	18d3      	adds	r3, r2, r3
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29a      	uxth	r2, r3
 8003354:	204a      	movs	r0, #74	; 0x4a
 8003356:	183b      	adds	r3, r7, r0
 8003358:	49a0      	ldr	r1, [pc, #640]	; (80035dc <PCD_EP_ISR_Handler+0x6a8>)
 800335a:	400a      	ands	r2, r1
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	001a      	movs	r2, r3
 8003364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	18d3      	adds	r3, r2, r3
 800336c:	183a      	adds	r2, r7, r0
 800336e:	8812      	ldrh	r2, [r2, #0]
 8003370:	499b      	ldr	r1, [pc, #620]	; (80035e0 <PCD_EP_ISR_Handler+0x6ac>)
 8003372:	430a      	orrs	r2, r1
 8003374:	b292      	uxth	r2, r2
 8003376:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	001a      	movs	r2, r3
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	001a      	movs	r2, r3
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	4013      	ands	r3, r2
 8003392:	d024      	beq.n	80033de <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2250      	movs	r2, #80	; 0x50
 800339a:	5a9b      	ldrh	r3, [r3, r2]
 800339c:	b29b      	uxth	r3, r3
 800339e:	001a      	movs	r2, r3
 80033a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	18d2      	adds	r2, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	4a8d      	ldr	r2, [pc, #564]	; (80035e4 <PCD_EP_ISR_Handler+0x6b0>)
 80033b0:	4694      	mov	ip, r2
 80033b2:	4463      	add	r3, ip
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	2448      	movs	r4, #72	; 0x48
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	0592      	lsls	r2, r2, #22
 80033bc:	0d92      	lsrs	r2, r2, #22
 80033be:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02e      	beq.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	891a      	ldrh	r2, [r3, #8]
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f005 f9e8 	bl	80087ac <USB_ReadPMA>
 80033dc:	e023      	b.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2250      	movs	r2, #80	; 0x50
 80033e4:	5a9b      	ldrh	r3, [r3, r2]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	001a      	movs	r2, r3
 80033ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	18d2      	adds	r2, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	4a77      	ldr	r2, [pc, #476]	; (80035d8 <PCD_EP_ISR_Handler+0x6a4>)
 80033fa:	4694      	mov	ip, r2
 80033fc:	4463      	add	r3, ip
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	2448      	movs	r4, #72	; 0x48
 8003402:	193b      	adds	r3, r7, r4
 8003404:	0592      	lsls	r2, r2, #22
 8003406:	0d92      	lsrs	r2, r2, #22
 8003408:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800340a:	193b      	adds	r3, r7, r4
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003418:	6959      	ldr	r1, [r3, #20]
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	895a      	ldrh	r2, [r3, #10]
 800341e:	193b      	adds	r3, r7, r4
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	f005 f9c3 	bl	80087ac <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	2148      	movs	r1, #72	; 0x48
 800342c:	187b      	adds	r3, r7, r1
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	18d2      	adds	r2, r2, r3
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	187b      	adds	r3, r7, r1
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	18d2      	adds	r2, r2, r3
 8003440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003442:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <PCD_EP_ISR_Handler+0x524>
 800344c:	187b      	adds	r3, r7, r1
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f007 f986 	bl	800a772 <HAL_PCD_DataOutStageCallback>
 8003466:	e006      	b.n	8003476 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f003 ff63 	bl	800733c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003476:	2452      	movs	r4, #82	; 0x52
 8003478:	193b      	adds	r3, r7, r4
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	4013      	ands	r3, r2
 8003480:	d100      	bne.n	8003484 <PCD_EP_ISR_Handler+0x550>
 8003482:	e135      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003484:	2055      	movs	r0, #85	; 0x55
 8003486:	183b      	adds	r3, r7, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	0013      	movs	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	189b      	adds	r3, r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	001a      	movs	r2, r3
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	2542      	movs	r5, #66	; 0x42
 80034ae:	197b      	adds	r3, r7, r5
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <PCD_EP_ISR_Handler+0x6b4>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	001a      	movs	r2, r3
 80034bc:	183b      	adds	r3, r7, r0
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	18d3      	adds	r3, r2, r3
 80034c4:	197a      	adds	r2, r7, r5
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	4948      	ldr	r1, [pc, #288]	; (80035ec <PCD_EP_ISR_Handler+0x6b8>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	b292      	uxth	r2, r2
 80034ce:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80034d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d2:	78db      	ldrb	r3, [r3, #3]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d100      	bne.n	80034da <PCD_EP_ISR_Handler+0x5a6>
 80034d8:	e0ad      	b.n	8003636 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	4013      	ands	r3, r2
 80034e8:	d046      	beq.n	8003578 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d125      	bne.n	800353e <PCD_EP_ISR_Handler+0x60a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2250      	movs	r2, #80	; 0x50
 80034fe:	5a9b      	ldrh	r3, [r3, r2]
 8003500:	b29b      	uxth	r3, r3
 8003502:	001a      	movs	r2, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	189b      	adds	r3, r3, r2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	00da      	lsls	r2, r3, #3
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	18d3      	adds	r3, r2, r3
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <PCD_EP_ISR_Handler+0x6b0>)
 8003516:	4694      	mov	ip, r2
 8003518:	4463      	add	r3, ip
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	4a33      	ldr	r2, [pc, #204]	; (80035f0 <PCD_EP_ISR_Handler+0x6bc>)
 8003524:	4013      	ands	r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <PCD_EP_ISR_Handler+0x6b8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	b29a      	uxth	r2, r3
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	e073      	b.n	8003626 <PCD_EP_ISR_Handler+0x6f2>
 800353e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d16f      	bne.n	8003626 <PCD_EP_ISR_Handler+0x6f2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2250      	movs	r2, #80	; 0x50
 8003552:	5a9b      	ldrh	r3, [r3, r2]
 8003554:	b29b      	uxth	r3, r3
 8003556:	001a      	movs	r2, r3
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	189b      	adds	r3, r3, r2
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00da      	lsls	r2, r3, #3
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	18d3      	adds	r3, r2, r3
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <PCD_EP_ISR_Handler+0x6b0>)
 800356a:	4694      	mov	ip, r2
 800356c:	4463      	add	r3, ip
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	2200      	movs	r2, #0
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	e056      	b.n	8003626 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d136      	bne.n	80035f4 <PCD_EP_ISR_Handler+0x6c0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2250      	movs	r2, #80	; 0x50
 8003592:	5a9b      	ldrh	r3, [r3, r2]
 8003594:	b29b      	uxth	r3, r3
 8003596:	001a      	movs	r2, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	189b      	adds	r3, r3, r2
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
 800359e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	00da      	lsls	r2, r3, #3
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <PCD_EP_ISR_Handler+0x6a4>)
 80035aa:	4694      	mov	ip, r2
 80035ac:	4463      	add	r3, ip
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <PCD_EP_ISR_Handler+0x6bc>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <PCD_EP_ISR_Handler+0x6b8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	801a      	strh	r2, [r3, #0]
 80035d0:	e029      	b.n	8003626 <PCD_EP_ISR_Handler+0x6f2>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	00000f8f 	.word	0x00000f8f
 80035d8:	00000406 	.word	0x00000406
 80035dc:	ffff8f8f 	.word	0xffff8f8f
 80035e0:	ffff80c0 	.word	0xffff80c0
 80035e4:	00000402 	.word	0x00000402
 80035e8:	ffff8f0f 	.word	0xffff8f0f
 80035ec:	ffff8000 	.word	0xffff8000
 80035f0:	ffff83ff 	.word	0xffff83ff
 80035f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d114      	bne.n	8003626 <PCD_EP_ISR_Handler+0x6f2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2250      	movs	r2, #80	; 0x50
 8003602:	5a9b      	ldrh	r3, [r3, r2]
 8003604:	b29b      	uxth	r3, r3
 8003606:	001a      	movs	r2, r3
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	189b      	adds	r3, r3, r2
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	00da      	lsls	r2, r3, #3
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	4a3d      	ldr	r2, [pc, #244]	; (8003710 <PCD_EP_ISR_Handler+0x7dc>)
 800361a:	4694      	mov	ip, r2
 800361c:	4463      	add	r3, ip
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	2200      	movs	r2, #0
 8003624:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f007 f8c0 	bl	800a7b4 <HAL_PCD_DataInStageCallback>
 8003634:	e05c      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	78db      	ldrb	r3, [r3, #3]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d150      	bne.n	80036e0 <PCD_EP_ISR_Handler+0x7ac>
 800363e:	2352      	movs	r3, #82	; 0x52
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4013      	ands	r3, r2
 800364a:	d149      	bne.n	80036e0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2250      	movs	r2, #80	; 0x50
 8003652:	5a9b      	ldrh	r3, [r3, r2]
 8003654:	b29b      	uxth	r3, r3
 8003656:	001a      	movs	r2, r3
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	18d2      	adds	r2, r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <PCD_EP_ISR_Handler+0x7e0>)
 8003668:	4694      	mov	ip, r2
 800366a:	4463      	add	r3, ip
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	187b      	adds	r3, r7, r1
 8003672:	0592      	lsls	r2, r2, #22
 8003674:	0d92      	lsrs	r2, r2, #22
 8003676:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	187b      	adds	r3, r7, r1
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d907      	bls.n	8003694 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	187b      	adds	r3, r7, r1
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	1ad2      	subs	r2, r2, r3
 800368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	e002      	b.n	800369a <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0011      	movs	r1, r2
 80036aa:	0018      	movs	r0, r3
 80036ac:	f007 f882 	bl	800a7b4 <HAL_PCD_DataInStageCallback>
 80036b0:	e01e      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80036b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	2140      	movs	r1, #64	; 0x40
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	18d2      	adds	r2, r2, r3
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	18d2      	adds	r2, r2, r3
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d6:	0011      	movs	r1, r2
 80036d8:	0018      	movs	r0, r3
 80036da:	f003 fe2f 	bl	800733c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80036de:	e007      	b.n	80036f0 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036e0:	2352      	movs	r3, #82	; 0x52
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 f930 	bl	8003950 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2244      	movs	r2, #68	; 0x44
 80036f6:	5a9b      	ldrh	r3, [r3, r2]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	da01      	bge.n	8003704 <PCD_EP_ISR_Handler+0x7d0>
 8003700:	f7ff fc1e 	bl	8002f40 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b016      	add	sp, #88	; 0x58
 800370c:	bdb0      	pop	{r4, r5, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	00000406 	.word	0x00000406
 8003714:	00000402 	.word	0x00000402

08003718 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	4013      	ands	r3, r2
 8003730:	d100      	bne.n	8003734 <HAL_PCD_EP_DB_Receive+0x1c>
 8003732:	e07d      	b.n	8003830 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2250      	movs	r2, #80	; 0x50
 800373a:	5a9b      	ldrh	r3, [r3, r2]
 800373c:	b29b      	uxth	r3, r3
 800373e:	001a      	movs	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	18d2      	adds	r2, r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <HAL_PCD_EP_DB_Receive+0x220>)
 8003750:	4694      	mov	ip, r2
 8003752:	4463      	add	r3, ip
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	211a      	movs	r1, #26
 8003758:	187b      	adds	r3, r7, r1
 800375a:	0592      	lsls	r2, r2, #22
 800375c:	0d92      	lsrs	r2, r2, #22
 800375e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	187b      	adds	r3, r7, r1
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d307      	bcc.n	800377c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	187b      	adds	r3, r7, r1
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	619a      	str	r2, [r3, #24]
 800377a:	e002      	b.n	8003782 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	001a      	movs	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	2018      	movs	r0, #24
 800379e:	183b      	adds	r3, r7, r0
 80037a0:	4966      	ldr	r1, [pc, #408]	; (800393c <HAL_PCD_EP_DB_Receive+0x224>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	183a      	adds	r2, r7, r0
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	0189      	lsls	r1, r1, #6
 80037b0:	404a      	eors	r2, r1
 80037b2:	801a      	strh	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	001a      	movs	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	183a      	adds	r2, r7, r0
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	495e      	ldr	r1, [pc, #376]	; (8003940 <HAL_PCD_EP_DB_Receive+0x228>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	b292      	uxth	r2, r2
 80037cc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037ce:	1dbb      	adds	r3, r7, #6
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	4013      	ands	r3, r2
 80037d6:	d01a      	beq.n	800380e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	001a      	movs	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	2016      	movs	r0, #22
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	4955      	ldr	r1, [pc, #340]	; (8003944 <HAL_PCD_EP_DB_Receive+0x22c>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	001a      	movs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	183a      	adds	r2, r7, r0
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	4950      	ldr	r1, [pc, #320]	; (8003948 <HAL_PCD_EP_DB_Receive+0x230>)
 8003808:	430a      	orrs	r2, r1
 800380a:	b292      	uxth	r2, r2
 800380c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800380e:	241a      	movs	r4, #26
 8003810:	193b      	adds	r3, r7, r4
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d100      	bne.n	800381a <HAL_PCD_EP_DB_Receive+0x102>
 8003818:	e086      	b.n	8003928 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6959      	ldr	r1, [r3, #20]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	891a      	ldrh	r2, [r3, #8]
 8003826:	193b      	adds	r3, r7, r4
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	f004 ffbf 	bl	80087ac <USB_ReadPMA>
 800382e:	e07b      	b.n	8003928 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2250      	movs	r2, #80	; 0x50
 8003836:	5a9b      	ldrh	r3, [r3, r2]
 8003838:	b29b      	uxth	r3, r3
 800383a:	001a      	movs	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	18d2      	adds	r2, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	18d3      	adds	r3, r2, r3
 800384a:	4a40      	ldr	r2, [pc, #256]	; (800394c <HAL_PCD_EP_DB_Receive+0x234>)
 800384c:	4694      	mov	ip, r2
 800384e:	4463      	add	r3, ip
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	211a      	movs	r1, #26
 8003854:	187b      	adds	r3, r7, r1
 8003856:	0592      	lsls	r2, r2, #22
 8003858:	0d92      	lsrs	r2, r2, #22
 800385a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	187b      	adds	r3, r7, r1
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d307      	bcc.n	8003878 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	187b      	adds	r3, r7, r1
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	619a      	str	r2, [r3, #24]
 8003876:	e002      	b.n	800387e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d121      	bne.n	80038ca <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	001a      	movs	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	18d3      	adds	r3, r2, r3
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29a      	uxth	r2, r3
 8003898:	201e      	movs	r0, #30
 800389a:	183b      	adds	r3, r7, r0
 800389c:	4927      	ldr	r1, [pc, #156]	; (800393c <HAL_PCD_EP_DB_Receive+0x224>)
 800389e:	400a      	ands	r2, r1
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	183a      	adds	r2, r7, r0
 80038a6:	8812      	ldrh	r2, [r2, #0]
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0189      	lsls	r1, r1, #6
 80038ac:	404a      	eors	r2, r1
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	183a      	adds	r2, r7, r0
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	491f      	ldr	r1, [pc, #124]	; (8003940 <HAL_PCD_EP_DB_Receive+0x228>)
 80038c4:	430a      	orrs	r2, r1
 80038c6:	b292      	uxth	r2, r2
 80038c8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	4013      	ands	r3, r2
 80038d2:	d11a      	bne.n	800390a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	001a      	movs	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	18d3      	adds	r3, r2, r3
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	201c      	movs	r0, #28
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	4916      	ldr	r1, [pc, #88]	; (8003944 <HAL_PCD_EP_DB_Receive+0x22c>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	001a      	movs	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	18d3      	adds	r3, r2, r3
 80038fe:	183a      	adds	r2, r7, r0
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	4911      	ldr	r1, [pc, #68]	; (8003948 <HAL_PCD_EP_DB_Receive+0x230>)
 8003904:	430a      	orrs	r2, r1
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800390a:	241a      	movs	r4, #26
 800390c:	193b      	adds	r3, r7, r4
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6959      	ldr	r1, [r3, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	895a      	ldrh	r2, [r3, #10]
 8003920:	193b      	adds	r3, r7, r4
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	f004 ff42 	bl	80087ac <USB_ReadPMA>
    }
  }

  return count;
 8003928:	231a      	movs	r3, #26
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	881b      	ldrh	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b009      	add	sp, #36	; 0x24
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	00000402 	.word	0x00000402
 800393c:	ffffbf8f 	.word	0xffffbf8f
 8003940:	ffff8080 	.word	0xffff8080
 8003944:	ffff8f8f 	.word	0xffff8f8f
 8003948:	ffff80c0 	.word	0xffff80c0
 800394c:	00000406 	.word	0x00000406

08003950 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b0a2      	sub	sp, #136	; 0x88
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	1dbb      	adds	r3, r7, #6
 800395c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	4013      	ands	r3, r2
 8003966:	d100      	bne.n	800396a <HAL_PCD_EP_DB_Transmit+0x1a>
 8003968:	e1c8      	b.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2250      	movs	r2, #80	; 0x50
 8003970:	5a9b      	ldrh	r3, [r3, r2]
 8003972:	b29b      	uxth	r3, r3
 8003974:	001a      	movs	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	18d2      	adds	r2, r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	18d3      	adds	r3, r2, r3
 8003984:	4ad7      	ldr	r2, [pc, #860]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003986:	4694      	mov	ip, r2
 8003988:	4463      	add	r3, ip
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	214e      	movs	r1, #78	; 0x4e
 800398e:	187b      	adds	r3, r7, r1
 8003990:	0592      	lsls	r2, r2, #22
 8003992:	0d92      	lsrs	r2, r2, #22
 8003994:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	187b      	adds	r3, r7, r1
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d907      	bls.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	619a      	str	r2, [r3, #24]
 80039b0:	e002      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d000      	beq.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x72>
 80039c0:	e0b5      	b.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d125      	bne.n	8003a16 <HAL_PCD_EP_DB_Transmit+0xc6>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2250      	movs	r2, #80	; 0x50
 80039d6:	5a9b      	ldrh	r3, [r3, r2]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	001a      	movs	r2, r3
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00da      	lsls	r2, r3, #3
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	18d3      	adds	r3, r2, r3
 80039ec:	4abd      	ldr	r2, [pc, #756]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80039ee:	4694      	mov	ip, r2
 80039f0:	4463      	add	r3, ip
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4abb      	ldr	r2, [pc, #748]	; (8003ce8 <HAL_PCD_EP_DB_Transmit+0x398>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	4ab8      	ldr	r2, [pc, #736]	; (8003cec <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	e01b      	b.n	8003a4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d117      	bne.n	8003a4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2250      	movs	r2, #80	; 0x50
 8003a2a:	5a9b      	ldrh	r3, [r3, r2]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	001a      	movs	r2, r3
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	00da      	lsls	r2, r3, #3
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	4aa8      	ldr	r2, [pc, #672]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003a42:	4694      	mov	ip, r2
 8003a44:	4463      	add	r3, ip
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d125      	bne.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x158>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2250      	movs	r2, #80	; 0x50
 8003a68:	5a9b      	ldrh	r3, [r3, r2]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	00da      	lsls	r2, r3, #3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	4a9c      	ldr	r2, [pc, #624]	; (8003cf0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003a80:	4694      	mov	ip, r2
 8003a82:	4463      	add	r3, ip
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4a96      	ldr	r2, [pc, #600]	; (8003ce8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4a93      	ldr	r2, [pc, #588]	; (8003cec <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	801a      	strh	r2, [r3, #0]
 8003aa6:	e018      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x18a>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2250      	movs	r2, #80	; 0x50
 8003ab6:	5a9b      	ldrh	r3, [r3, r2]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	001a      	movs	r2, r3
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	00da      	lsls	r2, r3, #3
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	4a88      	ldr	r2, [pc, #544]	; (8003cf0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003ace:	4694      	mov	ip, r2
 8003ad0:	4463      	add	r3, ip
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f006 fe66 	bl	800a7b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ae8:	1dbb      	adds	r3, r7, #6
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	01db      	lsls	r3, r3, #7
 8003af0:	4013      	ands	r3, r2
 8003af2:	d100      	bne.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003af4:	e2d4      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	001a      	movs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	18d3      	adds	r3, r2, r3
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	2012      	movs	r0, #18
 8003b0a:	183b      	adds	r3, r7, r0
 8003b0c:	4979      	ldr	r1, [pc, #484]	; (8003cf4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	001a      	movs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	183a      	adds	r2, r7, r0
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	4974      	ldr	r1, [pc, #464]	; (8003cf8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	e2b8      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b2e:	1dbb      	adds	r3, r7, #6
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	01db      	lsls	r3, r3, #7
 8003b36:	4013      	ands	r3, r2
 8003b38:	d01a      	beq.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	18d3      	adds	r3, r2, r3
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	2044      	movs	r0, #68	; 0x44
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	4968      	ldr	r1, [pc, #416]	; (8003cf4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	8812      	ldrh	r2, [r2, #0]
 8003b68:	4963      	ldr	r1, [pc, #396]	; (8003cf8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d000      	beq.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x22c>
 8003b7a:	e291      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	214e      	movs	r1, #78	; 0x4e
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	18d2      	adds	r2, r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	18d2      	adds	r2, r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6a1a      	ldr	r2, [r3, #32]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d309      	bcc.n	8003bba <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6a1a      	ldr	r2, [r3, #32]
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb2:	1ad2      	subs	r2, r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	621a      	str	r2, [r3, #32]
 8003bb8:	e016      	b.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003bc2:	234e      	movs	r3, #78	; 0x4e
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2224      	movs	r2, #36	; 0x24
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]
 8003bd2:	e009      	b.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d150      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x342>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2250      	movs	r2, #80	; 0x50
 8003bfc:	5a9b      	ldrh	r3, [r3, r2]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	001a      	movs	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	00da      	lsls	r2, r3, #3
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	4a34      	ldr	r2, [pc, #208]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003c14:	4694      	mov	ip, r2
 8003c16:	4463      	add	r3, ip
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e044      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c44:	2b3e      	cmp	r3, #62	; 0x3e
 8003c46:	d810      	bhi.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x31a>
 8003c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c50:	2201      	movs	r2, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	d002      	beq.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c58:	3301      	adds	r3, #1
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	029b      	lsls	r3, r3, #10
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e030      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	221f      	movs	r2, #31
 8003c74:	4013      	ands	r3, r2
 8003c76:	d102      	bne.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e01c      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d118      	bne.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2250      	movs	r2, #80	; 0x50
 8003ca6:	5a9b      	ldrh	r3, [r3, r2]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	001a      	movs	r2, r3
 8003cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cba:	18d3      	adds	r3, r2, r3
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003cbe:	4694      	mov	ip, r2
 8003cc0:	4463      	add	r3, ip
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	891a      	ldrh	r2, [r3, #8]
 8003cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f004 fd22 	bl	8008724 <USB_WritePMA>
 8003ce0:	e1de      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	00000402 	.word	0x00000402
 8003ce8:	ffff83ff 	.word	0xffff83ff
 8003cec:	ffff8000 	.word	0xffff8000
 8003cf0:	00000406 	.word	0x00000406
 8003cf4:	ffff8f8f 	.word	0xffff8f8f
 8003cf8:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2250      	movs	r2, #80	; 0x50
 8003d02:	5a9b      	ldrh	r3, [r3, r2]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	18d2      	adds	r2, r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	4aca      	ldr	r2, [pc, #808]	; (8004040 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003d18:	4694      	mov	ip, r2
 8003d1a:	4463      	add	r3, ip
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	214e      	movs	r1, #78	; 0x4e
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	0592      	lsls	r2, r2, #22
 8003d24:	0d92      	lsrs	r2, r2, #22
 8003d26:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d307      	bcc.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	619a      	str	r2, [r3, #24]
 8003d42:	e002      	b.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x404>
 8003d52:	e0c0      	b.n	8003ed6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d125      	bne.n	8003da8 <HAL_PCD_EP_DB_Transmit+0x458>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2250      	movs	r2, #80	; 0x50
 8003d68:	5a9b      	ldrh	r3, [r3, r2]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00da      	lsls	r2, r3, #3
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	18d3      	adds	r3, r2, r3
 8003d7e:	4ab1      	ldr	r2, [pc, #708]	; (8004044 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003d80:	4694      	mov	ip, r2
 8003d82:	4463      	add	r3, ip
 8003d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	4aae      	ldr	r2, [pc, #696]	; (8004048 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4aab      	ldr	r2, [pc, #684]	; (800404c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da4:	801a      	strh	r2, [r3, #0]
 8003da6:	e01b      	b.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d117      	bne.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	677b      	str	r3, [r7, #116]	; 0x74
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2250      	movs	r2, #80	; 0x50
 8003dbc:	5a9b      	ldrh	r3, [r3, r2]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	677b      	str	r3, [r7, #116]	; 0x74
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00da      	lsls	r2, r3, #3
 8003dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd0:	18d3      	adds	r3, r2, r3
 8003dd2:	4a9c      	ldr	r2, [pc, #624]	; (8004044 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003dd4:	4694      	mov	ip, r2
 8003dd6:	4463      	add	r3, ip
 8003dd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ddc:	2200      	movs	r2, #0
 8003dde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d130      	bne.n	8003e50 <HAL_PCD_EP_DB_Transmit+0x500>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	187a      	adds	r2, r7, r1
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2250      	movs	r2, #80	; 0x50
 8003dfe:	5a9b      	ldrh	r3, [r3, r2]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	187a      	adds	r2, r7, r1
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00da      	lsls	r2, r3, #3
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	18d3      	adds	r3, r2, r3
 8003e1a:	4a89      	ldr	r2, [pc, #548]	; (8004040 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	4463      	add	r3, ip
 8003e20:	2184      	movs	r1, #132	; 0x84
 8003e22:	187a      	adds	r2, r7, r1
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4a86      	ldr	r2, [pc, #536]	; (8004048 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4a82      	ldr	r2, [pc, #520]	; (800404c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	e018      	b.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x532>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d114      	bne.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x532>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2250      	movs	r2, #80	; 0x50
 8003e5e:	5a9b      	ldrh	r3, [r3, r2]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	001a      	movs	r2, r3
 8003e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00da      	lsls	r2, r3, #3
 8003e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	4a72      	ldr	r2, [pc, #456]	; (8004040 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003e76:	4694      	mov	ip, r2
 8003e78:	4463      	add	r3, ip
 8003e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e7e:	2200      	movs	r2, #0
 8003e80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	0011      	movs	r1, r2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f006 fc92 	bl	800a7b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e90:	1dbb      	adds	r3, r7, #6
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d000      	beq.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e9c:	e100      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	18d3      	adds	r3, r2, r3
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	2046      	movs	r0, #70	; 0x46
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	4966      	ldr	r1, [pc, #408]	; (8004050 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	18d3      	adds	r3, r2, r3
 8003ec8:	183a      	adds	r2, r7, r0
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	4961      	ldr	r1, [pc, #388]	; (8004054 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	e0e4      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ed6:	1dbb      	adds	r3, r7, #6
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	01db      	lsls	r3, r3, #7
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d11a      	bne.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	001a      	movs	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	204c      	movs	r0, #76	; 0x4c
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	4955      	ldr	r1, [pc, #340]	; (8004050 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003efa:	400a      	ands	r2, r1
 8003efc:	801a      	strh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	001a      	movs	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	18d3      	adds	r3, r2, r3
 8003f0c:	183a      	adds	r2, r7, r0
 8003f0e:	8812      	ldrh	r2, [r2, #0]
 8003f10:	4950      	ldr	r1, [pc, #320]	; (8004054 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003f12:	430a      	orrs	r2, r1
 8003f14:	b292      	uxth	r2, r2
 8003f16:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d000      	beq.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003f22:	e0bd      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	214e      	movs	r1, #78	; 0x4e
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	18d2      	adds	r2, r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	18d2      	adds	r2, r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d309      	bcc.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	621a      	str	r2, [r3, #32]
 8003f60:	e016      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003f6a:	234e      	movs	r3, #78	; 0x4e
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2224      	movs	r2, #36	; 0x24
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]
 8003f7a:	e009      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2224      	movs	r2, #36	; 0x24
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	667b      	str	r3, [r7, #100]	; 0x64
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15c      	bne.n	8004058 <HAL_PCD_EP_DB_Transmit+0x708>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2250      	movs	r2, #80	; 0x50
 8003faa:	5a9b      	ldrh	r3, [r3, r2]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	001a      	movs	r2, r3
 8003fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	00da      	lsls	r2, r3, #3
 8003fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003fc2:	4694      	mov	ip, r2
 8003fc4:	4463      	add	r3, ip
 8003fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d110      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e04d      	b.n	800408c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ff4:	d810      	bhi.n	8004018 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffe:	2201      	movs	r2, #1
 8004000:	4013      	ands	r3, r2
 8004002:	d002      	beq.n	800400a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004006:	3301      	adds	r3, #1
 8004008:	657b      	str	r3, [r7, #84]	; 0x54
 800400a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400c:	b29b      	uxth	r3, r3
 800400e:	029b      	lsls	r3, r3, #10
 8004010:	b29a      	uxth	r2, r3
 8004012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e039      	b.n	800408c <HAL_PCD_EP_DB_Transmit+0x73c>
 8004018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	657b      	str	r3, [r7, #84]	; 0x54
 800401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004020:	221f      	movs	r2, #31
 8004022:	4013      	ands	r3, r2
 8004024:	d102      	bne.n	800402c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	3b01      	subs	r3, #1
 800402a:	657b      	str	r3, [r7, #84]	; 0x54
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402e:	b29b      	uxth	r3, r3
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	b29b      	uxth	r3, r3
 8004034:	4a05      	ldr	r2, [pc, #20]	; (800404c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e025      	b.n	800408c <HAL_PCD_EP_DB_Transmit+0x73c>
 8004040:	00000406 	.word	0x00000406
 8004044:	00000402 	.word	0x00000402
 8004048:	ffff83ff 	.word	0xffff83ff
 800404c:	ffff8000 	.word	0xffff8000
 8004050:	ffff8f8f 	.word	0xffff8f8f
 8004054:	ffffc080 	.word	0xffffc080
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d115      	bne.n	800408c <HAL_PCD_EP_DB_Transmit+0x73c>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2250      	movs	r2, #80	; 0x50
 8004066:	5a9b      	ldrh	r3, [r3, r2]
 8004068:	b29b      	uxth	r3, r3
 800406a:	001a      	movs	r2, r3
 800406c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800406e:	189b      	adds	r3, r3, r2
 8004070:	667b      	str	r3, [r7, #100]	; 0x64
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00da      	lsls	r2, r3, #3
 8004078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800407a:	18d3      	adds	r3, r2, r3
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800407e:	4694      	mov	ip, r2
 8004080:	4463      	add	r3, ip
 8004082:	663b      	str	r3, [r7, #96]	; 0x60
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	b29a      	uxth	r2, r3
 8004088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800408a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6959      	ldr	r1, [r3, #20]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	895a      	ldrh	r2, [r3, #10]
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	f004 fb42 	bl	8008724 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	001a      	movs	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d3      	adds	r3, r2, r3
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	2010      	movs	r0, #16
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	4911      	ldr	r1, [pc, #68]	; (80040fc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	183b      	adds	r3, r7, r0
 80040be:	183a      	adds	r2, r7, r0
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	2110      	movs	r1, #16
 80040c4:	404a      	eors	r2, r1
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	183b      	adds	r3, r7, r0
 80040ca:	183a      	adds	r2, r7, r0
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	2120      	movs	r1, #32
 80040d0:	404a      	eors	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	001a      	movs	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	183a      	adds	r2, r7, r0
 80040e4:	8812      	ldrh	r2, [r2, #0]
 80040e6:	4906      	ldr	r1, [pc, #24]	; (8004100 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	b292      	uxth	r2, r2
 80040ec:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b022      	add	sp, #136	; 0x88
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	00000406 	.word	0x00000406
 80040fc:	ffff8fbf 	.word	0xffff8fbf
 8004100:	ffff8080 	.word	0xffff8080

08004104 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	0008      	movs	r0, r1
 800410e:	0011      	movs	r1, r2
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	240a      	movs	r4, #10
 8004114:	193b      	adds	r3, r7, r4
 8004116:	1c02      	adds	r2, r0, #0
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	2308      	movs	r3, #8
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	1c0a      	adds	r2, r1, #0
 8004120:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004122:	0021      	movs	r1, r4
 8004124:	187b      	adds	r3, r7, r1
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	4013      	ands	r3, r2
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004132:	187b      	adds	r3, r7, r1
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	2207      	movs	r2, #7
 8004138:	4013      	ands	r3, r2
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	0013      	movs	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	189b      	adds	r3, r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e00b      	b.n	8004164 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800414c:	230a      	movs	r3, #10
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	0013      	movs	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	189b      	adds	r3, r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	3369      	adds	r3, #105	; 0x69
 800415c:	33ff      	adds	r3, #255	; 0xff
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004164:	2308      	movs	r3, #8
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b29a      	uxth	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	80da      	strh	r2, [r3, #6]
 800417c:	e00b      	b.n	8004196 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2201      	movs	r2, #1
 8004182:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	b29a      	uxth	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b29a      	uxth	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b007      	add	sp, #28
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	23ba      	movs	r3, #186	; 0xba
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	2101      	movs	r1, #1
 80041b6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	23b8      	movs	r3, #184	; 0xb8
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	2100      	movs	r1, #0
 80041c0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2254      	movs	r2, #84	; 0x54
 80041c6:	5a9b      	ldrh	r3, [r3, r2]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2201      	movs	r2, #1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b299      	uxth	r1, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2254      	movs	r2, #84	; 0x54
 80041d4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2254      	movs	r2, #84	; 0x54
 80041da:	5a9b      	ldrh	r3, [r3, r2]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2202      	movs	r2, #2
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b299      	uxth	r1, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2254      	movs	r2, #84	; 0x54
 80041e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b004      	add	sp, #16
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	000a      	movs	r2, r1
 80041fe:	1cfb      	adds	r3, r7, #3
 8004200:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	b002      	add	sp, #8
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f000 fb76 	bl	800490c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2201      	movs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	d100      	bne.n	800422c <HAL_RCC_OscConfig+0x20>
 800422a:	e08e      	b.n	800434a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800422c:	4bc5      	ldr	r3, [pc, #788]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	220c      	movs	r2, #12
 8004232:	4013      	ands	r3, r2
 8004234:	2b04      	cmp	r3, #4
 8004236:	d00e      	beq.n	8004256 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004238:	4bc2      	ldr	r3, [pc, #776]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	220c      	movs	r2, #12
 800423e:	4013      	ands	r3, r2
 8004240:	2b08      	cmp	r3, #8
 8004242:	d117      	bne.n	8004274 <HAL_RCC_OscConfig+0x68>
 8004244:	4bbf      	ldr	r3, [pc, #764]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	23c0      	movs	r3, #192	; 0xc0
 800424a:	025b      	lsls	r3, r3, #9
 800424c:	401a      	ands	r2, r3
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	025b      	lsls	r3, r3, #9
 8004252:	429a      	cmp	r2, r3
 8004254:	d10e      	bne.n	8004274 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004256:	4bbb      	ldr	r3, [pc, #748]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	029b      	lsls	r3, r3, #10
 800425e:	4013      	ands	r3, r2
 8004260:	d100      	bne.n	8004264 <HAL_RCC_OscConfig+0x58>
 8004262:	e071      	b.n	8004348 <HAL_RCC_OscConfig+0x13c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d000      	beq.n	800426e <HAL_RCC_OscConfig+0x62>
 800426c:	e06c      	b.n	8004348 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f000 fb4c 	bl	800490c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x80>
 800427c:	4bb1      	ldr	r3, [pc, #708]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4bb0      	ldr	r3, [pc, #704]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	0249      	lsls	r1, r1, #9
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e02f      	b.n	80042ec <HAL_RCC_OscConfig+0xe0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10c      	bne.n	80042ae <HAL_RCC_OscConfig+0xa2>
 8004294:	4bab      	ldr	r3, [pc, #684]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4baa      	ldr	r3, [pc, #680]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800429a:	49ab      	ldr	r1, [pc, #684]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	4ba8      	ldr	r3, [pc, #672]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4ba7      	ldr	r3, [pc, #668]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042a6:	49a9      	ldr	r1, [pc, #676]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e01e      	b.n	80042ec <HAL_RCC_OscConfig+0xe0>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d10e      	bne.n	80042d4 <HAL_RCC_OscConfig+0xc8>
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4ba2      	ldr	r3, [pc, #648]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	02c9      	lsls	r1, r1, #11
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	4b9f      	ldr	r3, [pc, #636]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b9e      	ldr	r3, [pc, #632]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	0249      	lsls	r1, r1, #9
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0xe0>
 80042d4:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b9a      	ldr	r3, [pc, #616]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042da:	499b      	ldr	r1, [pc, #620]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 80042dc:	400a      	ands	r2, r1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	4b98      	ldr	r3, [pc, #608]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042e6:	4999      	ldr	r1, [pc, #612]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d014      	beq.n	800431e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fa74 	bl	80017e0 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fe:	f7fd fa6f 	bl	80017e0 <HAL_GetTick>
 8004302:	0002      	movs	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	; 0x64
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e2fd      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004310:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	4013      	ands	r3, r2
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0xf2>
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd fa5f 	bl	80017e0 <HAL_GetTick>
 8004322:	0003      	movs	r3, r0
 8004324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fa5a 	bl	80017e0 <HAL_GetTick>
 800432c:	0002      	movs	r2, r0
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e2e8      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	029b      	lsls	r3, r3, #10
 8004342:	4013      	ands	r3, r2
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x11c>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2202      	movs	r2, #2
 8004350:	4013      	ands	r3, r2
 8004352:	d100      	bne.n	8004356 <HAL_RCC_OscConfig+0x14a>
 8004354:	e06c      	b.n	8004430 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004356:	4b7b      	ldr	r3, [pc, #492]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	220c      	movs	r2, #12
 800435c:	4013      	ands	r3, r2
 800435e:	d00e      	beq.n	800437e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004360:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	220c      	movs	r2, #12
 8004366:	4013      	ands	r3, r2
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11f      	bne.n	80043ac <HAL_RCC_OscConfig+0x1a0>
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	23c0      	movs	r3, #192	; 0xc0
 8004372:	025b      	lsls	r3, r3, #9
 8004374:	401a      	ands	r2, r3
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	429a      	cmp	r2, r3
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b71      	ldr	r3, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	4013      	ands	r3, r2
 8004386:	d005      	beq.n	8004394 <HAL_RCC_OscConfig+0x188>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e2bb      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004394:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	22f8      	movs	r2, #248	; 0xf8
 800439a:	4393      	bics	r3, r2
 800439c:	0019      	movs	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00da      	lsls	r2, r3, #3
 80043a4:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e041      	b.n	8004430 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d024      	beq.n	80043fe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b63      	ldr	r3, [pc, #396]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd fa0e 	bl	80017e0 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fd fa09 	bl	80017e0 <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e297      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2202      	movs	r2, #2
 80043e2:	4013      	ands	r3, r2
 80043e4:	d0f1      	beq.n	80043ca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	22f8      	movs	r2, #248	; 0xf8
 80043ec:	4393      	bics	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	00da      	lsls	r2, r3, #3
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e018      	b.n	8004430 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	4b51      	ldr	r3, [pc, #324]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004404:	2101      	movs	r1, #1
 8004406:	438a      	bics	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fd f9e9 	bl	80017e0 <HAL_GetTick>
 800440e:	0003      	movs	r3, r0
 8004410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd f9e4 	bl	80017e0 <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e272      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2202      	movs	r2, #2
 800442c:	4013      	ands	r3, r2
 800442e:	d1f1      	bne.n	8004414 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	4013      	ands	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004448:	2101      	movs	r1, #1
 800444a:	430a      	orrs	r2, r1
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444e:	f7fd f9c7 	bl	80017e0 <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004458:	f7fd f9c2 	bl	80017e0 <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e250      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d0f1      	beq.n	8004458 <HAL_RCC_OscConfig+0x24c>
 8004474:	e018      	b.n	80044a8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800447c:	2101      	movs	r1, #1
 800447e:	438a      	bics	r2, r1
 8004480:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fd f9ad 	bl	80017e0 <HAL_GetTick>
 8004486:	0003      	movs	r3, r0
 8004488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448c:	f7fd f9a8 	bl	80017e0 <HAL_GetTick>
 8004490:	0002      	movs	r2, r0
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e236      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d1f1      	bne.n	800448c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2204      	movs	r2, #4
 80044ae:	4013      	ands	r3, r2
 80044b0:	d100      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2a8>
 80044b2:	e0b5      	b.n	8004620 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b4:	201f      	movs	r0, #31
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	055b      	lsls	r3, r3, #21
 80044c4:	4013      	ands	r3, r2
 80044c6:	d110      	bne.n	80044ea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	0549      	lsls	r1, r1, #21
 80044d2:	430a      	orrs	r2, r1
 80044d4:	61da      	str	r2, [r3, #28]
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	055b      	lsls	r3, r3, #21
 80044de:	4013      	ands	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e4:	183b      	adds	r3, r7, r0
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCC_OscConfig+0x344>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	d11a      	bne.n	800452c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCC_OscConfig+0x344>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_RCC_OscConfig+0x344>)
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	0049      	lsls	r1, r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004504:	f7fd f96c 	bl	80017e0 <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fd f967 	bl	80017e0 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1f5      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x344>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4013      	ands	r3, r2
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10f      	bne.n	8004554 <HAL_RCC_OscConfig+0x348>
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 800453a:	2101      	movs	r1, #1
 800453c:	430a      	orrs	r2, r1
 800453e:	621a      	str	r2, [r3, #32]
 8004540:	e036      	b.n	80045b0 <HAL_RCC_OscConfig+0x3a4>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40021000 	.word	0x40021000
 8004548:	fffeffff 	.word	0xfffeffff
 800454c:	fffbffff 	.word	0xfffbffff
 8004550:	40007000 	.word	0x40007000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x36a>
 800455c:	4bca      	ldr	r3, [pc, #808]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	4bc9      	ldr	r3, [pc, #804]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004562:	2101      	movs	r1, #1
 8004564:	438a      	bics	r2, r1
 8004566:	621a      	str	r2, [r3, #32]
 8004568:	4bc7      	ldr	r3, [pc, #796]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	4bc6      	ldr	r3, [pc, #792]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800456e:	2104      	movs	r1, #4
 8004570:	438a      	bics	r2, r1
 8004572:	621a      	str	r2, [r3, #32]
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x3a4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x38c>
 800457e:	4bc2      	ldr	r3, [pc, #776]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	4bc1      	ldr	r3, [pc, #772]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004584:	2104      	movs	r1, #4
 8004586:	430a      	orrs	r2, r1
 8004588:	621a      	str	r2, [r3, #32]
 800458a:	4bbf      	ldr	r3, [pc, #764]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	4bbe      	ldr	r3, [pc, #760]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004590:	2101      	movs	r1, #1
 8004592:	430a      	orrs	r2, r1
 8004594:	621a      	str	r2, [r3, #32]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x3a4>
 8004598:	4bbb      	ldr	r3, [pc, #748]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	4bba      	ldr	r3, [pc, #744]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	621a      	str	r2, [r3, #32]
 80045a4:	4bb8      	ldr	r3, [pc, #736]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	4bb7      	ldr	r3, [pc, #732]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80045aa:	2104      	movs	r1, #4
 80045ac:	438a      	bics	r2, r1
 80045ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b8:	f7fd f912 	bl	80017e0 <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e009      	b.n	80045d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f90d 	bl	80017e0 <HAL_GetTick>
 80045c6:	0002      	movs	r2, r0
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	4aaf      	ldr	r2, [pc, #700]	; (800488c <HAL_RCC_OscConfig+0x680>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e19a      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4bac      	ldr	r3, [pc, #688]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3b6>
 80045e0:	e013      	b.n	800460a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fd f8fd 	bl	80017e0 <HAL_GetTick>
 80045e6:	0003      	movs	r3, r0
 80045e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e009      	b.n	8004600 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fd f8f8 	bl	80017e0 <HAL_GetTick>
 80045f0:	0002      	movs	r2, r0
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	4aa5      	ldr	r2, [pc, #660]	; (800488c <HAL_RCC_OscConfig+0x680>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e185      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	4ba1      	ldr	r3, [pc, #644]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800460a:	231f      	movs	r3, #31
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b9c      	ldr	r3, [pc, #624]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	4b9b      	ldr	r3, [pc, #620]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800461a:	499d      	ldr	r1, [pc, #628]	; (8004890 <HAL_RCC_OscConfig+0x684>)
 800461c:	400a      	ands	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2210      	movs	r2, #16
 8004626:	4013      	ands	r3, r2
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d12a      	bne.n	8004688 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004632:	4b95      	ldr	r3, [pc, #596]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004636:	4b94      	ldr	r3, [pc, #592]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004638:	2104      	movs	r1, #4
 800463a:	430a      	orrs	r2, r1
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800463e:	4b92      	ldr	r3, [pc, #584]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004642:	4b91      	ldr	r3, [pc, #580]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004644:	2101      	movs	r1, #1
 8004646:	430a      	orrs	r2, r1
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464a:	f7fd f8c9 	bl	80017e0 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004654:	f7fd f8c4 	bl	80017e0 <HAL_GetTick>
 8004658:	0002      	movs	r2, r0
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e152      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004666:	4b88      	ldr	r3, [pc, #544]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
 800466e:	d0f1      	beq.n	8004654 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004670:	4b85      	ldr	r3, [pc, #532]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	22f8      	movs	r2, #248	; 0xf8
 8004676:	4393      	bics	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	00da      	lsls	r2, r3, #3
 8004680:	4b81      	ldr	r3, [pc, #516]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004682:	430a      	orrs	r2, r1
 8004684:	635a      	str	r2, [r3, #52]	; 0x34
 8004686:	e034      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	3305      	adds	r3, #5
 800468e:	d111      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004690:	4b7d      	ldr	r3, [pc, #500]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	4b7c      	ldr	r3, [pc, #496]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004696:	2104      	movs	r1, #4
 8004698:	438a      	bics	r2, r1
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800469c:	4b7a      	ldr	r3, [pc, #488]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	22f8      	movs	r2, #248	; 0xf8
 80046a2:	4393      	bics	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	00da      	lsls	r2, r3, #3
 80046ac:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046ae:	430a      	orrs	r2, r1
 80046b0:	635a      	str	r2, [r3, #52]	; 0x34
 80046b2:	e01e      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80046b4:	4b74      	ldr	r3, [pc, #464]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b8:	4b73      	ldr	r3, [pc, #460]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046ba:	2104      	movs	r1, #4
 80046bc:	430a      	orrs	r2, r1
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80046c0:	4b71      	ldr	r3, [pc, #452]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c4:	4b70      	ldr	r3, [pc, #448]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	438a      	bics	r2, r1
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fd f888 	bl	80017e0 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046d6:	f7fd f883 	bl	80017e0 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e111      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046e8:	4b67      	ldr	r3, [pc, #412]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2202      	movs	r2, #2
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1f1      	bne.n	80046d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2220      	movs	r2, #32
 80046f8:	4013      	ands	r3, r2
 80046fa:	d05c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046fc:	4b62      	ldr	r3, [pc, #392]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	220c      	movs	r2, #12
 8004702:	4013      	ands	r3, r2
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d00e      	beq.n	8004726 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004708:	4b5f      	ldr	r3, [pc, #380]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	220c      	movs	r2, #12
 800470e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004710:	2b08      	cmp	r3, #8
 8004712:	d114      	bne.n	800473e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	23c0      	movs	r3, #192	; 0xc0
 800471a:	025b      	lsls	r3, r3, #9
 800471c:	401a      	ands	r2, r3
 800471e:	23c0      	movs	r3, #192	; 0xc0
 8004720:	025b      	lsls	r3, r3, #9
 8004722:	429a      	cmp	r2, r3
 8004724:	d10b      	bne.n	800473e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004726:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	025b      	lsls	r3, r3, #9
 800472e:	4013      	ands	r3, r2
 8004730:	d040      	beq.n	80047b4 <HAL_RCC_OscConfig+0x5a8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d03c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0e6      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01b      	beq.n	800477e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004746:	4b50      	ldr	r3, [pc, #320]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474a:	4b4f      	ldr	r3, [pc, #316]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0249      	lsls	r1, r1, #9
 8004750:	430a      	orrs	r2, r1
 8004752:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd f844 	bl	80017e0 <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800475e:	f7fd f83f 	bl	80017e0 <HAL_GetTick>
 8004762:	0002      	movs	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0cd      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004770:	4b45      	ldr	r3, [pc, #276]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	025b      	lsls	r3, r3, #9
 8004778:	4013      	ands	r3, r2
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x552>
 800477c:	e01b      	b.n	80047b6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800477e:	4b42      	ldr	r3, [pc, #264]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	4b41      	ldr	r3, [pc, #260]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004784:	4943      	ldr	r1, [pc, #268]	; (8004894 <HAL_RCC_OscConfig+0x688>)
 8004786:	400a      	ands	r2, r1
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fd f829 	bl	80017e0 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004794:	f7fd f824 	bl	80017e0 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0b2      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	025b      	lsls	r3, r3, #9
 80047ae:	4013      	ands	r3, r2
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x588>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80047b4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d100      	bne.n	80047c0 <HAL_RCC_OscConfig+0x5b4>
 80047be:	e0a4      	b.n	800490a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	220c      	movs	r2, #12
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d100      	bne.n	80047ce <HAL_RCC_OscConfig+0x5c2>
 80047cc:	e078      	b.n	80048c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d14c      	bne.n	8004870 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 80047dc:	492e      	ldr	r1, [pc, #184]	; (8004898 <HAL_RCC_OscConfig+0x68c>)
 80047de:	400a      	ands	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fc fffd 	bl	80017e0 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fc fff8 	bl	80017e0 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e086      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	049b      	lsls	r3, r3, #18
 8004806:	4013      	ands	r3, r2
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	220f      	movs	r2, #15
 8004810:	4393      	bics	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800481a:	430a      	orrs	r2, r1
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_RCC_OscConfig+0x690>)
 8004824:	4013      	ands	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	431a      	orrs	r2, r3
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	0449      	lsls	r1, r1, #17
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fc ffcb 	bl	80017e0 <HAL_GetTick>
 800484a:	0003      	movs	r3, r0
 800484c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc ffc6 	bl	80017e0 <HAL_GetTick>
 8004854:	0002      	movs	r2, r0
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e054      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	049b      	lsls	r3, r3, #18
 800486a:	4013      	ands	r3, r2
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x644>
 800486e:	e04c      	b.n	800490a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCC_OscConfig+0x67c>)
 8004876:	4908      	ldr	r1, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x68c>)
 8004878:	400a      	ands	r2, r1
 800487a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fc ffb0 	bl	80017e0 <HAL_GetTick>
 8004880:	0003      	movs	r3, r0
 8004882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x6a6>
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	40021000 	.word	0x40021000
 800488c:	00001388 	.word	0x00001388
 8004890:	efffffff 	.word	0xefffffff
 8004894:	fffeffff 	.word	0xfffeffff
 8004898:	feffffff 	.word	0xfeffffff
 800489c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fc ff9e 	bl	80017e0 <HAL_GetTick>
 80048a4:	0002      	movs	r2, r0
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e02c      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	4b18      	ldr	r3, [pc, #96]	; (8004914 <HAL_RCC_OscConfig+0x708>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	049b      	lsls	r3, r3, #18
 80048ba:	4013      	ands	r3, r2
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x694>
 80048be:	e024      	b.n	800490a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e01f      	b.n	800490c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCC_OscConfig+0x708>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <HAL_RCC_OscConfig+0x708>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	23c0      	movs	r3, #192	; 0xc0
 80048dc:	025b      	lsls	r3, r3, #9
 80048de:	401a      	ands	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d10e      	bne.n	8004906 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	220f      	movs	r2, #15
 80048ec:	401a      	ands	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	23f0      	movs	r3, #240	; 0xf0
 80048fa:	039b      	lsls	r3, r3, #14
 80048fc:	401a      	ands	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d001      	beq.n	800490a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	0018      	movs	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	b008      	add	sp, #32
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000

08004918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0bf      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800492c:	4b61      	ldr	r3, [pc, #388]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d911      	bls.n	800495e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b5e      	ldr	r3, [pc, #376]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	4393      	bics	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494c:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2201      	movs	r2, #1
 8004952:	4013      	ands	r3, r2
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0a6      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d015      	beq.n	8004994 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2204      	movs	r2, #4
 800496e:	4013      	ands	r3, r2
 8004970:	d006      	beq.n	8004980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004972:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004978:	21e0      	movs	r1, #224	; 0xe0
 800497a:	00c9      	lsls	r1, r1, #3
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	22f0      	movs	r2, #240	; 0xf0
 8004986:	4393      	bics	r3, r2
 8004988:	0019      	movs	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	4013      	ands	r3, r2
 800499c:	d04c      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	029b      	lsls	r3, r3, #10
 80049ae:	4013      	ands	r3, r2
 80049b0:	d120      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07a      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	049b      	lsls	r3, r3, #18
 80049c6:	4013      	ands	r3, r2
 80049c8:	d114      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06e      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049d6:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	4013      	ands	r3, r2
 80049e0:	d108      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e062      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2202      	movs	r2, #2
 80049ec:	4013      	ands	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e05b      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f4:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	4393      	bics	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a08:	f7fc feea 	bl	80017e0 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a10:	e009      	b.n	8004a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a12:	f7fc fee5 	bl	80017e0 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <HAL_RCC_ClockConfig+0x1a4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e042      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d1ec      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d211      	bcs.n	8004a6a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a58:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <HAL_RCC_ClockConfig+0x19c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e020      	b.n	8004aac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	4013      	ands	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <HAL_RCC_ClockConfig+0x1a8>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a88:	f000 f820 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004a8c:	0001      	movs	r1, r0
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	220f      	movs	r2, #15
 8004a96:	4013      	ands	r3, r2
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <HAL_RCC_ClockConfig+0x1ac>)
 8004a9a:	5cd3      	ldrb	r3, [r2, r3]
 8004a9c:	000a      	movs	r2, r1
 8004a9e:	40da      	lsrs	r2, r3
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004aa4:	2003      	movs	r0, #3
 8004aa6:	f7fc fe55 	bl	8001754 <HAL_InitTick>
  
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b004      	add	sp, #16
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	00001388 	.word	0x00001388
 8004ac0:	fffff8ff 	.word	0xfffff8ff
 8004ac4:	0800b768 	.word	0x0800b768
 8004ac8:	20000000 	.word	0x20000000

08004acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b08f      	sub	sp, #60	; 0x3c
 8004ad0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004ad2:	2314      	movs	r3, #20
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	4a38      	ldr	r2, [pc, #224]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xec>)
 8004ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ada:	c313      	stmia	r3!, {r0, r1, r4}
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	4a36      	ldr	r2, [pc, #216]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ae4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ae6:	c313      	stmia	r3!, {r0, r1, r4}
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af0:	2300      	movs	r3, #0
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af4:	2300      	movs	r3, #0
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004b00:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	220c      	movs	r2, #12
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d047      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xd4>
 8004b10:	d849      	bhi.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xda>
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x50>
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x56>
 8004b1a:	e044      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b1c:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b20:	e044      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	0c9b      	lsrs	r3, r3, #18
 8004b26:	220f      	movs	r2, #15
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2214      	movs	r2, #20
 8004b2c:	18ba      	adds	r2, r7, r2
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	220f      	movs	r2, #15
 8004b38:	4013      	ands	r3, r2
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b42:	23c0      	movs	r3, #192	; 0xc0
 8004b44:	025b      	lsls	r3, r3, #9
 8004b46:	401a      	ands	r2, r3
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	025b      	lsls	r3, r3, #9
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d109      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b52:	481c      	ldr	r0, [pc, #112]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b54:	f7fb faea 	bl	800012c <__udivsi3>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	4353      	muls	r3, r2
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	e01a      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	23c0      	movs	r3, #192	; 0xc0
 8004b68:	025b      	lsls	r3, r3, #9
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	23c0      	movs	r3, #192	; 0xc0
 8004b6e:	025b      	lsls	r3, r3, #9
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d109      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b76:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b78:	f7fb fad8 	bl	800012c <__udivsi3>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	001a      	movs	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	4353      	muls	r3, r2
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8a:	4810      	ldr	r0, [pc, #64]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x100>)
 8004b8c:	f7fb face 	bl	800012c <__udivsi3>
 8004b90:	0003      	movs	r3, r0
 8004b92:	001a      	movs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	4353      	muls	r3, r2
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x100>)
 8004ba8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004baa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b00f      	add	sp, #60	; 0x3c
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	0800b700 	.word	0x0800b700
 8004bbc:	0800b710 	.word	0x0800b710
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	00f42400 	.word	0x00f42400
 8004bc8:	02dc6c00 	.word	0x02dc6c00
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	20000000 	.word	0x20000000

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004be8:	f7ff fff2 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bec:	0001      	movs	r1, r0
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	40d9      	lsrs	r1, r3
 8004bfe:	000b      	movs	r3, r1
}    
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	0800b778 	.word	0x0800b778

08004c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	025b      	lsls	r3, r3, #9
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004c2c:	e08e      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2017      	movs	r0, #23
 8004c30:	183b      	adds	r3, r7, r0
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d110      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0549      	lsls	r1, r1, #21
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	61da      	str	r2, [r3, #28]
 8004c50:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	055b      	lsls	r3, r3, #21
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d11a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b5f      	ldr	r3, [pc, #380]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	0049      	lsls	r1, r1, #1
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fc fdaf 	bl	80017e0 <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	e008      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fc fdaa 	bl	80017e0 <HAL_GetTick>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0a6      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca6:	4b52      	ldr	r3, [pc, #328]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	23c0      	movs	r3, #192	; 0xc0
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d034      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	23c0      	movs	r3, #192	; 0xc0
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d02c      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc8:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	0249      	lsls	r1, r1, #9
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce0:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce2:	6a1a      	ldr	r2, [r3, #32]
 8004ce4:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce6:	4945      	ldr	r1, [pc, #276]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004ce8:	400a      	ands	r2, r1
 8004cea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cec:	4b40      	ldr	r3, [pc, #256]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fc fd71 	bl	80017e0 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	e009      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fc fd6c 	bl	80017e0 <HAL_GetTick>
 8004d08:	0002      	movs	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e067      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a34      	ldr	r2, [pc, #208]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d36:	2317      	movs	r3, #23
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d40:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d46:	492f      	ldr	r1, [pc, #188]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d66:	430a      	orrs	r2, r1
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	4013      	ands	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d74:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d84:	430a      	orrs	r2, r1
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	2210      	movs	r2, #16
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	4013      	ands	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	4393      	bics	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	4393      	bics	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	fffffcff 	.word	0xfffffcff
 8004dfc:	fffeffff 	.word	0xfffeffff
 8004e00:	00001388 	.word	0x00001388
 8004e04:	efffffff 	.word	0xefffffff
 8004e08:	fffcffff 	.word	0xfffcffff

08004e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0a8      	b.n	8004f70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	2382      	movs	r3, #130	; 0x82
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d009      	beq.n	8004e46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
 8004e38:	e005      	b.n	8004e46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	225d      	movs	r2, #93	; 0x5d
 8004e50:	5c9b      	ldrb	r3, [r3, r2]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	225c      	movs	r2, #92	; 0x5c
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7fc fada 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	225d      	movs	r2, #93	; 0x5d
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	438a      	bics	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	23e0      	movs	r3, #224	; 0xe0
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e002      	b.n	8004e98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	015b      	lsls	r3, r3, #5
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	23f0      	movs	r3, #240	; 0xf0
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d008      	beq.n	8004eb6 <HAL_SPI_Init+0xaa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	23e0      	movs	r3, #224	; 0xe0
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	2382      	movs	r3, #130	; 0x82
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6899      	ldr	r1, [r3, #8]
 8004ec4:	2384      	movs	r3, #132	; 0x84
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	400b      	ands	r3, r1
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2101      	movs	r1, #1
 8004edc:	400b      	ands	r3, r1
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6999      	ldr	r1, [r3, #24]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	400b      	ands	r3, r1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2138      	movs	r1, #56	; 0x38
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	2180      	movs	r1, #128	; 0x80
 8004efc:	400b      	ands	r3, r1
 8004efe:	431a      	orrs	r2, r3
 8004f00:	0011      	movs	r1, r2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2110      	movs	r1, #16
 8004f24:	400b      	ands	r3, r1
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	2108      	movs	r1, #8
 8004f2e:	400b      	ands	r3, r1
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	23f0      	movs	r3, #240	; 0xf0
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	0011      	movs	r1, r2
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	015b      	lsls	r3, r3, #5
 8004f46:	401a      	ands	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4907      	ldr	r1, [pc, #28]	; (8004f78 <HAL_SPI_Init+0x16c>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	225d      	movs	r2, #93	; 0x5d
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	fffff7ff 	.word	0xfffff7ff

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	223d      	movs	r2, #61	; 0x3d
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223c      	movs	r2, #60	; 0x3c
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fc fa87 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223d      	movs	r2, #61	; 0x3d
 8004fae:	2102      	movs	r1, #2
 8004fb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	0019      	movs	r1, r3
 8004fbc:	0010      	movs	r0, r2
 8004fbe:	f000 fa65 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2246      	movs	r2, #70	; 0x46
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	223e      	movs	r2, #62	; 0x3e
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2241      	movs	r2, #65	; 0x41
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2242      	movs	r2, #66	; 0x42
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2243      	movs	r2, #67	; 0x43
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2244      	movs	r2, #68	; 0x44
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2245      	movs	r2, #69	; 0x45
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223d      	movs	r2, #61	; 0x3d
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	223d      	movs	r2, #61	; 0x3d
 8005028:	5c9b      	ldrb	r3, [r3, r2]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e03b      	b.n	80050ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	223d      	movs	r2, #61	; 0x3d
 8005038:	2102      	movs	r1, #2
 800503a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2101      	movs	r1, #1
 8005048:	430a      	orrs	r2, r1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_TIM_Base_Start_IT+0x98>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00f      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x5a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	05db      	lsls	r3, r3, #23
 800505e:	429a      	cmp	r2, r3
 8005060:	d009      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x5a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIM_Base_Start_IT+0x5a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <HAL_TIM_Base_Start_IT+0xa0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d111      	bne.n	800509a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2207      	movs	r2, #7
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d010      	beq.n	80050aa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2101      	movs	r1, #1
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	e007      	b.n	80050aa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2101      	movs	r1, #1
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b004      	add	sp, #16
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40014000 	.word	0x40014000

080050c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e042      	b.n	8005158 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223d      	movs	r2, #61	; 0x3d
 80050d6:	5c9b      	ldrb	r3, [r3, r2]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	223c      	movs	r2, #60	; 0x3c
 80050e2:	2100      	movs	r1, #0
 80050e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 f839 	bl	8005160 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	223d      	movs	r2, #61	; 0x3d
 80050f2:	2102      	movs	r1, #2
 80050f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	0019      	movs	r1, r3
 8005100:	0010      	movs	r0, r2
 8005102:	f000 f9c3 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2246      	movs	r2, #70	; 0x46
 800510a:	2101      	movs	r1, #1
 800510c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	223e      	movs	r2, #62	; 0x3e
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223f      	movs	r2, #63	; 0x3f
 800511a:	2101      	movs	r1, #1
 800511c:	5499      	strb	r1, [r3, r2]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	2101      	movs	r1, #1
 8005124:	5499      	strb	r1, [r3, r2]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2241      	movs	r2, #65	; 0x41
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2242      	movs	r2, #66	; 0x42
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2243      	movs	r2, #67	; 0x43
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2244      	movs	r2, #68	; 0x44
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2245      	movs	r2, #69	; 0x45
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	223d      	movs	r2, #61	; 0x3d
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d124      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2202      	movs	r2, #2
 800518e:	4013      	ands	r3, r2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11d      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2203      	movs	r2, #3
 800519a:	4252      	negs	r2, r2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2203      	movs	r2, #3
 80051ac:	4013      	ands	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f952 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 80051b8:	e007      	b.n	80051ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f945 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f951 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2204      	movs	r2, #4
 80051d8:	4013      	ands	r3, r2
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d125      	bne.n	800522a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2204      	movs	r2, #4
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d11e      	bne.n	800522a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2205      	movs	r2, #5
 80051f2:	4252      	negs	r2, r2
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	23c0      	movs	r3, #192	; 0xc0
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4013      	ands	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f000 f925 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8005212:	e007      	b.n	8005224 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f000 f918 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 f924 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2208      	movs	r2, #8
 8005232:	4013      	ands	r3, r2
 8005234:	2b08      	cmp	r3, #8
 8005236:	d124      	bne.n	8005282 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2208      	movs	r2, #8
 8005240:	4013      	ands	r3, r2
 8005242:	2b08      	cmp	r3, #8
 8005244:	d11d      	bne.n	8005282 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2209      	movs	r2, #9
 800524c:	4252      	negs	r2, r2
 800524e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	2203      	movs	r2, #3
 800525e:	4013      	ands	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0018      	movs	r0, r3
 8005266:	f000 f8f9 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 800526a:	e007      	b.n	800527c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0018      	movs	r0, r3
 8005270:	f000 f8ec 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 f8f8 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2210      	movs	r2, #16
 800528a:	4013      	ands	r3, r2
 800528c:	2b10      	cmp	r3, #16
 800528e:	d125      	bne.n	80052dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2210      	movs	r2, #16
 8005298:	4013      	ands	r3, r2
 800529a:	2b10      	cmp	r3, #16
 800529c:	d11e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2211      	movs	r2, #17
 80052a4:	4252      	negs	r2, r2
 80052a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2208      	movs	r2, #8
 80052ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	23c0      	movs	r3, #192	; 0xc0
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f8cc 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 80052c4:	e007      	b.n	80052d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f8bf 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 f8cb 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10f      	bne.n	800530a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d108      	bne.n	800530a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2202      	movs	r2, #2
 80052fe:	4252      	negs	r2, r2
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f7fb f8a9 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	4013      	ands	r3, r2
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d10f      	bne.n	8005338 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	4013      	ands	r3, r2
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d108      	bne.n	8005338 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2281      	movs	r2, #129	; 0x81
 800532c:	4252      	negs	r2, r2
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fb2e 	bl	8005994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2240      	movs	r2, #64	; 0x40
 8005340:	4013      	ands	r3, r2
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d10f      	bne.n	8005366 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	4013      	ands	r3, r2
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d108      	bne.n	8005366 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2241      	movs	r2, #65	; 0x41
 800535a:	4252      	negs	r2, r2
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 f88b 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2220      	movs	r2, #32
 800536e:	4013      	ands	r3, r2
 8005370:	2b20      	cmp	r3, #32
 8005372:	d10f      	bne.n	8005394 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	4013      	ands	r3, r2
 800537e:	2b20      	cmp	r3, #32
 8005380:	d108      	bne.n	8005394 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2221      	movs	r2, #33	; 0x21
 8005388:	4252      	negs	r2, r2
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	0018      	movs	r0, r3
 8005390:	f000 faf8 	bl	8005984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2317      	movs	r3, #23
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	223c      	movs	r2, #60	; 0x3c
 80053b4:	5c9b      	ldrb	r3, [r3, r2]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_OC_ConfigChannel+0x22>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e042      	b.n	8005444 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	223c      	movs	r2, #60	; 0x3c
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	d027      	beq.n	800541c <HAL_TIM_OC_ConfigChannel+0x80>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d82c      	bhi.n	800542c <HAL_TIM_OC_ConfigChannel+0x90>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d019      	beq.n	800540c <HAL_TIM_OC_ConfigChannel+0x70>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d826      	bhi.n	800542c <HAL_TIM_OC_ConfigChannel+0x90>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_TIM_OC_ConfigChannel+0x50>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d008      	beq.n	80053fc <HAL_TIM_OC_ConfigChannel+0x60>
 80053ea:	e01f      	b.n	800542c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f8c9 	bl	800558c <TIM_OC1_SetConfig>
      break;
 80053fa:	e01c      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f000 f949 	bl	800569c <TIM_OC2_SetConfig>
      break;
 800540a:	e014      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0011      	movs	r1, r2
 8005414:	0018      	movs	r0, r3
 8005416:	f000 f9c5 	bl	80057a4 <TIM_OC3_SetConfig>
      break;
 800541a:	e00c      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f000 fa43 	bl	80058b0 <TIM_OC4_SetConfig>
      break;
 800542a:	e004      	b.n	8005436 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800542c:	2317      	movs	r3, #23
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
      break;
 8005434:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	223c      	movs	r2, #60	; 0x3c
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]

  return status;
 800543e:	2317      	movs	r3, #23
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
}
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	b006      	add	sp, #24
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a34      	ldr	r2, [pc, #208]	; (8005570 <TIM_Base_SetConfig+0xe4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d008      	beq.n	80054b6 <TIM_Base_SetConfig+0x2a>
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	05db      	lsls	r3, r3, #23
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0x2a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a30      	ldr	r2, [pc, #192]	; (8005574 <TIM_Base_SetConfig+0xe8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2270      	movs	r2, #112	; 0x70
 80054ba:	4393      	bics	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a29      	ldr	r2, [pc, #164]	; (8005570 <TIM_Base_SetConfig+0xe4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d018      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	05db      	lsls	r3, r3, #23
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d013      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <TIM_Base_SetConfig+0xe8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a24      	ldr	r2, [pc, #144]	; (8005578 <TIM_Base_SetConfig+0xec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a23      	ldr	r2, [pc, #140]	; (800557c <TIM_Base_SetConfig+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <TIM_Base_SetConfig+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a21      	ldr	r2, [pc, #132]	; (8005584 <TIM_Base_SetConfig+0xf8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a20      	ldr	r2, [pc, #128]	; (8005588 <TIM_Base_SetConfig+0xfc>)
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	4393      	bics	r3, r2
 800551a:	001a      	movs	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <TIM_Base_SetConfig+0xe4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <TIM_Base_SetConfig+0xf0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <TIM_Base_SetConfig+0xf4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <TIM_Base_SetConfig+0xf8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d103      	bne.n	8005562 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	615a      	str	r2, [r3, #20]
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b004      	add	sp, #16
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40002000 	.word	0x40002000
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800
 8005588:	fffffcff 	.word	0xfffffcff

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	2201      	movs	r2, #1
 800559c:	4393      	bics	r3, r2
 800559e:	001a      	movs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2270      	movs	r2, #112	; 0x70
 80055ba:	4393      	bics	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2203      	movs	r2, #3
 80055c2:	4393      	bics	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2202      	movs	r2, #2
 80055d4:	4393      	bics	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a27      	ldr	r2, [pc, #156]	; (8005684 <TIM_OC1_SetConfig+0xf8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00b      	beq.n	8005602 <TIM_OC1_SetConfig+0x76>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a26      	ldr	r2, [pc, #152]	; (8005688 <TIM_OC1_SetConfig+0xfc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_OC1_SetConfig+0x76>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a25      	ldr	r2, [pc, #148]	; (800568c <TIM_OC1_SetConfig+0x100>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC1_SetConfig+0x76>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a24      	ldr	r2, [pc, #144]	; (8005690 <TIM_OC1_SetConfig+0x104>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10c      	bne.n	800561c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2208      	movs	r2, #8
 8005606:	4393      	bics	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2204      	movs	r2, #4
 8005618:	4393      	bics	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a19      	ldr	r2, [pc, #100]	; (8005684 <TIM_OC1_SetConfig+0xf8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00b      	beq.n	800563c <TIM_OC1_SetConfig+0xb0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <TIM_OC1_SetConfig+0xfc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d007      	beq.n	800563c <TIM_OC1_SetConfig+0xb0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a17      	ldr	r2, [pc, #92]	; (800568c <TIM_OC1_SetConfig+0x100>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC1_SetConfig+0xb0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <TIM_OC1_SetConfig+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <TIM_OC1_SetConfig+0x108>)
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <TIM_OC1_SetConfig+0x10c>)
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b006      	add	sp, #24
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800
 8005694:	fffffeff 	.word	0xfffffeff
 8005698:	fffffdff 	.word	0xfffffdff

0800569c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	2210      	movs	r2, #16
 80056ac:	4393      	bics	r3, r2
 80056ae:	001a      	movs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a2e      	ldr	r2, [pc, #184]	; (8005784 <TIM_OC2_SetConfig+0xe8>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a2d      	ldr	r2, [pc, #180]	; (8005788 <TIM_OC2_SetConfig+0xec>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2220      	movs	r2, #32
 80056e6:	4393      	bics	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <TIM_OC2_SetConfig+0xf0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10d      	bne.n	800571a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	4393      	bics	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	4393      	bics	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <TIM_OC2_SetConfig+0xf0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_OC2_SetConfig+0x9e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <TIM_OC2_SetConfig+0xf4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_OC2_SetConfig+0x9e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <TIM_OC2_SetConfig+0xf8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC2_SetConfig+0x9e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <TIM_OC2_SetConfig+0xfc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d113      	bne.n	8005762 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <TIM_OC2_SetConfig+0x100>)
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <TIM_OC2_SetConfig+0x104>)
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b006      	add	sp, #24
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffff8fff 	.word	0xffff8fff
 8005788:	fffffcff 	.word	0xfffffcff
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	fffffbff 	.word	0xfffffbff
 80057a0:	fffff7ff 	.word	0xfffff7ff

080057a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4a35      	ldr	r2, [pc, #212]	; (8005888 <TIM_OC3_SetConfig+0xe4>)
 80057b4:	401a      	ands	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2270      	movs	r2, #112	; 0x70
 80057d0:	4393      	bics	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2203      	movs	r2, #3
 80057d8:	4393      	bics	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <TIM_OC3_SetConfig+0xe8>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <TIM_OC3_SetConfig+0xec>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10d      	bne.n	800581e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <TIM_OC3_SetConfig+0xf0>)
 8005806:	4013      	ands	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <TIM_OC3_SetConfig+0xf4>)
 800581a:	4013      	ands	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <TIM_OC3_SetConfig+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_OC3_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <TIM_OC3_SetConfig+0xf8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <TIM_OC3_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <TIM_OC3_SetConfig+0xfc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC3_SetConfig+0x9a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <TIM_OC3_SetConfig+0x100>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d113      	bne.n	8005866 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <TIM_OC3_SetConfig+0x104>)
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <TIM_OC3_SetConfig+0x108>)
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b006      	add	sp, #24
 8005886:	bd80      	pop	{r7, pc}
 8005888:	fffffeff 	.word	0xfffffeff
 800588c:	fffffdff 	.word	0xfffffdff
 8005890:	40012c00 	.word	0x40012c00
 8005894:	fffff7ff 	.word	0xfffff7ff
 8005898:	fffffbff 	.word	0xfffffbff
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800
 80058a8:	ffffefff 	.word	0xffffefff
 80058ac:	ffffdfff 	.word	0xffffdfff

080058b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	4a28      	ldr	r2, [pc, #160]	; (8005960 <TIM_OC4_SetConfig+0xb0>)
 80058c0:	401a      	ands	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <TIM_OC4_SetConfig+0xb4>)
 80058dc:	4013      	ands	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a21      	ldr	r2, [pc, #132]	; (8005968 <TIM_OC4_SetConfig+0xb8>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4a1d      	ldr	r2, [pc, #116]	; (800596c <TIM_OC4_SetConfig+0xbc>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a19      	ldr	r2, [pc, #100]	; (8005970 <TIM_OC4_SetConfig+0xc0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_OC4_SetConfig+0x78>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC4_SetConfig+0xc4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_OC4_SetConfig+0x78>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC4_SetConfig+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC4_SetConfig+0x78>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC4_SetConfig+0xcc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d109      	bne.n	800593c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <TIM_OC4_SetConfig+0xd0>)
 800592c:	4013      	ands	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b006      	add	sp, #24
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	ffffefff 	.word	0xffffefff
 8005964:	ffff8fff 	.word	0xffff8fff
 8005968:	fffffcff 	.word	0xfffffcff
 800596c:	ffffdfff 	.word	0xffffdfff
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800
 8005980:	ffffbfff 	.word	0xffffbfff

08005984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e044      	b.n	8005a40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2274      	movs	r2, #116	; 0x74
 80059c2:	2100      	movs	r1, #0
 80059c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fb fd9d 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2224      	movs	r2, #36	; 0x24
 80059d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2101      	movs	r1, #1
 80059e0:	438a      	bics	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 fb24 	bl	8006034 <UART_SetConfig>
 80059ec:	0003      	movs	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e024      	b.n	8005a40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fc9f 	bl	8006344 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	490d      	ldr	r1, [pc, #52]	; (8005a48 <HAL_UART_Init+0xa4>)
 8005a12:	400a      	ands	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	212a      	movs	r1, #42	; 0x2a
 8005a22:	438a      	bics	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2101      	movs	r1, #1
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fd37 	bl	80064ac <UART_CheckIdleState>
 8005a3e:	0003      	movs	r3, r0
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b002      	add	sp, #8
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	ffffb7ff 	.word	0xffffb7ff

08005a4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b0ab      	sub	sp, #172	; 0xac
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	22a4      	movs	r2, #164	; 0xa4
 8005a5c:	18b9      	adds	r1, r7, r2
 8005a5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	20a0      	movs	r0, #160	; 0xa0
 8005a68:	1839      	adds	r1, r7, r0
 8005a6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	219c      	movs	r1, #156	; 0x9c
 8005a74:	1879      	adds	r1, r7, r1
 8005a76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a78:	0011      	movs	r1, r2
 8005a7a:	18bb      	adds	r3, r7, r2
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a99      	ldr	r2, [pc, #612]	; (8005ce4 <HAL_UART_IRQHandler+0x298>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	2298      	movs	r2, #152	; 0x98
 8005a84:	18bc      	adds	r4, r7, r2
 8005a86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005a88:	18bb      	adds	r3, r7, r2
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d114      	bne.n	8005aba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2220      	movs	r2, #32
 8005a96:	4013      	ands	r3, r2
 8005a98:	d00f      	beq.n	8005aba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a9a:	183b      	adds	r3, r7, r0
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00a      	beq.n	8005aba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d100      	bne.n	8005aae <HAL_UART_IRQHandler+0x62>
 8005aac:	e296      	b.n	8005fdc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	0010      	movs	r0, r2
 8005ab6:	4798      	blx	r3
      }
      return;
 8005ab8:	e290      	b.n	8005fdc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005aba:	2398      	movs	r3, #152	; 0x98
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d100      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x7a>
 8005ac4:	e114      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ac6:	239c      	movs	r3, #156	; 0x9c
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d106      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ad2:	23a0      	movs	r3, #160	; 0xa0
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a83      	ldr	r2, [pc, #524]	; (8005ce8 <HAL_UART_IRQHandler+0x29c>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	d100      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x94>
 8005ade:	e107      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ae0:	23a4      	movs	r3, #164	; 0xa4
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d012      	beq.n	8005b12 <HAL_UART_IRQHandler+0xc6>
 8005aec:	23a0      	movs	r3, #160	; 0xa0
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2201      	movs	r2, #1
 8005b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	589b      	ldr	r3, [r3, r2]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b12:	23a4      	movs	r3, #164	; 0xa4
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d011      	beq.n	8005b42 <HAL_UART_IRQHandler+0xf6>
 8005b1e:	239c      	movs	r3, #156	; 0x9c
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4013      	ands	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	589b      	ldr	r3, [r3, r2]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b42:	23a4      	movs	r3, #164	; 0xa4
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d011      	beq.n	8005b72 <HAL_UART_IRQHandler+0x126>
 8005b4e:	239c      	movs	r3, #156	; 0x9c
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2201      	movs	r2, #1
 8005b56:	4013      	ands	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	589b      	ldr	r3, [r3, r2]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b72:	23a4      	movs	r3, #164	; 0xa4
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d017      	beq.n	8005bae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b7e:	23a0      	movs	r3, #160	; 0xa0
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2220      	movs	r2, #32
 8005b86:	4013      	ands	r3, r2
 8005b88:	d105      	bne.n	8005b96 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b8a:	239c      	movs	r3, #156	; 0x9c
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b94:	d00b      	beq.n	8005bae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	589b      	ldr	r3, [r3, r2]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bae:	23a4      	movs	r3, #164	; 0xa4
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d013      	beq.n	8005be4 <HAL_UART_IRQHandler+0x198>
 8005bbc:	23a0      	movs	r3, #160	; 0xa0
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	04db      	lsls	r3, r3, #19
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d00c      	beq.n	8005be4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2280      	movs	r2, #128	; 0x80
 8005bd0:	0112      	lsls	r2, r2, #4
 8005bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	589b      	ldr	r3, [r3, r2]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2180      	movs	r1, #128	; 0x80
 8005be2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	589b      	ldr	r3, [r3, r2]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d100      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x1a4>
 8005bee:	e1f7      	b.n	8005fe0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf0:	23a4      	movs	r3, #164	; 0xa4
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bfc:	23a0      	movs	r3, #160	; 0xa0
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2220      	movs	r2, #32
 8005c04:	4013      	ands	r3, r2
 8005c06:	d008      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	0010      	movs	r0, r2
 8005c18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2280      	movs	r2, #128	; 0x80
 8005c1e:	589b      	ldr	r3, [r3, r2]
 8005c20:	2194      	movs	r1, #148	; 0x94
 8005c22:	187a      	adds	r2, r7, r1
 8005c24:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2240      	movs	r2, #64	; 0x40
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d004      	beq.n	8005c3e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2228      	movs	r2, #40	; 0x28
 8005c3a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c3c:	d047      	beq.n	8005cce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 fd3f 	bl	80066c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2240      	movs	r2, #64	; 0x40
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d137      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5c:	2090      	movs	r0, #144	; 0x90
 8005c5e:	183a      	adds	r2, r7, r0
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	2301      	movs	r3, #1
 8005c64:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a14      	ldr	r2, [pc, #80]	; (8005cec <HAL_UART_IRQHandler+0x2a0>)
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fc f953 	bl	8001f4c <HAL_DMA_Abort_IT>
 8005ca6:	1e03      	subs	r3, r0, #0
 8005ca8:	d01a      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	e012      	b.n	8005ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f000 f9a5 	bl	800600c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc2:	e00d      	b.n	8005ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 f9a0 	bl	800600c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	e008      	b.n	8005ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f99b 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	2100      	movs	r1, #0
 8005cdc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005cde:	e17f      	b.n	8005fe0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	46c0      	nop			; (mov r8, r8)
    return;
 8005ce2:	e17d      	b.n	8005fe0 <HAL_UART_IRQHandler+0x594>
 8005ce4:	0000080f 	.word	0x0000080f
 8005ce8:	04000120 	.word	0x04000120
 8005cec:	08006789 	.word	0x08006789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d000      	beq.n	8005cfa <HAL_UART_IRQHandler+0x2ae>
 8005cf8:	e131      	b.n	8005f5e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cfa:	23a4      	movs	r3, #164	; 0xa4
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2210      	movs	r2, #16
 8005d02:	4013      	ands	r3, r2
 8005d04:	d100      	bne.n	8005d08 <HAL_UART_IRQHandler+0x2bc>
 8005d06:	e12a      	b.n	8005f5e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d08:	23a0      	movs	r3, #160	; 0xa0
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2210      	movs	r2, #16
 8005d10:	4013      	ands	r3, r2
 8005d12:	d100      	bne.n	8005d16 <HAL_UART_IRQHandler+0x2ca>
 8005d14:	e123      	b.n	8005f5e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2210      	movs	r2, #16
 8005d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d000      	beq.n	8005d2e <HAL_UART_IRQHandler+0x2e2>
 8005d2c:	e09b      	b.n	8005e66 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	217e      	movs	r1, #126	; 0x7e
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d100      	bne.n	8005d46 <HAL_UART_IRQHandler+0x2fa>
 8005d44:	e14e      	b.n	8005fe4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2258      	movs	r2, #88	; 0x58
 8005d4a:	5a9b      	ldrh	r3, [r3, r2]
 8005d4c:	187a      	adds	r2, r7, r1
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d300      	bcc.n	8005d56 <HAL_UART_IRQHandler+0x30a>
 8005d54:	e146      	b.n	8005fe4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	187a      	adds	r2, r7, r1
 8005d5a:	215a      	movs	r1, #90	; 0x5a
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d06e      	beq.n	8005e48 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d74:	2301      	movs	r3, #1
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	f383 8810 	msr	PRIMASK, r3
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	499a      	ldr	r1, [pc, #616]	; (8005ff4 <HAL_UART_IRQHandler+0x5a8>)
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	f383 8810 	msr	PRIMASK, r3
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da4:	677b      	str	r3, [r7, #116]	; 0x74
 8005da6:	2301      	movs	r3, #1
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	f383 8810 	msr	PRIMASK, r3
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	438a      	bics	r2, r1
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc8:	f383 8810 	msr	PRIMASK, r3
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dce:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd8:	2301      	movs	r3, #1
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	f383 8810 	msr	PRIMASK, r3
}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2140      	movs	r1, #64	; 0x40
 8005df0:	438a      	bics	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	f383 8810 	msr	PRIMASK, r3
}
 8005dfe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e10:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e16:	2301      	movs	r3, #1
 8005e18:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2110      	movs	r1, #16
 8005e2e:	438a      	bics	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e38:	f383 8810 	msr	PRIMASK, r3
}
 8005e3c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7fc f84a 	bl	8001edc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2258      	movs	r2, #88	; 0x58
 8005e4c:	5a9a      	ldrh	r2, [r3, r2]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	215a      	movs	r1, #90	; 0x5a
 8005e52:	5a5b      	ldrh	r3, [r3, r1]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 f8dc 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e64:	e0be      	b.n	8005fe4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2258      	movs	r2, #88	; 0x58
 8005e6a:	5a99      	ldrh	r1, [r3, r2]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	225a      	movs	r2, #90	; 0x5a
 8005e70:	5a9b      	ldrh	r3, [r3, r2]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	208e      	movs	r0, #142	; 0x8e
 8005e76:	183b      	adds	r3, r7, r0
 8005e78:	1a8a      	subs	r2, r1, r2
 8005e7a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	225a      	movs	r2, #90	; 0x5a
 8005e80:	5a9b      	ldrh	r3, [r3, r2]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d100      	bne.n	8005e8a <HAL_UART_IRQHandler+0x43e>
 8005e88:	e0ae      	b.n	8005fe8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005e8a:	183b      	adds	r3, r7, r0
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d100      	bne.n	8005e94 <HAL_UART_IRQHandler+0x448>
 8005e92:	e0a9      	b.n	8005fe8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8310 	mrs	r3, PRIMASK
 8005e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	2488      	movs	r4, #136	; 0x88
 8005e9e:	193a      	adds	r2, r7, r4
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f383 8810 	msr	PRIMASK, r3
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	494f      	ldr	r1, [pc, #316]	; (8005ff8 <HAL_UART_IRQHandler+0x5ac>)
 8005eba:	400a      	ands	r2, r1
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	193b      	adds	r3, r7, r4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f383 8810 	msr	PRIMASK, r3
}
 8005eca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ed2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed4:	2484      	movs	r4, #132	; 0x84
 8005ed6:	193a      	adds	r2, r7, r4
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	2301      	movs	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f383 8810 	msr	PRIMASK, r3
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	438a      	bics	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	193b      	adds	r3, r7, r4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	f383 8810 	msr	PRIMASK, r3
}
 8005f02:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	2480      	movs	r4, #128	; 0x80
 8005f20:	193a      	adds	r2, r7, r4
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	2301      	movs	r3, #1
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	f383 8810 	msr	PRIMASK, r3
}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2110      	movs	r1, #16
 8005f3c:	438a      	bics	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	193b      	adds	r3, r7, r4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f4e:	183b      	adds	r3, r7, r0
 8005f50:	881a      	ldrh	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0011      	movs	r1, r2
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 f860 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f5c:	e044      	b.n	8005fe8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f5e:	23a4      	movs	r3, #164	; 0xa4
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	035b      	lsls	r3, r3, #13
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d010      	beq.n	8005f8e <HAL_UART_IRQHandler+0x542>
 8005f6c:	239c      	movs	r3, #156	; 0x9c
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	03db      	lsls	r3, r3, #15
 8005f76:	4013      	ands	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	0352      	lsls	r2, r2, #13
 8005f82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 fc40 	bl	800680c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f8c:	e02f      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f8e:	23a4      	movs	r3, #164	; 0xa4
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	4013      	ands	r3, r2
 8005f98:	d00f      	beq.n	8005fba <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f9a:	23a0      	movs	r3, #160	; 0xa0
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01e      	beq.n	8005fec <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	4798      	blx	r3
    }
    return;
 8005fb8:	e018      	b.n	8005fec <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fba:	23a4      	movs	r3, #164	; 0xa4
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_UART_IRQHandler+0x5a2>
 8005fc6:	23a0      	movs	r3, #160	; 0xa0
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d00d      	beq.n	8005fee <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 fbee 	bl	80067b6 <UART_EndTransmit_IT>
    return;
 8005fda:	e008      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	e006      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
    return;
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	e004      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	e002      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
      return;
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	e000      	b.n	8005fee <HAL_UART_IRQHandler+0x5a2>
    return;
 8005fec:	46c0      	nop			; (mov r8, r8)
  }

}
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b02b      	add	sp, #172	; 0xac
 8005ff2:	bd90      	pop	{r4, r7, pc}
 8005ff4:	fffffeff 	.word	0xfffffeff
 8005ff8:	fffffedf 	.word	0xfffffedf

08005ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	000a      	movs	r2, r1
 8006026:	1cbb      	adds	r3, r7, #2
 8006028:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800603c:	231e      	movs	r3, #30
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4aaf      	ldr	r2, [pc, #700]	; (8006320 <UART_SetConfig+0x2ec>)
 8006064:	4013      	ands	r3, r2
 8006066:	0019      	movs	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4aaa      	ldr	r2, [pc, #680]	; (8006324 <UART_SetConfig+0x2f0>)
 800607a:	4013      	ands	r3, r2
 800607c:	0019      	movs	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4aa1      	ldr	r2, [pc, #644]	; (8006328 <UART_SetConfig+0x2f4>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	0019      	movs	r1, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a9d      	ldr	r2, [pc, #628]	; (800632c <UART_SetConfig+0x2f8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d127      	bne.n	800610a <UART_SetConfig+0xd6>
 80060ba:	4b9d      	ldr	r3, [pc, #628]	; (8006330 <UART_SetConfig+0x2fc>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	2203      	movs	r2, #3
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d00d      	beq.n	80060e2 <UART_SetConfig+0xae>
 80060c6:	d81b      	bhi.n	8006100 <UART_SetConfig+0xcc>
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d014      	beq.n	80060f6 <UART_SetConfig+0xc2>
 80060cc:	d818      	bhi.n	8006100 <UART_SetConfig+0xcc>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <UART_SetConfig+0xa4>
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d00a      	beq.n	80060ec <UART_SetConfig+0xb8>
 80060d6:	e013      	b.n	8006100 <UART_SetConfig+0xcc>
 80060d8:	231f      	movs	r3, #31
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e065      	b.n	80061ae <UART_SetConfig+0x17a>
 80060e2:	231f      	movs	r3, #31
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	2202      	movs	r2, #2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e060      	b.n	80061ae <UART_SetConfig+0x17a>
 80060ec:	231f      	movs	r3, #31
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2204      	movs	r2, #4
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e05b      	b.n	80061ae <UART_SetConfig+0x17a>
 80060f6:	231f      	movs	r3, #31
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	e056      	b.n	80061ae <UART_SetConfig+0x17a>
 8006100:	231f      	movs	r3, #31
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	2210      	movs	r2, #16
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e051      	b.n	80061ae <UART_SetConfig+0x17a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a89      	ldr	r2, [pc, #548]	; (8006334 <UART_SetConfig+0x300>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d134      	bne.n	800617e <UART_SetConfig+0x14a>
 8006114:	4b86      	ldr	r3, [pc, #536]	; (8006330 <UART_SetConfig+0x2fc>)
 8006116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006118:	23c0      	movs	r3, #192	; 0xc0
 800611a:	029b      	lsls	r3, r3, #10
 800611c:	4013      	ands	r3, r2
 800611e:	22c0      	movs	r2, #192	; 0xc0
 8006120:	0292      	lsls	r2, r2, #10
 8006122:	4293      	cmp	r3, r2
 8006124:	d017      	beq.n	8006156 <UART_SetConfig+0x122>
 8006126:	22c0      	movs	r2, #192	; 0xc0
 8006128:	0292      	lsls	r2, r2, #10
 800612a:	4293      	cmp	r3, r2
 800612c:	d822      	bhi.n	8006174 <UART_SetConfig+0x140>
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	0292      	lsls	r2, r2, #10
 8006132:	4293      	cmp	r3, r2
 8006134:	d019      	beq.n	800616a <UART_SetConfig+0x136>
 8006136:	2280      	movs	r2, #128	; 0x80
 8006138:	0292      	lsls	r2, r2, #10
 800613a:	4293      	cmp	r3, r2
 800613c:	d81a      	bhi.n	8006174 <UART_SetConfig+0x140>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <UART_SetConfig+0x118>
 8006142:	2280      	movs	r2, #128	; 0x80
 8006144:	0252      	lsls	r2, r2, #9
 8006146:	4293      	cmp	r3, r2
 8006148:	d00a      	beq.n	8006160 <UART_SetConfig+0x12c>
 800614a:	e013      	b.n	8006174 <UART_SetConfig+0x140>
 800614c:	231f      	movs	r3, #31
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e02b      	b.n	80061ae <UART_SetConfig+0x17a>
 8006156:	231f      	movs	r3, #31
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2202      	movs	r2, #2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e026      	b.n	80061ae <UART_SetConfig+0x17a>
 8006160:	231f      	movs	r3, #31
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	2204      	movs	r2, #4
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e021      	b.n	80061ae <UART_SetConfig+0x17a>
 800616a:	231f      	movs	r3, #31
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e01c      	b.n	80061ae <UART_SetConfig+0x17a>
 8006174:	231f      	movs	r3, #31
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	2210      	movs	r2, #16
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e017      	b.n	80061ae <UART_SetConfig+0x17a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6d      	ldr	r2, [pc, #436]	; (8006338 <UART_SetConfig+0x304>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d104      	bne.n	8006192 <UART_SetConfig+0x15e>
 8006188:	231f      	movs	r3, #31
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e00d      	b.n	80061ae <UART_SetConfig+0x17a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a69      	ldr	r2, [pc, #420]	; (800633c <UART_SetConfig+0x308>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d104      	bne.n	80061a6 <UART_SetConfig+0x172>
 800619c:	231f      	movs	r3, #31
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e003      	b.n	80061ae <UART_SetConfig+0x17a>
 80061a6:	231f      	movs	r3, #31
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	2210      	movs	r2, #16
 80061ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d15d      	bne.n	8006276 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80061ba:	231f      	movs	r3, #31
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d015      	beq.n	80061f0 <UART_SetConfig+0x1bc>
 80061c4:	dc18      	bgt.n	80061f8 <UART_SetConfig+0x1c4>
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d00d      	beq.n	80061e6 <UART_SetConfig+0x1b2>
 80061ca:	dc15      	bgt.n	80061f8 <UART_SetConfig+0x1c4>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <UART_SetConfig+0x1a2>
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d005      	beq.n	80061e0 <UART_SetConfig+0x1ac>
 80061d4:	e010      	b.n	80061f8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d6:	f7fe fd05 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 80061da:	0003      	movs	r3, r0
 80061dc:	61bb      	str	r3, [r7, #24]
        break;
 80061de:	e012      	b.n	8006206 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e0:	4b57      	ldr	r3, [pc, #348]	; (8006340 <UART_SetConfig+0x30c>)
 80061e2:	61bb      	str	r3, [r7, #24]
        break;
 80061e4:	e00f      	b.n	8006206 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e6:	f7fe fc71 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 80061ea:	0003      	movs	r3, r0
 80061ec:	61bb      	str	r3, [r7, #24]
        break;
 80061ee:	e00a      	b.n	8006206 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	61bb      	str	r3, [r7, #24]
        break;
 80061f6:	e006      	b.n	8006206 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061fc:	231e      	movs	r3, #30
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
        break;
 8006204:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d100      	bne.n	800620e <UART_SetConfig+0x1da>
 800620c:	e07b      	b.n	8006306 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	005a      	lsls	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	18d2      	adds	r2, r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	0019      	movs	r1, r3
 8006220:	0010      	movs	r0, r2
 8006222:	f7f9 ff83 	bl	800012c <__udivsi3>
 8006226:	0003      	movs	r3, r0
 8006228:	b29b      	uxth	r3, r3
 800622a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d91c      	bls.n	800626c <UART_SetConfig+0x238>
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	025b      	lsls	r3, r3, #9
 8006238:	429a      	cmp	r2, r3
 800623a:	d217      	bcs.n	800626c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b29a      	uxth	r2, r3
 8006240:	200e      	movs	r0, #14
 8006242:	183b      	adds	r3, r7, r0
 8006244:	210f      	movs	r1, #15
 8006246:	438a      	bics	r2, r1
 8006248:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	2207      	movs	r2, #7
 8006252:	4013      	ands	r3, r2
 8006254:	b299      	uxth	r1, r3
 8006256:	183b      	adds	r3, r7, r0
 8006258:	183a      	adds	r2, r7, r0
 800625a:	8812      	ldrh	r2, [r2, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	183a      	adds	r2, r7, r0
 8006266:	8812      	ldrh	r2, [r2, #0]
 8006268:	60da      	str	r2, [r3, #12]
 800626a:	e04c      	b.n	8006306 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800626c:	231e      	movs	r3, #30
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e047      	b.n	8006306 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006276:	231f      	movs	r3, #31
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d015      	beq.n	80062ac <UART_SetConfig+0x278>
 8006280:	dc18      	bgt.n	80062b4 <UART_SetConfig+0x280>
 8006282:	2b04      	cmp	r3, #4
 8006284:	d00d      	beq.n	80062a2 <UART_SetConfig+0x26e>
 8006286:	dc15      	bgt.n	80062b4 <UART_SetConfig+0x280>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <UART_SetConfig+0x25e>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d005      	beq.n	800629c <UART_SetConfig+0x268>
 8006290:	e010      	b.n	80062b4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006292:	f7fe fca7 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8006296:	0003      	movs	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]
        break;
 800629a:	e012      	b.n	80062c2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800629c:	4b28      	ldr	r3, [pc, #160]	; (8006340 <UART_SetConfig+0x30c>)
 800629e:	61bb      	str	r3, [r7, #24]
        break;
 80062a0:	e00f      	b.n	80062c2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a2:	f7fe fc13 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 80062a6:	0003      	movs	r3, r0
 80062a8:	61bb      	str	r3, [r7, #24]
        break;
 80062aa:	e00a      	b.n	80062c2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ac:	2380      	movs	r3, #128	; 0x80
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	61bb      	str	r3, [r7, #24]
        break;
 80062b2:	e006      	b.n	80062c2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062b8:	231e      	movs	r3, #30
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
        break;
 80062c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01e      	beq.n	8006306 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	085a      	lsrs	r2, r3, #1
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	18d2      	adds	r2, r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	0019      	movs	r1, r3
 80062d8:	0010      	movs	r0, r2
 80062da:	f7f9 ff27 	bl	800012c <__udivsi3>
 80062de:	0003      	movs	r3, r0
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d909      	bls.n	80062fe <UART_SetConfig+0x2ca>
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	025b      	lsls	r3, r3, #9
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d204      	bcs.n	80062fe <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	60da      	str	r2, [r3, #12]
 80062fc:	e003      	b.n	8006306 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80062fe:	231e      	movs	r3, #30
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006312:	231e      	movs	r3, #30
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	781b      	ldrb	r3, [r3, #0]
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b008      	add	sp, #32
 800631e:	bd80      	pop	{r7, pc}
 8006320:	efff69f3 	.word	0xefff69f3
 8006324:	ffffcfff 	.word	0xffffcfff
 8006328:	fffff4ff 	.word	0xfffff4ff
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	007a1200 	.word	0x007a1200

08006344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2201      	movs	r2, #1
 8006352:	4013      	ands	r3, r2
 8006354:	d00b      	beq.n	800636e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a4a      	ldr	r2, [pc, #296]	; (8006488 <UART_AdvFeatureConfig+0x144>)
 800635e:	4013      	ands	r3, r2
 8006360:	0019      	movs	r1, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2202      	movs	r2, #2
 8006374:	4013      	ands	r3, r2
 8006376:	d00b      	beq.n	8006390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4a43      	ldr	r2, [pc, #268]	; (800648c <UART_AdvFeatureConfig+0x148>)
 8006380:	4013      	ands	r3, r2
 8006382:	0019      	movs	r1, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2204      	movs	r2, #4
 8006396:	4013      	ands	r3, r2
 8006398:	d00b      	beq.n	80063b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <UART_AdvFeatureConfig+0x14c>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	0019      	movs	r1, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2208      	movs	r2, #8
 80063b8:	4013      	ands	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4a34      	ldr	r2, [pc, #208]	; (8006494 <UART_AdvFeatureConfig+0x150>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	0019      	movs	r1, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2210      	movs	r2, #16
 80063da:	4013      	ands	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <UART_AdvFeatureConfig+0x154>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	0019      	movs	r1, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2220      	movs	r2, #32
 80063fc:	4013      	ands	r3, r2
 80063fe:	d00b      	beq.n	8006418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4a25      	ldr	r2, [pc, #148]	; (800649c <UART_AdvFeatureConfig+0x158>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2240      	movs	r2, #64	; 0x40
 800641e:	4013      	ands	r3, r2
 8006420:	d01d      	beq.n	800645e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <UART_AdvFeatureConfig+0x15c>)
 800642a:	4013      	ands	r3, r2
 800642c:	0019      	movs	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	035b      	lsls	r3, r3, #13
 8006442:	429a      	cmp	r2, r3
 8006444:	d10b      	bne.n	800645e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <UART_AdvFeatureConfig+0x160>)
 800644e:	4013      	ands	r3, r2
 8006450:	0019      	movs	r1, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	4013      	ands	r3, r2
 8006466:	d00b      	beq.n	8006480 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <UART_AdvFeatureConfig+0x164>)
 8006470:	4013      	ands	r3, r2
 8006472:	0019      	movs	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }
}
 8006480:	46c0      	nop			; (mov r8, r8)
 8006482:	46bd      	mov	sp, r7
 8006484:	b002      	add	sp, #8
 8006486:	bd80      	pop	{r7, pc}
 8006488:	fffdffff 	.word	0xfffdffff
 800648c:	fffeffff 	.word	0xfffeffff
 8006490:	fffbffff 	.word	0xfffbffff
 8006494:	ffff7fff 	.word	0xffff7fff
 8006498:	ffffefff 	.word	0xffffefff
 800649c:	ffffdfff 	.word	0xffffdfff
 80064a0:	ffefffff 	.word	0xffefffff
 80064a4:	ff9fffff 	.word	0xff9fffff
 80064a8:	fff7ffff 	.word	0xfff7ffff

080064ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	2100      	movs	r1, #0
 80064ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064bc:	f7fb f990 	bl	80017e0 <HAL_GetTick>
 80064c0:	0003      	movs	r3, r0
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2208      	movs	r2, #8
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d10c      	bne.n	80064ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2280      	movs	r2, #128	; 0x80
 80064d6:	0391      	lsls	r1, r2, #14
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <UART_CheckIdleState+0x8c>)
 80064dc:	9200      	str	r2, [sp, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	f000 f82c 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 80064e4:	1e03      	subs	r3, r0, #0
 80064e6:	d001      	beq.n	80064ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e021      	b.n	8006530 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2204      	movs	r2, #4
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d10c      	bne.n	8006514 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2280      	movs	r2, #128	; 0x80
 80064fe:	03d1      	lsls	r1, r2, #15
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4a0d      	ldr	r2, [pc, #52]	; (8006538 <UART_CheckIdleState+0x8c>)
 8006504:	9200      	str	r2, [sp, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	f000 f818 	bl	800653c <UART_WaitOnFlagUntilTimeout>
 800650c:	1e03      	subs	r3, r0, #0
 800650e:	d001      	beq.n	8006514 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e00d      	b.n	8006530 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2274      	movs	r2, #116	; 0x74
 800652a:	2100      	movs	r1, #0
 800652c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}
 8006538:	01ffffff 	.word	0x01ffffff

0800653c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b094      	sub	sp, #80	; 0x50
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	1dfb      	adds	r3, r7, #7
 800654a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654c:	e0a3      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006550:	3301      	adds	r3, #1
 8006552:	d100      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006554:	e09f      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fb f943 	bl	80017e0 <HAL_GetTick>
 800655a:	0002      	movs	r2, r0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <UART_WaitOnFlagUntilTimeout+0x30>
 8006566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006568:	2b00      	cmp	r3, #0
 800656a:	d13d      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656c:	f3ef 8310 	mrs	r3, PRIMASK
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006574:	647b      	str	r3, [r7, #68]	; 0x44
 8006576:	2301      	movs	r3, #1
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	494c      	ldr	r1, [pc, #304]	; (80066c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800658e:	400a      	ands	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006594:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	f383 8810 	msr	PRIMASK, r3
}
 800659c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659e:	f3ef 8310 	mrs	r3, PRIMASK
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	2301      	movs	r3, #1
 80065aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2101      	movs	r1, #1
 80065c0:	438a      	bics	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	f383 8810 	msr	PRIMASK, r3
}
 80065ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2274      	movs	r2, #116	; 0x74
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e067      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2204      	movs	r2, #4
 80065f0:	4013      	ands	r3, r2
 80065f2:	d050      	beq.n	8006696 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	401a      	ands	r2, r3
 8006600:	2380      	movs	r3, #128	; 0x80
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	429a      	cmp	r2, r3
 8006606:	d146      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	0112      	lsls	r2, r2, #4
 8006610:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006612:	f3ef 8310 	mrs	r3, PRIMASK
 8006616:	613b      	str	r3, [r7, #16]
  return(result);
 8006618:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f383 8810 	msr	PRIMASK, r3
}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4923      	ldr	r1, [pc, #140]	; (80066c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006634:	400a      	ands	r2, r1
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f383 8810 	msr	PRIMASK, r3
}
 8006642:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006644:	f3ef 8310 	mrs	r3, PRIMASK
 8006648:	61fb      	str	r3, [r7, #28]
  return(result);
 800664a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664c:	64bb      	str	r3, [r7, #72]	; 0x48
 800664e:	2301      	movs	r3, #1
 8006650:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f383 8810 	msr	PRIMASK, r3
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2101      	movs	r1, #1
 8006666:	438a      	bics	r2, r1
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	f383 8810 	msr	PRIMASK, r3
}
 8006674:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2280      	movs	r2, #128	; 0x80
 8006686:	2120      	movs	r1, #32
 8006688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2274      	movs	r2, #116	; 0x74
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e010      	b.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	425a      	negs	r2, r3
 80066a6:	4153      	adcs	r3, r2
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	001a      	movs	r2, r3
 80066ac:	1dfb      	adds	r3, r7, #7
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d100      	bne.n	80066b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80066b4:	e74b      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b014      	add	sp, #80	; 0x50
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	fffffe5f 	.word	0xfffffe5f

080066c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	; 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066cc:	f3ef 8310 	mrs	r3, PRIMASK
 80066d0:	617b      	str	r3, [r7, #20]
  return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	2301      	movs	r3, #1
 80066d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f383 8810 	msr	PRIMASK, r3
}
 80066e0:	46c0      	nop			; (mov r8, r8)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4925      	ldr	r1, [pc, #148]	; (8006784 <UART_EndRxTransfer+0xc0>)
 80066ee:	400a      	ands	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f383 8810 	msr	PRIMASK, r3
}
 80066fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006702:	623b      	str	r3, [r7, #32]
  return(result);
 8006704:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	633b      	str	r3, [r7, #48]	; 0x30
 8006708:	2301      	movs	r3, #1
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	f383 8810 	msr	PRIMASK, r3
}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2101      	movs	r1, #1
 8006720:	438a      	bics	r2, r1
 8006722:	609a      	str	r2, [r3, #8]
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	f383 8810 	msr	PRIMASK, r3
}
 800672e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	2b01      	cmp	r3, #1
 8006736:	d118      	bne.n	800676a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006738:	f3ef 8310 	mrs	r3, PRIMASK
 800673c:	60bb      	str	r3, [r7, #8]
  return(result);
 800673e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006742:	2301      	movs	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f383 8810 	msr	PRIMASK, r3
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2110      	movs	r1, #16
 800675a:	438a      	bics	r2, r1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f383 8810 	msr	PRIMASK, r3
}
 8006768:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b00e      	add	sp, #56	; 0x38
 8006782:	bd80      	pop	{r7, pc}
 8006784:	fffffedf 	.word	0xfffffedf

08006788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	225a      	movs	r2, #90	; 0x5a
 800679a:	2100      	movs	r1, #0
 800679c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2252      	movs	r2, #82	; 0x52
 80067a2:	2100      	movs	r1, #0
 80067a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff fc2f 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067be:	f3ef 8310 	mrs	r3, PRIMASK
 80067c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	2301      	movs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f383 8810 	msr	PRIMASK, r3
}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2140      	movs	r1, #64	; 0x40
 80067e0:	438a      	bics	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f383 8810 	msr	PRIMASK, r3
}
 80067ee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	0018      	movs	r0, r3
 8006800:	f7ff fbfc 	bl	8005ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b006      	add	sp, #24
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2244      	movs	r2, #68	; 0x44
 8006828:	2100      	movs	r1, #0
 800682a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <USB_EnableGlobalInt+0x28>)
 800682e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	b299      	uxth	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	; 0x40
 8006838:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}
 8006844:	0000bf80 	.word	0x0000bf80

08006848 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <USB_DisableGlobalInt+0x30>)
 8006852:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	5a9b      	ldrh	r3, [r3, r2]
 800685a:	b29b      	uxth	r3, r3
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	b292      	uxth	r2, r2
 8006860:	43d2      	mvns	r2, r2
 8006862:	b292      	uxth	r2, r2
 8006864:	4013      	ands	r3, r2
 8006866:	b299      	uxth	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b004      	add	sp, #16
 8006876:	bd80      	pop	{r7, pc}
 8006878:	0000bf80 	.word	0x0000bf80

0800687c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b590      	push	{r4, r7, lr}
 8006880:	46c6      	mov	lr, r8
 8006882:	b500      	push	{lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	2004      	movs	r0, #4
 800688c:	2410      	movs	r4, #16
 800688e:	46a4      	mov	ip, r4
 8006890:	2408      	movs	r4, #8
 8006892:	46a0      	mov	r8, r4
 8006894:	44b8      	add	r8, r7
 8006896:	44c4      	add	ip, r8
 8006898:	4460      	add	r0, ip
 800689a:	6001      	str	r1, [r0, #0]
 800689c:	6042      	str	r2, [r0, #4]
 800689e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2240      	movs	r2, #64	; 0x40
 80068a4:	2101      	movs	r1, #1
 80068a6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	2100      	movs	r1, #0
 80068ae:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2244      	movs	r2, #68	; 0x44
 80068b4:	2100      	movs	r1, #0
 80068b6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2250      	movs	r2, #80	; 0x50
 80068bc:	2100      	movs	r1, #0
 80068be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bc80      	pop	{r7}
 80068ca:	46b8      	mov	r8, r7
 80068cc:	bc90      	pop	{r4, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	b004      	add	sp, #16
 80068d2:	4718      	bx	r3

080068d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b09c      	sub	sp, #112	; 0x70
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80068de:	236f      	movs	r3, #111	; 0x6f
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	18d3      	adds	r3, r2, r3
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	236c      	movs	r3, #108	; 0x6c
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	49cf      	ldr	r1, [pc, #828]	; (8006c38 <USB_ActivateEndpoint+0x364>)
 80068fa:	400a      	ands	r2, r1
 80068fc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	78db      	ldrb	r3, [r3, #3]
 8006902:	2b03      	cmp	r3, #3
 8006904:	d017      	beq.n	8006936 <USB_ActivateEndpoint+0x62>
 8006906:	dc28      	bgt.n	800695a <USB_ActivateEndpoint+0x86>
 8006908:	2b02      	cmp	r3, #2
 800690a:	d00e      	beq.n	800692a <USB_ActivateEndpoint+0x56>
 800690c:	dc25      	bgt.n	800695a <USB_ActivateEndpoint+0x86>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <USB_ActivateEndpoint+0x44>
 8006912:	2b01      	cmp	r3, #1
 8006914:	d018      	beq.n	8006948 <USB_ActivateEndpoint+0x74>
 8006916:	e020      	b.n	800695a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006918:	226c      	movs	r2, #108	; 0x6c
 800691a:	18bb      	adds	r3, r7, r2
 800691c:	18ba      	adds	r2, r7, r2
 800691e:	8812      	ldrh	r2, [r2, #0]
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0089      	lsls	r1, r1, #2
 8006924:	430a      	orrs	r2, r1
 8006926:	801a      	strh	r2, [r3, #0]
      break;
 8006928:	e01c      	b.n	8006964 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800692a:	226c      	movs	r2, #108	; 0x6c
 800692c:	18bb      	adds	r3, r7, r2
 800692e:	18ba      	adds	r2, r7, r2
 8006930:	8812      	ldrh	r2, [r2, #0]
 8006932:	801a      	strh	r2, [r3, #0]
      break;
 8006934:	e016      	b.n	8006964 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006936:	226c      	movs	r2, #108	; 0x6c
 8006938:	18bb      	adds	r3, r7, r2
 800693a:	18ba      	adds	r2, r7, r2
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	21c0      	movs	r1, #192	; 0xc0
 8006940:	00c9      	lsls	r1, r1, #3
 8006942:	430a      	orrs	r2, r1
 8006944:	801a      	strh	r2, [r3, #0]
      break;
 8006946:	e00d      	b.n	8006964 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006948:	226c      	movs	r2, #108	; 0x6c
 800694a:	18bb      	adds	r3, r7, r2
 800694c:	18ba      	adds	r2, r7, r2
 800694e:	8812      	ldrh	r2, [r2, #0]
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	00c9      	lsls	r1, r1, #3
 8006954:	430a      	orrs	r2, r1
 8006956:	801a      	strh	r2, [r3, #0]
      break;
 8006958:	e004      	b.n	8006964 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800695a:	236f      	movs	r3, #111	; 0x6f
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	2201      	movs	r2, #1
 8006960:	701a      	strb	r2, [r3, #0]
      break;
 8006962:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	18d3      	adds	r3, r2, r3
 800696e:	226c      	movs	r2, #108	; 0x6c
 8006970:	18ba      	adds	r2, r7, r2
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	49b1      	ldr	r1, [pc, #708]	; (8006c3c <USB_ActivateEndpoint+0x368>)
 8006976:	430a      	orrs	r2, r1
 8006978:	b292      	uxth	r2, r2
 800697a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	18d3      	adds	r3, r2, r3
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	b21b      	sxth	r3, r3
 800698c:	4aac      	ldr	r2, [pc, #688]	; (8006c40 <USB_ActivateEndpoint+0x36c>)
 800698e:	4013      	ands	r3, r2
 8006990:	b21a      	sxth	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b21b      	sxth	r3, r3
 8006998:	4313      	orrs	r3, r2
 800699a:	b21a      	sxth	r2, r3
 800699c:	2166      	movs	r1, #102	; 0x66
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	18d3      	adds	r3, r2, r3
 80069ac:	187a      	adds	r2, r7, r1
 80069ae:	8812      	ldrh	r2, [r2, #0]
 80069b0:	49a2      	ldr	r1, [pc, #648]	; (8006c3c <USB_ActivateEndpoint+0x368>)
 80069b2:	430a      	orrs	r2, r1
 80069b4:	b292      	uxth	r2, r2
 80069b6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	7b1b      	ldrb	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d000      	beq.n	80069c2 <USB_ActivateEndpoint+0xee>
 80069c0:	e150      	b.n	8006c64 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d100      	bne.n	80069cc <USB_ActivateEndpoint+0xf8>
 80069ca:	e07a      	b.n	8006ac2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2250      	movs	r2, #80	; 0x50
 80069d4:	5a9b      	ldrh	r3, [r3, r2]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	001a      	movs	r2, r3
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	189b      	adds	r3, r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00da      	lsls	r2, r3, #3
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	18d3      	adds	r3, r2, r3
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	00d2      	lsls	r2, r2, #3
 80069ee:	4694      	mov	ip, r2
 80069f0:	4463      	add	r3, ip
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	88db      	ldrh	r3, [r3, #6]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	18db      	adds	r3, r3, r3
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	18d2      	adds	r2, r2, r3
 8006a0e:	2112      	movs	r1, #18
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d016      	beq.n	8006a4e <USB_ActivateEndpoint+0x17a>
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	18d3      	adds	r3, r2, r3
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	2010      	movs	r0, #16
 8006a30:	183b      	adds	r3, r7, r0
 8006a32:	4983      	ldr	r1, [pc, #524]	; (8006c40 <USB_ActivateEndpoint+0x36c>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	18d3      	adds	r3, r2, r3
 8006a42:	183a      	adds	r2, r7, r0
 8006a44:	8812      	ldrh	r2, [r2, #0]
 8006a46:	497f      	ldr	r1, [pc, #508]	; (8006c44 <USB_ActivateEndpoint+0x370>)
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d01d      	beq.n	8006a92 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	18d3      	adds	r3, r2, r3
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	200c      	movs	r0, #12
 8006a66:	183b      	adds	r3, r7, r0
 8006a68:	4977      	ldr	r1, [pc, #476]	; (8006c48 <USB_ActivateEndpoint+0x374>)
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	183b      	adds	r3, r7, r0
 8006a70:	183a      	adds	r2, r7, r0
 8006a72:	8812      	ldrh	r2, [r2, #0]
 8006a74:	2120      	movs	r1, #32
 8006a76:	404a      	eors	r2, r1
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	18d3      	adds	r3, r2, r3
 8006a84:	183a      	adds	r2, r7, r0
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	496c      	ldr	r1, [pc, #432]	; (8006c3c <USB_ActivateEndpoint+0x368>)
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e27a      	b.n	8006f88 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	18d3      	adds	r3, r2, r3
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	200e      	movs	r0, #14
 8006aa2:	183b      	adds	r3, r7, r0
 8006aa4:	4968      	ldr	r1, [pc, #416]	; (8006c48 <USB_ActivateEndpoint+0x374>)
 8006aa6:	400a      	ands	r2, r1
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	183a      	adds	r2, r7, r0
 8006ab6:	8812      	ldrh	r2, [r2, #0]
 8006ab8:	4960      	ldr	r1, [pc, #384]	; (8006c3c <USB_ActivateEndpoint+0x368>)
 8006aba:	430a      	orrs	r2, r1
 8006abc:	b292      	uxth	r2, r2
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e262      	b.n	8006f88 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2250      	movs	r2, #80	; 0x50
 8006aca:	5a9b      	ldrh	r3, [r3, r2]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	001a      	movs	r2, r3
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	00da      	lsls	r2, r3, #3
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	18d3      	adds	r3, r2, r3
 8006ae0:	4a5a      	ldr	r2, [pc, #360]	; (8006c4c <USB_ActivateEndpoint+0x378>)
 8006ae2:	4694      	mov	ip, r2
 8006ae4:	4463      	add	r3, ip
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	88db      	ldrh	r3, [r3, #6]
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	18db      	adds	r3, r3, r3
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2250      	movs	r2, #80	; 0x50
 8006b00:	5a9b      	ldrh	r3, [r3, r2]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	001a      	movs	r2, r3
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	189b      	adds	r3, r3, r2
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	00da      	lsls	r2, r3, #3
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	18d3      	adds	r3, r2, r3
 8006b16:	4a4e      	ldr	r2, [pc, #312]	; (8006c50 <USB_ActivateEndpoint+0x37c>)
 8006b18:	4694      	mov	ip, r2
 8006b1a:	4463      	add	r3, ip
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d110      	bne.n	8006b48 <USB_ActivateEndpoint+0x274>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	4a49      	ldr	r2, [pc, #292]	; (8006c54 <USB_ActivateEndpoint+0x380>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4a46      	ldr	r2, [pc, #280]	; (8006c58 <USB_ActivateEndpoint+0x384>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e02b      	b.n	8006ba0 <USB_ActivateEndpoint+0x2cc>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b4e:	d812      	bhi.n	8006b76 <USB_ActivateEndpoint+0x2a2>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d002      	beq.n	8006b68 <USB_ActivateEndpoint+0x294>
 8006b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b64:	3301      	adds	r3, #1
 8006b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e014      	b.n	8006ba0 <USB_ActivateEndpoint+0x2cc>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	221f      	movs	r2, #31
 8006b84:	4013      	ands	r3, r2
 8006b86:	d102      	bne.n	8006b8e <USB_ActivateEndpoint+0x2ba>
 8006b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4a30      	ldr	r2, [pc, #192]	; (8006c58 <USB_ActivateEndpoint+0x384>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	18d2      	adds	r2, r2, r3
 8006baa:	2122      	movs	r1, #34	; 0x22
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	8812      	ldrh	r2, [r2, #0]
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	01db      	lsls	r3, r3, #7
 8006bba:	4013      	ands	r3, r2
 8006bbc:	d016      	beq.n	8006bec <USB_ActivateEndpoint+0x318>
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	18d3      	adds	r3, r2, r3
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	2020      	movs	r0, #32
 8006bce:	183b      	adds	r3, r7, r0
 8006bd0:	491b      	ldr	r1, [pc, #108]	; (8006c40 <USB_ActivateEndpoint+0x36c>)
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	18d3      	adds	r3, r2, r3
 8006be0:	183a      	adds	r2, r7, r0
 8006be2:	8812      	ldrh	r2, [r2, #0]
 8006be4:	491d      	ldr	r1, [pc, #116]	; (8006c5c <USB_ActivateEndpoint+0x388>)
 8006be6:	430a      	orrs	r2, r1
 8006be8:	b292      	uxth	r2, r2
 8006bea:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	18d3      	adds	r3, r2, r3
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	201e      	movs	r0, #30
 8006bfc:	183b      	adds	r3, r7, r0
 8006bfe:	4918      	ldr	r1, [pc, #96]	; (8006c60 <USB_ActivateEndpoint+0x38c>)
 8006c00:	400a      	ands	r2, r1
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	183b      	adds	r3, r7, r0
 8006c06:	183a      	adds	r2, r7, r0
 8006c08:	8812      	ldrh	r2, [r2, #0]
 8006c0a:	2180      	movs	r1, #128	; 0x80
 8006c0c:	0149      	lsls	r1, r1, #5
 8006c0e:	404a      	eors	r2, r1
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	183b      	adds	r3, r7, r0
 8006c14:	183a      	adds	r2, r7, r0
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	0189      	lsls	r1, r1, #6
 8006c1c:	404a      	eors	r2, r1
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	18d3      	adds	r3, r2, r3
 8006c2a:	183a      	adds	r2, r7, r0
 8006c2c:	8812      	ldrh	r2, [r2, #0]
 8006c2e:	4903      	ldr	r1, [pc, #12]	; (8006c3c <USB_ActivateEndpoint+0x368>)
 8006c30:	430a      	orrs	r2, r1
 8006c32:	b292      	uxth	r2, r2
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	e1a7      	b.n	8006f88 <USB_ActivateEndpoint+0x6b4>
 8006c38:	ffff898f 	.word	0xffff898f
 8006c3c:	ffff8080 	.word	0xffff8080
 8006c40:	ffff8f8f 	.word	0xffff8f8f
 8006c44:	ffff80c0 	.word	0xffff80c0
 8006c48:	ffff8fbf 	.word	0xffff8fbf
 8006c4c:	00000404 	.word	0x00000404
 8006c50:	00000406 	.word	0x00000406
 8006c54:	ffff83ff 	.word	0xffff83ff
 8006c58:	ffff8000 	.word	0xffff8000
 8006c5c:	ffffc080 	.word	0xffffc080
 8006c60:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d117      	bne.n	8006c9c <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	18d3      	adds	r3, r2, r3
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	2062      	movs	r0, #98	; 0x62
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	49c6      	ldr	r1, [pc, #792]	; (8006f98 <USB_ActivateEndpoint+0x6c4>)
 8006c80:	400a      	ands	r2, r1
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	18d3      	adds	r3, r2, r3
 8006c8e:	183a      	adds	r2, r7, r0
 8006c90:	8812      	ldrh	r2, [r2, #0]
 8006c92:	49c2      	ldr	r1, [pc, #776]	; (8006f9c <USB_ActivateEndpoint+0x6c8>)
 8006c94:	430a      	orrs	r2, r1
 8006c96:	b292      	uxth	r2, r2
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	e016      	b.n	8006cca <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	18d3      	adds	r3, r2, r3
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	2064      	movs	r0, #100	; 0x64
 8006cac:	183b      	adds	r3, r7, r0
 8006cae:	49bc      	ldr	r1, [pc, #752]	; (8006fa0 <USB_ActivateEndpoint+0x6cc>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	18d3      	adds	r3, r2, r3
 8006cbe:	183a      	adds	r2, r7, r0
 8006cc0:	8812      	ldrh	r2, [r2, #0]
 8006cc2:	49b8      	ldr	r1, [pc, #736]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2250      	movs	r2, #80	; 0x50
 8006cd2:	5a9b      	ldrh	r3, [r3, r2]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cda:	189b      	adds	r3, r3, r2
 8006cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	00da      	lsls	r2, r3, #3
 8006ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce6:	18d3      	adds	r3, r2, r3
 8006ce8:	2280      	movs	r2, #128	; 0x80
 8006cea:	00d2      	lsls	r2, r2, #3
 8006cec:	4694      	mov	ip, r2
 8006cee:	4463      	add	r3, ip
 8006cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	891b      	ldrh	r3, [r3, #8]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	18db      	adds	r3, r3, r3
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	657b      	str	r3, [r7, #84]	; 0x54
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2250      	movs	r2, #80	; 0x50
 8006d0a:	5a9b      	ldrh	r3, [r3, r2]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	001a      	movs	r2, r3
 8006d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d12:	189b      	adds	r3, r3, r2
 8006d14:	657b      	str	r3, [r7, #84]	; 0x54
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	00da      	lsls	r2, r3, #3
 8006d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1e:	18d3      	adds	r3, r2, r3
 8006d20:	4aa1      	ldr	r2, [pc, #644]	; (8006fa8 <USB_ActivateEndpoint+0x6d4>)
 8006d22:	4694      	mov	ip, r2
 8006d24:	4463      	add	r3, ip
 8006d26:	653b      	str	r3, [r7, #80]	; 0x50
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	895b      	ldrh	r3, [r3, #10]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	18db      	adds	r3, r3, r3
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d000      	beq.n	8006d42 <USB_ActivateEndpoint+0x46e>
 8006d40:	e087      	b.n	8006e52 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	18d2      	adds	r2, r2, r3
 8006d4c:	2140      	movs	r1, #64	; 0x40
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	187b      	adds	r3, r7, r1
 8006d56:	881a      	ldrh	r2, [r3, #0]
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	01db      	lsls	r3, r3, #7
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d016      	beq.n	8006d8e <USB_ActivateEndpoint+0x4ba>
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	203e      	movs	r0, #62	; 0x3e
 8006d70:	183b      	adds	r3, r7, r0
 8006d72:	4989      	ldr	r1, [pc, #548]	; (8006f98 <USB_ActivateEndpoint+0x6c4>)
 8006d74:	400a      	ands	r2, r1
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	18d3      	adds	r3, r2, r3
 8006d82:	183a      	adds	r2, r7, r0
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	4989      	ldr	r1, [pc, #548]	; (8006fac <USB_ActivateEndpoint+0x6d8>)
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	18d2      	adds	r2, r2, r3
 8006d98:	213c      	movs	r1, #60	; 0x3c
 8006d9a:	187b      	adds	r3, r7, r1
 8006d9c:	8812      	ldrh	r2, [r2, #0]
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	187b      	adds	r3, r7, r1
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	2240      	movs	r2, #64	; 0x40
 8006da6:	4013      	ands	r3, r2
 8006da8:	d016      	beq.n	8006dd8 <USB_ActivateEndpoint+0x504>
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	203a      	movs	r0, #58	; 0x3a
 8006dba:	183b      	adds	r3, r7, r0
 8006dbc:	4976      	ldr	r1, [pc, #472]	; (8006f98 <USB_ActivateEndpoint+0x6c4>)
 8006dbe:	400a      	ands	r2, r1
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	183a      	adds	r2, r7, r0
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	4977      	ldr	r1, [pc, #476]	; (8006fb0 <USB_ActivateEndpoint+0x6dc>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	18d3      	adds	r3, r2, r3
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	2038      	movs	r0, #56	; 0x38
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	4972      	ldr	r1, [pc, #456]	; (8006fb4 <USB_ActivateEndpoint+0x6e0>)
 8006dec:	400a      	ands	r2, r1
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	183a      	adds	r2, r7, r0
 8006df4:	8812      	ldrh	r2, [r2, #0]
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	0149      	lsls	r1, r1, #5
 8006dfa:	404a      	eors	r2, r1
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	183a      	adds	r2, r7, r0
 8006e02:	8812      	ldrh	r2, [r2, #0]
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	0189      	lsls	r1, r1, #6
 8006e08:	404a      	eors	r2, r1
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	18d3      	adds	r3, r2, r3
 8006e16:	183a      	adds	r2, r7, r0
 8006e18:	8812      	ldrh	r2, [r2, #0]
 8006e1a:	4962      	ldr	r1, [pc, #392]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	18d3      	adds	r3, r2, r3
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	2036      	movs	r0, #54	; 0x36
 8006e32:	183b      	adds	r3, r7, r0
 8006e34:	4960      	ldr	r1, [pc, #384]	; (8006fb8 <USB_ActivateEndpoint+0x6e4>)
 8006e36:	400a      	ands	r2, r1
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	183a      	adds	r2, r7, r0
 8006e46:	8812      	ldrh	r2, [r2, #0]
 8006e48:	4956      	ldr	r1, [pc, #344]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	b292      	uxth	r2, r2
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e09a      	b.n	8006f88 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	18d2      	adds	r2, r2, r3
 8006e5c:	214e      	movs	r1, #78	; 0x4e
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	8812      	ldrh	r2, [r2, #0]
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	01db      	lsls	r3, r3, #7
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d016      	beq.n	8006e9e <USB_ActivateEndpoint+0x5ca>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	18d3      	adds	r3, r2, r3
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	204c      	movs	r0, #76	; 0x4c
 8006e80:	183b      	adds	r3, r7, r0
 8006e82:	4945      	ldr	r1, [pc, #276]	; (8006f98 <USB_ActivateEndpoint+0x6c4>)
 8006e84:	400a      	ands	r2, r1
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	18d3      	adds	r3, r2, r3
 8006e92:	183a      	adds	r2, r7, r0
 8006e94:	8812      	ldrh	r2, [r2, #0]
 8006e96:	4945      	ldr	r1, [pc, #276]	; (8006fac <USB_ActivateEndpoint+0x6d8>)
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	18d2      	adds	r2, r2, r3
 8006ea8:	214a      	movs	r1, #74	; 0x4a
 8006eaa:	187b      	adds	r3, r7, r1
 8006eac:	8812      	ldrh	r2, [r2, #0]
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	2240      	movs	r2, #64	; 0x40
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d016      	beq.n	8006ee8 <USB_ActivateEndpoint+0x614>
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	18d3      	adds	r3, r2, r3
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	2048      	movs	r0, #72	; 0x48
 8006eca:	183b      	adds	r3, r7, r0
 8006ecc:	4932      	ldr	r1, [pc, #200]	; (8006f98 <USB_ActivateEndpoint+0x6c4>)
 8006ece:	400a      	ands	r2, r1
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	18d3      	adds	r3, r2, r3
 8006edc:	183a      	adds	r2, r7, r0
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	4933      	ldr	r1, [pc, #204]	; (8006fb0 <USB_ActivateEndpoint+0x6dc>)
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	78db      	ldrb	r3, [r3, #3]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d01d      	beq.n	8006f2c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	18d3      	adds	r3, r2, r3
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	2044      	movs	r0, #68	; 0x44
 8006f00:	183b      	adds	r3, r7, r0
 8006f02:	492d      	ldr	r1, [pc, #180]	; (8006fb8 <USB_ActivateEndpoint+0x6e4>)
 8006f04:	400a      	ands	r2, r1
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	183b      	adds	r3, r7, r0
 8006f0a:	183a      	adds	r2, r7, r0
 8006f0c:	8812      	ldrh	r2, [r2, #0]
 8006f0e:	2120      	movs	r1, #32
 8006f10:	404a      	eors	r2, r1
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	18d3      	adds	r3, r2, r3
 8006f1e:	183a      	adds	r2, r7, r0
 8006f20:	8812      	ldrh	r2, [r2, #0]
 8006f22:	4920      	ldr	r1, [pc, #128]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006f24:	430a      	orrs	r2, r1
 8006f26:	b292      	uxth	r2, r2
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e016      	b.n	8006f5a <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	18d3      	adds	r3, r2, r3
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	2046      	movs	r0, #70	; 0x46
 8006f3c:	183b      	adds	r3, r7, r0
 8006f3e:	491e      	ldr	r1, [pc, #120]	; (8006fb8 <USB_ActivateEndpoint+0x6e4>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	18d3      	adds	r3, r2, r3
 8006f4e:	183a      	adds	r2, r7, r0
 8006f50:	8812      	ldrh	r2, [r2, #0]
 8006f52:	4914      	ldr	r1, [pc, #80]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006f54:	430a      	orrs	r2, r1
 8006f56:	b292      	uxth	r2, r2
 8006f58:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	18d3      	adds	r3, r2, r3
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	2042      	movs	r0, #66	; 0x42
 8006f6a:	183b      	adds	r3, r7, r0
 8006f6c:	4911      	ldr	r1, [pc, #68]	; (8006fb4 <USB_ActivateEndpoint+0x6e0>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	18d3      	adds	r3, r2, r3
 8006f7c:	183a      	adds	r2, r7, r0
 8006f7e:	8812      	ldrh	r2, [r2, #0]
 8006f80:	4908      	ldr	r1, [pc, #32]	; (8006fa4 <USB_ActivateEndpoint+0x6d0>)
 8006f82:	430a      	orrs	r2, r1
 8006f84:	b292      	uxth	r2, r2
 8006f86:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8006f88:	236f      	movs	r3, #111	; 0x6f
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	781b      	ldrb	r3, [r3, #0]
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b01c      	add	sp, #112	; 0x70
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	ffff8f8f 	.word	0xffff8f8f
 8006f9c:	ffff8180 	.word	0xffff8180
 8006fa0:	ffff8e8f 	.word	0xffff8e8f
 8006fa4:	ffff8080 	.word	0xffff8080
 8006fa8:	00000404 	.word	0x00000404
 8006fac:	ffffc080 	.word	0xffffc080
 8006fb0:	ffff80c0 	.word	0xffff80c0
 8006fb4:	ffffbf8f 	.word	0xffffbf8f
 8006fb8:	ffff8fbf 	.word	0xffff8fbf

08006fbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	; 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	7b1b      	ldrb	r3, [r3, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d000      	beq.n	8006fd0 <USB_DeactivateEndpoint+0x14>
 8006fce:	e07e      	b.n	80070ce <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d03c      	beq.n	8007052 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	18d2      	adds	r2, r2, r3
 8006fe2:	210c      	movs	r1, #12
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	8812      	ldrh	r2, [r2, #0]
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	2240      	movs	r2, #64	; 0x40
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d016      	beq.n	8007022 <USB_DeactivateEndpoint+0x66>
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	18d3      	adds	r3, r2, r3
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29a      	uxth	r2, r3
 8007002:	200a      	movs	r0, #10
 8007004:	183b      	adds	r3, r7, r0
 8007006:	49c7      	ldr	r1, [pc, #796]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 8007008:	400a      	ands	r2, r1
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	18d3      	adds	r3, r2, r3
 8007016:	183a      	adds	r2, r7, r0
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	49c3      	ldr	r1, [pc, #780]	; (8007328 <USB_DeactivateEndpoint+0x36c>)
 800701c:	430a      	orrs	r2, r1
 800701e:	b292      	uxth	r2, r2
 8007020:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	18d3      	adds	r3, r2, r3
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29a      	uxth	r2, r3
 8007030:	2008      	movs	r0, #8
 8007032:	183b      	adds	r3, r7, r0
 8007034:	49bd      	ldr	r1, [pc, #756]	; (800732c <USB_DeactivateEndpoint+0x370>)
 8007036:	400a      	ands	r2, r1
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	18d3      	adds	r3, r2, r3
 8007044:	183a      	adds	r2, r7, r0
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	49b9      	ldr	r1, [pc, #740]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 800704a:	430a      	orrs	r2, r1
 800704c:	b292      	uxth	r2, r2
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e163      	b.n	800731a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	18d2      	adds	r2, r2, r3
 800705c:	2112      	movs	r1, #18
 800705e:	187b      	adds	r3, r7, r1
 8007060:	8812      	ldrh	r2, [r2, #0]
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	187b      	adds	r3, r7, r1
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	4013      	ands	r3, r2
 800706e:	d016      	beq.n	800709e <USB_DeactivateEndpoint+0xe2>
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	18d3      	adds	r3, r2, r3
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29a      	uxth	r2, r3
 800707e:	2010      	movs	r0, #16
 8007080:	183b      	adds	r3, r7, r0
 8007082:	49a8      	ldr	r1, [pc, #672]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 8007084:	400a      	ands	r2, r1
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	18d3      	adds	r3, r2, r3
 8007092:	183a      	adds	r2, r7, r0
 8007094:	8812      	ldrh	r2, [r2, #0]
 8007096:	49a7      	ldr	r1, [pc, #668]	; (8007334 <USB_DeactivateEndpoint+0x378>)
 8007098:	430a      	orrs	r2, r1
 800709a:	b292      	uxth	r2, r2
 800709c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	18d3      	adds	r3, r2, r3
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	200e      	movs	r0, #14
 80070ae:	183b      	adds	r3, r7, r0
 80070b0:	49a1      	ldr	r1, [pc, #644]	; (8007338 <USB_DeactivateEndpoint+0x37c>)
 80070b2:	400a      	ands	r2, r1
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	18d3      	adds	r3, r2, r3
 80070c0:	183a      	adds	r2, r7, r0
 80070c2:	8812      	ldrh	r2, [r2, #0]
 80070c4:	499a      	ldr	r1, [pc, #616]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 80070c6:	430a      	orrs	r2, r1
 80070c8:	b292      	uxth	r2, r2
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	e125      	b.n	800731a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d000      	beq.n	80070d8 <USB_DeactivateEndpoint+0x11c>
 80070d6:	e090      	b.n	80071fa <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	18d2      	adds	r2, r2, r3
 80070e2:	2120      	movs	r1, #32
 80070e4:	187b      	adds	r3, r7, r1
 80070e6:	8812      	ldrh	r2, [r2, #0]
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	01db      	lsls	r3, r3, #7
 80070f2:	4013      	ands	r3, r2
 80070f4:	d016      	beq.n	8007124 <USB_DeactivateEndpoint+0x168>
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	18d3      	adds	r3, r2, r3
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	201e      	movs	r0, #30
 8007106:	183b      	adds	r3, r7, r0
 8007108:	4986      	ldr	r1, [pc, #536]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 800710a:	400a      	ands	r2, r1
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	18d3      	adds	r3, r2, r3
 8007118:	183a      	adds	r2, r7, r0
 800711a:	8812      	ldrh	r2, [r2, #0]
 800711c:	4985      	ldr	r1, [pc, #532]	; (8007334 <USB_DeactivateEndpoint+0x378>)
 800711e:	430a      	orrs	r2, r1
 8007120:	b292      	uxth	r2, r2
 8007122:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	18d2      	adds	r2, r2, r3
 800712e:	211c      	movs	r1, #28
 8007130:	187b      	adds	r3, r7, r1
 8007132:	8812      	ldrh	r2, [r2, #0]
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	187b      	adds	r3, r7, r1
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	4013      	ands	r3, r2
 800713e:	d016      	beq.n	800716e <USB_DeactivateEndpoint+0x1b2>
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	18d3      	adds	r3, r2, r3
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	201a      	movs	r0, #26
 8007150:	183b      	adds	r3, r7, r0
 8007152:	4974      	ldr	r1, [pc, #464]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 8007154:	400a      	ands	r2, r1
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	18d3      	adds	r3, r2, r3
 8007162:	183a      	adds	r2, r7, r0
 8007164:	8812      	ldrh	r2, [r2, #0]
 8007166:	4970      	ldr	r1, [pc, #448]	; (8007328 <USB_DeactivateEndpoint+0x36c>)
 8007168:	430a      	orrs	r2, r1
 800716a:	b292      	uxth	r2, r2
 800716c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29a      	uxth	r2, r3
 800717c:	2018      	movs	r0, #24
 800717e:	183b      	adds	r3, r7, r0
 8007180:	4968      	ldr	r1, [pc, #416]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 8007182:	400a      	ands	r2, r1
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	18d3      	adds	r3, r2, r3
 8007190:	183a      	adds	r2, r7, r0
 8007192:	8812      	ldrh	r2, [r2, #0]
 8007194:	4964      	ldr	r1, [pc, #400]	; (8007328 <USB_DeactivateEndpoint+0x36c>)
 8007196:	430a      	orrs	r2, r1
 8007198:	b292      	uxth	r2, r2
 800719a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	18d3      	adds	r3, r2, r3
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	2016      	movs	r0, #22
 80071ac:	183b      	adds	r3, r7, r0
 80071ae:	4962      	ldr	r1, [pc, #392]	; (8007338 <USB_DeactivateEndpoint+0x37c>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	18d3      	adds	r3, r2, r3
 80071be:	183a      	adds	r2, r7, r0
 80071c0:	8812      	ldrh	r2, [r2, #0]
 80071c2:	495b      	ldr	r1, [pc, #364]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 80071c4:	430a      	orrs	r2, r1
 80071c6:	b292      	uxth	r2, r2
 80071c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	18d3      	adds	r3, r2, r3
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	2014      	movs	r0, #20
 80071da:	183b      	adds	r3, r7, r0
 80071dc:	4953      	ldr	r1, [pc, #332]	; (800732c <USB_DeactivateEndpoint+0x370>)
 80071de:	400a      	ands	r2, r1
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	18d3      	adds	r3, r2, r3
 80071ec:	183a      	adds	r2, r7, r0
 80071ee:	8812      	ldrh	r2, [r2, #0]
 80071f0:	494f      	ldr	r1, [pc, #316]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 80071f2:	430a      	orrs	r2, r1
 80071f4:	b292      	uxth	r2, r2
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e08f      	b.n	800731a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	18d2      	adds	r2, r2, r3
 8007204:	212e      	movs	r1, #46	; 0x2e
 8007206:	187b      	adds	r3, r7, r1
 8007208:	8812      	ldrh	r2, [r2, #0]
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	187b      	adds	r3, r7, r1
 800720e:	881a      	ldrh	r2, [r3, #0]
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4013      	ands	r3, r2
 8007216:	d016      	beq.n	8007246 <USB_DeactivateEndpoint+0x28a>
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	18d3      	adds	r3, r2, r3
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29a      	uxth	r2, r3
 8007226:	202c      	movs	r0, #44	; 0x2c
 8007228:	183b      	adds	r3, r7, r0
 800722a:	493e      	ldr	r1, [pc, #248]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 800722c:	400a      	ands	r2, r1
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	18d3      	adds	r3, r2, r3
 800723a:	183a      	adds	r2, r7, r0
 800723c:	8812      	ldrh	r2, [r2, #0]
 800723e:	493d      	ldr	r1, [pc, #244]	; (8007334 <USB_DeactivateEndpoint+0x378>)
 8007240:	430a      	orrs	r2, r1
 8007242:	b292      	uxth	r2, r2
 8007244:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	18d2      	adds	r2, r2, r3
 8007250:	212a      	movs	r1, #42	; 0x2a
 8007252:	187b      	adds	r3, r7, r1
 8007254:	8812      	ldrh	r2, [r2, #0]
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	187b      	adds	r3, r7, r1
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	2240      	movs	r2, #64	; 0x40
 800725e:	4013      	ands	r3, r2
 8007260:	d016      	beq.n	8007290 <USB_DeactivateEndpoint+0x2d4>
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	18d3      	adds	r3, r2, r3
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29a      	uxth	r2, r3
 8007270:	2028      	movs	r0, #40	; 0x28
 8007272:	183b      	adds	r3, r7, r0
 8007274:	492b      	ldr	r1, [pc, #172]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 8007276:	400a      	ands	r2, r1
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	18d3      	adds	r3, r2, r3
 8007284:	183a      	adds	r2, r7, r0
 8007286:	8812      	ldrh	r2, [r2, #0]
 8007288:	4927      	ldr	r1, [pc, #156]	; (8007328 <USB_DeactivateEndpoint+0x36c>)
 800728a:	430a      	orrs	r2, r1
 800728c:	b292      	uxth	r2, r2
 800728e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	2026      	movs	r0, #38	; 0x26
 80072a0:	183b      	adds	r3, r7, r0
 80072a2:	4920      	ldr	r1, [pc, #128]	; (8007324 <USB_DeactivateEndpoint+0x368>)
 80072a4:	400a      	ands	r2, r1
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	18d3      	adds	r3, r2, r3
 80072b2:	183a      	adds	r2, r7, r0
 80072b4:	8812      	ldrh	r2, [r2, #0]
 80072b6:	491f      	ldr	r1, [pc, #124]	; (8007334 <USB_DeactivateEndpoint+0x378>)
 80072b8:	430a      	orrs	r2, r1
 80072ba:	b292      	uxth	r2, r2
 80072bc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	18d3      	adds	r3, r2, r3
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	2024      	movs	r0, #36	; 0x24
 80072ce:	183b      	adds	r3, r7, r0
 80072d0:	4916      	ldr	r1, [pc, #88]	; (800732c <USB_DeactivateEndpoint+0x370>)
 80072d2:	400a      	ands	r2, r1
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	183a      	adds	r2, r7, r0
 80072e2:	8812      	ldrh	r2, [r2, #0]
 80072e4:	4912      	ldr	r1, [pc, #72]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 80072e6:	430a      	orrs	r2, r1
 80072e8:	b292      	uxth	r2, r2
 80072ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	18d3      	adds	r3, r2, r3
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	2022      	movs	r0, #34	; 0x22
 80072fc:	183b      	adds	r3, r7, r0
 80072fe:	490e      	ldr	r1, [pc, #56]	; (8007338 <USB_DeactivateEndpoint+0x37c>)
 8007300:	400a      	ands	r2, r1
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	18d3      	adds	r3, r2, r3
 800730e:	183a      	adds	r2, r7, r0
 8007310:	8812      	ldrh	r2, [r2, #0]
 8007312:	4907      	ldr	r1, [pc, #28]	; (8007330 <USB_DeactivateEndpoint+0x374>)
 8007314:	430a      	orrs	r2, r1
 8007316:	b292      	uxth	r2, r2
 8007318:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	b00c      	add	sp, #48	; 0x30
 8007322:	bd80      	pop	{r7, pc}
 8007324:	ffff8f8f 	.word	0xffff8f8f
 8007328:	ffff80c0 	.word	0xffff80c0
 800732c:	ffff8fbf 	.word	0xffff8fbf
 8007330:	ffff8080 	.word	0xffff8080
 8007334:	ffffc080 	.word	0xffffc080
 8007338:	ffffbf8f 	.word	0xffffbf8f

0800733c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b0c3      	sub	sp, #268	; 0x10c
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d001      	beq.n	8007352 <USB_EPStartXfer+0x16>
 800734e:	f000 fcef 	bl	8007d30 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	429a      	cmp	r2, r3
 800735c:	d905      	bls.n	800736a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	1d7a      	adds	r2, r7, #5
 8007364:	32ff      	adds	r2, #255	; 0xff
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	e004      	b.n	8007374 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	1d7a      	adds	r2, r7, #5
 8007370:	32ff      	adds	r2, #255	; 0xff
 8007372:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	7b1b      	ldrb	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d125      	bne.n	80073c8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6959      	ldr	r1, [r3, #20]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	88da      	ldrh	r2, [r3, #6]
 8007384:	1d7b      	adds	r3, r7, #5
 8007386:	33ff      	adds	r3, #255	; 0xff
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 f9c9 	bl	8008724 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2250      	movs	r2, #80	; 0x50
 800739a:	5a9b      	ldrh	r3, [r3, r2]
 800739c:	b29b      	uxth	r3, r3
 800739e:	001a      	movs	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	18d3      	adds	r3, r2, r3
 80073b0:	4acc      	ldr	r2, [pc, #816]	; (80076e4 <USB_EPStartXfer+0x3a8>)
 80073b2:	4694      	mov	ip, r2
 80073b4:	4463      	add	r3, ip
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	1d7b      	adds	r3, r7, #5
 80073ba:	33ff      	adds	r3, #255	; 0xff
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	f000 fc8f 	bl	8007ce6 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	78db      	ldrb	r3, [r3, #3]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d000      	beq.n	80073d2 <USB_EPStartXfer+0x96>
 80073d0:	e33a      	b.n	8007a48 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6a1a      	ldr	r2, [r3, #32]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d800      	bhi.n	80073e0 <USB_EPStartXfer+0xa4>
 80073de:	e2df      	b.n	80079a0 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	18d3      	adds	r3, r2, r3
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	2056      	movs	r0, #86	; 0x56
 80073f0:	183b      	adds	r3, r7, r0
 80073f2:	49bd      	ldr	r1, [pc, #756]	; (80076e8 <USB_EPStartXfer+0x3ac>)
 80073f4:	400a      	ands	r2, r1
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	18d3      	adds	r3, r2, r3
 8007402:	183a      	adds	r2, r7, r0
 8007404:	8812      	ldrh	r2, [r2, #0]
 8007406:	49b9      	ldr	r1, [pc, #740]	; (80076ec <USB_EPStartXfer+0x3b0>)
 8007408:	430a      	orrs	r2, r1
 800740a:	b292      	uxth	r2, r2
 800740c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	1d7b      	adds	r3, r7, #5
 8007414:	33ff      	adds	r3, #255	; 0xff
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	18d3      	adds	r3, r2, r3
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	001a      	movs	r2, r3
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	4013      	ands	r3, r2
 8007432:	d100      	bne.n	8007436 <USB_EPStartXfer+0xfa>
 8007434:	e162      	b.n	80076fc <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	633b      	str	r3, [r7, #48]	; 0x30
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d16a      	bne.n	8007518 <USB_EPStartXfer+0x1dc>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2250      	movs	r2, #80	; 0x50
 800744a:	5a9b      	ldrh	r3, [r3, r2]
 800744c:	b29b      	uxth	r3, r3
 800744e:	001a      	movs	r2, r3
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	189b      	adds	r3, r3, r2
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	00da      	lsls	r2, r3, #3
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	18d3      	adds	r3, r2, r3
 8007460:	4aa3      	ldr	r2, [pc, #652]	; (80076f0 <USB_EPStartXfer+0x3b4>)
 8007462:	4694      	mov	ip, r2
 8007464:	4463      	add	r3, ip
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
 8007468:	1d7b      	adds	r3, r7, #5
 800746a:	33ff      	adds	r3, #255	; 0xff
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d110      	bne.n	8007494 <USB_EPStartXfer+0x158>
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	4a9e      	ldr	r2, [pc, #632]	; (80076f4 <USB_EPStartXfer+0x3b8>)
 800747a:	4013      	ands	r3, r2
 800747c:	b29a      	uxth	r2, r3
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	4a9b      	ldr	r2, [pc, #620]	; (80076f8 <USB_EPStartXfer+0x3bc>)
 800748a:	4313      	orrs	r3, r2
 800748c:	b29a      	uxth	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e05c      	b.n	800754e <USB_EPStartXfer+0x212>
 8007494:	1d7b      	adds	r3, r7, #5
 8007496:	33ff      	adds	r3, #255	; 0xff
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b3e      	cmp	r3, #62	; 0x3e
 800749c:	d81c      	bhi.n	80074d8 <USB_EPStartXfer+0x19c>
 800749e:	1d7b      	adds	r3, r7, #5
 80074a0:	33ff      	adds	r3, #255	; 0xff
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	1c7a      	adds	r2, r7, #1
 80074a8:	32ff      	adds	r2, #255	; 0xff
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	1d7b      	adds	r3, r7, #5
 80074ae:	33ff      	adds	r3, #255	; 0xff
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	4013      	ands	r3, r2
 80074b6:	d006      	beq.n	80074c6 <USB_EPStartXfer+0x18a>
 80074b8:	1c7b      	adds	r3, r7, #1
 80074ba:	33ff      	adds	r3, #255	; 0xff
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	1c7a      	adds	r2, r7, #1
 80074c2:	32ff      	adds	r2, #255	; 0xff
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	1c7b      	adds	r3, r7, #1
 80074c8:	33ff      	adds	r3, #255	; 0xff
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	029b      	lsls	r3, r3, #10
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e03a      	b.n	800754e <USB_EPStartXfer+0x212>
 80074d8:	1d7b      	adds	r3, r7, #5
 80074da:	33ff      	adds	r3, #255	; 0xff
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	1c7a      	adds	r2, r7, #1
 80074e2:	32ff      	adds	r2, #255	; 0xff
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	1d7b      	adds	r3, r7, #5
 80074e8:	33ff      	adds	r3, #255	; 0xff
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	221f      	movs	r2, #31
 80074ee:	4013      	ands	r3, r2
 80074f0:	d106      	bne.n	8007500 <USB_EPStartXfer+0x1c4>
 80074f2:	1c7b      	adds	r3, r7, #1
 80074f4:	33ff      	adds	r3, #255	; 0xff
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	1c7a      	adds	r2, r7, #1
 80074fc:	32ff      	adds	r2, #255	; 0xff
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	1c7b      	adds	r3, r7, #1
 8007502:	33ff      	adds	r3, #255	; 0xff
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	b29b      	uxth	r3, r3
 800750c:	4a7a      	ldr	r2, [pc, #488]	; (80076f8 <USB_EPStartXfer+0x3bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	b29a      	uxth	r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e01a      	b.n	800754e <USB_EPStartXfer+0x212>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d116      	bne.n	800754e <USB_EPStartXfer+0x212>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2250      	movs	r2, #80	; 0x50
 8007524:	5a9b      	ldrh	r3, [r3, r2]
 8007526:	b29b      	uxth	r3, r3
 8007528:	001a      	movs	r2, r3
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	189b      	adds	r3, r3, r2
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	00da      	lsls	r2, r3, #3
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	18d3      	adds	r3, r2, r3
 800753a:	4a6d      	ldr	r2, [pc, #436]	; (80076f0 <USB_EPStartXfer+0x3b4>)
 800753c:	4694      	mov	ip, r2
 800753e:	4463      	add	r3, ip
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007542:	1d7b      	adds	r3, r7, #5
 8007544:	33ff      	adds	r3, #255	; 0xff
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	b29a      	uxth	r2, r3
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800754e:	2076      	movs	r0, #118	; 0x76
 8007550:	183b      	adds	r3, r7, r0
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	8952      	ldrh	r2, [r2, #10]
 8007556:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6959      	ldr	r1, [r3, #20]
 800755c:	1d7b      	adds	r3, r7, #5
 800755e:	33ff      	adds	r3, #255	; 0xff
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	b29c      	uxth	r4, r3
 8007564:	183b      	adds	r3, r7, r0
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	0023      	movs	r3, r4
 800756c:	f001 f8da 	bl	8008724 <USB_WritePMA>
            ep->xfer_buff += len;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695a      	ldr	r2, [r3, #20]
 8007574:	1d7b      	adds	r3, r7, #5
 8007576:	33ff      	adds	r3, #255	; 0xff
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	18d2      	adds	r2, r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	429a      	cmp	r2, r3
 800758a:	d908      	bls.n	800759e <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	6a1a      	ldr	r2, [r3, #32]
 8007590:	1d7b      	adds	r3, r7, #5
 8007592:	33ff      	adds	r3, #255	; 0xff
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	621a      	str	r2, [r3, #32]
 800759c:	e007      	b.n	80075ae <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	1d7a      	adds	r2, r7, #5
 80075a4:	32ff      	adds	r2, #255	; 0xff
 80075a6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d166      	bne.n	8007684 <USB_EPStartXfer+0x348>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2250      	movs	r2, #80	; 0x50
 80075be:	5a9b      	ldrh	r3, [r3, r2]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	001a      	movs	r2, r3
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	00da      	lsls	r2, r3, #3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	18d3      	adds	r3, r2, r3
 80075d4:	4a43      	ldr	r2, [pc, #268]	; (80076e4 <USB_EPStartXfer+0x3a8>)
 80075d6:	4694      	mov	ip, r2
 80075d8:	4463      	add	r3, ip
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	1d7b      	adds	r3, r7, #5
 80075de:	33ff      	adds	r3, #255	; 0xff
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d110      	bne.n	8007608 <USB_EPStartXfer+0x2cc>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4a41      	ldr	r2, [pc, #260]	; (80076f4 <USB_EPStartXfer+0x3b8>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	4a3e      	ldr	r2, [pc, #248]	; (80076f8 <USB_EPStartXfer+0x3bc>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	b29a      	uxth	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e05a      	b.n	80076be <USB_EPStartXfer+0x382>
 8007608:	1d7b      	adds	r3, r7, #5
 800760a:	33ff      	adds	r3, #255	; 0xff
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b3e      	cmp	r3, #62	; 0x3e
 8007610:	d81a      	bhi.n	8007648 <USB_EPStartXfer+0x30c>
 8007612:	1d7b      	adds	r3, r7, #5
 8007614:	33ff      	adds	r3, #255	; 0xff
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	21fc      	movs	r1, #252	; 0xfc
 800761c:	187a      	adds	r2, r7, r1
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	1d7b      	adds	r3, r7, #5
 8007622:	33ff      	adds	r3, #255	; 0xff
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	4013      	ands	r3, r2
 800762a:	d004      	beq.n	8007636 <USB_EPStartXfer+0x2fa>
 800762c:	187b      	adds	r3, r7, r1
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	187a      	adds	r2, r7, r1
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	23fc      	movs	r3, #252	; 0xfc
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	029b      	lsls	r3, r3, #10
 8007640:	b29a      	uxth	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e03a      	b.n	80076be <USB_EPStartXfer+0x382>
 8007648:	1d7b      	adds	r3, r7, #5
 800764a:	33ff      	adds	r3, #255	; 0xff
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	21fc      	movs	r1, #252	; 0xfc
 8007652:	187a      	adds	r2, r7, r1
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	1d7b      	adds	r3, r7, #5
 8007658:	33ff      	adds	r3, #255	; 0xff
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	221f      	movs	r2, #31
 800765e:	4013      	ands	r3, r2
 8007660:	d104      	bne.n	800766c <USB_EPStartXfer+0x330>
 8007662:	187b      	adds	r3, r7, r1
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3b01      	subs	r3, #1
 8007668:	187a      	adds	r2, r7, r1
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	23fc      	movs	r3, #252	; 0xfc
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	b29b      	uxth	r3, r3
 8007678:	4a1f      	ldr	r2, [pc, #124]	; (80076f8 <USB_EPStartXfer+0x3bc>)
 800767a:	4313      	orrs	r3, r2
 800767c:	b29a      	uxth	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	801a      	strh	r2, [r3, #0]
 8007682:	e01c      	b.n	80076be <USB_EPStartXfer+0x382>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d118      	bne.n	80076be <USB_EPStartXfer+0x382>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	623b      	str	r3, [r7, #32]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2250      	movs	r2, #80	; 0x50
 8007694:	5a9b      	ldrh	r3, [r3, r2]
 8007696:	b29b      	uxth	r3, r3
 8007698:	001a      	movs	r2, r3
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	189b      	adds	r3, r3, r2
 800769e:	623b      	str	r3, [r7, #32]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	00da      	lsls	r2, r3, #3
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	18d3      	adds	r3, r2, r3
 80076aa:	4a0e      	ldr	r2, [pc, #56]	; (80076e4 <USB_EPStartXfer+0x3a8>)
 80076ac:	4694      	mov	ip, r2
 80076ae:	4463      	add	r3, ip
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	1d7b      	adds	r3, r7, #5
 80076b4:	33ff      	adds	r3, #255	; 0xff
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076be:	2076      	movs	r0, #118	; 0x76
 80076c0:	183b      	adds	r3, r7, r0
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	8912      	ldrh	r2, [r2, #8]
 80076c6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6959      	ldr	r1, [r3, #20]
 80076cc:	1d7b      	adds	r3, r7, #5
 80076ce:	33ff      	adds	r3, #255	; 0xff
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	b29c      	uxth	r4, r3
 80076d4:	183b      	adds	r3, r7, r0
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	0023      	movs	r3, r4
 80076dc:	f001 f822 	bl	8008724 <USB_WritePMA>
 80076e0:	e301      	b.n	8007ce6 <USB_EPStartXfer+0x9aa>
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	00000402 	.word	0x00000402
 80076e8:	ffff8f8f 	.word	0xffff8f8f
 80076ec:	ffff8180 	.word	0xffff8180
 80076f0:	00000406 	.word	0x00000406
 80076f4:	ffff83ff 	.word	0xffff83ff
 80076f8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d166      	bne.n	80077d2 <USB_EPStartXfer+0x496>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	64bb      	str	r3, [r7, #72]	; 0x48
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2250      	movs	r2, #80	; 0x50
 800770c:	5a9b      	ldrh	r3, [r3, r2]
 800770e:	b29b      	uxth	r3, r3
 8007710:	001a      	movs	r2, r3
 8007712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007714:	189b      	adds	r3, r3, r2
 8007716:	64bb      	str	r3, [r7, #72]	; 0x48
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	00da      	lsls	r2, r3, #3
 800771e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	4ac3      	ldr	r2, [pc, #780]	; (8007a30 <USB_EPStartXfer+0x6f4>)
 8007724:	4694      	mov	ip, r2
 8007726:	4463      	add	r3, ip
 8007728:	647b      	str	r3, [r7, #68]	; 0x44
 800772a:	1d7b      	adds	r3, r7, #5
 800772c:	33ff      	adds	r3, #255	; 0xff
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d110      	bne.n	8007756 <USB_EPStartXfer+0x41a>
 8007734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	4abe      	ldr	r2, [pc, #760]	; (8007a34 <USB_EPStartXfer+0x6f8>)
 800773c:	4013      	ands	r3, r2
 800773e:	b29a      	uxth	r2, r3
 8007740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	4abb      	ldr	r2, [pc, #748]	; (8007a38 <USB_EPStartXfer+0x6fc>)
 800774c:	4313      	orrs	r3, r2
 800774e:	b29a      	uxth	r2, r3
 8007750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e05a      	b.n	800780c <USB_EPStartXfer+0x4d0>
 8007756:	1d7b      	adds	r3, r7, #5
 8007758:	33ff      	adds	r3, #255	; 0xff
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b3e      	cmp	r3, #62	; 0x3e
 800775e:	d81a      	bhi.n	8007796 <USB_EPStartXfer+0x45a>
 8007760:	1d7b      	adds	r3, r7, #5
 8007762:	33ff      	adds	r3, #255	; 0xff
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	21f8      	movs	r1, #248	; 0xf8
 800776a:	187a      	adds	r2, r7, r1
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	1d7b      	adds	r3, r7, #5
 8007770:	33ff      	adds	r3, #255	; 0xff
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2201      	movs	r2, #1
 8007776:	4013      	ands	r3, r2
 8007778:	d004      	beq.n	8007784 <USB_EPStartXfer+0x448>
 800777a:	187b      	adds	r3, r7, r1
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3301      	adds	r3, #1
 8007780:	187a      	adds	r2, r7, r1
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	23f8      	movs	r3, #248	; 0xf8
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29a      	uxth	r2, r3
 8007790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e03a      	b.n	800780c <USB_EPStartXfer+0x4d0>
 8007796:	1d7b      	adds	r3, r7, #5
 8007798:	33ff      	adds	r3, #255	; 0xff
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	21f8      	movs	r1, #248	; 0xf8
 80077a0:	187a      	adds	r2, r7, r1
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	1d7b      	adds	r3, r7, #5
 80077a6:	33ff      	adds	r3, #255	; 0xff
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	221f      	movs	r2, #31
 80077ac:	4013      	ands	r3, r2
 80077ae:	d104      	bne.n	80077ba <USB_EPStartXfer+0x47e>
 80077b0:	187b      	adds	r3, r7, r1
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	187a      	adds	r2, r7, r1
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	23f8      	movs	r3, #248	; 0xf8
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4a9c      	ldr	r2, [pc, #624]	; (8007a38 <USB_EPStartXfer+0x6fc>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e01c      	b.n	800780c <USB_EPStartXfer+0x4d0>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d118      	bne.n	800780c <USB_EPStartXfer+0x4d0>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	653b      	str	r3, [r7, #80]	; 0x50
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2250      	movs	r2, #80	; 0x50
 80077e2:	5a9b      	ldrh	r3, [r3, r2]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	001a      	movs	r2, r3
 80077e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	00da      	lsls	r2, r3, #3
 80077f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f6:	18d3      	adds	r3, r2, r3
 80077f8:	4a8d      	ldr	r2, [pc, #564]	; (8007a30 <USB_EPStartXfer+0x6f4>)
 80077fa:	4694      	mov	ip, r2
 80077fc:	4463      	add	r3, ip
 80077fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007800:	1d7b      	adds	r3, r7, #5
 8007802:	33ff      	adds	r3, #255	; 0xff
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800780c:	2076      	movs	r0, #118	; 0x76
 800780e:	183b      	adds	r3, r7, r0
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	8912      	ldrh	r2, [r2, #8]
 8007814:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6959      	ldr	r1, [r3, #20]
 800781a:	1d7b      	adds	r3, r7, #5
 800781c:	33ff      	adds	r3, #255	; 0xff
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	b29c      	uxth	r4, r3
 8007822:	183b      	adds	r3, r7, r0
 8007824:	881a      	ldrh	r2, [r3, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	0023      	movs	r3, r4
 800782a:	f000 ff7b 	bl	8008724 <USB_WritePMA>
            ep->xfer_buff += len;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	1d7b      	adds	r3, r7, #5
 8007834:	33ff      	adds	r3, #255	; 0xff
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	18d2      	adds	r2, r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6a1a      	ldr	r2, [r3, #32]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	429a      	cmp	r2, r3
 8007848:	d908      	bls.n	800785c <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6a1a      	ldr	r2, [r3, #32]
 800784e:	1d7b      	adds	r3, r7, #5
 8007850:	33ff      	adds	r3, #255	; 0xff
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	1ad2      	subs	r2, r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	621a      	str	r2, [r3, #32]
 800785a:	e007      	b.n	800786c <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	1d7a      	adds	r2, r7, #5
 8007862:	32ff      	adds	r2, #255	; 0xff
 8007864:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2200      	movs	r2, #0
 800786a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	643b      	str	r3, [r7, #64]	; 0x40
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d166      	bne.n	8007946 <USB_EPStartXfer+0x60a>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	63bb      	str	r3, [r7, #56]	; 0x38
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2250      	movs	r2, #80	; 0x50
 8007880:	5a9b      	ldrh	r3, [r3, r2]
 8007882:	b29b      	uxth	r3, r3
 8007884:	001a      	movs	r2, r3
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	189b      	adds	r3, r3, r2
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	00da      	lsls	r2, r3, #3
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	18d3      	adds	r3, r2, r3
 8007896:	4a69      	ldr	r2, [pc, #420]	; (8007a3c <USB_EPStartXfer+0x700>)
 8007898:	4694      	mov	ip, r2
 800789a:	4463      	add	r3, ip
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
 800789e:	1d7b      	adds	r3, r7, #5
 80078a0:	33ff      	adds	r3, #255	; 0xff
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d110      	bne.n	80078ca <USB_EPStartXfer+0x58e>
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	4a61      	ldr	r2, [pc, #388]	; (8007a34 <USB_EPStartXfer+0x6f8>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4a5e      	ldr	r2, [pc, #376]	; (8007a38 <USB_EPStartXfer+0x6fc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e058      	b.n	800797c <USB_EPStartXfer+0x640>
 80078ca:	1d7b      	adds	r3, r7, #5
 80078cc:	33ff      	adds	r3, #255	; 0xff
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b3e      	cmp	r3, #62	; 0x3e
 80078d2:	d81a      	bhi.n	800790a <USB_EPStartXfer+0x5ce>
 80078d4:	1d7b      	adds	r3, r7, #5
 80078d6:	33ff      	adds	r3, #255	; 0xff
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	21f4      	movs	r1, #244	; 0xf4
 80078de:	187a      	adds	r2, r7, r1
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	1d7b      	adds	r3, r7, #5
 80078e4:	33ff      	adds	r3, #255	; 0xff
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2201      	movs	r2, #1
 80078ea:	4013      	ands	r3, r2
 80078ec:	d004      	beq.n	80078f8 <USB_EPStartXfer+0x5bc>
 80078ee:	187b      	adds	r3, r7, r1
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	187a      	adds	r2, r7, r1
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	23f4      	movs	r3, #244	; 0xf4
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	b29a      	uxth	r2, r3
 8007904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e038      	b.n	800797c <USB_EPStartXfer+0x640>
 800790a:	1d7b      	adds	r3, r7, #5
 800790c:	33ff      	adds	r3, #255	; 0xff
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	21f4      	movs	r1, #244	; 0xf4
 8007914:	187a      	adds	r2, r7, r1
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	1d7b      	adds	r3, r7, #5
 800791a:	33ff      	adds	r3, #255	; 0xff
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	221f      	movs	r2, #31
 8007920:	4013      	ands	r3, r2
 8007922:	d104      	bne.n	800792e <USB_EPStartXfer+0x5f2>
 8007924:	187b      	adds	r3, r7, r1
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3b01      	subs	r3, #1
 800792a:	187a      	adds	r2, r7, r1
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	23f4      	movs	r3, #244	; 0xf4
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	b29b      	uxth	r3, r3
 800793a:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <USB_EPStartXfer+0x6fc>)
 800793c:	4313      	orrs	r3, r2
 800793e:	b29a      	uxth	r2, r3
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	e01a      	b.n	800797c <USB_EPStartXfer+0x640>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d116      	bne.n	800797c <USB_EPStartXfer+0x640>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2250      	movs	r2, #80	; 0x50
 8007952:	5a9b      	ldrh	r3, [r3, r2]
 8007954:	b29b      	uxth	r3, r3
 8007956:	001a      	movs	r2, r3
 8007958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795a:	189b      	adds	r3, r3, r2
 800795c:	643b      	str	r3, [r7, #64]	; 0x40
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	00da      	lsls	r2, r3, #3
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	18d3      	adds	r3, r2, r3
 8007968:	4a34      	ldr	r2, [pc, #208]	; (8007a3c <USB_EPStartXfer+0x700>)
 800796a:	4694      	mov	ip, r2
 800796c:	4463      	add	r3, ip
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007970:	1d7b      	adds	r3, r7, #5
 8007972:	33ff      	adds	r3, #255	; 0xff
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	b29a      	uxth	r2, r3
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800797c:	2076      	movs	r0, #118	; 0x76
 800797e:	183b      	adds	r3, r7, r0
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	8952      	ldrh	r2, [r2, #10]
 8007984:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6959      	ldr	r1, [r3, #20]
 800798a:	1d7b      	adds	r3, r7, #5
 800798c:	33ff      	adds	r3, #255	; 0xff
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	b29c      	uxth	r4, r3
 8007992:	183b      	adds	r3, r7, r0
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	0023      	movs	r3, r4
 800799a:	f000 fec3 	bl	8008724 <USB_WritePMA>
 800799e:	e1a2      	b.n	8007ce6 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	1d7a      	adds	r2, r7, #5
 80079a6:	32ff      	adds	r2, #255	; 0xff
 80079a8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	18d3      	adds	r3, r2, r3
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	2062      	movs	r0, #98	; 0x62
 80079ba:	183b      	adds	r3, r7, r0
 80079bc:	4920      	ldr	r1, [pc, #128]	; (8007a40 <USB_EPStartXfer+0x704>)
 80079be:	400a      	ands	r2, r1
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	18d3      	adds	r3, r2, r3
 80079cc:	183a      	adds	r2, r7, r0
 80079ce:	8812      	ldrh	r2, [r2, #0]
 80079d0:	491c      	ldr	r1, [pc, #112]	; (8007a44 <USB_EPStartXfer+0x708>)
 80079d2:	430a      	orrs	r2, r1
 80079d4:	b292      	uxth	r2, r2
 80079d6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2250      	movs	r2, #80	; 0x50
 80079e0:	5a9b      	ldrh	r3, [r3, r2]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	001a      	movs	r2, r3
 80079e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e8:	189b      	adds	r3, r3, r2
 80079ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	00da      	lsls	r2, r3, #3
 80079f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f4:	18d3      	adds	r3, r2, r3
 80079f6:	4a0e      	ldr	r2, [pc, #56]	; (8007a30 <USB_EPStartXfer+0x6f4>)
 80079f8:	4694      	mov	ip, r2
 80079fa:	4463      	add	r3, ip
 80079fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80079fe:	1d7b      	adds	r3, r7, #5
 8007a00:	33ff      	adds	r3, #255	; 0xff
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a0a:	2076      	movs	r0, #118	; 0x76
 8007a0c:	183b      	adds	r3, r7, r0
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	8912      	ldrh	r2, [r2, #8]
 8007a12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6959      	ldr	r1, [r3, #20]
 8007a18:	1d7b      	adds	r3, r7, #5
 8007a1a:	33ff      	adds	r3, #255	; 0xff
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	b29c      	uxth	r4, r3
 8007a20:	183b      	adds	r3, r7, r0
 8007a22:	881a      	ldrh	r2, [r3, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	0023      	movs	r3, r4
 8007a28:	f000 fe7c 	bl	8008724 <USB_WritePMA>
 8007a2c:	e15b      	b.n	8007ce6 <USB_EPStartXfer+0x9aa>
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	00000402 	.word	0x00000402
 8007a34:	ffff83ff 	.word	0xffff83ff
 8007a38:	ffff8000 	.word	0xffff8000
 8007a3c:	00000406 	.word	0x00000406
 8007a40:	ffff8e8f 	.word	0xffff8e8f
 8007a44:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	6a1a      	ldr	r2, [r3, #32]
 8007a4c:	1d7b      	adds	r3, r7, #5
 8007a4e:	33ff      	adds	r3, #255	; 0xff
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	18d3      	adds	r3, r2, r3
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	001a      	movs	r2, r3
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d100      	bne.n	8007a70 <USB_EPStartXfer+0x734>
 8007a6e:	e099      	b.n	8007ba4 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	673b      	str	r3, [r7, #112]	; 0x70
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d166      	bne.n	8007b4a <USB_EPStartXfer+0x80e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2250      	movs	r2, #80	; 0x50
 8007a84:	5a9b      	ldrh	r3, [r3, r2]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	001a      	movs	r2, r3
 8007a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a8c:	189b      	adds	r3, r3, r2
 8007a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	00da      	lsls	r2, r3, #3
 8007a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a98:	18d3      	adds	r3, r2, r3
 8007a9a:	4ad0      	ldr	r2, [pc, #832]	; (8007ddc <USB_EPStartXfer+0xaa0>)
 8007a9c:	4694      	mov	ip, r2
 8007a9e:	4463      	add	r3, ip
 8007aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8007aa2:	1d7b      	adds	r3, r7, #5
 8007aa4:	33ff      	adds	r3, #255	; 0xff
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d110      	bne.n	8007ace <USB_EPStartXfer+0x792>
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4acb      	ldr	r2, [pc, #812]	; (8007de0 <USB_EPStartXfer+0xaa4>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	4ac8      	ldr	r2, [pc, #800]	; (8007de4 <USB_EPStartXfer+0xaa8>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	e058      	b.n	8007b80 <USB_EPStartXfer+0x844>
 8007ace:	1d7b      	adds	r3, r7, #5
 8007ad0:	33ff      	adds	r3, #255	; 0xff
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ad6:	d81a      	bhi.n	8007b0e <USB_EPStartXfer+0x7d2>
 8007ad8:	1d7b      	adds	r3, r7, #5
 8007ada:	33ff      	adds	r3, #255	; 0xff
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	21f0      	movs	r1, #240	; 0xf0
 8007ae2:	187a      	adds	r2, r7, r1
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	1d7b      	adds	r3, r7, #5
 8007ae8:	33ff      	adds	r3, #255	; 0xff
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	4013      	ands	r3, r2
 8007af0:	d004      	beq.n	8007afc <USB_EPStartXfer+0x7c0>
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3301      	adds	r3, #1
 8007af8:	187a      	adds	r2, r7, r1
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	23f0      	movs	r3, #240	; 0xf0
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	e038      	b.n	8007b80 <USB_EPStartXfer+0x844>
 8007b0e:	1d7b      	adds	r3, r7, #5
 8007b10:	33ff      	adds	r3, #255	; 0xff
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	21f0      	movs	r1, #240	; 0xf0
 8007b18:	187a      	adds	r2, r7, r1
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	1d7b      	adds	r3, r7, #5
 8007b1e:	33ff      	adds	r3, #255	; 0xff
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	221f      	movs	r2, #31
 8007b24:	4013      	ands	r3, r2
 8007b26:	d104      	bne.n	8007b32 <USB_EPStartXfer+0x7f6>
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	187a      	adds	r2, r7, r1
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	23f0      	movs	r3, #240	; 0xf0
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4aa9      	ldr	r2, [pc, #676]	; (8007de4 <USB_EPStartXfer+0xaa8>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	e01a      	b.n	8007b80 <USB_EPStartXfer+0x844>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d116      	bne.n	8007b80 <USB_EPStartXfer+0x844>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2250      	movs	r2, #80	; 0x50
 8007b56:	5a9b      	ldrh	r3, [r3, r2]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b5e:	189b      	adds	r3, r3, r2
 8007b60:	673b      	str	r3, [r7, #112]	; 0x70
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	00da      	lsls	r2, r3, #3
 8007b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	4a9b      	ldr	r2, [pc, #620]	; (8007ddc <USB_EPStartXfer+0xaa0>)
 8007b6e:	4694      	mov	ip, r2
 8007b70:	4463      	add	r3, ip
 8007b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b74:	1d7b      	adds	r3, r7, #5
 8007b76:	33ff      	adds	r3, #255	; 0xff
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b80:	2076      	movs	r0, #118	; 0x76
 8007b82:	183b      	adds	r3, r7, r0
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	8952      	ldrh	r2, [r2, #10]
 8007b88:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6959      	ldr	r1, [r3, #20]
 8007b8e:	1d7b      	adds	r3, r7, #5
 8007b90:	33ff      	adds	r3, #255	; 0xff
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b29c      	uxth	r4, r3
 8007b96:	183b      	adds	r3, r7, r0
 8007b98:	881a      	ldrh	r2, [r3, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	0023      	movs	r3, r4
 8007b9e:	f000 fdc1 	bl	8008724 <USB_WritePMA>
 8007ba2:	e0a0      	b.n	8007ce6 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d166      	bne.n	8007c7a <USB_EPStartXfer+0x93e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2250      	movs	r2, #80	; 0x50
 8007bb4:	5a9b      	ldrh	r3, [r3, r2]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	001a      	movs	r2, r3
 8007bba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	00da      	lsls	r2, r3, #3
 8007bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	4a87      	ldr	r2, [pc, #540]	; (8007de8 <USB_EPStartXfer+0xaac>)
 8007bcc:	4694      	mov	ip, r2
 8007bce:	4463      	add	r3, ip
 8007bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bd2:	1d7b      	adds	r3, r7, #5
 8007bd4:	33ff      	adds	r3, #255	; 0xff
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <USB_EPStartXfer+0x8c2>
 8007bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4a7f      	ldr	r2, [pc, #508]	; (8007de0 <USB_EPStartXfer+0xaa4>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	4a7c      	ldr	r2, [pc, #496]	; (8007de4 <USB_EPStartXfer+0xaa8>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e062      	b.n	8007cc4 <USB_EPStartXfer+0x988>
 8007bfe:	1d7b      	adds	r3, r7, #5
 8007c00:	33ff      	adds	r3, #255	; 0xff
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b3e      	cmp	r3, #62	; 0x3e
 8007c06:	d81a      	bhi.n	8007c3e <USB_EPStartXfer+0x902>
 8007c08:	1d7b      	adds	r3, r7, #5
 8007c0a:	33ff      	adds	r3, #255	; 0xff
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	21ec      	movs	r1, #236	; 0xec
 8007c12:	187a      	adds	r2, r7, r1
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	1d7b      	adds	r3, r7, #5
 8007c18:	33ff      	adds	r3, #255	; 0xff
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d004      	beq.n	8007c2c <USB_EPStartXfer+0x8f0>
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	187a      	adds	r2, r7, r1
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	23ec      	movs	r3, #236	; 0xec
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	029b      	lsls	r3, r3, #10
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3a:	801a      	strh	r2, [r3, #0]
 8007c3c:	e042      	b.n	8007cc4 <USB_EPStartXfer+0x988>
 8007c3e:	1d7b      	adds	r3, r7, #5
 8007c40:	33ff      	adds	r3, #255	; 0xff
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	21ec      	movs	r1, #236	; 0xec
 8007c48:	187a      	adds	r2, r7, r1
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	1d7b      	adds	r3, r7, #5
 8007c4e:	33ff      	adds	r3, #255	; 0xff
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	221f      	movs	r2, #31
 8007c54:	4013      	ands	r3, r2
 8007c56:	d104      	bne.n	8007c62 <USB_EPStartXfer+0x926>
 8007c58:	187b      	adds	r3, r7, r1
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	187a      	adds	r2, r7, r1
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	23ec      	movs	r3, #236	; 0xec
 8007c64:	18fb      	adds	r3, r7, r3
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	029b      	lsls	r3, r3, #10
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	4a5d      	ldr	r2, [pc, #372]	; (8007de4 <USB_EPStartXfer+0xaa8>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	e024      	b.n	8007cc4 <USB_EPStartXfer+0x988>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d120      	bne.n	8007cc4 <USB_EPStartXfer+0x988>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2184      	movs	r1, #132	; 0x84
 8007c86:	187a      	adds	r2, r7, r1
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2250      	movs	r2, #80	; 0x50
 8007c8e:	5a9b      	ldrh	r3, [r3, r2]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	001a      	movs	r2, r3
 8007c94:	187b      	adds	r3, r7, r1
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	189b      	adds	r3, r3, r2
 8007c9a:	187a      	adds	r2, r7, r1
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	00da      	lsls	r2, r3, #3
 8007ca4:	187b      	adds	r3, r7, r1
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	4a4f      	ldr	r2, [pc, #316]	; (8007de8 <USB_EPStartXfer+0xaac>)
 8007cac:	4694      	mov	ip, r2
 8007cae:	4463      	add	r3, ip
 8007cb0:	2180      	movs	r1, #128	; 0x80
 8007cb2:	187a      	adds	r2, r7, r1
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	1d7b      	adds	r3, r7, #5
 8007cb8:	33ff      	adds	r3, #255	; 0xff
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	187b      	adds	r3, r7, r1
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cc4:	2076      	movs	r0, #118	; 0x76
 8007cc6:	183b      	adds	r3, r7, r0
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	8912      	ldrh	r2, [r2, #8]
 8007ccc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6959      	ldr	r1, [r3, #20]
 8007cd2:	1d7b      	adds	r3, r7, #5
 8007cd4:	33ff      	adds	r3, #255	; 0xff
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	b29c      	uxth	r4, r3
 8007cda:	183b      	adds	r3, r7, r0
 8007cdc:	881a      	ldrh	r2, [r3, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	0023      	movs	r3, r4
 8007ce2:	f000 fd1f 	bl	8008724 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	200a      	movs	r0, #10
 8007cf6:	183b      	adds	r3, r7, r0
 8007cf8:	493c      	ldr	r1, [pc, #240]	; (8007dec <USB_EPStartXfer+0xab0>)
 8007cfa:	400a      	ands	r2, r1
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	183b      	adds	r3, r7, r0
 8007d00:	183a      	adds	r2, r7, r0
 8007d02:	8812      	ldrh	r2, [r2, #0]
 8007d04:	2110      	movs	r1, #16
 8007d06:	404a      	eors	r2, r1
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	183b      	adds	r3, r7, r0
 8007d0c:	183a      	adds	r2, r7, r0
 8007d0e:	8812      	ldrh	r2, [r2, #0]
 8007d10:	2120      	movs	r1, #32
 8007d12:	404a      	eors	r2, r1
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	18d3      	adds	r3, r2, r3
 8007d20:	183a      	adds	r2, r7, r0
 8007d22:	8812      	ldrh	r2, [r2, #0]
 8007d24:	4932      	ldr	r1, [pc, #200]	; (8007df0 <USB_EPStartXfer+0xab4>)
 8007d26:	430a      	orrs	r2, r1
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	f000 fbaf 	bl	800848e <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	7b1b      	ldrb	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d000      	beq.n	8007d3a <USB_EPStartXfer+0x9fe>
 8007d38:	e09e      	b.n	8007e78 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d90d      	bls.n	8007d62 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	1d7a      	adds	r2, r7, #5
 8007d4c:	32ff      	adds	r2, #255	; 0xff
 8007d4e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	1d7b      	adds	r3, r7, #5
 8007d56:	33ff      	adds	r3, #255	; 0xff
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	619a      	str	r2, [r3, #24]
 8007d60:	e007      	b.n	8007d72 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	1d7a      	adds	r2, r7, #5
 8007d68:	32ff      	adds	r2, #255	; 0xff
 8007d6a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2190      	movs	r1, #144	; 0x90
 8007d76:	187a      	adds	r2, r7, r1
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2250      	movs	r2, #80	; 0x50
 8007d7e:	5a9b      	ldrh	r3, [r3, r2]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	001a      	movs	r2, r3
 8007d84:	187b      	adds	r3, r7, r1
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	187a      	adds	r2, r7, r1
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00da      	lsls	r2, r3, #3
 8007d94:	187b      	adds	r3, r7, r1
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	18d3      	adds	r3, r2, r3
 8007d9a:	4a10      	ldr	r2, [pc, #64]	; (8007ddc <USB_EPStartXfer+0xaa0>)
 8007d9c:	4694      	mov	ip, r2
 8007d9e:	4463      	add	r3, ip
 8007da0:	218c      	movs	r1, #140	; 0x8c
 8007da2:	187a      	adds	r2, r7, r1
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	1d7b      	adds	r3, r7, #5
 8007da8:	33ff      	adds	r3, #255	; 0xff
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d121      	bne.n	8007df4 <USB_EPStartXfer+0xab8>
 8007db0:	187b      	adds	r3, r7, r1
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <USB_EPStartXfer+0xaa4>)
 8007dba:	4013      	ands	r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	801a      	strh	r2, [r3, #0]
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4a05      	ldr	r2, [pc, #20]	; (8007de4 <USB_EPStartXfer+0xaa8>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e334      	b.n	8008444 <USB_EPStartXfer+0x1108>
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	00000406 	.word	0x00000406
 8007de0:	ffff83ff 	.word	0xffff83ff
 8007de4:	ffff8000 	.word	0xffff8000
 8007de8:	00000402 	.word	0x00000402
 8007dec:	ffff8fbf 	.word	0xffff8fbf
 8007df0:	ffff8080 	.word	0xffff8080
 8007df4:	1d7b      	adds	r3, r7, #5
 8007df6:	33ff      	adds	r3, #255	; 0xff
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8007dfc:	d81c      	bhi.n	8007e38 <USB_EPStartXfer+0xafc>
 8007dfe:	1d7b      	adds	r3, r7, #5
 8007e00:	33ff      	adds	r3, #255	; 0xff
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	085b      	lsrs	r3, r3, #1
 8007e06:	21e8      	movs	r1, #232	; 0xe8
 8007e08:	187a      	adds	r2, r7, r1
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	1d7b      	adds	r3, r7, #5
 8007e0e:	33ff      	adds	r3, #255	; 0xff
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2201      	movs	r2, #1
 8007e14:	4013      	ands	r3, r2
 8007e16:	d004      	beq.n	8007e22 <USB_EPStartXfer+0xae6>
 8007e18:	187b      	adds	r3, r7, r1
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	187a      	adds	r2, r7, r1
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	23e8      	movs	r3, #232	; 0xe8
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	029b      	lsls	r3, r3, #10
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	238c      	movs	r3, #140	; 0x8c
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e305      	b.n	8008444 <USB_EPStartXfer+0x1108>
 8007e38:	1d7b      	adds	r3, r7, #5
 8007e3a:	33ff      	adds	r3, #255	; 0xff
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	21e8      	movs	r1, #232	; 0xe8
 8007e42:	187a      	adds	r2, r7, r1
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	1d7b      	adds	r3, r7, #5
 8007e48:	33ff      	adds	r3, #255	; 0xff
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	221f      	movs	r2, #31
 8007e4e:	4013      	ands	r3, r2
 8007e50:	d104      	bne.n	8007e5c <USB_EPStartXfer+0xb20>
 8007e52:	187b      	adds	r3, r7, r1
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	187a      	adds	r2, r7, r1
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	23e8      	movs	r3, #232	; 0xe8
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4aca      	ldr	r2, [pc, #808]	; (8008194 <USB_EPStartXfer+0xe58>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	238c      	movs	r3, #140	; 0x8c
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e2e5      	b.n	8008444 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	78db      	ldrb	r3, [r3, #3]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d000      	beq.n	8007e82 <USB_EPStartXfer+0xb46>
 8007e80:	e16f      	b.n	8008162 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d16f      	bne.n	8007f6a <USB_EPStartXfer+0xc2e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	21ac      	movs	r1, #172	; 0xac
 8007e8e:	187a      	adds	r2, r7, r1
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2250      	movs	r2, #80	; 0x50
 8007e96:	5a9b      	ldrh	r3, [r3, r2]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	189b      	adds	r3, r3, r2
 8007ea2:	187a      	adds	r2, r7, r1
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	00da      	lsls	r2, r3, #3
 8007eac:	187b      	adds	r3, r7, r1
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	18d3      	adds	r3, r2, r3
 8007eb2:	4ab9      	ldr	r2, [pc, #740]	; (8008198 <USB_EPStartXfer+0xe5c>)
 8007eb4:	4694      	mov	ip, r2
 8007eb6:	4463      	add	r3, ip
 8007eb8:	21a8      	movs	r1, #168	; 0xa8
 8007eba:	187a      	adds	r2, r7, r1
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d114      	bne.n	8007ef0 <USB_EPStartXfer+0xbb4>
 8007ec6:	187b      	adds	r3, r7, r1
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	4ab3      	ldr	r2, [pc, #716]	; (800819c <USB_EPStartXfer+0xe60>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4aac      	ldr	r2, [pc, #688]	; (8008194 <USB_EPStartXfer+0xe58>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	e060      	b.n	8007fb2 <USB_EPStartXfer+0xc76>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef6:	d81a      	bhi.n	8007f2e <USB_EPStartXfer+0xbf2>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	21e4      	movs	r1, #228	; 0xe4
 8007f00:	187a      	adds	r2, r7, r1
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <USB_EPStartXfer+0xbdc>
 8007f0e:	187b      	adds	r3, r7, r1
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	187a      	adds	r2, r7, r1
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	23e4      	movs	r3, #228	; 0xe4
 8007f1a:	18fb      	adds	r3, r7, r3
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	23a8      	movs	r3, #168	; 0xa8
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e041      	b.n	8007fb2 <USB_EPStartXfer+0xc76>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	21e4      	movs	r1, #228	; 0xe4
 8007f36:	187a      	adds	r2, r7, r1
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	221f      	movs	r2, #31
 8007f40:	4013      	ands	r3, r2
 8007f42:	d104      	bne.n	8007f4e <USB_EPStartXfer+0xc12>
 8007f44:	187b      	adds	r3, r7, r1
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	187a      	adds	r2, r7, r1
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	23e4      	movs	r3, #228	; 0xe4
 8007f50:	18fb      	adds	r3, r7, r3
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	029b      	lsls	r3, r3, #10
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	4a8e      	ldr	r2, [pc, #568]	; (8008194 <USB_EPStartXfer+0xe58>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	23a8      	movs	r3, #168	; 0xa8
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	801a      	strh	r2, [r3, #0]
 8007f68:	e023      	b.n	8007fb2 <USB_EPStartXfer+0xc76>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d11f      	bne.n	8007fb2 <USB_EPStartXfer+0xc76>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	21b4      	movs	r1, #180	; 0xb4
 8007f76:	187a      	adds	r2, r7, r1
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2250      	movs	r2, #80	; 0x50
 8007f7e:	5a9b      	ldrh	r3, [r3, r2]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	001a      	movs	r2, r3
 8007f84:	187b      	adds	r3, r7, r1
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	187a      	adds	r2, r7, r1
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	00da      	lsls	r2, r3, #3
 8007f94:	187b      	adds	r3, r7, r1
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	4a7f      	ldr	r2, [pc, #508]	; (8008198 <USB_EPStartXfer+0xe5c>)
 8007f9c:	4694      	mov	ip, r2
 8007f9e:	4463      	add	r3, ip
 8007fa0:	21b0      	movs	r1, #176	; 0xb0
 8007fa2:	187a      	adds	r2, r7, r1
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	187b      	adds	r3, r7, r1
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	801a      	strh	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	22a4      	movs	r2, #164	; 0xa4
 8007fb6:	18ba      	adds	r2, r7, r2
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d16f      	bne.n	80080a2 <USB_EPStartXfer+0xd66>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	219c      	movs	r1, #156	; 0x9c
 8007fc6:	187a      	adds	r2, r7, r1
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2250      	movs	r2, #80	; 0x50
 8007fce:	5a9b      	ldrh	r3, [r3, r2]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	001a      	movs	r2, r3
 8007fd4:	187b      	adds	r3, r7, r1
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	189b      	adds	r3, r3, r2
 8007fda:	187a      	adds	r2, r7, r1
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	00da      	lsls	r2, r3, #3
 8007fe4:	187b      	adds	r3, r7, r1
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	18d3      	adds	r3, r2, r3
 8007fea:	4a6d      	ldr	r2, [pc, #436]	; (80081a0 <USB_EPStartXfer+0xe64>)
 8007fec:	4694      	mov	ip, r2
 8007fee:	4463      	add	r3, ip
 8007ff0:	2198      	movs	r1, #152	; 0x98
 8007ff2:	187a      	adds	r2, r7, r1
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d114      	bne.n	8008028 <USB_EPStartXfer+0xcec>
 8007ffe:	187b      	adds	r3, r7, r1
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	4a65      	ldr	r2, [pc, #404]	; (800819c <USB_EPStartXfer+0xe60>)
 8008008:	4013      	ands	r3, r2
 800800a:	b29a      	uxth	r2, r3
 800800c:	187b      	adds	r3, r7, r1
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	187b      	adds	r3, r7, r1
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	4a5e      	ldr	r2, [pc, #376]	; (8008194 <USB_EPStartXfer+0xe58>)
 800801c:	4313      	orrs	r3, r2
 800801e:	b29a      	uxth	r2, r3
 8008020:	187b      	adds	r3, r7, r1
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e05d      	b.n	80080e4 <USB_EPStartXfer+0xda8>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b3e      	cmp	r3, #62	; 0x3e
 800802e:	d81a      	bhi.n	8008066 <USB_EPStartXfer+0xd2a>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	21e0      	movs	r1, #224	; 0xe0
 8008038:	187a      	adds	r2, r7, r1
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2201      	movs	r2, #1
 8008042:	4013      	ands	r3, r2
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0xd14>
 8008046:	187b      	adds	r3, r7, r1
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	187a      	adds	r2, r7, r1
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	23e0      	movs	r3, #224	; 0xe0
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	029b      	lsls	r3, r3, #10
 800805a:	b29a      	uxth	r2, r3
 800805c:	2398      	movs	r3, #152	; 0x98
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e03e      	b.n	80080e4 <USB_EPStartXfer+0xda8>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	21e0      	movs	r1, #224	; 0xe0
 800806e:	187a      	adds	r2, r7, r1
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	221f      	movs	r2, #31
 8008078:	4013      	ands	r3, r2
 800807a:	d104      	bne.n	8008086 <USB_EPStartXfer+0xd4a>
 800807c:	187b      	adds	r3, r7, r1
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	187a      	adds	r2, r7, r1
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	23e0      	movs	r3, #224	; 0xe0
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	029b      	lsls	r3, r3, #10
 8008090:	b29b      	uxth	r3, r3
 8008092:	4a40      	ldr	r2, [pc, #256]	; (8008194 <USB_EPStartXfer+0xe58>)
 8008094:	4313      	orrs	r3, r2
 8008096:	b29a      	uxth	r2, r3
 8008098:	2398      	movs	r3, #152	; 0x98
 800809a:	18fb      	adds	r3, r7, r3
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	e020      	b.n	80080e4 <USB_EPStartXfer+0xda8>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d11c      	bne.n	80080e4 <USB_EPStartXfer+0xda8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2250      	movs	r2, #80	; 0x50
 80080ae:	5a9b      	ldrh	r3, [r3, r2]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	001a      	movs	r2, r3
 80080b4:	21a4      	movs	r1, #164	; 0xa4
 80080b6:	187b      	adds	r3, r7, r1
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	189b      	adds	r3, r3, r2
 80080bc:	187a      	adds	r2, r7, r1
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	00da      	lsls	r2, r3, #3
 80080c6:	187b      	adds	r3, r7, r1
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	4a34      	ldr	r2, [pc, #208]	; (80081a0 <USB_EPStartXfer+0xe64>)
 80080ce:	4694      	mov	ip, r2
 80080d0:	4463      	add	r3, ip
 80080d2:	21a0      	movs	r1, #160	; 0xa0
 80080d4:	187a      	adds	r2, r7, r1
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	187b      	adds	r3, r7, r1
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d100      	bne.n	80080ee <USB_EPStartXfer+0xdb2>
 80080ec:	e1aa      	b.n	8008444 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	18d2      	adds	r2, r2, r3
 80080f8:	2196      	movs	r1, #150	; 0x96
 80080fa:	187b      	adds	r3, r7, r1
 80080fc:	8812      	ldrh	r2, [r2, #0]
 80080fe:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008100:	187b      	adds	r3, r7, r1
 8008102:	881a      	ldrh	r2, [r3, #0]
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	01db      	lsls	r3, r3, #7
 8008108:	4013      	ands	r3, r2
 800810a:	d004      	beq.n	8008116 <USB_EPStartXfer+0xdda>
 800810c:	187b      	adds	r3, r7, r1
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	4013      	ands	r3, r2
 8008114:	d10d      	bne.n	8008132 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008116:	2196      	movs	r1, #150	; 0x96
 8008118:	187b      	adds	r3, r7, r1
 800811a:	881a      	ldrh	r2, [r3, #0]
 800811c:	2380      	movs	r3, #128	; 0x80
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008122:	d000      	beq.n	8008126 <USB_EPStartXfer+0xdea>
 8008124:	e18e      	b.n	8008444 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008126:	187b      	adds	r3, r7, r1
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	2240      	movs	r2, #64	; 0x40
 800812c:	4013      	ands	r3, r2
 800812e:	d000      	beq.n	8008132 <USB_EPStartXfer+0xdf6>
 8008130:	e188      	b.n	8008444 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29a      	uxth	r2, r3
 8008140:	2094      	movs	r0, #148	; 0x94
 8008142:	183b      	adds	r3, r7, r0
 8008144:	4917      	ldr	r1, [pc, #92]	; (80081a4 <USB_EPStartXfer+0xe68>)
 8008146:	400a      	ands	r2, r1
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	18d3      	adds	r3, r2, r3
 8008154:	183a      	adds	r2, r7, r0
 8008156:	8812      	ldrh	r2, [r2, #0]
 8008158:	4913      	ldr	r1, [pc, #76]	; (80081a8 <USB_EPStartXfer+0xe6c>)
 800815a:	430a      	orrs	r2, r1
 800815c:	b292      	uxth	r2, r2
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e170      	b.n	8008444 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d000      	beq.n	800816c <USB_EPStartXfer+0xe30>
 800816a:	e169      	b.n	8008440 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	429a      	cmp	r2, r3
 8008176:	d919      	bls.n	80081ac <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	1d7a      	adds	r2, r7, #5
 800817e:	32ff      	adds	r2, #255	; 0xff
 8008180:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	1d7b      	adds	r3, r7, #5
 8008188:	33ff      	adds	r3, #255	; 0xff
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	1ad2      	subs	r2, r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	619a      	str	r2, [r3, #24]
 8008192:	e013      	b.n	80081bc <USB_EPStartXfer+0xe80>
 8008194:	ffff8000 	.word	0xffff8000
 8008198:	00000402 	.word	0x00000402
 800819c:	ffff83ff 	.word	0xffff83ff
 80081a0:	00000406 	.word	0x00000406
 80081a4:	ffff8f8f 	.word	0xffff8f8f
 80081a8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	1d7a      	adds	r2, r7, #5
 80081b2:	32ff      	adds	r2, #255	; 0xff
 80081b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d000      	beq.n	80081c6 <USB_EPStartXfer+0xe8a>
 80081c4:	e075      	b.n	80082b2 <USB_EPStartXfer+0xf76>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	21cc      	movs	r1, #204	; 0xcc
 80081ca:	187a      	adds	r2, r7, r1
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2250      	movs	r2, #80	; 0x50
 80081d2:	5a9b      	ldrh	r3, [r3, r2]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	001a      	movs	r2, r3
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	187a      	adds	r2, r7, r1
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	00da      	lsls	r2, r3, #3
 80081e8:	187b      	adds	r3, r7, r1
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	18d3      	adds	r3, r2, r3
 80081ee:	4aaa      	ldr	r2, [pc, #680]	; (8008498 <USB_EPStartXfer+0x115c>)
 80081f0:	4694      	mov	ip, r2
 80081f2:	4463      	add	r3, ip
 80081f4:	21c8      	movs	r1, #200	; 0xc8
 80081f6:	187a      	adds	r2, r7, r1
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	1d7b      	adds	r3, r7, #5
 80081fc:	33ff      	adds	r3, #255	; 0xff
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d114      	bne.n	800822e <USB_EPStartXfer+0xef2>
 8008204:	187b      	adds	r3, r7, r1
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	4aa3      	ldr	r2, [pc, #652]	; (800849c <USB_EPStartXfer+0x1160>)
 800820e:	4013      	ands	r3, r2
 8008210:	b29a      	uxth	r2, r3
 8008212:	187b      	adds	r3, r7, r1
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	187b      	adds	r3, r7, r1
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	4a9f      	ldr	r2, [pc, #636]	; (80084a0 <USB_EPStartXfer+0x1164>)
 8008222:	4313      	orrs	r3, r2
 8008224:	b29a      	uxth	r2, r3
 8008226:	187b      	adds	r3, r7, r1
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e066      	b.n	80082fc <USB_EPStartXfer+0xfc0>
 800822e:	1d7b      	adds	r3, r7, #5
 8008230:	33ff      	adds	r3, #255	; 0xff
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b3e      	cmp	r3, #62	; 0x3e
 8008236:	d81c      	bhi.n	8008272 <USB_EPStartXfer+0xf36>
 8008238:	1d7b      	adds	r3, r7, #5
 800823a:	33ff      	adds	r3, #255	; 0xff
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	21dc      	movs	r1, #220	; 0xdc
 8008242:	187a      	adds	r2, r7, r1
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	1d7b      	adds	r3, r7, #5
 8008248:	33ff      	adds	r3, #255	; 0xff
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2201      	movs	r2, #1
 800824e:	4013      	ands	r3, r2
 8008250:	d004      	beq.n	800825c <USB_EPStartXfer+0xf20>
 8008252:	187b      	adds	r3, r7, r1
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	187a      	adds	r2, r7, r1
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	23dc      	movs	r3, #220	; 0xdc
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	029b      	lsls	r3, r3, #10
 8008266:	b29a      	uxth	r2, r3
 8008268:	23c8      	movs	r3, #200	; 0xc8
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e044      	b.n	80082fc <USB_EPStartXfer+0xfc0>
 8008272:	1d7b      	adds	r3, r7, #5
 8008274:	33ff      	adds	r3, #255	; 0xff
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	21dc      	movs	r1, #220	; 0xdc
 800827c:	187a      	adds	r2, r7, r1
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	1d7b      	adds	r3, r7, #5
 8008282:	33ff      	adds	r3, #255	; 0xff
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	221f      	movs	r2, #31
 8008288:	4013      	ands	r3, r2
 800828a:	d104      	bne.n	8008296 <USB_EPStartXfer+0xf5a>
 800828c:	187b      	adds	r3, r7, r1
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	187a      	adds	r2, r7, r1
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	23dc      	movs	r3, #220	; 0xdc
 8008298:	18fb      	adds	r3, r7, r3
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4a7f      	ldr	r2, [pc, #508]	; (80084a0 <USB_EPStartXfer+0x1164>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	23c8      	movs	r3, #200	; 0xc8
 80082aa:	18fb      	adds	r3, r7, r3
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e024      	b.n	80082fc <USB_EPStartXfer+0xfc0>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d120      	bne.n	80082fc <USB_EPStartXfer+0xfc0>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	21d4      	movs	r1, #212	; 0xd4
 80082be:	187a      	adds	r2, r7, r1
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2250      	movs	r2, #80	; 0x50
 80082c6:	5a9b      	ldrh	r3, [r3, r2]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	001a      	movs	r2, r3
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	189b      	adds	r3, r3, r2
 80082d2:	187a      	adds	r2, r7, r1
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	00da      	lsls	r2, r3, #3
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	18d3      	adds	r3, r2, r3
 80082e2:	4a6d      	ldr	r2, [pc, #436]	; (8008498 <USB_EPStartXfer+0x115c>)
 80082e4:	4694      	mov	ip, r2
 80082e6:	4463      	add	r3, ip
 80082e8:	21d0      	movs	r1, #208	; 0xd0
 80082ea:	187a      	adds	r2, r7, r1
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	1d7b      	adds	r3, r7, #5
 80082f0:	33ff      	adds	r3, #255	; 0xff
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	187b      	adds	r3, r7, r1
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	22c4      	movs	r2, #196	; 0xc4
 8008300:	18ba      	adds	r2, r7, r2
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d000      	beq.n	800830e <USB_EPStartXfer+0xfd2>
 800830c:	e075      	b.n	80083fa <USB_EPStartXfer+0x10be>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	21bc      	movs	r1, #188	; 0xbc
 8008312:	187a      	adds	r2, r7, r1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2250      	movs	r2, #80	; 0x50
 800831a:	5a9b      	ldrh	r3, [r3, r2]
 800831c:	b29b      	uxth	r3, r3
 800831e:	001a      	movs	r2, r3
 8008320:	187b      	adds	r3, r7, r1
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	189b      	adds	r3, r3, r2
 8008326:	187a      	adds	r2, r7, r1
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	00da      	lsls	r2, r3, #3
 8008330:	187b      	adds	r3, r7, r1
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	18d3      	adds	r3, r2, r3
 8008336:	4a5b      	ldr	r2, [pc, #364]	; (80084a4 <USB_EPStartXfer+0x1168>)
 8008338:	4694      	mov	ip, r2
 800833a:	4463      	add	r3, ip
 800833c:	21b8      	movs	r1, #184	; 0xb8
 800833e:	187a      	adds	r2, r7, r1
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	1d7b      	adds	r3, r7, #5
 8008344:	33ff      	adds	r3, #255	; 0xff
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d114      	bne.n	8008376 <USB_EPStartXfer+0x103a>
 800834c:	187b      	adds	r3, r7, r1
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	4a51      	ldr	r2, [pc, #324]	; (800849c <USB_EPStartXfer+0x1160>)
 8008356:	4013      	ands	r3, r2
 8008358:	b29a      	uxth	r2, r3
 800835a:	187b      	adds	r3, r7, r1
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	801a      	strh	r2, [r3, #0]
 8008360:	187b      	adds	r3, r7, r1
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	4a4d      	ldr	r2, [pc, #308]	; (80084a0 <USB_EPStartXfer+0x1164>)
 800836a:	4313      	orrs	r3, r2
 800836c:	b29a      	uxth	r2, r3
 800836e:	187b      	adds	r3, r7, r1
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e066      	b.n	8008444 <USB_EPStartXfer+0x1108>
 8008376:	1d7b      	adds	r3, r7, #5
 8008378:	33ff      	adds	r3, #255	; 0xff
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b3e      	cmp	r3, #62	; 0x3e
 800837e:	d81c      	bhi.n	80083ba <USB_EPStartXfer+0x107e>
 8008380:	1d7b      	adds	r3, r7, #5
 8008382:	33ff      	adds	r3, #255	; 0xff
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	21d8      	movs	r1, #216	; 0xd8
 800838a:	187a      	adds	r2, r7, r1
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	1d7b      	adds	r3, r7, #5
 8008390:	33ff      	adds	r3, #255	; 0xff
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2201      	movs	r2, #1
 8008396:	4013      	ands	r3, r2
 8008398:	d004      	beq.n	80083a4 <USB_EPStartXfer+0x1068>
 800839a:	187b      	adds	r3, r7, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3301      	adds	r3, #1
 80083a0:	187a      	adds	r2, r7, r1
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	23d8      	movs	r3, #216	; 0xd8
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	23b8      	movs	r3, #184	; 0xb8
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	e044      	b.n	8008444 <USB_EPStartXfer+0x1108>
 80083ba:	1d7b      	adds	r3, r7, #5
 80083bc:	33ff      	adds	r3, #255	; 0xff
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	21d8      	movs	r1, #216	; 0xd8
 80083c4:	187a      	adds	r2, r7, r1
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	1d7b      	adds	r3, r7, #5
 80083ca:	33ff      	adds	r3, #255	; 0xff
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	221f      	movs	r2, #31
 80083d0:	4013      	ands	r3, r2
 80083d2:	d104      	bne.n	80083de <USB_EPStartXfer+0x10a2>
 80083d4:	187b      	adds	r3, r7, r1
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	187a      	adds	r2, r7, r1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	23d8      	movs	r3, #216	; 0xd8
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4a2d      	ldr	r2, [pc, #180]	; (80084a0 <USB_EPStartXfer+0x1164>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	23b8      	movs	r3, #184	; 0xb8
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e024      	b.n	8008444 <USB_EPStartXfer+0x1108>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d120      	bne.n	8008444 <USB_EPStartXfer+0x1108>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2250      	movs	r2, #80	; 0x50
 8008406:	5a9b      	ldrh	r3, [r3, r2]
 8008408:	b29b      	uxth	r3, r3
 800840a:	001a      	movs	r2, r3
 800840c:	21c4      	movs	r1, #196	; 0xc4
 800840e:	187b      	adds	r3, r7, r1
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	189b      	adds	r3, r3, r2
 8008414:	187a      	adds	r2, r7, r1
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	00da      	lsls	r2, r3, #3
 800841e:	187b      	adds	r3, r7, r1
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	18d3      	adds	r3, r2, r3
 8008424:	4a1f      	ldr	r2, [pc, #124]	; (80084a4 <USB_EPStartXfer+0x1168>)
 8008426:	4694      	mov	ip, r2
 8008428:	4463      	add	r3, ip
 800842a:	21c0      	movs	r1, #192	; 0xc0
 800842c:	187a      	adds	r2, r7, r1
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	1d7b      	adds	r3, r7, #5
 8008432:	33ff      	adds	r3, #255	; 0xff
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	b29a      	uxth	r2, r3
 8008438:	187b      	adds	r3, r7, r1
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e001      	b.n	8008444 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e025      	b.n	8008490 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29a      	uxth	r2, r3
 8008452:	208a      	movs	r0, #138	; 0x8a
 8008454:	183b      	adds	r3, r7, r0
 8008456:	4914      	ldr	r1, [pc, #80]	; (80084a8 <USB_EPStartXfer+0x116c>)
 8008458:	400a      	ands	r2, r1
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	183b      	adds	r3, r7, r0
 800845e:	183a      	adds	r2, r7, r0
 8008460:	8812      	ldrh	r2, [r2, #0]
 8008462:	2180      	movs	r1, #128	; 0x80
 8008464:	0149      	lsls	r1, r1, #5
 8008466:	404a      	eors	r2, r1
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	183b      	adds	r3, r7, r0
 800846c:	183a      	adds	r2, r7, r0
 800846e:	8812      	ldrh	r2, [r2, #0]
 8008470:	2180      	movs	r1, #128	; 0x80
 8008472:	0189      	lsls	r1, r1, #6
 8008474:	404a      	eors	r2, r1
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	18d3      	adds	r3, r2, r3
 8008482:	183a      	adds	r2, r7, r0
 8008484:	8812      	ldrh	r2, [r2, #0]
 8008486:	4909      	ldr	r1, [pc, #36]	; (80084ac <USB_EPStartXfer+0x1170>)
 8008488:	430a      	orrs	r2, r1
 800848a:	b292      	uxth	r2, r2
 800848c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	0018      	movs	r0, r3
 8008492:	46bd      	mov	sp, r7
 8008494:	b043      	add	sp, #268	; 0x10c
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	00000402 	.word	0x00000402
 800849c:	ffff83ff 	.word	0xffff83ff
 80084a0:	ffff8000 	.word	0xffff8000
 80084a4:	00000406 	.word	0x00000406
 80084a8:	ffffbf8f 	.word	0xffffbf8f
 80084ac:	ffff8080 	.word	0xffff8080

080084b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01d      	beq.n	80084fe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	18d3      	adds	r3, r2, r3
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	200c      	movs	r0, #12
 80084d2:	183b      	adds	r3, r7, r0
 80084d4:	491b      	ldr	r1, [pc, #108]	; (8008544 <USB_EPSetStall+0x94>)
 80084d6:	400a      	ands	r2, r1
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	183b      	adds	r3, r7, r0
 80084dc:	183a      	adds	r2, r7, r0
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	2110      	movs	r1, #16
 80084e2:	404a      	eors	r2, r1
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	18d3      	adds	r3, r2, r3
 80084f0:	183a      	adds	r2, r7, r0
 80084f2:	8812      	ldrh	r2, [r2, #0]
 80084f4:	4914      	ldr	r1, [pc, #80]	; (8008548 <USB_EPSetStall+0x98>)
 80084f6:	430a      	orrs	r2, r1
 80084f8:	b292      	uxth	r2, r2
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e01d      	b.n	800853a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	18d3      	adds	r3, r2, r3
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29a      	uxth	r2, r3
 800850c:	200e      	movs	r0, #14
 800850e:	183b      	adds	r3, r7, r0
 8008510:	490e      	ldr	r1, [pc, #56]	; (800854c <USB_EPSetStall+0x9c>)
 8008512:	400a      	ands	r2, r1
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	183b      	adds	r3, r7, r0
 8008518:	183a      	adds	r2, r7, r0
 800851a:	8812      	ldrh	r2, [r2, #0]
 800851c:	2180      	movs	r1, #128	; 0x80
 800851e:	0149      	lsls	r1, r1, #5
 8008520:	404a      	eors	r2, r1
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	18d3      	adds	r3, r2, r3
 800852e:	183a      	adds	r2, r7, r0
 8008530:	8812      	ldrh	r2, [r2, #0]
 8008532:	4905      	ldr	r1, [pc, #20]	; (8008548 <USB_EPSetStall+0x98>)
 8008534:	430a      	orrs	r2, r1
 8008536:	b292      	uxth	r2, r2
 8008538:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b004      	add	sp, #16
 8008542:	bd80      	pop	{r7, pc}
 8008544:	ffff8fbf 	.word	0xffff8fbf
 8008548:	ffff8080 	.word	0xffff8080
 800854c:	ffffbf8f 	.word	0xffffbf8f

08008550 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	7b1b      	ldrb	r3, [r3, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d000      	beq.n	8008564 <USB_EPClearStall+0x14>
 8008562:	e095      	b.n	8008690 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d046      	beq.n	80085fa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	18d2      	adds	r2, r2, r3
 8008576:	2110      	movs	r1, #16
 8008578:	187b      	adds	r3, r7, r1
 800857a:	8812      	ldrh	r2, [r2, #0]
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	187b      	adds	r3, r7, r1
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	2240      	movs	r2, #64	; 0x40
 8008584:	4013      	ands	r3, r2
 8008586:	d016      	beq.n	80085b6 <USB_EPClearStall+0x66>
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	18d3      	adds	r3, r2, r3
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	b29a      	uxth	r2, r3
 8008596:	200e      	movs	r0, #14
 8008598:	183b      	adds	r3, r7, r0
 800859a:	4940      	ldr	r1, [pc, #256]	; (800869c <USB_EPClearStall+0x14c>)
 800859c:	400a      	ands	r2, r1
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	18d3      	adds	r3, r2, r3
 80085aa:	183a      	adds	r2, r7, r0
 80085ac:	8812      	ldrh	r2, [r2, #0]
 80085ae:	493c      	ldr	r1, [pc, #240]	; (80086a0 <USB_EPClearStall+0x150>)
 80085b0:	430a      	orrs	r2, r1
 80085b2:	b292      	uxth	r2, r2
 80085b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d068      	beq.n	8008690 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	200c      	movs	r0, #12
 80085ce:	183b      	adds	r3, r7, r0
 80085d0:	4934      	ldr	r1, [pc, #208]	; (80086a4 <USB_EPClearStall+0x154>)
 80085d2:	400a      	ands	r2, r1
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	183b      	adds	r3, r7, r0
 80085d8:	183a      	adds	r2, r7, r0
 80085da:	8812      	ldrh	r2, [r2, #0]
 80085dc:	2120      	movs	r1, #32
 80085de:	404a      	eors	r2, r1
 80085e0:	801a      	strh	r2, [r3, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	18d3      	adds	r3, r2, r3
 80085ec:	183a      	adds	r2, r7, r0
 80085ee:	8812      	ldrh	r2, [r2, #0]
 80085f0:	492d      	ldr	r1, [pc, #180]	; (80086a8 <USB_EPClearStall+0x158>)
 80085f2:	430a      	orrs	r2, r1
 80085f4:	b292      	uxth	r2, r2
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e04a      	b.n	8008690 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	18d2      	adds	r2, r2, r3
 8008604:	2116      	movs	r1, #22
 8008606:	187b      	adds	r3, r7, r1
 8008608:	8812      	ldrh	r2, [r2, #0]
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	187b      	adds	r3, r7, r1
 800860e:	881a      	ldrh	r2, [r3, #0]
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	4013      	ands	r3, r2
 8008616:	d016      	beq.n	8008646 <USB_EPClearStall+0xf6>
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29a      	uxth	r2, r3
 8008626:	2014      	movs	r0, #20
 8008628:	183b      	adds	r3, r7, r0
 800862a:	491c      	ldr	r1, [pc, #112]	; (800869c <USB_EPClearStall+0x14c>)
 800862c:	400a      	ands	r2, r1
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	18d3      	adds	r3, r2, r3
 800863a:	183a      	adds	r2, r7, r0
 800863c:	8812      	ldrh	r2, [r2, #0]
 800863e:	491b      	ldr	r1, [pc, #108]	; (80086ac <USB_EPClearStall+0x15c>)
 8008640:	430a      	orrs	r2, r1
 8008642:	b292      	uxth	r2, r2
 8008644:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	18d3      	adds	r3, r2, r3
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29a      	uxth	r2, r3
 8008654:	2012      	movs	r0, #18
 8008656:	183b      	adds	r3, r7, r0
 8008658:	4915      	ldr	r1, [pc, #84]	; (80086b0 <USB_EPClearStall+0x160>)
 800865a:	400a      	ands	r2, r1
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	183b      	adds	r3, r7, r0
 8008660:	183a      	adds	r2, r7, r0
 8008662:	8812      	ldrh	r2, [r2, #0]
 8008664:	2180      	movs	r1, #128	; 0x80
 8008666:	0149      	lsls	r1, r1, #5
 8008668:	404a      	eors	r2, r1
 800866a:	801a      	strh	r2, [r3, #0]
 800866c:	183b      	adds	r3, r7, r0
 800866e:	183a      	adds	r2, r7, r0
 8008670:	8812      	ldrh	r2, [r2, #0]
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	0189      	lsls	r1, r1, #6
 8008676:	404a      	eors	r2, r1
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	18d3      	adds	r3, r2, r3
 8008684:	183a      	adds	r2, r7, r0
 8008686:	8812      	ldrh	r2, [r2, #0]
 8008688:	4907      	ldr	r1, [pc, #28]	; (80086a8 <USB_EPClearStall+0x158>)
 800868a:	430a      	orrs	r2, r1
 800868c:	b292      	uxth	r2, r2
 800868e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	0018      	movs	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	b006      	add	sp, #24
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	ffff8f8f 	.word	0xffff8f8f
 80086a0:	ffff80c0 	.word	0xffff80c0
 80086a4:	ffff8fbf 	.word	0xffff8fbf
 80086a8:	ffff8080 	.word	0xffff8080
 80086ac:	ffffc080 	.word	0xffffc080
 80086b0:	ffffbf8f 	.word	0xffffbf8f

080086b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	000a      	movs	r2, r1
 80086be:	1cfb      	adds	r3, r7, #3
 80086c0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80086c2:	1cfb      	adds	r3, r7, #3
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	224c      	movs	r2, #76	; 0x4c
 80086ce:	2180      	movs	r1, #128	; 0x80
 80086d0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	0018      	movs	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b002      	add	sp, #8
 80086da:	bd80      	pop	{r7, pc}

080086dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2258      	movs	r2, #88	; 0x58
 80086e8:	5a9b      	ldrh	r3, [r3, r2]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4a05      	ldr	r2, [pc, #20]	; (8008704 <USB_DevConnect+0x28>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b299      	uxth	r1, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2258      	movs	r2, #88	; 0x58
 80086f6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	0018      	movs	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b002      	add	sp, #8
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	ffff8000 	.word	0xffff8000

08008708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2244      	movs	r2, #68	; 0x44
 8008714:	5a9b      	ldrh	r3, [r3, r2]
 8008716:	b29b      	uxth	r3, r3
 8008718:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800871a:	68fb      	ldr	r3, [r7, #12]
}
 800871c:	0018      	movs	r0, r3
 800871e:	46bd      	mov	sp, r7
 8008720:	b004      	add	sp, #16
 8008722:	bd80      	pop	{r7, pc}

08008724 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	; 0x30
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	0019      	movs	r1, r3
 8008730:	1dbb      	adds	r3, r7, #6
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	1c0a      	adds	r2, r1, #0
 8008738:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800873a:	1d3b      	adds	r3, r7, #4
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800874c:	1dbb      	adds	r3, r7, #6
 800874e:	881a      	ldrh	r2, [r3, #0]
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	2280      	movs	r2, #128	; 0x80
 8008756:	00d2      	lsls	r2, r2, #3
 8008758:	4694      	mov	ip, r2
 800875a:	4463      	add	r3, ip
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008762:	e01b      	b.n	800879c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	3301      	adds	r3, #1
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	001a      	movs	r2, r3
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	b29a      	uxth	r2, r3
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	3302      	adds	r3, #2
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	3b01      	subs	r3, #1
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e0      	bne.n	8008764 <USB_WritePMA+0x40>
  }
}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	46c0      	nop			; (mov r8, r8)
 80087a6:	46bd      	mov	sp, r7
 80087a8:	b00c      	add	sp, #48	; 0x30
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08a      	sub	sp, #40	; 0x28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	0019      	movs	r1, r3
 80087b8:	1dbb      	adds	r3, r7, #6
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	1d3b      	adds	r3, r7, #4
 80087be:	1c0a      	adds	r2, r1, #0
 80087c0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087d4:	1dbb      	adds	r3, r7, #6
 80087d6:	881a      	ldrh	r2, [r3, #0]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	18d3      	adds	r3, r2, r3
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	00d2      	lsls	r2, r2, #3
 80087e0:	4694      	mov	ip, r2
 80087e2:	4463      	add	r3, ip
 80087e4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	e018      	b.n	800881e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	3302      	adds	r3, #2
 80087f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b2da      	uxtb	r2, r3
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3301      	adds	r3, #1
 8008816:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	3b01      	subs	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e3      	bne.n	80087ec <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	4013      	ands	r3, r2
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	b2da      	uxtb	r2, r3
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	701a      	strb	r2, [r3, #0]
  }
}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	46bd      	mov	sp, r7
 8008846:	b00a      	add	sp, #40	; 0x28
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	000a      	movs	r2, r1
 8008854:	1cfb      	adds	r3, r7, #3
 8008856:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008858:	230f      	movs	r3, #15
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7c1b      	ldrb	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d116      	bne.n	8008896 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008868:	2380      	movs	r3, #128	; 0x80
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	2181      	movs	r1, #129	; 0x81
 8008872:	f002 f8b4 	bl	800a9de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800887c:	2380      	movs	r3, #128	; 0x80
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	2101      	movs	r1, #1
 8008886:	f002 f8aa 	bl	800a9de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	23b6      	movs	r3, #182	; 0xb6
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	2101      	movs	r1, #1
 8008892:	50d1      	str	r1, [r2, r3]
 8008894:	e013      	b.n	80088be <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	2202      	movs	r2, #2
 800889c:	2181      	movs	r1, #129	; 0x81
 800889e:	f002 f89e 	bl	800a9de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	2202      	movs	r2, #2
 80088ae:	2101      	movs	r1, #1
 80088b0:	f002 f895 	bl	800a9de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	23b6      	movs	r3, #182	; 0xb6
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	2101      	movs	r1, #1
 80088bc:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	2308      	movs	r3, #8
 80088c2:	2203      	movs	r2, #3
 80088c4:	2182      	movs	r1, #130	; 0x82
 80088c6:	f002 f88a 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088d0:	2387      	movs	r3, #135	; 0x87
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	0018      	movs	r0, r3
 80088d6:	f002 fa1b 	bl	800ad10 <USBD_static_malloc>
 80088da:	0001      	movs	r1, r0
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	23ae      	movs	r3, #174	; 0xae
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	23ae      	movs	r3, #174	; 0xae
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80088f0:	230f      	movs	r3, #15
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	2201      	movs	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	e02c      	b.n	8008954 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	23ae      	movs	r3, #174	; 0xae
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	58d3      	ldr	r3, [r2, r3]
 8008902:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	23af      	movs	r3, #175	; 0xaf
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	58d3      	ldr	r3, [r2, r3]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	2385      	movs	r3, #133	; 0x85
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	2100      	movs	r1, #0
 8008918:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	2386      	movs	r3, #134	; 0x86
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	2100      	movs	r1, #0
 8008922:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7c1b      	ldrb	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	2381      	movs	r3, #129	; 0x81
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	58d2      	ldr	r2, [r2, r3]
 8008934:	2380      	movs	r3, #128	; 0x80
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	2101      	movs	r1, #1
 800893c:	f002 f99a 	bl	800ac74 <USBD_LL_PrepareReceive>
 8008940:	e008      	b.n	8008954 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	2381      	movs	r3, #129	; 0x81
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	58d2      	ldr	r2, [r2, r3]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	2340      	movs	r3, #64	; 0x40
 800894e:	2101      	movs	r1, #1
 8008950:	f002 f990 	bl	800ac74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008954:	230f      	movs	r3, #15
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	781b      	ldrb	r3, [r3, #0]
}
 800895a:	0018      	movs	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	b004      	add	sp, #16
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	000a      	movs	r2, r1
 800896c:	1cfb      	adds	r3, r7, #3
 800896e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008970:	230f      	movs	r3, #15
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2181      	movs	r1, #129	; 0x81
 800897c:	0018      	movs	r0, r3
 800897e:	f002 f865 	bl	800aa4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2101      	movs	r1, #1
 800898c:	0018      	movs	r0, r3
 800898e:	f002 f85d 	bl	800aa4c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	23b6      	movs	r3, #182	; 0xb6
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	2100      	movs	r1, #0
 800899a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2182      	movs	r1, #130	; 0x82
 80089a0:	0018      	movs	r0, r3
 80089a2:	f002 f853 	bl	800aa4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	23ae      	movs	r3, #174	; 0xae
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	58d3      	ldr	r3, [r2, r3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d011      	beq.n	80089dc <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	23af      	movs	r3, #175	; 0xaf
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	58d3      	ldr	r3, [r2, r3]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	23ae      	movs	r3, #174	; 0xae
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	58d3      	ldr	r3, [r2, r3]
 80089cc:	0018      	movs	r0, r3
 80089ce:	f002 f9ab 	bl	800ad28 <USBD_static_free>
    pdev->pClassData = NULL;
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	23ae      	movs	r3, #174	; 0xae
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	2100      	movs	r1, #0
 80089da:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80089dc:	230f      	movs	r3, #15
 80089de:	18fb      	adds	r3, r7, r3
 80089e0:	781b      	ldrb	r3, [r3, #0]
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b004      	add	sp, #16
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	23ae      	movs	r3, #174	; 0xae
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	58d3      	ldr	r3, [r2, r3]
 80089fe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a00:	230f      	movs	r3, #15
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008a08:	230c      	movs	r3, #12
 8008a0a:	18fb      	adds	r3, r7, r3
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008a10:	2317      	movs	r3, #23
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	2360      	movs	r3, #96	; 0x60
 8008a20:	4013      	ands	r3, r2
 8008a22:	d03d      	beq.n	8008aa0 <USBD_CDC_Setup+0xb4>
 8008a24:	2b20      	cmp	r3, #32
 8008a26:	d000      	beq.n	8008a2a <USBD_CDC_Setup+0x3e>
 8008a28:	e094      	b.n	8008b54 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88db      	ldrh	r3, [r3, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d02b      	beq.n	8008a8a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da12      	bge.n	8008a62 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	23af      	movs	r3, #175	; 0xaf
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	58d3      	ldr	r3, [r2, r3]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	88d2      	ldrh	r2, [r2, #6]
 8008a50:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a52:	6939      	ldr	r1, [r7, #16]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	88da      	ldrh	r2, [r3, #6]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f001 fbb2 	bl	800a1c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a60:	e083      	b.n	8008b6a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	7859      	ldrb	r1, [r3, #1]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88db      	ldrh	r3, [r3, #6]
 8008a72:	b2d9      	uxtb	r1, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	4a40      	ldr	r2, [pc, #256]	; (8008b78 <USBD_CDC_Setup+0x18c>)
 8008a78:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a7a:	6939      	ldr	r1, [r7, #16]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	88da      	ldrh	r2, [r3, #6]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	0018      	movs	r0, r3
 8008a84:	f001 fbd1 	bl	800a22a <USBD_CtlPrepareRx>
      break;
 8008a88:	e06f      	b.n	8008b6a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	23af      	movs	r3, #175	; 0xaf
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	58d3      	ldr	r3, [r2, r3]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	7850      	ldrb	r0, [r2, #1]
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4798      	blx	r3
      break;
 8008a9e:	e064      	b.n	8008b6a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	2b0b      	cmp	r3, #11
 8008aa6:	d037      	beq.n	8008b18 <USBD_CDC_Setup+0x12c>
 8008aa8:	dc47      	bgt.n	8008b3a <USBD_CDC_Setup+0x14e>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <USBD_CDC_Setup+0xc8>
 8008aae:	2b0a      	cmp	r3, #10
 8008ab0:	d019      	beq.n	8008ae6 <USBD_CDC_Setup+0xfa>
 8008ab2:	e042      	b.n	8008b3a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	23a7      	movs	r3, #167	; 0xa7
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	5cd3      	ldrb	r3, [r2, r3]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d107      	bne.n	8008ad0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ac0:	230c      	movs	r3, #12
 8008ac2:	18f9      	adds	r1, r7, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f001 fb7b 	bl	800a1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ace:	e040      	b.n	8008b52 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	0011      	movs	r1, r2
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f001 faf6 	bl	800a0c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008adc:	2317      	movs	r3, #23
 8008ade:	18fb      	adds	r3, r7, r3
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	701a      	strb	r2, [r3, #0]
          break;
 8008ae4:	e035      	b.n	8008b52 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	23a7      	movs	r3, #167	; 0xa7
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	5cd3      	ldrb	r3, [r2, r3]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d107      	bne.n	8008b02 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008af2:	230f      	movs	r3, #15
 8008af4:	18f9      	adds	r1, r7, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	0018      	movs	r0, r3
 8008afc:	f001 fb62 	bl	800a1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b00:	e027      	b.n	8008b52 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0011      	movs	r1, r2
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f001 fadd 	bl	800a0c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b0e:	2317      	movs	r3, #23
 8008b10:	18fb      	adds	r3, r7, r3
 8008b12:	2202      	movs	r2, #2
 8008b14:	701a      	strb	r2, [r3, #0]
          break;
 8008b16:	e01c      	b.n	8008b52 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	23a7      	movs	r3, #167	; 0xa7
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	5cd3      	ldrb	r3, [r2, r3]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d015      	beq.n	8008b50 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f001 facc 	bl	800a0c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b30:	2317      	movs	r3, #23
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	2202      	movs	r2, #2
 8008b36:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008b38:	e00a      	b.n	8008b50 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	0011      	movs	r1, r2
 8008b40:	0018      	movs	r0, r3
 8008b42:	f001 fac1 	bl	800a0c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b46:	2317      	movs	r3, #23
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	701a      	strb	r2, [r3, #0]
          break;
 8008b4e:	e000      	b.n	8008b52 <USBD_CDC_Setup+0x166>
          break;
 8008b50:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008b52:	e00a      	b.n	8008b6a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0011      	movs	r1, r2
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f001 fab4 	bl	800a0c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b60:	2317      	movs	r3, #23
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	2202      	movs	r2, #2
 8008b66:	701a      	strb	r2, [r3, #0]
      break;
 8008b68:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008b6a:	2317      	movs	r3, #23
 8008b6c:	18fb      	adds	r3, r7, r3
 8008b6e:	781b      	ldrb	r3, [r3, #0]
}
 8008b70:	0018      	movs	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b006      	add	sp, #24
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	00000201 	.word	0x00000201

08008b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	000a      	movs	r2, r1
 8008b86:	1cfb      	adds	r3, r7, #3
 8008b88:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	23ae      	movs	r3, #174	; 0xae
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	58d3      	ldr	r3, [r2, r3]
 8008b92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	23b0      	movs	r3, #176	; 0xb0
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	58d3      	ldr	r3, [r2, r3]
 8008b9c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	23ae      	movs	r3, #174	; 0xae
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	58d3      	ldr	r3, [r2, r3]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d03e      	beq.n	8008c28 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008baa:	1cfb      	adds	r3, r7, #3
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	18cb      	adds	r3, r1, r3
 8008bba:	331c      	adds	r3, #28
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02b      	beq.n	8008c1a <USBD_CDC_DataIn+0x9e>
 8008bc2:	1cfb      	adds	r3, r7, #3
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	0013      	movs	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	189b      	adds	r3, r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	18cb      	adds	r3, r1, r3
 8008bd2:	331c      	adds	r3, #28
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	1cfb      	adds	r3, r7, #3
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	0013      	movs	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	189b      	adds	r3, r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	18cb      	adds	r3, r1, r3
 8008be6:	3338      	adds	r3, #56	; 0x38
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	0019      	movs	r1, r3
 8008bec:	f7f7 fb24 	bl	8000238 <__aeabi_uidivmod>
 8008bf0:	1e0b      	subs	r3, r1, #0
 8008bf2:	d112      	bne.n	8008c1a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bf4:	1cfb      	adds	r3, r7, #3
 8008bf6:	781a      	ldrb	r2, [r3, #0]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	0013      	movs	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	189b      	adds	r3, r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	18cb      	adds	r3, r1, r3
 8008c04:	331c      	adds	r3, #28
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c0a:	1cfb      	adds	r3, r7, #3
 8008c0c:	7819      	ldrb	r1, [r3, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	2300      	movs	r3, #0
 8008c12:	2200      	movs	r2, #0
 8008c14:	f001 fff7 	bl	800ac06 <USBD_LL_Transmit>
 8008c18:	e004      	b.n	8008c24 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	2385      	movs	r3, #133	; 0x85
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	2100      	movs	r1, #0
 8008c22:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e000      	b.n	8008c2a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8008c28:	2302      	movs	r3, #2
  }
}
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	b004      	add	sp, #16
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	000a      	movs	r2, r1
 8008c3c:	1cfb      	adds	r3, r7, #3
 8008c3e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	23ae      	movs	r3, #174	; 0xae
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	58d3      	ldr	r3, [r2, r3]
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c4a:	1cfb      	adds	r3, r7, #3
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	0011      	movs	r1, r2
 8008c52:	0018      	movs	r0, r3
 8008c54:	f002 f845 	bl	800ace2 <USBD_LL_GetRxDataSize>
 8008c58:	0001      	movs	r1, r0
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	2383      	movs	r3, #131	; 0x83
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	23ae      	movs	r3, #174	; 0xae
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	58d3      	ldr	r3, [r2, r3]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	23af      	movs	r3, #175	; 0xaf
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	58d3      	ldr	r3, [r2, r3]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	68f9      	ldr	r1, [r7, #12]
 8008c7a:	2381      	movs	r3, #129	; 0x81
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	58c8      	ldr	r0, [r1, r3]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2183      	movs	r1, #131	; 0x83
 8008c84:	0089      	lsls	r1, r1, #2
 8008c86:	468c      	mov	ip, r1
 8008c88:	4463      	add	r3, ip
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	4790      	blx	r2

    return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
  }
}
 8008c94:	0018      	movs	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b004      	add	sp, #16
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	23ae      	movs	r3, #174	; 0xae
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	58d3      	ldr	r3, [r2, r3]
 8008cac:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	23af      	movs	r3, #175	; 0xaf
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	58d3      	ldr	r3, [r2, r3]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d019      	beq.n	8008cee <USBD_CDC_EP0_RxReady+0x52>
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	5cd3      	ldrb	r3, [r2, r3]
 8008cc2:	2bff      	cmp	r3, #255	; 0xff
 8008cc4:	d013      	beq.n	8008cee <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	23af      	movs	r3, #175	; 0xaf
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	58d3      	ldr	r3, [r2, r3]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	68f9      	ldr	r1, [r7, #12]
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8008cd8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4c06      	ldr	r4, [pc, #24]	; (8008cf8 <USBD_CDC_EP0_RxReady+0x5c>)
 8008cde:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ce0:	b292      	uxth	r2, r2
 8008ce2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	2380      	movs	r3, #128	; 0x80
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	21ff      	movs	r1, #255	; 0xff
 8008cec:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b005      	add	sp, #20
 8008cf6:	bd90      	pop	{r4, r7, pc}
 8008cf8:	00000201 	.word	0x00000201

08008cfc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2243      	movs	r2, #67	; 0x43
 8008d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d0a:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	b002      	add	sp, #8
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000094 	.word	0x20000094

08008d18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2243      	movs	r2, #67	; 0x43
 8008d24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d26:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8008d28:	0018      	movs	r0, r3
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	b002      	add	sp, #8
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000050 	.word	0x20000050

08008d34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2243      	movs	r2, #67	; 0x43
 8008d40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d42:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8008d44:	0018      	movs	r0, r3
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200000d8 	.word	0x200000d8

08008d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d5e:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008d60:	0018      	movs	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	b002      	add	sp, #8
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000000c 	.word	0x2000000c

08008d6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d76:	200f      	movs	r0, #15
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	23af      	movs	r3, #175	; 0xaf
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8008d8e:	183b      	adds	r3, r7, r0
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008d94:	230f      	movs	r3, #15
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	781b      	ldrb	r3, [r3, #0]
}
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b004      	add	sp, #16
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	1dbb      	adds	r3, r7, #6
 8008dae:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	23ae      	movs	r3, #174	; 0xae
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	58d3      	ldr	r3, [r2, r3]
 8008db8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	2382      	movs	r3, #130	; 0x82
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8008dc4:	1dbb      	adds	r3, r7, #6
 8008dc6:	8819      	ldrh	r1, [r3, #0]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	2384      	movs	r3, #132	; 0x84
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b006      	add	sp, #24
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	23ae      	movs	r3, #174	; 0xae
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	58d3      	ldr	r3, [r2, r3]
 8008dec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	2381      	movs	r3, #129	; 0x81
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	b004      	add	sp, #16
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	23ae      	movs	r3, #174	; 0xae
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	58d3      	ldr	r3, [r2, r3]
 8008e12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	23ae      	movs	r3, #174	; 0xae
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	58d3      	ldr	r3, [r2, r3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d022      	beq.n	8008e66 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	2385      	movs	r3, #133	; 0x85
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	58d3      	ldr	r3, [r2, r3]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11a      	bne.n	8008e62 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	2385      	movs	r3, #133	; 0x85
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	2101      	movs	r1, #1
 8008e34:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	2384      	movs	r3, #132	; 0x84
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	58d2      	ldr	r2, [r2, r3]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	2382      	movs	r3, #130	; 0x82
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	2384      	movs	r3, #132	; 0x84
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	000a      	movs	r2, r1
 8008e58:	2181      	movs	r1, #129	; 0x81
 8008e5a:	f001 fed4 	bl	800ac06 <USBD_LL_Transmit>

      return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e002      	b.n	8008e68 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8008e66:	2302      	movs	r3, #2
  }
}
 8008e68:	0018      	movs	r0, r3
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b004      	add	sp, #16
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	23ae      	movs	r3, #174	; 0xae
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	58d3      	ldr	r3, [r2, r3]
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	23ae      	movs	r3, #174	; 0xae
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	58d3      	ldr	r3, [r2, r3]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d019      	beq.n	8008ec2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	2381      	movs	r3, #129	; 0x81
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	58d2      	ldr	r2, [r2, r3]
 8008e9e:	2380      	movs	r3, #128	; 0x80
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	f001 fee5 	bl	800ac74 <USBD_LL_PrepareReceive>
 8008eaa:	e008      	b.n	8008ebe <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	2381      	movs	r3, #129	; 0x81
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	58d2      	ldr	r2, [r2, r3]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	2101      	movs	r1, #1
 8008eba:	f001 fedb 	bl	800ac74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e000      	b.n	8008ec4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8008ec2:	2302      	movs	r3, #2
  }
}
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	b004      	add	sp, #16
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	1dfb      	adds	r3, r7, #7
 8008ed8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e020      	b.n	8008f26 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	23ad      	movs	r3, #173	; 0xad
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	58d3      	ldr	r3, [r2, r3]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	23ad      	movs	r3, #173	; 0xad
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	23ac      	movs	r3, #172	; 0xac
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	23a7      	movs	r3, #167	; 0xa7
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	2101      	movs	r1, #1
 8008f12:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	1dfa      	adds	r2, r7, #7
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f001 fcd4 	bl	800a8cc <USBD_LL_Init>

  return USBD_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	0018      	movs	r0, r3
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b004      	add	sp, #16
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008f38:	200f      	movs	r0, #15
 8008f3a:	183b      	adds	r3, r7, r0
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	23ad      	movs	r3, #173	; 0xad
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008f50:	183b      	adds	r3, r7, r0
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e003      	b.n	8008f60 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f58:	230f      	movs	r3, #15
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008f60:	230f      	movs	r3, #15
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	781b      	ldrb	r3, [r3, #0]
}
 8008f66:	0018      	movs	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	b004      	add	sp, #16
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f001 fd0b 	bl	800a994 <USBD_LL_Start>

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	0018      	movs	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b002      	add	sp, #8
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	0018      	movs	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	b002      	add	sp, #8
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f9a:	b590      	push	{r4, r7, lr}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	000a      	movs	r2, r1
 8008fa4:	1cfb      	adds	r3, r7, #3
 8008fa6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fa8:	240f      	movs	r4, #15
 8008faa:	193b      	adds	r3, r7, r4
 8008fac:	2202      	movs	r2, #2
 8008fae:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	23ad      	movs	r3, #173	; 0xad
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	58d3      	ldr	r3, [r2, r3]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00e      	beq.n	8008fda <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	23ad      	movs	r3, #173	; 0xad
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	58d3      	ldr	r3, [r2, r3]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	1cfa      	adds	r2, r7, #3
 8008fc8:	7811      	ldrb	r1, [r2, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	0010      	movs	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	1e03      	subs	r3, r0, #0
 8008fd2:	d102      	bne.n	8008fda <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8008fd4:	193b      	adds	r3, r7, r4
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8008fda:	230f      	movs	r3, #15
 8008fdc:	18fb      	adds	r3, r7, r3
 8008fde:	781b      	ldrb	r3, [r3, #0]
}
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	b005      	add	sp, #20
 8008fe6:	bd90      	pop	{r4, r7, pc}

08008fe8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	000a      	movs	r2, r1
 8008ff2:	1cfb      	adds	r3, r7, #3
 8008ff4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	23ad      	movs	r3, #173	; 0xad
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	58d3      	ldr	r3, [r2, r3]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	1cfa      	adds	r2, r7, #3
 8009002:	7811      	ldrb	r1, [r2, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	0010      	movs	r0, r2
 8009008:	4798      	blx	r3

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b002      	add	sp, #8
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	22aa      	movs	r2, #170	; 0xaa
 8009022:	0092      	lsls	r2, r2, #2
 8009024:	4694      	mov	ip, r2
 8009026:	4463      	add	r3, ip
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	0011      	movs	r1, r2
 800902c:	0018      	movs	r0, r3
 800902e:	f001 f810 	bl	800a052 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	23a5      	movs	r3, #165	; 0xa5
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	2101      	movs	r1, #1
 800903a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a23      	ldr	r2, [pc, #140]	; (80090cc <USBD_LL_SetupStage+0xb8>)
 8009040:	5a9b      	ldrh	r3, [r3, r2]
 8009042:	0019      	movs	r1, r3
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	23a6      	movs	r3, #166	; 0xa6
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	23aa      	movs	r3, #170	; 0xaa
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	5cd3      	ldrb	r3, [r2, r3]
 8009054:	001a      	movs	r2, r3
 8009056:	231f      	movs	r3, #31
 8009058:	4013      	ands	r3, r2
 800905a:	2b02      	cmp	r3, #2
 800905c:	d019      	beq.n	8009092 <USBD_LL_SetupStage+0x7e>
 800905e:	d822      	bhi.n	80090a6 <USBD_LL_SetupStage+0x92>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <USBD_LL_SetupStage+0x56>
 8009064:	2b01      	cmp	r3, #1
 8009066:	d00a      	beq.n	800907e <USBD_LL_SetupStage+0x6a>
 8009068:	e01d      	b.n	80090a6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	22aa      	movs	r2, #170	; 0xaa
 800906e:	0092      	lsls	r2, r2, #2
 8009070:	189a      	adds	r2, r3, r2
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0011      	movs	r1, r2
 8009076:	0018      	movs	r0, r3
 8009078:	f000 fa10 	bl	800949c <USBD_StdDevReq>
      break;
 800907c:	e020      	b.n	80090c0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	22aa      	movs	r2, #170	; 0xaa
 8009082:	0092      	lsls	r2, r2, #2
 8009084:	189a      	adds	r2, r3, r2
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	0011      	movs	r1, r2
 800908a:	0018      	movs	r0, r3
 800908c:	f000 fa78 	bl	8009580 <USBD_StdItfReq>
      break;
 8009090:	e016      	b.n	80090c0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	22aa      	movs	r2, #170	; 0xaa
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	189a      	adds	r2, r3, r2
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	0011      	movs	r1, r2
 800909e:	0018      	movs	r0, r3
 80090a0:	f000 fac5 	bl	800962e <USBD_StdEPReq>
      break;
 80090a4:	e00c      	b.n	80090c0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	23aa      	movs	r3, #170	; 0xaa
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	5cd3      	ldrb	r3, [r2, r3]
 80090ae:	227f      	movs	r2, #127	; 0x7f
 80090b0:	4393      	bics	r3, r2
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	0011      	movs	r1, r2
 80090b8:	0018      	movs	r0, r3
 80090ba:	f001 fcf2 	bl	800aaa2 <USBD_LL_StallEP>
      break;
 80090be:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	0018      	movs	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	b002      	add	sp, #8
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	000002ae 	.word	0x000002ae

080090d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	200b      	movs	r0, #11
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	1c0a      	adds	r2, r1, #0
 80090e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090e2:	183b      	adds	r3, r7, r0
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d154      	bne.n	8009194 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3355      	adds	r3, #85	; 0x55
 80090ee:	33ff      	adds	r3, #255	; 0xff
 80090f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	23a5      	movs	r3, #165	; 0xa5
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	58d3      	ldr	r3, [r2, r3]
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d139      	bne.n	8009172 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	429a      	cmp	r2, r3
 8009108:	d919      	bls.n	800913e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	1ad2      	subs	r2, r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009120:	429a      	cmp	r2, r3
 8009122:	d203      	bcs.n	800912c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009128:	b29b      	uxth	r3, r3
 800912a:	e002      	b.n	8009132 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009130:	b29b      	uxth	r3, r3
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	001a      	movs	r2, r3
 8009138:	f001 f89b 	bl	800a272 <USBD_CtlContinueRx>
 800913c:	e045      	b.n	80091ca <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	23ad      	movs	r3, #173	; 0xad
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	58d3      	ldr	r3, [r2, r3]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00d      	beq.n	8009168 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	23a7      	movs	r3, #167	; 0xa7
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009154:	2b03      	cmp	r3, #3
 8009156:	d107      	bne.n	8009168 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	23ad      	movs	r3, #173	; 0xad
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	58d3      	ldr	r3, [r2, r3]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	0010      	movs	r0, r2
 8009166:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	0018      	movs	r0, r3
 800916c:	f001 f894 	bl	800a298 <USBD_CtlSendStatus>
 8009170:	e02b      	b.n	80091ca <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	23a5      	movs	r3, #165	; 0xa5
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	58d3      	ldr	r3, [r2, r3]
 800917a:	2b05      	cmp	r3, #5
 800917c:	d125      	bne.n	80091ca <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	23a5      	movs	r3, #165	; 0xa5
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	2100      	movs	r1, #0
 8009186:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2100      	movs	r1, #0
 800918c:	0018      	movs	r0, r3
 800918e:	f001 fc88 	bl	800aaa2 <USBD_LL_StallEP>
 8009192:	e01a      	b.n	80091ca <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	23ad      	movs	r3, #173	; 0xad
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	58d3      	ldr	r3, [r2, r3]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d011      	beq.n	80091c6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	23a7      	movs	r3, #167	; 0xa7
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d10b      	bne.n	80091c6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	23ad      	movs	r3, #173	; 0xad
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	58d3      	ldr	r3, [r2, r3]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	220b      	movs	r2, #11
 80091ba:	18ba      	adds	r2, r7, r2
 80091bc:	7811      	ldrb	r1, [r2, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	0010      	movs	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	e001      	b.n	80091ca <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	e000      	b.n	80091cc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b006      	add	sp, #24
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	200b      	movs	r0, #11
 80091e0:	183b      	adds	r3, r7, r0
 80091e2:	1c0a      	adds	r2, r1, #0
 80091e4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091e6:	183b      	adds	r3, r7, r0
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d000      	beq.n	80091f0 <USBD_LL_DataInStage+0x1c>
 80091ee:	e08e      	b.n	800930e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3314      	adds	r3, #20
 80091f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	23a5      	movs	r3, #165	; 0xa5
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	58d3      	ldr	r3, [r2, r3]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d164      	bne.n	80092cc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d915      	bls.n	800923a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	b29a      	uxth	r2, r3
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	0018      	movs	r0, r3
 8009228:	f000 ffec 	bl	800a204 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	2300      	movs	r3, #0
 8009230:	2200      	movs	r2, #0
 8009232:	2100      	movs	r1, #0
 8009234:	f001 fd1e 	bl	800ac74 <USBD_LL_PrepareReceive>
 8009238:	e059      	b.n	80092ee <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	0019      	movs	r1, r3
 8009244:	0010      	movs	r0, r2
 8009246:	f7f6 fff7 	bl	8000238 <__aeabi_uidivmod>
 800924a:	1e0b      	subs	r3, r1, #0
 800924c:	d11f      	bne.n	800928e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009256:	429a      	cmp	r2, r3
 8009258:	d319      	bcc.n	800928e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	23a6      	movs	r3, #166	; 0xa6
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009266:	429a      	cmp	r2, r3
 8009268:	d211      	bcs.n	800928e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	2100      	movs	r1, #0
 8009270:	0018      	movs	r0, r3
 8009272:	f000 ffc7 	bl	800a204 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	23a6      	movs	r3, #166	; 0xa6
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	2100      	movs	r1, #0
 800927e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	2300      	movs	r3, #0
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	f001 fcf4 	bl	800ac74 <USBD_LL_PrepareReceive>
 800928c:	e02f      	b.n	80092ee <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	23ad      	movs	r3, #173	; 0xad
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	58d3      	ldr	r3, [r2, r3]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00d      	beq.n	80092b8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	23a7      	movs	r3, #167	; 0xa7
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d107      	bne.n	80092b8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	23ad      	movs	r3, #173	; 0xad
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	58d3      	ldr	r3, [r2, r3]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	0010      	movs	r0, r2
 80092b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	0018      	movs	r0, r3
 80092be:	f001 fbf0 	bl	800aaa2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	0018      	movs	r0, r3
 80092c6:	f000 fffb 	bl	800a2c0 <USBD_CtlReceiveStatus>
 80092ca:	e010      	b.n	80092ee <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	23a5      	movs	r3, #165	; 0xa5
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	58d3      	ldr	r3, [r2, r3]
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d005      	beq.n	80092e4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	23a5      	movs	r3, #165	; 0xa5
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2180      	movs	r1, #128	; 0x80
 80092e8:	0018      	movs	r0, r3
 80092ea:	f001 fbda 	bl	800aaa2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	23a8      	movs	r3, #168	; 0xa8
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	5cd3      	ldrb	r3, [r2, r3]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d124      	bne.n	8009344 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	0018      	movs	r0, r3
 80092fe:	f7ff fe43 	bl	8008f88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	23a8      	movs	r3, #168	; 0xa8
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	2100      	movs	r1, #0
 800930a:	54d1      	strb	r1, [r2, r3]
 800930c:	e01a      	b.n	8009344 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	23ad      	movs	r3, #173	; 0xad
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	58d3      	ldr	r3, [r2, r3]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d011      	beq.n	8009340 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	23a7      	movs	r3, #167	; 0xa7
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009324:	2b03      	cmp	r3, #3
 8009326:	d10b      	bne.n	8009340 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	23ad      	movs	r3, #173	; 0xad
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	58d3      	ldr	r3, [r2, r3]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	220b      	movs	r2, #11
 8009334:	18ba      	adds	r2, r7, r2
 8009336:	7811      	ldrb	r1, [r2, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	0010      	movs	r0, r2
 800933c:	4798      	blx	r3
 800933e:	e001      	b.n	8009344 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009340:	2302      	movs	r3, #2
 8009342:	e000      	b.n	8009346 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	0018      	movs	r0, r3
 8009348:	46bd      	mov	sp, r7
 800934a:	b006      	add	sp, #24
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	2200      	movs	r2, #0
 800935c:	2100      	movs	r1, #0
 800935e:	f001 fb3e 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	23ac      	movs	r3, #172	; 0xac
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	2101      	movs	r1, #1
 800936a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	23b2      	movs	r3, #178	; 0xb2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	2140      	movs	r1, #64	; 0x40
 8009374:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	2200      	movs	r2, #0
 800937c:	2180      	movs	r1, #128	; 0x80
 800937e:	f001 fb2e 	bl	800a9de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	23a7      	movs	r3, #167	; 0xa7
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	2101      	movs	r1, #1
 8009396:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	23a5      	movs	r3, #165	; 0xa5
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	2100      	movs	r1, #0
 80093a0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	23a9      	movs	r3, #169	; 0xa9
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	2100      	movs	r1, #0
 80093b0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	23ae      	movs	r3, #174	; 0xae
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	58d3      	ldr	r3, [r2, r3]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	23ad      	movs	r3, #173	; 0xad
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	58d3      	ldr	r3, [r2, r3]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	b2d9      	uxtb	r1, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0018      	movs	r0, r3
 80093d2:	4790      	blx	r2
  }

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b002      	add	sp, #8
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	000a      	movs	r2, r1
 80093e8:	1cfb      	adds	r3, r7, #3
 80093ea:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1cfa      	adds	r2, r7, #3
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	0018      	movs	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b002      	add	sp, #8
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	23a7      	movs	r3, #167	; 0xa7
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	5cd1      	ldrb	r1, [r2, r3]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a06      	ldr	r2, [pc, #24]	; (800942c <USBD_LL_Suspend+0x2c>)
 8009414:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	23a7      	movs	r3, #167	; 0xa7
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	2104      	movs	r1, #4
 800941e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	b002      	add	sp, #8
 8009428:	bd80      	pop	{r7, pc}
 800942a:	46c0      	nop			; (mov r8, r8)
 800942c:	0000029d 	.word	0x0000029d

08009430 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	23a7      	movs	r3, #167	; 0xa7
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	5cd3      	ldrb	r3, [r2, r3]
 8009440:	2b04      	cmp	r3, #4
 8009442:	d106      	bne.n	8009452 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a05      	ldr	r2, [pc, #20]	; (800945c <USBD_LL_Resume+0x2c>)
 8009448:	5c99      	ldrb	r1, [r3, r2]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	23a7      	movs	r3, #167	; 0xa7
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	0018      	movs	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	b002      	add	sp, #8
 800945a:	bd80      	pop	{r7, pc}
 800945c:	0000029d 	.word	0x0000029d

08009460 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	23a7      	movs	r3, #167	; 0xa7
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	5cd3      	ldrb	r3, [r2, r3]
 8009470:	2b03      	cmp	r3, #3
 8009472:	d10e      	bne.n	8009492 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	23ad      	movs	r3, #173	; 0xad
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	58d3      	ldr	r3, [r2, r3]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	23ad      	movs	r3, #173	; 0xad
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	58d3      	ldr	r3, [r2, r3]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	0010      	movs	r0, r2
 8009490:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	0018      	movs	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	b002      	add	sp, #8
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094a6:	230f      	movs	r3, #15
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	001a      	movs	r2, r3
 80094b4:	2360      	movs	r3, #96	; 0x60
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b40      	cmp	r3, #64	; 0x40
 80094ba:	d004      	beq.n	80094c6 <USBD_StdDevReq+0x2a>
 80094bc:	d84f      	bhi.n	800955e <USBD_StdDevReq+0xc2>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00b      	beq.n	80094da <USBD_StdDevReq+0x3e>
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d14b      	bne.n	800955e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	23ad      	movs	r3, #173	; 0xad
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	58d3      	ldr	r3, [r2, r3]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	0010      	movs	r0, r2
 80094d6:	4798      	blx	r3
      break;
 80094d8:	e048      	b.n	800956c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b09      	cmp	r3, #9
 80094e0:	d835      	bhi.n	800954e <USBD_StdDevReq+0xb2>
 80094e2:	009a      	lsls	r2, r3, #2
 80094e4:	4b25      	ldr	r3, [pc, #148]	; (800957c <USBD_StdDevReq+0xe0>)
 80094e6:	18d3      	adds	r3, r2, r3
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	0011      	movs	r1, r2
 80094f2:	0018      	movs	r0, r3
 80094f4:	f000 fa52 	bl	800999c <USBD_GetDescriptor>
          break;
 80094f8:	e030      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	0011      	movs	r1, r2
 8009500:	0018      	movs	r0, r3
 8009502:	f000 fbfd 	bl	8009d00 <USBD_SetAddress>
          break;
 8009506:	e029      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	0011      	movs	r1, r2
 800950e:	0018      	movs	r0, r3
 8009510:	f000 fc4a 	bl	8009da8 <USBD_SetConfig>
          break;
 8009514:	e022      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	0011      	movs	r1, r2
 800951c:	0018      	movs	r0, r3
 800951e:	f000 fce7 	bl	8009ef0 <USBD_GetConfig>
          break;
 8009522:	e01b      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	0011      	movs	r1, r2
 800952a:	0018      	movs	r0, r3
 800952c:	f000 fd1b 	bl	8009f66 <USBD_GetStatus>
          break;
 8009530:	e014      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0011      	movs	r1, r2
 8009538:	0018      	movs	r0, r3
 800953a:	f000 fd4e 	bl	8009fda <USBD_SetFeature>
          break;
 800953e:	e00d      	b.n	800955c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	0011      	movs	r1, r2
 8009546:	0018      	movs	r0, r3
 8009548:	f000 fd5d 	bl	800a006 <USBD_ClrFeature>
          break;
 800954c:	e006      	b.n	800955c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	0011      	movs	r1, r2
 8009554:	0018      	movs	r0, r3
 8009556:	f000 fdb7 	bl	800a0c8 <USBD_CtlError>
          break;
 800955a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800955c:	e006      	b.n	800956c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	0011      	movs	r1, r2
 8009564:	0018      	movs	r0, r3
 8009566:	f000 fdaf 	bl	800a0c8 <USBD_CtlError>
      break;
 800956a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800956c:	230f      	movs	r3, #15
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	781b      	ldrb	r3, [r3, #0]
}
 8009572:	0018      	movs	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	b004      	add	sp, #16
 8009578:	bd80      	pop	{r7, pc}
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	0800b780 	.word	0x0800b780

08009580 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009580:	b5b0      	push	{r4, r5, r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958a:	230f      	movs	r3, #15
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	001a      	movs	r2, r3
 8009598:	2360      	movs	r3, #96	; 0x60
 800959a:	4013      	ands	r3, r2
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d004      	beq.n	80095aa <USBD_StdItfReq+0x2a>
 80095a0:	d839      	bhi.n	8009616 <USBD_StdItfReq+0x96>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <USBD_StdItfReq+0x2a>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d135      	bne.n	8009616 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	23a7      	movs	r3, #167	; 0xa7
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	5cd3      	ldrb	r3, [r2, r3]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d825      	bhi.n	8009604 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	889b      	ldrh	r3, [r3, #4]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d819      	bhi.n	80095f6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	23ad      	movs	r3, #173	; 0xad
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	58d3      	ldr	r3, [r2, r3]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	250f      	movs	r5, #15
 80095ce:	197c      	adds	r4, r7, r5
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	0010      	movs	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	0003      	movs	r3, r0
 80095da:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d116      	bne.n	8009612 <USBD_StdItfReq+0x92>
 80095e4:	197b      	adds	r3, r7, r5
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d112      	bne.n	8009612 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 fe52 	bl	800a298 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095f4:	e00d      	b.n	8009612 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	0011      	movs	r1, r2
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 fd63 	bl	800a0c8 <USBD_CtlError>
          break;
 8009602:	e006      	b.n	8009612 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	0011      	movs	r1, r2
 800960a:	0018      	movs	r0, r3
 800960c:	f000 fd5c 	bl	800a0c8 <USBD_CtlError>
          break;
 8009610:	e000      	b.n	8009614 <USBD_StdItfReq+0x94>
          break;
 8009612:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009614:	e006      	b.n	8009624 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	0011      	movs	r1, r2
 800961c:	0018      	movs	r0, r3
 800961e:	f000 fd53 	bl	800a0c8 <USBD_CtlError>
      break;
 8009622:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	0018      	movs	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	b004      	add	sp, #16
 800962c:	bdb0      	pop	{r4, r5, r7, pc}

0800962e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800962e:	b5b0      	push	{r4, r5, r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009638:	230f      	movs	r3, #15
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	889a      	ldrh	r2, [r3, #4]
 8009644:	230e      	movs	r3, #14
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	001a      	movs	r2, r3
 8009650:	2360      	movs	r3, #96	; 0x60
 8009652:	4013      	ands	r3, r2
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	d006      	beq.n	8009666 <USBD_StdEPReq+0x38>
 8009658:	d900      	bls.n	800965c <USBD_StdEPReq+0x2e>
 800965a:	e190      	b.n	800997e <USBD_StdEPReq+0x350>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00c      	beq.n	800967a <USBD_StdEPReq+0x4c>
 8009660:	2b20      	cmp	r3, #32
 8009662:	d000      	beq.n	8009666 <USBD_StdEPReq+0x38>
 8009664:	e18b      	b.n	800997e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	23ad      	movs	r3, #173	; 0xad
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	58d3      	ldr	r3, [r2, r3]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	0010      	movs	r0, r2
 8009676:	4798      	blx	r3
      break;
 8009678:	e188      	b.n	800998c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	001a      	movs	r2, r3
 8009680:	2360      	movs	r3, #96	; 0x60
 8009682:	4013      	ands	r3, r2
 8009684:	2b20      	cmp	r3, #32
 8009686:	d10f      	bne.n	80096a8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	23ad      	movs	r3, #173	; 0xad
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	58d3      	ldr	r3, [r2, r3]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	250f      	movs	r5, #15
 8009694:	197c      	adds	r4, r7, r5
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	0010      	movs	r0, r2
 800969c:	4798      	blx	r3
 800969e:	0003      	movs	r3, r0
 80096a0:	7023      	strb	r3, [r4, #0]

        return ret;
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	e174      	b.n	8009992 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d007      	beq.n	80096c0 <USBD_StdEPReq+0x92>
 80096b0:	dd00      	ble.n	80096b4 <USBD_StdEPReq+0x86>
 80096b2:	e15c      	b.n	800996e <USBD_StdEPReq+0x340>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d100      	bne.n	80096ba <USBD_StdEPReq+0x8c>
 80096b8:	e092      	b.n	80097e0 <USBD_StdEPReq+0x1b2>
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d04b      	beq.n	8009756 <USBD_StdEPReq+0x128>
 80096be:	e156      	b.n	800996e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	23a7      	movs	r3, #167	; 0xa7
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	5cd3      	ldrb	r3, [r2, r3]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d002      	beq.n	80096d2 <USBD_StdEPReq+0xa4>
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d01d      	beq.n	800970c <USBD_StdEPReq+0xde>
 80096d0:	e039      	b.n	8009746 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d2:	220e      	movs	r2, #14
 80096d4:	18bb      	adds	r3, r7, r2
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <USBD_StdEPReq+0xd0>
 80096dc:	18bb      	adds	r3, r7, r2
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d00c      	beq.n	80096fe <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096e4:	18bb      	adds	r3, r7, r2
 80096e6:	781a      	ldrb	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	0011      	movs	r1, r2
 80096ec:	0018      	movs	r0, r3
 80096ee:	f001 f9d8 	bl	800aaa2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2180      	movs	r1, #128	; 0x80
 80096f6:	0018      	movs	r0, r3
 80096f8:	f001 f9d3 	bl	800aaa2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096fc:	e02a      	b.n	8009754 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	0011      	movs	r1, r2
 8009704:	0018      	movs	r0, r3
 8009706:	f000 fcdf 	bl	800a0c8 <USBD_CtlError>
              break;
 800970a:	e023      	b.n	8009754 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d113      	bne.n	800973c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009714:	220e      	movs	r2, #14
 8009716:	18bb      	adds	r3, r7, r2
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00e      	beq.n	800973c <USBD_StdEPReq+0x10e>
 800971e:	18bb      	adds	r3, r7, r2
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d00a      	beq.n	800973c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800972e:	18bb      	adds	r3, r7, r2
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	0011      	movs	r1, r2
 8009736:	0018      	movs	r0, r3
 8009738:	f001 f9b3 	bl	800aaa2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	0018      	movs	r0, r3
 8009740:	f000 fdaa 	bl	800a298 <USBD_CtlSendStatus>

              break;
 8009744:	e006      	b.n	8009754 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	0011      	movs	r1, r2
 800974c:	0018      	movs	r0, r3
 800974e:	f000 fcbb 	bl	800a0c8 <USBD_CtlError>
              break;
 8009752:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009754:	e112      	b.n	800997c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	23a7      	movs	r3, #167	; 0xa7
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	5cd3      	ldrb	r3, [r2, r3]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d002      	beq.n	8009768 <USBD_StdEPReq+0x13a>
 8009762:	2b03      	cmp	r3, #3
 8009764:	d01d      	beq.n	80097a2 <USBD_StdEPReq+0x174>
 8009766:	e032      	b.n	80097ce <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009768:	220e      	movs	r2, #14
 800976a:	18bb      	adds	r3, r7, r2
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d010      	beq.n	8009794 <USBD_StdEPReq+0x166>
 8009772:	18bb      	adds	r3, r7, r2
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b80      	cmp	r3, #128	; 0x80
 8009778:	d00c      	beq.n	8009794 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800977a:	18bb      	adds	r3, r7, r2
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	0011      	movs	r1, r2
 8009782:	0018      	movs	r0, r3
 8009784:	f001 f98d 	bl	800aaa2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	0018      	movs	r0, r3
 800978e:	f001 f988 	bl	800aaa2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009792:	e024      	b.n	80097de <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	0011      	movs	r1, r2
 800979a:	0018      	movs	r0, r3
 800979c:	f000 fc94 	bl	800a0c8 <USBD_CtlError>
              break;
 80097a0:	e01d      	b.n	80097de <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d118      	bne.n	80097dc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097aa:	210e      	movs	r1, #14
 80097ac:	187b      	adds	r3, r7, r1
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	227f      	movs	r2, #127	; 0x7f
 80097b2:	4013      	ands	r3, r2
 80097b4:	d006      	beq.n	80097c4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	0011      	movs	r1, r2
 80097be:	0018      	movs	r0, r3
 80097c0:	f001 f99a 	bl	800aaf8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	0018      	movs	r0, r3
 80097c8:	f000 fd66 	bl	800a298 <USBD_CtlSendStatus>
              }
              break;
 80097cc:	e006      	b.n	80097dc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0011      	movs	r1, r2
 80097d4:	0018      	movs	r0, r3
 80097d6:	f000 fc77 	bl	800a0c8 <USBD_CtlError>
              break;
 80097da:	e000      	b.n	80097de <USBD_StdEPReq+0x1b0>
              break;
 80097dc:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80097de:	e0cd      	b.n	800997c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	23a7      	movs	r3, #167	; 0xa7
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	5cd3      	ldrb	r3, [r2, r3]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d002      	beq.n	80097f2 <USBD_StdEPReq+0x1c4>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d03c      	beq.n	800986a <USBD_StdEPReq+0x23c>
 80097f0:	e0b5      	b.n	800995e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097f2:	220e      	movs	r2, #14
 80097f4:	18bb      	adds	r3, r7, r2
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00a      	beq.n	8009812 <USBD_StdEPReq+0x1e4>
 80097fc:	18bb      	adds	r3, r7, r2
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b80      	cmp	r3, #128	; 0x80
 8009802:	d006      	beq.n	8009812 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	0011      	movs	r1, r2
 800980a:	0018      	movs	r0, r3
 800980c:	f000 fc5c 	bl	800a0c8 <USBD_CtlError>
                break;
 8009810:	e0ac      	b.n	800996c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009812:	220e      	movs	r2, #14
 8009814:	18bb      	adds	r3, r7, r2
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	b25b      	sxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	da0c      	bge.n	8009838 <USBD_StdEPReq+0x20a>
 800981e:	18bb      	adds	r3, r7, r2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	227f      	movs	r2, #127	; 0x7f
 8009824:	401a      	ands	r2, r3
 8009826:	0013      	movs	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	189b      	adds	r3, r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	3310      	adds	r3, #16
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	18d3      	adds	r3, r2, r3
 8009834:	3304      	adds	r3, #4
 8009836:	e00d      	b.n	8009854 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009838:	230e      	movs	r3, #14
 800983a:	18fb      	adds	r3, r7, r3
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	227f      	movs	r2, #127	; 0x7f
 8009840:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009842:	0013      	movs	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	189b      	adds	r3, r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	3351      	adds	r3, #81	; 0x51
 800984c:	33ff      	adds	r3, #255	; 0xff
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	3304      	adds	r3, #4
 8009854:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	0018      	movs	r0, r3
 8009864:	f000 fcae 	bl	800a1c4 <USBD_CtlSendData>
              break;
 8009868:	e080      	b.n	800996c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800986a:	220e      	movs	r2, #14
 800986c:	18bb      	adds	r3, r7, r2
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b25b      	sxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	da14      	bge.n	80098a0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009876:	18bb      	adds	r3, r7, r2
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	220f      	movs	r2, #15
 800987c:	401a      	ands	r2, r3
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	0013      	movs	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	189b      	adds	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	18cb      	adds	r3, r1, r3
 800988a:	3318      	adds	r3, #24
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d11e      	bne.n	80098d0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	0011      	movs	r1, r2
 8009898:	0018      	movs	r0, r3
 800989a:	f000 fc15 	bl	800a0c8 <USBD_CtlError>
                  break;
 800989e:	e065      	b.n	800996c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098a0:	230e      	movs	r3, #14
 80098a2:	18fb      	adds	r3, r7, r3
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	220f      	movs	r2, #15
 80098a8:	401a      	ands	r2, r3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	23ac      	movs	r3, #172	; 0xac
 80098ae:	0059      	lsls	r1, r3, #1
 80098b0:	0013      	movs	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	18c3      	adds	r3, r0, r3
 80098ba:	185b      	adds	r3, r3, r1
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d106      	bne.n	80098d0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	0011      	movs	r1, r2
 80098c8:	0018      	movs	r0, r3
 80098ca:	f000 fbfd 	bl	800a0c8 <USBD_CtlError>
                  break;
 80098ce:	e04d      	b.n	800996c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098d0:	220e      	movs	r2, #14
 80098d2:	18bb      	adds	r3, r7, r2
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da0c      	bge.n	80098f6 <USBD_StdEPReq+0x2c8>
 80098dc:	18bb      	adds	r3, r7, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	227f      	movs	r2, #127	; 0x7f
 80098e2:	401a      	ands	r2, r3
 80098e4:	0013      	movs	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	3310      	adds	r3, #16
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	18d3      	adds	r3, r2, r3
 80098f2:	3304      	adds	r3, #4
 80098f4:	e00d      	b.n	8009912 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098f6:	230e      	movs	r3, #14
 80098f8:	18fb      	adds	r3, r7, r3
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	227f      	movs	r2, #127	; 0x7f
 80098fe:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009900:	0013      	movs	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	189b      	adds	r3, r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	3351      	adds	r3, #81	; 0x51
 800990a:	33ff      	adds	r3, #255	; 0xff
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	18d3      	adds	r3, r2, r3
 8009910:	3304      	adds	r3, #4
 8009912:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009914:	220e      	movs	r2, #14
 8009916:	18bb      	adds	r3, r7, r2
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <USBD_StdEPReq+0x2f8>
 800991e:	18bb      	adds	r3, r7, r2
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d103      	bne.n	800992e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	e010      	b.n	8009950 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800992e:	230e      	movs	r3, #14
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	0011      	movs	r1, r2
 8009938:	0018      	movs	r0, r3
 800993a:	f001 f908 	bl	800ab4e <USBD_LL_IsStallEP>
 800993e:	1e03      	subs	r3, r0, #0
 8009940:	d003      	beq.n	800994a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2201      	movs	r2, #1
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	e002      	b.n	8009950 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2200      	movs	r2, #0
 800994e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2202      	movs	r2, #2
 8009956:	0018      	movs	r0, r3
 8009958:	f000 fc34 	bl	800a1c4 <USBD_CtlSendData>
              break;
 800995c:	e006      	b.n	800996c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	0011      	movs	r1, r2
 8009964:	0018      	movs	r0, r3
 8009966:	f000 fbaf 	bl	800a0c8 <USBD_CtlError>
              break;
 800996a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800996c:	e006      	b.n	800997c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	0011      	movs	r1, r2
 8009974:	0018      	movs	r0, r3
 8009976:	f000 fba7 	bl	800a0c8 <USBD_CtlError>
          break;
 800997a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800997c:	e006      	b.n	800998c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	0011      	movs	r1, r2
 8009984:	0018      	movs	r0, r3
 8009986:	f000 fb9f 	bl	800a0c8 <USBD_CtlError>
      break;
 800998a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800998c:	230f      	movs	r3, #15
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	781b      	ldrb	r3, [r3, #0]
}
 8009992:	0018      	movs	r0, r3
 8009994:	46bd      	mov	sp, r7
 8009996:	b004      	add	sp, #16
 8009998:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800999c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099a6:	2308      	movs	r3, #8
 80099a8:	18fb      	adds	r3, r7, r3
 80099aa:	2200      	movs	r2, #0
 80099ac:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099b2:	230b      	movs	r3, #11
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b07      	cmp	r3, #7
 80099c4:	d900      	bls.n	80099c8 <USBD_GetDescriptor+0x2c>
 80099c6:	e159      	b.n	8009c7c <USBD_GetDescriptor+0x2e0>
 80099c8:	009a      	lsls	r2, r3, #2
 80099ca:	4bcb      	ldr	r3, [pc, #812]	; (8009cf8 <USBD_GetDescriptor+0x35c>)
 80099cc:	18d3      	adds	r3, r2, r3
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	23ac      	movs	r3, #172	; 0xac
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	58d3      	ldr	r3, [r2, r3]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	2108      	movs	r1, #8
 80099e2:	1879      	adds	r1, r7, r1
 80099e4:	0010      	movs	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	0003      	movs	r3, r0
 80099ea:	60fb      	str	r3, [r7, #12]
      break;
 80099ec:	e153      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	7c1b      	ldrb	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10f      	bne.n	8009a16 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	23ad      	movs	r3, #173	; 0xad
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	58d3      	ldr	r3, [r2, r3]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a00:	2208      	movs	r2, #8
 8009a02:	18ba      	adds	r2, r7, r2
 8009a04:	0010      	movs	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	0003      	movs	r3, r0
 8009a0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	2202      	movs	r2, #2
 8009a12:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a14:	e13f      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	23ad      	movs	r3, #173	; 0xad
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	58d3      	ldr	r3, [r2, r3]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	2208      	movs	r2, #8
 8009a22:	18ba      	adds	r2, r7, r2
 8009a24:	0010      	movs	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	0003      	movs	r3, r0
 8009a2a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	2202      	movs	r2, #2
 8009a32:	701a      	strb	r2, [r3, #0]
      break;
 8009a34:	e12f      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	885b      	ldrh	r3, [r3, #2]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b05      	cmp	r3, #5
 8009a3e:	d900      	bls.n	8009a42 <USBD_GetDescriptor+0xa6>
 8009a40:	e0d0      	b.n	8009be4 <USBD_GetDescriptor+0x248>
 8009a42:	009a      	lsls	r2, r3, #2
 8009a44:	4bad      	ldr	r3, [pc, #692]	; (8009cfc <USBD_GetDescriptor+0x360>)
 8009a46:	18d3      	adds	r3, r2, r3
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	23ac      	movs	r3, #172	; 0xac
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	58d3      	ldr	r3, [r2, r3]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	23ac      	movs	r3, #172	; 0xac
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	58d3      	ldr	r3, [r2, r3]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	2108      	movs	r1, #8
 8009a6a:	1879      	adds	r1, r7, r1
 8009a6c:	0010      	movs	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	0003      	movs	r3, r0
 8009a72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a74:	e0c3      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	0011      	movs	r1, r2
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f000 fb23 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009a82:	210b      	movs	r1, #11
 8009a84:	187b      	adds	r3, r7, r1
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	3201      	adds	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
          break;
 8009a8e:	e0b6      	b.n	8009bfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	23ac      	movs	r3, #172	; 0xac
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	58d3      	ldr	r3, [r2, r3]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	23ac      	movs	r3, #172	; 0xac
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	58d3      	ldr	r3, [r2, r3]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	7c12      	ldrb	r2, [r2, #16]
 8009aac:	2108      	movs	r1, #8
 8009aae:	1879      	adds	r1, r7, r1
 8009ab0:	0010      	movs	r0, r2
 8009ab2:	4798      	blx	r3
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab8:	e0a1      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f000 fb01 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009ac6:	210b      	movs	r1, #11
 8009ac8:	187b      	adds	r3, r7, r1
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	3201      	adds	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
          break;
 8009ad2:	e094      	b.n	8009bfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	23ac      	movs	r3, #172	; 0xac
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	58d3      	ldr	r3, [r2, r3]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00d      	beq.n	8009afe <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	23ac      	movs	r3, #172	; 0xac
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	58d3      	ldr	r3, [r2, r3]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	2108      	movs	r1, #8
 8009af2:	1879      	adds	r1, r7, r1
 8009af4:	0010      	movs	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	0003      	movs	r3, r0
 8009afa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afc:	e07f      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	0011      	movs	r1, r2
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 fadf 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009b0a:	210b      	movs	r1, #11
 8009b0c:	187b      	adds	r3, r7, r1
 8009b0e:	781a      	ldrb	r2, [r3, #0]
 8009b10:	187b      	adds	r3, r7, r1
 8009b12:	3201      	adds	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
          break;
 8009b16:	e072      	b.n	8009bfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	23ac      	movs	r3, #172	; 0xac
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	58d3      	ldr	r3, [r2, r3]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00d      	beq.n	8009b42 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	23ac      	movs	r3, #172	; 0xac
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	58d3      	ldr	r3, [r2, r3]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	2108      	movs	r1, #8
 8009b36:	1879      	adds	r1, r7, r1
 8009b38:	0010      	movs	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	0003      	movs	r3, r0
 8009b3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b40:	e05d      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0011      	movs	r1, r2
 8009b48:	0018      	movs	r0, r3
 8009b4a:	f000 fabd 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009b4e:	210b      	movs	r1, #11
 8009b50:	187b      	adds	r3, r7, r1
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	187b      	adds	r3, r7, r1
 8009b56:	3201      	adds	r2, #1
 8009b58:	701a      	strb	r2, [r3, #0]
          break;
 8009b5a:	e050      	b.n	8009bfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	23ac      	movs	r3, #172	; 0xac
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	58d3      	ldr	r3, [r2, r3]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00d      	beq.n	8009b86 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	23ac      	movs	r3, #172	; 0xac
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	58d3      	ldr	r3, [r2, r3]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	7c12      	ldrb	r2, [r2, #16]
 8009b78:	2108      	movs	r1, #8
 8009b7a:	1879      	adds	r1, r7, r1
 8009b7c:	0010      	movs	r0, r2
 8009b7e:	4798      	blx	r3
 8009b80:	0003      	movs	r3, r0
 8009b82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b84:	e03b      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	0011      	movs	r1, r2
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f000 fa9b 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009b92:	210b      	movs	r1, #11
 8009b94:	187b      	adds	r3, r7, r1
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	187b      	adds	r3, r7, r1
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
          break;
 8009b9e:	e02e      	b.n	8009bfe <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	23ac      	movs	r3, #172	; 0xac
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	58d3      	ldr	r3, [r2, r3]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	23ac      	movs	r3, #172	; 0xac
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	58d3      	ldr	r3, [r2, r3]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	2108      	movs	r1, #8
 8009bbe:	1879      	adds	r1, r7, r1
 8009bc0:	0010      	movs	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc8:	e019      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	0011      	movs	r1, r2
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f000 fa79 	bl	800a0c8 <USBD_CtlError>
            err++;
 8009bd6:	210b      	movs	r1, #11
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	187b      	adds	r3, r7, r1
 8009bde:	3201      	adds	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
          break;
 8009be2:	e00c      	b.n	8009bfe <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0011      	movs	r1, r2
 8009bea:	0018      	movs	r0, r3
 8009bec:	f000 fa6c 	bl	800a0c8 <USBD_CtlError>
          err++;
 8009bf0:	210b      	movs	r1, #11
 8009bf2:	187b      	adds	r3, r7, r1
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	187b      	adds	r3, r7, r1
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009bfc:	e04b      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>
 8009bfe:	e04a      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7c1b      	ldrb	r3, [r3, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10b      	bne.n	8009c20 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	23ad      	movs	r3, #173	; 0xad
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	58d3      	ldr	r3, [r2, r3]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c12:	2208      	movs	r2, #8
 8009c14:	18ba      	adds	r2, r7, r2
 8009c16:	0010      	movs	r0, r2
 8009c18:	4798      	blx	r3
 8009c1a:	0003      	movs	r3, r0
 8009c1c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c1e:	e03a      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	0011      	movs	r1, r2
 8009c26:	0018      	movs	r0, r3
 8009c28:	f000 fa4e 	bl	800a0c8 <USBD_CtlError>
        err++;
 8009c2c:	210b      	movs	r1, #11
 8009c2e:	187b      	adds	r3, r7, r1
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	187b      	adds	r3, r7, r1
 8009c34:	3201      	adds	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
      break;
 8009c38:	e02d      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7c1b      	ldrb	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10f      	bne.n	8009c62 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	23ad      	movs	r3, #173	; 0xad
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	58d3      	ldr	r3, [r2, r3]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	18ba      	adds	r2, r7, r2
 8009c50:	0010      	movs	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	0003      	movs	r3, r0
 8009c56:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	2207      	movs	r2, #7
 8009c5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e019      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	0011      	movs	r1, r2
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f000 fa2d 	bl	800a0c8 <USBD_CtlError>
        err++;
 8009c6e:	210b      	movs	r1, #11
 8009c70:	187b      	adds	r3, r7, r1
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	187b      	adds	r3, r7, r1
 8009c76:	3201      	adds	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
      break;
 8009c7a:	e00c      	b.n	8009c96 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	0011      	movs	r1, r2
 8009c82:	0018      	movs	r0, r3
 8009c84:	f000 fa20 	bl	800a0c8 <USBD_CtlError>
      err++;
 8009c88:	210b      	movs	r1, #11
 8009c8a:	187b      	adds	r3, r7, r1
 8009c8c:	781a      	ldrb	r2, [r3, #0]
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	3201      	adds	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
      break;
 8009c94:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8009c96:	230b      	movs	r3, #11
 8009c98:	18fb      	adds	r3, r7, r3
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d127      	bne.n	8009cf0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ca0:	2108      	movs	r1, #8
 8009ca2:	187b      	adds	r3, r7, r1
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d019      	beq.n	8009cde <USBD_GetDescriptor+0x342>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88db      	ldrh	r3, [r3, #6]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d015      	beq.n	8009cde <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88da      	ldrh	r2, [r3, #6]
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	1c18      	adds	r0, r3, #0
 8009cbc:	1c11      	adds	r1, r2, #0
 8009cbe:	b28a      	uxth	r2, r1
 8009cc0:	b283      	uxth	r3, r0
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d900      	bls.n	8009cc8 <USBD_GetDescriptor+0x32c>
 8009cc6:	1c01      	adds	r1, r0, #0
 8009cc8:	b28a      	uxth	r2, r1
 8009cca:	2108      	movs	r1, #8
 8009ccc:	187b      	adds	r3, r7, r1
 8009cce:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	881a      	ldrh	r2, [r3, #0]
 8009cd4:	68f9      	ldr	r1, [r7, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f000 fa73 	bl	800a1c4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	88db      	ldrh	r3, [r3, #6]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f000 fad5 	bl	800a298 <USBD_CtlSendStatus>
 8009cee:	e000      	b.n	8009cf2 <USBD_GetDescriptor+0x356>
    return;
 8009cf0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	b004      	add	sp, #16
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0800b7a8 	.word	0x0800b7a8
 8009cfc:	0800b7c8 	.word	0x0800b7c8

08009d00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d00:	b590      	push	{r4, r7, lr}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	889b      	ldrh	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d13d      	bne.n	8009d8e <USBD_SetAddress+0x8e>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d139      	bne.n	8009d8e <USBD_SetAddress+0x8e>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d20:	d835      	bhi.n	8009d8e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	230f      	movs	r3, #15
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	217f      	movs	r1, #127	; 0x7f
 8009d2e:	400a      	ands	r2, r1
 8009d30:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	23a7      	movs	r3, #167	; 0xa7
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	5cd3      	ldrb	r3, [r2, r3]
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d106      	bne.n	8009d4c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	0011      	movs	r1, r2
 8009d44:	0018      	movs	r0, r3
 8009d46:	f000 f9bf 	bl	800a0c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4a:	e027      	b.n	8009d9c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	240f      	movs	r4, #15
 8009d50:	193a      	adds	r2, r7, r4
 8009d52:	4914      	ldr	r1, [pc, #80]	; (8009da4 <USBD_SetAddress+0xa4>)
 8009d54:	7812      	ldrb	r2, [r2, #0]
 8009d56:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d58:	193b      	adds	r3, r7, r4
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	0011      	movs	r1, r2
 8009d60:	0018      	movs	r0, r3
 8009d62:	f000 ff25 	bl	800abb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f000 fa95 	bl	800a298 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d6e:	193b      	adds	r3, r7, r4
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d005      	beq.n	8009d82 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	23a7      	movs	r3, #167	; 0xa7
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	2102      	movs	r1, #2
 8009d7e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d80:	e00c      	b.n	8009d9c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	23a7      	movs	r3, #167	; 0xa7
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	2101      	movs	r1, #1
 8009d8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8c:	e006      	b.n	8009d9c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	0011      	movs	r1, r2
 8009d94:	0018      	movs	r0, r3
 8009d96:	f000 f997 	bl	800a0c8 <USBD_CtlError>
  }
}
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	46c0      	nop			; (mov r8, r8)
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b005      	add	sp, #20
 8009da2:	bd90      	pop	{r4, r7, pc}
 8009da4:	0000029e 	.word	0x0000029e

08009da8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	4b4c      	ldr	r3, [pc, #304]	; (8009eec <USBD_SetConfig+0x144>)
 8009dba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dbc:	4b4b      	ldr	r3, [pc, #300]	; (8009eec <USBD_SetConfig+0x144>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d906      	bls.n	8009dd2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0011      	movs	r1, r2
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f000 f97c 	bl	800a0c8 <USBD_CtlError>
 8009dd0:	e088      	b.n	8009ee4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	23a7      	movs	r3, #167	; 0xa7
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	5cd3      	ldrb	r3, [r2, r3]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d002      	beq.n	8009de4 <USBD_SetConfig+0x3c>
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d029      	beq.n	8009e36 <USBD_SetConfig+0x8e>
 8009de2:	e071      	b.n	8009ec8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009de4:	4b41      	ldr	r3, [pc, #260]	; (8009eec <USBD_SetConfig+0x144>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01f      	beq.n	8009e2c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8009dec:	4b3f      	ldr	r3, [pc, #252]	; (8009eec <USBD_SetConfig+0x144>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	001a      	movs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	23a7      	movs	r3, #167	; 0xa7
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	2103      	movs	r1, #3
 8009dfe:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e00:	4b3a      	ldr	r3, [pc, #232]	; (8009eec <USBD_SetConfig+0x144>)
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	0011      	movs	r1, r2
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f7ff f8c6 	bl	8008f9a <USBD_SetClassConfig>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d106      	bne.n	8009e22 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	0011      	movs	r1, r2
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	f000 f954 	bl	800a0c8 <USBD_CtlError>
            return;
 8009e20:	e060      	b.n	8009ee4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 fa37 	bl	800a298 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e2a:	e05b      	b.n	8009ee4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	0018      	movs	r0, r3
 8009e30:	f000 fa32 	bl	800a298 <USBD_CtlSendStatus>
        break;
 8009e34:	e056      	b.n	8009ee4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e36:	4b2d      	ldr	r3, [pc, #180]	; (8009eec <USBD_SetConfig+0x144>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d115      	bne.n	8009e6a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	23a7      	movs	r3, #167	; 0xa7
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	2102      	movs	r1, #2
 8009e46:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8009e48:	4b28      	ldr	r3, [pc, #160]	; (8009eec <USBD_SetConfig+0x144>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	001a      	movs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e52:	4b26      	ldr	r3, [pc, #152]	; (8009eec <USBD_SetConfig+0x144>)
 8009e54:	781a      	ldrb	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	0011      	movs	r1, r2
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f7ff f8c4 	bl	8008fe8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	0018      	movs	r0, r3
 8009e64:	f000 fa18 	bl	800a298 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e68:	e03c      	b.n	8009ee4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8009e6a:	4b20      	ldr	r3, [pc, #128]	; (8009eec <USBD_SetConfig+0x144>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	001a      	movs	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d022      	beq.n	8009ebe <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0011      	movs	r1, r2
 8009e82:	0018      	movs	r0, r3
 8009e84:	f7ff f8b0 	bl	8008fe8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e88:	4b18      	ldr	r3, [pc, #96]	; (8009eec <USBD_SetConfig+0x144>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	001a      	movs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e92:	4b16      	ldr	r3, [pc, #88]	; (8009eec <USBD_SetConfig+0x144>)
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	0011      	movs	r1, r2
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	f7ff f87d 	bl	8008f9a <USBD_SetClassConfig>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d106      	bne.n	8009eb4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	0011      	movs	r1, r2
 8009eac:	0018      	movs	r0, r3
 8009eae:	f000 f90b 	bl	800a0c8 <USBD_CtlError>
            return;
 8009eb2:	e017      	b.n	8009ee4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f000 f9ee 	bl	800a298 <USBD_CtlSendStatus>
        break;
 8009ebc:	e012      	b.n	8009ee4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f000 f9e9 	bl	800a298 <USBD_CtlSendStatus>
        break;
 8009ec6:	e00d      	b.n	8009ee4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	0011      	movs	r1, r2
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f000 f8fa 	bl	800a0c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <USBD_SetConfig+0x144>)
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	0011      	movs	r1, r2
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7ff f883 	bl	8008fe8 <USBD_ClrClassConfig>
        break;
 8009ee2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b002      	add	sp, #8
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	20000214 	.word	0x20000214

08009ef0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	88db      	ldrh	r3, [r3, #6]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d006      	beq.n	8009f10 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	0011      	movs	r1, r2
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f000 f8dd 	bl	800a0c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f0e:	e026      	b.n	8009f5e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	23a7      	movs	r3, #167	; 0xa7
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	5cd3      	ldrb	r3, [r2, r3]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	dc02      	bgt.n	8009f22 <USBD_GetConfig+0x32>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dc03      	bgt.n	8009f28 <USBD_GetConfig+0x38>
 8009f20:	e016      	b.n	8009f50 <USBD_GetConfig+0x60>
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d00c      	beq.n	8009f40 <USBD_GetConfig+0x50>
 8009f26:	e013      	b.n	8009f50 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3308      	adds	r3, #8
 8009f32:	0019      	movs	r1, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 f943 	bl	800a1c4 <USBD_CtlSendData>
        break;
 8009f3e:	e00e      	b.n	8009f5e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f000 f93b 	bl	800a1c4 <USBD_CtlSendData>
        break;
 8009f4e:	e006      	b.n	8009f5e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	0011      	movs	r1, r2
 8009f56:	0018      	movs	r0, r3
 8009f58:	f000 f8b6 	bl	800a0c8 <USBD_CtlError>
        break;
 8009f5c:	46c0      	nop			; (mov r8, r8)
}
 8009f5e:	46c0      	nop			; (mov r8, r8)
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	23a7      	movs	r3, #167	; 0xa7
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	5cd3      	ldrb	r3, [r2, r3]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d822      	bhi.n	8009fc4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	88db      	ldrh	r3, [r3, #6]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d006      	beq.n	8009f94 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f000 f89b 	bl	800a0c8 <USBD_CtlError>
        break;
 8009f92:	e01e      	b.n	8009fd2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	23a9      	movs	r3, #169	; 0xa9
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	58d3      	ldr	r3, [r2, r3]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	2202      	movs	r2, #2
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	0019      	movs	r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f000 f901 	bl	800a1c4 <USBD_CtlSendData>
      break;
 8009fc2:	e006      	b.n	8009fd2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	0011      	movs	r1, r2
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f000 f87c 	bl	800a0c8 <USBD_CtlError>
      break;
 8009fd0:	46c0      	nop			; (mov r8, r8)
  }
}
 8009fd2:	46c0      	nop			; (mov r8, r8)
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	b002      	add	sp, #8
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	885b      	ldrh	r3, [r3, #2]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d108      	bne.n	8009ffe <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	23a9      	movs	r3, #169	; 0xa9
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f000 f94d 	bl	800a298 <USBD_CtlSendStatus>
  }
}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	23a7      	movs	r3, #167	; 0xa7
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	5cd3      	ldrb	r3, [r2, r3]
 800a018:	3b01      	subs	r3, #1
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d80d      	bhi.n	800a03a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d110      	bne.n	800a048 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	23a9      	movs	r3, #169	; 0xa9
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	2100      	movs	r1, #0
 800a02e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	0018      	movs	r0, r3
 800a034:	f000 f930 	bl	800a298 <USBD_CtlSendStatus>
      }
      break;
 800a038:	e006      	b.n	800a048 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	0011      	movs	r1, r2
 800a040:	0018      	movs	r0, r3
 800a042:	f000 f841 	bl	800a0c8 <USBD_CtlError>
      break;
 800a046:	e000      	b.n	800a04a <USBD_ClrFeature+0x44>
      break;
 800a048:	46c0      	nop			; (mov r8, r8)
  }
}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b002      	add	sp, #8
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	3302      	adds	r3, #2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b29a      	uxth	r2, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3303      	adds	r3, #3
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	b29b      	uxth	r3, r3
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	3304      	adds	r3, #4
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b29a      	uxth	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3305      	adds	r3, #5
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	021b      	lsls	r3, r3, #8
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	18d3      	adds	r3, r2, r3
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	3306      	adds	r3, #6
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	021b      	lsls	r3, r3, #8
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	18d3      	adds	r3, r2, r3
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	80da      	strh	r2, [r3, #6]

}
 800a0c0:	46c0      	nop			; (mov r8, r8)
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2180      	movs	r1, #128	; 0x80
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f000 fce3 	bl	800aaa2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2100      	movs	r1, #0
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f000 fcde 	bl	800aaa2 <USBD_LL_StallEP>
}
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	b002      	add	sp, #8
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0ee:	b590      	push	{r4, r7, lr}
 800a0f0:	b087      	sub	sp, #28
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0fa:	2417      	movs	r4, #23
 800a0fc:	193b      	adds	r3, r7, r4
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d03c      	beq.n	800a182 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	0018      	movs	r0, r3
 800a10c:	f000 f83d 	bl	800a18a <USBD_GetLen>
 800a110:	0003      	movs	r3, r0
 800a112:	3301      	adds	r3, #1
 800a114:	b29b      	uxth	r3, r3
 800a116:	18db      	adds	r3, r3, r3
 800a118:	b29a      	uxth	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a11e:	193b      	adds	r3, r7, r4
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	193a      	adds	r2, r7, r4
 800a124:	1c59      	adds	r1, r3, #1
 800a126:	7011      	strb	r1, [r2, #0]
 800a128:	001a      	movs	r2, r3
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	189b      	adds	r3, r3, r2
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	7812      	ldrb	r2, [r2, #0]
 800a132:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a134:	193b      	adds	r3, r7, r4
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	193a      	adds	r2, r7, r4
 800a13a:	1c59      	adds	r1, r3, #1
 800a13c:	7011      	strb	r1, [r2, #0]
 800a13e:	001a      	movs	r2, r3
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	189b      	adds	r3, r3, r2
 800a144:	2203      	movs	r2, #3
 800a146:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a148:	e017      	b.n	800a17a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	60fa      	str	r2, [r7, #12]
 800a150:	2417      	movs	r4, #23
 800a152:	193a      	adds	r2, r7, r4
 800a154:	7812      	ldrb	r2, [r2, #0]
 800a156:	1939      	adds	r1, r7, r4
 800a158:	1c50      	adds	r0, r2, #1
 800a15a:	7008      	strb	r0, [r1, #0]
 800a15c:	0011      	movs	r1, r2
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	1852      	adds	r2, r2, r1
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a166:	193b      	adds	r3, r7, r4
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	193a      	adds	r2, r7, r4
 800a16c:	1c59      	adds	r1, r3, #1
 800a16e:	7011      	strb	r1, [r2, #0]
 800a170:	001a      	movs	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	189b      	adds	r3, r3, r2
 800a176:	2200      	movs	r2, #0
 800a178:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e3      	bne.n	800a14a <USBD_GetString+0x5c>
    }
  }
}
 800a182:	46c0      	nop			; (mov r8, r8)
 800a184:	46bd      	mov	sp, r7
 800a186:	b007      	add	sp, #28
 800a188:	bd90      	pop	{r4, r7, pc}

0800a18a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a192:	230f      	movs	r3, #15
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a19a:	e008      	b.n	800a1ae <USBD_GetLen+0x24>
  {
    len++;
 800a19c:	210f      	movs	r1, #15
 800a19e:	187b      	adds	r3, r7, r1
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	187b      	adds	r3, r7, r1
 800a1a4:	3201      	adds	r2, #1
 800a1a6:	701a      	strb	r2, [r3, #0]
    buf++;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1f2      	bne.n	800a19c <USBD_GetLen+0x12>
  }

  return len;
 800a1b6:	230f      	movs	r3, #15
 800a1b8:	18fb      	adds	r3, r7, r3
 800a1ba:	781b      	ldrb	r3, [r3, #0]
}
 800a1bc:	0018      	movs	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b004      	add	sp, #16
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	1dbb      	adds	r3, r7, #6
 800a1d0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	23a5      	movs	r3, #165	; 0xa5
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	2102      	movs	r1, #2
 800a1da:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a1dc:	1dbb      	adds	r3, r7, #6
 800a1de:	881a      	ldrh	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1e4:	1dbb      	adds	r3, r7, #6
 800a1e6:	881a      	ldrh	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1ec:	1dbb      	adds	r3, r7, #6
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	f000 fd06 	bl	800ac06 <USBD_LL_Transmit>

  return USBD_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	46bd      	mov	sp, r7
 800a200:	b004      	add	sp, #16
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	1dbb      	adds	r3, r7, #6
 800a210:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a212:	1dbb      	adds	r3, r7, #6
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	2100      	movs	r1, #0
 800a21c:	f000 fcf3 	bl	800ac06 <USBD_LL_Transmit>

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	0018      	movs	r0, r3
 800a224:	46bd      	mov	sp, r7
 800a226:	b004      	add	sp, #16
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	1dbb      	adds	r3, r7, #6
 800a236:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	23a5      	movs	r3, #165	; 0xa5
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	2103      	movs	r1, #3
 800a240:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a242:	1dbb      	adds	r3, r7, #6
 800a244:	8819      	ldrh	r1, [r3, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	23ae      	movs	r3, #174	; 0xae
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a24e:	1dbb      	adds	r3, r7, #6
 800a250:	8819      	ldrh	r1, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	23b0      	movs	r3, #176	; 0xb0
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a25a:	1dbb      	adds	r3, r7, #6
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	2100      	movs	r1, #0
 800a264:	f000 fd06 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	0018      	movs	r0, r3
 800a26c:	46bd      	mov	sp, r7
 800a26e:	b004      	add	sp, #16
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	1dbb      	adds	r3, r7, #6
 800a27e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a280:	1dbb      	adds	r3, r7, #6
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	2100      	movs	r1, #0
 800a28a:	f000 fcf3 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b004      	add	sp, #16
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	23a5      	movs	r3, #165	; 0xa5
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	f000 fca8 	bl	800ac06 <USBD_LL_Transmit>

  return USBD_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	b002      	add	sp, #8
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	23a5      	movs	r3, #165	; 0xa5
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	2105      	movs	r1, #5
 800a2d0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2100      	movs	r1, #0
 800a2da:	f000 fccb 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b002      	add	sp, #8
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2ec:	4914      	ldr	r1, [pc, #80]	; (800a340 <MX_USB_DEVICE_Init+0x58>)
 800a2ee:	4b15      	ldr	r3, [pc, #84]	; (800a344 <MX_USB_DEVICE_Init+0x5c>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f7fe fdea 	bl	8008ecc <USBD_Init>
 800a2f8:	1e03      	subs	r3, r0, #0
 800a2fa:	d001      	beq.n	800a300 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2fc:	f7f6 feee 	bl	80010dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a300:	4a11      	ldr	r2, [pc, #68]	; (800a348 <MX_USB_DEVICE_Init+0x60>)
 800a302:	4b10      	ldr	r3, [pc, #64]	; (800a344 <MX_USB_DEVICE_Init+0x5c>)
 800a304:	0011      	movs	r1, r2
 800a306:	0018      	movs	r0, r3
 800a308:	f7fe fe11 	bl	8008f2e <USBD_RegisterClass>
 800a30c:	1e03      	subs	r3, r0, #0
 800a30e:	d001      	beq.n	800a314 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a310:	f7f6 fee4 	bl	80010dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a314:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <MX_USB_DEVICE_Init+0x64>)
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <MX_USB_DEVICE_Init+0x5c>)
 800a318:	0011      	movs	r1, r2
 800a31a:	0018      	movs	r0, r3
 800a31c:	f7fe fd26 	bl	8008d6c <USBD_CDC_RegisterInterface>
 800a320:	1e03      	subs	r3, r0, #0
 800a322:	d001      	beq.n	800a328 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a324:	f7f6 feda 	bl	80010dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <MX_USB_DEVICE_Init+0x5c>)
 800a32a:	0018      	movs	r0, r3
 800a32c:	f7fe fe1f 	bl	8008f6e <USBD_Start>
 800a330:	1e03      	subs	r3, r0, #0
 800a332:	d001      	beq.n	800a338 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a334:	f7f6 fed2 	bl	80010dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a338:	46c0      	nop			; (mov r8, r8)
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	2000012c 	.word	0x2000012c
 800a344:	20000618 	.word	0x20000618
 800a348:	20000018 	.word	0x20000018
 800a34c:	2000011c 	.word	0x2000011c

0800a350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a354:	4907      	ldr	r1, [pc, #28]	; (800a374 <CDC_Init_FS+0x24>)
 800a356:	4b08      	ldr	r3, [pc, #32]	; (800a378 <CDC_Init_FS+0x28>)
 800a358:	2200      	movs	r2, #0
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7fe fd21 	bl	8008da2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a360:	4a06      	ldr	r2, [pc, #24]	; (800a37c <CDC_Init_FS+0x2c>)
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <CDC_Init_FS+0x28>)
 800a364:	0011      	movs	r1, r2
 800a366:	0018      	movs	r0, r3
 800a368:	f7fe fd37 	bl	8008dda <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a36c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a36e:	0018      	movs	r0, r3
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20000cc4 	.word	0x20000cc4
 800a378:	20000618 	.word	0x20000618
 800a37c:	200008dc 	.word	0x200008dc

0800a380 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a384:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a386:	0018      	movs	r0, r3
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6039      	str	r1, [r7, #0]
 800a394:	0011      	movs	r1, r2
 800a396:	1dfb      	adds	r3, r7, #7
 800a398:	1c02      	adds	r2, r0, #0
 800a39a:	701a      	strb	r2, [r3, #0]
 800a39c:	1d3b      	adds	r3, r7, #4
 800a39e:	1c0a      	adds	r2, r1, #0
 800a3a0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3a2:	1dfb      	adds	r3, r7, #7
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b23      	cmp	r3, #35	; 0x23
 800a3a8:	d804      	bhi.n	800a3b4 <CDC_Control_FS+0x28>
 800a3aa:	009a      	lsls	r2, r3, #2
 800a3ac:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <CDC_Control_FS+0x34>)
 800a3ae:	18d3      	adds	r3, r2, r3
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3b4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800a3b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	b002      	add	sp, #8
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800b7e0 	.word	0x0800b7e0

0800a3c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800a3ce:	4b18      	ldr	r3, [pc, #96]	; (800a430 <CDC_Receive_FS+0x6c>)
 800a3d0:	785a      	ldrb	r2, [r3, #1]
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	705a      	strb	r2, [r3, #1]

  for(uint8_t i = 0; i < *Len; i++)
 800a3d8:	230f      	movs	r3, #15
 800a3da:	18fb      	adds	r3, r7, r3
 800a3dc:	2200      	movs	r2, #0
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e00f      	b.n	800a402 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <CDC_Receive_FS+0x70>)
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	240f      	movs	r4, #15
 800a3e8:	193b      	adds	r3, r7, r4
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	18d3      	adds	r3, r2, r3
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	0019      	movs	r1, r3
 800a3f4:	f7f6 feac 	bl	8001150 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800a3f8:	193b      	adds	r3, r7, r4
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	193b      	adds	r3, r7, r4
 800a3fe:	3201      	adds	r2, #1
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	230f      	movs	r3, #15
 800a404:	18fb      	adds	r3, r7, r3
 800a406:	781a      	ldrb	r2, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d3e8      	bcc.n	800a3e2 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <CDC_Receive_FS+0x74>)
 800a414:	0011      	movs	r1, r2
 800a416:	0018      	movs	r0, r3
 800a418:	f7fe fcdf 	bl	8008dda <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <CDC_Receive_FS+0x74>)
 800a41e:	0018      	movs	r0, r3
 800a420:	f7fe fd26 	bl	8008e70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a424:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a426:	0018      	movs	r0, r3
 800a428:	46bd      	mov	sp, r7
 800a42a:	b005      	add	sp, #20
 800a42c:	bd90      	pop	{r4, r7, pc}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	2000058c 	.word	0x2000058c
 800a434:	200010ac 	.word	0x200010ac
 800a438:	20000618 	.word	0x20000618

0800a43c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a43c:	b5b0      	push	{r4, r5, r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	000a      	movs	r2, r1
 800a446:	1cbb      	adds	r3, r7, #2
 800a448:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a44a:	230f      	movs	r3, #15
 800a44c:	18fb      	adds	r3, r7, r3
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a452:	4a11      	ldr	r2, [pc, #68]	; (800a498 <CDC_Transmit_FS+0x5c>)
 800a454:	23ae      	movs	r3, #174	; 0xae
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	58d3      	ldr	r3, [r2, r3]
 800a45a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	2385      	movs	r3, #133	; 0x85
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	58d3      	ldr	r3, [r2, r3]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a468:	2301      	movs	r3, #1
 800a46a:	e010      	b.n	800a48e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a46c:	1cbb      	adds	r3, r7, #2
 800a46e:	881a      	ldrh	r2, [r3, #0]
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <CDC_Transmit_FS+0x5c>)
 800a474:	0018      	movs	r0, r3
 800a476:	f7fe fc94 	bl	8008da2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a47a:	250f      	movs	r5, #15
 800a47c:	197c      	adds	r4, r7, r5
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <CDC_Transmit_FS+0x5c>)
 800a480:	0018      	movs	r0, r3
 800a482:	f7fe fcbe 	bl	8008e02 <USBD_CDC_TransmitPacket>
 800a486:	0003      	movs	r3, r0
 800a488:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a48a:	197b      	adds	r3, r7, r5
 800a48c:	781b      	ldrb	r3, [r3, #0]
}
 800a48e:	0018      	movs	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	b004      	add	sp, #16
 800a494:	bdb0      	pop	{r4, r5, r7, pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	20000618 	.word	0x20000618

0800a49c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	6039      	str	r1, [r7, #0]
 800a4a6:	1dfb      	adds	r3, r7, #7
 800a4a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2212      	movs	r2, #18
 800a4ae:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	b002      	add	sp, #8
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	20000148 	.word	0x20000148

0800a4c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	0002      	movs	r2, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	1dfb      	adds	r3, r7, #7
 800a4cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4d4:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	b002      	add	sp, #8
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	2000015c 	.word	0x2000015c

0800a4e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	0002      	movs	r2, r0
 800a4ec:	6039      	str	r1, [r7, #0]
 800a4ee:	1dfb      	adds	r3, r7, #7
 800a4f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a4f2:	1dfb      	adds	r3, r7, #7
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4908      	ldr	r1, [pc, #32]	; (800a520 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <USBD_FS_ProductStrDescriptor+0x40>)
 800a500:	0018      	movs	r0, r3
 800a502:	f7ff fdf4 	bl	800a0ee <USBD_GetString>
 800a506:	e005      	b.n	800a514 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	4905      	ldr	r1, [pc, #20]	; (800a520 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <USBD_FS_ProductStrDescriptor+0x40>)
 800a50e:	0018      	movs	r0, r3
 800a510:	f7ff fded 	bl	800a0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a514:	4b02      	ldr	r3, [pc, #8]	; (800a520 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a516:	0018      	movs	r0, r3
 800a518:	46bd      	mov	sp, r7
 800a51a:	b002      	add	sp, #8
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	200010b0 	.word	0x200010b0
 800a524:	0800b720 	.word	0x0800b720

0800a528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	0002      	movs	r2, r0
 800a530:	6039      	str	r1, [r7, #0]
 800a532:	1dfb      	adds	r3, r7, #7
 800a534:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4904      	ldr	r1, [pc, #16]	; (800a54c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a53c:	0018      	movs	r0, r3
 800a53e:	f7ff fdd6 	bl	800a0ee <USBD_GetString>
  return USBD_StrDesc;
 800a542:	4b02      	ldr	r3, [pc, #8]	; (800a54c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a544:	0018      	movs	r0, r3
 800a546:	46bd      	mov	sp, r7
 800a548:	b002      	add	sp, #8
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200010b0 	.word	0x200010b0
 800a550:	0800b738 	.word	0x0800b738

0800a554 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	0002      	movs	r2, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	221a      	movs	r2, #26
 800a566:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a568:	f000 f84c 	bl	800a604 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a56e:	0018      	movs	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	b002      	add	sp, #8
 800a574:	bd80      	pop	{r7, pc}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	20000160 	.word	0x20000160

0800a57c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	0002      	movs	r2, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	1dfb      	adds	r3, r7, #7
 800a588:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a58a:	1dfb      	adds	r3, r7, #7
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4908      	ldr	r1, [pc, #32]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <USBD_FS_ConfigStrDescriptor+0x40>)
 800a598:	0018      	movs	r0, r3
 800a59a:	f7ff fda8 	bl	800a0ee <USBD_GetString>
 800a59e:	e005      	b.n	800a5ac <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	4905      	ldr	r1, [pc, #20]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <USBD_FS_ConfigStrDescriptor+0x40>)
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	f7ff fda1 	bl	800a0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	b002      	add	sp, #8
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	46c0      	nop			; (mov r8, r8)
 800a5b8:	200010b0 	.word	0x200010b0
 800a5bc:	0800b74c 	.word	0x0800b74c

0800a5c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	0002      	movs	r2, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	1dfb      	adds	r3, r7, #7
 800a5cc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a5ce:	1dfb      	adds	r3, r7, #7
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d106      	bne.n	800a5e4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4908      	ldr	r1, [pc, #32]	; (800a5fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a5da:	4b09      	ldr	r3, [pc, #36]	; (800a600 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f7ff fd86 	bl	800a0ee <USBD_GetString>
 800a5e2:	e005      	b.n	800a5f0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4905      	ldr	r1, [pc, #20]	; (800a5fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7ff fd7f 	bl	800a0ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5f0:	4b02      	ldr	r3, [pc, #8]	; (800a5fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b002      	add	sp, #8
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			; (mov r8, r8)
 800a5fc:	200010b0 	.word	0x200010b0
 800a600:	0800b758 	.word	0x0800b758

0800a604 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a60a:	4b10      	ldr	r3, [pc, #64]	; (800a64c <Get_SerialNum+0x48>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a610:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <Get_SerialNum+0x4c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a616:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <Get_SerialNum+0x50>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	18d3      	adds	r3, r2, r3
 800a622:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00b      	beq.n	800a642 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a62a:	490b      	ldr	r1, [pc, #44]	; (800a658 <Get_SerialNum+0x54>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2208      	movs	r2, #8
 800a630:	0018      	movs	r0, r3
 800a632:	f000 f815 	bl	800a660 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a636:	4909      	ldr	r1, [pc, #36]	; (800a65c <Get_SerialNum+0x58>)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2204      	movs	r2, #4
 800a63c:	0018      	movs	r0, r3
 800a63e:	f000 f80f 	bl	800a660 <IntToUnicode>
  }
}
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	46bd      	mov	sp, r7
 800a646:	b004      	add	sp, #16
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	1ffff7ac 	.word	0x1ffff7ac
 800a650:	1ffff7b0 	.word	0x1ffff7b0
 800a654:	1ffff7b4 	.word	0x1ffff7b4
 800a658:	20000162 	.word	0x20000162
 800a65c:	20000172 	.word	0x20000172

0800a660 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	1dfb      	adds	r3, r7, #7
 800a66c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a66e:	2117      	movs	r1, #23
 800a670:	187b      	adds	r3, r7, r1
 800a672:	2200      	movs	r2, #0
 800a674:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a676:	187b      	adds	r3, r7, r1
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	e02f      	b.n	800a6de <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	0f1b      	lsrs	r3, r3, #28
 800a682:	2b09      	cmp	r3, #9
 800a684:	d80d      	bhi.n	800a6a2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	0f1b      	lsrs	r3, r3, #28
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	2317      	movs	r3, #23
 800a68e:	18fb      	adds	r3, r7, r3
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	0019      	movs	r1, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	185b      	adds	r3, r3, r1
 800a69a:	3230      	adds	r2, #48	; 0x30
 800a69c:	b2d2      	uxtb	r2, r2
 800a69e:	701a      	strb	r2, [r3, #0]
 800a6a0:	e00c      	b.n	800a6bc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	0f1b      	lsrs	r3, r3, #28
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	2317      	movs	r3, #23
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	0019      	movs	r1, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	185b      	adds	r3, r3, r1
 800a6b6:	3237      	adds	r2, #55	; 0x37
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6c2:	2117      	movs	r1, #23
 800a6c4:	187b      	adds	r3, r7, r1
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	18d3      	adds	r3, r2, r3
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6d4:	187b      	adds	r3, r7, r1
 800a6d6:	781a      	ldrb	r2, [r3, #0]
 800a6d8:	187b      	adds	r3, r7, r1
 800a6da:	3201      	adds	r2, #1
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	2317      	movs	r3, #23
 800a6e0:	18fa      	adds	r2, r7, r3
 800a6e2:	1dfb      	adds	r3, r7, #7
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d3c8      	bcc.n	800a67e <IntToUnicode+0x1e>
  }
}
 800a6ec:	46c0      	nop			; (mov r8, r8)
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	b006      	add	sp, #24
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a0e      	ldr	r2, [pc, #56]	; (800a740 <HAL_PCD_MspInit+0x48>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d115      	bne.n	800a736 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a70a:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <HAL_PCD_MspInit+0x4c>)
 800a70c:	69da      	ldr	r2, [r3, #28]
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <HAL_PCD_MspInit+0x4c>)
 800a710:	2180      	movs	r1, #128	; 0x80
 800a712:	0409      	lsls	r1, r1, #16
 800a714:	430a      	orrs	r2, r1
 800a716:	61da      	str	r2, [r3, #28]
 800a718:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <HAL_PCD_MspInit+0x4c>)
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	4013      	ands	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	201f      	movs	r0, #31
 800a72c:	f7f7 fb5c 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a730:	201f      	movs	r0, #31
 800a732:	f7f7 fb6e 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	46bd      	mov	sp, r7
 800a73a:	b004      	add	sp, #16
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	40005c00 	.word	0x40005c00
 800a744:	40021000 	.word	0x40021000

0800a748 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	23bc      	movs	r3, #188	; 0xbc
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	58d2      	ldr	r2, [r2, r3]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	21ac      	movs	r1, #172	; 0xac
 800a75c:	0089      	lsls	r1, r1, #2
 800a75e:	468c      	mov	ip, r1
 800a760:	4463      	add	r3, ip
 800a762:	0019      	movs	r1, r3
 800a764:	0010      	movs	r0, r2
 800a766:	f7fe fc55 	bl	8009014 <USBD_LL_SetupStage>
}
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b002      	add	sp, #8
 800a770:	bd80      	pop	{r7, pc}

0800a772 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a772:	b590      	push	{r4, r7, lr}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	000a      	movs	r2, r1
 800a77c:	1cfb      	adds	r3, r7, #3
 800a77e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	23bc      	movs	r3, #188	; 0xbc
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	58d4      	ldr	r4, [r2, r3]
 800a788:	1cfb      	adds	r3, r7, #3
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	23be      	movs	r3, #190	; 0xbe
 800a790:	0059      	lsls	r1, r3, #1
 800a792:	0013      	movs	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	189b      	adds	r3, r3, r2
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	18c3      	adds	r3, r0, r3
 800a79c:	185b      	adds	r3, r3, r1
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	1cfb      	adds	r3, r7, #3
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	0019      	movs	r1, r3
 800a7a6:	0020      	movs	r0, r4
 800a7a8:	f7fe fc92 	bl	80090d0 <USBD_LL_DataOutStage>
}
 800a7ac:	46c0      	nop			; (mov r8, r8)
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b003      	add	sp, #12
 800a7b2:	bd90      	pop	{r4, r7, pc}

0800a7b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	000a      	movs	r2, r1
 800a7be:	1cfb      	adds	r3, r7, #3
 800a7c0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	23bc      	movs	r3, #188	; 0xbc
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	58d0      	ldr	r0, [r2, r3]
 800a7ca:	1cfb      	adds	r3, r7, #3
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	0013      	movs	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	18cb      	adds	r3, r1, r3
 800a7da:	333c      	adds	r3, #60	; 0x3c
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	1cfb      	adds	r3, r7, #3
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	0019      	movs	r1, r3
 800a7e4:	f7fe fcf6 	bl	80091d4 <USBD_LL_DataInStage>
}
 800a7e8:	46c0      	nop			; (mov r8, r8)
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b002      	add	sp, #8
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	23bc      	movs	r3, #188	; 0xbc
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	58d3      	ldr	r3, [r2, r3]
 800a800:	0018      	movs	r0, r3
 800a802:	f7fe fe2d 	bl	8009460 <USBD_LL_SOF>
}
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	46bd      	mov	sp, r7
 800a80a:	b002      	add	sp, #8
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a816:	230f      	movs	r3, #15
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	2201      	movs	r2, #1
 800a81c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d001      	beq.n	800a82a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a826:	f7f6 fc59 	bl	80010dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	23bc      	movs	r3, #188	; 0xbc
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	58d2      	ldr	r2, [r2, r3]
 800a832:	230f      	movs	r3, #15
 800a834:	18fb      	adds	r3, r7, r3
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	0019      	movs	r1, r3
 800a83a:	0010      	movs	r0, r2
 800a83c:	f7fe fdcf 	bl	80093de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	23bc      	movs	r3, #188	; 0xbc
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	58d3      	ldr	r3, [r2, r3]
 800a848:	0018      	movs	r0, r3
 800a84a:	f7fe fd80 	bl	800934e <USBD_LL_Reset>
}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	b004      	add	sp, #16
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	23bc      	movs	r3, #188	; 0xbc
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	58d3      	ldr	r3, [r2, r3]
 800a868:	0018      	movs	r0, r3
 800a86a:	f7fe fdc9 	bl	8009400 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <HAL_PCD_SuspendCallback+0x34>)
 800a878:	691a      	ldr	r2, [r3, #16]
 800a87a:	4b04      	ldr	r3, [pc, #16]	; (800a88c <HAL_PCD_SuspendCallback+0x34>)
 800a87c:	2106      	movs	r1, #6
 800a87e:	430a      	orrs	r2, r1
 800a880:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800a882:	46c0      	nop			; (mov r8, r8)
 800a884:	46bd      	mov	sp, r7
 800a886:	b002      	add	sp, #8
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	46c0      	nop			; (mov r8, r8)
 800a88c:	e000ed00 	.word	0xe000ed00

0800a890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d007      	beq.n	800a8b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8a0:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <HAL_PCD_ResumeCallback+0x38>)
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	4b08      	ldr	r3, [pc, #32]	; (800a8c8 <HAL_PCD_ResumeCallback+0x38>)
 800a8a6:	2106      	movs	r1, #6
 800a8a8:	438a      	bics	r2, r1
 800a8aa:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a8ac:	f000 fa44 	bl	800ad38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	23bc      	movs	r3, #188	; 0xbc
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	58d3      	ldr	r3, [r2, r3]
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	f7fe fdb9 	bl	8009430 <USBD_LL_Resume>
}
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	b002      	add	sp, #8
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	e000ed00 	.word	0xe000ed00

0800a8cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8d4:	4a2d      	ldr	r2, [pc, #180]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8d6:	23bc      	movs	r3, #188	; 0xbc
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	23b0      	movs	r3, #176	; 0xb0
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4929      	ldr	r1, [pc, #164]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8e6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800a8e8:	4b28      	ldr	r3, [pc, #160]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8ea:	4a29      	ldr	r2, [pc, #164]	; (800a990 <USBD_LL_Init+0xc4>)
 800a8ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8ee:	4b27      	ldr	r3, [pc, #156]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8f4:	4b25      	ldr	r3, [pc, #148]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8fa:	4b24      	ldr	r3, [pc, #144]	; (800a98c <USBD_LL_Init+0xc0>)
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a900:	4b22      	ldr	r3, [pc, #136]	; (800a98c <USBD_LL_Init+0xc0>)
 800a902:	2200      	movs	r2, #0
 800a904:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a906:	4b21      	ldr	r3, [pc, #132]	; (800a98c <USBD_LL_Init+0xc0>)
 800a908:	2200      	movs	r2, #0
 800a90a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a90c:	4b1f      	ldr	r3, [pc, #124]	; (800a98c <USBD_LL_Init+0xc0>)
 800a90e:	2200      	movs	r2, #0
 800a910:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a912:	4b1e      	ldr	r3, [pc, #120]	; (800a98c <USBD_LL_Init+0xc0>)
 800a914:	0018      	movs	r0, r3
 800a916:	f7f7 fe07 	bl	8002528 <HAL_PCD_Init>
 800a91a:	1e03      	subs	r3, r0, #0
 800a91c:	d001      	beq.n	800a922 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800a91e:	f7f6 fbdd 	bl	80010dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	23b0      	movs	r3, #176	; 0xb0
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	58d0      	ldr	r0, [r2, r3]
 800a92a:	2318      	movs	r3, #24
 800a92c:	2200      	movs	r2, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	f7f9 fbe8 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	23b0      	movs	r3, #176	; 0xb0
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	58d0      	ldr	r0, [r2, r3]
 800a93c:	2358      	movs	r3, #88	; 0x58
 800a93e:	2200      	movs	r2, #0
 800a940:	2180      	movs	r1, #128	; 0x80
 800a942:	f7f9 fbdf 	bl	8004104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	23b0      	movs	r3, #176	; 0xb0
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	58d0      	ldr	r0, [r2, r3]
 800a94e:	23c0      	movs	r3, #192	; 0xc0
 800a950:	2200      	movs	r2, #0
 800a952:	2181      	movs	r1, #129	; 0x81
 800a954:	f7f9 fbd6 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	23b0      	movs	r3, #176	; 0xb0
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	58d0      	ldr	r0, [r2, r3]
 800a960:	2388      	movs	r3, #136	; 0x88
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	2200      	movs	r2, #0
 800a966:	2101      	movs	r1, #1
 800a968:	f7f9 fbcc 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	23b0      	movs	r3, #176	; 0xb0
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	58d0      	ldr	r0, [r2, r3]
 800a974:	2380      	movs	r3, #128	; 0x80
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	2200      	movs	r2, #0
 800a97a:	2182      	movs	r1, #130	; 0x82
 800a97c:	f7f9 fbc2 	bl	8004104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	0018      	movs	r0, r3
 800a984:	46bd      	mov	sp, r7
 800a986:	b002      	add	sp, #8
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	200012b0 	.word	0x200012b0
 800a990:	40005c00 	.word	0x40005c00

0800a994 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99c:	210f      	movs	r1, #15
 800a99e:	187b      	adds	r3, r7, r1
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a4:	260e      	movs	r6, #14
 800a9a6:	19bb      	adds	r3, r7, r6
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	23b0      	movs	r3, #176	; 0xb0
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	58d3      	ldr	r3, [r2, r3]
 800a9b4:	000d      	movs	r5, r1
 800a9b6:	187c      	adds	r4, r7, r1
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f7f7 fec5 	bl	8002748 <HAL_PCD_Start>
 800a9be:	0003      	movs	r3, r0
 800a9c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c2:	19bc      	adds	r4, r7, r6
 800a9c4:	197b      	adds	r3, r7, r5
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	f000 f9bc 	bl	800ad46 <USBD_Get_USB_Status>
 800a9ce:	0003      	movs	r3, r0
 800a9d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a9d2:	19bb      	adds	r3, r7, r6
 800a9d4:	781b      	ldrb	r3, [r3, #0]
}
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b005      	add	sp, #20
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	000c      	movs	r4, r1
 800a9e8:	0010      	movs	r0, r2
 800a9ea:	0019      	movs	r1, r3
 800a9ec:	1cfb      	adds	r3, r7, #3
 800a9ee:	1c22      	adds	r2, r4, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	1cbb      	adds	r3, r7, #2
 800a9f4:	1c02      	adds	r2, r0, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
 800a9f8:	003b      	movs	r3, r7
 800a9fa:	1c0a      	adds	r2, r1, #0
 800a9fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fe:	260f      	movs	r6, #15
 800aa00:	19bb      	adds	r3, r7, r6
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa06:	250e      	movs	r5, #14
 800aa08:	197b      	adds	r3, r7, r5
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	23b0      	movs	r3, #176	; 0xb0
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	58d0      	ldr	r0, [r2, r3]
 800aa16:	19bc      	adds	r4, r7, r6
 800aa18:	1cbb      	adds	r3, r7, #2
 800aa1a:	781d      	ldrb	r5, [r3, #0]
 800aa1c:	003b      	movs	r3, r7
 800aa1e:	881a      	ldrh	r2, [r3, #0]
 800aa20:	1cfb      	adds	r3, r7, #3
 800aa22:	7819      	ldrb	r1, [r3, #0]
 800aa24:	002b      	movs	r3, r5
 800aa26:	f7f8 f85c 	bl	8002ae2 <HAL_PCD_EP_Open>
 800aa2a:	0003      	movs	r3, r0
 800aa2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2e:	250e      	movs	r5, #14
 800aa30:	197c      	adds	r4, r7, r5
 800aa32:	19bb      	adds	r3, r7, r6
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	0018      	movs	r0, r3
 800aa38:	f000 f985 	bl	800ad46 <USBD_Get_USB_Status>
 800aa3c:	0003      	movs	r3, r0
 800aa3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aa40:	197b      	adds	r3, r7, r5
 800aa42:	781b      	ldrb	r3, [r3, #0]
}
 800aa44:	0018      	movs	r0, r3
 800aa46:	46bd      	mov	sp, r7
 800aa48:	b005      	add	sp, #20
 800aa4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	000a      	movs	r2, r1
 800aa56:	1cfb      	adds	r3, r7, #3
 800aa58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5a:	210f      	movs	r1, #15
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	2200      	movs	r2, #0
 800aa60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa62:	260e      	movs	r6, #14
 800aa64:	19bb      	adds	r3, r7, r6
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	23b0      	movs	r3, #176	; 0xb0
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	58d2      	ldr	r2, [r2, r3]
 800aa72:	000d      	movs	r5, r1
 800aa74:	187c      	adds	r4, r7, r1
 800aa76:	1cfb      	adds	r3, r7, #3
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	0019      	movs	r1, r3
 800aa7c:	0010      	movs	r0, r2
 800aa7e:	f7f8 f8a8 	bl	8002bd2 <HAL_PCD_EP_Close>
 800aa82:	0003      	movs	r3, r0
 800aa84:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa86:	19bc      	adds	r4, r7, r6
 800aa88:	197b      	adds	r3, r7, r5
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f000 f95a 	bl	800ad46 <USBD_Get_USB_Status>
 800aa92:	0003      	movs	r3, r0
 800aa94:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aa96:	19bb      	adds	r3, r7, r6
 800aa98:	781b      	ldrb	r3, [r3, #0]
}
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	b005      	add	sp, #20
 800aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaa2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	000a      	movs	r2, r1
 800aaac:	1cfb      	adds	r3, r7, #3
 800aaae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	210f      	movs	r1, #15
 800aab2:	187b      	adds	r3, r7, r1
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab8:	260e      	movs	r6, #14
 800aaba:	19bb      	adds	r3, r7, r6
 800aabc:	2200      	movs	r2, #0
 800aabe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	23b0      	movs	r3, #176	; 0xb0
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	58d2      	ldr	r2, [r2, r3]
 800aac8:	000d      	movs	r5, r1
 800aaca:	187c      	adds	r4, r7, r1
 800aacc:	1cfb      	adds	r3, r7, #3
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	0019      	movs	r1, r3
 800aad2:	0010      	movs	r0, r2
 800aad4:	f7f8 f974 	bl	8002dc0 <HAL_PCD_EP_SetStall>
 800aad8:	0003      	movs	r3, r0
 800aada:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aadc:	19bc      	adds	r4, r7, r6
 800aade:	197b      	adds	r3, r7, r5
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	0018      	movs	r0, r3
 800aae4:	f000 f92f 	bl	800ad46 <USBD_Get_USB_Status>
 800aae8:	0003      	movs	r3, r0
 800aaea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aaec:	19bb      	adds	r3, r7, r6
 800aaee:	781b      	ldrb	r3, [r3, #0]
}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b005      	add	sp, #20
 800aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	000a      	movs	r2, r1
 800ab02:	1cfb      	adds	r3, r7, #3
 800ab04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab06:	210f      	movs	r1, #15
 800ab08:	187b      	adds	r3, r7, r1
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0e:	260e      	movs	r6, #14
 800ab10:	19bb      	adds	r3, r7, r6
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	23b0      	movs	r3, #176	; 0xb0
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	58d2      	ldr	r2, [r2, r3]
 800ab1e:	000d      	movs	r5, r1
 800ab20:	187c      	adds	r4, r7, r1
 800ab22:	1cfb      	adds	r3, r7, #3
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	0019      	movs	r1, r3
 800ab28:	0010      	movs	r0, r2
 800ab2a:	f7f8 f9a5 	bl	8002e78 <HAL_PCD_EP_ClrStall>
 800ab2e:	0003      	movs	r3, r0
 800ab30:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab32:	19bc      	adds	r4, r7, r6
 800ab34:	197b      	adds	r3, r7, r5
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f000 f904 	bl	800ad46 <USBD_Get_USB_Status>
 800ab3e:	0003      	movs	r3, r0
 800ab40:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ab42:	19bb      	adds	r3, r7, r6
 800ab44:	781b      	ldrb	r3, [r3, #0]
}
 800ab46:	0018      	movs	r0, r3
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	b005      	add	sp, #20
 800ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab4e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	000a      	movs	r2, r1
 800ab58:	1cfb      	adds	r3, r7, #3
 800ab5a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	23b0      	movs	r3, #176	; 0xb0
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	58d3      	ldr	r3, [r2, r3]
 800ab64:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab66:	1cfb      	adds	r3, r7, #3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	b25b      	sxtb	r3, r3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da0d      	bge.n	800ab8c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab70:	1cfb      	adds	r3, r7, #3
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	227f      	movs	r2, #127	; 0x7f
 800ab76:	4013      	ands	r3, r2
 800ab78:	68f9      	ldr	r1, [r7, #12]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	0013      	movs	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	189b      	adds	r3, r3, r2
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	18cb      	adds	r3, r1, r3
 800ab86:	3302      	adds	r3, #2
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	e00d      	b.n	800aba8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab8c:	1cfb      	adds	r3, r7, #3
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	227f      	movs	r2, #127	; 0x7f
 800ab92:	401a      	ands	r2, r3
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	23b5      	movs	r3, #181	; 0xb5
 800ab98:	0059      	lsls	r1, r3, #1
 800ab9a:	0013      	movs	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	189b      	adds	r3, r3, r2
 800aba0:	00db      	lsls	r3, r3, #3
 800aba2:	18c3      	adds	r3, r0, r3
 800aba4:	185b      	adds	r3, r3, r1
 800aba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aba8:	0018      	movs	r0, r3
 800abaa:	46bd      	mov	sp, r7
 800abac:	b004      	add	sp, #16
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	000a      	movs	r2, r1
 800abba:	1cfb      	adds	r3, r7, #3
 800abbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbe:	210f      	movs	r1, #15
 800abc0:	187b      	adds	r3, r7, r1
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc6:	260e      	movs	r6, #14
 800abc8:	19bb      	adds	r3, r7, r6
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	23b0      	movs	r3, #176	; 0xb0
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	58d2      	ldr	r2, [r2, r3]
 800abd6:	000d      	movs	r5, r1
 800abd8:	187c      	adds	r4, r7, r1
 800abda:	1cfb      	adds	r3, r7, #3
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	0019      	movs	r1, r3
 800abe0:	0010      	movs	r0, r2
 800abe2:	f7f7 ff53 	bl	8002a8c <HAL_PCD_SetAddress>
 800abe6:	0003      	movs	r3, r0
 800abe8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abea:	19bc      	adds	r4, r7, r6
 800abec:	197b      	adds	r3, r7, r5
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	0018      	movs	r0, r3
 800abf2:	f000 f8a8 	bl	800ad46 <USBD_Get_USB_Status>
 800abf6:	0003      	movs	r3, r0
 800abf8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800abfa:	19bb      	adds	r3, r7, r6
 800abfc:	781b      	ldrb	r3, [r3, #0]
}
 800abfe:	0018      	movs	r0, r3
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b005      	add	sp, #20
 800ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	0008      	movs	r0, r1
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	0019      	movs	r1, r3
 800ac14:	230b      	movs	r3, #11
 800ac16:	18fb      	adds	r3, r7, r3
 800ac18:	1c02      	adds	r2, r0, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	2408      	movs	r4, #8
 800ac1e:	193b      	adds	r3, r7, r4
 800ac20:	1c0a      	adds	r2, r1, #0
 800ac22:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac24:	2117      	movs	r1, #23
 800ac26:	187b      	adds	r3, r7, r1
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac2c:	2516      	movs	r5, #22
 800ac2e:	197b      	adds	r3, r7, r5
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	23b0      	movs	r3, #176	; 0xb0
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	58d0      	ldr	r0, [r2, r3]
 800ac3c:	193b      	adds	r3, r7, r4
 800ac3e:	881d      	ldrh	r5, [r3, #0]
 800ac40:	000e      	movs	r6, r1
 800ac42:	187c      	adds	r4, r7, r1
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	230b      	movs	r3, #11
 800ac48:	18fb      	adds	r3, r7, r3
 800ac4a:	7819      	ldrb	r1, [r3, #0]
 800ac4c:	002b      	movs	r3, r5
 800ac4e:	f7f8 f86e 	bl	8002d2e <HAL_PCD_EP_Transmit>
 800ac52:	0003      	movs	r3, r0
 800ac54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac56:	2516      	movs	r5, #22
 800ac58:	197c      	adds	r4, r7, r5
 800ac5a:	19bb      	adds	r3, r7, r6
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	0018      	movs	r0, r3
 800ac60:	f000 f871 	bl	800ad46 <USBD_Get_USB_Status>
 800ac64:	0003      	movs	r3, r0
 800ac66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac68:	197b      	adds	r3, r7, r5
 800ac6a:	781b      	ldrb	r3, [r3, #0]
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b007      	add	sp, #28
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	0008      	movs	r0, r1
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	0019      	movs	r1, r3
 800ac82:	230b      	movs	r3, #11
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	1c02      	adds	r2, r0, #0
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	2408      	movs	r4, #8
 800ac8c:	193b      	adds	r3, r7, r4
 800ac8e:	1c0a      	adds	r2, r1, #0
 800ac90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac92:	2117      	movs	r1, #23
 800ac94:	187b      	adds	r3, r7, r1
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9a:	2516      	movs	r5, #22
 800ac9c:	197b      	adds	r3, r7, r5
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	23b0      	movs	r3, #176	; 0xb0
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	58d0      	ldr	r0, [r2, r3]
 800acaa:	193b      	adds	r3, r7, r4
 800acac:	881d      	ldrh	r5, [r3, #0]
 800acae:	000e      	movs	r6, r1
 800acb0:	187c      	adds	r4, r7, r1
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	230b      	movs	r3, #11
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	7819      	ldrb	r1, [r3, #0]
 800acba:	002b      	movs	r3, r5
 800acbc:	f7f7 ffda 	bl	8002c74 <HAL_PCD_EP_Receive>
 800acc0:	0003      	movs	r3, r0
 800acc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc4:	2516      	movs	r5, #22
 800acc6:	197c      	adds	r4, r7, r5
 800acc8:	19bb      	adds	r3, r7, r6
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	0018      	movs	r0, r3
 800acce:	f000 f83a 	bl	800ad46 <USBD_Get_USB_Status>
 800acd2:	0003      	movs	r3, r0
 800acd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800acd6:	197b      	adds	r3, r7, r5
 800acd8:	781b      	ldrb	r3, [r3, #0]
}
 800acda:	0018      	movs	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	b007      	add	sp, #28
 800ace0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ace2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	000a      	movs	r2, r1
 800acec:	1cfb      	adds	r3, r7, #3
 800acee:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	23b0      	movs	r3, #176	; 0xb0
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	58d2      	ldr	r2, [r2, r3]
 800acf8:	1cfb      	adds	r3, r7, #3
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	0019      	movs	r1, r3
 800acfe:	0010      	movs	r0, r2
 800ad00:	f7f7 fffc 	bl	8002cfc <HAL_PCD_EP_GetRxCount>
 800ad04:	0003      	movs	r3, r0
}
 800ad06:	0018      	movs	r0, r3
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	b002      	add	sp, #8
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad18:	4b02      	ldr	r3, [pc, #8]	; (800ad24 <USBD_static_malloc+0x14>)
}
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b002      	add	sp, #8
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	20000218 	.word	0x20000218

0800ad28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b002      	add	sp, #8
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ad3c:	f7f5 fbf2 	bl	8000524 <SystemClock_Config>
}
 800ad40:	46c0      	nop			; (mov r8, r8)
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	0002      	movs	r2, r0
 800ad4e:	1dfb      	adds	r3, r7, #7
 800ad50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad52:	230f      	movs	r3, #15
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ad5a:	1dfb      	adds	r3, r7, #7
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d017      	beq.n	800ad92 <USBD_Get_USB_Status+0x4c>
 800ad62:	dc1b      	bgt.n	800ad9c <USBD_Get_USB_Status+0x56>
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d00f      	beq.n	800ad88 <USBD_Get_USB_Status+0x42>
 800ad68:	dc18      	bgt.n	800ad9c <USBD_Get_USB_Status+0x56>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <USBD_Get_USB_Status+0x2e>
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d005      	beq.n	800ad7e <USBD_Get_USB_Status+0x38>
 800ad72:	e013      	b.n	800ad9c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad74:	230f      	movs	r3, #15
 800ad76:	18fb      	adds	r3, r7, r3
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
    break;
 800ad7c:	e013      	b.n	800ada6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad7e:	230f      	movs	r3, #15
 800ad80:	18fb      	adds	r3, r7, r3
 800ad82:	2202      	movs	r2, #2
 800ad84:	701a      	strb	r2, [r3, #0]
    break;
 800ad86:	e00e      	b.n	800ada6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad88:	230f      	movs	r3, #15
 800ad8a:	18fb      	adds	r3, r7, r3
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	701a      	strb	r2, [r3, #0]
    break;
 800ad90:	e009      	b.n	800ada6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad92:	230f      	movs	r3, #15
 800ad94:	18fb      	adds	r3, r7, r3
 800ad96:	2202      	movs	r2, #2
 800ad98:	701a      	strb	r2, [r3, #0]
    break;
 800ad9a:	e004      	b.n	800ada6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ad9c:	230f      	movs	r3, #15
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	2202      	movs	r2, #2
 800ada2:	701a      	strb	r2, [r3, #0]
    break;
 800ada4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800ada6:	230f      	movs	r3, #15
 800ada8:	18fb      	adds	r3, r7, r3
 800adaa:	781b      	ldrb	r3, [r3, #0]
}
 800adac:	0018      	movs	r0, r3
 800adae:	46bd      	mov	sp, r7
 800adb0:	b004      	add	sp, #16
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <__errno>:
 800adb4:	4b01      	ldr	r3, [pc, #4]	; (800adbc <__errno+0x8>)
 800adb6:	6818      	ldr	r0, [r3, #0]
 800adb8:	4770      	bx	lr
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	2000017c 	.word	0x2000017c

0800adc0 <__libc_init_array>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	2600      	movs	r6, #0
 800adc4:	4d0c      	ldr	r5, [pc, #48]	; (800adf8 <__libc_init_array+0x38>)
 800adc6:	4c0d      	ldr	r4, [pc, #52]	; (800adfc <__libc_init_array+0x3c>)
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	42a6      	cmp	r6, r4
 800adce:	d109      	bne.n	800ade4 <__libc_init_array+0x24>
 800add0:	2600      	movs	r6, #0
 800add2:	f000 fc5b 	bl	800b68c <_init>
 800add6:	4d0a      	ldr	r5, [pc, #40]	; (800ae00 <__libc_init_array+0x40>)
 800add8:	4c0a      	ldr	r4, [pc, #40]	; (800ae04 <__libc_init_array+0x44>)
 800adda:	1b64      	subs	r4, r4, r5
 800addc:	10a4      	asrs	r4, r4, #2
 800adde:	42a6      	cmp	r6, r4
 800ade0:	d105      	bne.n	800adee <__libc_init_array+0x2e>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	00b3      	lsls	r3, r6, #2
 800ade6:	58eb      	ldr	r3, [r5, r3]
 800ade8:	4798      	blx	r3
 800adea:	3601      	adds	r6, #1
 800adec:	e7ee      	b.n	800adcc <__libc_init_array+0xc>
 800adee:	00b3      	lsls	r3, r6, #2
 800adf0:	58eb      	ldr	r3, [r5, r3]
 800adf2:	4798      	blx	r3
 800adf4:	3601      	adds	r6, #1
 800adf6:	e7f2      	b.n	800adde <__libc_init_array+0x1e>
 800adf8:	0800b8a4 	.word	0x0800b8a4
 800adfc:	0800b8a4 	.word	0x0800b8a4
 800ae00:	0800b8a4 	.word	0x0800b8a4
 800ae04:	0800b8a8 	.word	0x0800b8a8

0800ae08 <malloc>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	4b03      	ldr	r3, [pc, #12]	; (800ae18 <malloc+0x10>)
 800ae0c:	0001      	movs	r1, r0
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	f000 f860 	bl	800aed4 <_malloc_r>
 800ae14:	bd10      	pop	{r4, pc}
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	2000017c 	.word	0x2000017c

0800ae1c <free>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <free+0x10>)
 800ae20:	0001      	movs	r1, r0
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	f000 f80c 	bl	800ae40 <_free_r>
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	2000017c 	.word	0x2000017c

0800ae30 <memset>:
 800ae30:	0003      	movs	r3, r0
 800ae32:	1882      	adds	r2, r0, r2
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d100      	bne.n	800ae3a <memset+0xa>
 800ae38:	4770      	bx	lr
 800ae3a:	7019      	strb	r1, [r3, #0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	e7f9      	b.n	800ae34 <memset+0x4>

0800ae40 <_free_r>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	0005      	movs	r5, r0
 800ae44:	2900      	cmp	r1, #0
 800ae46:	d010      	beq.n	800ae6a <_free_r+0x2a>
 800ae48:	1f0c      	subs	r4, r1, #4
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	da00      	bge.n	800ae52 <_free_r+0x12>
 800ae50:	18e4      	adds	r4, r4, r3
 800ae52:	0028      	movs	r0, r5
 800ae54:	f000 f8ce 	bl	800aff4 <__malloc_lock>
 800ae58:	4a1d      	ldr	r2, [pc, #116]	; (800aed0 <_free_r+0x90>)
 800ae5a:	6813      	ldr	r3, [r2, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d105      	bne.n	800ae6c <_free_r+0x2c>
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	6014      	str	r4, [r2, #0]
 800ae64:	0028      	movs	r0, r5
 800ae66:	f000 f8cd 	bl	800b004 <__malloc_unlock>
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	d908      	bls.n	800ae82 <_free_r+0x42>
 800ae70:	6821      	ldr	r1, [r4, #0]
 800ae72:	1860      	adds	r0, r4, r1
 800ae74:	4283      	cmp	r3, r0
 800ae76:	d1f3      	bne.n	800ae60 <_free_r+0x20>
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	1841      	adds	r1, r0, r1
 800ae7e:	6021      	str	r1, [r4, #0]
 800ae80:	e7ee      	b.n	800ae60 <_free_r+0x20>
 800ae82:	001a      	movs	r2, r3
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <_free_r+0x4e>
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	d9f9      	bls.n	800ae82 <_free_r+0x42>
 800ae8e:	6811      	ldr	r1, [r2, #0]
 800ae90:	1850      	adds	r0, r2, r1
 800ae92:	42a0      	cmp	r0, r4
 800ae94:	d10b      	bne.n	800aeae <_free_r+0x6e>
 800ae96:	6820      	ldr	r0, [r4, #0]
 800ae98:	1809      	adds	r1, r1, r0
 800ae9a:	1850      	adds	r0, r2, r1
 800ae9c:	6011      	str	r1, [r2, #0]
 800ae9e:	4283      	cmp	r3, r0
 800aea0:	d1e0      	bne.n	800ae64 <_free_r+0x24>
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	1841      	adds	r1, r0, r1
 800aea8:	6011      	str	r1, [r2, #0]
 800aeaa:	6053      	str	r3, [r2, #4]
 800aeac:	e7da      	b.n	800ae64 <_free_r+0x24>
 800aeae:	42a0      	cmp	r0, r4
 800aeb0:	d902      	bls.n	800aeb8 <_free_r+0x78>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	e7d5      	b.n	800ae64 <_free_r+0x24>
 800aeb8:	6821      	ldr	r1, [r4, #0]
 800aeba:	1860      	adds	r0, r4, r1
 800aebc:	4283      	cmp	r3, r0
 800aebe:	d103      	bne.n	800aec8 <_free_r+0x88>
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	1841      	adds	r1, r0, r1
 800aec6:	6021      	str	r1, [r4, #0]
 800aec8:	6063      	str	r3, [r4, #4]
 800aeca:	6054      	str	r4, [r2, #4]
 800aecc:	e7ca      	b.n	800ae64 <_free_r+0x24>
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	20000438 	.word	0x20000438

0800aed4 <_malloc_r>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	2303      	movs	r3, #3
 800aed8:	1ccd      	adds	r5, r1, #3
 800aeda:	439d      	bics	r5, r3
 800aedc:	3508      	adds	r5, #8
 800aede:	0006      	movs	r6, r0
 800aee0:	2d0c      	cmp	r5, #12
 800aee2:	d21f      	bcs.n	800af24 <_malloc_r+0x50>
 800aee4:	250c      	movs	r5, #12
 800aee6:	42a9      	cmp	r1, r5
 800aee8:	d81e      	bhi.n	800af28 <_malloc_r+0x54>
 800aeea:	0030      	movs	r0, r6
 800aeec:	f000 f882 	bl	800aff4 <__malloc_lock>
 800aef0:	4925      	ldr	r1, [pc, #148]	; (800af88 <_malloc_r+0xb4>)
 800aef2:	680a      	ldr	r2, [r1, #0]
 800aef4:	0014      	movs	r4, r2
 800aef6:	2c00      	cmp	r4, #0
 800aef8:	d11a      	bne.n	800af30 <_malloc_r+0x5c>
 800aefa:	4f24      	ldr	r7, [pc, #144]	; (800af8c <_malloc_r+0xb8>)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <_malloc_r+0x38>
 800af02:	0021      	movs	r1, r4
 800af04:	0030      	movs	r0, r6
 800af06:	f000 f843 	bl	800af90 <_sbrk_r>
 800af0a:	6038      	str	r0, [r7, #0]
 800af0c:	0029      	movs	r1, r5
 800af0e:	0030      	movs	r0, r6
 800af10:	f000 f83e 	bl	800af90 <_sbrk_r>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d12b      	bne.n	800af70 <_malloc_r+0x9c>
 800af18:	230c      	movs	r3, #12
 800af1a:	0030      	movs	r0, r6
 800af1c:	6033      	str	r3, [r6, #0]
 800af1e:	f000 f871 	bl	800b004 <__malloc_unlock>
 800af22:	e003      	b.n	800af2c <_malloc_r+0x58>
 800af24:	2d00      	cmp	r5, #0
 800af26:	dade      	bge.n	800aee6 <_malloc_r+0x12>
 800af28:	230c      	movs	r3, #12
 800af2a:	6033      	str	r3, [r6, #0]
 800af2c:	2000      	movs	r0, #0
 800af2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	1b5b      	subs	r3, r3, r5
 800af34:	d419      	bmi.n	800af6a <_malloc_r+0x96>
 800af36:	2b0b      	cmp	r3, #11
 800af38:	d903      	bls.n	800af42 <_malloc_r+0x6e>
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	18e4      	adds	r4, r4, r3
 800af3e:	6025      	str	r5, [r4, #0]
 800af40:	e003      	b.n	800af4a <_malloc_r+0x76>
 800af42:	6863      	ldr	r3, [r4, #4]
 800af44:	42a2      	cmp	r2, r4
 800af46:	d10e      	bne.n	800af66 <_malloc_r+0x92>
 800af48:	600b      	str	r3, [r1, #0]
 800af4a:	0030      	movs	r0, r6
 800af4c:	f000 f85a 	bl	800b004 <__malloc_unlock>
 800af50:	0020      	movs	r0, r4
 800af52:	2207      	movs	r2, #7
 800af54:	300b      	adds	r0, #11
 800af56:	1d23      	adds	r3, r4, #4
 800af58:	4390      	bics	r0, r2
 800af5a:	1ac2      	subs	r2, r0, r3
 800af5c:	4298      	cmp	r0, r3
 800af5e:	d0e6      	beq.n	800af2e <_malloc_r+0x5a>
 800af60:	1a1b      	subs	r3, r3, r0
 800af62:	50a3      	str	r3, [r4, r2]
 800af64:	e7e3      	b.n	800af2e <_malloc_r+0x5a>
 800af66:	6053      	str	r3, [r2, #4]
 800af68:	e7ef      	b.n	800af4a <_malloc_r+0x76>
 800af6a:	0022      	movs	r2, r4
 800af6c:	6864      	ldr	r4, [r4, #4]
 800af6e:	e7c2      	b.n	800aef6 <_malloc_r+0x22>
 800af70:	2303      	movs	r3, #3
 800af72:	1cc4      	adds	r4, r0, #3
 800af74:	439c      	bics	r4, r3
 800af76:	42a0      	cmp	r0, r4
 800af78:	d0e1      	beq.n	800af3e <_malloc_r+0x6a>
 800af7a:	1a21      	subs	r1, r4, r0
 800af7c:	0030      	movs	r0, r6
 800af7e:	f000 f807 	bl	800af90 <_sbrk_r>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	d1db      	bne.n	800af3e <_malloc_r+0x6a>
 800af86:	e7c7      	b.n	800af18 <_malloc_r+0x44>
 800af88:	20000438 	.word	0x20000438
 800af8c:	2000043c 	.word	0x2000043c

0800af90 <_sbrk_r>:
 800af90:	2300      	movs	r3, #0
 800af92:	b570      	push	{r4, r5, r6, lr}
 800af94:	4d06      	ldr	r5, [pc, #24]	; (800afb0 <_sbrk_r+0x20>)
 800af96:	0004      	movs	r4, r0
 800af98:	0008      	movs	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f6 fb60 	bl	8001660 <_sbrk>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d103      	bne.n	800afac <_sbrk_r+0x1c>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d000      	beq.n	800afac <_sbrk_r+0x1c>
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	bd70      	pop	{r4, r5, r6, pc}
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	200015a4 	.word	0x200015a4

0800afb4 <siprintf>:
 800afb4:	b40e      	push	{r1, r2, r3}
 800afb6:	b500      	push	{lr}
 800afb8:	490b      	ldr	r1, [pc, #44]	; (800afe8 <siprintf+0x34>)
 800afba:	b09c      	sub	sp, #112	; 0x70
 800afbc:	ab1d      	add	r3, sp, #116	; 0x74
 800afbe:	9002      	str	r0, [sp, #8]
 800afc0:	9006      	str	r0, [sp, #24]
 800afc2:	9107      	str	r1, [sp, #28]
 800afc4:	9104      	str	r1, [sp, #16]
 800afc6:	4809      	ldr	r0, [pc, #36]	; (800afec <siprintf+0x38>)
 800afc8:	4909      	ldr	r1, [pc, #36]	; (800aff0 <siprintf+0x3c>)
 800afca:	cb04      	ldmia	r3!, {r2}
 800afcc:	9105      	str	r1, [sp, #20]
 800afce:	6800      	ldr	r0, [r0, #0]
 800afd0:	a902      	add	r1, sp, #8
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	f000 f880 	bl	800b0d8 <_svfiprintf_r>
 800afd8:	2300      	movs	r3, #0
 800afda:	9a02      	ldr	r2, [sp, #8]
 800afdc:	7013      	strb	r3, [r2, #0]
 800afde:	b01c      	add	sp, #112	; 0x70
 800afe0:	bc08      	pop	{r3}
 800afe2:	b003      	add	sp, #12
 800afe4:	4718      	bx	r3
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	7fffffff 	.word	0x7fffffff
 800afec:	2000017c 	.word	0x2000017c
 800aff0:	ffff0208 	.word	0xffff0208

0800aff4 <__malloc_lock>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	4802      	ldr	r0, [pc, #8]	; (800b000 <__malloc_lock+0xc>)
 800aff8:	f000 faf0 	bl	800b5dc <__retarget_lock_acquire_recursive>
 800affc:	bd10      	pop	{r4, pc}
 800affe:	46c0      	nop			; (mov r8, r8)
 800b000:	200015ac 	.word	0x200015ac

0800b004 <__malloc_unlock>:
 800b004:	b510      	push	{r4, lr}
 800b006:	4802      	ldr	r0, [pc, #8]	; (800b010 <__malloc_unlock+0xc>)
 800b008:	f000 fae9 	bl	800b5de <__retarget_lock_release_recursive>
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	200015ac 	.word	0x200015ac

0800b014 <__ssputs_r>:
 800b014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b016:	688e      	ldr	r6, [r1, #8]
 800b018:	b085      	sub	sp, #20
 800b01a:	0007      	movs	r7, r0
 800b01c:	000c      	movs	r4, r1
 800b01e:	9203      	str	r2, [sp, #12]
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	429e      	cmp	r6, r3
 800b024:	d83c      	bhi.n	800b0a0 <__ssputs_r+0x8c>
 800b026:	2390      	movs	r3, #144	; 0x90
 800b028:	898a      	ldrh	r2, [r1, #12]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	421a      	tst	r2, r3
 800b02e:	d034      	beq.n	800b09a <__ssputs_r+0x86>
 800b030:	2503      	movs	r5, #3
 800b032:	6909      	ldr	r1, [r1, #16]
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	1a5b      	subs	r3, r3, r1
 800b038:	9302      	str	r3, [sp, #8]
 800b03a:	6963      	ldr	r3, [r4, #20]
 800b03c:	9802      	ldr	r0, [sp, #8]
 800b03e:	435d      	muls	r5, r3
 800b040:	0feb      	lsrs	r3, r5, #31
 800b042:	195d      	adds	r5, r3, r5
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	106d      	asrs	r5, r5, #1
 800b048:	3301      	adds	r3, #1
 800b04a:	181b      	adds	r3, r3, r0
 800b04c:	42ab      	cmp	r3, r5
 800b04e:	d900      	bls.n	800b052 <__ssputs_r+0x3e>
 800b050:	001d      	movs	r5, r3
 800b052:	0553      	lsls	r3, r2, #21
 800b054:	d532      	bpl.n	800b0bc <__ssputs_r+0xa8>
 800b056:	0029      	movs	r1, r5
 800b058:	0038      	movs	r0, r7
 800b05a:	f7ff ff3b 	bl	800aed4 <_malloc_r>
 800b05e:	1e06      	subs	r6, r0, #0
 800b060:	d109      	bne.n	800b076 <__ssputs_r+0x62>
 800b062:	230c      	movs	r3, #12
 800b064:	603b      	str	r3, [r7, #0]
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	2001      	movs	r0, #1
 800b06a:	89a2      	ldrh	r2, [r4, #12]
 800b06c:	4240      	negs	r0, r0
 800b06e:	4313      	orrs	r3, r2
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	b005      	add	sp, #20
 800b074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b076:	9a02      	ldr	r2, [sp, #8]
 800b078:	6921      	ldr	r1, [r4, #16]
 800b07a:	f000 fabc 	bl	800b5f6 <memcpy>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	4a14      	ldr	r2, [pc, #80]	; (800b0d4 <__ssputs_r+0xc0>)
 800b082:	401a      	ands	r2, r3
 800b084:	2380      	movs	r3, #128	; 0x80
 800b086:	4313      	orrs	r3, r2
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	6126      	str	r6, [r4, #16]
 800b08e:	18f6      	adds	r6, r6, r3
 800b090:	6026      	str	r6, [r4, #0]
 800b092:	6165      	str	r5, [r4, #20]
 800b094:	9e01      	ldr	r6, [sp, #4]
 800b096:	1aed      	subs	r5, r5, r3
 800b098:	60a5      	str	r5, [r4, #8]
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	429e      	cmp	r6, r3
 800b09e:	d900      	bls.n	800b0a2 <__ssputs_r+0x8e>
 800b0a0:	9e01      	ldr	r6, [sp, #4]
 800b0a2:	0032      	movs	r2, r6
 800b0a4:	9903      	ldr	r1, [sp, #12]
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	f000 faae 	bl	800b608 <memmove>
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	1b9b      	subs	r3, r3, r6
 800b0b2:	60a3      	str	r3, [r4, #8]
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	199e      	adds	r6, r3, r6
 800b0b8:	6026      	str	r6, [r4, #0]
 800b0ba:	e7da      	b.n	800b072 <__ssputs_r+0x5e>
 800b0bc:	002a      	movs	r2, r5
 800b0be:	0038      	movs	r0, r7
 800b0c0:	f000 fab5 	bl	800b62e <_realloc_r>
 800b0c4:	1e06      	subs	r6, r0, #0
 800b0c6:	d1e0      	bne.n	800b08a <__ssputs_r+0x76>
 800b0c8:	0038      	movs	r0, r7
 800b0ca:	6921      	ldr	r1, [r4, #16]
 800b0cc:	f7ff feb8 	bl	800ae40 <_free_r>
 800b0d0:	e7c7      	b.n	800b062 <__ssputs_r+0x4e>
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	fffffb7f 	.word	0xfffffb7f

0800b0d8 <_svfiprintf_r>:
 800b0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0da:	b0a1      	sub	sp, #132	; 0x84
 800b0dc:	9003      	str	r0, [sp, #12]
 800b0de:	001d      	movs	r5, r3
 800b0e0:	898b      	ldrh	r3, [r1, #12]
 800b0e2:	000f      	movs	r7, r1
 800b0e4:	0016      	movs	r6, r2
 800b0e6:	061b      	lsls	r3, r3, #24
 800b0e8:	d511      	bpl.n	800b10e <_svfiprintf_r+0x36>
 800b0ea:	690b      	ldr	r3, [r1, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10e      	bne.n	800b10e <_svfiprintf_r+0x36>
 800b0f0:	2140      	movs	r1, #64	; 0x40
 800b0f2:	f7ff feef 	bl	800aed4 <_malloc_r>
 800b0f6:	6038      	str	r0, [r7, #0]
 800b0f8:	6138      	str	r0, [r7, #16]
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d105      	bne.n	800b10a <_svfiprintf_r+0x32>
 800b0fe:	230c      	movs	r3, #12
 800b100:	9a03      	ldr	r2, [sp, #12]
 800b102:	3801      	subs	r0, #1
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	b021      	add	sp, #132	; 0x84
 800b108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10a:	2340      	movs	r3, #64	; 0x40
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	2300      	movs	r3, #0
 800b110:	ac08      	add	r4, sp, #32
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	3320      	adds	r3, #32
 800b116:	7663      	strb	r3, [r4, #25]
 800b118:	3310      	adds	r3, #16
 800b11a:	76a3      	strb	r3, [r4, #26]
 800b11c:	9507      	str	r5, [sp, #28]
 800b11e:	0035      	movs	r5, r6
 800b120:	782b      	ldrb	r3, [r5, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <_svfiprintf_r+0x52>
 800b126:	2b25      	cmp	r3, #37	; 0x25
 800b128:	d147      	bne.n	800b1ba <_svfiprintf_r+0xe2>
 800b12a:	1bab      	subs	r3, r5, r6
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	42b5      	cmp	r5, r6
 800b130:	d00c      	beq.n	800b14c <_svfiprintf_r+0x74>
 800b132:	0032      	movs	r2, r6
 800b134:	0039      	movs	r1, r7
 800b136:	9803      	ldr	r0, [sp, #12]
 800b138:	f7ff ff6c 	bl	800b014 <__ssputs_r>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d100      	bne.n	800b142 <_svfiprintf_r+0x6a>
 800b140:	e0ae      	b.n	800b2a0 <_svfiprintf_r+0x1c8>
 800b142:	6962      	ldr	r2, [r4, #20]
 800b144:	9b05      	ldr	r3, [sp, #20]
 800b146:	4694      	mov	ip, r2
 800b148:	4463      	add	r3, ip
 800b14a:	6163      	str	r3, [r4, #20]
 800b14c:	782b      	ldrb	r3, [r5, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d100      	bne.n	800b154 <_svfiprintf_r+0x7c>
 800b152:	e0a5      	b.n	800b2a0 <_svfiprintf_r+0x1c8>
 800b154:	2201      	movs	r2, #1
 800b156:	2300      	movs	r3, #0
 800b158:	4252      	negs	r2, r2
 800b15a:	6062      	str	r2, [r4, #4]
 800b15c:	a904      	add	r1, sp, #16
 800b15e:	3254      	adds	r2, #84	; 0x54
 800b160:	1852      	adds	r2, r2, r1
 800b162:	1c6e      	adds	r6, r5, #1
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	60e3      	str	r3, [r4, #12]
 800b168:	60a3      	str	r3, [r4, #8]
 800b16a:	7013      	strb	r3, [r2, #0]
 800b16c:	65a3      	str	r3, [r4, #88]	; 0x58
 800b16e:	2205      	movs	r2, #5
 800b170:	7831      	ldrb	r1, [r6, #0]
 800b172:	4854      	ldr	r0, [pc, #336]	; (800b2c4 <_svfiprintf_r+0x1ec>)
 800b174:	f000 fa34 	bl	800b5e0 <memchr>
 800b178:	1c75      	adds	r5, r6, #1
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d11f      	bne.n	800b1be <_svfiprintf_r+0xe6>
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	06d3      	lsls	r3, r2, #27
 800b182:	d504      	bpl.n	800b18e <_svfiprintf_r+0xb6>
 800b184:	2353      	movs	r3, #83	; 0x53
 800b186:	a904      	add	r1, sp, #16
 800b188:	185b      	adds	r3, r3, r1
 800b18a:	2120      	movs	r1, #32
 800b18c:	7019      	strb	r1, [r3, #0]
 800b18e:	0713      	lsls	r3, r2, #28
 800b190:	d504      	bpl.n	800b19c <_svfiprintf_r+0xc4>
 800b192:	2353      	movs	r3, #83	; 0x53
 800b194:	a904      	add	r1, sp, #16
 800b196:	185b      	adds	r3, r3, r1
 800b198:	212b      	movs	r1, #43	; 0x2b
 800b19a:	7019      	strb	r1, [r3, #0]
 800b19c:	7833      	ldrb	r3, [r6, #0]
 800b19e:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a0:	d016      	beq.n	800b1d0 <_svfiprintf_r+0xf8>
 800b1a2:	0035      	movs	r5, r6
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	200a      	movs	r0, #10
 800b1a8:	68e3      	ldr	r3, [r4, #12]
 800b1aa:	782a      	ldrb	r2, [r5, #0]
 800b1ac:	1c6e      	adds	r6, r5, #1
 800b1ae:	3a30      	subs	r2, #48	; 0x30
 800b1b0:	2a09      	cmp	r2, #9
 800b1b2:	d94e      	bls.n	800b252 <_svfiprintf_r+0x17a>
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d111      	bne.n	800b1dc <_svfiprintf_r+0x104>
 800b1b8:	e017      	b.n	800b1ea <_svfiprintf_r+0x112>
 800b1ba:	3501      	adds	r5, #1
 800b1bc:	e7b0      	b.n	800b120 <_svfiprintf_r+0x48>
 800b1be:	4b41      	ldr	r3, [pc, #260]	; (800b2c4 <_svfiprintf_r+0x1ec>)
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	1ac0      	subs	r0, r0, r3
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	4083      	lsls	r3, r0
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	002e      	movs	r6, r5
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	e7ce      	b.n	800b16e <_svfiprintf_r+0x96>
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	1d19      	adds	r1, r3, #4
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	9107      	str	r1, [sp, #28]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db01      	blt.n	800b1e0 <_svfiprintf_r+0x108>
 800b1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1de:	e004      	b.n	800b1ea <_svfiprintf_r+0x112>
 800b1e0:	425b      	negs	r3, r3
 800b1e2:	60e3      	str	r3, [r4, #12]
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	782b      	ldrb	r3, [r5, #0]
 800b1ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ee:	d10a      	bne.n	800b206 <_svfiprintf_r+0x12e>
 800b1f0:	786b      	ldrb	r3, [r5, #1]
 800b1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f4:	d135      	bne.n	800b262 <_svfiprintf_r+0x18a>
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	3502      	adds	r5, #2
 800b1fa:	1d1a      	adds	r2, r3, #4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	9207      	str	r2, [sp, #28]
 800b200:	2b00      	cmp	r3, #0
 800b202:	db2b      	blt.n	800b25c <_svfiprintf_r+0x184>
 800b204:	9309      	str	r3, [sp, #36]	; 0x24
 800b206:	4e30      	ldr	r6, [pc, #192]	; (800b2c8 <_svfiprintf_r+0x1f0>)
 800b208:	2203      	movs	r2, #3
 800b20a:	0030      	movs	r0, r6
 800b20c:	7829      	ldrb	r1, [r5, #0]
 800b20e:	f000 f9e7 	bl	800b5e0 <memchr>
 800b212:	2800      	cmp	r0, #0
 800b214:	d006      	beq.n	800b224 <_svfiprintf_r+0x14c>
 800b216:	2340      	movs	r3, #64	; 0x40
 800b218:	1b80      	subs	r0, r0, r6
 800b21a:	4083      	lsls	r3, r0
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	3501      	adds	r5, #1
 800b220:	4313      	orrs	r3, r2
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	7829      	ldrb	r1, [r5, #0]
 800b226:	2206      	movs	r2, #6
 800b228:	4828      	ldr	r0, [pc, #160]	; (800b2cc <_svfiprintf_r+0x1f4>)
 800b22a:	1c6e      	adds	r6, r5, #1
 800b22c:	7621      	strb	r1, [r4, #24]
 800b22e:	f000 f9d7 	bl	800b5e0 <memchr>
 800b232:	2800      	cmp	r0, #0
 800b234:	d03c      	beq.n	800b2b0 <_svfiprintf_r+0x1d8>
 800b236:	4b26      	ldr	r3, [pc, #152]	; (800b2d0 <_svfiprintf_r+0x1f8>)
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d125      	bne.n	800b288 <_svfiprintf_r+0x1b0>
 800b23c:	2207      	movs	r2, #7
 800b23e:	9b07      	ldr	r3, [sp, #28]
 800b240:	3307      	adds	r3, #7
 800b242:	4393      	bics	r3, r2
 800b244:	3308      	adds	r3, #8
 800b246:	9307      	str	r3, [sp, #28]
 800b248:	6963      	ldr	r3, [r4, #20]
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	189b      	adds	r3, r3, r2
 800b24e:	6163      	str	r3, [r4, #20]
 800b250:	e765      	b.n	800b11e <_svfiprintf_r+0x46>
 800b252:	4343      	muls	r3, r0
 800b254:	0035      	movs	r5, r6
 800b256:	2101      	movs	r1, #1
 800b258:	189b      	adds	r3, r3, r2
 800b25a:	e7a6      	b.n	800b1aa <_svfiprintf_r+0xd2>
 800b25c:	2301      	movs	r3, #1
 800b25e:	425b      	negs	r3, r3
 800b260:	e7d0      	b.n	800b204 <_svfiprintf_r+0x12c>
 800b262:	2300      	movs	r3, #0
 800b264:	200a      	movs	r0, #10
 800b266:	001a      	movs	r2, r3
 800b268:	3501      	adds	r5, #1
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	7829      	ldrb	r1, [r5, #0]
 800b26e:	1c6e      	adds	r6, r5, #1
 800b270:	3930      	subs	r1, #48	; 0x30
 800b272:	2909      	cmp	r1, #9
 800b274:	d903      	bls.n	800b27e <_svfiprintf_r+0x1a6>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0c5      	beq.n	800b206 <_svfiprintf_r+0x12e>
 800b27a:	9209      	str	r2, [sp, #36]	; 0x24
 800b27c:	e7c3      	b.n	800b206 <_svfiprintf_r+0x12e>
 800b27e:	4342      	muls	r2, r0
 800b280:	0035      	movs	r5, r6
 800b282:	2301      	movs	r3, #1
 800b284:	1852      	adds	r2, r2, r1
 800b286:	e7f1      	b.n	800b26c <_svfiprintf_r+0x194>
 800b288:	ab07      	add	r3, sp, #28
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	003a      	movs	r2, r7
 800b28e:	0021      	movs	r1, r4
 800b290:	4b10      	ldr	r3, [pc, #64]	; (800b2d4 <_svfiprintf_r+0x1fc>)
 800b292:	9803      	ldr	r0, [sp, #12]
 800b294:	e000      	b.n	800b298 <_svfiprintf_r+0x1c0>
 800b296:	bf00      	nop
 800b298:	9004      	str	r0, [sp, #16]
 800b29a:	9b04      	ldr	r3, [sp, #16]
 800b29c:	3301      	adds	r3, #1
 800b29e:	d1d3      	bne.n	800b248 <_svfiprintf_r+0x170>
 800b2a0:	89bb      	ldrh	r3, [r7, #12]
 800b2a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b2a4:	065b      	lsls	r3, r3, #25
 800b2a6:	d400      	bmi.n	800b2aa <_svfiprintf_r+0x1d2>
 800b2a8:	e72d      	b.n	800b106 <_svfiprintf_r+0x2e>
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	4240      	negs	r0, r0
 800b2ae:	e72a      	b.n	800b106 <_svfiprintf_r+0x2e>
 800b2b0:	ab07      	add	r3, sp, #28
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	003a      	movs	r2, r7
 800b2b6:	0021      	movs	r1, r4
 800b2b8:	4b06      	ldr	r3, [pc, #24]	; (800b2d4 <_svfiprintf_r+0x1fc>)
 800b2ba:	9803      	ldr	r0, [sp, #12]
 800b2bc:	f000 f87c 	bl	800b3b8 <_printf_i>
 800b2c0:	e7ea      	b.n	800b298 <_svfiprintf_r+0x1c0>
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	0800b870 	.word	0x0800b870
 800b2c8:	0800b876 	.word	0x0800b876
 800b2cc:	0800b87a 	.word	0x0800b87a
 800b2d0:	00000000 	.word	0x00000000
 800b2d4:	0800b015 	.word	0x0800b015

0800b2d8 <_printf_common>:
 800b2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2da:	0015      	movs	r5, r2
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	688a      	ldr	r2, [r1, #8]
 800b2e0:	690b      	ldr	r3, [r1, #16]
 800b2e2:	000c      	movs	r4, r1
 800b2e4:	9000      	str	r0, [sp, #0]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	da00      	bge.n	800b2ec <_printf_common+0x14>
 800b2ea:	0013      	movs	r3, r2
 800b2ec:	0022      	movs	r2, r4
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	3243      	adds	r2, #67	; 0x43
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	2a00      	cmp	r2, #0
 800b2f6:	d001      	beq.n	800b2fc <_printf_common+0x24>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	069b      	lsls	r3, r3, #26
 800b300:	d502      	bpl.n	800b308 <_printf_common+0x30>
 800b302:	682b      	ldr	r3, [r5, #0]
 800b304:	3302      	adds	r3, #2
 800b306:	602b      	str	r3, [r5, #0]
 800b308:	6822      	ldr	r2, [r4, #0]
 800b30a:	2306      	movs	r3, #6
 800b30c:	0017      	movs	r7, r2
 800b30e:	401f      	ands	r7, r3
 800b310:	421a      	tst	r2, r3
 800b312:	d027      	beq.n	800b364 <_printf_common+0x8c>
 800b314:	0023      	movs	r3, r4
 800b316:	3343      	adds	r3, #67	; 0x43
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	1e5a      	subs	r2, r3, #1
 800b31c:	4193      	sbcs	r3, r2
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	0692      	lsls	r2, r2, #26
 800b322:	d430      	bmi.n	800b386 <_printf_common+0xae>
 800b324:	0022      	movs	r2, r4
 800b326:	9901      	ldr	r1, [sp, #4]
 800b328:	9800      	ldr	r0, [sp, #0]
 800b32a:	9e08      	ldr	r6, [sp, #32]
 800b32c:	3243      	adds	r2, #67	; 0x43
 800b32e:	47b0      	blx	r6
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d025      	beq.n	800b380 <_printf_common+0xa8>
 800b334:	2306      	movs	r3, #6
 800b336:	6820      	ldr	r0, [r4, #0]
 800b338:	682a      	ldr	r2, [r5, #0]
 800b33a:	68e1      	ldr	r1, [r4, #12]
 800b33c:	2500      	movs	r5, #0
 800b33e:	4003      	ands	r3, r0
 800b340:	2b04      	cmp	r3, #4
 800b342:	d103      	bne.n	800b34c <_printf_common+0x74>
 800b344:	1a8d      	subs	r5, r1, r2
 800b346:	43eb      	mvns	r3, r5
 800b348:	17db      	asrs	r3, r3, #31
 800b34a:	401d      	ands	r5, r3
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	6922      	ldr	r2, [r4, #16]
 800b350:	4293      	cmp	r3, r2
 800b352:	dd01      	ble.n	800b358 <_printf_common+0x80>
 800b354:	1a9b      	subs	r3, r3, r2
 800b356:	18ed      	adds	r5, r5, r3
 800b358:	2700      	movs	r7, #0
 800b35a:	42bd      	cmp	r5, r7
 800b35c:	d120      	bne.n	800b3a0 <_printf_common+0xc8>
 800b35e:	2000      	movs	r0, #0
 800b360:	e010      	b.n	800b384 <_printf_common+0xac>
 800b362:	3701      	adds	r7, #1
 800b364:	68e3      	ldr	r3, [r4, #12]
 800b366:	682a      	ldr	r2, [r5, #0]
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	42bb      	cmp	r3, r7
 800b36c:	ddd2      	ble.n	800b314 <_printf_common+0x3c>
 800b36e:	0022      	movs	r2, r4
 800b370:	2301      	movs	r3, #1
 800b372:	9901      	ldr	r1, [sp, #4]
 800b374:	9800      	ldr	r0, [sp, #0]
 800b376:	9e08      	ldr	r6, [sp, #32]
 800b378:	3219      	adds	r2, #25
 800b37a:	47b0      	blx	r6
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d1f0      	bne.n	800b362 <_printf_common+0x8a>
 800b380:	2001      	movs	r0, #1
 800b382:	4240      	negs	r0, r0
 800b384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b386:	2030      	movs	r0, #48	; 0x30
 800b388:	18e1      	adds	r1, r4, r3
 800b38a:	3143      	adds	r1, #67	; 0x43
 800b38c:	7008      	strb	r0, [r1, #0]
 800b38e:	0021      	movs	r1, r4
 800b390:	1c5a      	adds	r2, r3, #1
 800b392:	3145      	adds	r1, #69	; 0x45
 800b394:	7809      	ldrb	r1, [r1, #0]
 800b396:	18a2      	adds	r2, r4, r2
 800b398:	3243      	adds	r2, #67	; 0x43
 800b39a:	3302      	adds	r3, #2
 800b39c:	7011      	strb	r1, [r2, #0]
 800b39e:	e7c1      	b.n	800b324 <_printf_common+0x4c>
 800b3a0:	0022      	movs	r2, r4
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	9901      	ldr	r1, [sp, #4]
 800b3a6:	9800      	ldr	r0, [sp, #0]
 800b3a8:	9e08      	ldr	r6, [sp, #32]
 800b3aa:	321a      	adds	r2, #26
 800b3ac:	47b0      	blx	r6
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d0e6      	beq.n	800b380 <_printf_common+0xa8>
 800b3b2:	3701      	adds	r7, #1
 800b3b4:	e7d1      	b.n	800b35a <_printf_common+0x82>
	...

0800b3b8 <_printf_i>:
 800b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ba:	b08b      	sub	sp, #44	; 0x2c
 800b3bc:	9206      	str	r2, [sp, #24]
 800b3be:	000a      	movs	r2, r1
 800b3c0:	3243      	adds	r2, #67	; 0x43
 800b3c2:	9307      	str	r3, [sp, #28]
 800b3c4:	9005      	str	r0, [sp, #20]
 800b3c6:	9204      	str	r2, [sp, #16]
 800b3c8:	7e0a      	ldrb	r2, [r1, #24]
 800b3ca:	000c      	movs	r4, r1
 800b3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3ce:	2a78      	cmp	r2, #120	; 0x78
 800b3d0:	d806      	bhi.n	800b3e0 <_printf_i+0x28>
 800b3d2:	2a62      	cmp	r2, #98	; 0x62
 800b3d4:	d808      	bhi.n	800b3e8 <_printf_i+0x30>
 800b3d6:	2a00      	cmp	r2, #0
 800b3d8:	d100      	bne.n	800b3dc <_printf_i+0x24>
 800b3da:	e0c0      	b.n	800b55e <_printf_i+0x1a6>
 800b3dc:	2a58      	cmp	r2, #88	; 0x58
 800b3de:	d052      	beq.n	800b486 <_printf_i+0xce>
 800b3e0:	0026      	movs	r6, r4
 800b3e2:	3642      	adds	r6, #66	; 0x42
 800b3e4:	7032      	strb	r2, [r6, #0]
 800b3e6:	e022      	b.n	800b42e <_printf_i+0x76>
 800b3e8:	0010      	movs	r0, r2
 800b3ea:	3863      	subs	r0, #99	; 0x63
 800b3ec:	2815      	cmp	r0, #21
 800b3ee:	d8f7      	bhi.n	800b3e0 <_printf_i+0x28>
 800b3f0:	f7f4 fe92 	bl	8000118 <__gnu_thumb1_case_shi>
 800b3f4:	001f0016 	.word	0x001f0016
 800b3f8:	fff6fff6 	.word	0xfff6fff6
 800b3fc:	fff6fff6 	.word	0xfff6fff6
 800b400:	fff6001f 	.word	0xfff6001f
 800b404:	fff6fff6 	.word	0xfff6fff6
 800b408:	00a8fff6 	.word	0x00a8fff6
 800b40c:	009a0036 	.word	0x009a0036
 800b410:	fff6fff6 	.word	0xfff6fff6
 800b414:	fff600b9 	.word	0xfff600b9
 800b418:	fff60036 	.word	0xfff60036
 800b41c:	009efff6 	.word	0x009efff6
 800b420:	0026      	movs	r6, r4
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	3642      	adds	r6, #66	; 0x42
 800b426:	1d11      	adds	r1, r2, #4
 800b428:	6019      	str	r1, [r3, #0]
 800b42a:	6813      	ldr	r3, [r2, #0]
 800b42c:	7033      	strb	r3, [r6, #0]
 800b42e:	2301      	movs	r3, #1
 800b430:	e0a7      	b.n	800b582 <_printf_i+0x1ca>
 800b432:	6808      	ldr	r0, [r1, #0]
 800b434:	6819      	ldr	r1, [r3, #0]
 800b436:	1d0a      	adds	r2, r1, #4
 800b438:	0605      	lsls	r5, r0, #24
 800b43a:	d50b      	bpl.n	800b454 <_printf_i+0x9c>
 800b43c:	680d      	ldr	r5, [r1, #0]
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	2d00      	cmp	r5, #0
 800b442:	da03      	bge.n	800b44c <_printf_i+0x94>
 800b444:	232d      	movs	r3, #45	; 0x2d
 800b446:	9a04      	ldr	r2, [sp, #16]
 800b448:	426d      	negs	r5, r5
 800b44a:	7013      	strb	r3, [r2, #0]
 800b44c:	4b61      	ldr	r3, [pc, #388]	; (800b5d4 <_printf_i+0x21c>)
 800b44e:	270a      	movs	r7, #10
 800b450:	9303      	str	r3, [sp, #12]
 800b452:	e032      	b.n	800b4ba <_printf_i+0x102>
 800b454:	680d      	ldr	r5, [r1, #0]
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	0641      	lsls	r1, r0, #25
 800b45a:	d5f1      	bpl.n	800b440 <_printf_i+0x88>
 800b45c:	b22d      	sxth	r5, r5
 800b45e:	e7ef      	b.n	800b440 <_printf_i+0x88>
 800b460:	680d      	ldr	r5, [r1, #0]
 800b462:	6819      	ldr	r1, [r3, #0]
 800b464:	1d08      	adds	r0, r1, #4
 800b466:	6018      	str	r0, [r3, #0]
 800b468:	062e      	lsls	r6, r5, #24
 800b46a:	d501      	bpl.n	800b470 <_printf_i+0xb8>
 800b46c:	680d      	ldr	r5, [r1, #0]
 800b46e:	e003      	b.n	800b478 <_printf_i+0xc0>
 800b470:	066d      	lsls	r5, r5, #25
 800b472:	d5fb      	bpl.n	800b46c <_printf_i+0xb4>
 800b474:	680d      	ldr	r5, [r1, #0]
 800b476:	b2ad      	uxth	r5, r5
 800b478:	4b56      	ldr	r3, [pc, #344]	; (800b5d4 <_printf_i+0x21c>)
 800b47a:	270a      	movs	r7, #10
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	2a6f      	cmp	r2, #111	; 0x6f
 800b480:	d117      	bne.n	800b4b2 <_printf_i+0xfa>
 800b482:	2708      	movs	r7, #8
 800b484:	e015      	b.n	800b4b2 <_printf_i+0xfa>
 800b486:	3145      	adds	r1, #69	; 0x45
 800b488:	700a      	strb	r2, [r1, #0]
 800b48a:	4a52      	ldr	r2, [pc, #328]	; (800b5d4 <_printf_i+0x21c>)
 800b48c:	9203      	str	r2, [sp, #12]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	6821      	ldr	r1, [r4, #0]
 800b492:	ca20      	ldmia	r2!, {r5}
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	0608      	lsls	r0, r1, #24
 800b498:	d550      	bpl.n	800b53c <_printf_i+0x184>
 800b49a:	07cb      	lsls	r3, r1, #31
 800b49c:	d502      	bpl.n	800b4a4 <_printf_i+0xec>
 800b49e:	2320      	movs	r3, #32
 800b4a0:	4319      	orrs	r1, r3
 800b4a2:	6021      	str	r1, [r4, #0]
 800b4a4:	2710      	movs	r7, #16
 800b4a6:	2d00      	cmp	r5, #0
 800b4a8:	d103      	bne.n	800b4b2 <_printf_i+0xfa>
 800b4aa:	2320      	movs	r3, #32
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	439a      	bics	r2, r3
 800b4b0:	6022      	str	r2, [r4, #0]
 800b4b2:	0023      	movs	r3, r4
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	3343      	adds	r3, #67	; 0x43
 800b4b8:	701a      	strb	r2, [r3, #0]
 800b4ba:	6863      	ldr	r3, [r4, #4]
 800b4bc:	60a3      	str	r3, [r4, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	db03      	blt.n	800b4ca <_printf_i+0x112>
 800b4c2:	2204      	movs	r2, #4
 800b4c4:	6821      	ldr	r1, [r4, #0]
 800b4c6:	4391      	bics	r1, r2
 800b4c8:	6021      	str	r1, [r4, #0]
 800b4ca:	2d00      	cmp	r5, #0
 800b4cc:	d102      	bne.n	800b4d4 <_printf_i+0x11c>
 800b4ce:	9e04      	ldr	r6, [sp, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <_printf_i+0x136>
 800b4d4:	9e04      	ldr	r6, [sp, #16]
 800b4d6:	0028      	movs	r0, r5
 800b4d8:	0039      	movs	r1, r7
 800b4da:	f7f4 fead 	bl	8000238 <__aeabi_uidivmod>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	3e01      	subs	r6, #1
 800b4e2:	5c5b      	ldrb	r3, [r3, r1]
 800b4e4:	7033      	strb	r3, [r6, #0]
 800b4e6:	002b      	movs	r3, r5
 800b4e8:	0005      	movs	r5, r0
 800b4ea:	429f      	cmp	r7, r3
 800b4ec:	d9f3      	bls.n	800b4d6 <_printf_i+0x11e>
 800b4ee:	2f08      	cmp	r7, #8
 800b4f0:	d109      	bne.n	800b506 <_printf_i+0x14e>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	07db      	lsls	r3, r3, #31
 800b4f6:	d506      	bpl.n	800b506 <_printf_i+0x14e>
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	6922      	ldr	r2, [r4, #16]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	dc02      	bgt.n	800b506 <_printf_i+0x14e>
 800b500:	2330      	movs	r3, #48	; 0x30
 800b502:	3e01      	subs	r6, #1
 800b504:	7033      	strb	r3, [r6, #0]
 800b506:	9b04      	ldr	r3, [sp, #16]
 800b508:	1b9b      	subs	r3, r3, r6
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	0021      	movs	r1, r4
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	9b06      	ldr	r3, [sp, #24]
 800b516:	aa09      	add	r2, sp, #36	; 0x24
 800b518:	f7ff fede 	bl	800b2d8 <_printf_common>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d135      	bne.n	800b58c <_printf_i+0x1d4>
 800b520:	2001      	movs	r0, #1
 800b522:	4240      	negs	r0, r0
 800b524:	b00b      	add	sp, #44	; 0x2c
 800b526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b528:	2220      	movs	r2, #32
 800b52a:	6809      	ldr	r1, [r1, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	6022      	str	r2, [r4, #0]
 800b530:	0022      	movs	r2, r4
 800b532:	2178      	movs	r1, #120	; 0x78
 800b534:	3245      	adds	r2, #69	; 0x45
 800b536:	7011      	strb	r1, [r2, #0]
 800b538:	4a27      	ldr	r2, [pc, #156]	; (800b5d8 <_printf_i+0x220>)
 800b53a:	e7a7      	b.n	800b48c <_printf_i+0xd4>
 800b53c:	0648      	lsls	r0, r1, #25
 800b53e:	d5ac      	bpl.n	800b49a <_printf_i+0xe2>
 800b540:	b2ad      	uxth	r5, r5
 800b542:	e7aa      	b.n	800b49a <_printf_i+0xe2>
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	680d      	ldr	r5, [r1, #0]
 800b548:	1d10      	adds	r0, r2, #4
 800b54a:	6949      	ldr	r1, [r1, #20]
 800b54c:	6018      	str	r0, [r3, #0]
 800b54e:	6813      	ldr	r3, [r2, #0]
 800b550:	062e      	lsls	r6, r5, #24
 800b552:	d501      	bpl.n	800b558 <_printf_i+0x1a0>
 800b554:	6019      	str	r1, [r3, #0]
 800b556:	e002      	b.n	800b55e <_printf_i+0x1a6>
 800b558:	066d      	lsls	r5, r5, #25
 800b55a:	d5fb      	bpl.n	800b554 <_printf_i+0x19c>
 800b55c:	8019      	strh	r1, [r3, #0]
 800b55e:	2300      	movs	r3, #0
 800b560:	9e04      	ldr	r6, [sp, #16]
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	e7d2      	b.n	800b50c <_printf_i+0x154>
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	1d11      	adds	r1, r2, #4
 800b56a:	6019      	str	r1, [r3, #0]
 800b56c:	6816      	ldr	r6, [r2, #0]
 800b56e:	2100      	movs	r1, #0
 800b570:	0030      	movs	r0, r6
 800b572:	6862      	ldr	r2, [r4, #4]
 800b574:	f000 f834 	bl	800b5e0 <memchr>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d001      	beq.n	800b580 <_printf_i+0x1c8>
 800b57c:	1b80      	subs	r0, r0, r6
 800b57e:	6060      	str	r0, [r4, #4]
 800b580:	6863      	ldr	r3, [r4, #4]
 800b582:	6123      	str	r3, [r4, #16]
 800b584:	2300      	movs	r3, #0
 800b586:	9a04      	ldr	r2, [sp, #16]
 800b588:	7013      	strb	r3, [r2, #0]
 800b58a:	e7bf      	b.n	800b50c <_printf_i+0x154>
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	0032      	movs	r2, r6
 800b590:	9906      	ldr	r1, [sp, #24]
 800b592:	9805      	ldr	r0, [sp, #20]
 800b594:	9d07      	ldr	r5, [sp, #28]
 800b596:	47a8      	blx	r5
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d0c1      	beq.n	800b520 <_printf_i+0x168>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	079b      	lsls	r3, r3, #30
 800b5a0:	d415      	bmi.n	800b5ce <_printf_i+0x216>
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	68e0      	ldr	r0, [r4, #12]
 800b5a6:	4298      	cmp	r0, r3
 800b5a8:	dabc      	bge.n	800b524 <_printf_i+0x16c>
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	e7ba      	b.n	800b524 <_printf_i+0x16c>
 800b5ae:	0022      	movs	r2, r4
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	9906      	ldr	r1, [sp, #24]
 800b5b4:	9805      	ldr	r0, [sp, #20]
 800b5b6:	9e07      	ldr	r6, [sp, #28]
 800b5b8:	3219      	adds	r2, #25
 800b5ba:	47b0      	blx	r6
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d0af      	beq.n	800b520 <_printf_i+0x168>
 800b5c0:	3501      	adds	r5, #1
 800b5c2:	68e3      	ldr	r3, [r4, #12]
 800b5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	42ab      	cmp	r3, r5
 800b5ca:	dcf0      	bgt.n	800b5ae <_printf_i+0x1f6>
 800b5cc:	e7e9      	b.n	800b5a2 <_printf_i+0x1ea>
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	e7f7      	b.n	800b5c2 <_printf_i+0x20a>
 800b5d2:	46c0      	nop			; (mov r8, r8)
 800b5d4:	0800b881 	.word	0x0800b881
 800b5d8:	0800b892 	.word	0x0800b892

0800b5dc <__retarget_lock_acquire_recursive>:
 800b5dc:	4770      	bx	lr

0800b5de <__retarget_lock_release_recursive>:
 800b5de:	4770      	bx	lr

0800b5e0 <memchr>:
 800b5e0:	b2c9      	uxtb	r1, r1
 800b5e2:	1882      	adds	r2, r0, r2
 800b5e4:	4290      	cmp	r0, r2
 800b5e6:	d101      	bne.n	800b5ec <memchr+0xc>
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	4770      	bx	lr
 800b5ec:	7803      	ldrb	r3, [r0, #0]
 800b5ee:	428b      	cmp	r3, r1
 800b5f0:	d0fb      	beq.n	800b5ea <memchr+0xa>
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	e7f6      	b.n	800b5e4 <memchr+0x4>

0800b5f6 <memcpy>:
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d100      	bne.n	800b600 <memcpy+0xa>
 800b5fe:	bd10      	pop	{r4, pc}
 800b600:	5ccc      	ldrb	r4, [r1, r3]
 800b602:	54c4      	strb	r4, [r0, r3]
 800b604:	3301      	adds	r3, #1
 800b606:	e7f8      	b.n	800b5fa <memcpy+0x4>

0800b608 <memmove>:
 800b608:	b510      	push	{r4, lr}
 800b60a:	4288      	cmp	r0, r1
 800b60c:	d902      	bls.n	800b614 <memmove+0xc>
 800b60e:	188b      	adds	r3, r1, r2
 800b610:	4298      	cmp	r0, r3
 800b612:	d303      	bcc.n	800b61c <memmove+0x14>
 800b614:	2300      	movs	r3, #0
 800b616:	e007      	b.n	800b628 <memmove+0x20>
 800b618:	5c8b      	ldrb	r3, [r1, r2]
 800b61a:	5483      	strb	r3, [r0, r2]
 800b61c:	3a01      	subs	r2, #1
 800b61e:	d2fb      	bcs.n	800b618 <memmove+0x10>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	5ccc      	ldrb	r4, [r1, r3]
 800b624:	54c4      	strb	r4, [r0, r3]
 800b626:	3301      	adds	r3, #1
 800b628:	429a      	cmp	r2, r3
 800b62a:	d1fa      	bne.n	800b622 <memmove+0x1a>
 800b62c:	e7f8      	b.n	800b620 <memmove+0x18>

0800b62e <_realloc_r>:
 800b62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b630:	0007      	movs	r7, r0
 800b632:	000d      	movs	r5, r1
 800b634:	0016      	movs	r6, r2
 800b636:	2900      	cmp	r1, #0
 800b638:	d105      	bne.n	800b646 <_realloc_r+0x18>
 800b63a:	0011      	movs	r1, r2
 800b63c:	f7ff fc4a 	bl	800aed4 <_malloc_r>
 800b640:	0004      	movs	r4, r0
 800b642:	0020      	movs	r0, r4
 800b644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b646:	2a00      	cmp	r2, #0
 800b648:	d103      	bne.n	800b652 <_realloc_r+0x24>
 800b64a:	f7ff fbf9 	bl	800ae40 <_free_r>
 800b64e:	0034      	movs	r4, r6
 800b650:	e7f7      	b.n	800b642 <_realloc_r+0x14>
 800b652:	f000 f812 	bl	800b67a <_malloc_usable_size_r>
 800b656:	002c      	movs	r4, r5
 800b658:	42b0      	cmp	r0, r6
 800b65a:	d2f2      	bcs.n	800b642 <_realloc_r+0x14>
 800b65c:	0031      	movs	r1, r6
 800b65e:	0038      	movs	r0, r7
 800b660:	f7ff fc38 	bl	800aed4 <_malloc_r>
 800b664:	1e04      	subs	r4, r0, #0
 800b666:	d0ec      	beq.n	800b642 <_realloc_r+0x14>
 800b668:	0029      	movs	r1, r5
 800b66a:	0032      	movs	r2, r6
 800b66c:	f7ff ffc3 	bl	800b5f6 <memcpy>
 800b670:	0029      	movs	r1, r5
 800b672:	0038      	movs	r0, r7
 800b674:	f7ff fbe4 	bl	800ae40 <_free_r>
 800b678:	e7e3      	b.n	800b642 <_realloc_r+0x14>

0800b67a <_malloc_usable_size_r>:
 800b67a:	1f0b      	subs	r3, r1, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	1f18      	subs	r0, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	da01      	bge.n	800b688 <_malloc_usable_size_r+0xe>
 800b684:	580b      	ldr	r3, [r1, r0]
 800b686:	18c0      	adds	r0, r0, r3
 800b688:	4770      	bx	lr
	...

0800b68c <_init>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr

0800b698 <_fini>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr
