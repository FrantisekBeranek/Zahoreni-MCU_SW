
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800cf0c  0800cf0c  0001cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d198  0800d198  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d198  0800d198  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d198  0800d198  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001e0  0800d380  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800d380  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a554  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e1c  00000000  00000000  0004a75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0004f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00050c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc16  00000000  00000000  00052160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc4c  00000000  00000000  00071d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4515  00000000  00000000  000919c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  00135f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cef4 	.word	0x0800cef4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cef4 	.word	0x0800cef4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0a5      	sub	sp, #148	; 0x94
 800041c:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 800041e:	4bda      	ldr	r3, [pc, #872]	; (8000788 <comHandler+0x370>)
 8000420:	7a1b      	ldrb	r3, [r3, #8]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d042      	beq.n	80004b2 <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800042c:	e02e      	b.n	800048c <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 800042e:	2357      	movs	r3, #87	; 0x57
 8000430:	2220      	movs	r2, #32
 8000432:	4694      	mov	ip, r2
 8000434:	44bc      	add	ip, r7
 8000436:	4463      	add	r3, ip
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b73      	cmp	r3, #115	; 0x73
 800043c:	d008      	beq.n	8000450 <comHandler+0x38>
 800043e:	dc1f      	bgt.n	8000480 <comHandler+0x68>
 8000440:	2b70      	cmp	r3, #112	; 0x70
 8000442:	d011      	beq.n	8000468 <comHandler+0x50>
 8000444:	dc1c      	bgt.n	8000480 <comHandler+0x68>
 8000446:	2b63      	cmp	r3, #99	; 0x63
 8000448:	d008      	beq.n	800045c <comHandler+0x44>
 800044a:	2b6b      	cmp	r3, #107	; 0x6b
 800044c:	d012      	beq.n	8000474 <comHandler+0x5c>
 800044e:	e017      	b.n	8000480 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000450:	4bcd      	ldr	r3, [pc, #820]	; (8000788 <comHandler+0x370>)
 8000452:	7b1a      	ldrb	r2, [r3, #12]
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800045a:	e017      	b.n	800048c <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 800045c:	4bca      	ldr	r3, [pc, #808]	; (8000788 <comHandler+0x370>)
 800045e:	7b1a      	ldrb	r2, [r3, #12]
 8000460:	2102      	movs	r1, #2
 8000462:	430a      	orrs	r2, r1
 8000464:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000466:	e011      	b.n	800048c <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000468:	4bc7      	ldr	r3, [pc, #796]	; (8000788 <comHandler+0x370>)
 800046a:	7b1a      	ldrb	r2, [r3, #12]
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000472:	e00b      	b.n	800048c <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000474:	4bc4      	ldr	r3, [pc, #784]	; (8000788 <comHandler+0x370>)
 8000476:	7b1a      	ldrb	r2, [r3, #12]
 8000478:	2108      	movs	r1, #8
 800047a:	430a      	orrs	r2, r1
 800047c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800047e:	e005      	b.n	800048c <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000480:	4bc1      	ldr	r3, [pc, #772]	; (8000788 <comHandler+0x370>)
 8000482:	7b1a      	ldrb	r2, [r3, #12]
 8000484:	2110      	movs	r1, #16
 8000486:	430a      	orrs	r2, r1
 8000488:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800048a:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800048c:	4bbf      	ldr	r3, [pc, #764]	; (800078c <comHandler+0x374>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2257      	movs	r2, #87	; 0x57
 8000492:	2120      	movs	r1, #32
 8000494:	468c      	mov	ip, r1
 8000496:	44bc      	add	ip, r7
 8000498:	4462      	add	r2, ip
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 f928 	bl	80016f2 <pop>
 80004a2:	0003      	movs	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d1c2      	bne.n	800042e <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 80004a8:	4bb7      	ldr	r3, [pc, #732]	; (8000788 <comHandler+0x370>)
 80004aa:	7a1a      	ldrb	r2, [r3, #8]
 80004ac:	2101      	movs	r1, #1
 80004ae:	438a      	bics	r2, r1
 80004b0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 80004b2:	4bb5      	ldr	r3, [pc, #724]	; (8000788 <comHandler+0x370>)
 80004b4:	7e1b      	ldrb	r3, [r3, #24]
 80004b6:	2202      	movs	r2, #2
 80004b8:	4013      	ands	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d067      	beq.n	8000590 <comHandler+0x178>
	{
		char testPhaseChr;
		switch(currentPhase())
 80004c0:	f001 fc3e 	bl	8001d40 <currentPhase>
 80004c4:	0003      	movs	r3, r0
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d834      	bhi.n	8000534 <comHandler+0x11c>
 80004ca:	009a      	lsls	r2, r3, #2
 80004cc:	4bb0      	ldr	r3, [pc, #704]	; (8000790 <comHandler+0x378>)
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 80004d4:	2367      	movs	r3, #103	; 0x67
 80004d6:	2220      	movs	r2, #32
 80004d8:	4694      	mov	ip, r2
 80004da:	44bc      	add	ip, r7
 80004dc:	4463      	add	r3, ip
 80004de:	2273      	movs	r2, #115	; 0x73
 80004e0:	701a      	strb	r2, [r3, #0]
			break;
 80004e2:	e02f      	b.n	8000544 <comHandler+0x12c>
		case START_DONE:
			testPhaseChr = 's';
 80004e4:	2367      	movs	r3, #103	; 0x67
 80004e6:	2220      	movs	r2, #32
 80004e8:	4694      	mov	ip, r2
 80004ea:	44bc      	add	ip, r7
 80004ec:	4463      	add	r3, ip
 80004ee:	2273      	movs	r2, #115	; 0x73
 80004f0:	701a      	strb	r2, [r3, #0]
			break;
 80004f2:	e027      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80004f4:	2367      	movs	r3, #103	; 0x67
 80004f6:	2220      	movs	r2, #32
 80004f8:	4694      	mov	ip, r2
 80004fa:	44bc      	add	ip, r7
 80004fc:	4463      	add	r3, ip
 80004fe:	226d      	movs	r2, #109	; 0x6d
 8000500:	701a      	strb	r2, [r3, #0]
			break;
 8000502:	e01f      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000504:	2367      	movs	r3, #103	; 0x67
 8000506:	2220      	movs	r2, #32
 8000508:	4694      	mov	ip, r2
 800050a:	44bc      	add	ip, r7
 800050c:	4463      	add	r3, ip
 800050e:	226d      	movs	r2, #109	; 0x6d
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e017      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000514:	2367      	movs	r3, #103	; 0x67
 8000516:	2220      	movs	r2, #32
 8000518:	4694      	mov	ip, r2
 800051a:	44bc      	add	ip, r7
 800051c:	4463      	add	r3, ip
 800051e:	2262      	movs	r2, #98	; 0x62
 8000520:	701a      	strb	r2, [r3, #0]
			break;
 8000522:	e00f      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000524:	2367      	movs	r3, #103	; 0x67
 8000526:	2220      	movs	r2, #32
 8000528:	4694      	mov	ip, r2
 800052a:	44bc      	add	ip, r7
 800052c:	4463      	add	r3, ip
 800052e:	224d      	movs	r2, #77	; 0x4d
 8000530:	701a      	strb	r2, [r3, #0]
			break;
 8000532:	e007      	b.n	8000544 <comHandler+0x12c>
		default:
			testPhaseChr = 'e';
 8000534:	2367      	movs	r3, #103	; 0x67
 8000536:	2220      	movs	r2, #32
 8000538:	4694      	mov	ip, r2
 800053a:	44bc      	add	ip, r7
 800053c:	4463      	add	r3, ip
 800053e:	2265      	movs	r2, #101	; 0x65
 8000540:	701a      	strb	r2, [r3, #0]
			break;
 8000542:	46c0      	nop			; (mov r8, r8)
		}
		char txt[30];
#ifdef __APP_COMPATIBILITY__
		sprintf(txt, "#%c\n", testPhaseChr);
#else
		sprintf(txt, "Test progress #%c\n", testPhaseChr);
 8000544:	2367      	movs	r3, #103	; 0x67
 8000546:	2220      	movs	r2, #32
 8000548:	4694      	mov	ip, r2
 800054a:	44bc      	add	ip, r7
 800054c:	4463      	add	r3, ip
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4990      	ldr	r1, [pc, #576]	; (8000794 <comHandler+0x37c>)
 8000552:	2338      	movs	r3, #56	; 0x38
 8000554:	001c      	movs	r4, r3
 8000556:	2020      	movs	r0, #32
 8000558:	4684      	mov	ip, r0
 800055a:	44bc      	add	ip, r7
 800055c:	4463      	add	r3, ip
 800055e:	0018      	movs	r0, r3
 8000560:	f00c f95c 	bl	800c81c <siprintf>
#endif
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000564:	4b8c      	ldr	r3, [pc, #560]	; (8000798 <comHandler+0x380>)
 8000566:	681e      	ldr	r6, [r3, #0]
 8000568:	0023      	movs	r3, r4
 800056a:	001c      	movs	r4, r3
 800056c:	2220      	movs	r2, #32
 800056e:	4694      	mov	ip, r2
 8000570:	44bc      	add	ip, r7
 8000572:	4463      	add	r3, ip
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <strlen>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	2120      	movs	r1, #32
 8000582:	468c      	mov	ip, r1
 8000584:	44bc      	add	ip, r7
 8000586:	4463      	add	r3, ip
 8000588:	0019      	movs	r1, r3
 800058a:	0030      	movs	r0, r6
 800058c:	f001 f889 	bl	80016a2 <pushStr>
	}

	if(flags.meas.measComplete)
 8000590:	4b7d      	ldr	r3, [pc, #500]	; (8000788 <comHandler+0x370>)
 8000592:	7d1b      	ldrb	r3, [r3, #20]
 8000594:	2202      	movs	r2, #2
 8000596:	4013      	ands	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <comHandler+0x188>
 800059e:	e098      	b.n	80006d2 <comHandler+0x2ba>
	{
		if(!flags.meas.calibMeas)
 80005a0:	4b79      	ldr	r3, [pc, #484]	; (8000788 <comHandler+0x370>)
 80005a2:	7d1b      	ldrb	r3, [r3, #20]
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	4013      	ands	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11a      	bne.n	80005e4 <comHandler+0x1cc>
		{
			push(USB_Tx_Buffer, '#');
 80005ae:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <comHandler+0x380>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2123      	movs	r1, #35	; 0x23
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 f83d 	bl	8001634 <push>
			push(USB_Tx_Buffer, testNum);
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <comHandler+0x380>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b77      	ldr	r3, [pc, #476]	; (800079c <comHandler+0x384>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f001 f834 	bl	8001634 <push>
			push(USB_Tx_Buffer, '\n');
 80005cc:	4b72      	ldr	r3, [pc, #456]	; (8000798 <comHandler+0x380>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	210a      	movs	r1, #10
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f82e 	bl	8001634 <push>
			testNum++;
 80005d8:	4b70      	ldr	r3, [pc, #448]	; (800079c <comHandler+0x384>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4b6f      	ldr	r3, [pc, #444]	; (800079c <comHandler+0x384>)
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <comHandler+0x1d6>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80005e4:	4b68      	ldr	r3, [pc, #416]	; (8000788 <comHandler+0x370>)
 80005e6:	7d1a      	ldrb	r2, [r3, #20]
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	438a      	bics	r2, r1
 80005ec:	751a      	strb	r2, [r3, #20]
		}

		if(flags.meas.onlyBattery)
 80005ee:	4b66      	ldr	r3, [pc, #408]	; (8000788 <comHandler+0x370>)
 80005f0:	7d1b      	ldrb	r3, [r3, #20]
 80005f2:	2220      	movs	r2, #32
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d02c      	beq.n	8000656 <comHandler+0x23e>
		{
			char res[20] = {0};
 80005fc:	2624      	movs	r6, #36	; 0x24
 80005fe:	2320      	movs	r3, #32
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	199b      	adds	r3, r3, r6
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	2210      	movs	r2, #16
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f00c f842 	bl	800c698 <memset>
			sprintf(res, "%d;\n", ADC_Results[12]);
 8000614:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <comHandler+0x388>)
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	4962      	ldr	r1, [pc, #392]	; (80007a4 <comHandler+0x38c>)
 800061a:	0034      	movs	r4, r6
 800061c:	2320      	movs	r3, #32
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	199b      	adds	r3, r3, r6
 8000622:	0018      	movs	r0, r3
 8000624:	f00c f8fa 	bl	800c81c <siprintf>
			pushStr(USB_Tx_Buffer, res, strlen(res));
 8000628:	4b5b      	ldr	r3, [pc, #364]	; (8000798 <comHandler+0x380>)
 800062a:	681e      	ldr	r6, [r3, #0]
 800062c:	0023      	movs	r3, r4
 800062e:	001c      	movs	r4, r3
 8000630:	2220      	movs	r2, #32
 8000632:	4694      	mov	ip, r2
 8000634:	44bc      	add	ip, r7
 8000636:	4463      	add	r3, ip
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fd65 	bl	8000108 <strlen>
 800063e:	0003      	movs	r3, r0
 8000640:	001a      	movs	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	2120      	movs	r1, #32
 8000646:	468c      	mov	ip, r1
 8000648:	44bc      	add	ip, r7
 800064a:	4463      	add	r3, ip
 800064c:	0019      	movs	r1, r3
 800064e:	0030      	movs	r0, r6
 8000650:	f001 f827 	bl	80016a2 <pushStr>
 8000654:	e03d      	b.n	80006d2 <comHandler+0x2ba>
		}
		else
		{
			for(int i = 0; i < 7; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	2288      	movs	r2, #136	; 0x88
 800065a:	18ba      	adds	r2, r7, r2
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e02d      	b.n	80006bc <comHandler+0x2a4>
			{
				char res[20];
				sprintf(res, "%d;", ADC_Results[2*i]);
 8000660:	2388      	movs	r3, #136	; 0x88
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	005a      	lsls	r2, r3, #1
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <comHandler+0x388>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	58d2      	ldr	r2, [r2, r3]
 800066e:	494e      	ldr	r1, [pc, #312]	; (80007a8 <comHandler+0x390>)
 8000670:	2310      	movs	r3, #16
 8000672:	001c      	movs	r4, r3
 8000674:	2020      	movs	r0, #32
 8000676:	4684      	mov	ip, r0
 8000678:	44bc      	add	ip, r7
 800067a:	4463      	add	r3, ip
 800067c:	0018      	movs	r0, r3
 800067e:	f00c f8cd 	bl	800c81c <siprintf>
				pushStr(USB_Tx_Buffer, res, strlen(res));
 8000682:	4b45      	ldr	r3, [pc, #276]	; (8000798 <comHandler+0x380>)
 8000684:	681e      	ldr	r6, [r3, #0]
 8000686:	0023      	movs	r3, r4
 8000688:	001c      	movs	r4, r3
 800068a:	2220      	movs	r2, #32
 800068c:	4694      	mov	ip, r2
 800068e:	44bc      	add	ip, r7
 8000690:	4463      	add	r3, ip
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd38 	bl	8000108 <strlen>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	0023      	movs	r3, r4
 800069e:	2120      	movs	r1, #32
 80006a0:	468c      	mov	ip, r1
 80006a2:	44bc      	add	ip, r7
 80006a4:	4463      	add	r3, ip
 80006a6:	0019      	movs	r1, r3
 80006a8:	0030      	movs	r0, r6
 80006aa:	f000 fffa 	bl	80016a2 <pushStr>
			for(int i = 0; i < 7; i++)
 80006ae:	2388      	movs	r3, #136	; 0x88
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	2288      	movs	r2, #136	; 0x88
 80006b8:	18ba      	adds	r2, r7, r2
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	2388      	movs	r3, #136	; 0x88
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	ddcc      	ble.n	8000660 <comHandler+0x248>
			}
			push(USB_Tx_Buffer, 0x0A);
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <comHandler+0x380>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	210a      	movs	r1, #10
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 ffb1 	bl	8001634 <push>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <comHandler+0x380>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7d1b      	ldrb	r3, [r3, #20]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d112      	bne.n	8000702 <comHandler+0x2ea>
	{
		char msg[] = {"Buffer full\n"};
 80006dc:	2320      	movs	r3, #32
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	4a32      	ldr	r2, [pc, #200]	; (80007ac <comHandler+0x394>)
 80006e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e4:	c313      	stmia	r3!, {r0, r1, r4}
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80006ea:	2320      	movs	r3, #32
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fd0a 	bl	8000108 <strlen>
 80006f4:	0002      	movs	r2, r0
 80006f6:	2320      	movs	r3, #32
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f00b fad1 	bl	800bca4 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <comHandler+0x380>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d073      	beq.n	80007f4 <comHandler+0x3dc>
	{
 800070c:	466b      	mov	r3, sp
 800070e:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <comHandler+0x380>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	18ba      	adds	r2, r7, r2
 800071a:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000726:	001a      	movs	r2, r3
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	2200      	movs	r2, #0
 800072c:	60fa      	str	r2, [r7, #12]
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	0002      	movs	r2, r0
 8000734:	0f52      	lsrs	r2, r2, #29
 8000736:	000c      	movs	r4, r1
 8000738:	00e4      	lsls	r4, r4, #3
 800073a:	61fc      	str	r4, [r7, #28]
 800073c:	69fc      	ldr	r4, [r7, #28]
 800073e:	4314      	orrs	r4, r2
 8000740:	61fc      	str	r4, [r7, #28]
 8000742:	0002      	movs	r2, r0
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	61ba      	str	r2, [r7, #24]
 8000748:	001a      	movs	r2, r3
 800074a:	603a      	str	r2, [r7, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	0002      	movs	r2, r0
 8000756:	0f52      	lsrs	r2, r2, #29
 8000758:	000c      	movs	r4, r1
 800075a:	00e4      	lsls	r4, r4, #3
 800075c:	617c      	str	r4, [r7, #20]
 800075e:	697c      	ldr	r4, [r7, #20]
 8000760:	4314      	orrs	r4, r2
 8000762:	617c      	str	r4, [r7, #20]
 8000764:	0002      	movs	r2, r0
 8000766:	00d2      	lsls	r2, r2, #3
 8000768:	613a      	str	r2, [r7, #16]
 800076a:	3307      	adds	r3, #7
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	466a      	mov	r2, sp
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	469d      	mov	sp, r3
 8000776:	466b      	mov	r3, sp
 8000778:	3300      	adds	r3, #0
 800077a:	67bb      	str	r3, [r7, #120]	; 0x78
		for(int i = 0; i < size; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	228c      	movs	r2, #140	; 0x8c
 8000780:	18ba      	adds	r2, r7, r2
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e025      	b.n	80007d2 <comHandler+0x3ba>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000620 	.word	0x20000620
 800078c:	20001128 	.word	0x20001128
 8000790:	0800cfcc 	.word	0x0800cfcc
 8000794:	0800cf0c 	.word	0x0800cf0c
 8000798:	20000490 	.word	0x20000490
 800079c:	20000260 	.word	0x20000260
 80007a0:	200001fc 	.word	0x200001fc
 80007a4:	0800cf20 	.word	0x0800cf20
 80007a8:	0800cf28 	.word	0x0800cf28
 80007ac:	0800cf2c 	.word	0x0800cf2c
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <comHandler+0x3e4>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80007b6:	238c      	movs	r3, #140	; 0x8c
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	0019      	movs	r1, r3
 80007c0:	f000 ff97 	bl	80016f2 <pop>
		for(int i = 0; i < size; i++)
 80007c4:	238c      	movs	r3, #140	; 0x8c
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	228c      	movs	r2, #140	; 0x8c
 80007ce:	18ba      	adds	r2, r7, r2
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	238c      	movs	r3, #140	; 0x8c
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbe6      	blt.n	80007b0 <comHandler+0x398>
		}
		CDC_Transmit_FS(tmpStr, size);
 80007e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f00b fa59 	bl	800bca4 <CDC_Transmit_FS>
 80007f2:	46b5      	mov	sp, r6
	}

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b025      	add	sp, #148	; 0x94
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	20000490 	.word	0x20000490

08000800 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dbb      	adds	r3, r7, #6
 800080a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 800080c:	1dbb      	adds	r3, r7, #6
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	429a      	cmp	r2, r3
 8000816:	d104      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_GPIO_EXTI_Callback+0x40>)
 800081a:	791a      	ldrb	r2, [r3, #4]
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	881a      	ldrh	r2, [r3, #0]
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d104      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_GPIO_EXTI_Callback+0x40>)
 8000830:	791a      	ldrb	r2, [r3, #4]
 8000832:	2104      	movs	r1, #4
 8000834:	430a      	orrs	r2, r1
 8000836:	711a      	strb	r2, [r3, #4]
	}
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000620 	.word	0x20000620

08000844 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000850:	429a      	cmp	r2, r3
 8000852:	d104      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
	}
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200005d8 	.word	0x200005d8
 800086c:	20000620 	.word	0x20000620

08000870 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	0018      	movs	r0, r3
 800087c:	f001 ff34 	bl	80026e8 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_ADC_ConvCpltCallback+0x24>)
 8000882:	7d1a      	ldrb	r2, [r3, #20]
 8000884:	2104      	movs	r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	751a      	strb	r2, [r3, #20]
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000620 	.word	0x20000620

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f001 fcea 	bl	8002274 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fe92 	bl	80015ca <createBuffer>
 80008a6:	0002      	movs	r2, r0
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <main+0xec>)
 80008aa:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f000 fe8c 	bl	80015ca <createBuffer>
 80008b2:	0002      	movs	r2, r0
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <main+0xf0>)
 80008b6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fe84 	bl	80015ca <createBuffer>
 80008c2:	0002      	movs	r2, r0
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <main+0xf4>)
 80008c6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fe7c 	bl	80015ca <createBuffer>
 80008d2:	0002      	movs	r2, r0
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <main+0xf8>)
 80008d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f862 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 faac 	bl	8000e38 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008e0:	f00b f936 	bl	800bb50 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80008e4:	f000 f8c8 	bl	8000a78 <MX_ADC_Init>
  MX_SPI1_Init();
 80008e8:	f000 f9e4 	bl	8000cb4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80008ec:	f000 fa74 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008f0:	f000 fa26 	bl	8000d40 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <main+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fd53 	bl	80033a6 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <main+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fd4d 	bl	80033a6 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 800090c:	f000 ff68 	bl	80017e0 <regInit>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d004      	beq.n	800091e <main+0x86>
  {
	  flags.conErr = 1;
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <main+0x100>)
 8000916:	7e1a      	ldrb	r2, [r3, #24]
 8000918:	2104      	movs	r1, #4
 800091a:	430a      	orrs	r2, r1
 800091c:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <main+0x104>)
 8000920:	0018      	movs	r0, r3
 8000922:	f005 ffaf 	bl	8006884 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <main+0x100>)
 8000928:	7c1a      	ldrb	r2, [r3, #16]
 800092a:	2102      	movs	r1, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <main+0x100>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	07db      	lsls	r3, r3, #31
 8000936:	0fdb      	lsrs	r3, r3, #31
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f8      	beq.n	8000930 <main+0x98>
	  {
		  clkHandler();
 800093e:	f000 fb67 	bl	8001010 <clkHandler>
		  buttonDebounce();
 8000942:	f000 fbe3 	bl	800110c <buttonDebounce>
		  comHandler();
 8000946:	f7ff fd67 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <main+0x100>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	071b      	lsls	r3, r3, #28
 8000950:	0fdb      	lsrs	r3, r3, #31
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00e      	beq.n	8000976 <main+0xde>
		  {
			  flags.meas.measRequest = 1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <main+0x100>)
 800095a:	7d1a      	ldrb	r2, [r3, #20]
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <main+0x100>)
 8000964:	7d1a      	ldrb	r2, [r3, #20]
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	430a      	orrs	r2, r1
 800096a:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <main+0x100>)
 800096e:	7b1a      	ldrb	r2, [r3, #12]
 8000970:	2108      	movs	r1, #8
 8000972:	438a      	bics	r2, r1
 8000974:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 8000976:	f000 fc57 	bl	8001228 <UI_Handler>
		  testHandler();
 800097a:	f001 f9eb 	bl	8001d54 <testHandler>
		  measHandler();
 800097e:	f000 fd69 	bl	8001454 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000982:	e7d5      	b.n	8000930 <main+0x98>
 8000984:	20000494 	.word	0x20000494
 8000988:	20000684 	.word	0x20000684
 800098c:	20001128 	.word	0x20001128
 8000990:	20000490 	.word	0x20000490
 8000994:	48000800 	.word	0x48000800
 8000998:	20000620 	.word	0x20000620
 800099c:	200005d8 	.word	0x200005d8

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b099      	sub	sp, #100	; 0x64
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	242c      	movs	r4, #44	; 0x2c
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2334      	movs	r3, #52	; 0x34
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f00b fe71 	bl	800c698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	231c      	movs	r3, #28
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f00b fe69 	bl	800c698 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c6:	003b      	movs	r3, r7
 80009c8:	0018      	movs	r0, r3
 80009ca:	231c      	movs	r3, #28
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f00b fe62 	bl	800c698 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80009d4:	0021      	movs	r1, r4
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2232      	movs	r2, #50	; 0x32
 80009da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2201      	movs	r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2210      	movs	r2, #16
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2210      	movs	r2, #16
 80009f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0212      	lsls	r2, r2, #8
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	0352      	lsls	r2, r2, #13
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f004 fb8b 	bl	8005134 <HAL_RCC_OscConfig>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a22:	f000 fdcd 	bl	80015c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	211c      	movs	r1, #28
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2202      	movs	r2, #2
 8000a32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2101      	movs	r1, #1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f004 fefb 	bl	8005840 <HAL_RCC_ClockConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 fdb7 	bl	80015c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0292      	lsls	r2, r2, #10
 8000a58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	003b      	movs	r3, r7
 8000a62:	0018      	movs	r0, r3
 8000a64:	f005 f868 	bl	8005b38 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a6c:	f000 fda8 	bl	80015c0 <Error_Handler>
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b019      	add	sp, #100	; 0x64
 8000a76:	bd90      	pop	{r4, r7, pc}

08000a78 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	0018      	movs	r0, r3
 8000a82:	230c      	movs	r3, #12
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f00b fe06 	bl	800c698 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a8c:	4b87      	ldr	r3, [pc, #540]	; (8000cac <MX_ADC_Init+0x234>)
 8000a8e:	4a88      	ldr	r2, [pc, #544]	; (8000cb0 <MX_ADC_Init+0x238>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b86      	ldr	r3, [pc, #536]	; (8000cac <MX_ADC_Init+0x234>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b84      	ldr	r3, [pc, #528]	; (8000cac <MX_ADC_Init+0x234>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b83      	ldr	r3, [pc, #524]	; (8000cac <MX_ADC_Init+0x234>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aa4:	4b81      	ldr	r3, [pc, #516]	; (8000cac <MX_ADC_Init+0x234>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b80      	ldr	r3, [pc, #512]	; (8000cac <MX_ADC_Init+0x234>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b7e      	ldr	r3, [pc, #504]	; (8000cac <MX_ADC_Init+0x234>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab6:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <MX_ADC_Init+0x234>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <MX_ADC_Init+0x234>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b7a      	ldr	r3, [pc, #488]	; (8000cac <MX_ADC_Init+0x234>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b78      	ldr	r3, [pc, #480]	; (8000cac <MX_ADC_Init+0x234>)
 8000aca:	22c2      	movs	r2, #194	; 0xc2
 8000acc:	32ff      	adds	r2, #255	; 0xff
 8000ace:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	4b76      	ldr	r3, [pc, #472]	; (8000cac <MX_ADC_Init+0x234>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ad6:	4b75      	ldr	r3, [pc, #468]	; (8000cac <MX_ADC_Init+0x234>)
 8000ad8:	2224      	movs	r2, #36	; 0x24
 8000ada:	2100      	movs	r1, #0
 8000adc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ade:	4b73      	ldr	r3, [pc, #460]	; (8000cac <MX_ADC_Init+0x234>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ae4:	4b71      	ldr	r3, [pc, #452]	; (8000cac <MX_ADC_Init+0x234>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fc4c 	bl	8002384 <HAL_ADC_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 fd66 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0152      	lsls	r2, r2, #5
 8000b00:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2205      	movs	r2, #5
 8000b06:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b08:	1d3a      	adds	r2, r7, #4
 8000b0a:	4b68      	ldr	r3, [pc, #416]	; (8000cac <MX_ADC_Init+0x234>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ff08 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b18:	f000 fd52 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b22:	1d3a      	adds	r2, r7, #4
 8000b24:	4b61      	ldr	r3, [pc, #388]	; (8000cac <MX_ADC_Init+0x234>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fefb 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000b32:	f000 fd45 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b3c:	1d3a      	adds	r2, r7, #4
 8000b3e:	4b5b      	ldr	r3, [pc, #364]	; (8000cac <MX_ADC_Init+0x234>)
 8000b40:	0011      	movs	r1, r2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 feee 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000b4c:	f000 fd38 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2203      	movs	r2, #3
 8000b54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b56:	1d3a      	adds	r2, r7, #4
 8000b58:	4b54      	ldr	r3, [pc, #336]	; (8000cac <MX_ADC_Init+0x234>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fee1 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000b66:	f000 fd2b 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b70:	1d3a      	adds	r2, r7, #4
 8000b72:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <MX_ADC_Init+0x234>)
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fed4 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000b80:	f000 fd1e 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2205      	movs	r2, #5
 8000b88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b8a:	1d3a      	adds	r2, r7, #4
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <MX_ADC_Init+0x234>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 fec7 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000b9a:	f000 fd11 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ba4:	1d3a      	adds	r2, r7, #4
 8000ba6:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MX_ADC_Init+0x234>)
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 feba 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000bb4:	f000 fd04 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2207      	movs	r2, #7
 8000bbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_ADC_Init+0x234>)
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 fead 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8000bce:	f000 fcf7 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_ADC_Init+0x234>)
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fea0 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8000be8:	f000 fcea 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2209      	movs	r2, #9
 8000bf0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_ADC_Init+0x234>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 fe93 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8000c02:	f000 fcdd 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	220a      	movs	r2, #10
 8000c0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c0c:	1d3a      	adds	r2, r7, #4
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_ADC_Init+0x234>)
 8000c10:	0011      	movs	r1, r2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fe86 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8000c1c:	f000 fcd0 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	220b      	movs	r2, #11
 8000c24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ADC_Init+0x234>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fe79 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8000c36:	f000 fcc3 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	220c      	movs	r2, #12
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ADC_Init+0x234>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fe6c 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8000c50:	f000 fcb6 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	220d      	movs	r2, #13
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5a:	1d3a      	adds	r2, r7, #4
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_ADC_Init+0x234>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fe5f 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8000c6a:	f000 fca9 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	220e      	movs	r2, #14
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c74:	1d3a      	adds	r2, r7, #4
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_ADC_Init+0x234>)
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fe52 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8000c84:	f000 fc9c 	bl	80015c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c8e:	1d3a      	adds	r2, r7, #4
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_ADC_Init+0x234>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fe45 	bl	8002924 <HAL_ADC_ConfigChannel>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 8000c9e:	f000 fc8f 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000063c 	.word	0x2000063c
 8000cb0:	40012400 	.word	0x40012400

08000cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_SPI1_Init+0x84>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cc0:	2282      	movs	r2, #130	; 0x82
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cce:	22e0      	movs	r2, #224	; 0xe0
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f005 f80d 	bl	8005d34 <HAL_SPI_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 fc4f 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI1_Init+0x88>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb3c 	bl	80033a6 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000574 	.word	0x20000574
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	231c      	movs	r3, #28
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f00b fca2 	bl	800c698 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <MX_TIM14_Init+0x90>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d5c:	222f      	movs	r2, #47	; 0x2f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <MX_TIM14_Init+0x94>)
 8000d6a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f005 fd32 	bl	80067e4 <HAL_TIM_Base_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000d84:	f000 fc1c 	bl	80015c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f005 fdcc 	bl	8006928 <HAL_TIM_OC_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 fc14 	bl	80015c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	1d39      	adds	r1, r7, #4
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f005 ff24 	bl	8006c04 <HAL_TIM_OC_ConfigChannel>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000dc0:	f000 fbfe 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b008      	add	sp, #32
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200005d8 	.word	0x200005d8
 8000dd0:	40002000 	.word	0x40002000
 8000dd4:	0000270f 	.word	0x0000270f

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de4:	2296      	movs	r2, #150	; 0x96
 8000de6:	0212      	lsls	r2, r2, #8
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f006 f9f5 	bl	800720c <HAL_UART_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 fbcb 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200004f0 	.word	0x200004f0
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	2414      	movs	r4, #20
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2314      	movs	r3, #20
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f00b fc25 	bl	800c698 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	03c9      	lsls	r1, r1, #15
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	03db      	lsls	r3, r3, #15
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0309      	lsls	r1, r1, #12
 8000e74:	430a      	orrs	r2, r1
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	4b60      	ldr	r3, [pc, #384]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	031b      	lsls	r3, r3, #12
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	0289      	lsls	r1, r1, #10
 8000e90:	430a      	orrs	r2, r1
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	029b      	lsls	r3, r3, #10
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	4013      	ands	r3, r2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0349      	lsls	r1, r1, #13
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	035b      	lsls	r3, r3, #13
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000eda:	4949      	ldr	r1, [pc, #292]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 fa60 	bl	80033a6 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ee6:	239e      	movs	r3, #158	; 0x9e
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4847      	ldr	r0, [pc, #284]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	0019      	movs	r1, r3
 8000ef0:	f002 fa59 	bl	80033a6 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	0219      	lsls	r1, r3, #8
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2200      	movs	r2, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f002 fa51 	bl	80033a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000f08:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000f20:	0019      	movs	r1, r3
 8000f22:	0010      	movs	r0, r2
 8000f24:	f002 f8aa 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000f28:	0021      	movs	r1, r4
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	229e      	movs	r2, #158	; 0x9e
 8000f2e:	0152      	lsls	r2, r2, #5
 8000f30:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	000c      	movs	r4, r1
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2201      	movs	r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f002 f895 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	22c0      	movs	r2, #192	; 0xc0
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2288      	movs	r2, #136	; 0x88
 8000f5e:	0352      	lsls	r2, r2, #13
 8000f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2202      	movs	r2, #2
 8000f66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	193a      	adds	r2, r7, r4
 8000f6a:	2390      	movs	r3, #144	; 0x90
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 f883 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	193a      	adds	r2, r7, r4
 8000f8c:	2390      	movs	r3, #144	; 0x90
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 f872 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	0212      	lsls	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	000c      	movs	r4, r1
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	193a      	adds	r2, r7, r4
 8000fb8:	2390      	movs	r3, #144	; 0x90
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f002 f85c 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000fda:	0019      	movs	r1, r3
 8000fdc:	0010      	movs	r0, r2
 8000fde:	f002 f84d 	bl	800307c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f001 ff98 	bl	8002f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fec:	2007      	movs	r0, #7
 8000fee:	f001 ffaa 	bl	8002f46 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b00b      	add	sp, #44	; 0x2c
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40021000 	.word	0x40021000
 8001000:	0000f3c4 	.word	0x0000f3c4
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800
 800100c:	48000c00 	.word	0x48000c00

08001010 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <clkHandler+0xf4>)
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	438a      	bics	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <clkHandler+0xf4>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	2102      	movs	r1, #2
 8001024:	438a      	bics	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <clkHandler+0xf4>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	2104      	movs	r1, #4
 800102e:	438a      	bics	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <clkHandler+0xf4>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	2108      	movs	r1, #8
 8001038:	438a      	bics	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <clkHandler+0xf8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <clkHandler+0xf8>)
 8001044:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <clkHandler+0xf8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2164      	movs	r1, #100	; 0x64
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f8f3 	bl	8000238 <__aeabi_uidivmod>
 8001052:	1e0b      	subs	r3, r1, #0
 8001054:	d109      	bne.n	800106a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <clkHandler+0xf8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <clkHandler+0xf8>)
 800105e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <clkHandler+0xf4>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	2102      	movs	r1, #2
 8001066:	430a      	orrs	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <clkHandler+0xf4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	079b      	lsls	r3, r3, #30
 8001070:	0fdb      	lsrs	r3, r3, #31
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d042      	beq.n	80010fe <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <clkHandler+0xf8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	213c      	movs	r1, #60	; 0x3c
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f8da 	bl	8000238 <__aeabi_uidivmod>
 8001084:	1e0b      	subs	r3, r1, #0
 8001086:	d110      	bne.n	80010aa <clkHandler+0x9a>
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <clkHandler+0xf8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <clkHandler+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <clkHandler+0xf8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <clkHandler+0xf8>)
 800109e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <clkHandler+0xf4>)
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	2104      	movs	r1, #4
 80010a6:	430a      	orrs	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <clkHandler+0xf4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	075b      	lsls	r3, r3, #29
 80010b0:	0fdb      	lsrs	r3, r3, #31
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d022      	beq.n	80010fe <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <clkHandler+0xf8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	213c      	movs	r1, #60	; 0x3c
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff f8ba 	bl	8000238 <__aeabi_uidivmod>
 80010c4:	1e0b      	subs	r3, r1, #0
 80010c6:	d11a      	bne.n	80010fe <clkHandler+0xee>
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <clkHandler+0xf8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d016      	beq.n	80010fe <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <clkHandler+0xf8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <clkHandler+0xf8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <clkHandler+0xf8>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <clkHandler+0xf8>)
 80010e4:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <clkHandler+0xf4>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	2108      	movs	r1, #8
 80010ec:	430a      	orrs	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <clkHandler+0xf8>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b16      	cmp	r3, #22
 80010f6:	d902      	bls.n	80010fe <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <clkHandler+0xf8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000620 	.word	0x20000620
 8001108:	2000023c 	.word	0x2000023c

0800110c <buttonDebounce>:

void buttonDebounce(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	flags.buttons.butt0_ver = 0;
 8001110:	4b41      	ldr	r3, [pc, #260]	; (8001218 <buttonDebounce+0x10c>)
 8001112:	791a      	ldrb	r2, [r3, #4]
 8001114:	2102      	movs	r1, #2
 8001116:	438a      	bics	r2, r1
 8001118:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <buttonDebounce+0x10c>)
 800111c:	791a      	ldrb	r2, [r3, #4]
 800111e:	2108      	movs	r1, #8
 8001120:	438a      	bics	r2, r1
 8001122:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <buttonDebounce+0x10c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	07db      	lsls	r3, r3, #31
 800112a:	0fdb      	lsrs	r3, r3, #31
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d033      	beq.n	800119a <buttonDebounce+0x8e>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f002 f915 	bl	800336c <HAL_GPIO_ReadPin>
 8001142:	0003      	movs	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <buttonDebounce+0x110>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <buttonDebounce+0x110>)
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e007      	b.n	8001168 <buttonDebounce+0x5c>
		}
		else
		{
			button0_Debounce = 0;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <buttonDebounce+0x110>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <buttonDebounce+0x10c>)
 8001160:	791a      	ldrb	r2, [r3, #4]
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <buttonDebounce+0x110>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b04      	cmp	r3, #4
 8001170:	d913      	bls.n	800119a <buttonDebounce+0x8e>
		{
			flags.buttons.butt0_ver = 1;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <buttonDebounce+0x10c>)
 8001174:	791a      	ldrb	r2, [r3, #4]
 8001176:	2102      	movs	r1, #2
 8001178:	430a      	orrs	r2, r1
 800117a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <buttonDebounce+0x10c>)
 800117e:	791a      	ldrb	r2, [r3, #4]
 8001180:	2101      	movs	r1, #1
 8001182:	438a      	bics	r2, r1
 8001184:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <buttonDebounce+0x110>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4a23      	ldr	r2, [pc, #140]	; (8001220 <buttonDebounce+0x114>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f002 f923 	bl	80033e0 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <buttonDebounce+0x10c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	075b      	lsls	r3, r3, #29
 80011a0:	0fdb      	lsrs	r3, r3, #31
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d034      	beq.n	8001212 <buttonDebounce+0x106>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	005a      	lsls	r2, r3, #1
 80011ac:	2390      	movs	r3, #144	; 0x90
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 f8da 	bl	800336c <HAL_GPIO_ReadPin>
 80011b8:	0003      	movs	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <buttonDebounce+0xc2>
		{
			button1_Debounce++;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <buttonDebounce+0x118>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <buttonDebounce+0x118>)
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <buttonDebounce+0xd2>
		}
		else
		{
			button1_Debounce = 0;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <buttonDebounce+0x118>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <buttonDebounce+0x10c>)
 80011d6:	791a      	ldrb	r2, [r3, #4]
 80011d8:	2104      	movs	r1, #4
 80011da:	438a      	bics	r2, r1
 80011dc:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <buttonDebounce+0x118>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d914      	bls.n	8001212 <buttonDebounce+0x106>
		{
			flags.buttons.butt1_ver = 1;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <buttonDebounce+0x10c>)
 80011ea:	791a      	ldrb	r2, [r3, #4]
 80011ec:	2108      	movs	r1, #8
 80011ee:	430a      	orrs	r2, r1
 80011f0:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <buttonDebounce+0x10c>)
 80011f4:	791a      	ldrb	r2, [r3, #4]
 80011f6:	2104      	movs	r1, #4
 80011f8:	438a      	bics	r2, r1
 80011fa:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <buttonDebounce+0x118>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	021a      	lsls	r2, r3, #8
 8001206:	2390      	movs	r3, #144	; 0x90
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f002 f8e7 	bl	80033e0 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000620 	.word	0x20000620
 800121c:	2000024c 	.word	0x2000024c
 8001220:	48000400 	.word	0x48000400
 8001224:	2000024d 	.word	0x2000024d

08001228 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 800122c:	4b82      	ldr	r3, [pc, #520]	; (8001438 <UI_Handler+0x210>)
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	0fdb      	lsrs	r3, r3, #31
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <UI_Handler+0x2a>
 800123a:	4b80      	ldr	r3, [pc, #512]	; (800143c <UI_Handler+0x214>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d007      	beq.n	8001252 <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 8001242:	4b7e      	ldr	r3, [pc, #504]	; (800143c <UI_Handler+0x214>)
 8001244:	2203      	movs	r2, #3
 8001246:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001248:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <UI_Handler+0x218>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <UI_Handler+0x21c>)
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e05e      	b.n	8001310 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <UI_Handler+0x210>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	071b      	lsls	r3, r3, #28
 8001258:	0fdb      	lsrs	r3, r3, #31
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d010      	beq.n	8001282 <UI_Handler+0x5a>
 8001260:	4b76      	ldr	r3, [pc, #472]	; (800143c <UI_Handler+0x214>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001268:	4b74      	ldr	r3, [pc, #464]	; (800143c <UI_Handler+0x214>)
 800126a:	2204      	movs	r2, #4
 800126c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800126e:	4b74      	ldr	r3, [pc, #464]	; (8001440 <UI_Handler+0x218>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b74      	ldr	r3, [pc, #464]	; (8001444 <UI_Handler+0x21c>)
 8001274:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8001276:	4b70      	ldr	r3, [pc, #448]	; (8001438 <UI_Handler+0x210>)
 8001278:	7c1a      	ldrb	r2, [r3, #16]
 800127a:	2108      	movs	r1, #8
 800127c:	438a      	bics	r2, r1
 800127e:	741a      	strb	r2, [r3, #16]
 8001280:	e046      	b.n	8001310 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8001282:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <UI_Handler+0x210>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	06db      	lsls	r3, r3, #27
 8001288:	0fdb      	lsrs	r3, r3, #31
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d010      	beq.n	80012b2 <UI_Handler+0x8a>
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <UI_Handler+0x214>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <UI_Handler+0x214>)
 800129a:	2205      	movs	r2, #5
 800129c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <UI_Handler+0x218>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <UI_Handler+0x21c>)
 80012a4:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80012a6:	4b64      	ldr	r3, [pc, #400]	; (8001438 <UI_Handler+0x210>)
 80012a8:	7c1a      	ldrb	r2, [r3, #16]
 80012aa:	2110      	movs	r1, #16
 80012ac:	438a      	bics	r2, r1
 80012ae:	741a      	strb	r2, [r3, #16]
 80012b0:	e02e      	b.n	8001310 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80012b2:	4b61      	ldr	r3, [pc, #388]	; (8001438 <UI_Handler+0x210>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	079b      	lsls	r3, r3, #30
 80012b8:	0fdb      	lsrs	r3, r3, #31
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d010      	beq.n	80012e2 <UI_Handler+0xba>
 80012c0:	4b5e      	ldr	r3, [pc, #376]	; (800143c <UI_Handler+0x214>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10c      	bne.n	80012e2 <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80012c8:	4b5c      	ldr	r3, [pc, #368]	; (800143c <UI_Handler+0x214>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <UI_Handler+0x218>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <UI_Handler+0x21c>)
 80012d4:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80012d6:	4b58      	ldr	r3, [pc, #352]	; (8001438 <UI_Handler+0x210>)
 80012d8:	7c1a      	ldrb	r2, [r3, #16]
 80012da:	2102      	movs	r1, #2
 80012dc:	438a      	bics	r2, r1
 80012de:	741a      	strb	r2, [r3, #16]
 80012e0:	e016      	b.n	8001310 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <UI_Handler+0x210>)
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	07db      	lsls	r3, r3, #31
 80012e8:	0fdb      	lsrs	r3, r3, #31
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00f      	beq.n	8001310 <UI_Handler+0xe8>
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <UI_Handler+0x214>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10b      	bne.n	8001310 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <UI_Handler+0x214>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <UI_Handler+0x218>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <UI_Handler+0x21c>)
 8001304:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <UI_Handler+0x210>)
 8001308:	7c1a      	ldrb	r2, [r3, #16]
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <UI_Handler+0x214>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d900      	bls.n	800131a <UI_Handler+0xf2>
 8001318:	e07a      	b.n	8001410 <UI_Handler+0x1e8>
 800131a:	009a      	lsls	r2, r3, #2
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <UI_Handler+0x220>)
 800131e:	18d3      	adds	r3, r2, r3
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 8001324:	4b46      	ldr	r3, [pc, #280]	; (8001440 <UI_Handler+0x218>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <UI_Handler+0x21c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b31      	cmp	r3, #49	; 0x31
 8001330:	d800      	bhi.n	8001334 <UI_Handler+0x10c>
 8001332:	e075      	b.n	8001420 <UI_Handler+0x1f8>
		{
			UI_State = OFF;
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <UI_Handler+0x214>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	015b      	lsls	r3, r3, #5
 800133e:	4843      	ldr	r0, [pc, #268]	; (800144c <UI_Handler+0x224>)
 8001340:	2200      	movs	r2, #0
 8001342:	0019      	movs	r1, r3
 8001344:	f002 f82f 	bl	80033a6 <HAL_GPIO_WritePin>
		}
		break;
 8001348:	e06a      	b.n	8001420 <UI_Handler+0x1f8>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <UI_Handler+0x218>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <UI_Handler+0x21c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b63      	cmp	r3, #99	; 0x63
 8001356:	d965      	bls.n	8001424 <UI_Handler+0x1fc>
		{
			UI_State = OFF;
 8001358:	4b38      	ldr	r3, [pc, #224]	; (800143c <UI_Handler+0x214>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	015b      	lsls	r3, r3, #5
 8001362:	483a      	ldr	r0, [pc, #232]	; (800144c <UI_Handler+0x224>)
 8001364:	2200      	movs	r2, #0
 8001366:	0019      	movs	r1, r3
 8001368:	f002 f81d 	bl	80033a6 <HAL_GPIO_WritePin>
		}
		break;
 800136c:	e05a      	b.n	8001424 <UI_Handler+0x1fc>

	case ERROR:
		if(!flags.ui.error)
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <UI_Handler+0x210>)
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	075b      	lsls	r3, r3, #29
 8001374:	0fdb      	lsrs	r3, r3, #31
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <UI_Handler+0x15a>
			UI_State = OFF;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <UI_Handler+0x214>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <UI_Handler+0x218>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <UI_Handler+0x21c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2132      	movs	r1, #50	; 0x32
 800138e:	0018      	movs	r0, r3
 8001390:	f7fe ff52 	bl	8000238 <__aeabi_uidivmod>
 8001394:	1e0b      	subs	r3, r1, #0
 8001396:	d147      	bne.n	8001428 <UI_Handler+0x200>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	021a      	lsls	r2, r3, #8
 800139c:	2390      	movs	r3, #144	; 0x90
 800139e:	05db      	lsls	r3, r3, #23
 80013a0:	0011      	movs	r1, r2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f002 f81c 	bl	80033e0 <HAL_GPIO_TogglePin>
		}
		break;
 80013a8:	e03e      	b.n	8001428 <UI_Handler+0x200>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <UI_Handler+0x218>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <UI_Handler+0x21c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2123      	movs	r1, #35	; 0x23
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7fe ff3e 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <UI_Handler+0x218>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <UI_Handler+0x21c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2bd0      	cmp	r3, #208	; 0xd0
 80013c8:	d930      	bls.n	800142c <UI_Handler+0x204>
			UI_State = OFF;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <UI_Handler+0x214>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
		break;
 80013d0:	e02c      	b.n	800142c <UI_Handler+0x204>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <UI_Handler+0x218>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <UI_Handler+0x21c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2132      	movs	r1, #50	; 0x32
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe ff2a 	bl	8000238 <__aeabi_uidivmod>
 80013e4:	1e0b      	subs	r3, r1, #0
 80013e6:	d106      	bne.n	80013f6 <UI_Handler+0x1ce>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <UI_Handler+0x228>)
 80013ee:	0019      	movs	r1, r3
 80013f0:	0010      	movs	r0, r2
 80013f2:	f001 fff5 	bl	80033e0 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <UI_Handler+0x218>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <UI_Handler+0x21c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad2      	subs	r2, r2, r3
 8001400:	2395      	movs	r3, #149	; 0x95
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	429a      	cmp	r2, r3
 8001406:	d913      	bls.n	8001430 <UI_Handler+0x208>
			UI_State = OFF;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <UI_Handler+0x214>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		break;
 800140e:	e00f      	b.n	8001430 <UI_Handler+0x208>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <UI_Handler+0x224>)
 8001416:	2200      	movs	r2, #0
 8001418:	0019      	movs	r1, r3
 800141a:	f001 ffc4 	bl	80033a6 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
#endif
		break;
 800141e:	e008      	b.n	8001432 <UI_Handler+0x20a>
		break;
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	e006      	b.n	8001432 <UI_Handler+0x20a>
		break;
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	e004      	b.n	8001432 <UI_Handler+0x20a>
		break;
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	e002      	b.n	8001432 <UI_Handler+0x20a>
		break;
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	e000      	b.n	8001432 <UI_Handler+0x20a>
		break;
 8001430:	46c0      	nop			; (mov r8, r8)

	}
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000620 	.word	0x20000620
 800143c:	2000024e 	.word	0x2000024e
 8001440:	2000023c 	.word	0x2000023c
 8001444:	20000250 	.word	0x20000250
 8001448:	0800d028 	.word	0x0800d028
 800144c:	48000800 	.word	0x48000800
 8001450:	48000400 	.word	0x48000400

08001454 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	flags.meas.measComplete = 0;
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <measHandler+0x154>)
 800145a:	7d1a      	ldrb	r2, [r3, #20]
 800145c:	2102      	movs	r1, #2
 800145e:	438a      	bics	r2, r1
 8001460:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <measHandler+0x154>)
 8001464:	7d1a      	ldrb	r2, [r3, #20]
 8001466:	2110      	movs	r1, #16
 8001468:	438a      	bics	r2, r1
 800146a:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 800146c:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <measHandler+0x154>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	07db      	lsls	r3, r3, #31
 8001472:	0fdb      	lsrs	r3, r3, #31
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d049      	beq.n	800150e <measHandler+0xba>
	{
		if(!flags.meas.measRunning)
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <measHandler+0x154>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	071b      	lsls	r3, r3, #28
 8001480:	0fdb      	lsrs	r3, r3, #31
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d138      	bne.n	80014fa <measHandler+0xa6>
		{
			flags.meas.measRunning = 1;
 8001488:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <measHandler+0x154>)
 800148a:	7d1a      	ldrb	r2, [r3, #20]
 800148c:	2108      	movs	r1, #8
 800148e:	430a      	orrs	r2, r1
 8001490:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8001492:	f000 fc55 	bl	8001d40 <currentPhase>
 8001496:	0003      	movs	r3, r0
 8001498:	2b05      	cmp	r3, #5
 800149a:	d004      	beq.n	80014a6 <measHandler+0x52>
 800149c:	f000 fc50 	bl	8001d40 <currentPhase>
 80014a0:	0003      	movs	r3, r0
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d114      	bne.n	80014d0 <measHandler+0x7c>
			{
				flags.meas.onlyBattery = 1;
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <measHandler+0x154>)
 80014a8:	7d1a      	ldrb	r2, [r3, #20]
 80014aa:	2120      	movs	r1, #32
 80014ac:	430a      	orrs	r2, r1
 80014ae:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 80014b0:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <measHandler+0x158>)
 80014b2:	220d      	movs	r2, #13
 80014b4:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <measHandler+0x158>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	1e59      	subs	r1, r3, #1
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <measHandler+0x15c>)
 80014be:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <measHandler+0x160>)
 80014c0:	0089      	lsls	r1, r1, #2
 80014c2:	588a      	ldr	r2, [r1, r2]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <measHandler+0x164>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 f89b 	bl	8002604 <HAL_ADC_Start_IT>
 80014ce:	e019      	b.n	8001504 <measHandler+0xb0>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <measHandler+0x154>)
 80014d2:	7d1a      	ldrb	r2, [r3, #20]
 80014d4:	2120      	movs	r1, #32
 80014d6:	438a      	bics	r2, r1
 80014d8:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <measHandler+0x158>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <measHandler+0x158>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	1e59      	subs	r1, r3, #1
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <measHandler+0x15c>)
 80014e8:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <measHandler+0x160>)
 80014ea:	0089      	lsls	r1, r1, #2
 80014ec:	588a      	ldr	r2, [r1, r2]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <measHandler+0x164>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f001 f886 	bl	8002604 <HAL_ADC_Start_IT>
 80014f8:	e004      	b.n	8001504 <measHandler+0xb0>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <measHandler+0x154>)
 80014fc:	7d1a      	ldrb	r2, [r3, #20]
 80014fe:	2110      	movs	r1, #16
 8001500:	430a      	orrs	r2, r1
 8001502:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <measHandler+0x154>)
 8001506:	7d1a      	ldrb	r2, [r3, #20]
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <measHandler+0x158>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d045      	beq.n	80015a2 <measHandler+0x14e>
	{
		if(flags.meas.measDataReady)
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <measHandler+0x154>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	075b      	lsls	r3, r3, #29
 800151c:	0fdb      	lsrs	r3, r3, #31
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03e      	beq.n	80015a2 <measHandler+0x14e>
		{
			flags.meas.measDataReady = 0;
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <measHandler+0x154>)
 8001526:	7d1a      	ldrb	r2, [r3, #20]
 8001528:	2104      	movs	r1, #4
 800152a:	438a      	bics	r2, r1
 800152c:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <measHandler+0x158>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0d      	cmp	r3, #13
 8001534:	d118      	bne.n	8001568 <measHandler+0x114>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <measHandler+0x158>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1e5c      	subs	r4, r3, #1
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <measHandler+0x164>)
 800153e:	0018      	movs	r0, r3
 8001540:	f001 f91c 	bl	800277c <HAL_ADC_GetValue>
 8001544:	0001      	movs	r1, r0
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <measHandler+0x168>)
 8001548:	00a2      	lsls	r2, r4, #2
 800154a:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <measHandler+0x154>)
 800154e:	7d1a      	ldrb	r2, [r3, #20]
 8001550:	2102      	movs	r1, #2
 8001552:	430a      	orrs	r2, r1
 8001554:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <measHandler+0x154>)
 8001558:	7d1a      	ldrb	r2, [r3, #20]
 800155a:	2108      	movs	r1, #8
 800155c:	438a      	bics	r2, r1
 800155e:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <measHandler+0x158>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001566:	e01c      	b.n	80015a2 <measHandler+0x14e>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <measHandler+0x158>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	1e5c      	subs	r4, r3, #1
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <measHandler+0x164>)
 8001570:	0018      	movs	r0, r3
 8001572:	f001 f903 	bl	800277c <HAL_ADC_GetValue>
 8001576:	0001      	movs	r1, r0
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <measHandler+0x168>)
 800157a:	00a2      	lsls	r2, r4, #2
 800157c:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <measHandler+0x158>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3302      	adds	r3, #2
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <measHandler+0x158>)
 8001588:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <measHandler+0x158>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <measHandler+0x15c>)
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <measHandler+0x160>)
 8001594:	0089      	lsls	r1, r1, #2
 8001596:	588a      	ldr	r2, [r1, r2]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <measHandler+0x164>)
 800159c:	0018      	movs	r0, r3
 800159e:	f001 f831 	bl	8002604 <HAL_ADC_Start_IT>
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	20000620 	.word	0x20000620
 80015ac:	20000254 	.word	0x20000254
 80015b0:	40012400 	.word	0x40012400
 80015b4:	0800cfe8 	.word	0x0800cfe8
 80015b8:	2000063c 	.word	0x2000063c
 80015bc:	200001fc 	.word	0x200001fc

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>

080015ca <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80015d2:	2018      	movs	r0, #24
 80015d4:	f00b f84c 	bl	800c670 <malloc>
 80015d8:	0003      	movs	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <createBuffer+0x1c>
	{
		return NULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e022      	b.n	800162c <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f00b f841 	bl	800c670 <malloc>
 80015ee:	0003      	movs	r3, r0
 80015f0:	001a      	movs	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <createBuffer+0x40>
	{
		free(buffer);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	0018      	movs	r0, r3
 8001602:	f00b f83f 	bl	800c684 <free>
		return NULL;
 8001606:	2300      	movs	r3, #0
 8001608:	e010      	b.n	800162c <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	751a      	strb	r2, [r3, #20]

	return buffer;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}

08001634 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	000a      	movs	r2, r1
 800163e:	1cfb      	adds	r3, r7, #3
 8001640:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7d1b      	ldrb	r3, [r3, #20]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d101      	bne.n	800164e <push+0x1a>
		return BUFFER_FULL;
 800164a:	2302      	movs	r3, #2
 800164c:	e025      	b.n	800169a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0019      	movs	r1, r3
 800165a:	0010      	movs	r0, r2
 800165c:	f7fe fed6 	bl	800040c <__aeabi_idivmod>
 8001660:	000b      	movs	r3, r1
 8001662:	001a      	movs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	1cfa      	adds	r2, r7, #3
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	db01      	blt.n	8001692 <push+0x5e>
 800168e:	2202      	movs	r2, #2
 8001690:	e000      	b.n	8001694 <push+0x60>
 8001692:	2200      	movs	r2, #0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	18cb      	adds	r3, r1, r3
 80016ba:	429a      	cmp	r2, r3
 80016bc:	da01      	bge.n	80016c2 <pushStr+0x20>
		return BUFFER_FULL;
 80016be:	2302      	movs	r3, #2
 80016c0:	e013      	b.n	80016ea <pushStr+0x48>

	for(int i = 0; i < len; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e00b      	b.n	80016e0 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ffad 	bl	8001634 <push>
	for(int i = 0; i < len; i++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbef      	blt.n	80016c8 <pushStr+0x26>
	}

	return BUFFER_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b006      	add	sp, #24
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7d1b      	ldrb	r3, [r3, #20]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <pop+0x16>
		return BUFFER_EMPTY;
 8001704:	2301      	movs	r3, #1
 8001706:	e023      	b.n	8001750 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0019      	movs	r1, r3
 8001724:	0010      	movs	r0, r2
 8001726:	f7fe fe71 	bl	800040c <__aeabi_idivmod>
 800172a:	000b      	movs	r3, r1
 800172c:	001a      	movs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	4313      	orrs	r3, r2
 8001744:	0fdb      	lsrs	r3, r3, #31
 8001746:	b2db      	uxtb	r3, r3
 8001748:	001a      	movs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <getCount+0x7c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001764:	1dfb      	adds	r3, r7, #7
 8001766:	222a      	movs	r2, #42	; 0x2a
 8001768:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800176a:	1dbb      	adds	r3, r7, #6
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001770:	1dba      	adds	r2, r7, #6
 8001772:	1df9      	adds	r1, r7, #7
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <getCount+0x80>)
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	f004 fcea 	bl	8006154 <HAL_SPI_TransmitReceive>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <getCount+0x30>
			return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e021      	b.n	80017cc <getCount+0x74>
		regCount++;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <getCount+0x7c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <getCount+0x7c>)
 8001792:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f000 fdd1 	bl	800233c <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <getCount+0x7c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b63      	cmp	r3, #99	; 0x63
 80017a0:	d906      	bls.n	80017b0 <getCount+0x58>
		{
			flags.conErr = 1;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <getCount+0x84>)
 80017a4:	7e1a      	ldrb	r2, [r3, #24]
 80017a6:	2104      	movs	r1, #4
 80017a8:	430a      	orrs	r2, r1
 80017aa:	761a      	strb	r2, [r3, #24]
			return 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e00d      	b.n	80017cc <getCount+0x74>
		}
	}
	while(answer != question);
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1d3      	bne.n	8001764 <getCount+0xc>

	regCount--;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <getCount+0x7c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <getCount+0x7c>)
 80017c6:	701a      	strb	r2, [r3, #0]

	return regCount;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <getCount+0x7c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000681 	.word	0x20000681
 80017d8:	20000574 	.word	0x20000574
 80017dc:	20000620 	.word	0x20000620

080017e0 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	482f      	ldr	r0, [pc, #188]	; (80018a8 <regInit+0xc8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	0019      	movs	r1, r3
 80017f0:	f001 fdd9 	bl	80033a6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017f4:	2005      	movs	r0, #5
 80017f6:	f000 fda1 	bl	800233c <HAL_Delay>
	REG_CLR_INACTIVE;
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	482a      	ldr	r0, [pc, #168]	; (80018a8 <regInit+0xc8>)
 8001800:	2201      	movs	r2, #1
 8001802:	0019      	movs	r1, r3
 8001804:	f001 fdcf 	bl	80033a6 <HAL_GPIO_WritePin>

	REG_DISABLE;
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	4826      	ldr	r0, [pc, #152]	; (80018a8 <regInit+0xc8>)
 800180e:	2201      	movs	r2, #1
 8001810:	0019      	movs	r1, r3
 8001812:	f001 fdc8 	bl	80033a6 <HAL_GPIO_WritePin>

	if(getCount() == 0)
 8001816:	f7ff ff9f 	bl	8001758 <getCount>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d101      	bne.n	8001822 <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 800181e:	2301      	movs	r3, #1
 8001820:	e03e      	b.n	80018a0 <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <regInit+0xcc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0018      	movs	r0, r3
 8001828:	f00a ff22 	bl	800c670 <malloc>
 800182c:	0003      	movs	r3, r0
 800182e:	001a      	movs	r2, r3
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <regInit+0xd0>)
 8001832:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <regInit+0xd0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <regInit+0x66>
	{
		regState = REG_ERR;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <regInit+0xd4>)
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001842:	2302      	movs	r3, #2
 8001844:	e02c      	b.n	80018a0 <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e008      	b.n	800185e <regInit+0x7e>
	{
		regValues[i] = 0;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <regInit+0xd0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <regInit+0xcc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	001a      	movs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4293      	cmp	r3, r2
 8001868:	dbf0      	blt.n	800184c <regInit+0x6c>
	}

	sendData();
 800186a:	f000 f827 	bl	80018bc <sendData>

	REG_ENABLE;
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <regInit+0xc8>)
 8001874:	2200      	movs	r2, #0
 8001876:	0019      	movs	r1, r3
 8001878:	f001 fd95 	bl	80033a6 <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <regInit+0xd0>)
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <regInit+0xcc>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <regInit+0xd8>)
 8001888:	2364      	movs	r3, #100	; 0x64
 800188a:	f004 fb0b 	bl	8005ea4 <HAL_SPI_Transmit>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d101      	bne.n	8001896 <regInit+0xb6>
 8001892:	2200      	movs	r2, #0
 8001894:	e000      	b.n	8001898 <regInit+0xb8>
 8001896:	2202      	movs	r2, #2
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <regInit+0xd4>)
 800189a:	701a      	strb	r2, [r3, #0]
	return regState;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <regInit+0xd4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	48000400 	.word	0x48000400
 80018ac:	20000681 	.word	0x20000681
 80018b0:	2000067c 	.word	0x2000067c
 80018b4:	20000680 	.word	0x20000680
 80018b8:	20000574 	.word	0x20000574

080018bc <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <sendData+0x54>)
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <sendData+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4813      	ldr	r0, [pc, #76]	; (8001918 <sendData+0x5c>)
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	f004 fae9 	bl	8005ea4 <HAL_SPI_Transmit>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d114      	bne.n	8001900 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <sendData+0x60>)
 80018dc:	2201      	movs	r2, #1
 80018de:	0019      	movs	r1, r3
 80018e0:	f001 fd61 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 fd29 	bl	800233c <HAL_Delay>
		REG_RCLK_LOW;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	01db      	lsls	r3, r3, #7
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <sendData+0x60>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	0019      	movs	r1, r3
 80018f4:	f001 fd57 	bl	80033a6 <HAL_GPIO_WritePin>

		regState = REG_OK;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <sendData+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <sendData+0x64>)
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <sendData+0x64>)
 8001908:	781b      	ldrb	r3, [r3, #0]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000067c 	.word	0x2000067c
 8001914:	20000681 	.word	0x20000681
 8001918:	20000574 	.word	0x20000574
 800191c:	48000400 	.word	0x48000400
 8001920:	20000680 	.word	0x20000680

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0549      	lsls	r1, r1, #21
 800194c:	430a      	orrs	r2, r1
 800194e:	61da      	str	r2, [r3, #28]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_MspInit+0x44>)
 8001952:	69da      	ldr	r2, [r3, #28]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	055b      	lsls	r3, r3, #21
 8001958:	4013      	ands	r3, r2
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b08d      	sub	sp, #52	; 0x34
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	241c      	movs	r4, #28
 8001976:	193b      	adds	r3, r7, r4
 8001978:	0018      	movs	r0, r3
 800197a:	2314      	movs	r3, #20
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f00a fe8a 	bl	800c698 <memset>
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3a      	ldr	r2, [pc, #232]	; (8001a74 <HAL_ADC_MspInit+0x108>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d16d      	bne.n	8001a6a <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0089      	lsls	r1, r1, #2
 8001998:	430a      	orrs	r2, r1
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0309      	lsls	r1, r1, #12
 80019b4:	430a      	orrs	r2, r1
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	031b      	lsls	r3, r3, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0289      	lsls	r1, r1, #10
 80019d0:	430a      	orrs	r2, r1
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	02c9      	lsls	r1, r1, #11
 80019ec:	430a      	orrs	r2, r1
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_ADC_MspInit+0x10c>)
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	02db      	lsls	r3, r3, #11
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2203      	movs	r2, #3
 8001a08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_ADC_MspInit+0x110>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f001 fb30 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2203      	movs	r2, #3
 8001a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	193a      	adds	r2, r7, r4
 8001a30:	2390      	movs	r3, #144	; 0x90
 8001a32:	05db      	lsls	r3, r3, #23
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 fb20 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2203      	movs	r2, #3
 8001a46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_ADC_MspInit+0x114>)
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f001 fb11 	bl	800307c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200c      	movs	r0, #12
 8001a60:	f001 fa5c 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001a64:	200c      	movs	r0, #12
 8001a66:	f001 fa6e 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b00d      	add	sp, #52	; 0x34
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40012400 	.word	0x40012400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000400 	.word	0x48000400

08001a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	2414      	movs	r4, #20
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	0018      	movs	r0, r3
 8001a92:	2314      	movs	r3, #20
 8001a94:	001a      	movs	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f00a fdfe 	bl	800c698 <memset>
  if(hspi->Instance==SPI1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_SPI_MspInit+0x90>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d131      	bne.n	8001b0a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0149      	lsls	r1, r1, #5
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	02c9      	lsls	r1, r1, #11
 8001acc:	430a      	orrs	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_SPI_MspInit+0x94>)
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	02db      	lsls	r3, r3, #11
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ade:	0021      	movs	r1, r4
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2238      	movs	r2, #56	; 0x38
 8001ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	2202      	movs	r2, #2
 8001aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2203      	movs	r2, #3
 8001af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_SPI_MspInit+0x98>)
 8001b02:	0019      	movs	r1, r3
 8001b04:	0010      	movs	r0, r2
 8001b06:	f001 fab9 	bl	800307c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b00b      	add	sp, #44	; 0x2c
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40013000 	.word	0x40013000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48000400 	.word	0x48000400

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_Base_MspInit+0x48>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d115      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	0049      	lsls	r1, r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	61da      	str	r2, [r3, #28]
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_Base_MspInit+0x4c>)
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2013      	movs	r0, #19
 8001b54:	f001 f9e2 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b58:	2013      	movs	r0, #19
 8001b5a:	f001 f9f4 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40002000 	.word	0x40002000
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	2414      	movs	r4, #20
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2314      	movs	r3, #20
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f00a fd88 	bl	800c698 <memset>
  if(huart->Instance==USART3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a20      	ldr	r2, [pc, #128]	; (8001c10 <HAL_UART_MspInit+0xa0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d13a      	bne.n	8001c08 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	02c9      	lsls	r1, r1, #11
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	61da      	str	r2, [r3, #28]
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	02db      	lsls	r3, r3, #11
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	0309      	lsls	r1, r1, #12
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0xa4>)
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	031b      	lsls	r3, r3, #12
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	22c0      	movs	r2, #192	; 0xc0
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	0021      	movs	r1, r4
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2203      	movs	r2, #3
 8001be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2201      	movs	r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_UART_MspInit+0xa8>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f001 fa42 	bl	800307c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	201d      	movs	r0, #29
 8001bfe:	f001 f98d 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c02:	201d      	movs	r0, #29
 8001c04:	f001 f99f 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b00b      	add	sp, #44	; 0x2c
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000800 	.word	0x48000800

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 fb60 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	0018      	movs	r0, r3
 8001c54:	f001 fbe0 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f001 fbdb 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <ADC1_COMP_IRQHandler+0x14>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fd90 	bl	8002794 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	2000063c 	.word	0x2000063c

08001c80 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <TIM14_IRQHandler+0x14>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f004 fea6 	bl	80069d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	200005d8 	.word	0x200005d8

08001c98 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <USART3_4_IRQHandler+0x14>)
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f005 fb08 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	200004f0 	.word	0x200004f0

08001cb0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <USB_IRQHandler+0x14>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 fd00 	bl	80036bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	2000132c 	.word	0x2000132c

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f00a fc90 	bl	800c61c <__errno>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	425b      	negs	r3, r3
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	18d2      	adds	r2, r2, r3
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b006      	add	sp, #24
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20004000 	.word	0x20004000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	20000258 	.word	0x20000258
 8001d30:	20001630 	.word	0x20001630

08001d34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	return testPhase;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <currentPhase+0x10>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	2000025c 	.word	0x2000025c

08001d54 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b092      	sub	sp, #72	; 0x48
 8001d58:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001d5a:	4bd9      	ldr	r3, [pc, #868]	; (80020c0 <testHandler+0x36c>)
 8001d5c:	7e1a      	ldrb	r2, [r3, #24]
 8001d5e:	2102      	movs	r1, #2
 8001d60:	438a      	bics	r2, r1
 8001d62:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001d64:	4bd6      	ldr	r3, [pc, #856]	; (80020c0 <testHandler+0x36c>)
 8001d66:	7b1b      	ldrb	r3, [r3, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d02f      	beq.n	8001dd2 <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8001d72:	4bd4      	ldr	r3, [pc, #848]	; (80020c4 <testHandler+0x370>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d126      	bne.n	8001dc8 <testHandler+0x74>
		{
			if(flags.conErr)
 8001d7a:	4bd1      	ldr	r3, [pc, #836]	; (80020c0 <testHandler+0x36c>)
 8001d7c:	7e1b      	ldrb	r3, [r3, #24]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01c      	beq.n	8001dc2 <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8001d88:	211c      	movs	r1, #28
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	4ace      	ldr	r2, [pc, #824]	; (80020c8 <testHandler+0x374>)
 8001d8e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d90:	c331      	stmia	r3!, {r0, r4, r5}
 8001d92:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d94:	c331      	stmia	r3!, {r0, r4, r5}
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001d9a:	4bcc      	ldr	r3, [pc, #816]	; (80020cc <testHandler+0x378>)
 8001d9c:	681c      	ldr	r4, [r3, #0]
 8001d9e:	000d      	movs	r5, r1
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7fe f9b0 	bl	8000108 <strlen>
 8001da8:	0003      	movs	r3, r0
 8001daa:	001a      	movs	r2, r3
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	0019      	movs	r1, r3
 8001db0:	0020      	movs	r0, r4
 8001db2:	f7ff fc76 	bl	80016a2 <pushStr>
				flags.instructions.startRequest = 0;
 8001db6:	4bc2      	ldr	r3, [pc, #776]	; (80020c0 <testHandler+0x36c>)
 8001db8:	7b1a      	ldrb	r2, [r3, #12]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	731a      	strb	r2, [r3, #12]
 8001dc0:	e007      	b.n	8001dd2 <testHandler+0x7e>
			}
			else
			{
				startTest();
 8001dc2:	f000 f995 	bl	80020f0 <startTest>
 8001dc6:	e004      	b.n	8001dd2 <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001dc8:	4bbd      	ldr	r3, [pc, #756]	; (80020c0 <testHandler+0x36c>)
 8001dca:	7e1a      	ldrb	r2, [r3, #24]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001dd2:	4bbb      	ldr	r3, [pc, #748]	; (80020c0 <testHandler+0x36c>)
 8001dd4:	7b1b      	ldrb	r3, [r3, #12]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <testHandler+0x90>
	{
		stopTest();
 8001de0:	f000 f9e8 	bl	80021b4 <stopTest>
	}

	switch(testPhase)
 8001de4:	4bb7      	ldr	r3, [pc, #732]	; (80020c4 <testHandler+0x370>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b06      	cmp	r3, #6
 8001dea:	d900      	bls.n	8001dee <testHandler+0x9a>
 8001dec:	e17b      	b.n	80020e6 <testHandler+0x392>
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	4bb7      	ldr	r3, [pc, #732]	; (80020d0 <testHandler+0x37c>)
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001df8:	4bb1      	ldr	r3, [pc, #708]	; (80020c0 <testHandler+0x36c>)
 8001dfa:	7e1a      	ldrb	r2, [r3, #24]
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	438a      	bics	r2, r1
 8001e00:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8001e02:	e170      	b.n	80020e6 <testHandler+0x392>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001e04:	4bae      	ldr	r3, [pc, #696]	; (80020c0 <testHandler+0x36c>)
 8001e06:	7d1b      	ldrb	r3, [r3, #20]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <testHandler+0xcc>
		{
			testPhase++;
 8001e12:	4bac      	ldr	r3, [pc, #688]	; (80020c4 <testHandler+0x370>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4baa      	ldr	r3, [pc, #680]	; (80020c4 <testHandler+0x370>)
 8001e1c:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8001e1e:	e146      	b.n	80020ae <testHandler+0x35a>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8001e20:	4bac      	ldr	r3, [pc, #688]	; (80020d4 <testHandler+0x380>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d000      	beq.n	8001e2a <testHandler+0xd6>
 8001e28:	e141      	b.n	80020ae <testHandler+0x35a>
			flags.meas.measRequest = 1;
 8001e2a:	4ba5      	ldr	r3, [pc, #660]	; (80020c0 <testHandler+0x36c>)
 8001e2c:	7d1a      	ldrb	r2, [r3, #20]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	751a      	strb	r2, [r3, #20]
		break;
 8001e34:	e13b      	b.n	80020ae <testHandler+0x35a>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001e36:	4ba8      	ldr	r3, [pc, #672]	; (80020d8 <testHandler+0x384>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f001 fab2 	bl	80033a6 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001e42:	4ba5      	ldr	r3, [pc, #660]	; (80020d8 <testHandler+0x384>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f001 faac 	bl	80033a6 <HAL_GPIO_WritePin>

		testPhase++;
 8001e4e:	4b9d      	ldr	r3, [pc, #628]	; (80020c4 <testHandler+0x370>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b9b      	ldr	r3, [pc, #620]	; (80020c4 <testHandler+0x370>)
 8001e58:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001e5a:	4b99      	ldr	r3, [pc, #612]	; (80020c0 <testHandler+0x36c>)
 8001e5c:	7e1a      	ldrb	r2, [r3, #24]
 8001e5e:	2102      	movs	r1, #2
 8001e60:	430a      	orrs	r2, r1
 8001e62:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8001e64:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <testHandler+0x388>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	4b9c      	ldr	r3, [pc, #624]	; (80020dc <testHandler+0x388>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2120      	movs	r1, #32
 8001e70:	430a      	orrs	r2, r1
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
		sendData();
 8001e76:	f7ff fd21 	bl	80018bc <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7e:	e007      	b.n	8001e90 <testHandler+0x13c>
		{
			sysTime[i] = 0;
 8001e80:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <testHandler+0x380>)
 8001e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	2100      	movs	r1, #0
 8001e88:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	ddf4      	ble.n	8001e80 <testHandler+0x12c>
		}
		break;
 8001e96:	e126      	b.n	80020e6 <testHandler+0x392>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001e98:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <testHandler+0x36c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d026      	beq.n	8001ef4 <testHandler+0x1a0>
		{
			char time[9] = {0};
 8001ea6:	2510      	movs	r5, #16
 8001ea8:	197b      	adds	r3, r7, r5
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f00a fbef 	bl	800c698 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001eba:	4b86      	ldr	r3, [pc, #536]	; (80020d4 <testHandler+0x380>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	223c      	movs	r2, #60	; 0x3c
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <testHandler+0x380>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	213c      	movs	r1, #60	; 0x3c
 8001ec8:	1acc      	subs	r4, r1, r3
 8001eca:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <testHandler+0x380>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2103      	movs	r1, #3
 8001ed0:	1acb      	subs	r3, r1, r3
 8001ed2:	4983      	ldr	r1, [pc, #524]	; (80020e0 <testHandler+0x38c>)
 8001ed4:	1978      	adds	r0, r7, r5
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	0023      	movs	r3, r4
 8001eda:	f00a fc9f 	bl	800c81c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001ede:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <testHandler+0x388>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b7d      	ldr	r3, [pc, #500]	; (80020dc <testHandler+0x388>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2110      	movs	r1, #16
 8001eea:	404a      	eors	r2, r1
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
			sendData();
 8001ef0:	f7ff fce4 	bl	80018bc <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8001ef4:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <testHandler+0x380>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <testHandler+0x1c0>
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <testHandler+0x36c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2204      	movs	r2, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <testHandler+0x1c0>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <testHandler+0x36c>)
 8001f0c:	7d1a      	ldrb	r2, [r3, #20]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <testHandler+0x380>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	dc00      	bgt.n	8001f1e <testHandler+0x1ca>
 8001f1c:	e0c9      	b.n	80020b2 <testHandler+0x35e>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8001f1e:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <testHandler+0x370>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <testHandler+0x370>)
 8001f28:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f2a:	e0c2      	b.n	80020b2 <testHandler+0x35e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8001f2c:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <testHandler+0x36c>)
 8001f2e:	7d1b      	ldrb	r3, [r3, #20]
 8001f30:	2208      	movs	r2, #8
 8001f32:	4013      	ands	r3, r2
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d000      	beq.n	8001f3c <testHandler+0x1e8>
 8001f3a:	e0bc      	b.n	80020b6 <testHandler+0x362>
		{
			flags.ui.notice = 1;
 8001f3c:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <testHandler+0x36c>)
 8001f3e:	7c1a      	ldrb	r2, [r3, #16]
 8001f40:	2108      	movs	r1, #8
 8001f42:	430a      	orrs	r2, r1
 8001f44:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001f46:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <testHandler+0x36c>)
 8001f48:	7e1a      	ldrb	r2, [r3, #24]
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001f50:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <testHandler+0x370>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <testHandler+0x370>)
 8001f5a:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <testHandler+0x384>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0018      	movs	r0, r3
 8001f64:	f001 fa1f 	bl	80033a6 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8001f68:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <testHandler+0x384>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f001 fa19 	bl	80033a6 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <testHandler+0x388>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <testHandler+0x388>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2110      	movs	r1, #16
 8001f80:	430a      	orrs	r2, r1
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <testHandler+0x388>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <testHandler+0x388>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
			sendData();
 8001f98:	f7ff fc90 	bl	80018bc <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa0:	e007      	b.n	8001fb2 <testHandler+0x25e>
			{
				sysTime[i] = 0;
 8001fa2:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <testHandler+0x380>)
 8001fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	2100      	movs	r1, #0
 8001faa:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	3301      	adds	r3, #1
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	ddf4      	ble.n	8001fa2 <testHandler+0x24e>
			}
		}
		break;
 8001fb8:	e07d      	b.n	80020b6 <testHandler+0x362>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <testHandler+0x36c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d025      	beq.n	8002014 <testHandler+0x2c0>
		{
			char time[9] = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f00a fb5f 	bl	800c698 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <testHandler+0x380>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	223c      	movs	r2, #60	; 0x3c
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <testHandler+0x380>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	213c      	movs	r1, #60	; 0x3c
 8001fe8:	1acc      	subs	r4, r1, r3
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <testHandler+0x380>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2103      	movs	r1, #3
 8001ff0:	1acb      	subs	r3, r1, r3
 8001ff2:	493b      	ldr	r1, [pc, #236]	; (80020e0 <testHandler+0x38c>)
 8001ff4:	1d38      	adds	r0, r7, #4
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	0023      	movs	r3, r4
 8001ffa:	f00a fc0f 	bl	800c81c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <testHandler+0x388>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <testHandler+0x388>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2108      	movs	r1, #8
 800200a:	404a      	eors	r2, r1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
			sendData();
 8002010:	f7ff fc54 	bl	80018bc <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <testHandler+0x380>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <testHandler+0x2e0>
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <testHandler+0x36c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2204      	movs	r2, #4
 8002022:	4013      	ands	r3, r2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <testHandler+0x2e0>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <testHandler+0x36c>)
 800202c:	7d1a      	ldrb	r2, [r3, #20]
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <testHandler+0x380>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b02      	cmp	r3, #2
 800203a:	dd3e      	ble.n	80020ba <testHandler+0x366>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <testHandler+0x370>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <testHandler+0x370>)
 8002046:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002048:	e037      	b.n	80020ba <testHandler+0x366>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <testHandler+0x36c>)
 800204c:	7d1b      	ldrb	r3, [r3, #20]
 800204e:	2208      	movs	r2, #8
 8002050:	4013      	ands	r3, r2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d145      	bne.n	80020e4 <testHandler+0x390>
		{
			flags.ui.done = 1;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <testHandler+0x36c>)
 800205a:	7c1a      	ldrb	r2, [r3, #16]
 800205c:	2110      	movs	r1, #16
 800205e:	430a      	orrs	r2, r1
 8002060:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <testHandler+0x36c>)
 8002064:	7e1a      	ldrb	r2, [r3, #24]
 8002066:	2102      	movs	r1, #2
 8002068:	430a      	orrs	r2, r1
 800206a:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <testHandler+0x388>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <testHandler+0x388>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2108      	movs	r1, #8
 8002078:	430a      	orrs	r2, r1
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <testHandler+0x388>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <testHandler+0x388>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2102      	movs	r1, #2
 800208a:	438a      	bics	r2, r1
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <testHandler+0x388>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <testHandler+0x388>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	438a      	bics	r2, r1
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
			sendData();
 80020a2:	f7ff fc0b 	bl	80018bc <sendData>

			testPhase = WAITING;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <testHandler+0x370>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020ac:	e01a      	b.n	80020e4 <testHandler+0x390>
		break;
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	e019      	b.n	80020e6 <testHandler+0x392>
		break;
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	e017      	b.n	80020e6 <testHandler+0x392>
		break;
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	e015      	b.n	80020e6 <testHandler+0x392>
		break;
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	e013      	b.n	80020e6 <testHandler+0x392>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	20000620 	.word	0x20000620
 80020c4:	2000025c 	.word	0x2000025c
 80020c8:	0800cf48 	.word	0x0800cf48
 80020cc:	20000490 	.word	0x20000490
 80020d0:	0800d058 	.word	0x0800d058
 80020d4:	2000023c 	.word	0x2000023c
 80020d8:	48000800 	.word	0x48000800
 80020dc:	2000068c 	.word	0x2000068c
 80020e0:	0800cf3c 	.word	0x0800cf3c
		break;
 80020e4:	46c0      	nop			; (mov r8, r8)

	}
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b010      	add	sp, #64	; 0x40
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)

080020f0 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <startTest+0xa8>)
 80020f8:	7c1a      	ldrb	r2, [r3, #16]
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <startTest+0xac>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <startTest+0xb0>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <startTest+0xa8>)
 800210e:	7e1a      	ldrb	r2, [r3, #24]
 8002110:	2102      	movs	r1, #2
 8002112:	430a      	orrs	r2, r1
 8002114:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <startTest+0xb4>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <startTest+0xb8>)
 800211c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e008      	b.n	8002136 <startTest+0x46>
	{
		regValues[i] = 0;
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <startTest+0xb4>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <startTest+0xbc>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	001a      	movs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4293      	cmp	r3, r2
 8002140:	dbf0      	blt.n	8002124 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <startTest+0xb8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <startTest+0xb8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2120      	movs	r1, #32
 800214e:	430a      	orrs	r2, r1
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <startTest+0xb8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <startTest+0xb8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2102      	movs	r1, #2
 8002160:	430a      	orrs	r2, r1
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002166:	f7ff fba9 	bl	80018bc <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800216a:	2301      	movs	r3, #1
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	e007      	b.n	8002180 <startTest+0x90>
	{
		sysTime[i] = 0;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <startTest+0xc0>)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	2100      	movs	r1, #0
 8002178:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b03      	cmp	r3, #3
 8002184:	ddf4      	ble.n	8002170 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <startTest+0xa8>)
 8002188:	7b1a      	ldrb	r2, [r3, #12]
 800218a:	2101      	movs	r1, #1
 800218c:	438a      	bics	r2, r1
 800218e:	731a      	strb	r2, [r3, #12]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000620 	.word	0x20000620
 800219c:	2000025c 	.word	0x2000025c
 80021a0:	20000260 	.word	0x20000260
 80021a4:	2000067c 	.word	0x2000067c
 80021a8:	2000068c 	.word	0x2000068c
 80021ac:	20000681 	.word	0x20000681
 80021b0:	2000023c 	.word	0x2000023c

080021b4 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <stopTest+0x5c>)
 80021ba:	7c1a      	ldrb	r2, [r3, #16]
 80021bc:	2102      	movs	r1, #2
 80021be:	430a      	orrs	r2, r1
 80021c0:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <stopTest+0x60>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <stopTest+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 f8e9 	bl	80033a6 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <stopTest+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	0018      	movs	r0, r3
 80021dc:	f001 f8e3 	bl	80033a6 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <stopTest+0x68>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <stopTest+0x68>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <stopTest+0x68>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2104      	movs	r1, #4
 80021f4:	430a      	orrs	r2, r1
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
	sendData();
 80021fa:	f7ff fb5f 	bl	80018bc <sendData>

	flags.instructions.stopRequest = 0;
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <stopTest+0x5c>)
 8002200:	7b1a      	ldrb	r2, [r3, #12]
 8002202:	2102      	movs	r1, #2
 8002204:	438a      	bics	r2, r1
 8002206:	731a      	strb	r2, [r3, #12]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	20000620 	.word	0x20000620
 8002214:	2000025c 	.word	0x2000025c
 8002218:	48000800 	.word	0x48000800
 800221c:	2000068c 	.word	0x2000068c

08002220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800224a:	f7ff fd73 	bl	8001d34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800224e:	f00a f9eb 	bl	800c628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7fe fb21 	bl	8000898 <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
  ldr   r0, =_estack
 8002258:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002264:	0800d1a0 	.word	0x0800d1a0
  ldr r2, =_sbss
 8002268:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800226c:	20001630 	.word	0x20001630

08002270 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <CEC_CAN_IRQHandler>
	...

08002274 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_Init+0x24>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_Init+0x24>)
 800227e:	2110      	movs	r1, #16
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f809 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228a:	f7ff fb4b 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_InitTick+0x5c>)
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_InitTick+0x60>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	0019      	movs	r1, r3
 80022ae:	23fa      	movs	r3, #250	; 0xfa
 80022b0:	0098      	lsls	r0, r3, #2
 80022b2:	f7fd ff3b 	bl	800012c <__udivsi3>
 80022b6:	0003      	movs	r3, r0
 80022b8:	0019      	movs	r1, r3
 80022ba:	0020      	movs	r0, r4
 80022bc:	f7fd ff36 	bl	800012c <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fe4f 	bl	8002f66 <HAL_SYSTICK_Config>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00f      	b.n	80022f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d80b      	bhi.n	80022ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	2301      	movs	r3, #1
 80022da:	425b      	negs	r3, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fe1c 	bl	8002f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_InitTick+0x64>)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b003      	add	sp, #12
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_IncTick+0x1c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	001a      	movs	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x20>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	18d2      	adds	r2, r2, r3
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_IncTick+0x20>)
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	20000008 	.word	0x20000008
 8002324:	20000690 	.word	0x20000690

08002328 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_GetTick+0x10>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000690 	.word	0x20000690

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fff0 	bl	8002328 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	001a      	movs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	189b      	adds	r3, r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	f7ff ffe0 	bl	8002328 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000008 	.word	0x20000008

08002384 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e125      	b.n	80025ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2234      	movs	r2, #52	; 0x34
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fad6 	bl	800196c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	2210      	movs	r2, #16
 80023c6:	4013      	ands	r3, r2
 80023c8:	d000      	beq.n	80023cc <HAL_ADC_Init+0x48>
 80023ca:	e103      	b.n	80025d4 <HAL_ADC_Init+0x250>
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d000      	beq.n	80023d8 <HAL_ADC_Init+0x54>
 80023d6:	e0fd      	b.n	80025d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80023e2:	d000      	beq.n	80023e6 <HAL_ADC_Init+0x62>
 80023e4:	e0f6      	b.n	80025d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a83      	ldr	r2, [pc, #524]	; (80025f8 <HAL_ADC_Init+0x274>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	2202      	movs	r2, #2
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2203      	movs	r2, #3
 80023fe:	4013      	ands	r3, r2
 8002400:	2b01      	cmp	r3, #1
 8002402:	d112      	bne.n	800242a <HAL_ADC_Init+0xa6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	2b01      	cmp	r3, #1
 8002410:	d009      	beq.n	8002426 <HAL_ADC_Init+0xa2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	401a      	ands	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	429a      	cmp	r2, r3
 8002424:	d101      	bne.n	800242a <HAL_ADC_Init+0xa6>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_ADC_Init+0xa8>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2218      	movs	r2, #24
 8002438:	4393      	bics	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	0899      	lsrs	r1, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4964      	ldr	r1, [pc, #400]	; (80025fc <HAL_ADC_Init+0x278>)
 800246a:	400a      	ands	r2, r1
 800246c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7e1b      	ldrb	r3, [r3, #24]
 8002472:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e5b      	ldrb	r3, [r3, #25]
 8002478:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e9b      	ldrb	r3, [r3, #26]
 8002480:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002482:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <HAL_ADC_Init+0x10e>
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	015b      	lsls	r3, r3, #5
 8002490:	e000      	b.n	8002494 <HAL_ADC_Init+0x110>
 8002492:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002494:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800249a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_Init+0x124>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e000      	b.n	80024aa <HAL_ADC_Init+0x126>
 80024a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80024aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2124      	movs	r1, #36	; 0x24
 80024b0:	5c5b      	ldrb	r3, [r3, r1]
 80024b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7edb      	ldrb	r3, [r3, #27]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d115      	bne.n	80024f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e9b      	ldrb	r3, [r3, #26]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	0252      	lsls	r2, r2, #9
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	e00b      	b.n	80024f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	2220      	movs	r2, #32
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2201      	movs	r2, #1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	23c2      	movs	r3, #194	; 0xc2
 80024f6:	33ff      	adds	r3, #255	; 0xff
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d007      	beq.n	800250c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002504:	4313      	orrs	r3, r2
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4313      	orrs	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	429a      	cmp	r2, r3
 8002526:	d01b      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d017      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b02      	cmp	r3, #2
 8002536:	d013      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b03      	cmp	r3, #3
 800253e:	d00f      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b04      	cmp	r3, #4
 8002546:	d00b      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	2b05      	cmp	r3, #5
 800254e:	d007      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b06      	cmp	r3, #6
 8002556:	d003      	beq.n	8002560 <HAL_ADC_Init+0x1dc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b07      	cmp	r3, #7
 800255e:	d112      	bne.n	8002586 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2107      	movs	r1, #7
 800256c:	438a      	bics	r2, r1
 800256e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6959      	ldr	r1, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	2207      	movs	r2, #7
 800257c:	401a      	ands	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_ADC_Init+0x27c>)
 800258e:	4013      	ands	r3, r2
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d10b      	bne.n	80025ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	2203      	movs	r2, #3
 80025a2:	4393      	bics	r3, r2
 80025a4:	2201      	movs	r2, #1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025ac:	e01c      	b.n	80025e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	2212      	movs	r2, #18
 80025b4:	4393      	bics	r3, r2
 80025b6:	2210      	movs	r2, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2201      	movs	r2, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80025ca:	230f      	movs	r3, #15
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025d2:	e009      	b.n	80025e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	2210      	movs	r2, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80025e0:	230f      	movs	r3, #15
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	fffffefd 	.word	0xfffffefd
 80025fc:	fffe0219 	.word	0xfffe0219
 8002600:	833fffe7 	.word	0x833fffe7

08002604 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	d156      	bne.n	80026ce <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2234      	movs	r2, #52	; 0x34
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_Start_IT+0x2a>
 800262a:	2302      	movs	r3, #2
 800262c:	e056      	b.n	80026dc <HAL_ADC_Start_IT+0xd8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2234      	movs	r2, #52	; 0x34
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7e5b      	ldrb	r3, [r3, #25]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d007      	beq.n	800264e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800263e:	230f      	movs	r3, #15
 8002640:	18fc      	adds	r4, r7, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fa7b 	bl	8002b40 <ADC_Enable>
 800264a:	0003      	movs	r3, r0
 800264c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800264e:	230f      	movs	r3, #15
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d13e      	bne.n	80026d6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <HAL_ADC_Start_IT+0xe0>)
 800265e:	4013      	ands	r3, r2
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0052      	lsls	r2, r2, #1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2234      	movs	r2, #52	; 0x34
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	221c      	movs	r2, #28
 800267e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d110      	bne.n	80026aa <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2104      	movs	r1, #4
 8002694:	438a      	bics	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2118      	movs	r1, #24
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
          break;
 80026a8:	e008      	b.n	80026bc <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	211c      	movs	r1, #28
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
          break;
 80026ba:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2104      	movs	r1, #4
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ce:	230f      	movs	r3, #15
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b005      	add	sp, #20
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	fffff0fe 	.word	0xfffff0fe

080026e8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f0:	230f      	movs	r3, #15
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2234      	movs	r2, #52	; 0x34
 80026fc:	5c9b      	ldrb	r3, [r3, r2]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Stop_IT+0x1e>
 8002702:	2302      	movs	r3, #2
 8002704:	e033      	b.n	800276e <HAL_ADC_Stop_IT+0x86>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2234      	movs	r2, #52	; 0x34
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800270e:	250f      	movs	r5, #15
 8002710:	197c      	adds	r4, r7, r5
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fb08 	bl	8002d2a <ADC_ConversionStop>
 800271a:	0003      	movs	r3, r0
 800271c:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800271e:	0028      	movs	r0, r5
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11b      	bne.n	8002760 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	211c      	movs	r1, #28
 8002734:	438a      	bics	r2, r1
 8002736:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002738:	0005      	movs	r5, r0
 800273a:	183c      	adds	r4, r7, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fa82 	bl	8002c48 <ADC_Disable>
 8002744:	0003      	movs	r3, r0
 8002746:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002748:	197b      	adds	r3, r7, r5
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_ADC_Stop_IT+0x90>)
 8002756:	4013      	ands	r3, r2
 8002758:	2201      	movs	r2, #1
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2234      	movs	r2, #52	; 0x34
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002768:	230f      	movs	r3, #15
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	fffffefe 	.word	0xfffffefe

0800277c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2204      	movs	r2, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x24>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2204      	movs	r2, #4
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d00d      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d14f      	bne.n	8002866 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2208      	movs	r2, #8
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d148      	bne.n	8002866 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d12d      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d129      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	4013      	ands	r3, r2
 800280c:	2b08      	cmp	r3, #8
 800280e:	d122      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2204      	movs	r2, #4
 8002818:	4013      	ands	r3, r2
 800281a:	d110      	bne.n	800283e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	210c      	movs	r1, #12
 8002828:	438a      	bics	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	4a33      	ldr	r2, [pc, #204]	; (8002900 <HAL_ADC_IRQHandler+0x16c>)
 8002832:	4013      	ands	r3, r2
 8002834:	2201      	movs	r2, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
 800283c:	e00b      	b.n	8002856 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	2220      	movs	r2, #32
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2201      	movs	r2, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe f809 	bl	8000870 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	220c      	movs	r2, #12
 8002864:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	4013      	ands	r3, r2
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d115      	bne.n	80028a0 <HAL_ADC_IRQHandler+0x10c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	4013      	ands	r3, r2
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d10e      	bne.n	80028a0 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0252      	lsls	r2, r2, #9
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f836 	bl	8002904 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d123      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x162>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11c      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d006      	beq.n	80028d2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10d      	bne.n	80028ee <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	2202      	movs	r2, #2
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 f813 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	601a      	str	r2, [r3, #0]
  }

}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	fffffefe 	.word	0xfffffefe

08002904 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	055b      	lsls	r3, r3, #21
 8002942:	429a      	cmp	r2, r3
 8002944:	d011      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d00d      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	2b02      	cmp	r3, #2
 8002954:	d009      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	2b03      	cmp	r3, #3
 800295c:	d005      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	2b04      	cmp	r3, #4
 8002964:	d001      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2234      	movs	r2, #52	; 0x34
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x54>
 8002974:	2302      	movs	r3, #2
 8002976:	e0d0      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1f6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2234      	movs	r2, #52	; 0x34
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d000      	beq.n	800298e <HAL_ADC_ConfigChannel+0x6a>
 800298c:	e0b4      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a64      	ldr	r2, [pc, #400]	; (8002b24 <HAL_ADC_ConfigChannel+0x200>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <HAL_ADC_ConfigChannel+0x76>
 8002998:	e082      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	055b      	lsls	r3, r3, #21
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d037      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d033      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d02f      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d02b      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d027      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d023      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d01f      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	2b07      	cmp	r3, #7
 80029f2:	d01b      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2107      	movs	r1, #7
 8002a00:	400b      	ands	r3, r1
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d012      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2107      	movs	r1, #7
 8002a12:	438a      	bics	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6959      	ldr	r1, [r3, #20]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2207      	movs	r2, #7
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d007      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x120>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b11      	cmp	r3, #17
 8002a3a:	d003      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x120>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b12      	cmp	r3, #18
 8002a42:	d163      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a44:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_ADC_ConfigChannel+0x204>)
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d009      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x140>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b11      	cmp	r3, #17
 8002a56:	d102      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x13a>
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	03db      	lsls	r3, r3, #15
 8002a5c:	e004      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x144>
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	045b      	lsls	r3, r3, #17
 8002a62:	e001      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x144>
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <HAL_ADC_ConfigChannel+0x204>)
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d14a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_ADC_ConfigChannel+0x208>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	492d      	ldr	r1, [pc, #180]	; (8002b30 <HAL_ADC_ConfigChannel+0x20c>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7fd fb55 	bl	800012c <__udivsi3>
 8002a82:	0003      	movs	r3, r0
 8002a84:	001a      	movs	r2, r3
 8002a86:	0013      	movs	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a90:	e002      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f9      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x16e>
 8002a9e:	e035      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4099      	lsls	r1, r3
 8002aae:	000b      	movs	r3, r1
 8002ab0:	43d9      	mvns	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d007      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x1ae>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b11      	cmp	r3, #17
 8002ac8:	d003      	beq.n	8002ad2 <HAL_ADC_ConfigChannel+0x1ae>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d11c      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_ADC_ConfigChannel+0x204>)
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x1ca>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b11      	cmp	r3, #17
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x1c6>
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_ADC_ConfigChannel+0x210>)
 8002ae8:	e002      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1cc>
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_ADC_ConfigChannel+0x214>)
 8002aec:	e000      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1cc>
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_ADC_ConfigChannel+0x218>)
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_ADC_ConfigChannel+0x204>)
 8002af2:	400b      	ands	r3, r1
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e009      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	2220      	movs	r2, #32
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002b04:	230f      	movs	r3, #15
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2234      	movs	r2, #52	; 0x34
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	781b      	ldrb	r3, [r3, #0]
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	00001001 	.word	0x00001001
 8002b28:	40012708 	.word	0x40012708
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	000f4240 	.word	0x000f4240
 8002b34:	ffbfffff 	.word	0xffbfffff
 8002b38:	feffffff 	.word	0xfeffffff
 8002b3c:	ff7fffff 	.word	0xff7fffff

08002b40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2203      	movs	r2, #3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d112      	bne.n	8002b84 <ADC_Enable+0x44>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d009      	beq.n	8002b80 <ADC_Enable+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	401a      	ands	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d101      	bne.n	8002b84 <ADC_Enable+0x44>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <ADC_Enable+0x46>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d152      	bne.n	8002c30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <ADC_Enable+0xfc>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03f      	b.n	8002c32 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <ADC_Enable+0x100>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	491f      	ldr	r1, [pc, #124]	; (8002c44 <ADC_Enable+0x104>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd faaf 	bl	800012c <__udivsi3>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd2:	e002      	b.n	8002bda <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be0:	f7ff fba2 	bl	8002328 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002be8:	e01b      	b.n	8002c22 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bea:	f7ff fb9d 	bl	8002328 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2201      	movs	r2, #1
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d1dc      	bne.n	8002bea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	80000017 	.word	0x80000017
 8002c40:	20000000 	.word	0x20000000
 8002c44:	000f4240 	.word	0x000f4240

08002c48 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d112      	bne.n	8002c88 <ADC_Disable+0x40>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d009      	beq.n	8002c84 <ADC_Disable+0x3c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d101      	bne.n	8002c88 <ADC_Disable+0x40>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <ADC_Disable+0x42>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d048      	beq.n	8002d20 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2205      	movs	r2, #5
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d110      	bne.n	8002cbe <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cb4:	f7ff fb38 	bl	8002328 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cbc:	e029      	b.n	8002d12 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e023      	b.n	8002d22 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cda:	f7ff fb25 	bl	8002328 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d914      	bls.n	8002d12 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10d      	bne.n	8002d12 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2201      	movs	r2, #1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d0dc      	beq.n	8002cda <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d03a      	beq.n	8002db8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d10d      	bne.n	8002d6c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002d5a:	d107      	bne.n	8002d6c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2110      	movs	r1, #16
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff fadc 	bl	8002328 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d74:	e01a      	b.n	8002dac <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d76:	f7ff fad7 	bl	8002328 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d913      	bls.n	8002dac <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d00d      	beq.n	8002dac <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	2210      	movs	r2, #16
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	2201      	movs	r2, #1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e006      	b.n	8002dba <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	d1de      	bne.n	8002d76 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	0002      	movs	r2, r0
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd6:	d809      	bhi.n	8002dec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	001a      	movs	r2, r3
 8002dde:	231f      	movs	r3, #31
 8002de0:	401a      	ands	r2, r3
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_EnableIRQ+0x30>)
 8002de4:	2101      	movs	r1, #1
 8002de6:	4091      	lsls	r1, r2
 8002de8:	000a      	movs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
  }
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	0002      	movs	r2, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e0c:	d828      	bhi.n	8002e60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <__NVIC_SetPriority+0xd4>)
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	33c0      	adds	r3, #192	; 0xc0
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	589b      	ldr	r3, [r3, r2]
 8002e1e:	1dfa      	adds	r2, r7, #7
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	0011      	movs	r1, r2
 8002e24:	2203      	movs	r2, #3
 8002e26:	400a      	ands	r2, r1
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	21ff      	movs	r1, #255	; 0xff
 8002e2c:	4091      	lsls	r1, r2
 8002e2e:	000a      	movs	r2, r1
 8002e30:	43d2      	mvns	r2, r2
 8002e32:	401a      	ands	r2, r3
 8002e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	2303      	movs	r3, #3
 8002e46:	4003      	ands	r3, r0
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4c:	481f      	ldr	r0, [pc, #124]	; (8002ecc <__NVIC_SetPriority+0xd4>)
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	430a      	orrs	r2, r1
 8002e58:	33c0      	adds	r3, #192	; 0xc0
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e5e:	e031      	b.n	8002ec4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <__NVIC_SetPriority+0xd8>)
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	0019      	movs	r1, r3
 8002e68:	230f      	movs	r3, #15
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	3b08      	subs	r3, #8
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3306      	adds	r3, #6
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	3304      	adds	r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1dfa      	adds	r2, r7, #7
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	2203      	movs	r2, #3
 8002e82:	400a      	ands	r2, r1
 8002e84:	00d2      	lsls	r2, r2, #3
 8002e86:	21ff      	movs	r1, #255	; 0xff
 8002e88:	4091      	lsls	r1, r2
 8002e8a:	000a      	movs	r2, r1
 8002e8c:	43d2      	mvns	r2, r2
 8002e8e:	401a      	ands	r2, r3
 8002e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	401a      	ands	r2, r3
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	4003      	ands	r3, r0
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea8:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <__NVIC_SetPriority+0xd8>)
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	001c      	movs	r4, r3
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	4023      	ands	r3, r4
 8002eb4:	3b08      	subs	r3, #8
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	3306      	adds	r3, #6
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	18c3      	adds	r3, r0, r3
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b003      	add	sp, #12
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	045b      	lsls	r3, r3, #17
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d301      	bcc.n	8002eec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e010      	b.n	8002f0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <SysTick_Config+0x44>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	425b      	negs	r3, r3
 8002ef8:	2103      	movs	r1, #3
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff ff7c 	bl	8002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SysTick_Config+0x44>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SysTick_Config+0x44>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	210f      	movs	r1, #15
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	1c02      	adds	r2, r0, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ff5d 	bl	8002df8 <__NVIC_SetPriority>
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ff33 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ffaf 	bl	8002ed4 <SysTick_Config>
 8002f76:	0003      	movs	r3, r0
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2221      	movs	r2, #33	; 0x21
 8002f8c:	5c9b      	ldrb	r3, [r3, r2]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2204      	movs	r2, #4
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e020      	b.n	8002fe8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	210e      	movs	r1, #14
 8002fb2:	438a      	bics	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4091      	lsls	r1, r2
 8002fd2:	000a      	movs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2221      	movs	r2, #33	; 0x21
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2221      	movs	r2, #33	; 0x21
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d006      	beq.n	800301a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003012:	187b      	adds	r3, r7, r1
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e028      	b.n	800306c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	210e      	movs	r1, #14
 8003026:	438a      	bics	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	2101      	movs	r1, #1
 8003044:	4091      	lsls	r1, r2
 8003046:	000a      	movs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2221      	movs	r2, #33	; 0x21
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	0010      	movs	r0, r2
 800306a:	4798      	blx	r3
    } 
  }
  return status;
 800306c:	230f      	movs	r3, #15
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781b      	ldrb	r3, [r3, #0]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	e155      	b.n	8003338 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4091      	lsls	r1, r2
 8003096:	000a      	movs	r2, r1
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d100      	bne.n	80030a4 <HAL_GPIO_Init+0x28>
 80030a2:	e146      	b.n	8003332 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	2201      	movs	r2, #1
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b03      	cmp	r3, #3
 8003128:	d017      	beq.n	800315a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	43da      	mvns	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d123      	bne.n	80031ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	58d3      	ldr	r3, [r2, r3]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	409a      	lsls	r2, r3
 8003180:	0013      	movs	r3, r2
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2107      	movs	r1, #7
 8003192:	400b      	ands	r3, r1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	409a      	lsls	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	401a      	ands	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d100      	bne.n	80031f0 <HAL_GPIO_Init+0x174>
 80031ee:	e0a0      	b.n	8003332 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_GPIO_Init+0x2d4>)
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b56      	ldr	r3, [pc, #344]	; (8003350 <HAL_GPIO_Init+0x2d4>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	4b54      	ldr	r3, [pc, #336]	; (8003350 <HAL_GPIO_Init+0x2d4>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	589b      	ldr	r3, [r3, r2]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2203      	movs	r2, #3
 800321a:	4013      	ands	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	43da      	mvns	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	2390      	movs	r3, #144	; 0x90
 8003230:	05db      	lsls	r3, r3, #23
 8003232:	429a      	cmp	r2, r3
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x1ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a47      	ldr	r2, [pc, #284]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x1ea>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a46      	ldr	r2, [pc, #280]	; (800335c <HAL_GPIO_Init+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x1e6>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a45      	ldr	r2, [pc, #276]	; (8003360 <HAL_GPIO_Init+0x2e4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x1e2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a44      	ldr	r2, [pc, #272]	; (8003364 <HAL_GPIO_Init+0x2e8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x1de>
 8003256:	2304      	movs	r3, #4
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800325a:	2305      	movs	r3, #5
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x1f0>
 800326a:	2300      	movs	r3, #0
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	2103      	movs	r1, #3
 8003270:	400a      	ands	r2, r1
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800327c:	4935      	ldr	r1, [pc, #212]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43da      	mvns	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	4013      	ands	r3, r2
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43da      	mvns	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	029b      	lsls	r3, r3, #10
 80032cc:	4013      	ands	r3, r2
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	035b      	lsls	r3, r3, #13
 80032f6:	4013      	ands	r3, r2
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43da      	mvns	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	039b      	lsls	r3, r3, #14
 8003320:	4013      	ands	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_GPIO_Init+0x2ec>)
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	40da      	lsrs	r2, r3
 8003340:	1e13      	subs	r3, r2, #0
 8003342:	d000      	beq.n	8003346 <HAL_GPIO_Init+0x2ca>
 8003344:	e6a2      	b.n	800308c <HAL_GPIO_Init+0x10>
  } 
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000
 8003358:	48000400 	.word	0x48000400
 800335c:	48000800 	.word	0x48000800
 8003360:	48000c00 	.word	0x48000c00
 8003364:	48001000 	.word	0x48001000
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	000a      	movs	r2, r1
 8003376:	1cbb      	adds	r3, r7, #2
 8003378:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	1cba      	adds	r2, r7, #2
 8003380:	8812      	ldrh	r2, [r2, #0]
 8003382:	4013      	ands	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003386:	230f      	movs	r3, #15
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e003      	b.n	8003398 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003398:	230f      	movs	r3, #15
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
  }
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	0008      	movs	r0, r1
 80033b0:	0011      	movs	r1, r2
 80033b2:	1cbb      	adds	r3, r7, #2
 80033b4:	1c02      	adds	r2, r0, #0
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	1c7b      	adds	r3, r7, #1
 80033ba:	1c0a      	adds	r2, r1, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033be:	1c7b      	adds	r3, r7, #1
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c6:	1cbb      	adds	r3, r7, #2
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ce:	e003      	b.n	80033d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d0:	1cbb      	adds	r3, r7, #2
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	000a      	movs	r2, r1
 80033ea:	1cbb      	adds	r3, r7, #2
 80033ec:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033f4:	1cbb      	adds	r3, r7, #2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	1cb9      	adds	r1, r7, #2
 8003404:	8809      	ldrh	r1, [r1, #0]
 8003406:	400b      	ands	r3, r1
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	619a      	str	r2, [r3, #24]
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	0002      	movs	r2, r0
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	1dba      	adds	r2, r7, #6
 800342a:	8812      	ldrh	r2, [r2, #0]
 800342c:	4013      	ands	r3, r2
 800342e:	d008      	beq.n	8003442 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003432:	1dba      	adds	r2, r7, #6
 8003434:	8812      	ldrh	r2, [r2, #0]
 8003436:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd f9df 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af06      	add	r7, sp, #24
 8003456:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0ff      	b.n	8003662 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a81      	ldr	r2, [pc, #516]	; (800366c <HAL_PCD_Init+0x21c>)
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	23aa      	movs	r3, #170	; 0xaa
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	2100      	movs	r1, #0
 8003476:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0018      	movs	r0, r3
 800347c:	f008 fd70 	bl	800bf60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a7a      	ldr	r2, [pc, #488]	; (800366c <HAL_PCD_Init+0x21c>)
 8003484:	2103      	movs	r1, #3
 8003486:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0018      	movs	r0, r3
 800348e:	f004 fe0f 	bl	80080b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003492:	230f      	movs	r3, #15
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e058      	b.n	800354e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800349c:	200f      	movs	r0, #15
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	0013      	movs	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	18cb      	adds	r3, r1, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	0013      	movs	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	183a      	adds	r2, r7, r0
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034cc:	0004      	movs	r4, r0
 80034ce:	183b      	adds	r3, r7, r0
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b298      	uxth	r0, r3
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	0013      	movs	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	18cb      	adds	r3, r1, r3
 80034e4:	3336      	adds	r3, #54	; 0x36
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	0013      	movs	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	18cb      	adds	r3, r1, r3
 80034fc:	3303      	adds	r3, #3
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	0013      	movs	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	189b      	adds	r3, r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	18cb      	adds	r3, r1, r3
 8003512:	3338      	adds	r3, #56	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003518:	193b      	adds	r3, r7, r4
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	0013      	movs	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	189b      	adds	r3, r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	18cb      	adds	r3, r1, r3
 8003528:	333c      	adds	r3, #60	; 0x3c
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352e:	193b      	adds	r3, r7, r4
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	0013      	movs	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	189b      	adds	r3, r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	18cb      	adds	r3, r1, r3
 800353e:	3340      	adds	r3, #64	; 0x40
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003544:	193b      	adds	r3, r7, r4
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	193b      	adds	r3, r7, r4
 800354a:	3201      	adds	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	210f      	movs	r1, #15
 8003550:	187b      	adds	r3, r7, r1
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d39f      	bcc.n	800349c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e056      	b.n	8003612 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003564:	240f      	movs	r4, #15
 8003566:	193b      	adds	r3, r7, r4
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	236a      	movs	r3, #106	; 0x6a
 800356e:	33ff      	adds	r3, #255	; 0xff
 8003570:	0019      	movs	r1, r3
 8003572:	0013      	movs	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	189b      	adds	r3, r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	18c3      	adds	r3, r0, r3
 800357c:	185b      	adds	r3, r3, r1
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003582:	193b      	adds	r3, r7, r4
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	23b4      	movs	r3, #180	; 0xb4
 800358a:	0059      	lsls	r1, r3, #1
 800358c:	0013      	movs	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	189b      	adds	r3, r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	18c3      	adds	r3, r0, r3
 8003596:	185b      	adds	r3, r3, r1
 8003598:	193a      	adds	r2, r7, r4
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	236c      	movs	r3, #108	; 0x6c
 80035a6:	33ff      	adds	r3, #255	; 0xff
 80035a8:	0019      	movs	r1, r3
 80035aa:	0013      	movs	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	18c3      	adds	r3, r0, r3
 80035b4:	185b      	adds	r3, r3, r1
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	23bc      	movs	r3, #188	; 0xbc
 80035c2:	0059      	lsls	r1, r3, #1
 80035c4:	0013      	movs	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	189b      	adds	r3, r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	18c3      	adds	r3, r0, r3
 80035ce:	185b      	adds	r3, r3, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	23be      	movs	r3, #190	; 0xbe
 80035dc:	0059      	lsls	r1, r3, #1
 80035de:	0013      	movs	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	18c3      	adds	r3, r0, r3
 80035e8:	185b      	adds	r3, r3, r1
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	23c0      	movs	r3, #192	; 0xc0
 80035f6:	0059      	lsls	r1, r3, #1
 80035f8:	0013      	movs	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	18c3      	adds	r3, r0, r3
 8003602:	185b      	adds	r3, r3, r1
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003608:	193b      	adds	r3, r7, r4
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	193b      	adds	r3, r7, r4
 800360e:	3201      	adds	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	230f      	movs	r3, #15
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d3a1      	bcc.n	8003564 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	466a      	mov	r2, sp
 8003628:	0011      	movs	r1, r2
 800362a:	001a      	movs	r2, r3
 800362c:	3210      	adds	r2, #16
 800362e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003630:	c170      	stmia	r1!, {r4, r5, r6}
 8003632:	ca30      	ldmia	r2!, {r4, r5}
 8003634:	c130      	stmia	r1!, {r4, r5}
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f004 fd52 	bl	80080e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <HAL_PCD_Init+0x21c>)
 800364c:	2101      	movs	r1, #1
 800364e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d103      	bne.n	8003660 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f001 fd34 	bl	80050c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b005      	add	sp, #20
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	000002a9 	.word	0x000002a9

08003670 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23aa      	movs	r3, #170	; 0xaa
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_PCD_Start+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e014      	b.n	80036b2 <HAL_PCD_Start+0x42>
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	23aa      	movs	r3, #170	; 0xaa
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	2101      	movs	r1, #1
 8003690:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0018      	movs	r0, r3
 8003698:	f004 fcf4 	bl	8008084 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f006 fc4f 	bl	8009f44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	23aa      	movs	r3, #170	; 0xaa
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	2100      	movs	r1, #0
 80036ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f006 fc51 	bl	8009f70 <USB_ReadInterrupts>
 80036ce:	0002      	movs	r2, r0
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	401a      	ands	r2, r3
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	429a      	cmp	r2, r3
 80036dc:	d103      	bne.n	80036e6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fbbb 	bl	8003e5c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f006 fc40 	bl	8009f70 <USB_ReadInterrupts>
 80036f0:	0002      	movs	r2, r0
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	401a      	ands	r2, r3
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d114      	bne.n	800372a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2244      	movs	r2, #68	; 0x44
 8003706:	5a9b      	ldrh	r3, [r3, r2]
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	49a2      	ldr	r1, [pc, #648]	; (8003998 <HAL_PCD_IRQHandler+0x2dc>)
 8003710:	400a      	ands	r2, r1
 8003712:	b291      	uxth	r1, r2
 8003714:	2244      	movs	r2, #68	; 0x44
 8003716:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f008 fcab 	bl	800c076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2100      	movs	r1, #0
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f945 	bl	80039b4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0018      	movs	r0, r3
 8003730:	f006 fc1e 	bl	8009f70 <USB_ReadInterrupts>
 8003734:	0002      	movs	r2, r0
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	01db      	lsls	r3, r3, #7
 800373a:	401a      	ands	r2, r3
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	429a      	cmp	r2, r3
 8003742:	d10b      	bne.n	800375c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2244      	movs	r2, #68	; 0x44
 800374a:	5a9b      	ldrh	r3, [r3, r2]
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4992      	ldr	r1, [pc, #584]	; (800399c <HAL_PCD_IRQHandler+0x2e0>)
 8003754:	400a      	ands	r2, r1
 8003756:	b291      	uxth	r1, r2
 8003758:	2244      	movs	r2, #68	; 0x44
 800375a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0018      	movs	r0, r3
 8003762:	f006 fc05 	bl	8009f70 <USB_ReadInterrupts>
 8003766:	0002      	movs	r2, r0
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	019b      	lsls	r3, r3, #6
 800376c:	401a      	ands	r2, r3
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	429a      	cmp	r2, r3
 8003774:	d10b      	bne.n	800378e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2244      	movs	r2, #68	; 0x44
 800377c:	5a9b      	ldrh	r3, [r3, r2]
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4986      	ldr	r1, [pc, #536]	; (80039a0 <HAL_PCD_IRQHandler+0x2e4>)
 8003786:	400a      	ands	r2, r1
 8003788:	b291      	uxth	r1, r2
 800378a:	2244      	movs	r2, #68	; 0x44
 800378c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0018      	movs	r0, r3
 8003794:	f006 fbec 	bl	8009f70 <USB_ReadInterrupts>
 8003798:	0002      	movs	r2, r0
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	401a      	ands	r2, r3
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	015b      	lsls	r3, r3, #5
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d137      	bne.n	8003818 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	5a9b      	ldrh	r3, [r3, r2]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2104      	movs	r1, #4
 80037b8:	438a      	bics	r2, r1
 80037ba:	b291      	uxth	r1, r2
 80037bc:	2240      	movs	r2, #64	; 0x40
 80037be:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	5a9b      	ldrh	r3, [r3, r2]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2108      	movs	r1, #8
 80037d0:	438a      	bics	r2, r1
 80037d2:	b291      	uxth	r1, r2
 80037d4:	2240      	movs	r2, #64	; 0x40
 80037d6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	23b8      	movs	r3, #184	; 0xb8
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d109      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	23b8      	movs	r3, #184	; 0xb8
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	2100      	movs	r1, #0
 80037ec:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2100      	movs	r1, #0
 80037f2:	0018      	movs	r0, r3
 80037f4:	f001 fc92 	bl	800511c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f008 fc7c 	bl	800c0f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2244      	movs	r2, #68	; 0x44
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4965      	ldr	r1, [pc, #404]	; (80039a4 <HAL_PCD_IRQHandler+0x2e8>)
 8003810:	400a      	ands	r2, r1
 8003812:	b291      	uxth	r1, r2
 8003814:	2244      	movs	r2, #68	; 0x44
 8003816:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0018      	movs	r0, r3
 800381e:	f006 fba7 	bl	8009f70 <USB_ReadInterrupts>
 8003822:	0002      	movs	r2, r0
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	401a      	ands	r2, r3
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	429a      	cmp	r2, r3
 8003830:	d127      	bne.n	8003882 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	5a9b      	ldrh	r3, [r3, r2]
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2108      	movs	r1, #8
 8003842:	430a      	orrs	r2, r1
 8003844:	b291      	uxth	r1, r2
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2244      	movs	r2, #68	; 0x44
 8003850:	5a9b      	ldrh	r3, [r3, r2]
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4953      	ldr	r1, [pc, #332]	; (80039a8 <HAL_PCD_IRQHandler+0x2ec>)
 800385a:	400a      	ands	r2, r1
 800385c:	b291      	uxth	r1, r2
 800385e:	2244      	movs	r2, #68	; 0x44
 8003860:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	5a9b      	ldrh	r3, [r3, r2]
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2104      	movs	r1, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	b291      	uxth	r1, r2
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f008 fc1f 	bl	800c0c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0018      	movs	r0, r3
 8003888:	f006 fb72 	bl	8009f70 <USB_ReadInterrupts>
 800388c:	0003      	movs	r3, r0
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	4013      	ands	r3, r2
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d145      	bne.n	8003922 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2244      	movs	r2, #68	; 0x44
 800389c:	5a9b      	ldrh	r3, [r3, r2]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	438a      	bics	r2, r1
 80038a8:	b291      	uxth	r1, r2
 80038aa:	2244      	movs	r2, #68	; 0x44
 80038ac:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	23b8      	movs	r3, #184	; 0xb8
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12f      	bne.n	800391a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	5a9b      	ldrh	r3, [r3, r2]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2104      	movs	r1, #4
 80038ca:	430a      	orrs	r2, r1
 80038cc:	b291      	uxth	r1, r2
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	5a9b      	ldrh	r3, [r3, r2]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2108      	movs	r1, #8
 80038e2:	430a      	orrs	r2, r1
 80038e4:	b291      	uxth	r1, r2
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	23b8      	movs	r3, #184	; 0xb8
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	2101      	movs	r1, #1
 80038f2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2254      	movs	r2, #84	; 0x54
 80038fa:	5a9b      	ldrh	r3, [r3, r2]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	223c      	movs	r2, #60	; 0x3c
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	23b9      	movs	r3, #185	; 0xb9
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2101      	movs	r1, #1
 8003912:	0018      	movs	r0, r3
 8003914:	f001 fc02 	bl	800511c <HAL_PCDEx_LPM_Callback>
 8003918:	e003      	b.n	8003922 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f008 fbcf 	bl	800c0c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0018      	movs	r0, r3
 8003928:	f006 fb22 	bl	8009f70 <USB_ReadInterrupts>
 800392c:	0002      	movs	r2, r0
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	401a      	ands	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d10f      	bne.n	800395c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2244      	movs	r2, #68	; 0x44
 8003942:	5a9b      	ldrh	r3, [r3, r2]
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4918      	ldr	r1, [pc, #96]	; (80039ac <HAL_PCD_IRQHandler+0x2f0>)
 800394c:	400a      	ands	r2, r1
 800394e:	b291      	uxth	r1, r2
 8003950:	2244      	movs	r2, #68	; 0x44
 8003952:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f008 fb7e 	bl	800c058 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0018      	movs	r0, r3
 8003962:	f006 fb05 	bl	8009f70 <USB_ReadInterrupts>
 8003966:	0002      	movs	r2, r0
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	401a      	ands	r2, r3
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	429a      	cmp	r2, r3
 8003974:	d10b      	bne.n	800398e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2244      	movs	r2, #68	; 0x44
 800397c:	5a9b      	ldrh	r3, [r3, r2]
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_PCD_IRQHandler+0x2f4>)
 8003986:	400a      	ands	r2, r1
 8003988:	b291      	uxth	r1, r2
 800398a:	2244      	movs	r2, #68	; 0x44
 800398c:	5299      	strh	r1, [r3, r2]
  }
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	fffffbff 	.word	0xfffffbff
 800399c:	ffffbfff 	.word	0xffffbfff
 80039a0:	ffffdfff 	.word	0xffffdfff
 80039a4:	ffffefff 	.word	0xffffefff
 80039a8:	fffff7ff 	.word	0xfffff7ff
 80039ac:	fffffdff 	.word	0xfffffdff
 80039b0:	fffffeff 	.word	0xfffffeff

080039b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	000a      	movs	r2, r1
 80039be:	1cfb      	adds	r3, r7, #3
 80039c0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	23aa      	movs	r3, #170	; 0xaa
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_PCD_SetAddress+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e017      	b.n	8003a02 <HAL_PCD_SetAddress+0x4e>
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	23aa      	movs	r3, #170	; 0xaa
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	2101      	movs	r1, #1
 80039da:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1cfa      	adds	r2, r7, #3
 80039e0:	2124      	movs	r1, #36	; 0x24
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	1cfb      	adds	r3, r7, #3
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f006 fa93 	bl	8009f1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	23aa      	movs	r3, #170	; 0xaa
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	2100      	movs	r1, #0
 80039fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b002      	add	sp, #8
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a0a:	b590      	push	{r4, r7, lr}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	000c      	movs	r4, r1
 8003a14:	0010      	movs	r0, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	1cfb      	adds	r3, r7, #3
 8003a1a:	1c22      	adds	r2, r4, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	003b      	movs	r3, r7
 8003a20:	1c02      	adds	r2, r0, #0
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	1c0a      	adds	r2, r1, #0
 8003a28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a2a:	230b      	movs	r3, #11
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a32:	1cfb      	adds	r3, r7, #3
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da0f      	bge.n	8003a5c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3c:	1cfb      	adds	r3, r7, #3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2207      	movs	r2, #7
 8003a42:	4013      	ands	r3, r2
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	0013      	movs	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	705a      	strb	r2, [r3, #1]
 8003a5a:	e00f      	b.n	8003a7c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5c:	1cfb      	adds	r3, r7, #3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2207      	movs	r2, #7
 8003a62:	401a      	ands	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	189b      	adds	r3, r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	3369      	adds	r3, #105	; 0x69
 8003a6e:	33ff      	adds	r3, #255	; 0xff
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	1cfb      	adds	r3, r7, #3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2207      	movs	r2, #7
 8003a82:	4013      	ands	r3, r2
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a8a:	003b      	movs	r3, r7
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1cba      	adds	r2, r7, #2
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d102      	bne.n	8003aba <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	23aa      	movs	r3, #170	; 0xaa
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_Open+0xc0>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e013      	b.n	8003af2 <HAL_PCD_EP_Open+0xe8>
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	23aa      	movs	r3, #170	; 0xaa
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f004 fb2d 	bl	800813c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	23aa      	movs	r3, #170	; 0xaa
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	2100      	movs	r1, #0
 8003aea:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003aec:	230b      	movs	r3, #11
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	781b      	ldrb	r3, [r3, #0]
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b005      	add	sp, #20
 8003af8:	bd90      	pop	{r4, r7, pc}

08003afa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	000a      	movs	r2, r1
 8003b04:	1cfb      	adds	r3, r7, #3
 8003b06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b08:	1cfb      	adds	r3, r7, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da0f      	bge.n	8003b32 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b12:	1cfb      	adds	r3, r7, #3
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2207      	movs	r2, #7
 8003b18:	4013      	ands	r3, r2
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	705a      	strb	r2, [r3, #1]
 8003b30:	e00f      	b.n	8003b52 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	1cfb      	adds	r3, r7, #3
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2207      	movs	r2, #7
 8003b38:	401a      	ands	r2, r3
 8003b3a:	0013      	movs	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	3369      	adds	r3, #105	; 0x69
 8003b44:	33ff      	adds	r3, #255	; 0xff
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b52:	1cfb      	adds	r3, r7, #3
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2207      	movs	r2, #7
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	23aa      	movs	r3, #170	; 0xaa
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_Close+0x76>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e011      	b.n	8003b94 <HAL_PCD_EP_Close+0x9a>
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	23aa      	movs	r3, #170	; 0xaa
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	2101      	movs	r1, #1
 8003b78:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	0011      	movs	r1, r2
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 fe4e 	bl	8008824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	23aa      	movs	r3, #170	; 0xaa
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	2100      	movs	r1, #0
 8003b90:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	200b      	movs	r0, #11
 8003baa:	183b      	adds	r3, r7, r0
 8003bac:	1c0a      	adds	r2, r1, #0
 8003bae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb0:	0001      	movs	r1, r0
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2207      	movs	r2, #7
 8003bb8:	401a      	ands	r2, r3
 8003bba:	0013      	movs	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	3369      	adds	r3, #105	; 0x69
 8003bc4:	33ff      	adds	r3, #255	; 0xff
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2207      	movs	r2, #7
 8003bea:	4013      	ands	r3, r2
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d107      	bne.n	8003c0c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f004 ffcd 	bl	8008ba4 <USB_EPStartXfer>
 8003c0a:	e006      	b.n	8003c1a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	0011      	movs	r1, r2
 8003c14:	0018      	movs	r0, r3
 8003c16:	f004 ffc5 	bl	8008ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b006      	add	sp, #24
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	000a      	movs	r2, r1
 8003c2e:	1cfb      	adds	r3, r7, #3
 8003c30:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c32:	1cfb      	adds	r3, r7, #3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2207      	movs	r2, #7
 8003c38:	401a      	ands	r2, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	23c2      	movs	r3, #194	; 0xc2
 8003c3e:	0059      	lsls	r1, r3, #1
 8003c40:	0013      	movs	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	18c3      	adds	r3, r0, r3
 8003c4a:	185b      	adds	r3, r3, r1
 8003c4c:	681b      	ldr	r3, [r3, #0]
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	200b      	movs	r0, #11
 8003c64:	183b      	adds	r3, r7, r0
 8003c66:	1c0a      	adds	r2, r1, #0
 8003c68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2207      	movs	r2, #7
 8003c70:	4013      	ands	r3, r2
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	0013      	movs	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	18d3      	adds	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2224      	movs	r2, #36	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca8:	183b      	adds	r3, r7, r0
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2207      	movs	r2, #7
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2207      	movs	r2, #7
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d107      	bne.n	8003cd0 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f004 ff6b 	bl	8008ba4 <USB_EPStartXfer>
 8003cce:	e006      	b.n	8003cde <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f004 ff63 	bl	8008ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b006      	add	sp, #24
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	000a      	movs	r2, r1
 8003cf2:	1cfb      	adds	r3, r7, #3
 8003cf4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cf6:	1cfb      	adds	r3, r7, #3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2207      	movs	r2, #7
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d901      	bls.n	8003d0a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e046      	b.n	8003d98 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d0a:	1cfb      	adds	r3, r7, #3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da0f      	bge.n	8003d34 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	1cfb      	adds	r3, r7, #3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2207      	movs	r2, #7
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	0013      	movs	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	705a      	strb	r2, [r3, #1]
 8003d32:	e00d      	b.n	8003d50 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d34:	1cfb      	adds	r3, r7, #3
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	0013      	movs	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	3369      	adds	r3, #105	; 0x69
 8003d42:	33ff      	adds	r3, #255	; 0xff
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	18d3      	adds	r3, r2, r3
 8003d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d56:	1cfb      	adds	r3, r7, #3
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	23aa      	movs	r3, #170	; 0xaa
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_PCD_EP_SetStall+0x8c>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e011      	b.n	8003d98 <HAL_PCD_EP_SetStall+0xb0>
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	23aa      	movs	r3, #170	; 0xaa
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f005 ffc6 	bl	8009d18 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	23aa      	movs	r3, #170	; 0xaa
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	2100      	movs	r1, #0
 8003d94:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	000a      	movs	r2, r1
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dae:	1cfb      	adds	r3, r7, #3
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	220f      	movs	r2, #15
 8003db4:	401a      	ands	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d901      	bls.n	8003dc2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e048      	b.n	8003e54 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dc2:	1cfb      	adds	r3, r7, #3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	da0f      	bge.n	8003dec <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dcc:	1cfb      	adds	r3, r7, #3
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	705a      	strb	r2, [r3, #1]
 8003dea:	e00f      	b.n	8003e0c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	1cfb      	adds	r3, r7, #3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2207      	movs	r2, #7
 8003df2:	401a      	ands	r2, r3
 8003df4:	0013      	movs	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	3369      	adds	r3, #105	; 0x69
 8003dfe:	33ff      	adds	r3, #255	; 0xff
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	18d3      	adds	r3, r2, r3
 8003e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e12:	1cfb      	adds	r3, r7, #3
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2207      	movs	r2, #7
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	23aa      	movs	r3, #170	; 0xaa
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_EP_ClrStall+0x90>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e011      	b.n	8003e54 <HAL_PCD_EP_ClrStall+0xb4>
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	23aa      	movs	r3, #170	; 0xaa
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	2101      	movs	r1, #1
 8003e38:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	0011      	movs	r1, r2
 8003e42:	0018      	movs	r0, r3
 8003e44:	f005 ffb8 	bl	8009db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	23aa      	movs	r3, #170	; 0xaa
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	2100      	movs	r1, #0
 8003e50:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b004      	add	sp, #16
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b096      	sub	sp, #88	; 0x58
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e64:	f000 fbd8 	bl	8004618 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2056      	movs	r0, #86	; 0x56
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	2144      	movs	r1, #68	; 0x44
 8003e72:	5a52      	ldrh	r2, [r2, r1]
 8003e74:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	2455      	movs	r4, #85	; 0x55
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	210f      	movs	r1, #15
 8003e82:	400a      	ands	r2, r1
 8003e84:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003e86:	193b      	adds	r3, r7, r4
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d000      	beq.n	8003e90 <PCD_EP_ISR_Handler+0x34>
 8003e8e:	e179      	b.n	8004184 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	4013      	ands	r3, r2
 8003e98:	d154      	bne.n	8003f44 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	200e      	movs	r0, #14
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	49af      	ldr	r1, [pc, #700]	; (8004164 <PCD_EP_ISR_Handler+0x308>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	183a      	adds	r2, r7, r0
 8003eb2:	8812      	ldrh	r2, [r2, #0]
 8003eb4:	49ac      	ldr	r1, [pc, #688]	; (8004168 <PCD_EP_ISR_Handler+0x30c>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3328      	adds	r3, #40	; 0x28
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2250      	movs	r2, #80	; 0x50
 8003ec8:	5a9b      	ldrh	r3, [r3, r2]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	001a      	movs	r2, r3
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	18d2      	adds	r2, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	4aa3      	ldr	r2, [pc, #652]	; (800416c <PCD_EP_ISR_Handler+0x310>)
 8003ede:	4694      	mov	ip, r2
 8003ee0:	4463      	add	r3, ip
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	0d9a      	lsrs	r2, r3, #22
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	18d2      	adds	r2, r2, r3
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2100      	movs	r1, #0
 8003efe:	0018      	movs	r0, r3
 8003f00:	f008 f88c 	bl	800c01c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	5c9b      	ldrb	r3, [r3, r2]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <PCD_EP_ISR_Handler+0xb8>
 8003f10:	f000 fb82 	bl	8004618 <PCD_EP_ISR_Handler+0x7bc>
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <PCD_EP_ISR_Handler+0xc4>
 8003f1c:	f000 fb7c 	bl	8004618 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	4252      	negs	r2, r2
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	b291      	uxth	r1, r2
 8003f36:	224c      	movs	r2, #76	; 0x4c
 8003f38:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2224      	movs	r2, #36	; 0x24
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5499      	strb	r1, [r3, r2]
 8003f42:	e369      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3369      	adds	r3, #105	; 0x69
 8003f48:	33ff      	adds	r3, #255	; 0xff
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2152      	movs	r1, #82	; 0x52
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4013      	ands	r3, r2
 8003f62:	d037      	beq.n	8003fd4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2250      	movs	r2, #80	; 0x50
 8003f6a:	5a9b      	ldrh	r3, [r3, r2]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	001a      	movs	r2, r3
 8003f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	18d2      	adds	r2, r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <PCD_EP_ISR_Handler+0x314>)
 8003f80:	4694      	mov	ip, r2
 8003f82:	4463      	add	r3, ip
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	059b      	lsls	r3, r3, #22
 8003f88:	0d9a      	lsrs	r2, r3, #22
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	22ac      	movs	r2, #172	; 0xac
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	1899      	adds	r1, r3, r2
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f006 f836 	bl	800a014 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	2010      	movs	r0, #16
 8003fb2:	183b      	adds	r3, r7, r0
 8003fb4:	496f      	ldr	r1, [pc, #444]	; (8004174 <PCD_EP_ISR_Handler+0x318>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	183a      	adds	r2, r7, r0
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f007 ffef 	bl	800bfb0 <HAL_PCD_SetupStageCallback>
 8003fd2:	e321      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fd4:	2352      	movs	r3, #82	; 0x52
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	5e9b      	ldrsh	r3, [r3, r2]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db00      	blt.n	8003fe2 <PCD_EP_ISR_Handler+0x186>
 8003fe0:	e31a      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	201e      	movs	r0, #30
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	4961      	ldr	r1, [pc, #388]	; (8004174 <PCD_EP_ISR_Handler+0x318>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	183a      	adds	r2, r7, r0
 8003ffa:	8812      	ldrh	r2, [r2, #0]
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	430a      	orrs	r2, r1
 8004000:	b292      	uxth	r2, r2
 8004002:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2250      	movs	r2, #80	; 0x50
 800400a:	5a9b      	ldrh	r3, [r3, r2]
 800400c:	b29b      	uxth	r3, r3
 800400e:	001a      	movs	r2, r3
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	18d2      	adds	r2, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	4a54      	ldr	r2, [pc, #336]	; (8004170 <PCD_EP_ISR_Handler+0x314>)
 8004020:	4694      	mov	ip, r2
 8004022:	4463      	add	r3, ip
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	059b      	lsls	r3, r3, #22
 8004028:	0d9a      	lsrs	r2, r3, #22
 800402a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01a      	beq.n	800406c <PCD_EP_ISR_Handler+0x210>
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800404e:	b29b      	uxth	r3, r3
 8004050:	f005 ffe0 	bl	800a014 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	18d2      	adds	r2, r2, r3
 800405e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004060:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f007 ffb7 	bl	800bfda <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	001a      	movs	r2, r3
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4013      	ands	r3, r2
 800407c:	d000      	beq.n	8004080 <PCD_EP_ISR_Handler+0x224>
 800407e:	e2cb      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2250      	movs	r2, #80	; 0x50
 800408c:	5a9b      	ldrh	r3, [r3, r2]
 800408e:	b29b      	uxth	r3, r3
 8004090:	001a      	movs	r2, r3
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	189b      	adds	r3, r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	4a35      	ldr	r2, [pc, #212]	; (8004170 <PCD_EP_ISR_Handler+0x314>)
 800409c:	4694      	mov	ip, r2
 800409e:	4463      	add	r3, ip
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d110      	bne.n	80040cc <PCD_EP_ISR_Handler+0x270>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4a31      	ldr	r2, [pc, #196]	; (8004178 <PCD_EP_ISR_Handler+0x31c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4a29      	ldr	r2, [pc, #164]	; (8004168 <PCD_EP_ISR_Handler+0x30c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e02b      	b.n	8004124 <PCD_EP_ISR_Handler+0x2c8>
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b3e      	cmp	r3, #62	; 0x3e
 80040d2:	d812      	bhi.n	80040fa <PCD_EP_ISR_Handler+0x29e>
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	647b      	str	r3, [r7, #68]	; 0x44
 80040dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2201      	movs	r2, #1
 80040e2:	4013      	ands	r3, r2
 80040e4:	d002      	beq.n	80040ec <PCD_EP_ISR_Handler+0x290>
 80040e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e8:	3301      	adds	r3, #1
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	e014      	b.n	8004124 <PCD_EP_ISR_Handler+0x2c8>
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
 8004102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	221f      	movs	r2, #31
 8004108:	4013      	ands	r3, r2
 800410a:	d102      	bne.n	8004112 <PCD_EP_ISR_Handler+0x2b6>
 800410c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410e:	3b01      	subs	r3, #1
 8004110:	647b      	str	r3, [r7, #68]	; 0x44
 8004112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004114:	b29b      	uxth	r3, r3
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	b29b      	uxth	r3, r3
 800411a:	4a13      	ldr	r2, [pc, #76]	; (8004168 <PCD_EP_ISR_Handler+0x30c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	b29a      	uxth	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	2012      	movs	r0, #18
 800412e:	183b      	adds	r3, r7, r0
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <PCD_EP_ISR_Handler+0x320>)
 8004132:	400a      	ands	r2, r1
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	183b      	adds	r3, r7, r0
 8004138:	183a      	adds	r2, r7, r0
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0149      	lsls	r1, r1, #5
 8004140:	404a      	eors	r2, r1
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	183b      	adds	r3, r7, r0
 8004146:	183a      	adds	r2, r7, r0
 8004148:	8812      	ldrh	r2, [r2, #0]
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	0189      	lsls	r1, r1, #6
 800414e:	404a      	eors	r2, r1
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	183a      	adds	r2, r7, r0
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	4909      	ldr	r1, [pc, #36]	; (8004180 <PCD_EP_ISR_Handler+0x324>)
 800415c:	430a      	orrs	r2, r1
 800415e:	b292      	uxth	r2, r2
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	e259      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
 8004164:	ffff8f0f 	.word	0xffff8f0f
 8004168:	ffff8000 	.word	0xffff8000
 800416c:	00000402 	.word	0x00000402
 8004170:	00000406 	.word	0x00000406
 8004174:	00000f8f 	.word	0x00000f8f
 8004178:	ffff83ff 	.word	0xffff83ff
 800417c:	ffffbf8f 	.word	0xffffbf8f
 8004180:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	001a      	movs	r2, r3
 800418a:	2055      	movs	r0, #85	; 0x55
 800418c:	183b      	adds	r3, r7, r0
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	18d2      	adds	r2, r2, r3
 8004194:	2152      	movs	r1, #82	; 0x52
 8004196:	187b      	adds	r3, r7, r1
 8004198:	8812      	ldrh	r2, [r2, #0]
 800419a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800419c:	187b      	adds	r3, r7, r1
 800419e:	2200      	movs	r2, #0
 80041a0:	5e9b      	ldrsh	r3, [r3, r2]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db00      	blt.n	80041a8 <PCD_EP_ISR_Handler+0x34c>
 80041a6:	e0fa      	b.n	800439e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	183b      	adds	r3, r7, r0
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	2450      	movs	r4, #80	; 0x50
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	49cf      	ldr	r1, [pc, #828]	; (80044fc <PCD_EP_ISR_Handler+0x6a0>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	801a      	strh	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	001a      	movs	r2, r3
 80041ca:	183b      	adds	r3, r7, r0
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	193a      	adds	r2, r7, r4
 80041d4:	8812      	ldrh	r2, [r2, #0]
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	430a      	orrs	r2, r1
 80041da:	b292      	uxth	r2, r2
 80041dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80041de:	183b      	adds	r3, r7, r0
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	0013      	movs	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	3369      	adds	r3, #105	; 0x69
 80041ec:	33ff      	adds	r3, #255	; 0xff
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80041f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f6:	7b1b      	ldrb	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d125      	bne.n	8004248 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2250      	movs	r2, #80	; 0x50
 8004202:	5a9b      	ldrh	r3, [r3, r2]
 8004204:	b29b      	uxth	r3, r3
 8004206:	001a      	movs	r2, r3
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	18d2      	adds	r2, r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	4aba      	ldr	r2, [pc, #744]	; (8004500 <PCD_EP_ISR_Handler+0x6a4>)
 8004218:	4694      	mov	ip, r2
 800421a:	4463      	add	r3, ip
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	2448      	movs	r4, #72	; 0x48
 8004220:	193b      	adds	r3, r7, r4
 8004222:	0592      	lsls	r2, r2, #22
 8004224:	0d92      	lsrs	r2, r2, #22
 8004226:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004228:	193b      	adds	r3, r7, r4
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d100      	bne.n	8004232 <PCD_EP_ISR_Handler+0x3d6>
 8004230:	e08d      	b.n	800434e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004238:	6959      	ldr	r1, [r3, #20]
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	88da      	ldrh	r2, [r3, #6]
 800423e:	193b      	adds	r3, r7, r4
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	f005 fee7 	bl	800a014 <USB_ReadPMA>
 8004246:	e082      	b.n	800434e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424a:	78db      	ldrb	r3, [r3, #3]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d10c      	bne.n	800426a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004250:	2348      	movs	r3, #72	; 0x48
 8004252:	18fc      	adds	r4, r7, r3
 8004254:	2352      	movs	r3, #82	; 0x52
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	881a      	ldrh	r2, [r3, #0]
 800425a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f000 f9ee 	bl	8004640 <HAL_PCD_EP_DB_Receive>
 8004264:	0003      	movs	r3, r0
 8004266:	8023      	strh	r3, [r4, #0]
 8004268:	e071      	b.n	800434e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	001a      	movs	r2, r3
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	18d3      	adds	r3, r2, r3
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29a      	uxth	r2, r3
 800427c:	204a      	movs	r0, #74	; 0x4a
 800427e:	183b      	adds	r3, r7, r0
 8004280:	49a0      	ldr	r1, [pc, #640]	; (8004504 <PCD_EP_ISR_Handler+0x6a8>)
 8004282:	400a      	ands	r2, r1
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	001a      	movs	r2, r3
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	183a      	adds	r2, r7, r0
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	499b      	ldr	r1, [pc, #620]	; (8004508 <PCD_EP_ISR_Handler+0x6ac>)
 800429a:	430a      	orrs	r2, r1
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	001a      	movs	r2, r3
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	18d3      	adds	r3, r2, r3
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	01db      	lsls	r3, r3, #7
 80042b8:	4013      	ands	r3, r2
 80042ba:	d024      	beq.n	8004306 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2250      	movs	r2, #80	; 0x50
 80042c2:	5a9b      	ldrh	r3, [r3, r2]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	001a      	movs	r2, r3
 80042c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	18d2      	adds	r2, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	18d3      	adds	r3, r2, r3
 80042d6:	4a8d      	ldr	r2, [pc, #564]	; (800450c <PCD_EP_ISR_Handler+0x6b0>)
 80042d8:	4694      	mov	ip, r2
 80042da:	4463      	add	r3, ip
 80042dc:	881a      	ldrh	r2, [r3, #0]
 80042de:	2448      	movs	r4, #72	; 0x48
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	0592      	lsls	r2, r2, #22
 80042e4:	0d92      	lsrs	r2, r2, #22
 80042e6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02e      	beq.n	800434e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	6959      	ldr	r1, [r3, #20]
 80042f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fa:	891a      	ldrh	r2, [r3, #8]
 80042fc:	193b      	adds	r3, r7, r4
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	f005 fe88 	bl	800a014 <USB_ReadPMA>
 8004304:	e023      	b.n	800434e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2250      	movs	r2, #80	; 0x50
 800430c:	5a9b      	ldrh	r3, [r3, r2]
 800430e:	b29b      	uxth	r3, r3
 8004310:	001a      	movs	r2, r3
 8004312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	18d2      	adds	r2, r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	4a77      	ldr	r2, [pc, #476]	; (8004500 <PCD_EP_ISR_Handler+0x6a4>)
 8004322:	4694      	mov	ip, r2
 8004324:	4463      	add	r3, ip
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	2448      	movs	r4, #72	; 0x48
 800432a:	193b      	adds	r3, r7, r4
 800432c:	0592      	lsls	r2, r2, #22
 800432e:	0d92      	lsrs	r2, r2, #22
 8004330:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004332:	193b      	adds	r3, r7, r4
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	6959      	ldr	r1, [r3, #20]
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	895a      	ldrh	r2, [r3, #10]
 8004346:	193b      	adds	r3, r7, r4
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f005 fe63 	bl	800a014 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	2148      	movs	r1, #72	; 0x48
 8004354:	187b      	adds	r3, r7, r1
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	18d2      	adds	r2, r2, r3
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800435e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	187b      	adds	r3, r7, r1
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	18d2      	adds	r2, r2, r3
 8004368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <PCD_EP_ISR_Handler+0x524>
 8004374:	187b      	adds	r3, r7, r1
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d207      	bcs.n	8004390 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f007 fe26 	bl	800bfda <HAL_PCD_DataOutStageCallback>
 800438e:	e006      	b.n	800439e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004396:	0011      	movs	r1, r2
 8004398:	0018      	movs	r0, r3
 800439a:	f004 fc03 	bl	8008ba4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800439e:	2452      	movs	r4, #82	; 0x52
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	4013      	ands	r3, r2
 80043a8:	d100      	bne.n	80043ac <PCD_EP_ISR_Handler+0x550>
 80043aa:	e135      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80043ac:	2055      	movs	r0, #85	; 0x55
 80043ae:	183b      	adds	r3, r7, r0
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	0013      	movs	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	18d3      	adds	r3, r2, r3
 80043c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	001a      	movs	r2, r3
 80043c8:	183b      	adds	r3, r7, r0
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	18d3      	adds	r3, r2, r3
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	2542      	movs	r5, #66	; 0x42
 80043d6:	197b      	adds	r3, r7, r5
 80043d8:	494d      	ldr	r1, [pc, #308]	; (8004510 <PCD_EP_ISR_Handler+0x6b4>)
 80043da:	400a      	ands	r2, r1
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	001a      	movs	r2, r3
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	197a      	adds	r2, r7, r5
 80043ee:	8812      	ldrh	r2, [r2, #0]
 80043f0:	4948      	ldr	r1, [pc, #288]	; (8004514 <PCD_EP_ISR_Handler+0x6b8>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	b292      	uxth	r2, r2
 80043f6:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80043f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d100      	bne.n	8004402 <PCD_EP_ISR_Handler+0x5a6>
 8004400:	e0ad      	b.n	800455e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8004402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004408:	193b      	adds	r3, r7, r4
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4013      	ands	r3, r2
 8004410:	d046      	beq.n	80044a0 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d125      	bne.n	8004466 <PCD_EP_ISR_Handler+0x60a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2250      	movs	r2, #80	; 0x50
 8004426:	5a9b      	ldrh	r3, [r3, r2]
 8004428:	b29b      	uxth	r3, r3
 800442a:	001a      	movs	r2, r3
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	189b      	adds	r3, r3, r2
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	4a33      	ldr	r2, [pc, #204]	; (800450c <PCD_EP_ISR_Handler+0x6b0>)
 800443e:	4694      	mov	ip, r2
 8004440:	4463      	add	r3, ip
 8004442:	623b      	str	r3, [r7, #32]
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	4a33      	ldr	r2, [pc, #204]	; (8004518 <PCD_EP_ISR_Handler+0x6bc>)
 800444c:	4013      	ands	r3, r2
 800444e:	b29a      	uxth	r2, r3
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <PCD_EP_ISR_Handler+0x6b8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	b29a      	uxth	r2, r3
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e073      	b.n	800454e <PCD_EP_ISR_Handler+0x6f2>
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d16f      	bne.n	800454e <PCD_EP_ISR_Handler+0x6f2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2250      	movs	r2, #80	; 0x50
 800447a:	5a9b      	ldrh	r3, [r3, r2]
 800447c:	b29b      	uxth	r3, r3
 800447e:	001a      	movs	r2, r3
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	189b      	adds	r3, r3, r2
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	00da      	lsls	r2, r3, #3
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	18d3      	adds	r3, r2, r3
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <PCD_EP_ISR_Handler+0x6b0>)
 8004492:	4694      	mov	ip, r2
 8004494:	4463      	add	r3, ip
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	2200      	movs	r2, #0
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e056      	b.n	800454e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d136      	bne.n	800451c <PCD_EP_ISR_Handler+0x6c0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2250      	movs	r2, #80	; 0x50
 80044ba:	5a9b      	ldrh	r3, [r3, r2]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	001a      	movs	r2, r3
 80044c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	00da      	lsls	r2, r3, #3
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <PCD_EP_ISR_Handler+0x6a4>)
 80044d2:	4694      	mov	ip, r2
 80044d4:	4463      	add	r3, ip
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <PCD_EP_ISR_Handler+0x6bc>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <PCD_EP_ISR_Handler+0x6b8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e029      	b.n	800454e <PCD_EP_ISR_Handler+0x6f2>
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	00000f8f 	.word	0x00000f8f
 8004500:	00000406 	.word	0x00000406
 8004504:	ffff8f8f 	.word	0xffff8f8f
 8004508:	ffff80c0 	.word	0xffff80c0
 800450c:	00000402 	.word	0x00000402
 8004510:	ffff8f0f 	.word	0xffff8f0f
 8004514:	ffff8000 	.word	0xffff8000
 8004518:	ffff83ff 	.word	0xffff83ff
 800451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d114      	bne.n	800454e <PCD_EP_ISR_Handler+0x6f2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2250      	movs	r2, #80	; 0x50
 800452a:	5a9b      	ldrh	r3, [r3, r2]
 800452c:	b29b      	uxth	r3, r3
 800452e:	001a      	movs	r2, r3
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	189b      	adds	r3, r3, r2
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	00da      	lsls	r2, r3, #3
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	18d3      	adds	r3, r2, r3
 8004540:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <PCD_EP_ISR_Handler+0x7dc>)
 8004542:	4694      	mov	ip, r2
 8004544:	4463      	add	r3, ip
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	2200      	movs	r2, #0
 800454c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0011      	movs	r1, r2
 8004556:	0018      	movs	r0, r3
 8004558:	f007 fd60 	bl	800c01c <HAL_PCD_DataInStageCallback>
 800455c:	e05c      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	78db      	ldrb	r3, [r3, #3]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d150      	bne.n	8004608 <PCD_EP_ISR_Handler+0x7ac>
 8004566:	2352      	movs	r3, #82	; 0x52
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4013      	ands	r3, r2
 8004572:	d149      	bne.n	8004608 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2250      	movs	r2, #80	; 0x50
 800457a:	5a9b      	ldrh	r3, [r3, r2]
 800457c:	b29b      	uxth	r3, r3
 800457e:	001a      	movs	r2, r3
 8004580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	18d2      	adds	r2, r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	18d3      	adds	r3, r2, r3
 800458e:	4a2b      	ldr	r2, [pc, #172]	; (800463c <PCD_EP_ISR_Handler+0x7e0>)
 8004590:	4694      	mov	ip, r2
 8004592:	4463      	add	r3, ip
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	2140      	movs	r1, #64	; 0x40
 8004598:	187b      	adds	r3, r7, r1
 800459a:	0592      	lsls	r2, r2, #22
 800459c:	0d92      	lsrs	r2, r2, #22
 800459e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d907      	bls.n	80045bc <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	619a      	str	r2, [r3, #24]
 80045ba:	e002      	b.n	80045c2 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80045bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0011      	movs	r1, r2
 80045d2:	0018      	movs	r0, r3
 80045d4:	f007 fd22 	bl	800c01c <HAL_PCD_DataInStageCallback>
 80045d8:	e01e      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	18d2      	adds	r2, r2, r3
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80045ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	18d2      	adds	r2, r2, r3
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f004 facf 	bl	8008ba4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004606:	e007      	b.n	8004618 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004608:	2352      	movs	r3, #82	; 0x52
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	881a      	ldrh	r2, [r3, #0]
 800460e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0018      	movs	r0, r3
 8004614:	f000 f930 	bl	8004878 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2244      	movs	r2, #68	; 0x44
 800461e:	5a9b      	ldrh	r3, [r3, r2]
 8004620:	b29b      	uxth	r3, r3
 8004622:	b21b      	sxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	da01      	bge.n	800462c <PCD_EP_ISR_Handler+0x7d0>
 8004628:	f7ff fc1e 	bl	8003e68 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b016      	add	sp, #88	; 0x58
 8004634:	bdb0      	pop	{r4, r5, r7, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	00000406 	.word	0x00000406
 800463c:	00000402 	.word	0x00000402

08004640 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	1dbb      	adds	r3, r7, #6
 800464c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800464e:	1dbb      	adds	r3, r7, #6
 8004650:	881a      	ldrh	r2, [r3, #0]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	01db      	lsls	r3, r3, #7
 8004656:	4013      	ands	r3, r2
 8004658:	d100      	bne.n	800465c <HAL_PCD_EP_DB_Receive+0x1c>
 800465a:	e07d      	b.n	8004758 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2250      	movs	r2, #80	; 0x50
 8004662:	5a9b      	ldrh	r3, [r3, r2]
 8004664:	b29b      	uxth	r3, r3
 8004666:	001a      	movs	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	18d2      	adds	r2, r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	4a7a      	ldr	r2, [pc, #488]	; (8004860 <HAL_PCD_EP_DB_Receive+0x220>)
 8004678:	4694      	mov	ip, r2
 800467a:	4463      	add	r3, ip
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	211a      	movs	r1, #26
 8004680:	187b      	adds	r3, r7, r1
 8004682:	0592      	lsls	r2, r2, #22
 8004684:	0d92      	lsrs	r2, r2, #22
 8004686:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	187b      	adds	r3, r7, r1
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d307      	bcc.n	80046a4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	187b      	adds	r3, r7, r1
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	1ad2      	subs	r2, r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	619a      	str	r2, [r3, #24]
 80046a2:	e002      	b.n	80046aa <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d121      	bne.n	80046f6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	001a      	movs	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	18d3      	adds	r3, r2, r3
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	2018      	movs	r0, #24
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	4966      	ldr	r1, [pc, #408]	; (8004864 <HAL_PCD_EP_DB_Receive+0x224>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	183a      	adds	r2, r7, r0
 80046d2:	8812      	ldrh	r2, [r2, #0]
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	0189      	lsls	r1, r1, #6
 80046d8:	404a      	eors	r2, r1
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	001a      	movs	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	183a      	adds	r2, r7, r0
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	495e      	ldr	r1, [pc, #376]	; (8004868 <HAL_PCD_EP_DB_Receive+0x228>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	b292      	uxth	r2, r2
 80046f4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046f6:	1dbb      	adds	r3, r7, #6
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	2240      	movs	r2, #64	; 0x40
 80046fc:	4013      	ands	r3, r2
 80046fe:	d01a      	beq.n	8004736 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	001a      	movs	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29a      	uxth	r2, r3
 8004712:	2016      	movs	r0, #22
 8004714:	183b      	adds	r3, r7, r0
 8004716:	4955      	ldr	r1, [pc, #340]	; (800486c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004718:	400a      	ands	r2, r1
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	001a      	movs	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	183a      	adds	r2, r7, r0
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	4950      	ldr	r1, [pc, #320]	; (8004870 <HAL_PCD_EP_DB_Receive+0x230>)
 8004730:	430a      	orrs	r2, r1
 8004732:	b292      	uxth	r2, r2
 8004734:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004736:	241a      	movs	r4, #26
 8004738:	193b      	adds	r3, r7, r4
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d100      	bne.n	8004742 <HAL_PCD_EP_DB_Receive+0x102>
 8004740:	e086      	b.n	8004850 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6959      	ldr	r1, [r3, #20]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	891a      	ldrh	r2, [r3, #8]
 800474e:	193b      	adds	r3, r7, r4
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	f005 fc5f 	bl	800a014 <USB_ReadPMA>
 8004756:	e07b      	b.n	8004850 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2250      	movs	r2, #80	; 0x50
 800475e:	5a9b      	ldrh	r3, [r3, r2]
 8004760:	b29b      	uxth	r3, r3
 8004762:	001a      	movs	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	18d2      	adds	r2, r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	4a40      	ldr	r2, [pc, #256]	; (8004874 <HAL_PCD_EP_DB_Receive+0x234>)
 8004774:	4694      	mov	ip, r2
 8004776:	4463      	add	r3, ip
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	211a      	movs	r1, #26
 800477c:	187b      	adds	r3, r7, r1
 800477e:	0592      	lsls	r2, r2, #22
 8004780:	0d92      	lsrs	r2, r2, #22
 8004782:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	187b      	adds	r3, r7, r1
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d307      	bcc.n	80047a0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	187b      	adds	r3, r7, r1
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	1ad2      	subs	r2, r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	619a      	str	r2, [r3, #24]
 800479e:	e002      	b.n	80047a6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d121      	bne.n	80047f2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	001a      	movs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	201e      	movs	r0, #30
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	4927      	ldr	r1, [pc, #156]	; (8004864 <HAL_PCD_EP_DB_Receive+0x224>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	183a      	adds	r2, r7, r0
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0189      	lsls	r1, r1, #6
 80047d4:	404a      	eors	r2, r1
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	001a      	movs	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	183a      	adds	r2, r7, r0
 80047e8:	8812      	ldrh	r2, [r2, #0]
 80047ea:	491f      	ldr	r1, [pc, #124]	; (8004868 <HAL_PCD_EP_DB_Receive+0x228>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	b292      	uxth	r2, r2
 80047f0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80047f2:	1dbb      	adds	r3, r7, #6
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	4013      	ands	r3, r2
 80047fa:	d11a      	bne.n	8004832 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	001a      	movs	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	201c      	movs	r0, #28
 8004810:	183b      	adds	r3, r7, r0
 8004812:	4916      	ldr	r1, [pc, #88]	; (800486c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004814:	400a      	ands	r2, r1
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	183a      	adds	r2, r7, r0
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	4911      	ldr	r1, [pc, #68]	; (8004870 <HAL_PCD_EP_DB_Receive+0x230>)
 800482c:	430a      	orrs	r2, r1
 800482e:	b292      	uxth	r2, r2
 8004830:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004832:	241a      	movs	r4, #26
 8004834:	193b      	adds	r3, r7, r4
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	895a      	ldrh	r2, [r3, #10]
 8004848:	193b      	adds	r3, r7, r4
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f005 fbe2 	bl	800a014 <USB_ReadPMA>
    }
  }

  return count;
 8004850:	231a      	movs	r3, #26
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	881b      	ldrh	r3, [r3, #0]
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b009      	add	sp, #36	; 0x24
 800485c:	bd90      	pop	{r4, r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	00000402 	.word	0x00000402
 8004864:	ffffbf8f 	.word	0xffffbf8f
 8004868:	ffff8080 	.word	0xffff8080
 800486c:	ffff8f8f 	.word	0xffff8f8f
 8004870:	ffff80c0 	.word	0xffff80c0
 8004874:	00000406 	.word	0x00000406

08004878 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b0a2      	sub	sp, #136	; 0x88
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	1dbb      	adds	r3, r7, #6
 8004884:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004886:	1dbb      	adds	r3, r7, #6
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	4013      	ands	r3, r2
 800488e:	d100      	bne.n	8004892 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004890:	e1c8      	b.n	8004c24 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2250      	movs	r2, #80	; 0x50
 8004898:	5a9b      	ldrh	r3, [r3, r2]
 800489a:	b29b      	uxth	r3, r3
 800489c:	001a      	movs	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	18d2      	adds	r2, r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	18d3      	adds	r3, r2, r3
 80048ac:	4ad7      	ldr	r2, [pc, #860]	; (8004c0c <HAL_PCD_EP_DB_Transmit+0x394>)
 80048ae:	4694      	mov	ip, r2
 80048b0:	4463      	add	r3, ip
 80048b2:	881a      	ldrh	r2, [r3, #0]
 80048b4:	214e      	movs	r1, #78	; 0x4e
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	0592      	lsls	r2, r2, #22
 80048ba:	0d92      	lsrs	r2, r2, #22
 80048bc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d907      	bls.n	80048da <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	187b      	adds	r3, r7, r1
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	e002      	b.n	80048e0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d000      	beq.n	80048ea <HAL_PCD_EP_DB_Transmit+0x72>
 80048e8:	e0b5      	b.n	8004a56 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d125      	bne.n	800493e <HAL_PCD_EP_DB_Transmit+0xc6>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2250      	movs	r2, #80	; 0x50
 80048fe:	5a9b      	ldrh	r3, [r3, r2]
 8004900:	b29b      	uxth	r3, r3
 8004902:	001a      	movs	r2, r3
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	189b      	adds	r3, r3, r2
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	4abd      	ldr	r2, [pc, #756]	; (8004c0c <HAL_PCD_EP_DB_Transmit+0x394>)
 8004916:	4694      	mov	ip, r2
 8004918:	4463      	add	r3, ip
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	4abb      	ldr	r2, [pc, #748]	; (8004c10 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004924:	4013      	ands	r3, r2
 8004926:	b29a      	uxth	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	4ab8      	ldr	r2, [pc, #736]	; (8004c14 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	b29a      	uxth	r2, r3
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	e01b      	b.n	8004976 <HAL_PCD_EP_DB_Transmit+0xfe>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d117      	bne.n	8004976 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2250      	movs	r2, #80	; 0x50
 8004952:	5a9b      	ldrh	r3, [r3, r2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	001a      	movs	r2, r3
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	189b      	adds	r3, r3, r2
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	00da      	lsls	r2, r3, #3
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	4aa8      	ldr	r2, [pc, #672]	; (8004c0c <HAL_PCD_EP_DB_Transmit+0x394>)
 800496a:	4694      	mov	ip, r2
 800496c:	4463      	add	r3, ip
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2200      	movs	r2, #0
 8004974:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d125      	bne.n	80049d0 <HAL_PCD_EP_DB_Transmit+0x158>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2250      	movs	r2, #80	; 0x50
 8004990:	5a9b      	ldrh	r3, [r3, r2]
 8004992:	b29b      	uxth	r3, r3
 8004994:	001a      	movs	r2, r3
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	189b      	adds	r3, r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	00da      	lsls	r2, r3, #3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	4a9c      	ldr	r2, [pc, #624]	; (8004c18 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80049a8:	4694      	mov	ip, r2
 80049aa:	4463      	add	r3, ip
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4a96      	ldr	r2, [pc, #600]	; (8004c10 <HAL_PCD_EP_DB_Transmit+0x398>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4a93      	ldr	r2, [pc, #588]	; (8004c14 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e018      	b.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x18a>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d114      	bne.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x18a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2250      	movs	r2, #80	; 0x50
 80049de:	5a9b      	ldrh	r3, [r3, r2]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	001a      	movs	r2, r3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	189b      	adds	r3, r3, r2
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	00da      	lsls	r2, r3, #3
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	4a88      	ldr	r2, [pc, #544]	; (8004c18 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80049f6:	4694      	mov	ip, r2
 80049f8:	4463      	add	r3, ip
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2200      	movs	r2, #0
 8004a00:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0011      	movs	r1, r2
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f007 fb06 	bl	800c01c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a10:	1dbb      	adds	r3, r7, #6
 8004a12:	881a      	ldrh	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d100      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004a1c:	e2d4      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	001a      	movs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	18d3      	adds	r3, r2, r3
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	2012      	movs	r0, #18
 8004a32:	183b      	adds	r3, r7, r0
 8004a34:	4979      	ldr	r1, [pc, #484]	; (8004c1c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	001a      	movs	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	18d3      	adds	r3, r2, r3
 8004a48:	183a      	adds	r2, r7, r0
 8004a4a:	8812      	ldrh	r2, [r2, #0]
 8004a4c:	4974      	ldr	r1, [pc, #464]	; (8004c20 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	b292      	uxth	r2, r2
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e2b8      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a56:	1dbb      	adds	r3, r7, #6
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d01a      	beq.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	001a      	movs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18d3      	adds	r3, r2, r3
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	2044      	movs	r0, #68	; 0x44
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	4968      	ldr	r1, [pc, #416]	; (8004c1c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	001a      	movs	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	183a      	adds	r2, r7, r0
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	4963      	ldr	r1, [pc, #396]	; (8004c20 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004a92:	430a      	orrs	r2, r1
 8004a94:	b292      	uxth	r2, r2
 8004a96:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	5c9b      	ldrb	r3, [r3, r2]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d000      	beq.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004aa2:	e291      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	214e      	movs	r1, #78	; 0x4e
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	18d2      	adds	r2, r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	18d2      	adds	r2, r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d309      	bcc.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	621a      	str	r2, [r3, #32]
 8004ae0:	e016      	b.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004aea:	234e      	movs	r3, #78	; 0x4e
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]
 8004afa:	e009      	b.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d150      	bne.n	8004bba <HAL_PCD_EP_DB_Transmit+0x342>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2250      	movs	r2, #80	; 0x50
 8004b24:	5a9b      	ldrh	r3, [r3, r2]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	001a      	movs	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	00da      	lsls	r2, r3, #3
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	4a34      	ldr	r2, [pc, #208]	; (8004c0c <HAL_PCD_EP_DB_Transmit+0x394>)
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	4463      	add	r3, ip
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	4a30      	ldr	r2, [pc, #192]	; (8004c10 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	4a2d      	ldr	r2, [pc, #180]	; (8004c14 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e044      	b.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b6e:	d810      	bhi.n	8004b92 <HAL_PCD_EP_DB_Transmit+0x31a>
 8004b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d002      	beq.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b80:	3301      	adds	r3, #1
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	e030      	b.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9a:	221f      	movs	r2, #31
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e01c      	b.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d118      	bne.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2250      	movs	r2, #80	; 0x50
 8004bce:	5a9b      	ldrh	r3, [r3, r2]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	00da      	lsls	r2, r3, #3
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_PCD_EP_DB_Transmit+0x394>)
 8004be6:	4694      	mov	ip, r2
 8004be8:	4463      	add	r3, ip
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6959      	ldr	r1, [r3, #20]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	891a      	ldrh	r2, [r3, #8]
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f005 f9c2 	bl	8009f8c <USB_WritePMA>
 8004c08:	e1de      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	00000402 	.word	0x00000402
 8004c10:	ffff83ff 	.word	0xffff83ff
 8004c14:	ffff8000 	.word	0xffff8000
 8004c18:	00000406 	.word	0x00000406
 8004c1c:	ffff8f8f 	.word	0xffff8f8f
 8004c20:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2250      	movs	r2, #80	; 0x50
 8004c2a:	5a9b      	ldrh	r3, [r3, r2]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	001a      	movs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	18d2      	adds	r2, r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	18d3      	adds	r3, r2, r3
 8004c3e:	4aca      	ldr	r2, [pc, #808]	; (8004f68 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004c40:	4694      	mov	ip, r2
 8004c42:	4463      	add	r3, ip
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	214e      	movs	r1, #78	; 0x4e
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	0592      	lsls	r2, r2, #22
 8004c4c:	0d92      	lsrs	r2, r2, #22
 8004c4e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d307      	bcc.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	1ad2      	subs	r2, r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	619a      	str	r2, [r3, #24]
 8004c6a:	e002      	b.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d000      	beq.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x404>
 8004c7a:	e0c0      	b.n	8004dfe <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d125      	bne.n	8004cd0 <HAL_PCD_EP_DB_Transmit+0x458>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2250      	movs	r2, #80	; 0x50
 8004c90:	5a9b      	ldrh	r3, [r3, r2]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	001a      	movs	r2, r3
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00da      	lsls	r2, r3, #3
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	18d3      	adds	r3, r2, r3
 8004ca6:	4ab1      	ldr	r2, [pc, #708]	; (8004f6c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004ca8:	4694      	mov	ip, r2
 8004caa:	4463      	add	r3, ip
 8004cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	4aae      	ldr	r2, [pc, #696]	; (8004f70 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4aab      	ldr	r2, [pc, #684]	; (8004f74 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e01b      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x490>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d117      	bne.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x490>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	677b      	str	r3, [r7, #116]	; 0x74
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2250      	movs	r2, #80	; 0x50
 8004ce4:	5a9b      	ldrh	r3, [r3, r2]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	001a      	movs	r2, r3
 8004cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	677b      	str	r3, [r7, #116]	; 0x74
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00da      	lsls	r2, r3, #3
 8004cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	4a9c      	ldr	r2, [pc, #624]	; (8004f6c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004cfc:	4694      	mov	ip, r2
 8004cfe:	4463      	add	r3, ip
 8004d00:	673b      	str	r3, [r7, #112]	; 0x70
 8004d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d130      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x500>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	187a      	adds	r2, r7, r1
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2250      	movs	r2, #80	; 0x50
 8004d26:	5a9b      	ldrh	r3, [r3, r2]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	187a      	adds	r2, r7, r1
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	00da      	lsls	r2, r3, #3
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	4a89      	ldr	r2, [pc, #548]	; (8004f68 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004d44:	4694      	mov	ip, r2
 8004d46:	4463      	add	r3, ip
 8004d48:	2184      	movs	r1, #132	; 0x84
 8004d4a:	187a      	adds	r2, r7, r1
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4a86      	ldr	r2, [pc, #536]	; (8004f70 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	4a82      	ldr	r2, [pc, #520]	; (8004f74 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e018      	b.n	8004daa <HAL_PCD_EP_DB_Transmit+0x532>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d114      	bne.n	8004daa <HAL_PCD_EP_DB_Transmit+0x532>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2250      	movs	r2, #80	; 0x50
 8004d86:	5a9b      	ldrh	r3, [r3, r2]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	00da      	lsls	r2, r3, #3
 8004d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	4a72      	ldr	r2, [pc, #456]	; (8004f68 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004d9e:	4694      	mov	ip, r2
 8004da0:	4463      	add	r3, ip
 8004da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004da6:	2200      	movs	r2, #0
 8004da8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	0011      	movs	r1, r2
 8004db2:	0018      	movs	r0, r3
 8004db4:	f007 f932 	bl	800c01c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004db8:	1dbb      	adds	r3, r7, #6
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	01db      	lsls	r3, r3, #7
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d000      	beq.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004dc4:	e100      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	001a      	movs	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	18d3      	adds	r3, r2, r3
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	2046      	movs	r0, #70	; 0x46
 8004dda:	183b      	adds	r3, r7, r0
 8004ddc:	4966      	ldr	r1, [pc, #408]	; (8004f78 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	001a      	movs	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	18d3      	adds	r3, r2, r3
 8004df0:	183a      	adds	r2, r7, r0
 8004df2:	8812      	ldrh	r2, [r2, #0]
 8004df4:	4961      	ldr	r1, [pc, #388]	; (8004f7c <HAL_PCD_EP_DB_Transmit+0x704>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	e0e4      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004dfe:	1dbb      	adds	r3, r7, #6
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	01db      	lsls	r3, r3, #7
 8004e06:	4013      	ands	r3, r2
 8004e08:	d11a      	bne.n	8004e40 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	001a      	movs	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	204c      	movs	r0, #76	; 0x4c
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	4955      	ldr	r1, [pc, #340]	; (8004f78 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	183a      	adds	r2, r7, r0
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	4950      	ldr	r1, [pc, #320]	; (8004f7c <HAL_PCD_EP_DB_Transmit+0x704>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d000      	beq.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004e4a:	e0bd      	b.n	8004fc8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	214e      	movs	r1, #78	; 0x4e
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	18d2      	adds	r2, r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	18d2      	adds	r2, r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6a1a      	ldr	r2, [r3, #32]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d309      	bcc.n	8004e8a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	e016      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004e92:	234e      	movs	r3, #78	; 0x4e
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2224      	movs	r2, #36	; 0x24
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]
 8004ea2:	e009      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2200      	movs	r2, #0
 8004eae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d15c      	bne.n	8004f80 <HAL_PCD_EP_DB_Transmit+0x708>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2250      	movs	r2, #80	; 0x50
 8004ed2:	5a9b      	ldrh	r3, [r3, r2]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	00da      	lsls	r2, r3, #3
 8004ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004eea:	4694      	mov	ip, r2
 8004eec:	4463      	add	r3, ip
 8004eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d110      	bne.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e04d      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f1c:	d810      	bhi.n	8004f40 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
 8004f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f26:	2201      	movs	r2, #1
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d002      	beq.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2e:	3301      	adds	r3, #1
 8004f30:	657b      	str	r3, [r7, #84]	; 0x54
 8004f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	029b      	lsls	r3, r3, #10
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	e039      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	657b      	str	r3, [r7, #84]	; 0x54
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	221f      	movs	r2, #31
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d102      	bne.n	8004f54 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	3b01      	subs	r3, #1
 8004f52:	657b      	str	r3, [r7, #84]	; 0x54
 8004f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e025      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004f68:	00000406 	.word	0x00000406
 8004f6c:	00000402 	.word	0x00000402
 8004f70:	ffff83ff 	.word	0xffff83ff
 8004f74:	ffff8000 	.word	0xffff8000
 8004f78:	ffff8f8f 	.word	0xffff8f8f
 8004f7c:	ffffc080 	.word	0xffffc080
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d115      	bne.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2250      	movs	r2, #80	; 0x50
 8004f8e:	5a9b      	ldrh	r3, [r3, r2]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	001a      	movs	r2, r3
 8004f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	00da      	lsls	r2, r3, #3
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa2:	18d3      	adds	r3, r2, r3
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8004fa6:	4694      	mov	ip, r2
 8004fa8:	4463      	add	r3, ip
 8004faa:	663b      	str	r3, [r7, #96]	; 0x60
 8004fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fb2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6959      	ldr	r1, [r3, #20]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	895a      	ldrh	r2, [r3, #10]
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f004 ffe2 	bl	8009f8c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	001a      	movs	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	18d3      	adds	r3, r2, r3
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	2010      	movs	r0, #16
 8004fdc:	183b      	adds	r3, r7, r0
 8004fde:	4911      	ldr	r1, [pc, #68]	; (8005024 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	183a      	adds	r2, r7, r0
 8004fe8:	8812      	ldrh	r2, [r2, #0]
 8004fea:	2110      	movs	r1, #16
 8004fec:	404a      	eors	r2, r1
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	183b      	adds	r3, r7, r0
 8004ff2:	183a      	adds	r2, r7, r0
 8004ff4:	8812      	ldrh	r2, [r2, #0]
 8004ff6:	2120      	movs	r1, #32
 8004ff8:	404a      	eors	r2, r1
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	001a      	movs	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	183a      	adds	r2, r7, r0
 800500c:	8812      	ldrh	r2, [r2, #0]
 800500e:	4906      	ldr	r1, [pc, #24]	; (8005028 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8005010:	430a      	orrs	r2, r1
 8005012:	b292      	uxth	r2, r2
 8005014:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b022      	add	sp, #136	; 0x88
 800501e:	bd80      	pop	{r7, pc}
 8005020:	00000406 	.word	0x00000406
 8005024:	ffff8fbf 	.word	0xffff8fbf
 8005028:	ffff8080 	.word	0xffff8080

0800502c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	0008      	movs	r0, r1
 8005036:	0011      	movs	r1, r2
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	240a      	movs	r4, #10
 800503c:	193b      	adds	r3, r7, r4
 800503e:	1c02      	adds	r2, r0, #0
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	2308      	movs	r3, #8
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	1c0a      	adds	r2, r1, #0
 8005048:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800504a:	0021      	movs	r1, r4
 800504c:	187b      	adds	r3, r7, r1
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	4013      	ands	r3, r2
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800505a:	187b      	adds	r3, r7, r1
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	2207      	movs	r2, #7
 8005060:	4013      	ands	r3, r2
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	0013      	movs	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	189b      	adds	r3, r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	18d3      	adds	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	e00b      	b.n	800508c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005074:	230a      	movs	r3, #10
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	0013      	movs	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	189b      	adds	r3, r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	3369      	adds	r3, #105	; 0x69
 8005084:	33ff      	adds	r3, #255	; 0xff
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800508c:	2308      	movs	r3, #8
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	80da      	strh	r2, [r3, #6]
 80050a4:	e00b      	b.n	80050be <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2201      	movs	r2, #1
 80050aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	0018      	movs	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b007      	add	sp, #28
 80050c6:	bd90      	pop	{r4, r7, pc}

080050c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	23ba      	movs	r3, #186	; 0xba
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	2101      	movs	r1, #1
 80050de:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	23b8      	movs	r3, #184	; 0xb8
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	2100      	movs	r1, #0
 80050e8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2254      	movs	r2, #84	; 0x54
 80050ee:	5a9b      	ldrh	r3, [r3, r2]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2201      	movs	r2, #1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b299      	uxth	r1, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2254      	movs	r2, #84	; 0x54
 80050fc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2254      	movs	r2, #84	; 0x54
 8005102:	5a9b      	ldrh	r3, [r3, r2]
 8005104:	b29b      	uxth	r3, r3
 8005106:	2202      	movs	r2, #2
 8005108:	4313      	orrs	r3, r2
 800510a:	b299      	uxth	r1, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2254      	movs	r2, #84	; 0x54
 8005110:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	000a      	movs	r2, r1
 8005126:	1cfb      	adds	r3, r7, #3
 8005128:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b002      	add	sp, #8
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f000 fb76 	bl	8005834 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	d100      	bne.n	8005154 <HAL_RCC_OscConfig+0x20>
 8005152:	e08e      	b.n	8005272 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005154:	4bc5      	ldr	r3, [pc, #788]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	220c      	movs	r2, #12
 800515a:	4013      	ands	r3, r2
 800515c:	2b04      	cmp	r3, #4
 800515e:	d00e      	beq.n	800517e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005160:	4bc2      	ldr	r3, [pc, #776]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	220c      	movs	r2, #12
 8005166:	4013      	ands	r3, r2
 8005168:	2b08      	cmp	r3, #8
 800516a:	d117      	bne.n	800519c <HAL_RCC_OscConfig+0x68>
 800516c:	4bbf      	ldr	r3, [pc, #764]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	23c0      	movs	r3, #192	; 0xc0
 8005172:	025b      	lsls	r3, r3, #9
 8005174:	401a      	ands	r2, r3
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	429a      	cmp	r2, r3
 800517c:	d10e      	bne.n	800519c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517e:	4bbb      	ldr	r3, [pc, #748]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	4013      	ands	r3, r2
 8005188:	d100      	bne.n	800518c <HAL_RCC_OscConfig+0x58>
 800518a:	e071      	b.n	8005270 <HAL_RCC_OscConfig+0x13c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d000      	beq.n	8005196 <HAL_RCC_OscConfig+0x62>
 8005194:	e06c      	b.n	8005270 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f000 fb4c 	bl	8005834 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_OscConfig+0x80>
 80051a4:	4bb1      	ldr	r3, [pc, #708]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4bb0      	ldr	r3, [pc, #704]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	0249      	lsls	r1, r1, #9
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e02f      	b.n	8005214 <HAL_RCC_OscConfig+0xe0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCC_OscConfig+0xa2>
 80051bc:	4bab      	ldr	r3, [pc, #684]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4baa      	ldr	r3, [pc, #680]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051c2:	49ab      	ldr	r1, [pc, #684]	; (8005470 <HAL_RCC_OscConfig+0x33c>)
 80051c4:	400a      	ands	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	4ba8      	ldr	r3, [pc, #672]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4ba7      	ldr	r3, [pc, #668]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051ce:	49a9      	ldr	r1, [pc, #676]	; (8005474 <HAL_RCC_OscConfig+0x340>)
 80051d0:	400a      	ands	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e01e      	b.n	8005214 <HAL_RCC_OscConfig+0xe0>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d10e      	bne.n	80051fc <HAL_RCC_OscConfig+0xc8>
 80051de:	4ba3      	ldr	r3, [pc, #652]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4ba2      	ldr	r3, [pc, #648]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051e4:	2180      	movs	r1, #128	; 0x80
 80051e6:	02c9      	lsls	r1, r1, #11
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	4b9f      	ldr	r3, [pc, #636]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b9e      	ldr	r3, [pc, #632]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	0249      	lsls	r1, r1, #9
 80051f6:	430a      	orrs	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0xe0>
 80051fc:	4b9b      	ldr	r3, [pc, #620]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b9a      	ldr	r3, [pc, #616]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005202:	499b      	ldr	r1, [pc, #620]	; (8005470 <HAL_RCC_OscConfig+0x33c>)
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	4b98      	ldr	r3, [pc, #608]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b97      	ldr	r3, [pc, #604]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800520e:	4999      	ldr	r1, [pc, #612]	; (8005474 <HAL_RCC_OscConfig+0x340>)
 8005210:	400a      	ands	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d014      	beq.n	8005246 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7fd f884 	bl	8002328 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005226:	f7fd f87f 	bl	8002328 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	; 0x64
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e2fd      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	4013      	ands	r3, r2
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0xf2>
 8005244:	e015      	b.n	8005272 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005246:	f7fd f86f 	bl	8002328 <HAL_GetTick>
 800524a:	0003      	movs	r3, r0
 800524c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd f86a 	bl	8002328 <HAL_GetTick>
 8005254:	0002      	movs	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e2e8      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005262:	4b82      	ldr	r3, [pc, #520]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4013      	ands	r3, r2
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x11c>
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005270:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	4013      	ands	r3, r2
 800527a:	d100      	bne.n	800527e <HAL_RCC_OscConfig+0x14a>
 800527c:	e06c      	b.n	8005358 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800527e:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	220c      	movs	r2, #12
 8005284:	4013      	ands	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005288:	4b78      	ldr	r3, [pc, #480]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	220c      	movs	r2, #12
 800528e:	4013      	ands	r3, r2
 8005290:	2b08      	cmp	r3, #8
 8005292:	d11f      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1a0>
 8005294:	4b75      	ldr	r3, [pc, #468]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	23c0      	movs	r3, #192	; 0xc0
 800529a:	025b      	lsls	r3, r3, #9
 800529c:	401a      	ands	r2, r3
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d116      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a6:	4b71      	ldr	r3, [pc, #452]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2202      	movs	r2, #2
 80052ac:	4013      	ands	r3, r2
 80052ae:	d005      	beq.n	80052bc <HAL_RCC_OscConfig+0x188>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e2bb      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052bc:	4b6b      	ldr	r3, [pc, #428]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	22f8      	movs	r2, #248	; 0xf8
 80052c2:	4393      	bics	r3, r2
 80052c4:	0019      	movs	r1, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00da      	lsls	r2, r3, #3
 80052cc:	4b67      	ldr	r3, [pc, #412]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80052ce:	430a      	orrs	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d2:	e041      	b.n	8005358 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d024      	beq.n	8005326 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052dc:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b62      	ldr	r3, [pc, #392]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80052e2:	2101      	movs	r1, #1
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fd f81e 	bl	8002328 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f2:	f7fd f819 	bl	8002328 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e297      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005304:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2202      	movs	r2, #2
 800530a:	4013      	ands	r3, r2
 800530c:	d0f1      	beq.n	80052f2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22f8      	movs	r2, #248	; 0xf8
 8005314:	4393      	bics	r3, r2
 8005316:	0019      	movs	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	00da      	lsls	r2, r3, #3
 800531e:	4b53      	ldr	r3, [pc, #332]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e018      	b.n	8005358 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005326:	4b51      	ldr	r3, [pc, #324]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b50      	ldr	r3, [pc, #320]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800532c:	2101      	movs	r1, #1
 800532e:	438a      	bics	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005332:	f7fc fff9 	bl	8002328 <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533c:	f7fc fff4 	bl	8002328 <HAL_GetTick>
 8005340:	0002      	movs	r2, r0
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e272      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534e:	4b47      	ldr	r3, [pc, #284]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2202      	movs	r2, #2
 8005354:	4013      	ands	r3, r2
 8005356:	d1f1      	bne.n	800533c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2208      	movs	r2, #8
 800535e:	4013      	ands	r3, r2
 8005360:	d036      	beq.n	80053d0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d019      	beq.n	800539e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800536a:	4b40      	ldr	r3, [pc, #256]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800536c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800536e:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005370:	2101      	movs	r1, #1
 8005372:	430a      	orrs	r2, r1
 8005374:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005376:	f7fc ffd7 	bl	8002328 <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005380:	f7fc ffd2 	bl	8002328 <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e250      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2202      	movs	r2, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d0f1      	beq.n	8005380 <HAL_RCC_OscConfig+0x24c>
 800539c:	e018      	b.n	80053d0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a2:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053a4:	2101      	movs	r1, #1
 80053a6:	438a      	bics	r2, r1
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fc ffbd 	bl	8002328 <HAL_GetTick>
 80053ae:	0003      	movs	r3, r0
 80053b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b4:	f7fc ffb8 	bl	8002328 <HAL_GetTick>
 80053b8:	0002      	movs	r2, r0
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e236      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c6:	4b29      	ldr	r3, [pc, #164]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	d1f1      	bne.n	80053b4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2204      	movs	r2, #4
 80053d6:	4013      	ands	r3, r2
 80053d8:	d100      	bne.n	80053dc <HAL_RCC_OscConfig+0x2a8>
 80053da:	e0b5      	b.n	8005548 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	201f      	movs	r0, #31
 80053de:	183b      	adds	r3, r7, r0
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053e4:	4b21      	ldr	r3, [pc, #132]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	055b      	lsls	r3, r3, #21
 80053ec:	4013      	ands	r3, r2
 80053ee:	d110      	bne.n	8005412 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0x338>)
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	0549      	lsls	r1, r1, #21
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	055b      	lsls	r3, r3, #21
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800540c:	183b      	adds	r3, r7, r0
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_OscConfig+0x344>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4013      	ands	r3, r2
 800541c:	d11a      	bne.n	8005454 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_RCC_OscConfig+0x344>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <HAL_RCC_OscConfig+0x344>)
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	0049      	lsls	r1, r1, #1
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542c:	f7fc ff7c 	bl	8002328 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7fc ff77 	bl	8002328 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	; 0x64
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1f5      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_OscConfig+0x344>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10f      	bne.n	800547c <HAL_RCC_OscConfig+0x348>
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <HAL_RCC_OscConfig+0x338>)
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <HAL_RCC_OscConfig+0x338>)
 8005462:	2101      	movs	r1, #1
 8005464:	430a      	orrs	r2, r1
 8005466:	621a      	str	r2, [r3, #32]
 8005468:	e036      	b.n	80054d8 <HAL_RCC_OscConfig+0x3a4>
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	40021000 	.word	0x40021000
 8005470:	fffeffff 	.word	0xfffeffff
 8005474:	fffbffff 	.word	0xfffbffff
 8005478:	40007000 	.word	0x40007000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <HAL_RCC_OscConfig+0x36a>
 8005484:	4bca      	ldr	r3, [pc, #808]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	4bc9      	ldr	r3, [pc, #804]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800548a:	2101      	movs	r1, #1
 800548c:	438a      	bics	r2, r1
 800548e:	621a      	str	r2, [r3, #32]
 8005490:	4bc7      	ldr	r3, [pc, #796]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	4bc6      	ldr	r3, [pc, #792]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005496:	2104      	movs	r1, #4
 8005498:	438a      	bics	r2, r1
 800549a:	621a      	str	r2, [r3, #32]
 800549c:	e01c      	b.n	80054d8 <HAL_RCC_OscConfig+0x3a4>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCC_OscConfig+0x38c>
 80054a6:	4bc2      	ldr	r3, [pc, #776]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	4bc1      	ldr	r3, [pc, #772]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054ac:	2104      	movs	r1, #4
 80054ae:	430a      	orrs	r2, r1
 80054b0:	621a      	str	r2, [r3, #32]
 80054b2:	4bbf      	ldr	r3, [pc, #764]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	4bbe      	ldr	r3, [pc, #760]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054b8:	2101      	movs	r1, #1
 80054ba:	430a      	orrs	r2, r1
 80054bc:	621a      	str	r2, [r3, #32]
 80054be:	e00b      	b.n	80054d8 <HAL_RCC_OscConfig+0x3a4>
 80054c0:	4bbb      	ldr	r3, [pc, #748]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	4bba      	ldr	r3, [pc, #744]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054c6:	2101      	movs	r1, #1
 80054c8:	438a      	bics	r2, r1
 80054ca:	621a      	str	r2, [r3, #32]
 80054cc:	4bb8      	ldr	r3, [pc, #736]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	4bb7      	ldr	r3, [pc, #732]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80054d2:	2104      	movs	r1, #4
 80054d4:	438a      	bics	r2, r1
 80054d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d014      	beq.n	800550a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e0:	f7fc ff22 	bl	8002328 <HAL_GetTick>
 80054e4:	0003      	movs	r3, r0
 80054e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	e009      	b.n	80054fe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fc ff1d 	bl	8002328 <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	4aaf      	ldr	r2, [pc, #700]	; (80057b4 <HAL_RCC_OscConfig+0x680>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e19a      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fe:	4bac      	ldr	r3, [pc, #688]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	2202      	movs	r2, #2
 8005504:	4013      	ands	r3, r2
 8005506:	d0f0      	beq.n	80054ea <HAL_RCC_OscConfig+0x3b6>
 8005508:	e013      	b.n	8005532 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550a:	f7fc ff0d 	bl	8002328 <HAL_GetTick>
 800550e:	0003      	movs	r3, r0
 8005510:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	e009      	b.n	8005528 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fc ff08 	bl	8002328 <HAL_GetTick>
 8005518:	0002      	movs	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	4aa5      	ldr	r2, [pc, #660]	; (80057b4 <HAL_RCC_OscConfig+0x680>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e185      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005528:	4ba1      	ldr	r3, [pc, #644]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	2202      	movs	r2, #2
 800552e:	4013      	ands	r3, r2
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005532:	231f      	movs	r3, #31
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553c:	4b9c      	ldr	r3, [pc, #624]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	4b9b      	ldr	r3, [pc, #620]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005542:	499d      	ldr	r1, [pc, #628]	; (80057b8 <HAL_RCC_OscConfig+0x684>)
 8005544:	400a      	ands	r2, r1
 8005546:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2210      	movs	r2, #16
 800554e:	4013      	ands	r3, r2
 8005550:	d063      	beq.n	800561a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d12a      	bne.n	80055b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800555a:	4b95      	ldr	r3, [pc, #596]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800555c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555e:	4b94      	ldr	r3, [pc, #592]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005560:	2104      	movs	r1, #4
 8005562:	430a      	orrs	r2, r1
 8005564:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005566:	4b92      	ldr	r3, [pc, #584]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556a:	4b91      	ldr	r3, [pc, #580]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800556c:	2101      	movs	r1, #1
 800556e:	430a      	orrs	r2, r1
 8005570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005572:	f7fc fed9 	bl	8002328 <HAL_GetTick>
 8005576:	0003      	movs	r3, r0
 8005578:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800557c:	f7fc fed4 	bl	8002328 <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e152      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800558e:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	2202      	movs	r2, #2
 8005594:	4013      	ands	r3, r2
 8005596:	d0f1      	beq.n	800557c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005598:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	22f8      	movs	r2, #248	; 0xf8
 800559e:	4393      	bics	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	00da      	lsls	r2, r3, #3
 80055a8:	4b81      	ldr	r3, [pc, #516]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	635a      	str	r2, [r3, #52]	; 0x34
 80055ae:	e034      	b.n	800561a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	3305      	adds	r3, #5
 80055b6:	d111      	bne.n	80055dc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80055b8:	4b7d      	ldr	r3, [pc, #500]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055bc:	4b7c      	ldr	r3, [pc, #496]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055be:	2104      	movs	r1, #4
 80055c0:	438a      	bics	r2, r1
 80055c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80055c4:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	22f8      	movs	r2, #248	; 0xf8
 80055ca:	4393      	bics	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	00da      	lsls	r2, r3, #3
 80055d4:	4b76      	ldr	r3, [pc, #472]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	635a      	str	r2, [r3, #52]	; 0x34
 80055da:	e01e      	b.n	800561a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055dc:	4b74      	ldr	r3, [pc, #464]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e0:	4b73      	ldr	r3, [pc, #460]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055e2:	2104      	movs	r1, #4
 80055e4:	430a      	orrs	r2, r1
 80055e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80055e8:	4b71      	ldr	r3, [pc, #452]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ec:	4b70      	ldr	r3, [pc, #448]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80055ee:	2101      	movs	r1, #1
 80055f0:	438a      	bics	r2, r1
 80055f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f4:	f7fc fe98 	bl	8002328 <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80055fe:	f7fc fe93 	bl	8002328 <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e111      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005610:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	2202      	movs	r2, #2
 8005616:	4013      	ands	r3, r2
 8005618:	d1f1      	bne.n	80055fe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2220      	movs	r2, #32
 8005620:	4013      	ands	r3, r2
 8005622:	d05c      	beq.n	80056de <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005624:	4b62      	ldr	r3, [pc, #392]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	220c      	movs	r2, #12
 800562a:	4013      	ands	r3, r2
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d00e      	beq.n	800564e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005630:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	220c      	movs	r2, #12
 8005636:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005638:	2b08      	cmp	r3, #8
 800563a:	d114      	bne.n	8005666 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800563c:	4b5c      	ldr	r3, [pc, #368]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	025b      	lsls	r3, r3, #9
 8005644:	401a      	ands	r2, r3
 8005646:	23c0      	movs	r3, #192	; 0xc0
 8005648:	025b      	lsls	r3, r3, #9
 800564a:	429a      	cmp	r2, r3
 800564c:	d10b      	bne.n	8005666 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800564e:	4b58      	ldr	r3, [pc, #352]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	025b      	lsls	r3, r3, #9
 8005656:	4013      	ands	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_RCC_OscConfig+0x5a8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d03c      	beq.n	80056dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0e6      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01b      	beq.n	80056a6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800566e:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0249      	lsls	r1, r1, #9
 8005678:	430a      	orrs	r2, r1
 800567a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fc fe54 	bl	8002328 <HAL_GetTick>
 8005680:	0003      	movs	r3, r0
 8005682:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005686:	f7fc fe4f 	bl	8002328 <HAL_GetTick>
 800568a:	0002      	movs	r2, r0
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e0cd      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	025b      	lsls	r3, r3, #9
 80056a0:	4013      	ands	r3, r2
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x552>
 80056a4:	e01b      	b.n	80056de <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80056a6:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80056a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056aa:	4b41      	ldr	r3, [pc, #260]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80056ac:	4943      	ldr	r1, [pc, #268]	; (80057bc <HAL_RCC_OscConfig+0x688>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b2:	f7fc fe39 	bl	8002328 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056bc:	f7fc fe34 	bl	8002328 <HAL_GetTick>
 80056c0:	0002      	movs	r2, r0
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e0b2      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80056d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	025b      	lsls	r3, r3, #9
 80056d6:	4013      	ands	r3, r2
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x588>
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80056dc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d100      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5b4>
 80056e6:	e0a4      	b.n	8005832 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056e8:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	220c      	movs	r2, #12
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d100      	bne.n	80056f6 <HAL_RCC_OscConfig+0x5c2>
 80056f4:	e078      	b.n	80057e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d14c      	bne.n	8005798 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005704:	492e      	ldr	r1, [pc, #184]	; (80057c0 <HAL_RCC_OscConfig+0x68c>)
 8005706:	400a      	ands	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570a:	f7fc fe0d 	bl	8002328 <HAL_GetTick>
 800570e:	0003      	movs	r3, r0
 8005710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fc fe08 	bl	8002328 <HAL_GetTick>
 8005718:	0002      	movs	r2, r0
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e086      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005726:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	2380      	movs	r3, #128	; 0x80
 800572c:	049b      	lsls	r3, r3, #18
 800572e:	4013      	ands	r3, r2
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005732:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	220f      	movs	r2, #15
 8005738:	4393      	bics	r3, r2
 800573a:	0019      	movs	r1, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005742:	430a      	orrs	r2, r1
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <HAL_RCC_OscConfig+0x690>)
 800574c:	4013      	ands	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	431a      	orrs	r2, r3
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	0449      	lsls	r1, r1, #17
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576e:	f7fc fddb 	bl	8002328 <HAL_GetTick>
 8005772:	0003      	movs	r3, r0
 8005774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005778:	f7fc fdd6 	bl	8002328 <HAL_GetTick>
 800577c:	0002      	movs	r2, r0
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e054      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	049b      	lsls	r3, r3, #18
 8005792:	4013      	ands	r3, r2
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x644>
 8005796:	e04c      	b.n	8005832 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_RCC_OscConfig+0x67c>)
 800579e:	4908      	ldr	r1, [pc, #32]	; (80057c0 <HAL_RCC_OscConfig+0x68c>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fc fdc0 	bl	8002328 <HAL_GetTick>
 80057a8:	0003      	movs	r3, r0
 80057aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ac:	e015      	b.n	80057da <HAL_RCC_OscConfig+0x6a6>
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40021000 	.word	0x40021000
 80057b4:	00001388 	.word	0x00001388
 80057b8:	efffffff 	.word	0xefffffff
 80057bc:	fffeffff 	.word	0xfffeffff
 80057c0:	feffffff 	.word	0xfeffffff
 80057c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fc fdae 	bl	8002328 <HAL_GetTick>
 80057cc:	0002      	movs	r2, r0
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e02c      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <HAL_RCC_OscConfig+0x708>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	049b      	lsls	r3, r3, #18
 80057e2:	4013      	ands	r3, r2
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x694>
 80057e6:	e024      	b.n	8005832 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e01f      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_RCC_OscConfig+0x708>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_RCC_OscConfig+0x708>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	23c0      	movs	r3, #192	; 0xc0
 8005804:	025b      	lsls	r3, r3, #9
 8005806:	401a      	ands	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	429a      	cmp	r2, r3
 800580e:	d10e      	bne.n	800582e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	220f      	movs	r2, #15
 8005814:	401a      	ands	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d107      	bne.n	800582e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	23f0      	movs	r3, #240	; 0xf0
 8005822:	039b      	lsls	r3, r3, #14
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b008      	add	sp, #32
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000

08005840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0bf      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005854:	4b61      	ldr	r3, [pc, #388]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	4013      	ands	r3, r2
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d911      	bls.n	8005886 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b5e      	ldr	r3, [pc, #376]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	4393      	bics	r3, r2
 800586a:	0019      	movs	r1, r3
 800586c:	4b5b      	ldr	r3, [pc, #364]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2201      	movs	r2, #1
 800587a:	4013      	ands	r3, r2
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d001      	beq.n	8005886 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0a6      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	d015      	beq.n	80058bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2204      	movs	r2, #4
 8005896:	4013      	ands	r3, r2
 8005898:	d006      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800589a:	4b51      	ldr	r3, [pc, #324]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80058a0:	21e0      	movs	r1, #224	; 0xe0
 80058a2:	00c9      	lsls	r1, r1, #3
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a8:	4b4d      	ldr	r3, [pc, #308]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	22f0      	movs	r2, #240	; 0xf0
 80058ae:	4393      	bics	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2201      	movs	r2, #1
 80058c2:	4013      	ands	r3, r2
 80058c4:	d04c      	beq.n	8005960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	4b44      	ldr	r3, [pc, #272]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	029b      	lsls	r3, r3, #10
 80058d6:	4013      	ands	r3, r2
 80058d8:	d120      	bne.n	800591c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07a      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e6:	4b3e      	ldr	r3, [pc, #248]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	049b      	lsls	r3, r3, #18
 80058ee:	4013      	ands	r3, r2
 80058f0:	d114      	bne.n	800591c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e06e      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80058fe:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	025b      	lsls	r3, r3, #9
 8005906:	4013      	ands	r3, r2
 8005908:	d108      	bne.n	800591c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e062      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	4b34      	ldr	r3, [pc, #208]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2202      	movs	r2, #2
 8005914:	4013      	ands	r3, r2
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e05b      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591c:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2203      	movs	r2, #3
 8005922:	4393      	bics	r3, r2
 8005924:	0019      	movs	r1, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005930:	f7fc fcfa 	bl	8002328 <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005938:	e009      	b.n	800594e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fc fcf5 	bl	8002328 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <HAL_RCC_ClockConfig+0x1a4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e042      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	220c      	movs	r2, #12
 8005954:	401a      	ands	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	429a      	cmp	r2, r3
 800595e:	d1ec      	bne.n	800593a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005960:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	4013      	ands	r3, r2
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d211      	bcs.n	8005992 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	4393      	bics	r3, r2
 8005976:	0019      	movs	r1, r3
 8005978:	4b18      	ldr	r3, [pc, #96]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005980:	4b16      	ldr	r3, [pc, #88]	; (80059dc <HAL_RCC_ClockConfig+0x19c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	4013      	ands	r3, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d001      	beq.n	8005992 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e020      	b.n	80059d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2204      	movs	r2, #4
 8005998:	4013      	ands	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4a11      	ldr	r2, [pc, #68]	; (80059e8 <HAL_RCC_ClockConfig+0x1a8>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	0019      	movs	r1, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059b0:	f000 f820 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 80059b4:	0001      	movs	r1, r0
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_RCC_ClockConfig+0x1a0>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	220f      	movs	r2, #15
 80059be:	4013      	ands	r3, r2
 80059c0:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <HAL_RCC_ClockConfig+0x1ac>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	000a      	movs	r2, r1
 80059c6:	40da      	lsrs	r2, r3
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_ClockConfig+0x1b0>)
 80059ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80059cc:	2003      	movs	r0, #3
 80059ce:	f7fc fc65 	bl	800229c <HAL_InitTick>
  
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b004      	add	sp, #16
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40022000 	.word	0x40022000
 80059e0:	40021000 	.word	0x40021000
 80059e4:	00001388 	.word	0x00001388
 80059e8:	fffff8ff 	.word	0xfffff8ff
 80059ec:	0800d040 	.word	0x0800d040
 80059f0:	20000000 	.word	0x20000000

080059f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b08f      	sub	sp, #60	; 0x3c
 80059f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80059fa:	2314      	movs	r3, #20
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	4a38      	ldr	r2, [pc, #224]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xec>)
 8005a00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005a02:	c313      	stmia	r3!, {r0, r1, r4}
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	4a36      	ldr	r2, [pc, #216]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005a0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005a0e:	c313      	stmia	r3!, {r0, r1, r4}
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a20:	2300      	movs	r3, #0
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005a28:	4b2f      	ldr	r3, [pc, #188]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	220c      	movs	r2, #12
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d047      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xd4>
 8005a38:	d849      	bhi.n	8005ace <HAL_RCC_GetSysClockFreq+0xda>
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d002      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x50>
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x56>
 8005a42:	e044      	b.n	8005ace <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a44:	4b29      	ldr	r3, [pc, #164]	; (8005aec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a48:	e044      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	0c9b      	lsrs	r3, r3, #18
 8005a4e:	220f      	movs	r2, #15
 8005a50:	4013      	ands	r3, r2
 8005a52:	2214      	movs	r2, #20
 8005a54:	18ba      	adds	r2, r7, r2
 8005a56:	5cd3      	ldrb	r3, [r2, r3]
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	220f      	movs	r2, #15
 8005a60:	4013      	ands	r3, r2
 8005a62:	1d3a      	adds	r2, r7, #4
 8005a64:	5cd3      	ldrb	r3, [r2, r3]
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a6a:	23c0      	movs	r3, #192	; 0xc0
 8005a6c:	025b      	lsls	r3, r3, #9
 8005a6e:	401a      	ands	r2, r3
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	025b      	lsls	r3, r3, #9
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d109      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a7a:	481c      	ldr	r0, [pc, #112]	; (8005aec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a7c:	f7fa fb56 	bl	800012c <__udivsi3>
 8005a80:	0003      	movs	r3, r0
 8005a82:	001a      	movs	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	4353      	muls	r3, r2
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8a:	e01a      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a8e:	23c0      	movs	r3, #192	; 0xc0
 8005a90:	025b      	lsls	r3, r3, #9
 8005a92:	401a      	ands	r2, r3
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d109      	bne.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a9e:	4814      	ldr	r0, [pc, #80]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005aa0:	f7fa fb44 	bl	800012c <__udivsi3>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	4353      	muls	r3, r2
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab2:	4810      	ldr	r0, [pc, #64]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ab4:	f7fa fb3a 	bl	800012c <__udivsi3>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	001a      	movs	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	4353      	muls	r3, r2
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005acc:	e002      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ad2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b00f      	add	sp, #60	; 0x3c
 8005adc:	bd90      	pop	{r4, r7, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	0800cf64 	.word	0x0800cf64
 8005ae4:	0800cf74 	.word	0x0800cf74
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	00f42400 	.word	0x00f42400
 8005af0:	02dc6c00 	.word	0x02dc6c00
 8005af4:	007a1200 	.word	0x007a1200

08005af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005afc:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	20000000 	.word	0x20000000

08005b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005b10:	f7ff fff2 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b14:	0001      	movs	r1, r0
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	4013      	ands	r3, r2
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	40d9      	lsrs	r1, r3
 8005b26:	000b      	movs	r3, r1
}    
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800d050 	.word	0x0800d050

08005b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	4013      	ands	r3, r2
 8005b52:	d100      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005b54:	e08e      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2017      	movs	r0, #23
 8005b58:	183b      	adds	r3, r7, r0
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5e:	4b6e      	ldr	r3, [pc, #440]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	055b      	lsls	r3, r3, #21
 8005b66:	4013      	ands	r3, r2
 8005b68:	d110      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b6a:	4b6b      	ldr	r3, [pc, #428]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b70:	2180      	movs	r1, #128	; 0x80
 8005b72:	0549      	lsls	r1, r1, #21
 8005b74:	430a      	orrs	r2, r1
 8005b76:	61da      	str	r2, [r3, #28]
 8005b78:	4b67      	ldr	r3, [pc, #412]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	055b      	lsls	r3, r3, #21
 8005b80:	4013      	ands	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b86:	183b      	adds	r3, r7, r0
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8c:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	d11a      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b98:	4b60      	ldr	r3, [pc, #384]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	0049      	lsls	r1, r1, #1
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ba6:	f7fc fbbf 	bl	8002328 <HAL_GetTick>
 8005baa:	0003      	movs	r3, r0
 8005bac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	e008      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb0:	f7fc fbba 	bl	8002328 <HAL_GetTick>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b64      	cmp	r3, #100	; 0x64
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0a6      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc2:	4b56      	ldr	r3, [pc, #344]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bce:	4b52      	ldr	r3, [pc, #328]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	23c0      	movs	r3, #192	; 0xc0
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d034      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	23c0      	movs	r3, #192	; 0xc0
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d02c      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf0:	4b49      	ldr	r3, [pc, #292]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	4a4a      	ldr	r2, [pc, #296]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bfc:	6a1a      	ldr	r2, [r3, #32]
 8005bfe:	4b46      	ldr	r3, [pc, #280]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	0249      	lsls	r1, r1, #9
 8005c04:	430a      	orrs	r2, r1
 8005c06:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c08:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c0e:	4945      	ldr	r1, [pc, #276]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c14:	4b40      	ldr	r3, [pc, #256]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fc fb81 	bl	8002328 <HAL_GetTick>
 8005c26:	0003      	movs	r3, r0
 8005c28:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	e009      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fc fb7c 	bl	8002328 <HAL_GetTick>
 8005c30:	0002      	movs	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	4a3c      	ldr	r2, [pc, #240]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e067      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4013      	ands	r3, r2
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c4a:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	0019      	movs	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c5e:	2317      	movs	r3, #23
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	4b2a      	ldr	r3, [pc, #168]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c6e:	492f      	ldr	r1, [pc, #188]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c7e:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	2203      	movs	r2, #3
 8005c84:	4393      	bics	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2202      	movs	r2, #2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c9c:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cac:	430a      	orrs	r2, r1
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cba:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	4393      	bics	r3, r2
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	4393      	bics	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cea:	430a      	orrs	r2, r1
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	4393      	bics	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b006      	add	sp, #24
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	fffffcff 	.word	0xfffffcff
 8005d24:	fffeffff 	.word	0xfffeffff
 8005d28:	00001388 	.word	0x00001388
 8005d2c:	efffffff 	.word	0xefffffff
 8005d30:	fffcffff 	.word	0xfffcffff

08005d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0a8      	b.n	8005e98 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	2382      	movs	r3, #130	; 0x82
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d009      	beq.n	8005d6e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	61da      	str	r2, [r3, #28]
 8005d60:	e005      	b.n	8005d6e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	225d      	movs	r2, #93	; 0x5d
 8005d78:	5c9b      	ldrb	r3, [r3, r2]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	225c      	movs	r2, #92	; 0x5c
 8005d84:	2100      	movs	r1, #0
 8005d86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fb fe7a 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	225d      	movs	r2, #93	; 0x5d
 8005d94:	2102      	movs	r1, #2
 8005d96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2140      	movs	r1, #64	; 0x40
 8005da4:	438a      	bics	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	23e0      	movs	r3, #224	; 0xe0
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d902      	bls.n	8005dba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e002      	b.n	8005dc0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	015b      	lsls	r3, r3, #5
 8005dbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	23f0      	movs	r3, #240	; 0xf0
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d008      	beq.n	8005dde <HAL_SPI_Init+0xaa>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	23e0      	movs	r3, #224	; 0xe0
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	2382      	movs	r3, #130	; 0x82
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	401a      	ands	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	2384      	movs	r3, #132	; 0x84
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	400b      	ands	r3, r1
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2102      	movs	r1, #2
 8005dfa:	400b      	ands	r3, r1
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2101      	movs	r1, #1
 8005e04:	400b      	ands	r3, r1
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	400b      	ands	r3, r1
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2138      	movs	r1, #56	; 0x38
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	400b      	ands	r3, r1
 8005e26:	431a      	orrs	r2, r3
 8005e28:	0011      	movs	r1, r2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	401a      	ands	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	2204      	movs	r2, #4
 8005e44:	401a      	ands	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2110      	movs	r1, #16
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	2108      	movs	r1, #8
 8005e56:	400b      	ands	r3, r1
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68d9      	ldr	r1, [r3, #12]
 8005e5e:	23f0      	movs	r3, #240	; 0xf0
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	400b      	ands	r3, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	0011      	movs	r1, r2
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	015b      	lsls	r3, r3, #5
 8005e6e:	401a      	ands	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4907      	ldr	r1, [pc, #28]	; (8005ea0 <HAL_SPI_Init+0x16c>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	225d      	movs	r2, #93	; 0x5d
 8005e92:	2101      	movs	r1, #1
 8005e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	0018      	movs	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b004      	add	sp, #16
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	fffff7ff 	.word	0xfffff7ff

08005ea4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eb4:	231f      	movs	r3, #31
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	225c      	movs	r2, #92	; 0x5c
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_SPI_Transmit+0x26>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e140      	b.n	800614c <HAL_SPI_Transmit+0x2a8>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	225c      	movs	r2, #92	; 0x5c
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed2:	f7fc fa29 	bl	8002328 <HAL_GetTick>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005eda:	2316      	movs	r3, #22
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	1dba      	adds	r2, r7, #6
 8005ee0:	8812      	ldrh	r2, [r2, #0]
 8005ee2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	225d      	movs	r2, #93	; 0x5d
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d004      	beq.n	8005efa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005ef0:	231f      	movs	r3, #31
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ef8:	e11d      	b.n	8006136 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_SPI_Transmit+0x64>
 8005f00:	1dbb      	adds	r3, r7, #6
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005f08:	231f      	movs	r3, #31
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f10:	e111      	b.n	8006136 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	225d      	movs	r2, #93	; 0x5d
 8005f16:	2103      	movs	r1, #3
 8005f18:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1dba      	adds	r2, r7, #6
 8005f2a:	8812      	ldrh	r2, [r2, #0]
 8005f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1dba      	adds	r2, r7, #6
 8005f32:	8812      	ldrh	r2, [r2, #0]
 8005f34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2244      	movs	r2, #68	; 0x44
 8005f40:	2100      	movs	r1, #0
 8005f42:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2246      	movs	r2, #70	; 0x46
 8005f48:	2100      	movs	r1, #0
 8005f4a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d110      	bne.n	8005f86 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2140      	movs	r1, #64	; 0x40
 8005f70:	438a      	bics	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	01c9      	lsls	r1, r1, #7
 8005f82:	430a      	orrs	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2240      	movs	r2, #64	; 0x40
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d007      	beq.n	8005fa4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2140      	movs	r1, #64	; 0x40
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	23e0      	movs	r3, #224	; 0xe0
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d94e      	bls.n	800604e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_SPI_Transmit+0x11e>
 8005fb8:	2316      	movs	r3, #22
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d13f      	bne.n	8006042 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fe6:	e02c      	b.n	8006042 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d112      	bne.n	800601c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	881a      	ldrh	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e
 800601a:	e012      	b.n	8006042 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601c:	f7fc f984 	bl	8002328 <HAL_GetTick>
 8006020:	0002      	movs	r2, r0
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d802      	bhi.n	8006032 <HAL_SPI_Transmit+0x18e>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	d102      	bne.n	8006038 <HAL_SPI_Transmit+0x194>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006038:	231f      	movs	r3, #31
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	2203      	movs	r2, #3
 800603e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006040:	e079      	b.n	8006136 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1cd      	bne.n	8005fe8 <HAL_SPI_Transmit+0x144>
 800604c:	e04f      	b.n	80060ee <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <HAL_SPI_Transmit+0x1bc>
 8006056:	2316      	movs	r3, #22
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d141      	bne.n	80060e4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	7812      	ldrb	r2, [r2, #0]
 800606c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006086:	e02d      	b.n	80060e4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2202      	movs	r2, #2
 8006090:	4013      	ands	r3, r2
 8006092:	2b02      	cmp	r3, #2
 8006094:	d113      	bne.n	80060be <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060bc:	e012      	b.n	80060e4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060be:	f7fc f933 	bl	8002328 <HAL_GetTick>
 80060c2:	0002      	movs	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d802      	bhi.n	80060d4 <HAL_SPI_Transmit+0x230>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	d102      	bne.n	80060da <HAL_SPI_Transmit+0x236>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80060da:	231f      	movs	r3, #31
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2203      	movs	r2, #3
 80060e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80060e2:	e028      	b.n	8006136 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1cc      	bne.n	8006088 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 fb2f 	bl	8006758 <SPI_EndRxTxTransaction>
 80060fa:	1e03      	subs	r3, r0, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800612a:	231f      	movs	r3, #31
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e000      	b.n	8006136 <HAL_SPI_Transmit+0x292>
  }

error:
 8006134:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	225d      	movs	r2, #93	; 0x5d
 800613a:	2101      	movs	r1, #1
 800613c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	225c      	movs	r2, #92	; 0x5c
 8006142:	2100      	movs	r1, #0
 8006144:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006146:	231f      	movs	r3, #31
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	781b      	ldrb	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b008      	add	sp, #32
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	001a      	movs	r2, r3
 8006162:	1cbb      	adds	r3, r7, #2
 8006164:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006166:	2301      	movs	r3, #1
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800616a:	2323      	movs	r3, #35	; 0x23
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	225c      	movs	r2, #92	; 0x5c
 8006176:	5c9b      	ldrb	r3, [r3, r2]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x2c>
 800617c:	2302      	movs	r3, #2
 800617e:	e1b5      	b.n	80064ec <HAL_SPI_TransmitReceive+0x398>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	225c      	movs	r2, #92	; 0x5c
 8006184:	2101      	movs	r1, #1
 8006186:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006188:	f7fc f8ce 	bl	8002328 <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006190:	201b      	movs	r0, #27
 8006192:	183b      	adds	r3, r7, r0
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	215d      	movs	r1, #93	; 0x5d
 8006198:	5c52      	ldrb	r2, [r2, r1]
 800619a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061a2:	2312      	movs	r3, #18
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	1cba      	adds	r2, r7, #2
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d011      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x84>
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	2382      	movs	r3, #130	; 0x82
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d107      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x7a>
 80061c6:	183b      	adds	r3, r7, r0
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d004      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80061ce:	2323      	movs	r3, #35	; 0x23
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80061d6:	e17e      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x98>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x98>
 80061e4:	1cbb      	adds	r3, r7, #2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80061ec:	2323      	movs	r3, #35	; 0x23
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80061f4:	e16f      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	225d      	movs	r2, #93	; 0x5d
 80061fa:	5c9b      	ldrb	r3, [r3, r2]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d003      	beq.n	800620a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	225d      	movs	r2, #93	; 0x5d
 8006206:	2105      	movs	r1, #5
 8006208:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1cba      	adds	r2, r7, #2
 800621a:	2146      	movs	r1, #70	; 0x46
 800621c:	8812      	ldrh	r2, [r2, #0]
 800621e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	1cba      	adds	r2, r7, #2
 8006224:	2144      	movs	r1, #68	; 0x44
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1cba      	adds	r2, r7, #2
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1cba      	adds	r2, r7, #2
 800623c:	8812      	ldrh	r2, [r2, #0]
 800623e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	23e0      	movs	r3, #224	; 0xe0
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	429a      	cmp	r2, r3
 8006256:	d908      	bls.n	800626a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	49a4      	ldr	r1, [pc, #656]	; (80064f4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006264:	400a      	ands	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
 8006268:	e008      	b.n	800627c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	0149      	lsls	r1, r1, #5
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	4013      	ands	r3, r2
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d007      	beq.n	800629a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	23e0      	movs	r3, #224	; 0xe0
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d800      	bhi.n	80062a8 <HAL_SPI_TransmitReceive+0x154>
 80062a6:	e07f      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x168>
 80062b0:	2312      	movs	r3, #18
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d000      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x168>
 80062ba:	e069      	b.n	8006390 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	881a      	ldrh	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e0:	e056      	b.n	8006390 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2202      	movs	r2, #2
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d11b      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x1d4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <HAL_SPI_TransmitReceive+0x1d4>
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d113      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2201      	movs	r2, #1
 8006330:	4013      	ands	r3, r2
 8006332:	2b01      	cmp	r3, #1
 8006334:	d11c      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x21c>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2246      	movs	r2, #70	; 0x46
 800633a:	5a9b      	ldrh	r3, [r3, r2]
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	b292      	uxth	r2, r2
 800634e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	1c9a      	adds	r2, r3, #2
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2246      	movs	r2, #70	; 0x46
 800635e:	5a9b      	ldrh	r3, [r3, r2]
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b299      	uxth	r1, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2246      	movs	r2, #70	; 0x46
 800636a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006370:	f7fb ffda 	bl	8002328 <HAL_GetTick>
 8006374:	0002      	movs	r2, r0
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	429a      	cmp	r2, r3
 800637e:	d807      	bhi.n	8006390 <HAL_SPI_TransmitReceive+0x23c>
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	3301      	adds	r3, #1
 8006384:	d004      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006386:	2323      	movs	r3, #35	; 0x23
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	2203      	movs	r2, #3
 800638c:	701a      	strb	r2, [r3, #0]
        goto error;
 800638e:	e0a2      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1a3      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x18e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2246      	movs	r2, #70	; 0x46
 800639e:	5a9b      	ldrh	r3, [r3, r2]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d19d      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x18e>
 80063a6:	e085      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x268>
 80063b0:	2312      	movs	r3, #18
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d000      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x268>
 80063ba:	e070      	b.n	800649e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	e05c      	b.n	800649e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2202      	movs	r2, #2
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d11c      	bne.n	800642c <HAL_SPI_TransmitReceive+0x2d8>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <HAL_SPI_TransmitReceive+0x2d8>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d114      	bne.n	800642c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2201      	movs	r2, #1
 8006434:	4013      	ands	r3, r2
 8006436:	2b01      	cmp	r3, #1
 8006438:	d11e      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x324>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2246      	movs	r2, #70	; 0x46
 800643e:	5a9b      	ldrh	r3, [r3, r2]
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	001a      	movs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2246      	movs	r2, #70	; 0x46
 8006466:	5a9b      	ldrh	r3, [r3, r2]
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b299      	uxth	r1, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2246      	movs	r2, #70	; 0x46
 8006472:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006474:	2301      	movs	r3, #1
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006478:	f7fb ff56 	bl	8002328 <HAL_GetTick>
 800647c:	0002      	movs	r2, r0
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006484:	429a      	cmp	r2, r3
 8006486:	d802      	bhi.n	800648e <HAL_SPI_TransmitReceive+0x33a>
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	3301      	adds	r3, #1
 800648c:	d102      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x340>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006494:	2323      	movs	r3, #35	; 0x23
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	2203      	movs	r2, #3
 800649a:	701a      	strb	r2, [r3, #0]
        goto error;
 800649c:	e01b      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d19d      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x290>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2246      	movs	r2, #70	; 0x46
 80064ac:	5a9b      	ldrh	r3, [r3, r2]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d197      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 f94c 	bl	8006758 <SPI_EndRxTxTransaction>
 80064c0:	1e03      	subs	r3, r0, #0
 80064c2:	d007      	beq.n	80064d4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80064c4:	2323      	movs	r3, #35	; 0x23
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	661a      	str	r2, [r3, #96]	; 0x60
 80064d2:	e000      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80064d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	225d      	movs	r2, #93	; 0x5d
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	225c      	movs	r2, #92	; 0x5c
 80064e2:	2100      	movs	r1, #0
 80064e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80064e6:	2323      	movs	r3, #35	; 0x23
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	781b      	ldrb	r3, [r3, #0]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b00a      	add	sp, #40	; 0x28
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	ffffefff 	.word	0xffffefff

080064f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	1dfb      	adds	r3, r7, #7
 8006506:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006508:	f7fb ff0e 	bl	8002328 <HAL_GetTick>
 800650c:	0002      	movs	r2, r0
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	18d3      	adds	r3, r2, r3
 8006516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006518:	f7fb ff06 	bl	8002328 <HAL_GetTick>
 800651c:	0003      	movs	r3, r0
 800651e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006520:	4b3a      	ldr	r3, [pc, #232]	; (800660c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	015b      	lsls	r3, r3, #5
 8006526:	0d1b      	lsrs	r3, r3, #20
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	4353      	muls	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652e:	e058      	b.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	d055      	beq.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006536:	f7fb fef7 	bl	8002328 <HAL_GetTick>
 800653a:	0002      	movs	r2, r0
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	429a      	cmp	r2, r3
 8006544:	d902      	bls.n	800654c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d142      	bne.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	21e0      	movs	r1, #224	; 0xe0
 8006558:	438a      	bics	r2, r1
 800655a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	2382      	movs	r3, #130	; 0x82
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	429a      	cmp	r2, r3
 8006566:	d113      	bne.n	8006590 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	429a      	cmp	r2, r3
 8006572:	d005      	beq.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	429a      	cmp	r2, r3
 800657e:	d107      	bne.n	8006590 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2140      	movs	r1, #64	; 0x40
 800658c:	438a      	bics	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	019b      	lsls	r3, r3, #6
 8006598:	429a      	cmp	r2, r3
 800659a:	d110      	bne.n	80065be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	491a      	ldr	r1, [pc, #104]	; (8006610 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	0189      	lsls	r1, r1, #6
 80065ba:	430a      	orrs	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	225d      	movs	r2, #93	; 0x5d
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	225c      	movs	r2, #92	; 0x5c
 80065ca:	2100      	movs	r1, #0
 80065cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e017      	b.n	8006602 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3b01      	subs	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	425a      	negs	r2, r3
 80065f2:	4153      	adcs	r3, r2
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	001a      	movs	r2, r3
 80065f8:	1dfb      	adds	r3, r7, #7
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d197      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	0018      	movs	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	b008      	add	sp, #32
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	20000000 	.word	0x20000000
 8006610:	ffffdfff 	.word	0xffffdfff

08006614 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006622:	2317      	movs	r3, #23
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800662a:	f7fb fe7d 	bl	8002328 <HAL_GetTick>
 800662e:	0002      	movs	r2, r0
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	18d3      	adds	r3, r2, r3
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800663a:	f7fb fe75 	bl	8002328 <HAL_GetTick>
 800663e:	0003      	movs	r3, r0
 8006640:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800664a:	4b41      	ldr	r3, [pc, #260]	; (8006750 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	0013      	movs	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	189b      	adds	r3, r3, r2
 8006654:	00da      	lsls	r2, r3, #3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	0d1b      	lsrs	r3, r3, #20
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	4353      	muls	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006660:	e068      	b.n	8006734 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	23c0      	movs	r3, #192	; 0xc0
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	429a      	cmp	r2, r3
 800666a:	d10a      	bne.n	8006682 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d107      	bne.n	8006682 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	2117      	movs	r1, #23
 800667a:	187b      	adds	r3, r7, r1
 800667c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800667e:	187b      	adds	r3, r7, r1
 8006680:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	d055      	beq.n	8006734 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006688:	f7fb fe4e 	bl	8002328 <HAL_GetTick>
 800668c:	0002      	movs	r2, r0
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d142      	bne.n	8006724 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	21e0      	movs	r1, #224	; 0xe0
 80066aa:	438a      	bics	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	2382      	movs	r3, #130	; 0x82
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d113      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d005      	beq.n	80066d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d107      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	438a      	bics	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d110      	bne.n	8006710 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4916      	ldr	r1, [pc, #88]	; (8006754 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80066fa:	400a      	ands	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2180      	movs	r1, #128	; 0x80
 800670a:	0189      	lsls	r1, r1, #6
 800670c:	430a      	orrs	r2, r1
 800670e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	225d      	movs	r2, #93	; 0x5d
 8006714:	2101      	movs	r1, #1
 8006716:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	225c      	movs	r2, #92	; 0x5c
 800671c:	2100      	movs	r1, #0
 800671e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e010      	b.n	8006746 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	3b01      	subs	r3, #1
 8006732:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d18e      	bne.n	8006662 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	b00a      	add	sp, #40	; 0x28
 800674c:	bd80      	pop	{r7, pc}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	20000000 	.word	0x20000000
 8006754:	ffffdfff 	.word	0xffffdfff

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	23c0      	movs	r3, #192	; 0xc0
 8006768:	0159      	lsls	r1, r3, #5
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	0013      	movs	r3, r2
 8006772:	2200      	movs	r2, #0
 8006774:	f7ff ff4e 	bl	8006614 <SPI_WaitFifoStateUntilTimeout>
 8006778:	1e03      	subs	r3, r0, #0
 800677a:	d007      	beq.n	800678c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2220      	movs	r2, #32
 8006782:	431a      	orrs	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e027      	b.n	80067dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	0013      	movs	r3, r2
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	f7ff fead 	bl	80064f8 <SPI_WaitFlagStateUntilTimeout>
 800679e:	1e03      	subs	r3, r0, #0
 80067a0:	d007      	beq.n	80067b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a6:	2220      	movs	r2, #32
 80067a8:	431a      	orrs	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e014      	b.n	80067dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	23c0      	movs	r3, #192	; 0xc0
 80067b6:	00d9      	lsls	r1, r3, #3
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	0013      	movs	r3, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7ff ff27 	bl	8006614 <SPI_WaitFifoStateUntilTimeout>
 80067c6:	1e03      	subs	r3, r0, #0
 80067c8:	d007      	beq.n	80067da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ce:	2220      	movs	r2, #32
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e000      	b.n	80067dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	0018      	movs	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	b004      	add	sp, #16
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e042      	b.n	800687c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	223d      	movs	r2, #61	; 0x3d
 80067fa:	5c9b      	ldrb	r3, [r3, r2]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d107      	bne.n	8006812 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	223c      	movs	r2, #60	; 0x3c
 8006806:	2100      	movs	r1, #0
 8006808:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f7fb f987 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	223d      	movs	r2, #61	; 0x3d
 8006816:	2102      	movs	r1, #2
 8006818:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	0019      	movs	r1, r3
 8006824:	0010      	movs	r0, r2
 8006826:	f000 fa65 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2246      	movs	r2, #70	; 0x46
 800682e:	2101      	movs	r1, #1
 8006830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	223e      	movs	r2, #62	; 0x3e
 8006836:	2101      	movs	r1, #1
 8006838:	5499      	strb	r1, [r3, r2]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	223f      	movs	r2, #63	; 0x3f
 800683e:	2101      	movs	r1, #1
 8006840:	5499      	strb	r1, [r3, r2]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	2101      	movs	r1, #1
 8006848:	5499      	strb	r1, [r3, r2]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2241      	movs	r2, #65	; 0x41
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2242      	movs	r2, #66	; 0x42
 8006856:	2101      	movs	r1, #1
 8006858:	5499      	strb	r1, [r3, r2]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2243      	movs	r2, #67	; 0x43
 800685e:	2101      	movs	r1, #1
 8006860:	5499      	strb	r1, [r3, r2]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2244      	movs	r2, #68	; 0x44
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2245      	movs	r2, #69	; 0x45
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	223d      	movs	r2, #61	; 0x3d
 8006876:	2101      	movs	r1, #1
 8006878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b002      	add	sp, #8
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	223d      	movs	r2, #61	; 0x3d
 8006890:	5c9b      	ldrb	r3, [r3, r2]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d001      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e03b      	b.n	8006914 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	223d      	movs	r2, #61	; 0x3d
 80068a0:	2102      	movs	r1, #2
 80068a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2101      	movs	r1, #1
 80068b0:	430a      	orrs	r2, r1
 80068b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIM_Base_Start_IT+0x98>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00f      	beq.n	80068de <HAL_TIM_Base_Start_IT+0x5a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	05db      	lsls	r3, r3, #23
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d009      	beq.n	80068de <HAL_TIM_Base_Start_IT+0x5a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIM_Base_Start_IT+0x9c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIM_Base_Start_IT+0x5a>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a12      	ldr	r2, [pc, #72]	; (8006924 <HAL_TIM_Base_Start_IT+0xa0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d111      	bne.n	8006902 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2207      	movs	r2, #7
 80068e6:	4013      	ands	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b06      	cmp	r3, #6
 80068ee:	d010      	beq.n	8006912 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006900:	e007      	b.n	8006912 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2101      	movs	r1, #1
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	0018      	movs	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	b004      	add	sp, #16
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40000400 	.word	0x40000400
 8006924:	40014000 	.word	0x40014000

08006928 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e042      	b.n	80069c0 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	223d      	movs	r2, #61	; 0x3d
 800693e:	5c9b      	ldrb	r3, [r3, r2]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	223c      	movs	r2, #60	; 0x3c
 800694a:	2100      	movs	r1, #0
 800694c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 f839 	bl	80069c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	223d      	movs	r2, #61	; 0x3d
 800695a:	2102      	movs	r1, #2
 800695c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	0019      	movs	r1, r3
 8006968:	0010      	movs	r0, r2
 800696a:	f000 f9c3 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2246      	movs	r2, #70	; 0x46
 8006972:	2101      	movs	r1, #1
 8006974:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	223e      	movs	r2, #62	; 0x3e
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	223f      	movs	r2, #63	; 0x3f
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2240      	movs	r2, #64	; 0x40
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2241      	movs	r2, #65	; 0x41
 8006992:	2101      	movs	r1, #1
 8006994:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2242      	movs	r2, #66	; 0x42
 800699a:	2101      	movs	r1, #1
 800699c:	5499      	strb	r1, [r3, r2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2243      	movs	r2, #67	; 0x43
 80069a2:	2101      	movs	r1, #1
 80069a4:	5499      	strb	r1, [r3, r2]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2244      	movs	r2, #68	; 0x44
 80069aa:	2101      	movs	r1, #1
 80069ac:	5499      	strb	r1, [r3, r2]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2245      	movs	r2, #69	; 0x45
 80069b2:	2101      	movs	r1, #1
 80069b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	223d      	movs	r2, #61	; 0x3d
 80069ba:	2101      	movs	r1, #1
 80069bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80069d0:	46c0      	nop			; (mov r8, r8)
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2202      	movs	r2, #2
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d124      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2202      	movs	r2, #2
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d11d      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2203      	movs	r2, #3
 8006a02:	4252      	negs	r2, r2
 8006a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2203      	movs	r2, #3
 8006a14:	4013      	ands	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f952 	bl	8006cc4 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e007      	b.n	8006a32 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 f945 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 f951 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d125      	bne.n	8006a92 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d11e      	bne.n	8006a92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2205      	movs	r2, #5
 8006a5a:	4252      	negs	r2, r2
 8006a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	23c0      	movs	r3, #192	; 0xc0
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4013      	ands	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0018      	movs	r0, r3
 8006a76:	f000 f925 	bl	8006cc4 <HAL_TIM_IC_CaptureCallback>
 8006a7a:	e007      	b.n	8006a8c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f000 f918 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	0018      	movs	r0, r3
 8006a88:	f000 f924 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d124      	bne.n	8006aea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d11d      	bne.n	8006aea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2209      	movs	r2, #9
 8006ab4:	4252      	negs	r2, r2
 8006ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f8f9 	bl	8006cc4 <HAL_TIM_IC_CaptureCallback>
 8006ad2:	e007      	b.n	8006ae4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 f8ec 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f000 f8f8 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2210      	movs	r2, #16
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d125      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2210      	movs	r2, #16
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d11e      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2211      	movs	r2, #17
 8006b0c:	4252      	negs	r2, r2
 8006b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2208      	movs	r2, #8
 8006b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	23c0      	movs	r3, #192	; 0xc0
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4013      	ands	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	0018      	movs	r0, r3
 8006b28:	f000 f8cc 	bl	8006cc4 <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e007      	b.n	8006b3e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f000 f8bf 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f8cb 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10f      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d108      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2202      	movs	r2, #2
 8006b66:	4252      	negs	r2, r2
 8006b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7f9 fe69 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d10f      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2280      	movs	r2, #128	; 0x80
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d108      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2281      	movs	r2, #129	; 0x81
 8006b94:	4252      	negs	r2, r2
 8006b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f000 fb2e 	bl	80071fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2240      	movs	r2, #64	; 0x40
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d10f      	bne.n	8006bce <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2240      	movs	r2, #64	; 0x40
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b40      	cmp	r3, #64	; 0x40
 8006bba:	d108      	bne.n	8006bce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2241      	movs	r2, #65	; 0x41
 8006bc2:	4252      	negs	r2, r2
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 f88b 	bl	8006ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d10f      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d108      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2221      	movs	r2, #33	; 0x21
 8006bf0:	4252      	negs	r2, r2
 8006bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f000 faf8 	bl	80071ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c10:	2317      	movs	r3, #23
 8006c12:	18fb      	adds	r3, r7, r3
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	223c      	movs	r2, #60	; 0x3c
 8006c1c:	5c9b      	ldrb	r3, [r3, r2]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_TIM_OC_ConfigChannel+0x22>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e042      	b.n	8006cac <HAL_TIM_OC_ConfigChannel+0xa8>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	223c      	movs	r2, #60	; 0x3c
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d027      	beq.n	8006c84 <HAL_TIM_OC_ConfigChannel+0x80>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b0c      	cmp	r3, #12
 8006c38:	d82c      	bhi.n	8006c94 <HAL_TIM_OC_ConfigChannel+0x90>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d019      	beq.n	8006c74 <HAL_TIM_OC_ConfigChannel+0x70>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d826      	bhi.n	8006c94 <HAL_TIM_OC_ConfigChannel+0x90>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_TIM_OC_ConfigChannel+0x50>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d008      	beq.n	8006c64 <HAL_TIM_OC_ConfigChannel+0x60>
 8006c52:	e01f      	b.n	8006c94 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f000 f8c9 	bl	8006df4 <TIM_OC1_SetConfig>
      break;
 8006c62:	e01c      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	0011      	movs	r1, r2
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 f949 	bl	8006f04 <TIM_OC2_SetConfig>
      break;
 8006c72:	e014      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 f9c5 	bl	800700c <TIM_OC3_SetConfig>
      break;
 8006c82:	e00c      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	0011      	movs	r1, r2
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 fa43 	bl	8007118 <TIM_OC4_SetConfig>
      break;
 8006c92:	e004      	b.n	8006c9e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006c94:	2317      	movs	r3, #23
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
      break;
 8006c9c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	223c      	movs	r2, #60	; 0x3c
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	5499      	strb	r1, [r3, r2]

  return status;
 8006ca6:	2317      	movs	r3, #23
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	781b      	ldrb	r3, [r3, #0]
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b006      	add	sp, #24
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cdc:	46c0      	nop			; (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cec:	46c0      	nop			; (mov r8, r8)
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a34      	ldr	r2, [pc, #208]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d008      	beq.n	8006d1e <TIM_Base_SetConfig+0x2a>
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	05db      	lsls	r3, r3, #23
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d003      	beq.n	8006d1e <TIM_Base_SetConfig+0x2a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a30      	ldr	r2, [pc, #192]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d108      	bne.n	8006d30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2270      	movs	r2, #112	; 0x70
 8006d22:	4393      	bics	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a29      	ldr	r2, [pc, #164]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d018      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	05db      	lsls	r3, r3, #23
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d013      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a24      	ldr	r2, [pc, #144]	; (8006de0 <TIM_Base_SetConfig+0xec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a23      	ldr	r2, [pc, #140]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	; (8006de8 <TIM_Base_SetConfig+0xf4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_Base_SetConfig+0x76>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a21      	ldr	r2, [pc, #132]	; (8006dec <TIM_Base_SetConfig+0xf8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4a20      	ldr	r2, [pc, #128]	; (8006df0 <TIM_Base_SetConfig+0xfc>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	4393      	bics	r3, r2
 8006d82:	001a      	movs	r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00b      	beq.n	8006dc2 <TIM_Base_SetConfig+0xce>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d007      	beq.n	8006dc2 <TIM_Base_SetConfig+0xce>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <TIM_Base_SetConfig+0xf4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_Base_SetConfig+0xce>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <TIM_Base_SetConfig+0xf8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d103      	bne.n	8006dca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	615a      	str	r2, [r3, #20]
}
 8006dd0:	46c0      	nop			; (mov r8, r8)
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	b004      	add	sp, #16
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40002000 	.word	0x40002000
 8006de4:	40014000 	.word	0x40014000
 8006de8:	40014400 	.word	0x40014400
 8006dec:	40014800 	.word	0x40014800
 8006df0:	fffffcff 	.word	0xfffffcff

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	2201      	movs	r2, #1
 8006e04:	4393      	bics	r3, r2
 8006e06:	001a      	movs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2270      	movs	r2, #112	; 0x70
 8006e22:	4393      	bics	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	4393      	bics	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	4393      	bics	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a27      	ldr	r2, [pc, #156]	; (8006eec <TIM_OC1_SetConfig+0xf8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_OC1_SetConfig+0x76>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <TIM_OC1_SetConfig+0xfc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_OC1_SetConfig+0x76>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <TIM_OC1_SetConfig+0x100>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_OC1_SetConfig+0x76>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <TIM_OC1_SetConfig+0x104>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d10c      	bne.n	8006e84 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	4393      	bics	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	4393      	bics	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a19      	ldr	r2, [pc, #100]	; (8006eec <TIM_OC1_SetConfig+0xf8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_OC1_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <TIM_OC1_SetConfig+0xfc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC1_SetConfig+0xb0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <TIM_OC1_SetConfig+0x100>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC1_SetConfig+0xb0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <TIM_OC1_SetConfig+0x104>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d111      	bne.n	8006ec8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4a15      	ldr	r2, [pc, #84]	; (8006efc <TIM_OC1_SetConfig+0x108>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <TIM_OC1_SetConfig+0x10c>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b006      	add	sp, #24
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800
 8006efc:	fffffeff 	.word	0xfffffeff
 8006f00:	fffffdff 	.word	0xfffffdff

08006f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	2210      	movs	r2, #16
 8006f14:	4393      	bics	r3, r2
 8006f16:	001a      	movs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a2e      	ldr	r2, [pc, #184]	; (8006fec <TIM_OC2_SetConfig+0xe8>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a2d      	ldr	r2, [pc, #180]	; (8006ff0 <TIM_OC2_SetConfig+0xec>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	4393      	bics	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a24      	ldr	r2, [pc, #144]	; (8006ff4 <TIM_OC2_SetConfig+0xf0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10d      	bne.n	8006f82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2280      	movs	r2, #128	; 0x80
 8006f6a:	4393      	bics	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	4393      	bics	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <TIM_OC2_SetConfig+0xf0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_OC2_SetConfig+0x9e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1a      	ldr	r2, [pc, #104]	; (8006ff8 <TIM_OC2_SetConfig+0xf4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_OC2_SetConfig+0x9e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <TIM_OC2_SetConfig+0xf8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC2_SetConfig+0x9e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a18      	ldr	r2, [pc, #96]	; (8007000 <TIM_OC2_SetConfig+0xfc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d113      	bne.n	8006fca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4a17      	ldr	r2, [pc, #92]	; (8007004 <TIM_OC2_SetConfig+0x100>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <TIM_OC2_SetConfig+0x104>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b006      	add	sp, #24
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	ffff8fff 	.word	0xffff8fff
 8006ff0:	fffffcff 	.word	0xfffffcff
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800
 8007004:	fffffbff 	.word	0xfffffbff
 8007008:	fffff7ff 	.word	0xfffff7ff

0800700c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	4a35      	ldr	r2, [pc, #212]	; (80070f0 <TIM_OC3_SetConfig+0xe4>)
 800701c:	401a      	ands	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2270      	movs	r2, #112	; 0x70
 8007038:	4393      	bics	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	4393      	bics	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <TIM_OC3_SetConfig+0xe8>)
 8007052:	4013      	ands	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <TIM_OC3_SetConfig+0xec>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10d      	bne.n	8007086 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4a23      	ldr	r2, [pc, #140]	; (80070fc <TIM_OC3_SetConfig+0xf0>)
 800706e:	4013      	ands	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <TIM_OC3_SetConfig+0xf4>)
 8007082:	4013      	ands	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <TIM_OC3_SetConfig+0xec>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_OC3_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <TIM_OC3_SetConfig+0xf8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_OC3_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <TIM_OC3_SetConfig+0xfc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC3_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1a      	ldr	r2, [pc, #104]	; (800710c <TIM_OC3_SetConfig+0x100>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d113      	bne.n	80070ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4a19      	ldr	r2, [pc, #100]	; (8007110 <TIM_OC3_SetConfig+0x104>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4a18      	ldr	r2, [pc, #96]	; (8007114 <TIM_OC3_SetConfig+0x108>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b006      	add	sp, #24
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	fffffeff 	.word	0xfffffeff
 80070f4:	fffffdff 	.word	0xfffffdff
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	fffff7ff 	.word	0xfffff7ff
 8007100:	fffffbff 	.word	0xfffffbff
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800
 8007110:	ffffefff 	.word	0xffffefff
 8007114:	ffffdfff 	.word	0xffffdfff

08007118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	4a28      	ldr	r2, [pc, #160]	; (80071c8 <TIM_OC4_SetConfig+0xb0>)
 8007128:	401a      	ands	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a22      	ldr	r2, [pc, #136]	; (80071cc <TIM_OC4_SetConfig+0xb4>)
 8007144:	4013      	ands	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <TIM_OC4_SetConfig+0xb8>)
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <TIM_OC4_SetConfig+0xbc>)
 8007160:	4013      	ands	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	031b      	lsls	r3, r3, #12
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <TIM_OC4_SetConfig+0xc0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00b      	beq.n	8007190 <TIM_OC4_SetConfig+0x78>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a18      	ldr	r2, [pc, #96]	; (80071dc <TIM_OC4_SetConfig+0xc4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_OC4_SetConfig+0x78>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <TIM_OC4_SetConfig+0xc8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC4_SetConfig+0x78>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <TIM_OC4_SetConfig+0xcc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d109      	bne.n	80071a4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <TIM_OC4_SetConfig+0xd0>)
 8007194:	4013      	ands	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	019b      	lsls	r3, r3, #6
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b006      	add	sp, #24
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	ffffefff 	.word	0xffffefff
 80071cc:	ffff8fff 	.word	0xffff8fff
 80071d0:	fffffcff 	.word	0xfffffcff
 80071d4:	ffffdfff 	.word	0xffffdfff
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40014400 	.word	0x40014400
 80071e4:	40014800 	.word	0x40014800
 80071e8:	ffffbfff 	.word	0xffffbfff

080071ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e044      	b.n	80072a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d107      	bne.n	8007236 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2274      	movs	r2, #116	; 0x74
 800722a:	2100      	movs	r1, #0
 800722c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	0018      	movs	r0, r3
 8007232:	f7fa fc9d 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	; 0x24
 800723a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2101      	movs	r1, #1
 8007248:	438a      	bics	r2, r1
 800724a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f000 fb24 	bl	800789c <UART_SetConfig>
 8007254:	0003      	movs	r3, r0
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e024      	b.n	80072a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	0018      	movs	r0, r3
 800726a:	f000 fc9f 	bl	8007bac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	490d      	ldr	r1, [pc, #52]	; (80072b0 <HAL_UART_Init+0xa4>)
 800727a:	400a      	ands	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	212a      	movs	r1, #42	; 0x2a
 800728a:	438a      	bics	r2, r1
 800728c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2101      	movs	r1, #1
 800729a:	430a      	orrs	r2, r1
 800729c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f000 fd37 	bl	8007d14 <UART_CheckIdleState>
 80072a6:	0003      	movs	r3, r0
}
 80072a8:	0018      	movs	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	ffffb7ff 	.word	0xffffb7ff

080072b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b0ab      	sub	sp, #172	; 0xac
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	22a4      	movs	r2, #164	; 0xa4
 80072c4:	18b9      	adds	r1, r7, r2
 80072c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	20a0      	movs	r0, #160	; 0xa0
 80072d0:	1839      	adds	r1, r7, r0
 80072d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	219c      	movs	r1, #156	; 0x9c
 80072dc:	1879      	adds	r1, r7, r1
 80072de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072e0:	0011      	movs	r1, r2
 80072e2:	18bb      	adds	r3, r7, r2
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a99      	ldr	r2, [pc, #612]	; (800754c <HAL_UART_IRQHandler+0x298>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	2298      	movs	r2, #152	; 0x98
 80072ec:	18bc      	adds	r4, r7, r2
 80072ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80072f0:	18bb      	adds	r3, r7, r2
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d114      	bne.n	8007322 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2220      	movs	r2, #32
 80072fe:	4013      	ands	r3, r2
 8007300:	d00f      	beq.n	8007322 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007302:	183b      	adds	r3, r7, r0
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2220      	movs	r2, #32
 8007308:	4013      	ands	r3, r2
 800730a:	d00a      	beq.n	8007322 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007310:	2b00      	cmp	r3, #0
 8007312:	d100      	bne.n	8007316 <HAL_UART_IRQHandler+0x62>
 8007314:	e296      	b.n	8007844 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	0010      	movs	r0, r2
 800731e:	4798      	blx	r3
      }
      return;
 8007320:	e290      	b.n	8007844 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007322:	2398      	movs	r3, #152	; 0x98
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d100      	bne.n	800732e <HAL_UART_IRQHandler+0x7a>
 800732c:	e114      	b.n	8007558 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800732e:	239c      	movs	r3, #156	; 0x9c
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2201      	movs	r2, #1
 8007336:	4013      	ands	r3, r2
 8007338:	d106      	bne.n	8007348 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800733a:	23a0      	movs	r3, #160	; 0xa0
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a83      	ldr	r2, [pc, #524]	; (8007550 <HAL_UART_IRQHandler+0x29c>)
 8007342:	4013      	ands	r3, r2
 8007344:	d100      	bne.n	8007348 <HAL_UART_IRQHandler+0x94>
 8007346:	e107      	b.n	8007558 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007348:	23a4      	movs	r3, #164	; 0xa4
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2201      	movs	r2, #1
 8007350:	4013      	ands	r3, r2
 8007352:	d012      	beq.n	800737a <HAL_UART_IRQHandler+0xc6>
 8007354:	23a0      	movs	r3, #160	; 0xa0
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	2380      	movs	r3, #128	; 0x80
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4013      	ands	r3, r2
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2201      	movs	r2, #1
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	589b      	ldr	r3, [r3, r2]
 8007370:	2201      	movs	r2, #1
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737a:	23a4      	movs	r3, #164	; 0xa4
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2202      	movs	r2, #2
 8007382:	4013      	ands	r3, r2
 8007384:	d011      	beq.n	80073aa <HAL_UART_IRQHandler+0xf6>
 8007386:	239c      	movs	r3, #156	; 0x9c
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	4013      	ands	r3, r2
 8007390:	d00b      	beq.n	80073aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2202      	movs	r2, #2
 8007398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	589b      	ldr	r3, [r3, r2]
 80073a0:	2204      	movs	r2, #4
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2180      	movs	r1, #128	; 0x80
 80073a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073aa:	23a4      	movs	r3, #164	; 0xa4
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2204      	movs	r2, #4
 80073b2:	4013      	ands	r3, r2
 80073b4:	d011      	beq.n	80073da <HAL_UART_IRQHandler+0x126>
 80073b6:	239c      	movs	r3, #156	; 0x9c
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2201      	movs	r2, #1
 80073be:	4013      	ands	r3, r2
 80073c0:	d00b      	beq.n	80073da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2204      	movs	r2, #4
 80073c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	589b      	ldr	r3, [r3, r2]
 80073d0:	2202      	movs	r2, #2
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073da:	23a4      	movs	r3, #164	; 0xa4
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2208      	movs	r2, #8
 80073e2:	4013      	ands	r3, r2
 80073e4:	d017      	beq.n	8007416 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073e6:	23a0      	movs	r3, #160	; 0xa0
 80073e8:	18fb      	adds	r3, r7, r3
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2220      	movs	r2, #32
 80073ee:	4013      	ands	r3, r2
 80073f0:	d105      	bne.n	80073fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073f2:	239c      	movs	r3, #156	; 0x9c
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2208      	movs	r2, #8
 8007404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2280      	movs	r2, #128	; 0x80
 800740a:	589b      	ldr	r3, [r3, r2]
 800740c:	2208      	movs	r2, #8
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007416:	23a4      	movs	r3, #164	; 0xa4
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	4013      	ands	r3, r2
 8007422:	d013      	beq.n	800744c <HAL_UART_IRQHandler+0x198>
 8007424:	23a0      	movs	r3, #160	; 0xa0
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	2380      	movs	r3, #128	; 0x80
 800742c:	04db      	lsls	r3, r3, #19
 800742e:	4013      	ands	r3, r2
 8007430:	d00c      	beq.n	800744c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2280      	movs	r2, #128	; 0x80
 8007438:	0112      	lsls	r2, r2, #4
 800743a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	589b      	ldr	r3, [r3, r2]
 8007442:	2220      	movs	r2, #32
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2280      	movs	r2, #128	; 0x80
 8007450:	589b      	ldr	r3, [r3, r2]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d100      	bne.n	8007458 <HAL_UART_IRQHandler+0x1a4>
 8007456:	e1f7      	b.n	8007848 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007458:	23a4      	movs	r3, #164	; 0xa4
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2220      	movs	r2, #32
 8007460:	4013      	ands	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007464:	23a0      	movs	r3, #160	; 0xa0
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2220      	movs	r2, #32
 800746c:	4013      	ands	r3, r2
 800746e:	d008      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	0010      	movs	r0, r2
 8007480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2280      	movs	r2, #128	; 0x80
 8007486:	589b      	ldr	r3, [r3, r2]
 8007488:	2194      	movs	r1, #148	; 0x94
 800748a:	187a      	adds	r2, r7, r1
 800748c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	4013      	ands	r3, r2
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	d004      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800749c:	187b      	adds	r3, r7, r1
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2228      	movs	r2, #40	; 0x28
 80074a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a4:	d047      	beq.n	8007536 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 fd3f 	bl	8007f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	2240      	movs	r2, #64	; 0x40
 80074b6:	4013      	ands	r3, r2
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d137      	bne.n	800752c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074bc:	f3ef 8310 	mrs	r3, PRIMASK
 80074c0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80074c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074c4:	2090      	movs	r0, #144	; 0x90
 80074c6:	183a      	adds	r2, r7, r0
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	2301      	movs	r3, #1
 80074cc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074d0:	f383 8810 	msr	PRIMASK, r3
}
 80074d4:	46c0      	nop			; (mov r8, r8)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	438a      	bics	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]
 80074e6:	183b      	adds	r3, r7, r0
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ee:	f383 8810 	msr	PRIMASK, r3
}
 80074f2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <HAL_UART_IRQHandler+0x2a0>)
 8007502:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	0018      	movs	r0, r3
 800750a:	f7fb fd71 	bl	8002ff0 <HAL_DMA_Abort_IT>
 800750e:	1e03      	subs	r3, r0, #0
 8007510:	d01a      	beq.n	8007548 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751c:	0018      	movs	r0, r3
 800751e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007520:	e012      	b.n	8007548 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	0018      	movs	r0, r3
 8007526:	f000 f9a5 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752a:	e00d      	b.n	8007548 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0018      	movs	r0, r3
 8007530:	f000 f9a0 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e008      	b.n	8007548 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 f99b 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	2100      	movs	r1, #0
 8007544:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007546:	e17f      	b.n	8007848 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	46c0      	nop			; (mov r8, r8)
    return;
 800754a:	e17d      	b.n	8007848 <HAL_UART_IRQHandler+0x594>
 800754c:	0000080f 	.word	0x0000080f
 8007550:	04000120 	.word	0x04000120
 8007554:	08007ff1 	.word	0x08007ff1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755c:	2b01      	cmp	r3, #1
 800755e:	d000      	beq.n	8007562 <HAL_UART_IRQHandler+0x2ae>
 8007560:	e131      	b.n	80077c6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007562:	23a4      	movs	r3, #164	; 0xa4
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2210      	movs	r2, #16
 800756a:	4013      	ands	r3, r2
 800756c:	d100      	bne.n	8007570 <HAL_UART_IRQHandler+0x2bc>
 800756e:	e12a      	b.n	80077c6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007570:	23a0      	movs	r3, #160	; 0xa0
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	4013      	ands	r3, r2
 800757a:	d100      	bne.n	800757e <HAL_UART_IRQHandler+0x2ca>
 800757c:	e123      	b.n	80077c6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2210      	movs	r2, #16
 8007584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2240      	movs	r2, #64	; 0x40
 800758e:	4013      	ands	r3, r2
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d000      	beq.n	8007596 <HAL_UART_IRQHandler+0x2e2>
 8007594:	e09b      	b.n	80076ce <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	217e      	movs	r1, #126	; 0x7e
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80075a4:	187b      	adds	r3, r7, r1
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d100      	bne.n	80075ae <HAL_UART_IRQHandler+0x2fa>
 80075ac:	e14e      	b.n	800784c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2258      	movs	r2, #88	; 0x58
 80075b2:	5a9b      	ldrh	r3, [r3, r2]
 80075b4:	187a      	adds	r2, r7, r1
 80075b6:	8812      	ldrh	r2, [r2, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d300      	bcc.n	80075be <HAL_UART_IRQHandler+0x30a>
 80075bc:	e146      	b.n	800784c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	187a      	adds	r2, r7, r1
 80075c2:	215a      	movs	r1, #90	; 0x5a
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d06e      	beq.n	80076b0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d2:	f3ef 8310 	mrs	r3, PRIMASK
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075da:	67bb      	str	r3, [r7, #120]	; 0x78
 80075dc:	2301      	movs	r3, #1
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	f383 8810 	msr	PRIMASK, r3
}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	499a      	ldr	r1, [pc, #616]	; (800785c <HAL_UART_IRQHandler+0x5a8>)
 80075f4:	400a      	ands	r2, r1
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f383 8810 	msr	PRIMASK, r3
}
 8007602:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007604:	f3ef 8310 	mrs	r3, PRIMASK
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760c:	677b      	str	r3, [r7, #116]	; 0x74
 800760e:	2301      	movs	r3, #1
 8007610:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007614:	f383 8810 	msr	PRIMASK, r3
}
 8007618:	46c0      	nop			; (mov r8, r8)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2101      	movs	r1, #1
 8007626:	438a      	bics	r2, r1
 8007628:	609a      	str	r2, [r3, #8]
 800762a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007630:	f383 8810 	msr	PRIMASK, r3
}
 8007634:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007636:	f3ef 8310 	mrs	r3, PRIMASK
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800763c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763e:	673b      	str	r3, [r7, #112]	; 0x70
 8007640:	2301      	movs	r3, #1
 8007642:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007646:	f383 8810 	msr	PRIMASK, r3
}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2140      	movs	r1, #64	; 0x40
 8007658:	438a      	bics	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007662:	f383 8810 	msr	PRIMASK, r3
}
 8007666:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007674:	f3ef 8310 	mrs	r3, PRIMASK
 8007678:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800767a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800767e:	2301      	movs	r3, #1
 8007680:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007684:	f383 8810 	msr	PRIMASK, r3
}
 8007688:	46c0      	nop			; (mov r8, r8)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2110      	movs	r1, #16
 8007696:	438a      	bics	r2, r1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a0:	f383 8810 	msr	PRIMASK, r3
}
 80076a4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076aa:	0018      	movs	r0, r3
 80076ac:	f7fb fc68 	bl	8002f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2258      	movs	r2, #88	; 0x58
 80076b4:	5a9a      	ldrh	r2, [r3, r2]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	215a      	movs	r1, #90	; 0x5a
 80076ba:	5a5b      	ldrh	r3, [r3, r1]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	0011      	movs	r1, r2
 80076c6:	0018      	movs	r0, r3
 80076c8:	f000 f8dc 	bl	8007884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076cc:	e0be      	b.n	800784c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2258      	movs	r2, #88	; 0x58
 80076d2:	5a99      	ldrh	r1, [r3, r2]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	225a      	movs	r2, #90	; 0x5a
 80076d8:	5a9b      	ldrh	r3, [r3, r2]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	208e      	movs	r0, #142	; 0x8e
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	1a8a      	subs	r2, r1, r2
 80076e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	225a      	movs	r2, #90	; 0x5a
 80076e8:	5a9b      	ldrh	r3, [r3, r2]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d100      	bne.n	80076f2 <HAL_UART_IRQHandler+0x43e>
 80076f0:	e0ae      	b.n	8007850 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80076f2:	183b      	adds	r3, r7, r0
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d100      	bne.n	80076fc <HAL_UART_IRQHandler+0x448>
 80076fa:	e0a9      	b.n	8007850 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007700:	60fb      	str	r3, [r7, #12]
  return(result);
 8007702:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007704:	2488      	movs	r4, #136	; 0x88
 8007706:	193a      	adds	r2, r7, r4
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	2301      	movs	r3, #1
 800770c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	494f      	ldr	r1, [pc, #316]	; (8007860 <HAL_UART_IRQHandler+0x5ac>)
 8007722:	400a      	ands	r2, r1
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	193b      	adds	r3, r7, r4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f383 8810 	msr	PRIMASK, r3
}
 8007732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007734:	f3ef 8310 	mrs	r3, PRIMASK
 8007738:	61bb      	str	r3, [r7, #24]
  return(result);
 800773a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	2484      	movs	r4, #132	; 0x84
 800773e:	193a      	adds	r2, r7, r4
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	2301      	movs	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2101      	movs	r1, #1
 800775a:	438a      	bics	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	193b      	adds	r3, r7, r4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	f383 8810 	msr	PRIMASK, r3
}
 800776a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800777e:	f3ef 8310 	mrs	r3, PRIMASK
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007786:	2480      	movs	r4, #128	; 0x80
 8007788:	193a      	adds	r2, r7, r4
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	2301      	movs	r3, #1
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	f383 8810 	msr	PRIMASK, r3
}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2110      	movs	r1, #16
 80077a4:	438a      	bics	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	193b      	adds	r3, r7, r4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	f383 8810 	msr	PRIMASK, r3
}
 80077b4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b6:	183b      	adds	r3, r7, r0
 80077b8:	881a      	ldrh	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	0011      	movs	r1, r2
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 f860 	bl	8007884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077c4:	e044      	b.n	8007850 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077c6:	23a4      	movs	r3, #164	; 0xa4
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	035b      	lsls	r3, r3, #13
 80077d0:	4013      	ands	r3, r2
 80077d2:	d010      	beq.n	80077f6 <HAL_UART_IRQHandler+0x542>
 80077d4:	239c      	movs	r3, #156	; 0x9c
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	03db      	lsls	r3, r3, #15
 80077de:	4013      	ands	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2280      	movs	r2, #128	; 0x80
 80077e8:	0352      	lsls	r2, r2, #13
 80077ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0018      	movs	r0, r3
 80077f0:	f000 fc40 	bl	8008074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077f4:	e02f      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077f6:	23a4      	movs	r3, #164	; 0xa4
 80077f8:	18fb      	adds	r3, r7, r3
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2280      	movs	r2, #128	; 0x80
 80077fe:	4013      	ands	r3, r2
 8007800:	d00f      	beq.n	8007822 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007802:	23a0      	movs	r3, #160	; 0xa0
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	4013      	ands	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01e      	beq.n	8007854 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	0010      	movs	r0, r2
 800781e:	4798      	blx	r3
    }
    return;
 8007820:	e018      	b.n	8007854 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007822:	23a4      	movs	r3, #164	; 0xa4
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2240      	movs	r2, #64	; 0x40
 800782a:	4013      	ands	r3, r2
 800782c:	d013      	beq.n	8007856 <HAL_UART_IRQHandler+0x5a2>
 800782e:	23a0      	movs	r3, #160	; 0xa0
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2240      	movs	r2, #64	; 0x40
 8007836:	4013      	ands	r3, r2
 8007838:	d00d      	beq.n	8007856 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 fbee 	bl	800801e <UART_EndTransmit_IT>
    return;
 8007842:	e008      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	e006      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	e004      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
      return;
 800784c:	46c0      	nop			; (mov r8, r8)
 800784e:	e002      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007850:	46c0      	nop			; (mov r8, r8)
 8007852:	e000      	b.n	8007856 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007854:	46c0      	nop			; (mov r8, r8)
  }

}
 8007856:	46bd      	mov	sp, r7
 8007858:	b02b      	add	sp, #172	; 0xac
 800785a:	bd90      	pop	{r4, r7, pc}
 800785c:	fffffeff 	.word	0xfffffeff
 8007860:	fffffedf 	.word	0xfffffedf

08007864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b002      	add	sp, #8
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	000a      	movs	r2, r1
 800788e:	1cbb      	adds	r3, r7, #2
 8007890:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	46bd      	mov	sp, r7
 8007896:	b002      	add	sp, #8
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078a4:	231e      	movs	r3, #30
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4aaf      	ldr	r2, [pc, #700]	; (8007b88 <UART_SetConfig+0x2ec>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	0019      	movs	r1, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4aaa      	ldr	r2, [pc, #680]	; (8007b8c <UART_SetConfig+0x2f0>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	0019      	movs	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4aa1      	ldr	r2, [pc, #644]	; (8007b90 <UART_SetConfig+0x2f4>)
 800790a:	4013      	ands	r3, r2
 800790c:	0019      	movs	r1, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a9d      	ldr	r2, [pc, #628]	; (8007b94 <UART_SetConfig+0x2f8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d127      	bne.n	8007972 <UART_SetConfig+0xd6>
 8007922:	4b9d      	ldr	r3, [pc, #628]	; (8007b98 <UART_SetConfig+0x2fc>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	2203      	movs	r2, #3
 8007928:	4013      	ands	r3, r2
 800792a:	2b03      	cmp	r3, #3
 800792c:	d00d      	beq.n	800794a <UART_SetConfig+0xae>
 800792e:	d81b      	bhi.n	8007968 <UART_SetConfig+0xcc>
 8007930:	2b02      	cmp	r3, #2
 8007932:	d014      	beq.n	800795e <UART_SetConfig+0xc2>
 8007934:	d818      	bhi.n	8007968 <UART_SetConfig+0xcc>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <UART_SetConfig+0xa4>
 800793a:	2b01      	cmp	r3, #1
 800793c:	d00a      	beq.n	8007954 <UART_SetConfig+0xb8>
 800793e:	e013      	b.n	8007968 <UART_SetConfig+0xcc>
 8007940:	231f      	movs	r3, #31
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e065      	b.n	8007a16 <UART_SetConfig+0x17a>
 800794a:	231f      	movs	r3, #31
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	2202      	movs	r2, #2
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e060      	b.n	8007a16 <UART_SetConfig+0x17a>
 8007954:	231f      	movs	r3, #31
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	2204      	movs	r2, #4
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e05b      	b.n	8007a16 <UART_SetConfig+0x17a>
 800795e:	231f      	movs	r3, #31
 8007960:	18fb      	adds	r3, r7, r3
 8007962:	2208      	movs	r2, #8
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e056      	b.n	8007a16 <UART_SetConfig+0x17a>
 8007968:	231f      	movs	r3, #31
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	2210      	movs	r2, #16
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e051      	b.n	8007a16 <UART_SetConfig+0x17a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a89      	ldr	r2, [pc, #548]	; (8007b9c <UART_SetConfig+0x300>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d134      	bne.n	80079e6 <UART_SetConfig+0x14a>
 800797c:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <UART_SetConfig+0x2fc>)
 800797e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007980:	23c0      	movs	r3, #192	; 0xc0
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	4013      	ands	r3, r2
 8007986:	22c0      	movs	r2, #192	; 0xc0
 8007988:	0292      	lsls	r2, r2, #10
 800798a:	4293      	cmp	r3, r2
 800798c:	d017      	beq.n	80079be <UART_SetConfig+0x122>
 800798e:	22c0      	movs	r2, #192	; 0xc0
 8007990:	0292      	lsls	r2, r2, #10
 8007992:	4293      	cmp	r3, r2
 8007994:	d822      	bhi.n	80079dc <UART_SetConfig+0x140>
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	0292      	lsls	r2, r2, #10
 800799a:	4293      	cmp	r3, r2
 800799c:	d019      	beq.n	80079d2 <UART_SetConfig+0x136>
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	0292      	lsls	r2, r2, #10
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d81a      	bhi.n	80079dc <UART_SetConfig+0x140>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <UART_SetConfig+0x118>
 80079aa:	2280      	movs	r2, #128	; 0x80
 80079ac:	0252      	lsls	r2, r2, #9
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00a      	beq.n	80079c8 <UART_SetConfig+0x12c>
 80079b2:	e013      	b.n	80079dc <UART_SetConfig+0x140>
 80079b4:	231f      	movs	r3, #31
 80079b6:	18fb      	adds	r3, r7, r3
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e02b      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079be:	231f      	movs	r3, #31
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	2202      	movs	r2, #2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e026      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079c8:	231f      	movs	r3, #31
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	2204      	movs	r2, #4
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e021      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079d2:	231f      	movs	r3, #31
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	2208      	movs	r2, #8
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	e01c      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079dc:	231f      	movs	r3, #31
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	2210      	movs	r2, #16
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e017      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a6d      	ldr	r2, [pc, #436]	; (8007ba0 <UART_SetConfig+0x304>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d104      	bne.n	80079fa <UART_SetConfig+0x15e>
 80079f0:	231f      	movs	r3, #31
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e00d      	b.n	8007a16 <UART_SetConfig+0x17a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a69      	ldr	r2, [pc, #420]	; (8007ba4 <UART_SetConfig+0x308>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d104      	bne.n	8007a0e <UART_SetConfig+0x172>
 8007a04:	231f      	movs	r3, #31
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e003      	b.n	8007a16 <UART_SetConfig+0x17a>
 8007a0e:	231f      	movs	r3, #31
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	2210      	movs	r2, #16
 8007a14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69da      	ldr	r2, [r3, #28]
 8007a1a:	2380      	movs	r3, #128	; 0x80
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d15d      	bne.n	8007ade <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007a22:	231f      	movs	r3, #31
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d015      	beq.n	8007a58 <UART_SetConfig+0x1bc>
 8007a2c:	dc18      	bgt.n	8007a60 <UART_SetConfig+0x1c4>
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d00d      	beq.n	8007a4e <UART_SetConfig+0x1b2>
 8007a32:	dc15      	bgt.n	8007a60 <UART_SetConfig+0x1c4>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <UART_SetConfig+0x1a2>
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d005      	beq.n	8007a48 <UART_SetConfig+0x1ac>
 8007a3c:	e010      	b.n	8007a60 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3e:	f7fe f865 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 8007a42:	0003      	movs	r3, r0
 8007a44:	61bb      	str	r3, [r7, #24]
        break;
 8007a46:	e012      	b.n	8007a6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a48:	4b57      	ldr	r3, [pc, #348]	; (8007ba8 <UART_SetConfig+0x30c>)
 8007a4a:	61bb      	str	r3, [r7, #24]
        break;
 8007a4c:	e00f      	b.n	8007a6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fd ffd1 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 8007a52:	0003      	movs	r3, r0
 8007a54:	61bb      	str	r3, [r7, #24]
        break;
 8007a56:	e00a      	b.n	8007a6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	021b      	lsls	r3, r3, #8
 8007a5c:	61bb      	str	r3, [r7, #24]
        break;
 8007a5e:	e006      	b.n	8007a6e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a64:	231e      	movs	r3, #30
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2201      	movs	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
        break;
 8007a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d100      	bne.n	8007a76 <UART_SetConfig+0x1da>
 8007a74:	e07b      	b.n	8007b6e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	005a      	lsls	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	18d2      	adds	r2, r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	0019      	movs	r1, r3
 8007a88:	0010      	movs	r0, r2
 8007a8a:	f7f8 fb4f 	bl	800012c <__udivsi3>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d91c      	bls.n	8007ad4 <UART_SetConfig+0x238>
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	2380      	movs	r3, #128	; 0x80
 8007a9e:	025b      	lsls	r3, r3, #9
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d217      	bcs.n	8007ad4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	200e      	movs	r0, #14
 8007aaa:	183b      	adds	r3, r7, r0
 8007aac:	210f      	movs	r1, #15
 8007aae:	438a      	bics	r2, r1
 8007ab0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2207      	movs	r2, #7
 8007aba:	4013      	ands	r3, r2
 8007abc:	b299      	uxth	r1, r3
 8007abe:	183b      	adds	r3, r7, r0
 8007ac0:	183a      	adds	r2, r7, r0
 8007ac2:	8812      	ldrh	r2, [r2, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	183a      	adds	r2, r7, r0
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	e04c      	b.n	8007b6e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad4:	231e      	movs	r3, #30
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	2201      	movs	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e047      	b.n	8007b6e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ade:	231f      	movs	r3, #31
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d015      	beq.n	8007b14 <UART_SetConfig+0x278>
 8007ae8:	dc18      	bgt.n	8007b1c <UART_SetConfig+0x280>
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d00d      	beq.n	8007b0a <UART_SetConfig+0x26e>
 8007aee:	dc15      	bgt.n	8007b1c <UART_SetConfig+0x280>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <UART_SetConfig+0x25e>
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d005      	beq.n	8007b04 <UART_SetConfig+0x268>
 8007af8:	e010      	b.n	8007b1c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007afa:	f7fe f807 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 8007afe:	0003      	movs	r3, r0
 8007b00:	61bb      	str	r3, [r7, #24]
        break;
 8007b02:	e012      	b.n	8007b2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b04:	4b28      	ldr	r3, [pc, #160]	; (8007ba8 <UART_SetConfig+0x30c>)
 8007b06:	61bb      	str	r3, [r7, #24]
        break;
 8007b08:	e00f      	b.n	8007b2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b0a:	f7fd ff73 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	61bb      	str	r3, [r7, #24]
        break;
 8007b12:	e00a      	b.n	8007b2a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	61bb      	str	r3, [r7, #24]
        break;
 8007b1a:	e006      	b.n	8007b2a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b20:	231e      	movs	r3, #30
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	2201      	movs	r2, #1
 8007b26:	701a      	strb	r2, [r3, #0]
        break;
 8007b28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01e      	beq.n	8007b6e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	085a      	lsrs	r2, r3, #1
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	18d2      	adds	r2, r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	0019      	movs	r1, r3
 8007b40:	0010      	movs	r0, r2
 8007b42:	f7f8 faf3 	bl	800012c <__udivsi3>
 8007b46:	0003      	movs	r3, r0
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b0f      	cmp	r3, #15
 8007b50:	d909      	bls.n	8007b66 <UART_SetConfig+0x2ca>
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	025b      	lsls	r3, r3, #9
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d204      	bcs.n	8007b66 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e003      	b.n	8007b6e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b66:	231e      	movs	r3, #30
 8007b68:	18fb      	adds	r3, r7, r3
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b7a:	231e      	movs	r3, #30
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	781b      	ldrb	r3, [r3, #0]
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b008      	add	sp, #32
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	efff69f3 	.word	0xefff69f3
 8007b8c:	ffffcfff 	.word	0xffffcfff
 8007b90:	fffff4ff 	.word	0xfffff4ff
 8007b94:	40013800 	.word	0x40013800
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	40004400 	.word	0x40004400
 8007ba0:	40004800 	.word	0x40004800
 8007ba4:	40004c00 	.word	0x40004c00
 8007ba8:	007a1200 	.word	0x007a1200

08007bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a4a      	ldr	r2, [pc, #296]	; (8007cf0 <UART_AdvFeatureConfig+0x144>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	0019      	movs	r1, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4a43      	ldr	r2, [pc, #268]	; (8007cf4 <UART_AdvFeatureConfig+0x148>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	0019      	movs	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a3b      	ldr	r2, [pc, #236]	; (8007cf8 <UART_AdvFeatureConfig+0x14c>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2208      	movs	r2, #8
 8007c20:	4013      	ands	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	4a34      	ldr	r2, [pc, #208]	; (8007cfc <UART_AdvFeatureConfig+0x150>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	0019      	movs	r1, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2210      	movs	r2, #16
 8007c42:	4013      	ands	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <UART_AdvFeatureConfig+0x154>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	0019      	movs	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2220      	movs	r2, #32
 8007c64:	4013      	ands	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	4a25      	ldr	r2, [pc, #148]	; (8007d04 <UART_AdvFeatureConfig+0x158>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2240      	movs	r2, #64	; 0x40
 8007c86:	4013      	ands	r3, r2
 8007c88:	d01d      	beq.n	8007cc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <UART_AdvFeatureConfig+0x15c>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	0019      	movs	r1, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca6:	2380      	movs	r3, #128	; 0x80
 8007ca8:	035b      	lsls	r3, r3, #13
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d10b      	bne.n	8007cc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a15      	ldr	r2, [pc, #84]	; (8007d0c <UART_AdvFeatureConfig+0x160>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	0019      	movs	r1, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2280      	movs	r2, #128	; 0x80
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d00b      	beq.n	8007ce8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <UART_AdvFeatureConfig+0x164>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	0019      	movs	r1, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]
  }
}
 8007ce8:	46c0      	nop			; (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	fffdffff 	.word	0xfffdffff
 8007cf4:	fffeffff 	.word	0xfffeffff
 8007cf8:	fffbffff 	.word	0xfffbffff
 8007cfc:	ffff7fff 	.word	0xffff7fff
 8007d00:	ffffefff 	.word	0xffffefff
 8007d04:	ffffdfff 	.word	0xffffdfff
 8007d08:	ffefffff 	.word	0xffefffff
 8007d0c:	ff9fffff 	.word	0xff9fffff
 8007d10:	fff7ffff 	.word	0xfff7ffff

08007d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2280      	movs	r2, #128	; 0x80
 8007d20:	2100      	movs	r1, #0
 8007d22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d24:	f7fa fb00 	bl	8002328 <HAL_GetTick>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2208      	movs	r2, #8
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d10c      	bne.n	8007d54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2280      	movs	r2, #128	; 0x80
 8007d3e:	0391      	lsls	r1, r2, #14
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4a17      	ldr	r2, [pc, #92]	; (8007da0 <UART_CheckIdleState+0x8c>)
 8007d44:	9200      	str	r2, [sp, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f000 f82c 	bl	8007da4 <UART_WaitOnFlagUntilTimeout>
 8007d4c:	1e03      	subs	r3, r0, #0
 8007d4e:	d001      	beq.n	8007d54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e021      	b.n	8007d98 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d10c      	bne.n	8007d7c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2280      	movs	r2, #128	; 0x80
 8007d66:	03d1      	lsls	r1, r2, #15
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <UART_CheckIdleState+0x8c>)
 8007d6c:	9200      	str	r2, [sp, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f000 f818 	bl	8007da4 <UART_WaitOnFlagUntilTimeout>
 8007d74:	1e03      	subs	r3, r0, #0
 8007d76:	d001      	beq.n	8007d7c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e00d      	b.n	8007d98 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2274      	movs	r2, #116	; 0x74
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	0018      	movs	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b004      	add	sp, #16
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	01ffffff 	.word	0x01ffffff

08007da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b094      	sub	sp, #80	; 0x50
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	1dfb      	adds	r3, r7, #7
 8007db2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db4:	e0a3      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007db8:	3301      	adds	r3, #1
 8007dba:	d100      	bne.n	8007dbe <UART_WaitOnFlagUntilTimeout+0x1a>
 8007dbc:	e09f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbe:	f7fa fab3 	bl	8002328 <HAL_GetTick>
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d13d      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dde:	2301      	movs	r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	f383 8810 	msr	PRIMASK, r3
}
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	494c      	ldr	r1, [pc, #304]	; (8007f28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007df6:	400a      	ands	r2, r1
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dfc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	f383 8810 	msr	PRIMASK, r3
}
 8007e04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e10:	2301      	movs	r3, #1
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2101      	movs	r1, #1
 8007e28:	438a      	bics	r2, r1
 8007e2a:	609a      	str	r2, [r3, #8]
 8007e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2274      	movs	r2, #116	; 0x74
 8007e48:	2100      	movs	r1, #0
 8007e4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e067      	b.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2204      	movs	r2, #4
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d050      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	2380      	movs	r3, #128	; 0x80
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	401a      	ands	r2, r3
 8007e68:	2380      	movs	r3, #128	; 0x80
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d146      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2280      	movs	r2, #128	; 0x80
 8007e76:	0112      	lsls	r2, r2, #4
 8007e78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e7e:	613b      	str	r3, [r7, #16]
  return(result);
 8007e80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e84:	2301      	movs	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f383 8810 	msr	PRIMASK, r3
}
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4923      	ldr	r1, [pc, #140]	; (8007f28 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007e9c:	400a      	ands	r2, r1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f383 8810 	msr	PRIMASK, r3
}
 8007eaa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eac:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007eb2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	f383 8810 	msr	PRIMASK, r3
}
 8007ec0:	46c0      	nop			; (mov r8, r8)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	438a      	bics	r2, r1
 8007ed0:	609a      	str	r2, [r3, #8]
 8007ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2280      	movs	r2, #128	; 0x80
 8007eee:	2120      	movs	r1, #32
 8007ef0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2274      	movs	r2, #116	; 0x74
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e010      	b.n	8007f20 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	425a      	negs	r2, r3
 8007f0e:	4153      	adcs	r3, r2
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	001a      	movs	r2, r3
 8007f14:	1dfb      	adds	r3, r7, #7
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d100      	bne.n	8007f1e <UART_WaitOnFlagUntilTimeout+0x17a>
 8007f1c:	e74b      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	0018      	movs	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b014      	add	sp, #80	; 0x50
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	fffffe5f 	.word	0xfffffe5f

08007f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08e      	sub	sp, #56	; 0x38
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
 8007f38:	617b      	str	r3, [r7, #20]
  return(result);
 8007f3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3e:	2301      	movs	r3, #1
 8007f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			; (mov r8, r8)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4925      	ldr	r1, [pc, #148]	; (8007fec <UART_EndRxTransfer+0xc0>)
 8007f56:	400a      	ands	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f66:	f3ef 8310 	mrs	r3, PRIMASK
 8007f6a:	623b      	str	r3, [r7, #32]
  return(result);
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f70:	2301      	movs	r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689a      	ldr	r2, [r3, #8]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2101      	movs	r1, #1
 8007f88:	438a      	bics	r2, r1
 8007f8a:	609a      	str	r2, [r3, #8]
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	f383 8810 	msr	PRIMASK, r3
}
 8007f96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d118      	bne.n	8007fd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007faa:	2301      	movs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f383 8810 	msr	PRIMASK, r3
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2110      	movs	r1, #16
 8007fc2:	438a      	bics	r2, r1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f383 8810 	msr	PRIMASK, r3
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b00e      	add	sp, #56	; 0x38
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	fffffedf 	.word	0xfffffedf

08007ff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	225a      	movs	r2, #90	; 0x5a
 8008002:	2100      	movs	r1, #0
 8008004:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2252      	movs	r2, #82	; 0x52
 800800a:	2100      	movs	r1, #0
 800800c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	0018      	movs	r0, r3
 8008012:	f7ff fc2f 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008026:	f3ef 8310 	mrs	r3, PRIMASK
 800802a:	60bb      	str	r3, [r7, #8]
  return(result);
 800802c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	2301      	movs	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f383 8810 	msr	PRIMASK, r3
}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2140      	movs	r1, #64	; 0x40
 8008048:	438a      	bics	r2, r1
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f383 8810 	msr	PRIMASK, r3
}
 8008056:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	0018      	movs	r0, r3
 8008068:	f7ff fbfc 	bl	8007864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806c:	46c0      	nop			; (mov r8, r8)
 800806e:	46bd      	mov	sp, r7
 8008070:	b006      	add	sp, #24
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800807c:	46c0      	nop			; (mov r8, r8)
 800807e:	46bd      	mov	sp, r7
 8008080:	b002      	add	sp, #8
 8008082:	bd80      	pop	{r7, pc}

08008084 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2244      	movs	r2, #68	; 0x44
 8008090:	2100      	movs	r1, #0
 8008092:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <USB_EnableGlobalInt+0x28>)
 8008096:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	b299      	uxth	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2240      	movs	r2, #64	; 0x40
 80080a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	0018      	movs	r0, r3
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b004      	add	sp, #16
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	0000bf80 	.word	0x0000bf80

080080b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <USB_DisableGlobalInt+0x30>)
 80080ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2240      	movs	r2, #64	; 0x40
 80080c0:	5a9b      	ldrh	r3, [r3, r2]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	b292      	uxth	r2, r2
 80080c8:	43d2      	mvns	r2, r2
 80080ca:	b292      	uxth	r2, r2
 80080cc:	4013      	ands	r3, r2
 80080ce:	b299      	uxth	r1, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2240      	movs	r2, #64	; 0x40
 80080d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	0018      	movs	r0, r3
 80080da:	46bd      	mov	sp, r7
 80080dc:	b004      	add	sp, #16
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	0000bf80 	.word	0x0000bf80

080080e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080e4:	b084      	sub	sp, #16
 80080e6:	b590      	push	{r4, r7, lr}
 80080e8:	46c6      	mov	lr, r8
 80080ea:	b500      	push	{lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	2004      	movs	r0, #4
 80080f4:	2410      	movs	r4, #16
 80080f6:	46a4      	mov	ip, r4
 80080f8:	2408      	movs	r4, #8
 80080fa:	46a0      	mov	r8, r4
 80080fc:	44b8      	add	r8, r7
 80080fe:	44c4      	add	ip, r8
 8008100:	4460      	add	r0, ip
 8008102:	6001      	str	r1, [r0, #0]
 8008104:	6042      	str	r2, [r0, #4]
 8008106:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2240      	movs	r2, #64	; 0x40
 800810c:	2101      	movs	r1, #1
 800810e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	2100      	movs	r1, #0
 8008116:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2244      	movs	r2, #68	; 0x44
 800811c:	2100      	movs	r1, #0
 800811e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2250      	movs	r2, #80	; 0x50
 8008124:	2100      	movs	r1, #0
 8008126:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	b002      	add	sp, #8
 8008130:	bc80      	pop	{r7}
 8008132:	46b8      	mov	r8, r7
 8008134:	bc90      	pop	{r4, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	b004      	add	sp, #16
 800813a:	4718      	bx	r3

0800813c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b09c      	sub	sp, #112	; 0x70
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008146:	236f      	movs	r3, #111	; 0x6f
 8008148:	18fb      	adds	r3, r7, r3
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	236c      	movs	r3, #108	; 0x6c
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	49cf      	ldr	r1, [pc, #828]	; (80084a0 <USB_ActivateEndpoint+0x364>)
 8008162:	400a      	ands	r2, r1
 8008164:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	78db      	ldrb	r3, [r3, #3]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d017      	beq.n	800819e <USB_ActivateEndpoint+0x62>
 800816e:	dc28      	bgt.n	80081c2 <USB_ActivateEndpoint+0x86>
 8008170:	2b02      	cmp	r3, #2
 8008172:	d00e      	beq.n	8008192 <USB_ActivateEndpoint+0x56>
 8008174:	dc25      	bgt.n	80081c2 <USB_ActivateEndpoint+0x86>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <USB_ActivateEndpoint+0x44>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d018      	beq.n	80081b0 <USB_ActivateEndpoint+0x74>
 800817e:	e020      	b.n	80081c2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008180:	226c      	movs	r2, #108	; 0x6c
 8008182:	18bb      	adds	r3, r7, r2
 8008184:	18ba      	adds	r2, r7, r2
 8008186:	8812      	ldrh	r2, [r2, #0]
 8008188:	2180      	movs	r1, #128	; 0x80
 800818a:	0089      	lsls	r1, r1, #2
 800818c:	430a      	orrs	r2, r1
 800818e:	801a      	strh	r2, [r3, #0]
      break;
 8008190:	e01c      	b.n	80081cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008192:	226c      	movs	r2, #108	; 0x6c
 8008194:	18bb      	adds	r3, r7, r2
 8008196:	18ba      	adds	r2, r7, r2
 8008198:	8812      	ldrh	r2, [r2, #0]
 800819a:	801a      	strh	r2, [r3, #0]
      break;
 800819c:	e016      	b.n	80081cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800819e:	226c      	movs	r2, #108	; 0x6c
 80081a0:	18bb      	adds	r3, r7, r2
 80081a2:	18ba      	adds	r2, r7, r2
 80081a4:	8812      	ldrh	r2, [r2, #0]
 80081a6:	21c0      	movs	r1, #192	; 0xc0
 80081a8:	00c9      	lsls	r1, r1, #3
 80081aa:	430a      	orrs	r2, r1
 80081ac:	801a      	strh	r2, [r3, #0]
      break;
 80081ae:	e00d      	b.n	80081cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081b0:	226c      	movs	r2, #108	; 0x6c
 80081b2:	18bb      	adds	r3, r7, r2
 80081b4:	18ba      	adds	r2, r7, r2
 80081b6:	8812      	ldrh	r2, [r2, #0]
 80081b8:	2180      	movs	r1, #128	; 0x80
 80081ba:	00c9      	lsls	r1, r1, #3
 80081bc:	430a      	orrs	r2, r1
 80081be:	801a      	strh	r2, [r3, #0]
      break;
 80081c0:	e004      	b.n	80081cc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80081c2:	236f      	movs	r3, #111	; 0x6f
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
      break;
 80081ca:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	18d3      	adds	r3, r2, r3
 80081d6:	226c      	movs	r2, #108	; 0x6c
 80081d8:	18ba      	adds	r2, r7, r2
 80081da:	8812      	ldrh	r2, [r2, #0]
 80081dc:	49b1      	ldr	r1, [pc, #708]	; (80084a4 <USB_ActivateEndpoint+0x368>)
 80081de:	430a      	orrs	r2, r1
 80081e0:	b292      	uxth	r2, r2
 80081e2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	18d3      	adds	r3, r2, r3
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	b21b      	sxth	r3, r3
 80081f4:	4aac      	ldr	r2, [pc, #688]	; (80084a8 <USB_ActivateEndpoint+0x36c>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	b21a      	sxth	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b21b      	sxth	r3, r3
 8008200:	4313      	orrs	r3, r2
 8008202:	b21a      	sxth	r2, r3
 8008204:	2166      	movs	r1, #102	; 0x66
 8008206:	187b      	adds	r3, r7, r1
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	18d3      	adds	r3, r2, r3
 8008214:	187a      	adds	r2, r7, r1
 8008216:	8812      	ldrh	r2, [r2, #0]
 8008218:	49a2      	ldr	r1, [pc, #648]	; (80084a4 <USB_ActivateEndpoint+0x368>)
 800821a:	430a      	orrs	r2, r1
 800821c:	b292      	uxth	r2, r2
 800821e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	7b1b      	ldrb	r3, [r3, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d000      	beq.n	800822a <USB_ActivateEndpoint+0xee>
 8008228:	e150      	b.n	80084cc <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	785b      	ldrb	r3, [r3, #1]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d100      	bne.n	8008234 <USB_ActivateEndpoint+0xf8>
 8008232:	e07a      	b.n	800832a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2250      	movs	r2, #80	; 0x50
 800823c:	5a9b      	ldrh	r3, [r3, r2]
 800823e:	b29b      	uxth	r3, r3
 8008240:	001a      	movs	r2, r3
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	189b      	adds	r3, r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	00da      	lsls	r2, r3, #3
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	18d3      	adds	r3, r2, r3
 8008252:	2280      	movs	r2, #128	; 0x80
 8008254:	00d2      	lsls	r2, r2, #3
 8008256:	4694      	mov	ip, r2
 8008258:	4463      	add	r3, ip
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	88db      	ldrh	r3, [r3, #6]
 8008260:	085b      	lsrs	r3, r3, #1
 8008262:	b29b      	uxth	r3, r3
 8008264:	18db      	adds	r3, r3, r3
 8008266:	b29a      	uxth	r2, r3
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	18d2      	adds	r2, r2, r3
 8008276:	2112      	movs	r1, #18
 8008278:	187b      	adds	r3, r7, r1
 800827a:	8812      	ldrh	r2, [r2, #0]
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	187b      	adds	r3, r7, r1
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	2240      	movs	r2, #64	; 0x40
 8008284:	4013      	ands	r3, r2
 8008286:	d016      	beq.n	80082b6 <USB_ActivateEndpoint+0x17a>
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	18d3      	adds	r3, r2, r3
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29a      	uxth	r2, r3
 8008296:	2010      	movs	r0, #16
 8008298:	183b      	adds	r3, r7, r0
 800829a:	4983      	ldr	r1, [pc, #524]	; (80084a8 <USB_ActivateEndpoint+0x36c>)
 800829c:	400a      	ands	r2, r1
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	18d3      	adds	r3, r2, r3
 80082aa:	183a      	adds	r2, r7, r0
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	497f      	ldr	r1, [pc, #508]	; (80084ac <USB_ActivateEndpoint+0x370>)
 80082b0:	430a      	orrs	r2, r1
 80082b2:	b292      	uxth	r2, r2
 80082b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	78db      	ldrb	r3, [r3, #3]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d01d      	beq.n	80082fa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	18d3      	adds	r3, r2, r3
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	200c      	movs	r0, #12
 80082ce:	183b      	adds	r3, r7, r0
 80082d0:	4977      	ldr	r1, [pc, #476]	; (80084b0 <USB_ActivateEndpoint+0x374>)
 80082d2:	400a      	ands	r2, r1
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	183b      	adds	r3, r7, r0
 80082d8:	183a      	adds	r2, r7, r0
 80082da:	8812      	ldrh	r2, [r2, #0]
 80082dc:	2120      	movs	r1, #32
 80082de:	404a      	eors	r2, r1
 80082e0:	801a      	strh	r2, [r3, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	18d3      	adds	r3, r2, r3
 80082ec:	183a      	adds	r2, r7, r0
 80082ee:	8812      	ldrh	r2, [r2, #0]
 80082f0:	496c      	ldr	r1, [pc, #432]	; (80084a4 <USB_ActivateEndpoint+0x368>)
 80082f2:	430a      	orrs	r2, r1
 80082f4:	b292      	uxth	r2, r2
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e27a      	b.n	80087f0 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	18d3      	adds	r3, r2, r3
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	200e      	movs	r0, #14
 800830a:	183b      	adds	r3, r7, r0
 800830c:	4968      	ldr	r1, [pc, #416]	; (80084b0 <USB_ActivateEndpoint+0x374>)
 800830e:	400a      	ands	r2, r1
 8008310:	801a      	strh	r2, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	18d3      	adds	r3, r2, r3
 800831c:	183a      	adds	r2, r7, r0
 800831e:	8812      	ldrh	r2, [r2, #0]
 8008320:	4960      	ldr	r1, [pc, #384]	; (80084a4 <USB_ActivateEndpoint+0x368>)
 8008322:	430a      	orrs	r2, r1
 8008324:	b292      	uxth	r2, r2
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e262      	b.n	80087f0 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	633b      	str	r3, [r7, #48]	; 0x30
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2250      	movs	r2, #80	; 0x50
 8008332:	5a9b      	ldrh	r3, [r3, r2]
 8008334:	b29b      	uxth	r3, r3
 8008336:	001a      	movs	r2, r3
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	189b      	adds	r3, r3, r2
 800833c:	633b      	str	r3, [r7, #48]	; 0x30
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	00da      	lsls	r2, r3, #3
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	4a5a      	ldr	r2, [pc, #360]	; (80084b4 <USB_ActivateEndpoint+0x378>)
 800834a:	4694      	mov	ip, r2
 800834c:	4463      	add	r3, ip
 800834e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	88db      	ldrh	r3, [r3, #6]
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	b29b      	uxth	r3, r3
 8008358:	18db      	adds	r3, r3, r3
 800835a:	b29a      	uxth	r2, r3
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2250      	movs	r2, #80	; 0x50
 8008368:	5a9b      	ldrh	r3, [r3, r2]
 800836a:	b29b      	uxth	r3, r3
 800836c:	001a      	movs	r2, r3
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	189b      	adds	r3, r3, r2
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	00da      	lsls	r2, r3, #3
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	18d3      	adds	r3, r2, r3
 800837e:	4a4e      	ldr	r2, [pc, #312]	; (80084b8 <USB_ActivateEndpoint+0x37c>)
 8008380:	4694      	mov	ip, r2
 8008382:	4463      	add	r3, ip
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d110      	bne.n	80083b0 <USB_ActivateEndpoint+0x274>
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	4a49      	ldr	r2, [pc, #292]	; (80084bc <USB_ActivateEndpoint+0x380>)
 8008396:	4013      	ands	r3, r2
 8008398:	b29a      	uxth	r2, r3
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4a46      	ldr	r2, [pc, #280]	; (80084c0 <USB_ActivateEndpoint+0x384>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e02b      	b.n	8008408 <USB_ActivateEndpoint+0x2cc>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b3e      	cmp	r3, #62	; 0x3e
 80083b6:	d812      	bhi.n	80083de <USB_ActivateEndpoint+0x2a2>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2201      	movs	r2, #1
 80083c6:	4013      	ands	r3, r2
 80083c8:	d002      	beq.n	80083d0 <USB_ActivateEndpoint+0x294>
 80083ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083cc:	3301      	adds	r3, #1
 80083ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	029b      	lsls	r3, r3, #10
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	e014      	b.n	8008408 <USB_ActivateEndpoint+0x2cc>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	221f      	movs	r2, #31
 80083ec:	4013      	ands	r3, r2
 80083ee:	d102      	bne.n	80083f6 <USB_ActivateEndpoint+0x2ba>
 80083f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f2:	3b01      	subs	r3, #1
 80083f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	029b      	lsls	r3, r3, #10
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4a30      	ldr	r2, [pc, #192]	; (80084c0 <USB_ActivateEndpoint+0x384>)
 8008400:	4313      	orrs	r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	18d2      	adds	r2, r2, r3
 8008412:	2122      	movs	r1, #34	; 0x22
 8008414:	187b      	adds	r3, r7, r1
 8008416:	8812      	ldrh	r2, [r2, #0]
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	187b      	adds	r3, r7, r1
 800841c:	881a      	ldrh	r2, [r3, #0]
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	01db      	lsls	r3, r3, #7
 8008422:	4013      	ands	r3, r2
 8008424:	d016      	beq.n	8008454 <USB_ActivateEndpoint+0x318>
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	18d3      	adds	r3, r2, r3
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b29a      	uxth	r2, r3
 8008434:	2020      	movs	r0, #32
 8008436:	183b      	adds	r3, r7, r0
 8008438:	491b      	ldr	r1, [pc, #108]	; (80084a8 <USB_ActivateEndpoint+0x36c>)
 800843a:	400a      	ands	r2, r1
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	18d3      	adds	r3, r2, r3
 8008448:	183a      	adds	r2, r7, r0
 800844a:	8812      	ldrh	r2, [r2, #0]
 800844c:	491d      	ldr	r1, [pc, #116]	; (80084c4 <USB_ActivateEndpoint+0x388>)
 800844e:	430a      	orrs	r2, r1
 8008450:	b292      	uxth	r2, r2
 8008452:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	18d3      	adds	r3, r2, r3
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29a      	uxth	r2, r3
 8008462:	201e      	movs	r0, #30
 8008464:	183b      	adds	r3, r7, r0
 8008466:	4918      	ldr	r1, [pc, #96]	; (80084c8 <USB_ActivateEndpoint+0x38c>)
 8008468:	400a      	ands	r2, r1
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	183b      	adds	r3, r7, r0
 800846e:	183a      	adds	r2, r7, r0
 8008470:	8812      	ldrh	r2, [r2, #0]
 8008472:	2180      	movs	r1, #128	; 0x80
 8008474:	0149      	lsls	r1, r1, #5
 8008476:	404a      	eors	r2, r1
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	183b      	adds	r3, r7, r0
 800847c:	183a      	adds	r2, r7, r0
 800847e:	8812      	ldrh	r2, [r2, #0]
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	0189      	lsls	r1, r1, #6
 8008484:	404a      	eors	r2, r1
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	18d3      	adds	r3, r2, r3
 8008492:	183a      	adds	r2, r7, r0
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	4903      	ldr	r1, [pc, #12]	; (80084a4 <USB_ActivateEndpoint+0x368>)
 8008498:	430a      	orrs	r2, r1
 800849a:	b292      	uxth	r2, r2
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	e1a7      	b.n	80087f0 <USB_ActivateEndpoint+0x6b4>
 80084a0:	ffff898f 	.word	0xffff898f
 80084a4:	ffff8080 	.word	0xffff8080
 80084a8:	ffff8f8f 	.word	0xffff8f8f
 80084ac:	ffff80c0 	.word	0xffff80c0
 80084b0:	ffff8fbf 	.word	0xffff8fbf
 80084b4:	00000404 	.word	0x00000404
 80084b8:	00000406 	.word	0x00000406
 80084bc:	ffff83ff 	.word	0xffff83ff
 80084c0:	ffff8000 	.word	0xffff8000
 80084c4:	ffffc080 	.word	0xffffc080
 80084c8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d117      	bne.n	8008504 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	18d3      	adds	r3, r2, r3
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	2062      	movs	r0, #98	; 0x62
 80084e4:	183b      	adds	r3, r7, r0
 80084e6:	49c6      	ldr	r1, [pc, #792]	; (8008800 <USB_ActivateEndpoint+0x6c4>)
 80084e8:	400a      	ands	r2, r1
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	18d3      	adds	r3, r2, r3
 80084f6:	183a      	adds	r2, r7, r0
 80084f8:	8812      	ldrh	r2, [r2, #0]
 80084fa:	49c2      	ldr	r1, [pc, #776]	; (8008804 <USB_ActivateEndpoint+0x6c8>)
 80084fc:	430a      	orrs	r2, r1
 80084fe:	b292      	uxth	r2, r2
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	e016      	b.n	8008532 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	18d3      	adds	r3, r2, r3
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29a      	uxth	r2, r3
 8008512:	2064      	movs	r0, #100	; 0x64
 8008514:	183b      	adds	r3, r7, r0
 8008516:	49bc      	ldr	r1, [pc, #752]	; (8008808 <USB_ActivateEndpoint+0x6cc>)
 8008518:	400a      	ands	r2, r1
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	18d3      	adds	r3, r2, r3
 8008526:	183a      	adds	r2, r7, r0
 8008528:	8812      	ldrh	r2, [r2, #0]
 800852a:	49b8      	ldr	r1, [pc, #736]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 800852c:	430a      	orrs	r2, r1
 800852e:	b292      	uxth	r2, r2
 8008530:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2250      	movs	r2, #80	; 0x50
 800853a:	5a9b      	ldrh	r3, [r3, r2]
 800853c:	b29b      	uxth	r3, r3
 800853e:	001a      	movs	r2, r3
 8008540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008542:	189b      	adds	r3, r3, r2
 8008544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	00da      	lsls	r2, r3, #3
 800854c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854e:	18d3      	adds	r3, r2, r3
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	4694      	mov	ip, r2
 8008556:	4463      	add	r3, ip
 8008558:	65bb      	str	r3, [r7, #88]	; 0x58
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	891b      	ldrh	r3, [r3, #8]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	b29b      	uxth	r3, r3
 8008562:	18db      	adds	r3, r3, r3
 8008564:	b29a      	uxth	r2, r3
 8008566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	657b      	str	r3, [r7, #84]	; 0x54
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2250      	movs	r2, #80	; 0x50
 8008572:	5a9b      	ldrh	r3, [r3, r2]
 8008574:	b29b      	uxth	r3, r3
 8008576:	001a      	movs	r2, r3
 8008578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800857a:	189b      	adds	r3, r3, r2
 800857c:	657b      	str	r3, [r7, #84]	; 0x54
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	00da      	lsls	r2, r3, #3
 8008584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008586:	18d3      	adds	r3, r2, r3
 8008588:	4aa1      	ldr	r2, [pc, #644]	; (8008810 <USB_ActivateEndpoint+0x6d4>)
 800858a:	4694      	mov	ip, r2
 800858c:	4463      	add	r3, ip
 800858e:	653b      	str	r3, [r7, #80]	; 0x50
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	895b      	ldrh	r3, [r3, #10]
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	b29b      	uxth	r3, r3
 8008598:	18db      	adds	r3, r3, r3
 800859a:	b29a      	uxth	r2, r3
 800859c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d000      	beq.n	80085aa <USB_ActivateEndpoint+0x46e>
 80085a8:	e087      	b.n	80086ba <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	18d2      	adds	r2, r2, r3
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	8812      	ldrh	r2, [r2, #0]
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	881a      	ldrh	r2, [r3, #0]
 80085c0:	2380      	movs	r3, #128	; 0x80
 80085c2:	01db      	lsls	r3, r3, #7
 80085c4:	4013      	ands	r3, r2
 80085c6:	d016      	beq.n	80085f6 <USB_ActivateEndpoint+0x4ba>
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	18d3      	adds	r3, r2, r3
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	203e      	movs	r0, #62	; 0x3e
 80085d8:	183b      	adds	r3, r7, r0
 80085da:	4989      	ldr	r1, [pc, #548]	; (8008800 <USB_ActivateEndpoint+0x6c4>)
 80085dc:	400a      	ands	r2, r1
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	18d3      	adds	r3, r2, r3
 80085ea:	183a      	adds	r2, r7, r0
 80085ec:	8812      	ldrh	r2, [r2, #0]
 80085ee:	4989      	ldr	r1, [pc, #548]	; (8008814 <USB_ActivateEndpoint+0x6d8>)
 80085f0:	430a      	orrs	r2, r1
 80085f2:	b292      	uxth	r2, r2
 80085f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	18d2      	adds	r2, r2, r3
 8008600:	213c      	movs	r1, #60	; 0x3c
 8008602:	187b      	adds	r3, r7, r1
 8008604:	8812      	ldrh	r2, [r2, #0]
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	187b      	adds	r3, r7, r1
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	2240      	movs	r2, #64	; 0x40
 800860e:	4013      	ands	r3, r2
 8008610:	d016      	beq.n	8008640 <USB_ActivateEndpoint+0x504>
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	18d3      	adds	r3, r2, r3
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29a      	uxth	r2, r3
 8008620:	203a      	movs	r0, #58	; 0x3a
 8008622:	183b      	adds	r3, r7, r0
 8008624:	4976      	ldr	r1, [pc, #472]	; (8008800 <USB_ActivateEndpoint+0x6c4>)
 8008626:	400a      	ands	r2, r1
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	18d3      	adds	r3, r2, r3
 8008634:	183a      	adds	r2, r7, r0
 8008636:	8812      	ldrh	r2, [r2, #0]
 8008638:	4977      	ldr	r1, [pc, #476]	; (8008818 <USB_ActivateEndpoint+0x6dc>)
 800863a:	430a      	orrs	r2, r1
 800863c:	b292      	uxth	r2, r2
 800863e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	18d3      	adds	r3, r2, r3
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29a      	uxth	r2, r3
 800864e:	2038      	movs	r0, #56	; 0x38
 8008650:	183b      	adds	r3, r7, r0
 8008652:	4972      	ldr	r1, [pc, #456]	; (800881c <USB_ActivateEndpoint+0x6e0>)
 8008654:	400a      	ands	r2, r1
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	183b      	adds	r3, r7, r0
 800865a:	183a      	adds	r2, r7, r0
 800865c:	8812      	ldrh	r2, [r2, #0]
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	0149      	lsls	r1, r1, #5
 8008662:	404a      	eors	r2, r1
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	183b      	adds	r3, r7, r0
 8008668:	183a      	adds	r2, r7, r0
 800866a:	8812      	ldrh	r2, [r2, #0]
 800866c:	2180      	movs	r1, #128	; 0x80
 800866e:	0189      	lsls	r1, r1, #6
 8008670:	404a      	eors	r2, r1
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	183a      	adds	r2, r7, r0
 8008680:	8812      	ldrh	r2, [r2, #0]
 8008682:	4962      	ldr	r1, [pc, #392]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 8008684:	430a      	orrs	r2, r1
 8008686:	b292      	uxth	r2, r2
 8008688:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29a      	uxth	r2, r3
 8008698:	2036      	movs	r0, #54	; 0x36
 800869a:	183b      	adds	r3, r7, r0
 800869c:	4960      	ldr	r1, [pc, #384]	; (8008820 <USB_ActivateEndpoint+0x6e4>)
 800869e:	400a      	ands	r2, r1
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	18d3      	adds	r3, r2, r3
 80086ac:	183a      	adds	r2, r7, r0
 80086ae:	8812      	ldrh	r2, [r2, #0]
 80086b0:	4956      	ldr	r1, [pc, #344]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 80086b2:	430a      	orrs	r2, r1
 80086b4:	b292      	uxth	r2, r2
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e09a      	b.n	80087f0 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	18d2      	adds	r2, r2, r3
 80086c4:	214e      	movs	r1, #78	; 0x4e
 80086c6:	187b      	adds	r3, r7, r1
 80086c8:	8812      	ldrh	r2, [r2, #0]
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	187b      	adds	r3, r7, r1
 80086ce:	881a      	ldrh	r2, [r3, #0]
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	01db      	lsls	r3, r3, #7
 80086d4:	4013      	ands	r3, r2
 80086d6:	d016      	beq.n	8008706 <USB_ActivateEndpoint+0x5ca>
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	18d3      	adds	r3, r2, r3
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	204c      	movs	r0, #76	; 0x4c
 80086e8:	183b      	adds	r3, r7, r0
 80086ea:	4945      	ldr	r1, [pc, #276]	; (8008800 <USB_ActivateEndpoint+0x6c4>)
 80086ec:	400a      	ands	r2, r1
 80086ee:	801a      	strh	r2, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	18d3      	adds	r3, r2, r3
 80086fa:	183a      	adds	r2, r7, r0
 80086fc:	8812      	ldrh	r2, [r2, #0]
 80086fe:	4945      	ldr	r1, [pc, #276]	; (8008814 <USB_ActivateEndpoint+0x6d8>)
 8008700:	430a      	orrs	r2, r1
 8008702:	b292      	uxth	r2, r2
 8008704:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	18d2      	adds	r2, r2, r3
 8008710:	214a      	movs	r1, #74	; 0x4a
 8008712:	187b      	adds	r3, r7, r1
 8008714:	8812      	ldrh	r2, [r2, #0]
 8008716:	801a      	strh	r2, [r3, #0]
 8008718:	187b      	adds	r3, r7, r1
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	2240      	movs	r2, #64	; 0x40
 800871e:	4013      	ands	r3, r2
 8008720:	d016      	beq.n	8008750 <USB_ActivateEndpoint+0x614>
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	18d3      	adds	r3, r2, r3
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29a      	uxth	r2, r3
 8008730:	2048      	movs	r0, #72	; 0x48
 8008732:	183b      	adds	r3, r7, r0
 8008734:	4932      	ldr	r1, [pc, #200]	; (8008800 <USB_ActivateEndpoint+0x6c4>)
 8008736:	400a      	ands	r2, r1
 8008738:	801a      	strh	r2, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	18d3      	adds	r3, r2, r3
 8008744:	183a      	adds	r2, r7, r0
 8008746:	8812      	ldrh	r2, [r2, #0]
 8008748:	4933      	ldr	r1, [pc, #204]	; (8008818 <USB_ActivateEndpoint+0x6dc>)
 800874a:	430a      	orrs	r2, r1
 800874c:	b292      	uxth	r2, r2
 800874e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d01d      	beq.n	8008794 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	18d3      	adds	r3, r2, r3
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29a      	uxth	r2, r3
 8008766:	2044      	movs	r0, #68	; 0x44
 8008768:	183b      	adds	r3, r7, r0
 800876a:	492d      	ldr	r1, [pc, #180]	; (8008820 <USB_ActivateEndpoint+0x6e4>)
 800876c:	400a      	ands	r2, r1
 800876e:	801a      	strh	r2, [r3, #0]
 8008770:	183b      	adds	r3, r7, r0
 8008772:	183a      	adds	r2, r7, r0
 8008774:	8812      	ldrh	r2, [r2, #0]
 8008776:	2120      	movs	r1, #32
 8008778:	404a      	eors	r2, r1
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	18d3      	adds	r3, r2, r3
 8008786:	183a      	adds	r2, r7, r0
 8008788:	8812      	ldrh	r2, [r2, #0]
 800878a:	4920      	ldr	r1, [pc, #128]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 800878c:	430a      	orrs	r2, r1
 800878e:	b292      	uxth	r2, r2
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	e016      	b.n	80087c2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	18d3      	adds	r3, r2, r3
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	2046      	movs	r0, #70	; 0x46
 80087a4:	183b      	adds	r3, r7, r0
 80087a6:	491e      	ldr	r1, [pc, #120]	; (8008820 <USB_ActivateEndpoint+0x6e4>)
 80087a8:	400a      	ands	r2, r1
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	18d3      	adds	r3, r2, r3
 80087b6:	183a      	adds	r2, r7, r0
 80087b8:	8812      	ldrh	r2, [r2, #0]
 80087ba:	4914      	ldr	r1, [pc, #80]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 80087bc:	430a      	orrs	r2, r1
 80087be:	b292      	uxth	r2, r2
 80087c0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	18d3      	adds	r3, r2, r3
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	2042      	movs	r0, #66	; 0x42
 80087d2:	183b      	adds	r3, r7, r0
 80087d4:	4911      	ldr	r1, [pc, #68]	; (800881c <USB_ActivateEndpoint+0x6e0>)
 80087d6:	400a      	ands	r2, r1
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	18d3      	adds	r3, r2, r3
 80087e4:	183a      	adds	r2, r7, r0
 80087e6:	8812      	ldrh	r2, [r2, #0]
 80087e8:	4908      	ldr	r1, [pc, #32]	; (800880c <USB_ActivateEndpoint+0x6d0>)
 80087ea:	430a      	orrs	r2, r1
 80087ec:	b292      	uxth	r2, r2
 80087ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80087f0:	236f      	movs	r3, #111	; 0x6f
 80087f2:	18fb      	adds	r3, r7, r3
 80087f4:	781b      	ldrb	r3, [r3, #0]
}
 80087f6:	0018      	movs	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	b01c      	add	sp, #112	; 0x70
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	ffff8f8f 	.word	0xffff8f8f
 8008804:	ffff8180 	.word	0xffff8180
 8008808:	ffff8e8f 	.word	0xffff8e8f
 800880c:	ffff8080 	.word	0xffff8080
 8008810:	00000404 	.word	0x00000404
 8008814:	ffffc080 	.word	0xffffc080
 8008818:	ffff80c0 	.word	0xffff80c0
 800881c:	ffffbf8f 	.word	0xffffbf8f
 8008820:	ffff8fbf 	.word	0xffff8fbf

08008824 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	; 0x30
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	7b1b      	ldrb	r3, [r3, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d000      	beq.n	8008838 <USB_DeactivateEndpoint+0x14>
 8008836:	e07e      	b.n	8008936 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d03c      	beq.n	80088ba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	18d2      	adds	r2, r2, r3
 800884a:	210c      	movs	r1, #12
 800884c:	187b      	adds	r3, r7, r1
 800884e:	8812      	ldrh	r2, [r2, #0]
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	187b      	adds	r3, r7, r1
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	4013      	ands	r3, r2
 800885a:	d016      	beq.n	800888a <USB_DeactivateEndpoint+0x66>
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	18d3      	adds	r3, r2, r3
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29a      	uxth	r2, r3
 800886a:	200a      	movs	r0, #10
 800886c:	183b      	adds	r3, r7, r0
 800886e:	49c7      	ldr	r1, [pc, #796]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 8008870:	400a      	ands	r2, r1
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	183a      	adds	r2, r7, r0
 8008880:	8812      	ldrh	r2, [r2, #0]
 8008882:	49c3      	ldr	r1, [pc, #780]	; (8008b90 <USB_DeactivateEndpoint+0x36c>)
 8008884:	430a      	orrs	r2, r1
 8008886:	b292      	uxth	r2, r2
 8008888:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	18d3      	adds	r3, r2, r3
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	2008      	movs	r0, #8
 800889a:	183b      	adds	r3, r7, r0
 800889c:	49bd      	ldr	r1, [pc, #756]	; (8008b94 <USB_DeactivateEndpoint+0x370>)
 800889e:	400a      	ands	r2, r1
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	18d3      	adds	r3, r2, r3
 80088ac:	183a      	adds	r2, r7, r0
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	49b9      	ldr	r1, [pc, #740]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 80088b2:	430a      	orrs	r2, r1
 80088b4:	b292      	uxth	r2, r2
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e163      	b.n	8008b82 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	18d2      	adds	r2, r2, r3
 80088c4:	2112      	movs	r1, #18
 80088c6:	187b      	adds	r3, r7, r1
 80088c8:	8812      	ldrh	r2, [r2, #0]
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	187b      	adds	r3, r7, r1
 80088ce:	881a      	ldrh	r2, [r3, #0]
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	01db      	lsls	r3, r3, #7
 80088d4:	4013      	ands	r3, r2
 80088d6:	d016      	beq.n	8008906 <USB_DeactivateEndpoint+0xe2>
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	18d3      	adds	r3, r2, r3
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	2010      	movs	r0, #16
 80088e8:	183b      	adds	r3, r7, r0
 80088ea:	49a8      	ldr	r1, [pc, #672]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 80088ec:	400a      	ands	r2, r1
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	18d3      	adds	r3, r2, r3
 80088fa:	183a      	adds	r2, r7, r0
 80088fc:	8812      	ldrh	r2, [r2, #0]
 80088fe:	49a7      	ldr	r1, [pc, #668]	; (8008b9c <USB_DeactivateEndpoint+0x378>)
 8008900:	430a      	orrs	r2, r1
 8008902:	b292      	uxth	r2, r2
 8008904:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	18d3      	adds	r3, r2, r3
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29a      	uxth	r2, r3
 8008914:	200e      	movs	r0, #14
 8008916:	183b      	adds	r3, r7, r0
 8008918:	49a1      	ldr	r1, [pc, #644]	; (8008ba0 <USB_DeactivateEndpoint+0x37c>)
 800891a:	400a      	ands	r2, r1
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	18d3      	adds	r3, r2, r3
 8008928:	183a      	adds	r2, r7, r0
 800892a:	8812      	ldrh	r2, [r2, #0]
 800892c:	499a      	ldr	r1, [pc, #616]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 800892e:	430a      	orrs	r2, r1
 8008930:	b292      	uxth	r2, r2
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e125      	b.n	8008b82 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d000      	beq.n	8008940 <USB_DeactivateEndpoint+0x11c>
 800893e:	e090      	b.n	8008a62 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	18d2      	adds	r2, r2, r3
 800894a:	2120      	movs	r1, #32
 800894c:	187b      	adds	r3, r7, r1
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	187b      	adds	r3, r7, r1
 8008954:	881a      	ldrh	r2, [r3, #0]
 8008956:	2380      	movs	r3, #128	; 0x80
 8008958:	01db      	lsls	r3, r3, #7
 800895a:	4013      	ands	r3, r2
 800895c:	d016      	beq.n	800898c <USB_DeactivateEndpoint+0x168>
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	18d3      	adds	r3, r2, r3
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	201e      	movs	r0, #30
 800896e:	183b      	adds	r3, r7, r0
 8008970:	4986      	ldr	r1, [pc, #536]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 8008972:	400a      	ands	r2, r1
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	18d3      	adds	r3, r2, r3
 8008980:	183a      	adds	r2, r7, r0
 8008982:	8812      	ldrh	r2, [r2, #0]
 8008984:	4985      	ldr	r1, [pc, #532]	; (8008b9c <USB_DeactivateEndpoint+0x378>)
 8008986:	430a      	orrs	r2, r1
 8008988:	b292      	uxth	r2, r2
 800898a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	18d2      	adds	r2, r2, r3
 8008996:	211c      	movs	r1, #28
 8008998:	187b      	adds	r3, r7, r1
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	187b      	adds	r3, r7, r1
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	2240      	movs	r2, #64	; 0x40
 80089a4:	4013      	ands	r3, r2
 80089a6:	d016      	beq.n	80089d6 <USB_DeactivateEndpoint+0x1b2>
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	18d3      	adds	r3, r2, r3
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	201a      	movs	r0, #26
 80089b8:	183b      	adds	r3, r7, r0
 80089ba:	4974      	ldr	r1, [pc, #464]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 80089bc:	400a      	ands	r2, r1
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	18d3      	adds	r3, r2, r3
 80089ca:	183a      	adds	r2, r7, r0
 80089cc:	8812      	ldrh	r2, [r2, #0]
 80089ce:	4970      	ldr	r1, [pc, #448]	; (8008b90 <USB_DeactivateEndpoint+0x36c>)
 80089d0:	430a      	orrs	r2, r1
 80089d2:	b292      	uxth	r2, r2
 80089d4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	18d3      	adds	r3, r2, r3
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	2018      	movs	r0, #24
 80089e6:	183b      	adds	r3, r7, r0
 80089e8:	4968      	ldr	r1, [pc, #416]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 80089ea:	400a      	ands	r2, r1
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	18d3      	adds	r3, r2, r3
 80089f8:	183a      	adds	r2, r7, r0
 80089fa:	8812      	ldrh	r2, [r2, #0]
 80089fc:	4964      	ldr	r1, [pc, #400]	; (8008b90 <USB_DeactivateEndpoint+0x36c>)
 80089fe:	430a      	orrs	r2, r1
 8008a00:	b292      	uxth	r2, r2
 8008a02:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	18d3      	adds	r3, r2, r3
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	2016      	movs	r0, #22
 8008a14:	183b      	adds	r3, r7, r0
 8008a16:	4962      	ldr	r1, [pc, #392]	; (8008ba0 <USB_DeactivateEndpoint+0x37c>)
 8008a18:	400a      	ands	r2, r1
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	18d3      	adds	r3, r2, r3
 8008a26:	183a      	adds	r2, r7, r0
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	495b      	ldr	r1, [pc, #364]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	18d3      	adds	r3, r2, r3
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	2014      	movs	r0, #20
 8008a42:	183b      	adds	r3, r7, r0
 8008a44:	4953      	ldr	r1, [pc, #332]	; (8008b94 <USB_DeactivateEndpoint+0x370>)
 8008a46:	400a      	ands	r2, r1
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	18d3      	adds	r3, r2, r3
 8008a54:	183a      	adds	r2, r7, r0
 8008a56:	8812      	ldrh	r2, [r2, #0]
 8008a58:	494f      	ldr	r1, [pc, #316]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	e08f      	b.n	8008b82 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	18d2      	adds	r2, r2, r3
 8008a6c:	212e      	movs	r1, #46	; 0x2e
 8008a6e:	187b      	adds	r3, r7, r1
 8008a70:	8812      	ldrh	r2, [r2, #0]
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	187b      	adds	r3, r7, r1
 8008a76:	881a      	ldrh	r2, [r3, #0]
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	01db      	lsls	r3, r3, #7
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d016      	beq.n	8008aae <USB_DeactivateEndpoint+0x28a>
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	202c      	movs	r0, #44	; 0x2c
 8008a90:	183b      	adds	r3, r7, r0
 8008a92:	493e      	ldr	r1, [pc, #248]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 8008a94:	400a      	ands	r2, r1
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	18d3      	adds	r3, r2, r3
 8008aa2:	183a      	adds	r2, r7, r0
 8008aa4:	8812      	ldrh	r2, [r2, #0]
 8008aa6:	493d      	ldr	r1, [pc, #244]	; (8008b9c <USB_DeactivateEndpoint+0x378>)
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	b292      	uxth	r2, r2
 8008aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	18d2      	adds	r2, r2, r3
 8008ab8:	212a      	movs	r1, #42	; 0x2a
 8008aba:	187b      	adds	r3, r7, r1
 8008abc:	8812      	ldrh	r2, [r2, #0]
 8008abe:	801a      	strh	r2, [r3, #0]
 8008ac0:	187b      	adds	r3, r7, r1
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d016      	beq.n	8008af8 <USB_DeactivateEndpoint+0x2d4>
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	18d3      	adds	r3, r2, r3
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	2028      	movs	r0, #40	; 0x28
 8008ada:	183b      	adds	r3, r7, r0
 8008adc:	492b      	ldr	r1, [pc, #172]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 8008ade:	400a      	ands	r2, r1
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	183a      	adds	r2, r7, r0
 8008aee:	8812      	ldrh	r2, [r2, #0]
 8008af0:	4927      	ldr	r1, [pc, #156]	; (8008b90 <USB_DeactivateEndpoint+0x36c>)
 8008af2:	430a      	orrs	r2, r1
 8008af4:	b292      	uxth	r2, r2
 8008af6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	18d3      	adds	r3, r2, r3
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	2026      	movs	r0, #38	; 0x26
 8008b08:	183b      	adds	r3, r7, r0
 8008b0a:	4920      	ldr	r1, [pc, #128]	; (8008b8c <USB_DeactivateEndpoint+0x368>)
 8008b0c:	400a      	ands	r2, r1
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	18d3      	adds	r3, r2, r3
 8008b1a:	183a      	adds	r2, r7, r0
 8008b1c:	8812      	ldrh	r2, [r2, #0]
 8008b1e:	491f      	ldr	r1, [pc, #124]	; (8008b9c <USB_DeactivateEndpoint+0x378>)
 8008b20:	430a      	orrs	r2, r1
 8008b22:	b292      	uxth	r2, r2
 8008b24:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	18d3      	adds	r3, r2, r3
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	2024      	movs	r0, #36	; 0x24
 8008b36:	183b      	adds	r3, r7, r0
 8008b38:	4916      	ldr	r1, [pc, #88]	; (8008b94 <USB_DeactivateEndpoint+0x370>)
 8008b3a:	400a      	ands	r2, r1
 8008b3c:	801a      	strh	r2, [r3, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	18d3      	adds	r3, r2, r3
 8008b48:	183a      	adds	r2, r7, r0
 8008b4a:	8812      	ldrh	r2, [r2, #0]
 8008b4c:	4912      	ldr	r1, [pc, #72]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	b292      	uxth	r2, r2
 8008b52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	18d3      	adds	r3, r2, r3
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	2022      	movs	r0, #34	; 0x22
 8008b64:	183b      	adds	r3, r7, r0
 8008b66:	490e      	ldr	r1, [pc, #56]	; (8008ba0 <USB_DeactivateEndpoint+0x37c>)
 8008b68:	400a      	ands	r2, r1
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	18d3      	adds	r3, r2, r3
 8008b76:	183a      	adds	r2, r7, r0
 8008b78:	8812      	ldrh	r2, [r2, #0]
 8008b7a:	4907      	ldr	r1, [pc, #28]	; (8008b98 <USB_DeactivateEndpoint+0x374>)
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	b292      	uxth	r2, r2
 8008b80:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b00c      	add	sp, #48	; 0x30
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	ffff8f8f 	.word	0xffff8f8f
 8008b90:	ffff80c0 	.word	0xffff80c0
 8008b94:	ffff8fbf 	.word	0xffff8fbf
 8008b98:	ffff8080 	.word	0xffff8080
 8008b9c:	ffffc080 	.word	0xffffc080
 8008ba0:	ffffbf8f 	.word	0xffffbf8f

08008ba4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b0c3      	sub	sp, #268	; 0x10c
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <USB_EPStartXfer+0x16>
 8008bb6:	f000 fcef 	bl	8009598 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d905      	bls.n	8008bd2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	1d7a      	adds	r2, r7, #5
 8008bcc:	32ff      	adds	r2, #255	; 0xff
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	e004      	b.n	8008bdc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	1d7a      	adds	r2, r7, #5
 8008bd8:	32ff      	adds	r2, #255	; 0xff
 8008bda:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	7b1b      	ldrb	r3, [r3, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d125      	bne.n	8008c30 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	6959      	ldr	r1, [r3, #20]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	88da      	ldrh	r2, [r3, #6]
 8008bec:	1d7b      	adds	r3, r7, #5
 8008bee:	33ff      	adds	r3, #255	; 0xff
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 f9c9 	bl	8009f8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2250      	movs	r2, #80	; 0x50
 8008c02:	5a9b      	ldrh	r3, [r3, r2]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	001a      	movs	r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	189b      	adds	r3, r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	00da      	lsls	r2, r3, #3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	18d3      	adds	r3, r2, r3
 8008c18:	4acc      	ldr	r2, [pc, #816]	; (8008f4c <USB_EPStartXfer+0x3a8>)
 8008c1a:	4694      	mov	ip, r2
 8008c1c:	4463      	add	r3, ip
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	1d7b      	adds	r3, r7, #5
 8008c22:	33ff      	adds	r3, #255	; 0xff
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	f000 fc8f 	bl	800954e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	78db      	ldrb	r3, [r3, #3]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d000      	beq.n	8008c3a <USB_EPStartXfer+0x96>
 8008c38:	e33a      	b.n	80092b0 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d800      	bhi.n	8008c48 <USB_EPStartXfer+0xa4>
 8008c46:	e2df      	b.n	8009208 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	18d3      	adds	r3, r2, r3
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	2056      	movs	r0, #86	; 0x56
 8008c58:	183b      	adds	r3, r7, r0
 8008c5a:	49bd      	ldr	r1, [pc, #756]	; (8008f50 <USB_EPStartXfer+0x3ac>)
 8008c5c:	400a      	ands	r2, r1
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	18d3      	adds	r3, r2, r3
 8008c6a:	183a      	adds	r2, r7, r0
 8008c6c:	8812      	ldrh	r2, [r2, #0]
 8008c6e:	49b9      	ldr	r1, [pc, #740]	; (8008f54 <USB_EPStartXfer+0x3b0>)
 8008c70:	430a      	orrs	r2, r1
 8008c72:	b292      	uxth	r2, r2
 8008c74:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6a1a      	ldr	r2, [r3, #32]
 8008c7a:	1d7b      	adds	r3, r7, #5
 8008c7c:	33ff      	adds	r3, #255	; 0xff
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	1ad2      	subs	r2, r2, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	18d3      	adds	r3, r2, r3
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	001a      	movs	r2, r3
 8008c96:	2340      	movs	r3, #64	; 0x40
 8008c98:	4013      	ands	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <USB_EPStartXfer+0xfa>
 8008c9c:	e162      	b.n	8008f64 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	785b      	ldrb	r3, [r3, #1]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d16a      	bne.n	8008d80 <USB_EPStartXfer+0x1dc>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2250      	movs	r2, #80	; 0x50
 8008cb2:	5a9b      	ldrh	r3, [r3, r2]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	001a      	movs	r2, r3
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	189b      	adds	r3, r3, r2
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	00da      	lsls	r2, r3, #3
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	18d3      	adds	r3, r2, r3
 8008cc8:	4aa3      	ldr	r2, [pc, #652]	; (8008f58 <USB_EPStartXfer+0x3b4>)
 8008cca:	4694      	mov	ip, r2
 8008ccc:	4463      	add	r3, ip
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd0:	1d7b      	adds	r3, r7, #5
 8008cd2:	33ff      	adds	r3, #255	; 0xff
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d110      	bne.n	8008cfc <USB_EPStartXfer+0x158>
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	4a9e      	ldr	r2, [pc, #632]	; (8008f5c <USB_EPStartXfer+0x3b8>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	4a9b      	ldr	r2, [pc, #620]	; (8008f60 <USB_EPStartXfer+0x3bc>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	801a      	strh	r2, [r3, #0]
 8008cfa:	e05c      	b.n	8008db6 <USB_EPStartXfer+0x212>
 8008cfc:	1d7b      	adds	r3, r7, #5
 8008cfe:	33ff      	adds	r3, #255	; 0xff
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b3e      	cmp	r3, #62	; 0x3e
 8008d04:	d81c      	bhi.n	8008d40 <USB_EPStartXfer+0x19c>
 8008d06:	1d7b      	adds	r3, r7, #5
 8008d08:	33ff      	adds	r3, #255	; 0xff
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	1c7a      	adds	r2, r7, #1
 8008d10:	32ff      	adds	r2, #255	; 0xff
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	1d7b      	adds	r3, r7, #5
 8008d16:	33ff      	adds	r3, #255	; 0xff
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d006      	beq.n	8008d2e <USB_EPStartXfer+0x18a>
 8008d20:	1c7b      	adds	r3, r7, #1
 8008d22:	33ff      	adds	r3, #255	; 0xff
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3301      	adds	r3, #1
 8008d28:	1c7a      	adds	r2, r7, #1
 8008d2a:	32ff      	adds	r2, #255	; 0xff
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	1c7b      	adds	r3, r7, #1
 8008d30:	33ff      	adds	r3, #255	; 0xff
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	029b      	lsls	r3, r3, #10
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	801a      	strh	r2, [r3, #0]
 8008d3e:	e03a      	b.n	8008db6 <USB_EPStartXfer+0x212>
 8008d40:	1d7b      	adds	r3, r7, #5
 8008d42:	33ff      	adds	r3, #255	; 0xff
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	1c7a      	adds	r2, r7, #1
 8008d4a:	32ff      	adds	r2, #255	; 0xff
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	1d7b      	adds	r3, r7, #5
 8008d50:	33ff      	adds	r3, #255	; 0xff
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	221f      	movs	r2, #31
 8008d56:	4013      	ands	r3, r2
 8008d58:	d106      	bne.n	8008d68 <USB_EPStartXfer+0x1c4>
 8008d5a:	1c7b      	adds	r3, r7, #1
 8008d5c:	33ff      	adds	r3, #255	; 0xff
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	1c7a      	adds	r2, r7, #1
 8008d64:	32ff      	adds	r2, #255	; 0xff
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	1c7b      	adds	r3, r7, #1
 8008d6a:	33ff      	adds	r3, #255	; 0xff
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	029b      	lsls	r3, r3, #10
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	4a7a      	ldr	r2, [pc, #488]	; (8008f60 <USB_EPStartXfer+0x3bc>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	801a      	strh	r2, [r3, #0]
 8008d7e:	e01a      	b.n	8008db6 <USB_EPStartXfer+0x212>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d116      	bne.n	8008db6 <USB_EPStartXfer+0x212>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2250      	movs	r2, #80	; 0x50
 8008d8c:	5a9b      	ldrh	r3, [r3, r2]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	001a      	movs	r2, r3
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	189b      	adds	r3, r3, r2
 8008d96:	633b      	str	r3, [r7, #48]	; 0x30
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	00da      	lsls	r2, r3, #3
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	4a6d      	ldr	r2, [pc, #436]	; (8008f58 <USB_EPStartXfer+0x3b4>)
 8008da4:	4694      	mov	ip, r2
 8008da6:	4463      	add	r3, ip
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008daa:	1d7b      	adds	r3, r7, #5
 8008dac:	33ff      	adds	r3, #255	; 0xff
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008db6:	2076      	movs	r0, #118	; 0x76
 8008db8:	183b      	adds	r3, r7, r0
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	8952      	ldrh	r2, [r2, #10]
 8008dbe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	6959      	ldr	r1, [r3, #20]
 8008dc4:	1d7b      	adds	r3, r7, #5
 8008dc6:	33ff      	adds	r3, #255	; 0xff
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b29c      	uxth	r4, r3
 8008dcc:	183b      	adds	r3, r7, r0
 8008dce:	881a      	ldrh	r2, [r3, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	0023      	movs	r3, r4
 8008dd4:	f001 f8da 	bl	8009f8c <USB_WritePMA>
            ep->xfer_buff += len;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	1d7b      	adds	r3, r7, #5
 8008dde:	33ff      	adds	r3, #255	; 0xff
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	18d2      	adds	r2, r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	6a1a      	ldr	r2, [r3, #32]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d908      	bls.n	8008e06 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	1d7b      	adds	r3, r7, #5
 8008dfa:	33ff      	adds	r3, #255	; 0xff
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	621a      	str	r2, [r3, #32]
 8008e04:	e007      	b.n	8008e16 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	1d7a      	adds	r2, r7, #5
 8008e0c:	32ff      	adds	r2, #255	; 0xff
 8008e0e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2200      	movs	r2, #0
 8008e14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d166      	bne.n	8008eec <USB_EPStartXfer+0x348>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2250      	movs	r2, #80	; 0x50
 8008e26:	5a9b      	ldrh	r3, [r3, r2]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	001a      	movs	r2, r3
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	189b      	adds	r3, r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	00da      	lsls	r2, r3, #3
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	18d3      	adds	r3, r2, r3
 8008e3c:	4a43      	ldr	r2, [pc, #268]	; (8008f4c <USB_EPStartXfer+0x3a8>)
 8008e3e:	4694      	mov	ip, r2
 8008e40:	4463      	add	r3, ip
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	1d7b      	adds	r3, r7, #5
 8008e46:	33ff      	adds	r3, #255	; 0xff
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d110      	bne.n	8008e70 <USB_EPStartXfer+0x2cc>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4a41      	ldr	r2, [pc, #260]	; (8008f5c <USB_EPStartXfer+0x3b8>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4a3e      	ldr	r2, [pc, #248]	; (8008f60 <USB_EPStartXfer+0x3bc>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	e05a      	b.n	8008f26 <USB_EPStartXfer+0x382>
 8008e70:	1d7b      	adds	r3, r7, #5
 8008e72:	33ff      	adds	r3, #255	; 0xff
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b3e      	cmp	r3, #62	; 0x3e
 8008e78:	d81a      	bhi.n	8008eb0 <USB_EPStartXfer+0x30c>
 8008e7a:	1d7b      	adds	r3, r7, #5
 8008e7c:	33ff      	adds	r3, #255	; 0xff
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	085b      	lsrs	r3, r3, #1
 8008e82:	21fc      	movs	r1, #252	; 0xfc
 8008e84:	187a      	adds	r2, r7, r1
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	1d7b      	adds	r3, r7, #5
 8008e8a:	33ff      	adds	r3, #255	; 0xff
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4013      	ands	r3, r2
 8008e92:	d004      	beq.n	8008e9e <USB_EPStartXfer+0x2fa>
 8008e94:	187b      	adds	r3, r7, r1
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	187a      	adds	r2, r7, r1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	23fc      	movs	r3, #252	; 0xfc
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	029b      	lsls	r3, r3, #10
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	e03a      	b.n	8008f26 <USB_EPStartXfer+0x382>
 8008eb0:	1d7b      	adds	r3, r7, #5
 8008eb2:	33ff      	adds	r3, #255	; 0xff
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	21fc      	movs	r1, #252	; 0xfc
 8008eba:	187a      	adds	r2, r7, r1
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	1d7b      	adds	r3, r7, #5
 8008ec0:	33ff      	adds	r3, #255	; 0xff
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	221f      	movs	r2, #31
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d104      	bne.n	8008ed4 <USB_EPStartXfer+0x330>
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	187a      	adds	r2, r7, r1
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	23fc      	movs	r3, #252	; 0xfc
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	4a1f      	ldr	r2, [pc, #124]	; (8008f60 <USB_EPStartXfer+0x3bc>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e01c      	b.n	8008f26 <USB_EPStartXfer+0x382>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d118      	bne.n	8008f26 <USB_EPStartXfer+0x382>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	623b      	str	r3, [r7, #32]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2250      	movs	r2, #80	; 0x50
 8008efc:	5a9b      	ldrh	r3, [r3, r2]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	001a      	movs	r2, r3
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	623b      	str	r3, [r7, #32]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	00da      	lsls	r2, r3, #3
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	18d3      	adds	r3, r2, r3
 8008f12:	4a0e      	ldr	r2, [pc, #56]	; (8008f4c <USB_EPStartXfer+0x3a8>)
 8008f14:	4694      	mov	ip, r2
 8008f16:	4463      	add	r3, ip
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	1d7b      	adds	r3, r7, #5
 8008f1c:	33ff      	adds	r3, #255	; 0xff
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f26:	2076      	movs	r0, #118	; 0x76
 8008f28:	183b      	adds	r3, r7, r0
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	8912      	ldrh	r2, [r2, #8]
 8008f2e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6959      	ldr	r1, [r3, #20]
 8008f34:	1d7b      	adds	r3, r7, #5
 8008f36:	33ff      	adds	r3, #255	; 0xff
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	b29c      	uxth	r4, r3
 8008f3c:	183b      	adds	r3, r7, r0
 8008f3e:	881a      	ldrh	r2, [r3, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	0023      	movs	r3, r4
 8008f44:	f001 f822 	bl	8009f8c <USB_WritePMA>
 8008f48:	e301      	b.n	800954e <USB_EPStartXfer+0x9aa>
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	00000402 	.word	0x00000402
 8008f50:	ffff8f8f 	.word	0xffff8f8f
 8008f54:	ffff8180 	.word	0xffff8180
 8008f58:	00000406 	.word	0x00000406
 8008f5c:	ffff83ff 	.word	0xffff83ff
 8008f60:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d166      	bne.n	800903a <USB_EPStartXfer+0x496>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2250      	movs	r2, #80	; 0x50
 8008f74:	5a9b      	ldrh	r3, [r3, r2]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	001a      	movs	r2, r3
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7c:	189b      	adds	r3, r3, r2
 8008f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	00da      	lsls	r2, r3, #3
 8008f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f88:	18d3      	adds	r3, r2, r3
 8008f8a:	4ac3      	ldr	r2, [pc, #780]	; (8009298 <USB_EPStartXfer+0x6f4>)
 8008f8c:	4694      	mov	ip, r2
 8008f8e:	4463      	add	r3, ip
 8008f90:	647b      	str	r3, [r7, #68]	; 0x44
 8008f92:	1d7b      	adds	r3, r7, #5
 8008f94:	33ff      	adds	r3, #255	; 0xff
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d110      	bne.n	8008fbe <USB_EPStartXfer+0x41a>
 8008f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4abe      	ldr	r2, [pc, #760]	; (800929c <USB_EPStartXfer+0x6f8>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4abb      	ldr	r2, [pc, #748]	; (80092a0 <USB_EPStartXfer+0x6fc>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e05a      	b.n	8009074 <USB_EPStartXfer+0x4d0>
 8008fbe:	1d7b      	adds	r3, r7, #5
 8008fc0:	33ff      	adds	r3, #255	; 0xff
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fc6:	d81a      	bhi.n	8008ffe <USB_EPStartXfer+0x45a>
 8008fc8:	1d7b      	adds	r3, r7, #5
 8008fca:	33ff      	adds	r3, #255	; 0xff
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	21f8      	movs	r1, #248	; 0xf8
 8008fd2:	187a      	adds	r2, r7, r1
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	1d7b      	adds	r3, r7, #5
 8008fd8:	33ff      	adds	r3, #255	; 0xff
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d004      	beq.n	8008fec <USB_EPStartXfer+0x448>
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	187a      	adds	r2, r7, r1
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	23f8      	movs	r3, #248	; 0xf8
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	e03a      	b.n	8009074 <USB_EPStartXfer+0x4d0>
 8008ffe:	1d7b      	adds	r3, r7, #5
 8009000:	33ff      	adds	r3, #255	; 0xff
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	095b      	lsrs	r3, r3, #5
 8009006:	21f8      	movs	r1, #248	; 0xf8
 8009008:	187a      	adds	r2, r7, r1
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	1d7b      	adds	r3, r7, #5
 800900e:	33ff      	adds	r3, #255	; 0xff
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	221f      	movs	r2, #31
 8009014:	4013      	ands	r3, r2
 8009016:	d104      	bne.n	8009022 <USB_EPStartXfer+0x47e>
 8009018:	187b      	adds	r3, r7, r1
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3b01      	subs	r3, #1
 800901e:	187a      	adds	r2, r7, r1
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	23f8      	movs	r3, #248	; 0xf8
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	029b      	lsls	r3, r3, #10
 800902c:	b29b      	uxth	r3, r3
 800902e:	4a9c      	ldr	r2, [pc, #624]	; (80092a0 <USB_EPStartXfer+0x6fc>)
 8009030:	4313      	orrs	r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e01c      	b.n	8009074 <USB_EPStartXfer+0x4d0>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d118      	bne.n	8009074 <USB_EPStartXfer+0x4d0>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	653b      	str	r3, [r7, #80]	; 0x50
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2250      	movs	r2, #80	; 0x50
 800904a:	5a9b      	ldrh	r3, [r3, r2]
 800904c:	b29b      	uxth	r3, r3
 800904e:	001a      	movs	r2, r3
 8009050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009052:	189b      	adds	r3, r3, r2
 8009054:	653b      	str	r3, [r7, #80]	; 0x50
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	00da      	lsls	r2, r3, #3
 800905c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800905e:	18d3      	adds	r3, r2, r3
 8009060:	4a8d      	ldr	r2, [pc, #564]	; (8009298 <USB_EPStartXfer+0x6f4>)
 8009062:	4694      	mov	ip, r2
 8009064:	4463      	add	r3, ip
 8009066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009068:	1d7b      	adds	r3, r7, #5
 800906a:	33ff      	adds	r3, #255	; 0xff
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	b29a      	uxth	r2, r3
 8009070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009072:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009074:	2076      	movs	r0, #118	; 0x76
 8009076:	183b      	adds	r3, r7, r0
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	8912      	ldrh	r2, [r2, #8]
 800907c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6959      	ldr	r1, [r3, #20]
 8009082:	1d7b      	adds	r3, r7, #5
 8009084:	33ff      	adds	r3, #255	; 0xff
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	b29c      	uxth	r4, r3
 800908a:	183b      	adds	r3, r7, r0
 800908c:	881a      	ldrh	r2, [r3, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	0023      	movs	r3, r4
 8009092:	f000 ff7b 	bl	8009f8c <USB_WritePMA>
            ep->xfer_buff += len;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	695a      	ldr	r2, [r3, #20]
 800909a:	1d7b      	adds	r3, r7, #5
 800909c:	33ff      	adds	r3, #255	; 0xff
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	18d2      	adds	r2, r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	6a1a      	ldr	r2, [r3, #32]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d908      	bls.n	80090c4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6a1a      	ldr	r2, [r3, #32]
 80090b6:	1d7b      	adds	r3, r7, #5
 80090b8:	33ff      	adds	r3, #255	; 0xff
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	1ad2      	subs	r2, r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	621a      	str	r2, [r3, #32]
 80090c2:	e007      	b.n	80090d4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	1d7a      	adds	r2, r7, #5
 80090ca:	32ff      	adds	r2, #255	; 0xff
 80090cc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2200      	movs	r2, #0
 80090d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	643b      	str	r3, [r7, #64]	; 0x40
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d166      	bne.n	80091ae <USB_EPStartXfer+0x60a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2250      	movs	r2, #80	; 0x50
 80090e8:	5a9b      	ldrh	r3, [r3, r2]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	001a      	movs	r2, r3
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	189b      	adds	r3, r3, r2
 80090f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	00da      	lsls	r2, r3, #3
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	18d3      	adds	r3, r2, r3
 80090fe:	4a69      	ldr	r2, [pc, #420]	; (80092a4 <USB_EPStartXfer+0x700>)
 8009100:	4694      	mov	ip, r2
 8009102:	4463      	add	r3, ip
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
 8009106:	1d7b      	adds	r3, r7, #5
 8009108:	33ff      	adds	r3, #255	; 0xff
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d110      	bne.n	8009132 <USB_EPStartXfer+0x58e>
 8009110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	4a61      	ldr	r2, [pc, #388]	; (800929c <USB_EPStartXfer+0x6f8>)
 8009118:	4013      	ands	r3, r2
 800911a:	b29a      	uxth	r2, r3
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911e:	801a      	strh	r2, [r3, #0]
 8009120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4a5e      	ldr	r2, [pc, #376]	; (80092a0 <USB_EPStartXfer+0x6fc>)
 8009128:	4313      	orrs	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	e058      	b.n	80091e4 <USB_EPStartXfer+0x640>
 8009132:	1d7b      	adds	r3, r7, #5
 8009134:	33ff      	adds	r3, #255	; 0xff
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b3e      	cmp	r3, #62	; 0x3e
 800913a:	d81a      	bhi.n	8009172 <USB_EPStartXfer+0x5ce>
 800913c:	1d7b      	adds	r3, r7, #5
 800913e:	33ff      	adds	r3, #255	; 0xff
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	21f4      	movs	r1, #244	; 0xf4
 8009146:	187a      	adds	r2, r7, r1
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	1d7b      	adds	r3, r7, #5
 800914c:	33ff      	adds	r3, #255	; 0xff
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	4013      	ands	r3, r2
 8009154:	d004      	beq.n	8009160 <USB_EPStartXfer+0x5bc>
 8009156:	187b      	adds	r3, r7, r1
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3301      	adds	r3, #1
 800915c:	187a      	adds	r2, r7, r1
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	23f4      	movs	r3, #244	; 0xf4
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b29b      	uxth	r3, r3
 8009168:	029b      	lsls	r3, r3, #10
 800916a:	b29a      	uxth	r2, r3
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	e038      	b.n	80091e4 <USB_EPStartXfer+0x640>
 8009172:	1d7b      	adds	r3, r7, #5
 8009174:	33ff      	adds	r3, #255	; 0xff
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	21f4      	movs	r1, #244	; 0xf4
 800917c:	187a      	adds	r2, r7, r1
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	1d7b      	adds	r3, r7, #5
 8009182:	33ff      	adds	r3, #255	; 0xff
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	221f      	movs	r2, #31
 8009188:	4013      	ands	r3, r2
 800918a:	d104      	bne.n	8009196 <USB_EPStartXfer+0x5f2>
 800918c:	187b      	adds	r3, r7, r1
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3b01      	subs	r3, #1
 8009192:	187a      	adds	r2, r7, r1
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	23f4      	movs	r3, #244	; 0xf4
 8009198:	18fb      	adds	r3, r7, r3
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	029b      	lsls	r3, r3, #10
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	4a3f      	ldr	r2, [pc, #252]	; (80092a0 <USB_EPStartXfer+0x6fc>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	e01a      	b.n	80091e4 <USB_EPStartXfer+0x640>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d116      	bne.n	80091e4 <USB_EPStartXfer+0x640>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2250      	movs	r2, #80	; 0x50
 80091ba:	5a9b      	ldrh	r3, [r3, r2]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	001a      	movs	r2, r3
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	189b      	adds	r3, r3, r2
 80091c4:	643b      	str	r3, [r7, #64]	; 0x40
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	00da      	lsls	r2, r3, #3
 80091cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ce:	18d3      	adds	r3, r2, r3
 80091d0:	4a34      	ldr	r2, [pc, #208]	; (80092a4 <USB_EPStartXfer+0x700>)
 80091d2:	4694      	mov	ip, r2
 80091d4:	4463      	add	r3, ip
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d8:	1d7b      	adds	r3, r7, #5
 80091da:	33ff      	adds	r3, #255	; 0xff
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	b29a      	uxth	r2, r3
 80091e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091e4:	2076      	movs	r0, #118	; 0x76
 80091e6:	183b      	adds	r3, r7, r0
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	8952      	ldrh	r2, [r2, #10]
 80091ec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	6959      	ldr	r1, [r3, #20]
 80091f2:	1d7b      	adds	r3, r7, #5
 80091f4:	33ff      	adds	r3, #255	; 0xff
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	b29c      	uxth	r4, r3
 80091fa:	183b      	adds	r3, r7, r0
 80091fc:	881a      	ldrh	r2, [r3, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	0023      	movs	r3, r4
 8009202:	f000 fec3 	bl	8009f8c <USB_WritePMA>
 8009206:	e1a2      	b.n	800954e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	1d7a      	adds	r2, r7, #5
 800920e:	32ff      	adds	r2, #255	; 0xff
 8009210:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	18d3      	adds	r3, r2, r3
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	2062      	movs	r0, #98	; 0x62
 8009222:	183b      	adds	r3, r7, r0
 8009224:	4920      	ldr	r1, [pc, #128]	; (80092a8 <USB_EPStartXfer+0x704>)
 8009226:	400a      	ands	r2, r1
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	18d3      	adds	r3, r2, r3
 8009234:	183a      	adds	r2, r7, r0
 8009236:	8812      	ldrh	r2, [r2, #0]
 8009238:	491c      	ldr	r1, [pc, #112]	; (80092ac <USB_EPStartXfer+0x708>)
 800923a:	430a      	orrs	r2, r1
 800923c:	b292      	uxth	r2, r2
 800923e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2250      	movs	r2, #80	; 0x50
 8009248:	5a9b      	ldrh	r3, [r3, r2]
 800924a:	b29b      	uxth	r3, r3
 800924c:	001a      	movs	r2, r3
 800924e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009250:	189b      	adds	r3, r3, r2
 8009252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	00da      	lsls	r2, r3, #3
 800925a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800925c:	18d3      	adds	r3, r2, r3
 800925e:	4a0e      	ldr	r2, [pc, #56]	; (8009298 <USB_EPStartXfer+0x6f4>)
 8009260:	4694      	mov	ip, r2
 8009262:	4463      	add	r3, ip
 8009264:	65bb      	str	r3, [r7, #88]	; 0x58
 8009266:	1d7b      	adds	r3, r7, #5
 8009268:	33ff      	adds	r3, #255	; 0xff
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	b29a      	uxth	r2, r3
 800926e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009270:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009272:	2076      	movs	r0, #118	; 0x76
 8009274:	183b      	adds	r3, r7, r0
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	8912      	ldrh	r2, [r2, #8]
 800927a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	6959      	ldr	r1, [r3, #20]
 8009280:	1d7b      	adds	r3, r7, #5
 8009282:	33ff      	adds	r3, #255	; 0xff
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	b29c      	uxth	r4, r3
 8009288:	183b      	adds	r3, r7, r0
 800928a:	881a      	ldrh	r2, [r3, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	0023      	movs	r3, r4
 8009290:	f000 fe7c 	bl	8009f8c <USB_WritePMA>
 8009294:	e15b      	b.n	800954e <USB_EPStartXfer+0x9aa>
 8009296:	46c0      	nop			; (mov r8, r8)
 8009298:	00000402 	.word	0x00000402
 800929c:	ffff83ff 	.word	0xffff83ff
 80092a0:	ffff8000 	.word	0xffff8000
 80092a4:	00000406 	.word	0x00000406
 80092a8:	ffff8e8f 	.word	0xffff8e8f
 80092ac:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6a1a      	ldr	r2, [r3, #32]
 80092b4:	1d7b      	adds	r3, r7, #5
 80092b6:	33ff      	adds	r3, #255	; 0xff
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	18d3      	adds	r3, r2, r3
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	001a      	movs	r2, r3
 80092d0:	2340      	movs	r3, #64	; 0x40
 80092d2:	4013      	ands	r3, r2
 80092d4:	d100      	bne.n	80092d8 <USB_EPStartXfer+0x734>
 80092d6:	e099      	b.n	800940c <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	673b      	str	r3, [r7, #112]	; 0x70
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d166      	bne.n	80093b2 <USB_EPStartXfer+0x80e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2250      	movs	r2, #80	; 0x50
 80092ec:	5a9b      	ldrh	r3, [r3, r2]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	001a      	movs	r2, r3
 80092f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f4:	189b      	adds	r3, r3, r2
 80092f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	00da      	lsls	r2, r3, #3
 80092fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	4ad0      	ldr	r2, [pc, #832]	; (8009644 <USB_EPStartXfer+0xaa0>)
 8009304:	4694      	mov	ip, r2
 8009306:	4463      	add	r3, ip
 8009308:	667b      	str	r3, [r7, #100]	; 0x64
 800930a:	1d7b      	adds	r3, r7, #5
 800930c:	33ff      	adds	r3, #255	; 0xff
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d110      	bne.n	8009336 <USB_EPStartXfer+0x792>
 8009314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	4acb      	ldr	r2, [pc, #812]	; (8009648 <USB_EPStartXfer+0xaa4>)
 800931c:	4013      	ands	r3, r2
 800931e:	b29a      	uxth	r2, r3
 8009320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009322:	801a      	strh	r2, [r3, #0]
 8009324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	4ac8      	ldr	r2, [pc, #800]	; (800964c <USB_EPStartXfer+0xaa8>)
 800932c:	4313      	orrs	r3, r2
 800932e:	b29a      	uxth	r2, r3
 8009330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009332:	801a      	strh	r2, [r3, #0]
 8009334:	e058      	b.n	80093e8 <USB_EPStartXfer+0x844>
 8009336:	1d7b      	adds	r3, r7, #5
 8009338:	33ff      	adds	r3, #255	; 0xff
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b3e      	cmp	r3, #62	; 0x3e
 800933e:	d81a      	bhi.n	8009376 <USB_EPStartXfer+0x7d2>
 8009340:	1d7b      	adds	r3, r7, #5
 8009342:	33ff      	adds	r3, #255	; 0xff
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	21f0      	movs	r1, #240	; 0xf0
 800934a:	187a      	adds	r2, r7, r1
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	1d7b      	adds	r3, r7, #5
 8009350:	33ff      	adds	r3, #255	; 0xff
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2201      	movs	r2, #1
 8009356:	4013      	ands	r3, r2
 8009358:	d004      	beq.n	8009364 <USB_EPStartXfer+0x7c0>
 800935a:	187b      	adds	r3, r7, r1
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	187a      	adds	r2, r7, r1
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	23f0      	movs	r3, #240	; 0xf0
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	029b      	lsls	r3, r3, #10
 800936e:	b29a      	uxth	r2, r3
 8009370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009372:	801a      	strh	r2, [r3, #0]
 8009374:	e038      	b.n	80093e8 <USB_EPStartXfer+0x844>
 8009376:	1d7b      	adds	r3, r7, #5
 8009378:	33ff      	adds	r3, #255	; 0xff
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	21f0      	movs	r1, #240	; 0xf0
 8009380:	187a      	adds	r2, r7, r1
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	1d7b      	adds	r3, r7, #5
 8009386:	33ff      	adds	r3, #255	; 0xff
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	221f      	movs	r2, #31
 800938c:	4013      	ands	r3, r2
 800938e:	d104      	bne.n	800939a <USB_EPStartXfer+0x7f6>
 8009390:	187b      	adds	r3, r7, r1
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3b01      	subs	r3, #1
 8009396:	187a      	adds	r2, r7, r1
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	23f0      	movs	r3, #240	; 0xf0
 800939c:	18fb      	adds	r3, r7, r3
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	029b      	lsls	r3, r3, #10
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	4aa9      	ldr	r2, [pc, #676]	; (800964c <USB_EPStartXfer+0xaa8>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	e01a      	b.n	80093e8 <USB_EPStartXfer+0x844>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d116      	bne.n	80093e8 <USB_EPStartXfer+0x844>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2250      	movs	r2, #80	; 0x50
 80093be:	5a9b      	ldrh	r3, [r3, r2]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	001a      	movs	r2, r3
 80093c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093c6:	189b      	adds	r3, r3, r2
 80093c8:	673b      	str	r3, [r7, #112]	; 0x70
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	00da      	lsls	r2, r3, #3
 80093d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093d2:	18d3      	adds	r3, r2, r3
 80093d4:	4a9b      	ldr	r2, [pc, #620]	; (8009644 <USB_EPStartXfer+0xaa0>)
 80093d6:	4694      	mov	ip, r2
 80093d8:	4463      	add	r3, ip
 80093da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093dc:	1d7b      	adds	r3, r7, #5
 80093de:	33ff      	adds	r3, #255	; 0xff
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80093e8:	2076      	movs	r0, #118	; 0x76
 80093ea:	183b      	adds	r3, r7, r0
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	8952      	ldrh	r2, [r2, #10]
 80093f0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6959      	ldr	r1, [r3, #20]
 80093f6:	1d7b      	adds	r3, r7, #5
 80093f8:	33ff      	adds	r3, #255	; 0xff
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	b29c      	uxth	r4, r3
 80093fe:	183b      	adds	r3, r7, r0
 8009400:	881a      	ldrh	r2, [r3, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	0023      	movs	r3, r4
 8009406:	f000 fdc1 	bl	8009f8c <USB_WritePMA>
 800940a:	e0a0      	b.n	800954e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d166      	bne.n	80094e2 <USB_EPStartXfer+0x93e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2250      	movs	r2, #80	; 0x50
 800941c:	5a9b      	ldrh	r3, [r3, r2]
 800941e:	b29b      	uxth	r3, r3
 8009420:	001a      	movs	r2, r3
 8009422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009424:	189b      	adds	r3, r3, r2
 8009426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	00da      	lsls	r2, r3, #3
 800942e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009430:	18d3      	adds	r3, r2, r3
 8009432:	4a87      	ldr	r2, [pc, #540]	; (8009650 <USB_EPStartXfer+0xaac>)
 8009434:	4694      	mov	ip, r2
 8009436:	4463      	add	r3, ip
 8009438:	67bb      	str	r3, [r7, #120]	; 0x78
 800943a:	1d7b      	adds	r3, r7, #5
 800943c:	33ff      	adds	r3, #255	; 0xff
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d110      	bne.n	8009466 <USB_EPStartXfer+0x8c2>
 8009444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	4a7f      	ldr	r2, [pc, #508]	; (8009648 <USB_EPStartXfer+0xaa4>)
 800944c:	4013      	ands	r3, r2
 800944e:	b29a      	uxth	r2, r3
 8009450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29b      	uxth	r3, r3
 800945a:	4a7c      	ldr	r2, [pc, #496]	; (800964c <USB_EPStartXfer+0xaa8>)
 800945c:	4313      	orrs	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009462:	801a      	strh	r2, [r3, #0]
 8009464:	e062      	b.n	800952c <USB_EPStartXfer+0x988>
 8009466:	1d7b      	adds	r3, r7, #5
 8009468:	33ff      	adds	r3, #255	; 0xff
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b3e      	cmp	r3, #62	; 0x3e
 800946e:	d81a      	bhi.n	80094a6 <USB_EPStartXfer+0x902>
 8009470:	1d7b      	adds	r3, r7, #5
 8009472:	33ff      	adds	r3, #255	; 0xff
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	21ec      	movs	r1, #236	; 0xec
 800947a:	187a      	adds	r2, r7, r1
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	1d7b      	adds	r3, r7, #5
 8009480:	33ff      	adds	r3, #255	; 0xff
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	4013      	ands	r3, r2
 8009488:	d004      	beq.n	8009494 <USB_EPStartXfer+0x8f0>
 800948a:	187b      	adds	r3, r7, r1
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3301      	adds	r3, #1
 8009490:	187a      	adds	r2, r7, r1
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	23ec      	movs	r3, #236	; 0xec
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	029b      	lsls	r3, r3, #10
 800949e:	b29a      	uxth	r2, r3
 80094a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	e042      	b.n	800952c <USB_EPStartXfer+0x988>
 80094a6:	1d7b      	adds	r3, r7, #5
 80094a8:	33ff      	adds	r3, #255	; 0xff
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	21ec      	movs	r1, #236	; 0xec
 80094b0:	187a      	adds	r2, r7, r1
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	1d7b      	adds	r3, r7, #5
 80094b6:	33ff      	adds	r3, #255	; 0xff
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	221f      	movs	r2, #31
 80094bc:	4013      	ands	r3, r2
 80094be:	d104      	bne.n	80094ca <USB_EPStartXfer+0x926>
 80094c0:	187b      	adds	r3, r7, r1
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	187a      	adds	r2, r7, r1
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	23ec      	movs	r3, #236	; 0xec
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	029b      	lsls	r3, r3, #10
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4a5d      	ldr	r2, [pc, #372]	; (800964c <USB_EPStartXfer+0xaa8>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094de:	801a      	strh	r2, [r3, #0]
 80094e0:	e024      	b.n	800952c <USB_EPStartXfer+0x988>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d120      	bne.n	800952c <USB_EPStartXfer+0x988>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2184      	movs	r1, #132	; 0x84
 80094ee:	187a      	adds	r2, r7, r1
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2250      	movs	r2, #80	; 0x50
 80094f6:	5a9b      	ldrh	r3, [r3, r2]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	001a      	movs	r2, r3
 80094fc:	187b      	adds	r3, r7, r1
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	189b      	adds	r3, r3, r2
 8009502:	187a      	adds	r2, r7, r1
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	00da      	lsls	r2, r3, #3
 800950c:	187b      	adds	r3, r7, r1
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	18d3      	adds	r3, r2, r3
 8009512:	4a4f      	ldr	r2, [pc, #316]	; (8009650 <USB_EPStartXfer+0xaac>)
 8009514:	4694      	mov	ip, r2
 8009516:	4463      	add	r3, ip
 8009518:	2180      	movs	r1, #128	; 0x80
 800951a:	187a      	adds	r2, r7, r1
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	1d7b      	adds	r3, r7, #5
 8009520:	33ff      	adds	r3, #255	; 0xff
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	b29a      	uxth	r2, r3
 8009526:	187b      	adds	r3, r7, r1
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800952c:	2076      	movs	r0, #118	; 0x76
 800952e:	183b      	adds	r3, r7, r0
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	8912      	ldrh	r2, [r2, #8]
 8009534:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6959      	ldr	r1, [r3, #20]
 800953a:	1d7b      	adds	r3, r7, #5
 800953c:	33ff      	adds	r3, #255	; 0xff
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	b29c      	uxth	r4, r3
 8009542:	183b      	adds	r3, r7, r0
 8009544:	881a      	ldrh	r2, [r3, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	0023      	movs	r3, r4
 800954a:	f000 fd1f 	bl	8009f8c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	18d3      	adds	r3, r2, r3
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29a      	uxth	r2, r3
 800955c:	200a      	movs	r0, #10
 800955e:	183b      	adds	r3, r7, r0
 8009560:	493c      	ldr	r1, [pc, #240]	; (8009654 <USB_EPStartXfer+0xab0>)
 8009562:	400a      	ands	r2, r1
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	183b      	adds	r3, r7, r0
 8009568:	183a      	adds	r2, r7, r0
 800956a:	8812      	ldrh	r2, [r2, #0]
 800956c:	2110      	movs	r1, #16
 800956e:	404a      	eors	r2, r1
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	183b      	adds	r3, r7, r0
 8009574:	183a      	adds	r2, r7, r0
 8009576:	8812      	ldrh	r2, [r2, #0]
 8009578:	2120      	movs	r1, #32
 800957a:	404a      	eors	r2, r1
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	18d3      	adds	r3, r2, r3
 8009588:	183a      	adds	r2, r7, r0
 800958a:	8812      	ldrh	r2, [r2, #0]
 800958c:	4932      	ldr	r1, [pc, #200]	; (8009658 <USB_EPStartXfer+0xab4>)
 800958e:	430a      	orrs	r2, r1
 8009590:	b292      	uxth	r2, r2
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	f000 fbaf 	bl	8009cf6 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	7b1b      	ldrb	r3, [r3, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d000      	beq.n	80095a2 <USB_EPStartXfer+0x9fe>
 80095a0:	e09e      	b.n	80096e0 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d90d      	bls.n	80095ca <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	1d7a      	adds	r2, r7, #5
 80095b4:	32ff      	adds	r2, #255	; 0xff
 80095b6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	1d7b      	adds	r3, r7, #5
 80095be:	33ff      	adds	r3, #255	; 0xff
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	1ad2      	subs	r2, r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	619a      	str	r2, [r3, #24]
 80095c8:	e007      	b.n	80095da <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	1d7a      	adds	r2, r7, #5
 80095d0:	32ff      	adds	r2, #255	; 0xff
 80095d2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2190      	movs	r1, #144	; 0x90
 80095de:	187a      	adds	r2, r7, r1
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2250      	movs	r2, #80	; 0x50
 80095e6:	5a9b      	ldrh	r3, [r3, r2]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	001a      	movs	r2, r3
 80095ec:	187b      	adds	r3, r7, r1
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	189b      	adds	r3, r3, r2
 80095f2:	187a      	adds	r2, r7, r1
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	00da      	lsls	r2, r3, #3
 80095fc:	187b      	adds	r3, r7, r1
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	4a10      	ldr	r2, [pc, #64]	; (8009644 <USB_EPStartXfer+0xaa0>)
 8009604:	4694      	mov	ip, r2
 8009606:	4463      	add	r3, ip
 8009608:	218c      	movs	r1, #140	; 0x8c
 800960a:	187a      	adds	r2, r7, r1
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	1d7b      	adds	r3, r7, #5
 8009610:	33ff      	adds	r3, #255	; 0xff
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d121      	bne.n	800965c <USB_EPStartXfer+0xab8>
 8009618:	187b      	adds	r3, r7, r1
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4a09      	ldr	r2, [pc, #36]	; (8009648 <USB_EPStartXfer+0xaa4>)
 8009622:	4013      	ands	r3, r2
 8009624:	b29a      	uxth	r2, r3
 8009626:	187b      	adds	r3, r7, r1
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	801a      	strh	r2, [r3, #0]
 800962c:	187b      	adds	r3, r7, r1
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	4a05      	ldr	r2, [pc, #20]	; (800964c <USB_EPStartXfer+0xaa8>)
 8009636:	4313      	orrs	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	187b      	adds	r3, r7, r1
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	801a      	strh	r2, [r3, #0]
 8009640:	e334      	b.n	8009cac <USB_EPStartXfer+0x1108>
 8009642:	46c0      	nop			; (mov r8, r8)
 8009644:	00000406 	.word	0x00000406
 8009648:	ffff83ff 	.word	0xffff83ff
 800964c:	ffff8000 	.word	0xffff8000
 8009650:	00000402 	.word	0x00000402
 8009654:	ffff8fbf 	.word	0xffff8fbf
 8009658:	ffff8080 	.word	0xffff8080
 800965c:	1d7b      	adds	r3, r7, #5
 800965e:	33ff      	adds	r3, #255	; 0xff
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b3e      	cmp	r3, #62	; 0x3e
 8009664:	d81c      	bhi.n	80096a0 <USB_EPStartXfer+0xafc>
 8009666:	1d7b      	adds	r3, r7, #5
 8009668:	33ff      	adds	r3, #255	; 0xff
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	085b      	lsrs	r3, r3, #1
 800966e:	21e8      	movs	r1, #232	; 0xe8
 8009670:	187a      	adds	r2, r7, r1
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	1d7b      	adds	r3, r7, #5
 8009676:	33ff      	adds	r3, #255	; 0xff
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2201      	movs	r2, #1
 800967c:	4013      	ands	r3, r2
 800967e:	d004      	beq.n	800968a <USB_EPStartXfer+0xae6>
 8009680:	187b      	adds	r3, r7, r1
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3301      	adds	r3, #1
 8009686:	187a      	adds	r2, r7, r1
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	23e8      	movs	r3, #232	; 0xe8
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	029b      	lsls	r3, r3, #10
 8009694:	b29a      	uxth	r2, r3
 8009696:	238c      	movs	r3, #140	; 0x8c
 8009698:	18fb      	adds	r3, r7, r3
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	801a      	strh	r2, [r3, #0]
 800969e:	e305      	b.n	8009cac <USB_EPStartXfer+0x1108>
 80096a0:	1d7b      	adds	r3, r7, #5
 80096a2:	33ff      	adds	r3, #255	; 0xff
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	21e8      	movs	r1, #232	; 0xe8
 80096aa:	187a      	adds	r2, r7, r1
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	1d7b      	adds	r3, r7, #5
 80096b0:	33ff      	adds	r3, #255	; 0xff
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	221f      	movs	r2, #31
 80096b6:	4013      	ands	r3, r2
 80096b8:	d104      	bne.n	80096c4 <USB_EPStartXfer+0xb20>
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3b01      	subs	r3, #1
 80096c0:	187a      	adds	r2, r7, r1
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	23e8      	movs	r3, #232	; 0xe8
 80096c6:	18fb      	adds	r3, r7, r3
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	029b      	lsls	r3, r3, #10
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4aca      	ldr	r2, [pc, #808]	; (80099fc <USB_EPStartXfer+0xe58>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	238c      	movs	r3, #140	; 0x8c
 80096d8:	18fb      	adds	r3, r7, r3
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	801a      	strh	r2, [r3, #0]
 80096de:	e2e5      	b.n	8009cac <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	78db      	ldrb	r3, [r3, #3]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d000      	beq.n	80096ea <USB_EPStartXfer+0xb46>
 80096e8:	e16f      	b.n	80099ca <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d16f      	bne.n	80097d2 <USB_EPStartXfer+0xc2e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	21ac      	movs	r1, #172	; 0xac
 80096f6:	187a      	adds	r2, r7, r1
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2250      	movs	r2, #80	; 0x50
 80096fe:	5a9b      	ldrh	r3, [r3, r2]
 8009700:	b29b      	uxth	r3, r3
 8009702:	001a      	movs	r2, r3
 8009704:	187b      	adds	r3, r7, r1
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	189b      	adds	r3, r3, r2
 800970a:	187a      	adds	r2, r7, r1
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	00da      	lsls	r2, r3, #3
 8009714:	187b      	adds	r3, r7, r1
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	18d3      	adds	r3, r2, r3
 800971a:	4ab9      	ldr	r2, [pc, #740]	; (8009a00 <USB_EPStartXfer+0xe5c>)
 800971c:	4694      	mov	ip, r2
 800971e:	4463      	add	r3, ip
 8009720:	21a8      	movs	r1, #168	; 0xa8
 8009722:	187a      	adds	r2, r7, r1
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d114      	bne.n	8009758 <USB_EPStartXfer+0xbb4>
 800972e:	187b      	adds	r3, r7, r1
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	4ab3      	ldr	r2, [pc, #716]	; (8009a04 <USB_EPStartXfer+0xe60>)
 8009738:	4013      	ands	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	187b      	adds	r3, r7, r1
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	187b      	adds	r3, r7, r1
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	4aac      	ldr	r2, [pc, #688]	; (80099fc <USB_EPStartXfer+0xe58>)
 800974c:	4313      	orrs	r3, r2
 800974e:	b29a      	uxth	r2, r3
 8009750:	187b      	adds	r3, r7, r1
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	801a      	strh	r2, [r3, #0]
 8009756:	e060      	b.n	800981a <USB_EPStartXfer+0xc76>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	2b3e      	cmp	r3, #62	; 0x3e
 800975e:	d81a      	bhi.n	8009796 <USB_EPStartXfer+0xbf2>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	085b      	lsrs	r3, r3, #1
 8009766:	21e4      	movs	r1, #228	; 0xe4
 8009768:	187a      	adds	r2, r7, r1
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	2201      	movs	r2, #1
 8009772:	4013      	ands	r3, r2
 8009774:	d004      	beq.n	8009780 <USB_EPStartXfer+0xbdc>
 8009776:	187b      	adds	r3, r7, r1
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	187a      	adds	r2, r7, r1
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	23e4      	movs	r3, #228	; 0xe4
 8009782:	18fb      	adds	r3, r7, r3
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	029b      	lsls	r3, r3, #10
 800978a:	b29a      	uxth	r2, r3
 800978c:	23a8      	movs	r3, #168	; 0xa8
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	e041      	b.n	800981a <USB_EPStartXfer+0xc76>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	21e4      	movs	r1, #228	; 0xe4
 800979e:	187a      	adds	r2, r7, r1
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	221f      	movs	r2, #31
 80097a8:	4013      	ands	r3, r2
 80097aa:	d104      	bne.n	80097b6 <USB_EPStartXfer+0xc12>
 80097ac:	187b      	adds	r3, r7, r1
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	187a      	adds	r2, r7, r1
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	23e4      	movs	r3, #228	; 0xe4
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	029b      	lsls	r3, r3, #10
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	4a8e      	ldr	r2, [pc, #568]	; (80099fc <USB_EPStartXfer+0xe58>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	23a8      	movs	r3, #168	; 0xa8
 80097ca:	18fb      	adds	r3, r7, r3
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e023      	b.n	800981a <USB_EPStartXfer+0xc76>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d11f      	bne.n	800981a <USB_EPStartXfer+0xc76>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	21b4      	movs	r1, #180	; 0xb4
 80097de:	187a      	adds	r2, r7, r1
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2250      	movs	r2, #80	; 0x50
 80097e6:	5a9b      	ldrh	r3, [r3, r2]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	001a      	movs	r2, r3
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	189b      	adds	r3, r3, r2
 80097f2:	187a      	adds	r2, r7, r1
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	00da      	lsls	r2, r3, #3
 80097fc:	187b      	adds	r3, r7, r1
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	18d3      	adds	r3, r2, r3
 8009802:	4a7f      	ldr	r2, [pc, #508]	; (8009a00 <USB_EPStartXfer+0xe5c>)
 8009804:	4694      	mov	ip, r2
 8009806:	4463      	add	r3, ip
 8009808:	21b0      	movs	r1, #176	; 0xb0
 800980a:	187a      	adds	r2, r7, r1
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	b29a      	uxth	r2, r3
 8009814:	187b      	adds	r3, r7, r1
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	801a      	strh	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	22a4      	movs	r2, #164	; 0xa4
 800981e:	18ba      	adds	r2, r7, r2
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d16f      	bne.n	800990a <USB_EPStartXfer+0xd66>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	219c      	movs	r1, #156	; 0x9c
 800982e:	187a      	adds	r2, r7, r1
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2250      	movs	r2, #80	; 0x50
 8009836:	5a9b      	ldrh	r3, [r3, r2]
 8009838:	b29b      	uxth	r3, r3
 800983a:	001a      	movs	r2, r3
 800983c:	187b      	adds	r3, r7, r1
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	189b      	adds	r3, r3, r2
 8009842:	187a      	adds	r2, r7, r1
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	00da      	lsls	r2, r3, #3
 800984c:	187b      	adds	r3, r7, r1
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	4a6d      	ldr	r2, [pc, #436]	; (8009a08 <USB_EPStartXfer+0xe64>)
 8009854:	4694      	mov	ip, r2
 8009856:	4463      	add	r3, ip
 8009858:	2198      	movs	r1, #152	; 0x98
 800985a:	187a      	adds	r2, r7, r1
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d114      	bne.n	8009890 <USB_EPStartXfer+0xcec>
 8009866:	187b      	adds	r3, r7, r1
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	4a65      	ldr	r2, [pc, #404]	; (8009a04 <USB_EPStartXfer+0xe60>)
 8009870:	4013      	ands	r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	187b      	adds	r3, r7, r1
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	801a      	strh	r2, [r3, #0]
 800987a:	187b      	adds	r3, r7, r1
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	b29b      	uxth	r3, r3
 8009882:	4a5e      	ldr	r2, [pc, #376]	; (80099fc <USB_EPStartXfer+0xe58>)
 8009884:	4313      	orrs	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	187b      	adds	r3, r7, r1
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	801a      	strh	r2, [r3, #0]
 800988e:	e05d      	b.n	800994c <USB_EPStartXfer+0xda8>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b3e      	cmp	r3, #62	; 0x3e
 8009896:	d81a      	bhi.n	80098ce <USB_EPStartXfer+0xd2a>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	21e0      	movs	r1, #224	; 0xe0
 80098a0:	187a      	adds	r2, r7, r1
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2201      	movs	r2, #1
 80098aa:	4013      	ands	r3, r2
 80098ac:	d004      	beq.n	80098b8 <USB_EPStartXfer+0xd14>
 80098ae:	187b      	adds	r3, r7, r1
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3301      	adds	r3, #1
 80098b4:	187a      	adds	r2, r7, r1
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	23e0      	movs	r3, #224	; 0xe0
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	029b      	lsls	r3, r3, #10
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	2398      	movs	r3, #152	; 0x98
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e03e      	b.n	800994c <USB_EPStartXfer+0xda8>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	21e0      	movs	r1, #224	; 0xe0
 80098d6:	187a      	adds	r2, r7, r1
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	221f      	movs	r2, #31
 80098e0:	4013      	ands	r3, r2
 80098e2:	d104      	bne.n	80098ee <USB_EPStartXfer+0xd4a>
 80098e4:	187b      	adds	r3, r7, r1
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	187a      	adds	r2, r7, r1
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	23e0      	movs	r3, #224	; 0xe0
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	029b      	lsls	r3, r3, #10
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	4a40      	ldr	r2, [pc, #256]	; (80099fc <USB_EPStartXfer+0xe58>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	b29a      	uxth	r2, r3
 8009900:	2398      	movs	r3, #152	; 0x98
 8009902:	18fb      	adds	r3, r7, r3
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e020      	b.n	800994c <USB_EPStartXfer+0xda8>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d11c      	bne.n	800994c <USB_EPStartXfer+0xda8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2250      	movs	r2, #80	; 0x50
 8009916:	5a9b      	ldrh	r3, [r3, r2]
 8009918:	b29b      	uxth	r3, r3
 800991a:	001a      	movs	r2, r3
 800991c:	21a4      	movs	r1, #164	; 0xa4
 800991e:	187b      	adds	r3, r7, r1
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	189b      	adds	r3, r3, r2
 8009924:	187a      	adds	r2, r7, r1
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	00da      	lsls	r2, r3, #3
 800992e:	187b      	adds	r3, r7, r1
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	18d3      	adds	r3, r2, r3
 8009934:	4a34      	ldr	r2, [pc, #208]	; (8009a08 <USB_EPStartXfer+0xe64>)
 8009936:	4694      	mov	ip, r2
 8009938:	4463      	add	r3, ip
 800993a:	21a0      	movs	r1, #160	; 0xa0
 800993c:	187a      	adds	r2, r7, r1
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	b29a      	uxth	r2, r3
 8009946:	187b      	adds	r3, r7, r1
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d100      	bne.n	8009956 <USB_EPStartXfer+0xdb2>
 8009954:	e1aa      	b.n	8009cac <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	18d2      	adds	r2, r2, r3
 8009960:	2196      	movs	r1, #150	; 0x96
 8009962:	187b      	adds	r3, r7, r1
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009968:	187b      	adds	r3, r7, r1
 800996a:	881a      	ldrh	r2, [r3, #0]
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	01db      	lsls	r3, r3, #7
 8009970:	4013      	ands	r3, r2
 8009972:	d004      	beq.n	800997e <USB_EPStartXfer+0xdda>
 8009974:	187b      	adds	r3, r7, r1
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	2240      	movs	r2, #64	; 0x40
 800997a:	4013      	ands	r3, r2
 800997c:	d10d      	bne.n	800999a <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800997e:	2196      	movs	r1, #150	; 0x96
 8009980:	187b      	adds	r3, r7, r1
 8009982:	881a      	ldrh	r2, [r3, #0]
 8009984:	2380      	movs	r3, #128	; 0x80
 8009986:	01db      	lsls	r3, r3, #7
 8009988:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800998a:	d000      	beq.n	800998e <USB_EPStartXfer+0xdea>
 800998c:	e18e      	b.n	8009cac <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800998e:	187b      	adds	r3, r7, r1
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	2240      	movs	r2, #64	; 0x40
 8009994:	4013      	ands	r3, r2
 8009996:	d000      	beq.n	800999a <USB_EPStartXfer+0xdf6>
 8009998:	e188      	b.n	8009cac <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	18d3      	adds	r3, r2, r3
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	2094      	movs	r0, #148	; 0x94
 80099aa:	183b      	adds	r3, r7, r0
 80099ac:	4917      	ldr	r1, [pc, #92]	; (8009a0c <USB_EPStartXfer+0xe68>)
 80099ae:	400a      	ands	r2, r1
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	18d3      	adds	r3, r2, r3
 80099bc:	183a      	adds	r2, r7, r0
 80099be:	8812      	ldrh	r2, [r2, #0]
 80099c0:	4913      	ldr	r1, [pc, #76]	; (8009a10 <USB_EPStartXfer+0xe6c>)
 80099c2:	430a      	orrs	r2, r1
 80099c4:	b292      	uxth	r2, r2
 80099c6:	801a      	strh	r2, [r3, #0]
 80099c8:	e170      	b.n	8009cac <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	78db      	ldrb	r3, [r3, #3]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d000      	beq.n	80099d4 <USB_EPStartXfer+0xe30>
 80099d2:	e169      	b.n	8009ca8 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d919      	bls.n	8009a14 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	1d7a      	adds	r2, r7, #5
 80099e6:	32ff      	adds	r2, #255	; 0xff
 80099e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	1d7b      	adds	r3, r7, #5
 80099f0:	33ff      	adds	r3, #255	; 0xff
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	1ad2      	subs	r2, r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	619a      	str	r2, [r3, #24]
 80099fa:	e013      	b.n	8009a24 <USB_EPStartXfer+0xe80>
 80099fc:	ffff8000 	.word	0xffff8000
 8009a00:	00000402 	.word	0x00000402
 8009a04:	ffff83ff 	.word	0xffff83ff
 8009a08:	00000406 	.word	0x00000406
 8009a0c:	ffff8f8f 	.word	0xffff8f8f
 8009a10:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	1d7a      	adds	r2, r7, #5
 8009a1a:	32ff      	adds	r2, #255	; 0xff
 8009a1c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d000      	beq.n	8009a2e <USB_EPStartXfer+0xe8a>
 8009a2c:	e075      	b.n	8009b1a <USB_EPStartXfer+0xf76>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	21cc      	movs	r1, #204	; 0xcc
 8009a32:	187a      	adds	r2, r7, r1
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2250      	movs	r2, #80	; 0x50
 8009a3a:	5a9b      	ldrh	r3, [r3, r2]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	001a      	movs	r2, r3
 8009a40:	187b      	adds	r3, r7, r1
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	189b      	adds	r3, r3, r2
 8009a46:	187a      	adds	r2, r7, r1
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	00da      	lsls	r2, r3, #3
 8009a50:	187b      	adds	r3, r7, r1
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	18d3      	adds	r3, r2, r3
 8009a56:	4aaa      	ldr	r2, [pc, #680]	; (8009d00 <USB_EPStartXfer+0x115c>)
 8009a58:	4694      	mov	ip, r2
 8009a5a:	4463      	add	r3, ip
 8009a5c:	21c8      	movs	r1, #200	; 0xc8
 8009a5e:	187a      	adds	r2, r7, r1
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	1d7b      	adds	r3, r7, #5
 8009a64:	33ff      	adds	r3, #255	; 0xff
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d114      	bne.n	8009a96 <USB_EPStartXfer+0xef2>
 8009a6c:	187b      	adds	r3, r7, r1
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	4aa3      	ldr	r2, [pc, #652]	; (8009d04 <USB_EPStartXfer+0x1160>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	187b      	adds	r3, r7, r1
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	801a      	strh	r2, [r3, #0]
 8009a80:	187b      	adds	r3, r7, r1
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4a9f      	ldr	r2, [pc, #636]	; (8009d08 <USB_EPStartXfer+0x1164>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	187b      	adds	r3, r7, r1
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	801a      	strh	r2, [r3, #0]
 8009a94:	e066      	b.n	8009b64 <USB_EPStartXfer+0xfc0>
 8009a96:	1d7b      	adds	r3, r7, #5
 8009a98:	33ff      	adds	r3, #255	; 0xff
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a9e:	d81c      	bhi.n	8009ada <USB_EPStartXfer+0xf36>
 8009aa0:	1d7b      	adds	r3, r7, #5
 8009aa2:	33ff      	adds	r3, #255	; 0xff
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	21dc      	movs	r1, #220	; 0xdc
 8009aaa:	187a      	adds	r2, r7, r1
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	1d7b      	adds	r3, r7, #5
 8009ab0:	33ff      	adds	r3, #255	; 0xff
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <USB_EPStartXfer+0xf20>
 8009aba:	187b      	adds	r3, r7, r1
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	187a      	adds	r2, r7, r1
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	23dc      	movs	r3, #220	; 0xdc
 8009ac6:	18fb      	adds	r3, r7, r3
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	23c8      	movs	r3, #200	; 0xc8
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e044      	b.n	8009b64 <USB_EPStartXfer+0xfc0>
 8009ada:	1d7b      	adds	r3, r7, #5
 8009adc:	33ff      	adds	r3, #255	; 0xff
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	21dc      	movs	r1, #220	; 0xdc
 8009ae4:	187a      	adds	r2, r7, r1
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	1d7b      	adds	r3, r7, #5
 8009aea:	33ff      	adds	r3, #255	; 0xff
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	221f      	movs	r2, #31
 8009af0:	4013      	ands	r3, r2
 8009af2:	d104      	bne.n	8009afe <USB_EPStartXfer+0xf5a>
 8009af4:	187b      	adds	r3, r7, r1
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	187a      	adds	r2, r7, r1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	23dc      	movs	r3, #220	; 0xdc
 8009b00:	18fb      	adds	r3, r7, r3
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	029b      	lsls	r3, r3, #10
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4a7f      	ldr	r2, [pc, #508]	; (8009d08 <USB_EPStartXfer+0x1164>)
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	23c8      	movs	r3, #200	; 0xc8
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e024      	b.n	8009b64 <USB_EPStartXfer+0xfc0>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	785b      	ldrb	r3, [r3, #1]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d120      	bne.n	8009b64 <USB_EPStartXfer+0xfc0>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	21d4      	movs	r1, #212	; 0xd4
 8009b26:	187a      	adds	r2, r7, r1
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2250      	movs	r2, #80	; 0x50
 8009b2e:	5a9b      	ldrh	r3, [r3, r2]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	001a      	movs	r2, r3
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	189b      	adds	r3, r3, r2
 8009b3a:	187a      	adds	r2, r7, r1
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	00da      	lsls	r2, r3, #3
 8009b44:	187b      	adds	r3, r7, r1
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	18d3      	adds	r3, r2, r3
 8009b4a:	4a6d      	ldr	r2, [pc, #436]	; (8009d00 <USB_EPStartXfer+0x115c>)
 8009b4c:	4694      	mov	ip, r2
 8009b4e:	4463      	add	r3, ip
 8009b50:	21d0      	movs	r1, #208	; 0xd0
 8009b52:	187a      	adds	r2, r7, r1
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	1d7b      	adds	r3, r7, #5
 8009b58:	33ff      	adds	r3, #255	; 0xff
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	187b      	adds	r3, r7, r1
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	22c4      	movs	r2, #196	; 0xc4
 8009b68:	18ba      	adds	r2, r7, r2
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	785b      	ldrb	r3, [r3, #1]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d000      	beq.n	8009b76 <USB_EPStartXfer+0xfd2>
 8009b74:	e075      	b.n	8009c62 <USB_EPStartXfer+0x10be>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	21bc      	movs	r1, #188	; 0xbc
 8009b7a:	187a      	adds	r2, r7, r1
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2250      	movs	r2, #80	; 0x50
 8009b82:	5a9b      	ldrh	r3, [r3, r2]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	001a      	movs	r2, r3
 8009b88:	187b      	adds	r3, r7, r1
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	187a      	adds	r2, r7, r1
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	00da      	lsls	r2, r3, #3
 8009b98:	187b      	adds	r3, r7, r1
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	18d3      	adds	r3, r2, r3
 8009b9e:	4a5b      	ldr	r2, [pc, #364]	; (8009d0c <USB_EPStartXfer+0x1168>)
 8009ba0:	4694      	mov	ip, r2
 8009ba2:	4463      	add	r3, ip
 8009ba4:	21b8      	movs	r1, #184	; 0xb8
 8009ba6:	187a      	adds	r2, r7, r1
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	1d7b      	adds	r3, r7, #5
 8009bac:	33ff      	adds	r3, #255	; 0xff
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d114      	bne.n	8009bde <USB_EPStartXfer+0x103a>
 8009bb4:	187b      	adds	r3, r7, r1
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	4a51      	ldr	r2, [pc, #324]	; (8009d04 <USB_EPStartXfer+0x1160>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	187b      	adds	r3, r7, r1
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	801a      	strh	r2, [r3, #0]
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4a4d      	ldr	r2, [pc, #308]	; (8009d08 <USB_EPStartXfer+0x1164>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	187b      	adds	r3, r7, r1
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	e066      	b.n	8009cac <USB_EPStartXfer+0x1108>
 8009bde:	1d7b      	adds	r3, r7, #5
 8009be0:	33ff      	adds	r3, #255	; 0xff
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b3e      	cmp	r3, #62	; 0x3e
 8009be6:	d81c      	bhi.n	8009c22 <USB_EPStartXfer+0x107e>
 8009be8:	1d7b      	adds	r3, r7, #5
 8009bea:	33ff      	adds	r3, #255	; 0xff
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	085b      	lsrs	r3, r3, #1
 8009bf0:	21d8      	movs	r1, #216	; 0xd8
 8009bf2:	187a      	adds	r2, r7, r1
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	1d7b      	adds	r3, r7, #5
 8009bf8:	33ff      	adds	r3, #255	; 0xff
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	4013      	ands	r3, r2
 8009c00:	d004      	beq.n	8009c0c <USB_EPStartXfer+0x1068>
 8009c02:	187b      	adds	r3, r7, r1
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	187a      	adds	r2, r7, r1
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	23d8      	movs	r3, #216	; 0xd8
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	029b      	lsls	r3, r3, #10
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	23b8      	movs	r3, #184	; 0xb8
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e044      	b.n	8009cac <USB_EPStartXfer+0x1108>
 8009c22:	1d7b      	adds	r3, r7, #5
 8009c24:	33ff      	adds	r3, #255	; 0xff
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	21d8      	movs	r1, #216	; 0xd8
 8009c2c:	187a      	adds	r2, r7, r1
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	1d7b      	adds	r3, r7, #5
 8009c32:	33ff      	adds	r3, #255	; 0xff
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	221f      	movs	r2, #31
 8009c38:	4013      	ands	r3, r2
 8009c3a:	d104      	bne.n	8009c46 <USB_EPStartXfer+0x10a2>
 8009c3c:	187b      	adds	r3, r7, r1
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	187a      	adds	r2, r7, r1
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	23d8      	movs	r3, #216	; 0xd8
 8009c48:	18fb      	adds	r3, r7, r3
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	029b      	lsls	r3, r3, #10
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	4a2d      	ldr	r2, [pc, #180]	; (8009d08 <USB_EPStartXfer+0x1164>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	23b8      	movs	r3, #184	; 0xb8
 8009c5a:	18fb      	adds	r3, r7, r3
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e024      	b.n	8009cac <USB_EPStartXfer+0x1108>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d120      	bne.n	8009cac <USB_EPStartXfer+0x1108>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2250      	movs	r2, #80	; 0x50
 8009c6e:	5a9b      	ldrh	r3, [r3, r2]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	001a      	movs	r2, r3
 8009c74:	21c4      	movs	r1, #196	; 0xc4
 8009c76:	187b      	adds	r3, r7, r1
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	187a      	adds	r2, r7, r1
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	00da      	lsls	r2, r3, #3
 8009c86:	187b      	adds	r3, r7, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <USB_EPStartXfer+0x1168>)
 8009c8e:	4694      	mov	ip, r2
 8009c90:	4463      	add	r3, ip
 8009c92:	21c0      	movs	r1, #192	; 0xc0
 8009c94:	187a      	adds	r2, r7, r1
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	1d7b      	adds	r3, r7, #5
 8009c9a:	33ff      	adds	r3, #255	; 0xff
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	187b      	adds	r3, r7, r1
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e001      	b.n	8009cac <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e025      	b.n	8009cf8 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	208a      	movs	r0, #138	; 0x8a
 8009cbc:	183b      	adds	r3, r7, r0
 8009cbe:	4914      	ldr	r1, [pc, #80]	; (8009d10 <USB_EPStartXfer+0x116c>)
 8009cc0:	400a      	ands	r2, r1
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	183a      	adds	r2, r7, r0
 8009cc8:	8812      	ldrh	r2, [r2, #0]
 8009cca:	2180      	movs	r1, #128	; 0x80
 8009ccc:	0149      	lsls	r1, r1, #5
 8009cce:	404a      	eors	r2, r1
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	183b      	adds	r3, r7, r0
 8009cd4:	183a      	adds	r2, r7, r0
 8009cd6:	8812      	ldrh	r2, [r2, #0]
 8009cd8:	2180      	movs	r1, #128	; 0x80
 8009cda:	0189      	lsls	r1, r1, #6
 8009cdc:	404a      	eors	r2, r1
 8009cde:	801a      	strh	r2, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	18d3      	adds	r3, r2, r3
 8009cea:	183a      	adds	r2, r7, r0
 8009cec:	8812      	ldrh	r2, [r2, #0]
 8009cee:	4909      	ldr	r1, [pc, #36]	; (8009d14 <USB_EPStartXfer+0x1170>)
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	b043      	add	sp, #268	; 0x10c
 8009cfe:	bd90      	pop	{r4, r7, pc}
 8009d00:	00000402 	.word	0x00000402
 8009d04:	ffff83ff 	.word	0xffff83ff
 8009d08:	ffff8000 	.word	0xffff8000
 8009d0c:	00000406 	.word	0x00000406
 8009d10:	ffffbf8f 	.word	0xffffbf8f
 8009d14:	ffff8080 	.word	0xffff8080

08009d18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d01d      	beq.n	8009d66 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	18d3      	adds	r3, r2, r3
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	200c      	movs	r0, #12
 8009d3a:	183b      	adds	r3, r7, r0
 8009d3c:	491b      	ldr	r1, [pc, #108]	; (8009dac <USB_EPSetStall+0x94>)
 8009d3e:	400a      	ands	r2, r1
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	183b      	adds	r3, r7, r0
 8009d44:	183a      	adds	r2, r7, r0
 8009d46:	8812      	ldrh	r2, [r2, #0]
 8009d48:	2110      	movs	r1, #16
 8009d4a:	404a      	eors	r2, r1
 8009d4c:	801a      	strh	r2, [r3, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	18d3      	adds	r3, r2, r3
 8009d58:	183a      	adds	r2, r7, r0
 8009d5a:	8812      	ldrh	r2, [r2, #0]
 8009d5c:	4914      	ldr	r1, [pc, #80]	; (8009db0 <USB_EPSetStall+0x98>)
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	b292      	uxth	r2, r2
 8009d62:	801a      	strh	r2, [r3, #0]
 8009d64:	e01d      	b.n	8009da2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	18d3      	adds	r3, r2, r3
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	200e      	movs	r0, #14
 8009d76:	183b      	adds	r3, r7, r0
 8009d78:	490e      	ldr	r1, [pc, #56]	; (8009db4 <USB_EPSetStall+0x9c>)
 8009d7a:	400a      	ands	r2, r1
 8009d7c:	801a      	strh	r2, [r3, #0]
 8009d7e:	183b      	adds	r3, r7, r0
 8009d80:	183a      	adds	r2, r7, r0
 8009d82:	8812      	ldrh	r2, [r2, #0]
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	0149      	lsls	r1, r1, #5
 8009d88:	404a      	eors	r2, r1
 8009d8a:	801a      	strh	r2, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	18d3      	adds	r3, r2, r3
 8009d96:	183a      	adds	r2, r7, r0
 8009d98:	8812      	ldrh	r2, [r2, #0]
 8009d9a:	4905      	ldr	r1, [pc, #20]	; (8009db0 <USB_EPSetStall+0x98>)
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	b292      	uxth	r2, r2
 8009da0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	0018      	movs	r0, r3
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b004      	add	sp, #16
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	ffff8fbf 	.word	0xffff8fbf
 8009db0:	ffff8080 	.word	0xffff8080
 8009db4:	ffffbf8f 	.word	0xffffbf8f

08009db8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	7b1b      	ldrb	r3, [r3, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d000      	beq.n	8009dcc <USB_EPClearStall+0x14>
 8009dca:	e095      	b.n	8009ef8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d046      	beq.n	8009e62 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	18d2      	adds	r2, r2, r3
 8009dde:	2110      	movs	r1, #16
 8009de0:	187b      	adds	r3, r7, r1
 8009de2:	8812      	ldrh	r2, [r2, #0]
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	187b      	adds	r3, r7, r1
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	2240      	movs	r2, #64	; 0x40
 8009dec:	4013      	ands	r3, r2
 8009dee:	d016      	beq.n	8009e1e <USB_EPClearStall+0x66>
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	18d3      	adds	r3, r2, r3
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	200e      	movs	r0, #14
 8009e00:	183b      	adds	r3, r7, r0
 8009e02:	4940      	ldr	r1, [pc, #256]	; (8009f04 <USB_EPClearStall+0x14c>)
 8009e04:	400a      	ands	r2, r1
 8009e06:	801a      	strh	r2, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	183a      	adds	r2, r7, r0
 8009e14:	8812      	ldrh	r2, [r2, #0]
 8009e16:	493c      	ldr	r1, [pc, #240]	; (8009f08 <USB_EPClearStall+0x150>)
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	78db      	ldrb	r3, [r3, #3]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d068      	beq.n	8009ef8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	18d3      	adds	r3, r2, r3
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	200c      	movs	r0, #12
 8009e36:	183b      	adds	r3, r7, r0
 8009e38:	4934      	ldr	r1, [pc, #208]	; (8009f0c <USB_EPClearStall+0x154>)
 8009e3a:	400a      	ands	r2, r1
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	183b      	adds	r3, r7, r0
 8009e40:	183a      	adds	r2, r7, r0
 8009e42:	8812      	ldrh	r2, [r2, #0]
 8009e44:	2120      	movs	r1, #32
 8009e46:	404a      	eors	r2, r1
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	183a      	adds	r2, r7, r0
 8009e56:	8812      	ldrh	r2, [r2, #0]
 8009e58:	492d      	ldr	r1, [pc, #180]	; (8009f10 <USB_EPClearStall+0x158>)
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	e04a      	b.n	8009ef8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	18d2      	adds	r2, r2, r3
 8009e6c:	2116      	movs	r1, #22
 8009e6e:	187b      	adds	r3, r7, r1
 8009e70:	8812      	ldrh	r2, [r2, #0]
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	187b      	adds	r3, r7, r1
 8009e76:	881a      	ldrh	r2, [r3, #0]
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	01db      	lsls	r3, r3, #7
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	d016      	beq.n	8009eae <USB_EPClearStall+0xf6>
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	18d3      	adds	r3, r2, r3
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	2014      	movs	r0, #20
 8009e90:	183b      	adds	r3, r7, r0
 8009e92:	491c      	ldr	r1, [pc, #112]	; (8009f04 <USB_EPClearStall+0x14c>)
 8009e94:	400a      	ands	r2, r1
 8009e96:	801a      	strh	r2, [r3, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	18d3      	adds	r3, r2, r3
 8009ea2:	183a      	adds	r2, r7, r0
 8009ea4:	8812      	ldrh	r2, [r2, #0]
 8009ea6:	491b      	ldr	r1, [pc, #108]	; (8009f14 <USB_EPClearStall+0x15c>)
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	b292      	uxth	r2, r2
 8009eac:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	18d3      	adds	r3, r2, r3
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	2012      	movs	r0, #18
 8009ebe:	183b      	adds	r3, r7, r0
 8009ec0:	4915      	ldr	r1, [pc, #84]	; (8009f18 <USB_EPClearStall+0x160>)
 8009ec2:	400a      	ands	r2, r1
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	183b      	adds	r3, r7, r0
 8009ec8:	183a      	adds	r2, r7, r0
 8009eca:	8812      	ldrh	r2, [r2, #0]
 8009ecc:	2180      	movs	r1, #128	; 0x80
 8009ece:	0149      	lsls	r1, r1, #5
 8009ed0:	404a      	eors	r2, r1
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	183b      	adds	r3, r7, r0
 8009ed6:	183a      	adds	r2, r7, r0
 8009ed8:	8812      	ldrh	r2, [r2, #0]
 8009eda:	2180      	movs	r1, #128	; 0x80
 8009edc:	0189      	lsls	r1, r1, #6
 8009ede:	404a      	eors	r2, r1
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	18d3      	adds	r3, r2, r3
 8009eec:	183a      	adds	r2, r7, r0
 8009eee:	8812      	ldrh	r2, [r2, #0]
 8009ef0:	4907      	ldr	r1, [pc, #28]	; (8009f10 <USB_EPClearStall+0x158>)
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	0018      	movs	r0, r3
 8009efc:	46bd      	mov	sp, r7
 8009efe:	b006      	add	sp, #24
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	ffff8f8f 	.word	0xffff8f8f
 8009f08:	ffff80c0 	.word	0xffff80c0
 8009f0c:	ffff8fbf 	.word	0xffff8fbf
 8009f10:	ffff8080 	.word	0xffff8080
 8009f14:	ffffc080 	.word	0xffffc080
 8009f18:	ffffbf8f 	.word	0xffffbf8f

08009f1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	000a      	movs	r2, r1
 8009f26:	1cfb      	adds	r3, r7, #3
 8009f28:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009f2a:	1cfb      	adds	r3, r7, #3
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	224c      	movs	r2, #76	; 0x4c
 8009f36:	2180      	movs	r1, #128	; 0x80
 8009f38:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	b002      	add	sp, #8
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2258      	movs	r2, #88	; 0x58
 8009f50:	5a9b      	ldrh	r3, [r3, r2]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4a05      	ldr	r2, [pc, #20]	; (8009f6c <USB_DevConnect+0x28>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	b299      	uxth	r1, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2258      	movs	r2, #88	; 0x58
 8009f5e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	0018      	movs	r0, r3
 8009f64:	46bd      	mov	sp, r7
 8009f66:	b002      	add	sp, #8
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	ffff8000 	.word	0xffff8000

08009f70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2244      	movs	r2, #68	; 0x44
 8009f7c:	5a9b      	ldrh	r3, [r3, r2]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009f82:	68fb      	ldr	r3, [r7, #12]
}
 8009f84:	0018      	movs	r0, r3
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b004      	add	sp, #16
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	0019      	movs	r1, r3
 8009f98:	1dbb      	adds	r3, r7, #6
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	1d3b      	adds	r3, r7, #4
 8009f9e:	1c0a      	adds	r2, r1, #0
 8009fa0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fa2:	1d3b      	adds	r3, r7, #4
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fb4:	1dbb      	adds	r3, r7, #6
 8009fb6:	881a      	ldrh	r2, [r3, #0]
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	18d3      	adds	r3, r2, r3
 8009fbc:	2280      	movs	r2, #128	; 0x80
 8009fbe:	00d2      	lsls	r2, r2, #3
 8009fc0:	4694      	mov	ip, r2
 8009fc2:	4463      	add	r3, ip
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fca:	e01b      	b.n	800a004 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	001a      	movs	r2, r3
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	3302      	adds	r3, #2
 8009ff6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a000:	3b01      	subs	r3, #1
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e0      	bne.n	8009fcc <USB_WritePMA+0x40>
  }
}
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	46c0      	nop			; (mov r8, r8)
 800a00e:	46bd      	mov	sp, r7
 800a010:	b00c      	add	sp, #48	; 0x30
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08a      	sub	sp, #40	; 0x28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	0019      	movs	r1, r3
 800a020:	1dbb      	adds	r3, r7, #6
 800a022:	801a      	strh	r2, [r3, #0]
 800a024:	1d3b      	adds	r3, r7, #4
 800a026:	1c0a      	adds	r2, r1, #0
 800a028:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a02a:	1d3b      	adds	r3, r7, #4
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	b29b      	uxth	r3, r3
 800a032:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a03c:	1dbb      	adds	r3, r7, #6
 800a03e:	881a      	ldrh	r2, [r3, #0]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	18d3      	adds	r3, r2, r3
 800a044:	2280      	movs	r2, #128	; 0x80
 800a046:	00d2      	lsls	r2, r2, #3
 800a048:	4694      	mov	ip, r2
 800a04a:	4463      	add	r3, ip
 800a04c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
 800a052:	e018      	b.n	800a086 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	3302      	adds	r3, #2
 800a060:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	b2da      	uxtb	r2, r3
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	3301      	adds	r3, #1
 800a06e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	b2da      	uxtb	r2, r3
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	3301      	adds	r3, #1
 800a07e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	3b01      	subs	r3, #1
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e3      	bne.n	800a054 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a08c:	1d3b      	adds	r3, r7, #4
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	2201      	movs	r2, #1
 800a092:	4013      	ands	r3, r2
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	701a      	strb	r2, [r3, #0]
  }
}
 800a0aa:	46c0      	nop			; (mov r8, r8)
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	b00a      	add	sp, #40	; 0x28
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	000a      	movs	r2, r1
 800a0bc:	1cfb      	adds	r3, r7, #3
 800a0be:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a0c0:	230f      	movs	r3, #15
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	7c1b      	ldrb	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d116      	bne.n	800a0fe <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	2181      	movs	r1, #129	; 0x81
 800a0da:	f002 f8b4 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	f002 f8aa 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	23b6      	movs	r3, #182	; 0xb6
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	50d1      	str	r1, [r2, r3]
 800a0fc:	e013      	b.n	800a126 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	2202      	movs	r2, #2
 800a104:	2181      	movs	r1, #129	; 0x81
 800a106:	f002 f89e 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	2340      	movs	r3, #64	; 0x40
 800a114:	2202      	movs	r2, #2
 800a116:	2101      	movs	r1, #1
 800a118:	f002 f895 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	23b6      	movs	r3, #182	; 0xb6
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	2101      	movs	r1, #1
 800a124:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	2308      	movs	r3, #8
 800a12a:	2203      	movs	r2, #3
 800a12c:	2182      	movs	r1, #130	; 0x82
 800a12e:	f002 f88a 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a138:	2387      	movs	r3, #135	; 0x87
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	0018      	movs	r0, r3
 800a13e:	f002 fa1b 	bl	800c578 <USBD_static_malloc>
 800a142:	0001      	movs	r1, r0
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	23ae      	movs	r3, #174	; 0xae
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	23ae      	movs	r3, #174	; 0xae
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	58d3      	ldr	r3, [r2, r3]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a158:	230f      	movs	r3, #15
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	2201      	movs	r2, #1
 800a15e:	701a      	strb	r2, [r3, #0]
 800a160:	e02c      	b.n	800a1bc <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	23ae      	movs	r3, #174	; 0xae
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	58d3      	ldr	r3, [r2, r3]
 800a16a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	23af      	movs	r3, #175	; 0xaf
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	58d3      	ldr	r3, [r2, r3]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	2385      	movs	r3, #133	; 0x85
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	2100      	movs	r1, #0
 800a180:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	2386      	movs	r3, #134	; 0x86
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	2100      	movs	r1, #0
 800a18a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7c1b      	ldrb	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	2381      	movs	r3, #129	; 0x81
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	58d2      	ldr	r2, [r2, r3]
 800a19c:	2380      	movs	r3, #128	; 0x80
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	f002 f99a 	bl	800c4dc <USBD_LL_PrepareReceive>
 800a1a8:	e008      	b.n	800a1bc <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	2381      	movs	r3, #129	; 0x81
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	58d2      	ldr	r2, [r2, r3]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	f002 f990 	bl	800c4dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a1bc:	230f      	movs	r3, #15
 800a1be:	18fb      	adds	r3, r7, r3
 800a1c0:	781b      	ldrb	r3, [r3, #0]
}
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	b004      	add	sp, #16
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	000a      	movs	r2, r1
 800a1d4:	1cfb      	adds	r3, r7, #3
 800a1d6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a1d8:	230f      	movs	r3, #15
 800a1da:	18fb      	adds	r3, r7, r3
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2181      	movs	r1, #129	; 0x81
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	f002 f865 	bl	800c2b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f002 f85d 	bl	800c2b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	23b6      	movs	r3, #182	; 0xb6
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	2100      	movs	r1, #0
 800a202:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2182      	movs	r1, #130	; 0x82
 800a208:	0018      	movs	r0, r3
 800a20a:	f002 f853 	bl	800c2b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	23ae      	movs	r3, #174	; 0xae
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	58d3      	ldr	r3, [r2, r3]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d011      	beq.n	800a244 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	23af      	movs	r3, #175	; 0xaf
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	58d3      	ldr	r3, [r2, r3]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	23ae      	movs	r3, #174	; 0xae
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	58d3      	ldr	r3, [r2, r3]
 800a234:	0018      	movs	r0, r3
 800a236:	f002 f9ab 	bl	800c590 <USBD_static_free>
    pdev->pClassData = NULL;
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	23ae      	movs	r3, #174	; 0xae
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	2100      	movs	r1, #0
 800a242:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a244:	230f      	movs	r3, #15
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	781b      	ldrb	r3, [r3, #0]
}
 800a24a:	0018      	movs	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b004      	add	sp, #16
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	23ae      	movs	r3, #174	; 0xae
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	58d3      	ldr	r3, [r2, r3]
 800a266:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a268:	230f      	movs	r3, #15
 800a26a:	18fb      	adds	r3, r7, r3
 800a26c:	2200      	movs	r2, #0
 800a26e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a270:	230c      	movs	r3, #12
 800a272:	18fb      	adds	r3, r7, r3
 800a274:	2200      	movs	r2, #0
 800a276:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a278:	2317      	movs	r3, #23
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	001a      	movs	r2, r3
 800a286:	2360      	movs	r3, #96	; 0x60
 800a288:	4013      	ands	r3, r2
 800a28a:	d03d      	beq.n	800a308 <USBD_CDC_Setup+0xb4>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d000      	beq.n	800a292 <USBD_CDC_Setup+0x3e>
 800a290:	e094      	b.n	800a3bc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d02b      	beq.n	800a2f2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b25b      	sxtb	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da12      	bge.n	800a2ca <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	23af      	movs	r3, #175	; 0xaf
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	58d3      	ldr	r3, [r2, r3]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a2b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	88d2      	ldrh	r2, [r2, #6]
 800a2b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2ba:	6939      	ldr	r1, [r7, #16]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	88da      	ldrh	r2, [r3, #6]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f001 fbb2 	bl	800ba2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a2c8:	e083      	b.n	800a3d2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	7859      	ldrb	r1, [r3, #1]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	2380      	movs	r3, #128	; 0x80
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	88db      	ldrh	r3, [r3, #6]
 800a2da:	b2d9      	uxtb	r1, r3
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	4a40      	ldr	r2, [pc, #256]	; (800a3e0 <USBD_CDC_Setup+0x18c>)
 800a2e0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2e2:	6939      	ldr	r1, [r7, #16]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	88da      	ldrh	r2, [r3, #6]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f001 fbd1 	bl	800ba92 <USBD_CtlPrepareRx>
      break;
 800a2f0:	e06f      	b.n	800a3d2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	23af      	movs	r3, #175	; 0xaf
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	58d3      	ldr	r3, [r2, r3]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	7850      	ldrb	r0, [r2, #1]
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	2200      	movs	r2, #0
 800a304:	4798      	blx	r3
      break;
 800a306:	e064      	b.n	800a3d2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b0b      	cmp	r3, #11
 800a30e:	d037      	beq.n	800a380 <USBD_CDC_Setup+0x12c>
 800a310:	dc47      	bgt.n	800a3a2 <USBD_CDC_Setup+0x14e>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <USBD_CDC_Setup+0xc8>
 800a316:	2b0a      	cmp	r3, #10
 800a318:	d019      	beq.n	800a34e <USBD_CDC_Setup+0xfa>
 800a31a:	e042      	b.n	800a3a2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	23a7      	movs	r3, #167	; 0xa7
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	5cd3      	ldrb	r3, [r2, r3]
 800a324:	2b03      	cmp	r3, #3
 800a326:	d107      	bne.n	800a338 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a328:	230c      	movs	r3, #12
 800a32a:	18f9      	adds	r1, r7, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	0018      	movs	r0, r3
 800a332:	f001 fb7b 	bl	800ba2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a336:	e040      	b.n	800a3ba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	0011      	movs	r1, r2
 800a33e:	0018      	movs	r0, r3
 800a340:	f001 faf6 	bl	800b930 <USBD_CtlError>
            ret = USBD_FAIL;
 800a344:	2317      	movs	r3, #23
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	2202      	movs	r2, #2
 800a34a:	701a      	strb	r2, [r3, #0]
          break;
 800a34c:	e035      	b.n	800a3ba <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	23a7      	movs	r3, #167	; 0xa7
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	5cd3      	ldrb	r3, [r2, r3]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d107      	bne.n	800a36a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a35a:	230f      	movs	r3, #15
 800a35c:	18f9      	adds	r1, r7, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	0018      	movs	r0, r3
 800a364:	f001 fb62 	bl	800ba2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a368:	e027      	b.n	800a3ba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	0011      	movs	r1, r2
 800a370:	0018      	movs	r0, r3
 800a372:	f001 fadd 	bl	800b930 <USBD_CtlError>
            ret = USBD_FAIL;
 800a376:	2317      	movs	r3, #23
 800a378:	18fb      	adds	r3, r7, r3
 800a37a:	2202      	movs	r2, #2
 800a37c:	701a      	strb	r2, [r3, #0]
          break;
 800a37e:	e01c      	b.n	800a3ba <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	23a7      	movs	r3, #167	; 0xa7
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	5cd3      	ldrb	r3, [r2, r3]
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d015      	beq.n	800a3b8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	0011      	movs	r1, r2
 800a392:	0018      	movs	r0, r3
 800a394:	f001 facc 	bl	800b930 <USBD_CtlError>
            ret = USBD_FAIL;
 800a398:	2317      	movs	r3, #23
 800a39a:	18fb      	adds	r3, r7, r3
 800a39c:	2202      	movs	r2, #2
 800a39e:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a3a0:	e00a      	b.n	800a3b8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	0011      	movs	r1, r2
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f001 fac1 	bl	800b930 <USBD_CtlError>
          ret = USBD_FAIL;
 800a3ae:	2317      	movs	r3, #23
 800a3b0:	18fb      	adds	r3, r7, r3
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	701a      	strb	r2, [r3, #0]
          break;
 800a3b6:	e000      	b.n	800a3ba <USBD_CDC_Setup+0x166>
          break;
 800a3b8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a3ba:	e00a      	b.n	800a3d2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f001 fab4 	bl	800b930 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3c8:	2317      	movs	r3, #23
 800a3ca:	18fb      	adds	r3, r7, r3
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	701a      	strb	r2, [r3, #0]
      break;
 800a3d0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a3d2:	2317      	movs	r3, #23
 800a3d4:	18fb      	adds	r3, r7, r3
 800a3d6:	781b      	ldrb	r3, [r3, #0]
}
 800a3d8:	0018      	movs	r0, r3
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	b006      	add	sp, #24
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	00000201 	.word	0x00000201

0800a3e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	000a      	movs	r2, r1
 800a3ee:	1cfb      	adds	r3, r7, #3
 800a3f0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	23ae      	movs	r3, #174	; 0xae
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	58d3      	ldr	r3, [r2, r3]
 800a3fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	23b0      	movs	r3, #176	; 0xb0
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	58d3      	ldr	r3, [r2, r3]
 800a404:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	23ae      	movs	r3, #174	; 0xae
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	58d3      	ldr	r3, [r2, r3]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d03e      	beq.n	800a490 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a412:	1cfb      	adds	r3, r7, #3
 800a414:	781a      	ldrb	r2, [r3, #0]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	0013      	movs	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	189b      	adds	r3, r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	18cb      	adds	r3, r1, r3
 800a422:	331c      	adds	r3, #28
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d02b      	beq.n	800a482 <USBD_CDC_DataIn+0x9e>
 800a42a:	1cfb      	adds	r3, r7, #3
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	0013      	movs	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	189b      	adds	r3, r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	18cb      	adds	r3, r1, r3
 800a43a:	331c      	adds	r3, #28
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	1cfb      	adds	r3, r7, #3
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	0013      	movs	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	189b      	adds	r3, r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	18cb      	adds	r3, r1, r3
 800a44e:	3338      	adds	r3, #56	; 0x38
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	0019      	movs	r1, r3
 800a454:	f7f5 fef0 	bl	8000238 <__aeabi_uidivmod>
 800a458:	1e0b      	subs	r3, r1, #0
 800a45a:	d112      	bne.n	800a482 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a45c:	1cfb      	adds	r3, r7, #3
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	0013      	movs	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	189b      	adds	r3, r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	18cb      	adds	r3, r1, r3
 800a46c:	331c      	adds	r3, #28
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a472:	1cfb      	adds	r3, r7, #3
 800a474:	7819      	ldrb	r1, [r3, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	2300      	movs	r3, #0
 800a47a:	2200      	movs	r2, #0
 800a47c:	f001 fff7 	bl	800c46e <USBD_LL_Transmit>
 800a480:	e004      	b.n	800a48c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	2385      	movs	r3, #133	; 0x85
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	2100      	movs	r1, #0
 800a48a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e000      	b.n	800a492 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a490:	2302      	movs	r3, #2
  }
}
 800a492:	0018      	movs	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	b004      	add	sp, #16
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	000a      	movs	r2, r1
 800a4a4:	1cfb      	adds	r3, r7, #3
 800a4a6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	23ae      	movs	r3, #174	; 0xae
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	58d3      	ldr	r3, [r2, r3]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4b2:	1cfb      	adds	r3, r7, #3
 800a4b4:	781a      	ldrb	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	0011      	movs	r1, r2
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f002 f845 	bl	800c54a <USBD_LL_GetRxDataSize>
 800a4c0:	0001      	movs	r1, r0
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	2383      	movs	r3, #131	; 0x83
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	23ae      	movs	r3, #174	; 0xae
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	58d3      	ldr	r3, [r2, r3]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d011      	beq.n	800a4fa <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	23af      	movs	r3, #175	; 0xaf
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	58d3      	ldr	r3, [r2, r3]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	68f9      	ldr	r1, [r7, #12]
 800a4e2:	2381      	movs	r3, #129	; 0x81
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	58c8      	ldr	r0, [r1, r3]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2183      	movs	r1, #131	; 0x83
 800a4ec:	0089      	lsls	r1, r1, #2
 800a4ee:	468c      	mov	ip, r1
 800a4f0:	4463      	add	r3, ip
 800a4f2:	0019      	movs	r1, r3
 800a4f4:	4790      	blx	r2

    return USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e000      	b.n	800a4fc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a4fa:	2302      	movs	r3, #2
  }
}
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	46bd      	mov	sp, r7
 800a500:	b004      	add	sp, #16
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a504:	b590      	push	{r4, r7, lr}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	23ae      	movs	r3, #174	; 0xae
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	58d3      	ldr	r3, [r2, r3]
 800a514:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	23af      	movs	r3, #175	; 0xaf
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	58d3      	ldr	r3, [r2, r3]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d019      	beq.n	800a556 <USBD_CDC_EP0_RxReady+0x52>
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	5cd3      	ldrb	r3, [r2, r3]
 800a52a:	2bff      	cmp	r3, #255	; 0xff
 800a52c:	d013      	beq.n	800a556 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	23af      	movs	r3, #175	; 0xaf
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	58d3      	ldr	r3, [r2, r3]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	68f9      	ldr	r1, [r7, #12]
 800a53a:	2280      	movs	r2, #128	; 0x80
 800a53c:	0092      	lsls	r2, r2, #2
 800a53e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a540:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4c06      	ldr	r4, [pc, #24]	; (800a560 <USBD_CDC_EP0_RxReady+0x5c>)
 800a546:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a548:	b292      	uxth	r2, r2
 800a54a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	2380      	movs	r3, #128	; 0x80
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	21ff      	movs	r1, #255	; 0xff
 800a554:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	0018      	movs	r0, r3
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b005      	add	sp, #20
 800a55e:	bd90      	pop	{r4, r7, pc}
 800a560:	00000201 	.word	0x00000201

0800a564 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2243      	movs	r2, #67	; 0x43
 800a570:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a572:	4b02      	ldr	r3, [pc, #8]	; (800a57c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a574:	0018      	movs	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	b002      	add	sp, #8
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000094 	.word	0x20000094

0800a580 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2243      	movs	r2, #67	; 0x43
 800a58c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a58e:	4b02      	ldr	r3, [pc, #8]	; (800a598 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a590:	0018      	movs	r0, r3
 800a592:	46bd      	mov	sp, r7
 800a594:	b002      	add	sp, #8
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000050 	.word	0x20000050

0800a59c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2243      	movs	r2, #67	; 0x43
 800a5a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a5aa:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	b002      	add	sp, #8
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	200000d8 	.word	0x200000d8

0800a5b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	220a      	movs	r2, #10
 800a5c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a5c6:	4b02      	ldr	r3, [pc, #8]	; (800a5d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	2000000c 	.word	0x2000000c

0800a5d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a5de:	200f      	movs	r0, #15
 800a5e0:	183b      	adds	r3, r7, r0
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d007      	beq.n	800a5fc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	23af      	movs	r3, #175	; 0xaf
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a5f6:	183b      	adds	r3, r7, r0
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a5fc:	230f      	movs	r3, #15
 800a5fe:	18fb      	adds	r3, r7, r3
 800a600:	781b      	ldrb	r3, [r3, #0]
}
 800a602:	0018      	movs	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	b004      	add	sp, #16
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	1dbb      	adds	r3, r7, #6
 800a616:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	23ae      	movs	r3, #174	; 0xae
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	58d3      	ldr	r3, [r2, r3]
 800a620:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	2382      	movs	r3, #130	; 0x82
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a62c:	1dbb      	adds	r3, r7, #6
 800a62e:	8819      	ldrh	r1, [r3, #0]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	2384      	movs	r3, #132	; 0x84
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	0018      	movs	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	b006      	add	sp, #24
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	23ae      	movs	r3, #174	; 0xae
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	58d3      	ldr	r3, [r2, r3]
 800a654:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	2381      	movs	r3, #129	; 0x81
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	0018      	movs	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	b004      	add	sp, #16
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	23ae      	movs	r3, #174	; 0xae
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	58d3      	ldr	r3, [r2, r3]
 800a67a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	23ae      	movs	r3, #174	; 0xae
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	58d3      	ldr	r3, [r2, r3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d022      	beq.n	800a6ce <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	2385      	movs	r3, #133	; 0x85
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	58d3      	ldr	r3, [r2, r3]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11a      	bne.n	800a6ca <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	2385      	movs	r3, #133	; 0x85
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	2101      	movs	r1, #1
 800a69c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	2384      	movs	r3, #132	; 0x84
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	58d2      	ldr	r2, [r2, r3]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	2382      	movs	r3, #130	; 0x82
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	2384      	movs	r3, #132	; 0x84
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	000a      	movs	r2, r1
 800a6c0:	2181      	movs	r1, #129	; 0x81
 800a6c2:	f001 fed4 	bl	800c46e <USBD_LL_Transmit>

      return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e002      	b.n	800a6d0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a6ce:	2302      	movs	r3, #2
  }
}
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b004      	add	sp, #16
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	23ae      	movs	r3, #174	; 0xae
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	58d3      	ldr	r3, [r2, r3]
 800a6e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	23ae      	movs	r3, #174	; 0xae
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	58d3      	ldr	r3, [r2, r3]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d019      	beq.n	800a72a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7c1b      	ldrb	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	2381      	movs	r3, #129	; 0x81
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	58d2      	ldr	r2, [r2, r3]
 800a706:	2380      	movs	r3, #128	; 0x80
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	2101      	movs	r1, #1
 800a70e:	f001 fee5 	bl	800c4dc <USBD_LL_PrepareReceive>
 800a712:	e008      	b.n	800a726 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	2381      	movs	r3, #129	; 0x81
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	58d2      	ldr	r2, [r2, r3]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	2101      	movs	r1, #1
 800a722:	f001 fedb 	bl	800c4dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	e000      	b.n	800a72c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a72a:	2302      	movs	r3, #2
  }
}
 800a72c:	0018      	movs	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	b004      	add	sp, #16
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	1dfb      	adds	r3, r7, #7
 800a740:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a748:	2302      	movs	r3, #2
 800a74a:	e020      	b.n	800a78e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	23ad      	movs	r3, #173	; 0xad
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	58d3      	ldr	r3, [r2, r3]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	23ad      	movs	r3, #173	; 0xad
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	2100      	movs	r1, #0
 800a760:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	23ac      	movs	r3, #172	; 0xac
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	23a7      	movs	r3, #167	; 0xa7
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	2101      	movs	r1, #1
 800a77a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	1dfa      	adds	r2, r7, #7
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	0018      	movs	r0, r3
 800a788:	f001 fcd4 	bl	800c134 <USBD_LL_Init>

  return USBD_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	0018      	movs	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	b004      	add	sp, #16
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7a0:	200f      	movs	r0, #15
 800a7a2:	183b      	adds	r3, r7, r0
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	23ad      	movs	r3, #173	; 0xad
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a7b8:	183b      	adds	r3, r7, r0
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	e003      	b.n	800a7c8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7c0:	230f      	movs	r3, #15
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a7c8:	230f      	movs	r3, #15
 800a7ca:	18fb      	adds	r3, r7, r3
 800a7cc:	781b      	ldrb	r3, [r3, #0]
}
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b004      	add	sp, #16
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f001 fd0b 	bl	800c1fc <USBD_LL_Start>

  return USBD_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b002      	add	sp, #8
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	b002      	add	sp, #8
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a802:	b590      	push	{r4, r7, lr}
 800a804:	b085      	sub	sp, #20
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	000a      	movs	r2, r1
 800a80c:	1cfb      	adds	r3, r7, #3
 800a80e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a810:	240f      	movs	r4, #15
 800a812:	193b      	adds	r3, r7, r4
 800a814:	2202      	movs	r2, #2
 800a816:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	23ad      	movs	r3, #173	; 0xad
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	58d3      	ldr	r3, [r2, r3]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00e      	beq.n	800a842 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	23ad      	movs	r3, #173	; 0xad
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	58d3      	ldr	r3, [r2, r3]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	1cfa      	adds	r2, r7, #3
 800a830:	7811      	ldrb	r1, [r2, #0]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	0010      	movs	r0, r2
 800a836:	4798      	blx	r3
 800a838:	1e03      	subs	r3, r0, #0
 800a83a:	d102      	bne.n	800a842 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a83c:	193b      	adds	r3, r7, r4
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a842:	230f      	movs	r3, #15
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	781b      	ldrb	r3, [r3, #0]
}
 800a848:	0018      	movs	r0, r3
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b005      	add	sp, #20
 800a84e:	bd90      	pop	{r4, r7, pc}

0800a850 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	000a      	movs	r2, r1
 800a85a:	1cfb      	adds	r3, r7, #3
 800a85c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	23ad      	movs	r3, #173	; 0xad
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	58d3      	ldr	r3, [r2, r3]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	1cfa      	adds	r2, r7, #3
 800a86a:	7811      	ldrb	r1, [r2, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	0010      	movs	r0, r2
 800a870:	4798      	blx	r3

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	0018      	movs	r0, r3
 800a876:	46bd      	mov	sp, r7
 800a878:	b002      	add	sp, #8
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	22aa      	movs	r2, #170	; 0xaa
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	4694      	mov	ip, r2
 800a88e:	4463      	add	r3, ip
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	0011      	movs	r1, r2
 800a894:	0018      	movs	r0, r3
 800a896:	f001 f810 	bl	800b8ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	23a5      	movs	r3, #165	; 0xa5
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a23      	ldr	r2, [pc, #140]	; (800a934 <USBD_LL_SetupStage+0xb8>)
 800a8a8:	5a9b      	ldrh	r3, [r3, r2]
 800a8aa:	0019      	movs	r1, r3
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	23a6      	movs	r3, #166	; 0xa6
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	23aa      	movs	r3, #170	; 0xaa
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	5cd3      	ldrb	r3, [r2, r3]
 800a8bc:	001a      	movs	r2, r3
 800a8be:	231f      	movs	r3, #31
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d019      	beq.n	800a8fa <USBD_LL_SetupStage+0x7e>
 800a8c6:	d822      	bhi.n	800a90e <USBD_LL_SetupStage+0x92>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <USBD_LL_SetupStage+0x56>
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d00a      	beq.n	800a8e6 <USBD_LL_SetupStage+0x6a>
 800a8d0:	e01d      	b.n	800a90e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	22aa      	movs	r2, #170	; 0xaa
 800a8d6:	0092      	lsls	r2, r2, #2
 800a8d8:	189a      	adds	r2, r3, r2
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0011      	movs	r1, r2
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f000 fa10 	bl	800ad04 <USBD_StdDevReq>
      break;
 800a8e4:	e020      	b.n	800a928 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22aa      	movs	r2, #170	; 0xaa
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	189a      	adds	r2, r3, r2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	0011      	movs	r1, r2
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f000 fa78 	bl	800ade8 <USBD_StdItfReq>
      break;
 800a8f8:	e016      	b.n	800a928 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	22aa      	movs	r2, #170	; 0xaa
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	189a      	adds	r2, r3, r2
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	0011      	movs	r1, r2
 800a906:	0018      	movs	r0, r3
 800a908:	f000 fac5 	bl	800ae96 <USBD_StdEPReq>
      break;
 800a90c:	e00c      	b.n	800a928 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	23aa      	movs	r3, #170	; 0xaa
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	5cd3      	ldrb	r3, [r2, r3]
 800a916:	227f      	movs	r2, #127	; 0x7f
 800a918:	4393      	bics	r3, r2
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f001 fcf2 	bl	800c30a <USBD_LL_StallEP>
      break;
 800a926:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	0018      	movs	r0, r3
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b002      	add	sp, #8
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	000002ae 	.word	0x000002ae

0800a938 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	607a      	str	r2, [r7, #4]
 800a942:	200b      	movs	r0, #11
 800a944:	183b      	adds	r3, r7, r0
 800a946:	1c0a      	adds	r2, r1, #0
 800a948:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a94a:	183b      	adds	r3, r7, r0
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d154      	bne.n	800a9fc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3355      	adds	r3, #85	; 0x55
 800a956:	33ff      	adds	r3, #255	; 0xff
 800a958:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	23a5      	movs	r3, #165	; 0xa5
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	58d3      	ldr	r3, [r2, r3]
 800a962:	2b03      	cmp	r3, #3
 800a964:	d139      	bne.n	800a9da <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	68da      	ldr	r2, [r3, #12]
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d919      	bls.n	800a9a6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a988:	429a      	cmp	r2, r3
 800a98a:	d203      	bcs.n	800a994 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a990:	b29b      	uxth	r3, r3
 800a992:	e002      	b.n	800a99a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a998:	b29b      	uxth	r3, r3
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	001a      	movs	r2, r3
 800a9a0:	f001 f89b 	bl	800bada <USBD_CtlContinueRx>
 800a9a4:	e045      	b.n	800aa32 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	23ad      	movs	r3, #173	; 0xad
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	58d3      	ldr	r3, [r2, r3]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00d      	beq.n	800a9d0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	23a7      	movs	r3, #167	; 0xa7
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	d107      	bne.n	800a9d0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	23ad      	movs	r3, #173	; 0xad
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	58d3      	ldr	r3, [r2, r3]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	0010      	movs	r0, r2
 800a9ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f001 f894 	bl	800bb00 <USBD_CtlSendStatus>
 800a9d8:	e02b      	b.n	800aa32 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	23a5      	movs	r3, #165	; 0xa5
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	58d3      	ldr	r3, [r2, r3]
 800a9e2:	2b05      	cmp	r3, #5
 800a9e4:	d125      	bne.n	800aa32 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	23a5      	movs	r3, #165	; 0xa5
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f001 fc88 	bl	800c30a <USBD_LL_StallEP>
 800a9fa:	e01a      	b.n	800aa32 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	23ad      	movs	r3, #173	; 0xad
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	58d3      	ldr	r3, [r2, r3]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d011      	beq.n	800aa2e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	23a7      	movs	r3, #167	; 0xa7
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d10b      	bne.n	800aa2e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	23ad      	movs	r3, #173	; 0xad
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	58d3      	ldr	r3, [r2, r3]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	220b      	movs	r2, #11
 800aa22:	18ba      	adds	r2, r7, r2
 800aa24:	7811      	ldrb	r1, [r2, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	0010      	movs	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	e001      	b.n	800aa32 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e000      	b.n	800aa34 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	0018      	movs	r0, r3
 800aa36:	46bd      	mov	sp, r7
 800aa38:	b006      	add	sp, #24
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	607a      	str	r2, [r7, #4]
 800aa46:	200b      	movs	r0, #11
 800aa48:	183b      	adds	r3, r7, r0
 800aa4a:	1c0a      	adds	r2, r1, #0
 800aa4c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa4e:	183b      	adds	r3, r7, r0
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d000      	beq.n	800aa58 <USBD_LL_DataInStage+0x1c>
 800aa56:	e08e      	b.n	800ab76 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3314      	adds	r3, #20
 800aa5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	23a5      	movs	r3, #165	; 0xa5
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	58d3      	ldr	r3, [r2, r3]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d164      	bne.n	800ab34 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d915      	bls.n	800aaa2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 ffec 	bl	800ba6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	2300      	movs	r3, #0
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	f001 fd1e 	bl	800c4dc <USBD_LL_PrepareReceive>
 800aaa0:	e059      	b.n	800ab56 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	0019      	movs	r1, r3
 800aaac:	0010      	movs	r0, r2
 800aaae:	f7f5 fbc3 	bl	8000238 <__aeabi_uidivmod>
 800aab2:	1e0b      	subs	r3, r1, #0
 800aab4:	d11f      	bne.n	800aaf6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d319      	bcc.n	800aaf6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	23a6      	movs	r3, #166	; 0xa6
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800aace:	429a      	cmp	r2, r3
 800aad0:	d211      	bcs.n	800aaf6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	2100      	movs	r1, #0
 800aad8:	0018      	movs	r0, r3
 800aada:	f000 ffc7 	bl	800ba6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	23a6      	movs	r3, #166	; 0xa6
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	2100      	movs	r1, #0
 800aae6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	2300      	movs	r3, #0
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f001 fcf4 	bl	800c4dc <USBD_LL_PrepareReceive>
 800aaf4:	e02f      	b.n	800ab56 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	23ad      	movs	r3, #173	; 0xad
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	58d3      	ldr	r3, [r2, r3]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00d      	beq.n	800ab20 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	23a7      	movs	r3, #167	; 0xa7
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d107      	bne.n	800ab20 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	23ad      	movs	r3, #173	; 0xad
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	58d3      	ldr	r3, [r2, r3]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	0018      	movs	r0, r3
 800ab26:	f001 fbf0 	bl	800c30a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f000 fffb 	bl	800bb28 <USBD_CtlReceiveStatus>
 800ab32:	e010      	b.n	800ab56 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	23a5      	movs	r3, #165	; 0xa5
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	58d3      	ldr	r3, [r2, r3]
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d005      	beq.n	800ab4c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	23a5      	movs	r3, #165	; 0xa5
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d104      	bne.n	800ab56 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2180      	movs	r1, #128	; 0x80
 800ab50:	0018      	movs	r0, r3
 800ab52:	f001 fbda 	bl	800c30a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	23a8      	movs	r3, #168	; 0xa8
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	5cd3      	ldrb	r3, [r2, r3]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d124      	bne.n	800abac <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	0018      	movs	r0, r3
 800ab66:	f7ff fe43 	bl	800a7f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	23a8      	movs	r3, #168	; 0xa8
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	2100      	movs	r1, #0
 800ab72:	54d1      	strb	r1, [r2, r3]
 800ab74:	e01a      	b.n	800abac <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	23ad      	movs	r3, #173	; 0xad
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	58d3      	ldr	r3, [r2, r3]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d011      	beq.n	800aba8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	23a7      	movs	r3, #167	; 0xa7
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d10b      	bne.n	800aba8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	23ad      	movs	r3, #173	; 0xad
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	58d3      	ldr	r3, [r2, r3]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	220b      	movs	r2, #11
 800ab9c:	18ba      	adds	r2, r7, r2
 800ab9e:	7811      	ldrb	r1, [r2, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	0010      	movs	r0, r2
 800aba4:	4798      	blx	r3
 800aba6:	e001      	b.n	800abac <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aba8:	2302      	movs	r3, #2
 800abaa:	e000      	b.n	800abae <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	0018      	movs	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b006      	add	sp, #24
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	2340      	movs	r3, #64	; 0x40
 800abc2:	2200      	movs	r2, #0
 800abc4:	2100      	movs	r1, #0
 800abc6:	f001 fb3e 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	23ac      	movs	r3, #172	; 0xac
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	2101      	movs	r1, #1
 800abd2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	23b2      	movs	r3, #178	; 0xb2
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	2140      	movs	r1, #64	; 0x40
 800abdc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	2340      	movs	r3, #64	; 0x40
 800abe2:	2200      	movs	r2, #0
 800abe4:	2180      	movs	r1, #128	; 0x80
 800abe6:	f001 fb2e 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2240      	movs	r2, #64	; 0x40
 800abf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	23a7      	movs	r3, #167	; 0xa7
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	2101      	movs	r1, #1
 800abfe:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	23a5      	movs	r3, #165	; 0xa5
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	2100      	movs	r1, #0
 800ac08:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	23a9      	movs	r3, #169	; 0xa9
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	2100      	movs	r1, #0
 800ac18:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	23ae      	movs	r3, #174	; 0xae
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	58d3      	ldr	r3, [r2, r3]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	23ad      	movs	r3, #173	; 0xad
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	58d3      	ldr	r3, [r2, r3]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	b2d9      	uxtb	r1, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	0018      	movs	r0, r3
 800ac3a:	4790      	blx	r2
  }

  return USBD_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b002      	add	sp, #8
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	000a      	movs	r2, r1
 800ac50:	1cfb      	adds	r3, r7, #3
 800ac52:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	1cfa      	adds	r2, r7, #3
 800ac58:	7812      	ldrb	r2, [r2, #0]
 800ac5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	0018      	movs	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b002      	add	sp, #8
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	23a7      	movs	r3, #167	; 0xa7
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	5cd1      	ldrb	r1, [r2, r3]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a06      	ldr	r2, [pc, #24]	; (800ac94 <USBD_LL_Suspend+0x2c>)
 800ac7c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	23a7      	movs	r3, #167	; 0xa7
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	2104      	movs	r1, #4
 800ac86:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	b002      	add	sp, #8
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	0000029d 	.word	0x0000029d

0800ac98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	23a7      	movs	r3, #167	; 0xa7
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	5cd3      	ldrb	r3, [r2, r3]
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d106      	bne.n	800acba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a05      	ldr	r2, [pc, #20]	; (800acc4 <USBD_LL_Resume+0x2c>)
 800acb0:	5c99      	ldrb	r1, [r3, r2]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	23a7      	movs	r3, #167	; 0xa7
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	0018      	movs	r0, r3
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b002      	add	sp, #8
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	0000029d 	.word	0x0000029d

0800acc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	23a7      	movs	r3, #167	; 0xa7
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	5cd3      	ldrb	r3, [r2, r3]
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d10e      	bne.n	800acfa <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	23ad      	movs	r3, #173	; 0xad
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	58d3      	ldr	r3, [r2, r3]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d007      	beq.n	800acfa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	23ad      	movs	r3, #173	; 0xad
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	58d3      	ldr	r3, [r2, r3]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	0010      	movs	r0, r2
 800acf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	0018      	movs	r0, r3
 800acfe:	46bd      	mov	sp, r7
 800ad00:	b002      	add	sp, #8
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0e:	230f      	movs	r3, #15
 800ad10:	18fb      	adds	r3, r7, r3
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	001a      	movs	r2, r3
 800ad1c:	2360      	movs	r3, #96	; 0x60
 800ad1e:	4013      	ands	r3, r2
 800ad20:	2b40      	cmp	r3, #64	; 0x40
 800ad22:	d004      	beq.n	800ad2e <USBD_StdDevReq+0x2a>
 800ad24:	d84f      	bhi.n	800adc6 <USBD_StdDevReq+0xc2>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <USBD_StdDevReq+0x3e>
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d14b      	bne.n	800adc6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	23ad      	movs	r3, #173	; 0xad
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	58d3      	ldr	r3, [r2, r3]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	0010      	movs	r0, r2
 800ad3e:	4798      	blx	r3
      break;
 800ad40:	e048      	b.n	800add4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b09      	cmp	r3, #9
 800ad48:	d835      	bhi.n	800adb6 <USBD_StdDevReq+0xb2>
 800ad4a:	009a      	lsls	r2, r3, #2
 800ad4c:	4b25      	ldr	r3, [pc, #148]	; (800ade4 <USBD_StdDevReq+0xe0>)
 800ad4e:	18d3      	adds	r3, r2, r3
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	0011      	movs	r1, r2
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f000 fa52 	bl	800b204 <USBD_GetDescriptor>
          break;
 800ad60:	e030      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	0011      	movs	r1, r2
 800ad68:	0018      	movs	r0, r3
 800ad6a:	f000 fbfd 	bl	800b568 <USBD_SetAddress>
          break;
 800ad6e:	e029      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	0011      	movs	r1, r2
 800ad76:	0018      	movs	r0, r3
 800ad78:	f000 fc4a 	bl	800b610 <USBD_SetConfig>
          break;
 800ad7c:	e022      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	0011      	movs	r1, r2
 800ad84:	0018      	movs	r0, r3
 800ad86:	f000 fce7 	bl	800b758 <USBD_GetConfig>
          break;
 800ad8a:	e01b      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	0011      	movs	r1, r2
 800ad92:	0018      	movs	r0, r3
 800ad94:	f000 fd1b 	bl	800b7ce <USBD_GetStatus>
          break;
 800ad98:	e014      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	0011      	movs	r1, r2
 800ada0:	0018      	movs	r0, r3
 800ada2:	f000 fd4e 	bl	800b842 <USBD_SetFeature>
          break;
 800ada6:	e00d      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	0011      	movs	r1, r2
 800adae:	0018      	movs	r0, r3
 800adb0:	f000 fd5d 	bl	800b86e <USBD_ClrFeature>
          break;
 800adb4:	e006      	b.n	800adc4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	0011      	movs	r1, r2
 800adbc:	0018      	movs	r0, r3
 800adbe:	f000 fdb7 	bl	800b930 <USBD_CtlError>
          break;
 800adc2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800adc4:	e006      	b.n	800add4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	0011      	movs	r1, r2
 800adcc:	0018      	movs	r0, r3
 800adce:	f000 fdaf 	bl	800b930 <USBD_CtlError>
      break;
 800add2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800add4:	230f      	movs	r3, #15
 800add6:	18fb      	adds	r3, r7, r3
 800add8:	781b      	ldrb	r3, [r3, #0]
}
 800adda:	0018      	movs	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	b004      	add	sp, #16
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	0800d074 	.word	0x0800d074

0800ade8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ade8:	b5b0      	push	{r4, r5, r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adf2:	230f      	movs	r3, #15
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	001a      	movs	r2, r3
 800ae00:	2360      	movs	r3, #96	; 0x60
 800ae02:	4013      	ands	r3, r2
 800ae04:	2b40      	cmp	r3, #64	; 0x40
 800ae06:	d004      	beq.n	800ae12 <USBD_StdItfReq+0x2a>
 800ae08:	d839      	bhi.n	800ae7e <USBD_StdItfReq+0x96>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <USBD_StdItfReq+0x2a>
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d135      	bne.n	800ae7e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	23a7      	movs	r3, #167	; 0xa7
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	5cd3      	ldrb	r3, [r2, r3]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d825      	bhi.n	800ae6c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	889b      	ldrh	r3, [r3, #4]
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d819      	bhi.n	800ae5e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	23ad      	movs	r3, #173	; 0xad
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	58d3      	ldr	r3, [r2, r3]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	250f      	movs	r5, #15
 800ae36:	197c      	adds	r4, r7, r5
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	0010      	movs	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	0003      	movs	r3, r0
 800ae42:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	88db      	ldrh	r3, [r3, #6]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d116      	bne.n	800ae7a <USBD_StdItfReq+0x92>
 800ae4c:	197b      	adds	r3, r7, r5
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d112      	bne.n	800ae7a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	0018      	movs	r0, r3
 800ae58:	f000 fe52 	bl	800bb00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae5c:	e00d      	b.n	800ae7a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	0011      	movs	r1, r2
 800ae64:	0018      	movs	r0, r3
 800ae66:	f000 fd63 	bl	800b930 <USBD_CtlError>
          break;
 800ae6a:	e006      	b.n	800ae7a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	0011      	movs	r1, r2
 800ae72:	0018      	movs	r0, r3
 800ae74:	f000 fd5c 	bl	800b930 <USBD_CtlError>
          break;
 800ae78:	e000      	b.n	800ae7c <USBD_StdItfReq+0x94>
          break;
 800ae7a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ae7c:	e006      	b.n	800ae8c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	0011      	movs	r1, r2
 800ae84:	0018      	movs	r0, r3
 800ae86:	f000 fd53 	bl	800b930 <USBD_CtlError>
      break;
 800ae8a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	0018      	movs	r0, r3
 800ae90:	46bd      	mov	sp, r7
 800ae92:	b004      	add	sp, #16
 800ae94:	bdb0      	pop	{r4, r5, r7, pc}

0800ae96 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ae96:	b5b0      	push	{r4, r5, r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aea0:	230f      	movs	r3, #15
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	889a      	ldrh	r2, [r3, #4]
 800aeac:	230e      	movs	r3, #14
 800aeae:	18fb      	adds	r3, r7, r3
 800aeb0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	001a      	movs	r2, r3
 800aeb8:	2360      	movs	r3, #96	; 0x60
 800aeba:	4013      	ands	r3, r2
 800aebc:	2b40      	cmp	r3, #64	; 0x40
 800aebe:	d006      	beq.n	800aece <USBD_StdEPReq+0x38>
 800aec0:	d900      	bls.n	800aec4 <USBD_StdEPReq+0x2e>
 800aec2:	e190      	b.n	800b1e6 <USBD_StdEPReq+0x350>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00c      	beq.n	800aee2 <USBD_StdEPReq+0x4c>
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d000      	beq.n	800aece <USBD_StdEPReq+0x38>
 800aecc:	e18b      	b.n	800b1e6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	23ad      	movs	r3, #173	; 0xad
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	58d3      	ldr	r3, [r2, r3]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	0010      	movs	r0, r2
 800aede:	4798      	blx	r3
      break;
 800aee0:	e188      	b.n	800b1f4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	001a      	movs	r2, r3
 800aee8:	2360      	movs	r3, #96	; 0x60
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d10f      	bne.n	800af10 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	23ad      	movs	r3, #173	; 0xad
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	58d3      	ldr	r3, [r2, r3]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	250f      	movs	r5, #15
 800aefc:	197c      	adds	r4, r7, r5
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	0010      	movs	r0, r2
 800af04:	4798      	blx	r3
 800af06:	0003      	movs	r3, r0
 800af08:	7023      	strb	r3, [r4, #0]

        return ret;
 800af0a:	197b      	adds	r3, r7, r5
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	e174      	b.n	800b1fa <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	785b      	ldrb	r3, [r3, #1]
 800af14:	2b03      	cmp	r3, #3
 800af16:	d007      	beq.n	800af28 <USBD_StdEPReq+0x92>
 800af18:	dd00      	ble.n	800af1c <USBD_StdEPReq+0x86>
 800af1a:	e15c      	b.n	800b1d6 <USBD_StdEPReq+0x340>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d100      	bne.n	800af22 <USBD_StdEPReq+0x8c>
 800af20:	e092      	b.n	800b048 <USBD_StdEPReq+0x1b2>
 800af22:	2b01      	cmp	r3, #1
 800af24:	d04b      	beq.n	800afbe <USBD_StdEPReq+0x128>
 800af26:	e156      	b.n	800b1d6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	23a7      	movs	r3, #167	; 0xa7
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	5cd3      	ldrb	r3, [r2, r3]
 800af30:	2b02      	cmp	r3, #2
 800af32:	d002      	beq.n	800af3a <USBD_StdEPReq+0xa4>
 800af34:	2b03      	cmp	r3, #3
 800af36:	d01d      	beq.n	800af74 <USBD_StdEPReq+0xde>
 800af38:	e039      	b.n	800afae <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af3a:	220e      	movs	r2, #14
 800af3c:	18bb      	adds	r3, r7, r2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d010      	beq.n	800af66 <USBD_StdEPReq+0xd0>
 800af44:	18bb      	adds	r3, r7, r2
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b80      	cmp	r3, #128	; 0x80
 800af4a:	d00c      	beq.n	800af66 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af4c:	18bb      	adds	r3, r7, r2
 800af4e:	781a      	ldrb	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	0011      	movs	r1, r2
 800af54:	0018      	movs	r0, r3
 800af56:	f001 f9d8 	bl	800c30a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2180      	movs	r1, #128	; 0x80
 800af5e:	0018      	movs	r0, r3
 800af60:	f001 f9d3 	bl	800c30a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af64:	e02a      	b.n	800afbc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	0011      	movs	r1, r2
 800af6c:	0018      	movs	r0, r3
 800af6e:	f000 fcdf 	bl	800b930 <USBD_CtlError>
              break;
 800af72:	e023      	b.n	800afbc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	885b      	ldrh	r3, [r3, #2]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d113      	bne.n	800afa4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800af7c:	220e      	movs	r2, #14
 800af7e:	18bb      	adds	r3, r7, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00e      	beq.n	800afa4 <USBD_StdEPReq+0x10e>
 800af86:	18bb      	adds	r3, r7, r2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b80      	cmp	r3, #128	; 0x80
 800af8c:	d00a      	beq.n	800afa4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	88db      	ldrh	r3, [r3, #6]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800af96:	18bb      	adds	r3, r7, r2
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0011      	movs	r1, r2
 800af9e:	0018      	movs	r0, r3
 800afa0:	f001 f9b3 	bl	800c30a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	0018      	movs	r0, r3
 800afa8:	f000 fdaa 	bl	800bb00 <USBD_CtlSendStatus>

              break;
 800afac:	e006      	b.n	800afbc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0011      	movs	r1, r2
 800afb4:	0018      	movs	r0, r3
 800afb6:	f000 fcbb 	bl	800b930 <USBD_CtlError>
              break;
 800afba:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800afbc:	e112      	b.n	800b1e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	23a7      	movs	r3, #167	; 0xa7
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	5cd3      	ldrb	r3, [r2, r3]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d002      	beq.n	800afd0 <USBD_StdEPReq+0x13a>
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d01d      	beq.n	800b00a <USBD_StdEPReq+0x174>
 800afce:	e032      	b.n	800b036 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd0:	220e      	movs	r2, #14
 800afd2:	18bb      	adds	r3, r7, r2
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d010      	beq.n	800affc <USBD_StdEPReq+0x166>
 800afda:	18bb      	adds	r3, r7, r2
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b80      	cmp	r3, #128	; 0x80
 800afe0:	d00c      	beq.n	800affc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800afe2:	18bb      	adds	r3, r7, r2
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	0011      	movs	r1, r2
 800afea:	0018      	movs	r0, r3
 800afec:	f001 f98d 	bl	800c30a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2180      	movs	r1, #128	; 0x80
 800aff4:	0018      	movs	r0, r3
 800aff6:	f001 f988 	bl	800c30a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800affa:	e024      	b.n	800b046 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	0011      	movs	r1, r2
 800b002:	0018      	movs	r0, r3
 800b004:	f000 fc94 	bl	800b930 <USBD_CtlError>
              break;
 800b008:	e01d      	b.n	800b046 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	885b      	ldrh	r3, [r3, #2]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d118      	bne.n	800b044 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b012:	210e      	movs	r1, #14
 800b014:	187b      	adds	r3, r7, r1
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	227f      	movs	r2, #127	; 0x7f
 800b01a:	4013      	ands	r3, r2
 800b01c:	d006      	beq.n	800b02c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b01e:	187b      	adds	r3, r7, r1
 800b020:	781a      	ldrb	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	0011      	movs	r1, r2
 800b026:	0018      	movs	r0, r3
 800b028:	f001 f99a 	bl	800c360 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	0018      	movs	r0, r3
 800b030:	f000 fd66 	bl	800bb00 <USBD_CtlSendStatus>
              }
              break;
 800b034:	e006      	b.n	800b044 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	0011      	movs	r1, r2
 800b03c:	0018      	movs	r0, r3
 800b03e:	f000 fc77 	bl	800b930 <USBD_CtlError>
              break;
 800b042:	e000      	b.n	800b046 <USBD_StdEPReq+0x1b0>
              break;
 800b044:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b046:	e0cd      	b.n	800b1e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	23a7      	movs	r3, #167	; 0xa7
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	5cd3      	ldrb	r3, [r2, r3]
 800b050:	2b02      	cmp	r3, #2
 800b052:	d002      	beq.n	800b05a <USBD_StdEPReq+0x1c4>
 800b054:	2b03      	cmp	r3, #3
 800b056:	d03c      	beq.n	800b0d2 <USBD_StdEPReq+0x23c>
 800b058:	e0b5      	b.n	800b1c6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b05a:	220e      	movs	r2, #14
 800b05c:	18bb      	adds	r3, r7, r2
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00a      	beq.n	800b07a <USBD_StdEPReq+0x1e4>
 800b064:	18bb      	adds	r3, r7, r2
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b80      	cmp	r3, #128	; 0x80
 800b06a:	d006      	beq.n	800b07a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	0011      	movs	r1, r2
 800b072:	0018      	movs	r0, r3
 800b074:	f000 fc5c 	bl	800b930 <USBD_CtlError>
                break;
 800b078:	e0ac      	b.n	800b1d4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b07a:	220e      	movs	r2, #14
 800b07c:	18bb      	adds	r3, r7, r2
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	b25b      	sxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	da0c      	bge.n	800b0a0 <USBD_StdEPReq+0x20a>
 800b086:	18bb      	adds	r3, r7, r2
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	227f      	movs	r2, #127	; 0x7f
 800b08c:	401a      	ands	r2, r3
 800b08e:	0013      	movs	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	189b      	adds	r3, r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	3310      	adds	r3, #16
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	18d3      	adds	r3, r2, r3
 800b09c:	3304      	adds	r3, #4
 800b09e:	e00d      	b.n	800b0bc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0a0:	230e      	movs	r3, #14
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	227f      	movs	r2, #127	; 0x7f
 800b0a8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0aa:	0013      	movs	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	189b      	adds	r3, r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	3351      	adds	r3, #81	; 0x51
 800b0b4:	33ff      	adds	r3, #255	; 0xff
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	18d3      	adds	r3, r2, r3
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f000 fcae 	bl	800ba2c <USBD_CtlSendData>
              break;
 800b0d0:	e080      	b.n	800b1d4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0d2:	220e      	movs	r2, #14
 800b0d4:	18bb      	adds	r3, r7, r2
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da14      	bge.n	800b108 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0de:	18bb      	adds	r3, r7, r2
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	220f      	movs	r2, #15
 800b0e4:	401a      	ands	r2, r3
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	0013      	movs	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	189b      	adds	r3, r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	18cb      	adds	r3, r1, r3
 800b0f2:	3318      	adds	r3, #24
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d11e      	bne.n	800b138 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	0011      	movs	r1, r2
 800b100:	0018      	movs	r0, r3
 800b102:	f000 fc15 	bl	800b930 <USBD_CtlError>
                  break;
 800b106:	e065      	b.n	800b1d4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b108:	230e      	movs	r3, #14
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	220f      	movs	r2, #15
 800b110:	401a      	ands	r2, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	23ac      	movs	r3, #172	; 0xac
 800b116:	0059      	lsls	r1, r3, #1
 800b118:	0013      	movs	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	189b      	adds	r3, r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	18c3      	adds	r3, r0, r3
 800b122:	185b      	adds	r3, r3, r1
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	0011      	movs	r1, r2
 800b130:	0018      	movs	r0, r3
 800b132:	f000 fbfd 	bl	800b930 <USBD_CtlError>
                  break;
 800b136:	e04d      	b.n	800b1d4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b138:	220e      	movs	r2, #14
 800b13a:	18bb      	adds	r3, r7, r2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	da0c      	bge.n	800b15e <USBD_StdEPReq+0x2c8>
 800b144:	18bb      	adds	r3, r7, r2
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	227f      	movs	r2, #127	; 0x7f
 800b14a:	401a      	ands	r2, r3
 800b14c:	0013      	movs	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	189b      	adds	r3, r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	3310      	adds	r3, #16
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	18d3      	adds	r3, r2, r3
 800b15a:	3304      	adds	r3, #4
 800b15c:	e00d      	b.n	800b17a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b15e:	230e      	movs	r3, #14
 800b160:	18fb      	adds	r3, r7, r3
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	227f      	movs	r2, #127	; 0x7f
 800b166:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b168:	0013      	movs	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	189b      	adds	r3, r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	3351      	adds	r3, #81	; 0x51
 800b172:	33ff      	adds	r3, #255	; 0xff
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	3304      	adds	r3, #4
 800b17a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b17c:	220e      	movs	r2, #14
 800b17e:	18bb      	adds	r3, r7, r2
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <USBD_StdEPReq+0x2f8>
 800b186:	18bb      	adds	r3, r7, r2
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b80      	cmp	r3, #128	; 0x80
 800b18c:	d103      	bne.n	800b196 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e010      	b.n	800b1b8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b196:	230e      	movs	r3, #14
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	0011      	movs	r1, r2
 800b1a0:	0018      	movs	r0, r3
 800b1a2:	f001 f908 	bl	800c3b6 <USBD_LL_IsStallEP>
 800b1a6:	1e03      	subs	r3, r0, #0
 800b1a8:	d003      	beq.n	800b1b2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e002      	b.n	800b1b8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	0018      	movs	r0, r3
 800b1c0:	f000 fc34 	bl	800ba2c <USBD_CtlSendData>
              break;
 800b1c4:	e006      	b.n	800b1d4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	0011      	movs	r1, r2
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f000 fbaf 	bl	800b930 <USBD_CtlError>
              break;
 800b1d2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b1d4:	e006      	b.n	800b1e4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	0011      	movs	r1, r2
 800b1dc:	0018      	movs	r0, r3
 800b1de:	f000 fba7 	bl	800b930 <USBD_CtlError>
          break;
 800b1e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b1e4:	e006      	b.n	800b1f4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	0011      	movs	r1, r2
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	f000 fb9f 	bl	800b930 <USBD_CtlError>
      break;
 800b1f2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b1f4:	230f      	movs	r3, #15
 800b1f6:	18fb      	adds	r3, r7, r3
 800b1f8:	781b      	ldrb	r3, [r3, #0]
}
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	b004      	add	sp, #16
 800b200:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b204 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b20e:	2308      	movs	r3, #8
 800b210:	18fb      	adds	r3, r7, r3
 800b212:	2200      	movs	r2, #0
 800b214:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b21a:	230b      	movs	r3, #11
 800b21c:	18fb      	adds	r3, r7, r3
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	0a1b      	lsrs	r3, r3, #8
 800b228:	b29b      	uxth	r3, r3
 800b22a:	2b07      	cmp	r3, #7
 800b22c:	d900      	bls.n	800b230 <USBD_GetDescriptor+0x2c>
 800b22e:	e159      	b.n	800b4e4 <USBD_GetDescriptor+0x2e0>
 800b230:	009a      	lsls	r2, r3, #2
 800b232:	4bcb      	ldr	r3, [pc, #812]	; (800b560 <USBD_GetDescriptor+0x35c>)
 800b234:	18d3      	adds	r3, r2, r3
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	23ac      	movs	r3, #172	; 0xac
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	58d3      	ldr	r3, [r2, r3]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	2108      	movs	r1, #8
 800b24a:	1879      	adds	r1, r7, r1
 800b24c:	0010      	movs	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	0003      	movs	r3, r0
 800b252:	60fb      	str	r3, [r7, #12]
      break;
 800b254:	e153      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	7c1b      	ldrb	r3, [r3, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10f      	bne.n	800b27e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	23ad      	movs	r3, #173	; 0xad
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	58d3      	ldr	r3, [r2, r3]
 800b266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b268:	2208      	movs	r2, #8
 800b26a:	18ba      	adds	r2, r7, r2
 800b26c:	0010      	movs	r0, r2
 800b26e:	4798      	blx	r3
 800b270:	0003      	movs	r3, r0
 800b272:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3301      	adds	r3, #1
 800b278:	2202      	movs	r2, #2
 800b27a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b27c:	e13f      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	23ad      	movs	r3, #173	; 0xad
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	58d3      	ldr	r3, [r2, r3]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	2208      	movs	r2, #8
 800b28a:	18ba      	adds	r2, r7, r2
 800b28c:	0010      	movs	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	0003      	movs	r3, r0
 800b292:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	2202      	movs	r2, #2
 800b29a:	701a      	strb	r2, [r3, #0]
      break;
 800b29c:	e12f      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b05      	cmp	r3, #5
 800b2a6:	d900      	bls.n	800b2aa <USBD_GetDescriptor+0xa6>
 800b2a8:	e0d0      	b.n	800b44c <USBD_GetDescriptor+0x248>
 800b2aa:	009a      	lsls	r2, r3, #2
 800b2ac:	4bad      	ldr	r3, [pc, #692]	; (800b564 <USBD_GetDescriptor+0x360>)
 800b2ae:	18d3      	adds	r3, r2, r3
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	23ac      	movs	r3, #172	; 0xac
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	58d3      	ldr	r3, [r2, r3]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00d      	beq.n	800b2de <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	23ac      	movs	r3, #172	; 0xac
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	58d3      	ldr	r3, [r2, r3]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	7c12      	ldrb	r2, [r2, #16]
 800b2d0:	2108      	movs	r1, #8
 800b2d2:	1879      	adds	r1, r7, r1
 800b2d4:	0010      	movs	r0, r2
 800b2d6:	4798      	blx	r3
 800b2d8:	0003      	movs	r3, r0
 800b2da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2dc:	e0c3      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f000 fb23 	bl	800b930 <USBD_CtlError>
            err++;
 800b2ea:	210b      	movs	r1, #11
 800b2ec:	187b      	adds	r3, r7, r1
 800b2ee:	781a      	ldrb	r2, [r3, #0]
 800b2f0:	187b      	adds	r3, r7, r1
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	701a      	strb	r2, [r3, #0]
          break;
 800b2f6:	e0b6      	b.n	800b466 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	23ac      	movs	r3, #172	; 0xac
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	58d3      	ldr	r3, [r2, r3]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00d      	beq.n	800b322 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	23ac      	movs	r3, #172	; 0xac
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	58d3      	ldr	r3, [r2, r3]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	2108      	movs	r1, #8
 800b316:	1879      	adds	r1, r7, r1
 800b318:	0010      	movs	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	0003      	movs	r3, r0
 800b31e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b320:	e0a1      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	0011      	movs	r1, r2
 800b328:	0018      	movs	r0, r3
 800b32a:	f000 fb01 	bl	800b930 <USBD_CtlError>
            err++;
 800b32e:	210b      	movs	r1, #11
 800b330:	187b      	adds	r3, r7, r1
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	187b      	adds	r3, r7, r1
 800b336:	3201      	adds	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
          break;
 800b33a:	e094      	b.n	800b466 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	23ac      	movs	r3, #172	; 0xac
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	58d3      	ldr	r3, [r2, r3]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00d      	beq.n	800b366 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	23ac      	movs	r3, #172	; 0xac
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	58d3      	ldr	r3, [r2, r3]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7c12      	ldrb	r2, [r2, #16]
 800b358:	2108      	movs	r1, #8
 800b35a:	1879      	adds	r1, r7, r1
 800b35c:	0010      	movs	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	0003      	movs	r3, r0
 800b362:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b364:	e07f      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	0011      	movs	r1, r2
 800b36c:	0018      	movs	r0, r3
 800b36e:	f000 fadf 	bl	800b930 <USBD_CtlError>
            err++;
 800b372:	210b      	movs	r1, #11
 800b374:	187b      	adds	r3, r7, r1
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	187b      	adds	r3, r7, r1
 800b37a:	3201      	adds	r2, #1
 800b37c:	701a      	strb	r2, [r3, #0]
          break;
 800b37e:	e072      	b.n	800b466 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	23ac      	movs	r3, #172	; 0xac
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	58d3      	ldr	r3, [r2, r3]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	23ac      	movs	r3, #172	; 0xac
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	58d3      	ldr	r3, [r2, r3]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	2108      	movs	r1, #8
 800b39e:	1879      	adds	r1, r7, r1
 800b3a0:	0010      	movs	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	0003      	movs	r3, r0
 800b3a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a8:	e05d      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	0011      	movs	r1, r2
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f000 fabd 	bl	800b930 <USBD_CtlError>
            err++;
 800b3b6:	210b      	movs	r1, #11
 800b3b8:	187b      	adds	r3, r7, r1
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	187b      	adds	r3, r7, r1
 800b3be:	3201      	adds	r2, #1
 800b3c0:	701a      	strb	r2, [r3, #0]
          break;
 800b3c2:	e050      	b.n	800b466 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	23ac      	movs	r3, #172	; 0xac
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	58d3      	ldr	r3, [r2, r3]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00d      	beq.n	800b3ee <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	23ac      	movs	r3, #172	; 0xac
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	58d3      	ldr	r3, [r2, r3]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	2108      	movs	r1, #8
 800b3e2:	1879      	adds	r1, r7, r1
 800b3e4:	0010      	movs	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	0003      	movs	r3, r0
 800b3ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ec:	e03b      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	0011      	movs	r1, r2
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f000 fa9b 	bl	800b930 <USBD_CtlError>
            err++;
 800b3fa:	210b      	movs	r1, #11
 800b3fc:	187b      	adds	r3, r7, r1
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	187b      	adds	r3, r7, r1
 800b402:	3201      	adds	r2, #1
 800b404:	701a      	strb	r2, [r3, #0]
          break;
 800b406:	e02e      	b.n	800b466 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	23ac      	movs	r3, #172	; 0xac
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	58d3      	ldr	r3, [r2, r3]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00d      	beq.n	800b432 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	23ac      	movs	r3, #172	; 0xac
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	58d3      	ldr	r3, [r2, r3]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	7c12      	ldrb	r2, [r2, #16]
 800b424:	2108      	movs	r1, #8
 800b426:	1879      	adds	r1, r7, r1
 800b428:	0010      	movs	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	0003      	movs	r3, r0
 800b42e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b430:	e019      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	0011      	movs	r1, r2
 800b438:	0018      	movs	r0, r3
 800b43a:	f000 fa79 	bl	800b930 <USBD_CtlError>
            err++;
 800b43e:	210b      	movs	r1, #11
 800b440:	187b      	adds	r3, r7, r1
 800b442:	781a      	ldrb	r2, [r3, #0]
 800b444:	187b      	adds	r3, r7, r1
 800b446:	3201      	adds	r2, #1
 800b448:	701a      	strb	r2, [r3, #0]
          break;
 800b44a:	e00c      	b.n	800b466 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	0011      	movs	r1, r2
 800b452:	0018      	movs	r0, r3
 800b454:	f000 fa6c 	bl	800b930 <USBD_CtlError>
          err++;
 800b458:	210b      	movs	r1, #11
 800b45a:	187b      	adds	r3, r7, r1
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	187b      	adds	r3, r7, r1
 800b460:	3201      	adds	r2, #1
 800b462:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b464:	e04b      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>
 800b466:	e04a      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	7c1b      	ldrb	r3, [r3, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10b      	bne.n	800b488 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	23ad      	movs	r3, #173	; 0xad
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	58d3      	ldr	r3, [r2, r3]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	2208      	movs	r2, #8
 800b47c:	18ba      	adds	r2, r7, r2
 800b47e:	0010      	movs	r0, r2
 800b480:	4798      	blx	r3
 800b482:	0003      	movs	r3, r0
 800b484:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b486:	e03a      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	0011      	movs	r1, r2
 800b48e:	0018      	movs	r0, r3
 800b490:	f000 fa4e 	bl	800b930 <USBD_CtlError>
        err++;
 800b494:	210b      	movs	r1, #11
 800b496:	187b      	adds	r3, r7, r1
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	187b      	adds	r3, r7, r1
 800b49c:	3201      	adds	r2, #1
 800b49e:	701a      	strb	r2, [r3, #0]
      break;
 800b4a0:	e02d      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7c1b      	ldrb	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10f      	bne.n	800b4ca <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	23ad      	movs	r3, #173	; 0xad
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	58d3      	ldr	r3, [r2, r3]
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	18ba      	adds	r2, r7, r2
 800b4b8:	0010      	movs	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	0003      	movs	r3, r0
 800b4be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	2207      	movs	r2, #7
 800b4c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4c8:	e019      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	0011      	movs	r1, r2
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f000 fa2d 	bl	800b930 <USBD_CtlError>
        err++;
 800b4d6:	210b      	movs	r1, #11
 800b4d8:	187b      	adds	r3, r7, r1
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	187b      	adds	r3, r7, r1
 800b4de:	3201      	adds	r2, #1
 800b4e0:	701a      	strb	r2, [r3, #0]
      break;
 800b4e2:	e00c      	b.n	800b4fe <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	0011      	movs	r1, r2
 800b4ea:	0018      	movs	r0, r3
 800b4ec:	f000 fa20 	bl	800b930 <USBD_CtlError>
      err++;
 800b4f0:	210b      	movs	r1, #11
 800b4f2:	187b      	adds	r3, r7, r1
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	187b      	adds	r3, r7, r1
 800b4f8:	3201      	adds	r2, #1
 800b4fa:	701a      	strb	r2, [r3, #0]
      break;
 800b4fc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b4fe:	230b      	movs	r3, #11
 800b500:	18fb      	adds	r3, r7, r3
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d127      	bne.n	800b558 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b508:	2108      	movs	r1, #8
 800b50a:	187b      	adds	r3, r7, r1
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d019      	beq.n	800b546 <USBD_GetDescriptor+0x342>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88db      	ldrh	r3, [r3, #6]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d015      	beq.n	800b546 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88da      	ldrh	r2, [r3, #6]
 800b51e:	187b      	adds	r3, r7, r1
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	1c18      	adds	r0, r3, #0
 800b524:	1c11      	adds	r1, r2, #0
 800b526:	b28a      	uxth	r2, r1
 800b528:	b283      	uxth	r3, r0
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d900      	bls.n	800b530 <USBD_GetDescriptor+0x32c>
 800b52e:	1c01      	adds	r1, r0, #0
 800b530:	b28a      	uxth	r2, r1
 800b532:	2108      	movs	r1, #8
 800b534:	187b      	adds	r3, r7, r1
 800b536:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b538:	187b      	adds	r3, r7, r1
 800b53a:	881a      	ldrh	r2, [r3, #0]
 800b53c:	68f9      	ldr	r1, [r7, #12]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	0018      	movs	r0, r3
 800b542:	f000 fa73 	bl	800ba2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	88db      	ldrh	r3, [r3, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d105      	bne.n	800b55a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f000 fad5 	bl	800bb00 <USBD_CtlSendStatus>
 800b556:	e000      	b.n	800b55a <USBD_GetDescriptor+0x356>
    return;
 800b558:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b004      	add	sp, #16
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	0800d09c 	.word	0x0800d09c
 800b564:	0800d0bc 	.word	0x0800d0bc

0800b568 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	889b      	ldrh	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d13d      	bne.n	800b5f6 <USBD_SetAddress+0x8e>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d139      	bne.n	800b5f6 <USBD_SetAddress+0x8e>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	2b7f      	cmp	r3, #127	; 0x7f
 800b588:	d835      	bhi.n	800b5f6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	885b      	ldrh	r3, [r3, #2]
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	230f      	movs	r3, #15
 800b592:	18fb      	adds	r3, r7, r3
 800b594:	217f      	movs	r1, #127	; 0x7f
 800b596:	400a      	ands	r2, r1
 800b598:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	23a7      	movs	r3, #167	; 0xa7
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	5cd3      	ldrb	r3, [r2, r3]
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d106      	bne.n	800b5b4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	0011      	movs	r1, r2
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f000 f9bf 	bl	800b930 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b2:	e027      	b.n	800b604 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	240f      	movs	r4, #15
 800b5b8:	193a      	adds	r2, r7, r4
 800b5ba:	4914      	ldr	r1, [pc, #80]	; (800b60c <USBD_SetAddress+0xa4>)
 800b5bc:	7812      	ldrb	r2, [r2, #0]
 800b5be:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5c0:	193b      	adds	r3, r7, r4
 800b5c2:	781a      	ldrb	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	0011      	movs	r1, r2
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f000 ff25 	bl	800c418 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f000 fa95 	bl	800bb00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5d6:	193b      	adds	r3, r7, r4
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d005      	beq.n	800b5ea <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	23a7      	movs	r3, #167	; 0xa7
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	2102      	movs	r1, #2
 800b5e6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e8:	e00c      	b.n	800b604 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	23a7      	movs	r3, #167	; 0xa7
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f4:	e006      	b.n	800b604 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	0011      	movs	r1, r2
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f000 f997 	bl	800b930 <USBD_CtlError>
  }
}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	46c0      	nop			; (mov r8, r8)
 800b606:	46bd      	mov	sp, r7
 800b608:	b005      	add	sp, #20
 800b60a:	bd90      	pop	{r4, r7, pc}
 800b60c:	0000029e 	.word	0x0000029e

0800b610 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	885b      	ldrh	r3, [r3, #2]
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	4b4c      	ldr	r3, [pc, #304]	; (800b754 <USBD_SetConfig+0x144>)
 800b622:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b624:	4b4b      	ldr	r3, [pc, #300]	; (800b754 <USBD_SetConfig+0x144>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d906      	bls.n	800b63a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	0011      	movs	r1, r2
 800b632:	0018      	movs	r0, r3
 800b634:	f000 f97c 	bl	800b930 <USBD_CtlError>
 800b638:	e088      	b.n	800b74c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	23a7      	movs	r3, #167	; 0xa7
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	5cd3      	ldrb	r3, [r2, r3]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d002      	beq.n	800b64c <USBD_SetConfig+0x3c>
 800b646:	2b03      	cmp	r3, #3
 800b648:	d029      	beq.n	800b69e <USBD_SetConfig+0x8e>
 800b64a:	e071      	b.n	800b730 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b64c:	4b41      	ldr	r3, [pc, #260]	; (800b754 <USBD_SetConfig+0x144>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d01f      	beq.n	800b694 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b654:	4b3f      	ldr	r3, [pc, #252]	; (800b754 <USBD_SetConfig+0x144>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	001a      	movs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	23a7      	movs	r3, #167	; 0xa7
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	2103      	movs	r1, #3
 800b666:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b668:	4b3a      	ldr	r3, [pc, #232]	; (800b754 <USBD_SetConfig+0x144>)
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	0011      	movs	r1, r2
 800b670:	0018      	movs	r0, r3
 800b672:	f7ff f8c6 	bl	800a802 <USBD_SetClassConfig>
 800b676:	0003      	movs	r3, r0
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d106      	bne.n	800b68a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	0011      	movs	r1, r2
 800b682:	0018      	movs	r0, r3
 800b684:	f000 f954 	bl	800b930 <USBD_CtlError>
            return;
 800b688:	e060      	b.n	800b74c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	0018      	movs	r0, r3
 800b68e:	f000 fa37 	bl	800bb00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b692:	e05b      	b.n	800b74c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	0018      	movs	r0, r3
 800b698:	f000 fa32 	bl	800bb00 <USBD_CtlSendStatus>
        break;
 800b69c:	e056      	b.n	800b74c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b69e:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <USBD_SetConfig+0x144>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d115      	bne.n	800b6d2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	23a7      	movs	r3, #167	; 0xa7
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b6b0:	4b28      	ldr	r3, [pc, #160]	; (800b754 <USBD_SetConfig+0x144>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	001a      	movs	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b6ba:	4b26      	ldr	r3, [pc, #152]	; (800b754 <USBD_SetConfig+0x144>)
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	0011      	movs	r1, r2
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7ff f8c4 	bl	800a850 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f000 fa18 	bl	800bb00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b6d0:	e03c      	b.n	800b74c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b6d2:	4b20      	ldr	r3, [pc, #128]	; (800b754 <USBD_SetConfig+0x144>)
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d022      	beq.n	800b726 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	0011      	movs	r1, r2
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7ff f8b0 	bl	800a850 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b6f0:	4b18      	ldr	r3, [pc, #96]	; (800b754 <USBD_SetConfig+0x144>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	001a      	movs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <USBD_SetConfig+0x144>)
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	0011      	movs	r1, r2
 800b702:	0018      	movs	r0, r3
 800b704:	f7ff f87d 	bl	800a802 <USBD_SetClassConfig>
 800b708:	0003      	movs	r3, r0
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d106      	bne.n	800b71c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	0011      	movs	r1, r2
 800b714:	0018      	movs	r0, r3
 800b716:	f000 f90b 	bl	800b930 <USBD_CtlError>
            return;
 800b71a:	e017      	b.n	800b74c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	0018      	movs	r0, r3
 800b720:	f000 f9ee 	bl	800bb00 <USBD_CtlSendStatus>
        break;
 800b724:	e012      	b.n	800b74c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	0018      	movs	r0, r3
 800b72a:	f000 f9e9 	bl	800bb00 <USBD_CtlSendStatus>
        break;
 800b72e:	e00d      	b.n	800b74c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	0011      	movs	r1, r2
 800b736:	0018      	movs	r0, r3
 800b738:	f000 f8fa 	bl	800b930 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <USBD_SetConfig+0x144>)
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	0011      	movs	r1, r2
 800b744:	0018      	movs	r0, r3
 800b746:	f7ff f883 	bl	800a850 <USBD_ClrClassConfig>
        break;
 800b74a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b74c:	46bd      	mov	sp, r7
 800b74e:	b002      	add	sp, #8
 800b750:	bd80      	pop	{r7, pc}
 800b752:	46c0      	nop			; (mov r8, r8)
 800b754:	20000264 	.word	0x20000264

0800b758 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d006      	beq.n	800b778 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	0011      	movs	r1, r2
 800b770:	0018      	movs	r0, r3
 800b772:	f000 f8dd 	bl	800b930 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b776:	e026      	b.n	800b7c6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	23a7      	movs	r3, #167	; 0xa7
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	5cd3      	ldrb	r3, [r2, r3]
 800b780:	2b02      	cmp	r3, #2
 800b782:	dc02      	bgt.n	800b78a <USBD_GetConfig+0x32>
 800b784:	2b00      	cmp	r3, #0
 800b786:	dc03      	bgt.n	800b790 <USBD_GetConfig+0x38>
 800b788:	e016      	b.n	800b7b8 <USBD_GetConfig+0x60>
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d00c      	beq.n	800b7a8 <USBD_GetConfig+0x50>
 800b78e:	e013      	b.n	800b7b8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3308      	adds	r3, #8
 800b79a:	0019      	movs	r1, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f000 f943 	bl	800ba2c <USBD_CtlSendData>
        break;
 800b7a6:	e00e      	b.n	800b7c6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	1d19      	adds	r1, r3, #4
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f000 f93b 	bl	800ba2c <USBD_CtlSendData>
        break;
 800b7b6:	e006      	b.n	800b7c6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	0011      	movs	r1, r2
 800b7be:	0018      	movs	r0, r3
 800b7c0:	f000 f8b6 	bl	800b930 <USBD_CtlError>
        break;
 800b7c4:	46c0      	nop			; (mov r8, r8)
}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	b002      	add	sp, #8
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	23a7      	movs	r3, #167	; 0xa7
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	5cd3      	ldrb	r3, [r2, r3]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d822      	bhi.n	800b82c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d006      	beq.n	800b7fc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	0011      	movs	r1, r2
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f000 f89b 	bl	800b930 <USBD_CtlError>
        break;
 800b7fa:	e01e      	b.n	800b83a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	23a9      	movs	r3, #169	; 0xa9
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	58d3      	ldr	r3, [r2, r3]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2202      	movs	r2, #2
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	330c      	adds	r3, #12
 800b81e:	0019      	movs	r1, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	0018      	movs	r0, r3
 800b826:	f000 f901 	bl	800ba2c <USBD_CtlSendData>
      break;
 800b82a:	e006      	b.n	800b83a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	0011      	movs	r1, r2
 800b832:	0018      	movs	r0, r3
 800b834:	f000 f87c 	bl	800b930 <USBD_CtlError>
      break;
 800b838:	46c0      	nop			; (mov r8, r8)
  }
}
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	46bd      	mov	sp, r7
 800b83e:	b002      	add	sp, #8
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	885b      	ldrh	r3, [r3, #2]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d108      	bne.n	800b866 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	23a9      	movs	r3, #169	; 0xa9
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	2101      	movs	r1, #1
 800b85c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	0018      	movs	r0, r3
 800b862:	f000 f94d 	bl	800bb00 <USBD_CtlSendStatus>
  }
}
 800b866:	46c0      	nop			; (mov r8, r8)
 800b868:	46bd      	mov	sp, r7
 800b86a:	b002      	add	sp, #8
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	23a7      	movs	r3, #167	; 0xa7
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	5cd3      	ldrb	r3, [r2, r3]
 800b880:	3b01      	subs	r3, #1
 800b882:	2b02      	cmp	r3, #2
 800b884:	d80d      	bhi.n	800b8a2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	885b      	ldrh	r3, [r3, #2]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d110      	bne.n	800b8b0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	23a9      	movs	r3, #169	; 0xa9
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	2100      	movs	r1, #0
 800b896:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	0018      	movs	r0, r3
 800b89c:	f000 f930 	bl	800bb00 <USBD_CtlSendStatus>
      }
      break;
 800b8a0:	e006      	b.n	800b8b0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	0011      	movs	r1, r2
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	f000 f841 	bl	800b930 <USBD_CtlError>
      break;
 800b8ae:	e000      	b.n	800b8b2 <USBD_ClrFeature+0x44>
      break;
 800b8b0:	46c0      	nop			; (mov r8, r8)
  }
}
 800b8b2:	46c0      	nop			; (mov r8, r8)
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	b002      	add	sp, #8
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781a      	ldrb	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	785a      	ldrb	r2, [r3, #1]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	3302      	adds	r3, #2
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	3303      	adds	r3, #3
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	021b      	lsls	r3, r3, #8
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	18d3      	adds	r3, r2, r3
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	3305      	adds	r3, #5
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	021b      	lsls	r3, r3, #8
 800b902:	b29b      	uxth	r3, r3
 800b904:	18d3      	adds	r3, r2, r3
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	3306      	adds	r3, #6
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b29a      	uxth	r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	3307      	adds	r3, #7
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	021b      	lsls	r3, r3, #8
 800b91e:	b29b      	uxth	r3, r3
 800b920:	18d3      	adds	r3, r2, r3
 800b922:	b29a      	uxth	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	80da      	strh	r2, [r3, #6]

}
 800b928:	46c0      	nop			; (mov r8, r8)
 800b92a:	46bd      	mov	sp, r7
 800b92c:	b002      	add	sp, #8
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2180      	movs	r1, #128	; 0x80
 800b93e:	0018      	movs	r0, r3
 800b940:	f000 fce3 	bl	800c30a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2100      	movs	r1, #0
 800b948:	0018      	movs	r0, r3
 800b94a:	f000 fcde 	bl	800c30a <USBD_LL_StallEP>
}
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	46bd      	mov	sp, r7
 800b952:	b002      	add	sp, #8
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b956:	b590      	push	{r4, r7, lr}
 800b958:	b087      	sub	sp, #28
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b962:	2417      	movs	r4, #23
 800b964:	193b      	adds	r3, r7, r4
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d03c      	beq.n	800b9ea <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	0018      	movs	r0, r3
 800b974:	f000 f83d 	bl	800b9f2 <USBD_GetLen>
 800b978:	0003      	movs	r3, r0
 800b97a:	3301      	adds	r3, #1
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	18db      	adds	r3, r3, r3
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b986:	193b      	adds	r3, r7, r4
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	193a      	adds	r2, r7, r4
 800b98c:	1c59      	adds	r1, r3, #1
 800b98e:	7011      	strb	r1, [r2, #0]
 800b990:	001a      	movs	r2, r3
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	189b      	adds	r3, r3, r2
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	7812      	ldrb	r2, [r2, #0]
 800b99a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b99c:	193b      	adds	r3, r7, r4
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	193a      	adds	r2, r7, r4
 800b9a2:	1c59      	adds	r1, r3, #1
 800b9a4:	7011      	strb	r1, [r2, #0]
 800b9a6:	001a      	movs	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	189b      	adds	r3, r3, r2
 800b9ac:	2203      	movs	r2, #3
 800b9ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b9b0:	e017      	b.n	800b9e2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	60fa      	str	r2, [r7, #12]
 800b9b8:	2417      	movs	r4, #23
 800b9ba:	193a      	adds	r2, r7, r4
 800b9bc:	7812      	ldrb	r2, [r2, #0]
 800b9be:	1939      	adds	r1, r7, r4
 800b9c0:	1c50      	adds	r0, r2, #1
 800b9c2:	7008      	strb	r0, [r1, #0]
 800b9c4:	0011      	movs	r1, r2
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	1852      	adds	r2, r2, r1
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b9ce:	193b      	adds	r3, r7, r4
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	193a      	adds	r2, r7, r4
 800b9d4:	1c59      	adds	r1, r3, #1
 800b9d6:	7011      	strb	r1, [r2, #0]
 800b9d8:	001a      	movs	r2, r3
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	189b      	adds	r3, r3, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1e3      	bne.n	800b9b2 <USBD_GetString+0x5c>
    }
  }
}
 800b9ea:	46c0      	nop			; (mov r8, r8)
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	b007      	add	sp, #28
 800b9f0:	bd90      	pop	{r4, r7, pc}

0800b9f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9fa:	230f      	movs	r3, #15
 800b9fc:	18fb      	adds	r3, r7, r3
 800b9fe:	2200      	movs	r2, #0
 800ba00:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ba02:	e008      	b.n	800ba16 <USBD_GetLen+0x24>
  {
    len++;
 800ba04:	210f      	movs	r1, #15
 800ba06:	187b      	adds	r3, r7, r1
 800ba08:	781a      	ldrb	r2, [r3, #0]
 800ba0a:	187b      	adds	r3, r7, r1
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
    buf++;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3301      	adds	r3, #1
 800ba14:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f2      	bne.n	800ba04 <USBD_GetLen+0x12>
  }

  return len;
 800ba1e:	230f      	movs	r3, #15
 800ba20:	18fb      	adds	r3, r7, r3
 800ba22:	781b      	ldrb	r3, [r3, #0]
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b004      	add	sp, #16
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	1dbb      	adds	r3, r7, #6
 800ba38:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	23a5      	movs	r3, #165	; 0xa5
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	2102      	movs	r1, #2
 800ba42:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ba44:	1dbb      	adds	r3, r7, #6
 800ba46:	881a      	ldrh	r2, [r3, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba4c:	1dbb      	adds	r3, r7, #6
 800ba4e:	881a      	ldrh	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba54:	1dbb      	adds	r3, r7, #6
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	f000 fd06 	bl	800c46e <USBD_LL_Transmit>

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	0018      	movs	r0, r3
 800ba66:	46bd      	mov	sp, r7
 800ba68:	b004      	add	sp, #16
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	1dbb      	adds	r3, r7, #6
 800ba78:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba7a:	1dbb      	adds	r3, r7, #6
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	2100      	movs	r1, #0
 800ba84:	f000 fcf3 	bl	800c46e <USBD_LL_Transmit>

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	0018      	movs	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b004      	add	sp, #16
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	1dbb      	adds	r3, r7, #6
 800ba9e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	23a5      	movs	r3, #165	; 0xa5
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	2103      	movs	r1, #3
 800baa8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800baaa:	1dbb      	adds	r3, r7, #6
 800baac:	8819      	ldrh	r1, [r3, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	23ae      	movs	r3, #174	; 0xae
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bab6:	1dbb      	adds	r3, r7, #6
 800bab8:	8819      	ldrh	r1, [r3, #0]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	23b0      	movs	r3, #176	; 0xb0
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bac2:	1dbb      	adds	r3, r7, #6
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	2100      	movs	r1, #0
 800bacc:	f000 fd06 	bl	800c4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	0018      	movs	r0, r3
 800bad4:	46bd      	mov	sp, r7
 800bad6:	b004      	add	sp, #16
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	1dbb      	adds	r3, r7, #6
 800bae6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bae8:	1dbb      	adds	r3, r7, #6
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	2100      	movs	r1, #0
 800baf2:	f000 fcf3 	bl	800c4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	0018      	movs	r0, r3
 800bafa:	46bd      	mov	sp, r7
 800bafc:	b004      	add	sp, #16
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	23a5      	movs	r3, #165	; 0xa5
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	2104      	movs	r1, #4
 800bb10:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	f000 fca8 	bl	800c46e <USBD_LL_Transmit>

  return USBD_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	0018      	movs	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b002      	add	sp, #8
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	23a5      	movs	r3, #165	; 0xa5
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	2105      	movs	r1, #5
 800bb38:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2100      	movs	r1, #0
 800bb42:	f000 fccb 	bl	800c4dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	0018      	movs	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	b002      	add	sp, #8
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb54:	4914      	ldr	r1, [pc, #80]	; (800bba8 <MX_USB_DEVICE_Init+0x58>)
 800bb56:	4b15      	ldr	r3, [pc, #84]	; (800bbac <MX_USB_DEVICE_Init+0x5c>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	0018      	movs	r0, r3
 800bb5c:	f7fe fdea 	bl	800a734 <USBD_Init>
 800bb60:	1e03      	subs	r3, r0, #0
 800bb62:	d001      	beq.n	800bb68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb64:	f7f5 fd2c 	bl	80015c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb68:	4a11      	ldr	r2, [pc, #68]	; (800bbb0 <MX_USB_DEVICE_Init+0x60>)
 800bb6a:	4b10      	ldr	r3, [pc, #64]	; (800bbac <MX_USB_DEVICE_Init+0x5c>)
 800bb6c:	0011      	movs	r1, r2
 800bb6e:	0018      	movs	r0, r3
 800bb70:	f7fe fe11 	bl	800a796 <USBD_RegisterClass>
 800bb74:	1e03      	subs	r3, r0, #0
 800bb76:	d001      	beq.n	800bb7c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bb78:	f7f5 fd22 	bl	80015c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb7c:	4a0d      	ldr	r2, [pc, #52]	; (800bbb4 <MX_USB_DEVICE_Init+0x64>)
 800bb7e:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <MX_USB_DEVICE_Init+0x5c>)
 800bb80:	0011      	movs	r1, r2
 800bb82:	0018      	movs	r0, r3
 800bb84:	f7fe fd26 	bl	800a5d4 <USBD_CDC_RegisterInterface>
 800bb88:	1e03      	subs	r3, r0, #0
 800bb8a:	d001      	beq.n	800bb90 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bb8c:	f7f5 fd18 	bl	80015c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb90:	4b06      	ldr	r3, [pc, #24]	; (800bbac <MX_USB_DEVICE_Init+0x5c>)
 800bb92:	0018      	movs	r0, r3
 800bb94:	f7fe fe1f 	bl	800a7d6 <USBD_Start>
 800bb98:	1e03      	subs	r3, r0, #0
 800bb9a:	d001      	beq.n	800bba0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bb9c:	f7f5 fd10 	bl	80015c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bba0:	46c0      	nop			; (mov r8, r8)
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	2000012c 	.word	0x2000012c
 800bbac:	20000694 	.word	0x20000694
 800bbb0:	20000018 	.word	0x20000018
 800bbb4:	2000011c 	.word	0x2000011c

0800bbb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbbc:	4907      	ldr	r1, [pc, #28]	; (800bbdc <CDC_Init_FS+0x24>)
 800bbbe:	4b08      	ldr	r3, [pc, #32]	; (800bbe0 <CDC_Init_FS+0x28>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f7fe fd21 	bl	800a60a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbc8:	4a06      	ldr	r2, [pc, #24]	; (800bbe4 <CDC_Init_FS+0x2c>)
 800bbca:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <CDC_Init_FS+0x28>)
 800bbcc:	0011      	movs	r1, r2
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f7fe fd37 	bl	800a642 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbd4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20000d40 	.word	0x20000d40
 800bbe0:	20000694 	.word	0x20000694
 800bbe4:	20000958 	.word	0x20000958

0800bbe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbee:	0018      	movs	r0, r3
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6039      	str	r1, [r7, #0]
 800bbfc:	0011      	movs	r1, r2
 800bbfe:	1dfb      	adds	r3, r7, #7
 800bc00:	1c02      	adds	r2, r0, #0
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	1d3b      	adds	r3, r7, #4
 800bc06:	1c0a      	adds	r2, r1, #0
 800bc08:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc0a:	1dfb      	adds	r3, r7, #7
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b23      	cmp	r3, #35	; 0x23
 800bc10:	d804      	bhi.n	800bc1c <CDC_Control_FS+0x28>
 800bc12:	009a      	lsls	r2, r3, #2
 800bc14:	4b04      	ldr	r3, [pc, #16]	; (800bc28 <CDC_Control_FS+0x34>)
 800bc16:	18d3      	adds	r3, r2, r3
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc1c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bc1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc20:	0018      	movs	r0, r3
 800bc22:	46bd      	mov	sp, r7
 800bc24:	b002      	add	sp, #8
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0800d0d4 	.word	0x0800d0d4

0800bc2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800bc36:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <CDC_Receive_FS+0x6c>)
 800bc38:	7a1a      	ldrb	r2, [r3, #8]
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800bc40:	230f      	movs	r3, #15
 800bc42:	18fb      	adds	r3, r7, r3
 800bc44:	2200      	movs	r2, #0
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	e00f      	b.n	800bc6a <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <CDC_Receive_FS+0x70>)
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	240f      	movs	r4, #15
 800bc50:	193b      	adds	r3, r7, r4
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	18d3      	adds	r3, r2, r3
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	f7f5 fcea 	bl	8001634 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800bc60:	193b      	adds	r3, r7, r4
 800bc62:	781a      	ldrb	r2, [r3, #0]
 800bc64:	193b      	adds	r3, r7, r4
 800bc66:	3201      	adds	r2, #1
 800bc68:	701a      	strb	r2, [r3, #0]
 800bc6a:	230f      	movs	r3, #15
 800bc6c:	18fb      	adds	r3, r7, r3
 800bc6e:	781a      	ldrb	r2, [r3, #0]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d3e8      	bcc.n	800bc4a <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <CDC_Receive_FS+0x74>)
 800bc7c:	0011      	movs	r1, r2
 800bc7e:	0018      	movs	r0, r3
 800bc80:	f7fe fcdf 	bl	800a642 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc84:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <CDC_Receive_FS+0x74>)
 800bc86:	0018      	movs	r0, r3
 800bc88:	f7fe fd26 	bl	800a6d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc8e:	0018      	movs	r0, r3
 800bc90:	46bd      	mov	sp, r7
 800bc92:	b005      	add	sp, #20
 800bc94:	bd90      	pop	{r4, r7, pc}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	20000620 	.word	0x20000620
 800bc9c:	20001128 	.word	0x20001128
 800bca0:	20000694 	.word	0x20000694

0800bca4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bca4:	b5b0      	push	{r4, r5, r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	000a      	movs	r2, r1
 800bcae:	1cbb      	adds	r3, r7, #2
 800bcb0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bcb2:	230f      	movs	r3, #15
 800bcb4:	18fb      	adds	r3, r7, r3
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcba:	4a11      	ldr	r2, [pc, #68]	; (800bd00 <CDC_Transmit_FS+0x5c>)
 800bcbc:	23ae      	movs	r3, #174	; 0xae
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	58d3      	ldr	r3, [r2, r3]
 800bcc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	2385      	movs	r3, #133	; 0x85
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	58d3      	ldr	r3, [r2, r3]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e010      	b.n	800bcf6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcd4:	1cbb      	adds	r3, r7, #2
 800bcd6:	881a      	ldrh	r2, [r3, #0]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <CDC_Transmit_FS+0x5c>)
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7fe fc94 	bl	800a60a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bce2:	250f      	movs	r5, #15
 800bce4:	197c      	adds	r4, r7, r5
 800bce6:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <CDC_Transmit_FS+0x5c>)
 800bce8:	0018      	movs	r0, r3
 800bcea:	f7fe fcbe 	bl	800a66a <USBD_CDC_TransmitPacket>
 800bcee:	0003      	movs	r3, r0
 800bcf0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bcf2:	197b      	adds	r3, r7, r5
 800bcf4:	781b      	ldrb	r3, [r3, #0]
}
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	b004      	add	sp, #16
 800bcfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	20000694 	.word	0x20000694

0800bd04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	0002      	movs	r2, r0
 800bd0c:	6039      	str	r1, [r7, #0]
 800bd0e:	1dfb      	adds	r3, r7, #7
 800bd10:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2212      	movs	r2, #18
 800bd16:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd18:	4b02      	ldr	r3, [pc, #8]	; (800bd24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	b002      	add	sp, #8
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	20000148 	.word	0x20000148

0800bd28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	0002      	movs	r2, r0
 800bd30:	6039      	str	r1, [r7, #0]
 800bd32:	1dfb      	adds	r3, r7, #7
 800bd34:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2204      	movs	r2, #4
 800bd3a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd3c:	4b02      	ldr	r3, [pc, #8]	; (800bd48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd3e:	0018      	movs	r0, r3
 800bd40:	46bd      	mov	sp, r7
 800bd42:	b002      	add	sp, #8
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	2000015c 	.word	0x2000015c

0800bd4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	0002      	movs	r2, r0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	1dfb      	adds	r3, r7, #7
 800bd58:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bd5a:	1dfb      	adds	r3, r7, #7
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4908      	ldr	r1, [pc, #32]	; (800bd88 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <USBD_FS_ProductStrDescriptor+0x40>)
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f7ff fdf4 	bl	800b956 <USBD_GetString>
 800bd6e:	e005      	b.n	800bd7c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	4905      	ldr	r1, [pc, #20]	; (800bd88 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <USBD_FS_ProductStrDescriptor+0x40>)
 800bd76:	0018      	movs	r0, r3
 800bd78:	f7ff fded 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd7c:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800bd7e:	0018      	movs	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b002      	add	sp, #8
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	2000112c 	.word	0x2000112c
 800bd8c:	0800cf84 	.word	0x0800cf84

0800bd90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	0002      	movs	r2, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	1dfb      	adds	r3, r7, #7
 800bd9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bda2:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7ff fdd6 	bl	800b956 <USBD_GetString>
  return USBD_StrDesc;
 800bdaa:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800bdac:	0018      	movs	r0, r3
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b002      	add	sp, #8
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	2000112c 	.word	0x2000112c
 800bdb8:	0800cf9c 	.word	0x0800cf9c

0800bdbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	0002      	movs	r2, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	1dfb      	adds	r3, r7, #7
 800bdc8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	221a      	movs	r2, #26
 800bdce:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdd0:	f000 f84c 	bl	800be6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdd4:	4b02      	ldr	r3, [pc, #8]	; (800bde0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	b002      	add	sp, #8
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	46c0      	nop			; (mov r8, r8)
 800bde0:	20000160 	.word	0x20000160

0800bde4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	0002      	movs	r2, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	1dfb      	adds	r3, r7, #7
 800bdf0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800bdf2:	1dfb      	adds	r3, r7, #7
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	4908      	ldr	r1, [pc, #32]	; (800be20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <USBD_FS_ConfigStrDescriptor+0x40>)
 800be00:	0018      	movs	r0, r3
 800be02:	f7ff fda8 	bl	800b956 <USBD_GetString>
 800be06:	e005      	b.n	800be14 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	4905      	ldr	r1, [pc, #20]	; (800be20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <USBD_FS_ConfigStrDescriptor+0x40>)
 800be0e:	0018      	movs	r0, r3
 800be10:	f7ff fda1 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be14:	4b02      	ldr	r3, [pc, #8]	; (800be20 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800be16:	0018      	movs	r0, r3
 800be18:	46bd      	mov	sp, r7
 800be1a:	b002      	add	sp, #8
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	2000112c 	.word	0x2000112c
 800be24:	0800cfb0 	.word	0x0800cfb0

0800be28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	0002      	movs	r2, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	1dfb      	adds	r3, r7, #7
 800be34:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800be36:	1dfb      	adds	r3, r7, #7
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4908      	ldr	r1, [pc, #32]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800be42:	4b09      	ldr	r3, [pc, #36]	; (800be68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800be44:	0018      	movs	r0, r3
 800be46:	f7ff fd86 	bl	800b956 <USBD_GetString>
 800be4a:	e005      	b.n	800be58 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4905      	ldr	r1, [pc, #20]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800be50:	4b05      	ldr	r3, [pc, #20]	; (800be68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800be52:	0018      	movs	r0, r3
 800be54:	f7ff fd7f 	bl	800b956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800be5a:	0018      	movs	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	b002      	add	sp, #8
 800be60:	bd80      	pop	{r7, pc}
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	2000112c 	.word	0x2000112c
 800be68:	0800cfbc 	.word	0x0800cfbc

0800be6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be72:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <Get_SerialNum+0x48>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be78:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <Get_SerialNum+0x4c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <Get_SerialNum+0x50>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	18d3      	adds	r3, r2, r3
 800be8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00b      	beq.n	800beaa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be92:	490b      	ldr	r1, [pc, #44]	; (800bec0 <Get_SerialNum+0x54>)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2208      	movs	r2, #8
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 f815 	bl	800bec8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be9e:	4909      	ldr	r1, [pc, #36]	; (800bec4 <Get_SerialNum+0x58>)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2204      	movs	r2, #4
 800bea4:	0018      	movs	r0, r3
 800bea6:	f000 f80f 	bl	800bec8 <IntToUnicode>
  }
}
 800beaa:	46c0      	nop			; (mov r8, r8)
 800beac:	46bd      	mov	sp, r7
 800beae:	b004      	add	sp, #16
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	1ffff7ac 	.word	0x1ffff7ac
 800beb8:	1ffff7b0 	.word	0x1ffff7b0
 800bebc:	1ffff7b4 	.word	0x1ffff7b4
 800bec0:	20000162 	.word	0x20000162
 800bec4:	20000172 	.word	0x20000172

0800bec8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	1dfb      	adds	r3, r7, #7
 800bed4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800bed6:	2117      	movs	r1, #23
 800bed8:	187b      	adds	r3, r7, r1
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800bede:	187b      	adds	r3, r7, r1
 800bee0:	2200      	movs	r2, #0
 800bee2:	701a      	strb	r2, [r3, #0]
 800bee4:	e02f      	b.n	800bf46 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	0f1b      	lsrs	r3, r3, #28
 800beea:	2b09      	cmp	r3, #9
 800beec:	d80d      	bhi.n	800bf0a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	0f1b      	lsrs	r3, r3, #28
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	2317      	movs	r3, #23
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	0019      	movs	r1, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	185b      	adds	r3, r3, r1
 800bf02:	3230      	adds	r2, #48	; 0x30
 800bf04:	b2d2      	uxtb	r2, r2
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	e00c      	b.n	800bf24 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	0f1b      	lsrs	r3, r3, #28
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	2317      	movs	r3, #23
 800bf12:	18fb      	adds	r3, r7, r3
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	0019      	movs	r1, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	185b      	adds	r3, r3, r1
 800bf1e:	3237      	adds	r2, #55	; 0x37
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf2a:	2117      	movs	r1, #23
 800bf2c:	187b      	adds	r3, r7, r1
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	3301      	adds	r3, #1
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	18d3      	adds	r3, r2, r3
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf3c:	187b      	adds	r3, r7, r1
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	187b      	adds	r3, r7, r1
 800bf42:	3201      	adds	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	2317      	movs	r3, #23
 800bf48:	18fa      	adds	r2, r7, r3
 800bf4a:	1dfb      	adds	r3, r7, #7
 800bf4c:	7812      	ldrb	r2, [r2, #0]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d3c8      	bcc.n	800bee6 <IntToUnicode+0x1e>
  }
}
 800bf54:	46c0      	nop			; (mov r8, r8)
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	b006      	add	sp, #24
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <HAL_PCD_MspInit+0x48>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d115      	bne.n	800bf9e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf72:	4b0e      	ldr	r3, [pc, #56]	; (800bfac <HAL_PCD_MspInit+0x4c>)
 800bf74:	69da      	ldr	r2, [r3, #28]
 800bf76:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <HAL_PCD_MspInit+0x4c>)
 800bf78:	2180      	movs	r1, #128	; 0x80
 800bf7a:	0409      	lsls	r1, r1, #16
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	61da      	str	r2, [r3, #28]
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <HAL_PCD_MspInit+0x4c>)
 800bf82:	69da      	ldr	r2, [r3, #28]
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	4013      	ands	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2100      	movs	r1, #0
 800bf92:	201f      	movs	r0, #31
 800bf94:	f7f6 ffc2 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bf98:	201f      	movs	r0, #31
 800bf9a:	f7f6 ffd4 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b004      	add	sp, #16
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	40005c00 	.word	0x40005c00
 800bfac:	40021000 	.word	0x40021000

0800bfb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	23bc      	movs	r3, #188	; 0xbc
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	58d2      	ldr	r2, [r2, r3]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	21ac      	movs	r1, #172	; 0xac
 800bfc4:	0089      	lsls	r1, r1, #2
 800bfc6:	468c      	mov	ip, r1
 800bfc8:	4463      	add	r3, ip
 800bfca:	0019      	movs	r1, r3
 800bfcc:	0010      	movs	r0, r2
 800bfce:	f7fe fc55 	bl	800a87c <USBD_LL_SetupStage>
}
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	b002      	add	sp, #8
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfda:	b590      	push	{r4, r7, lr}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	000a      	movs	r2, r1
 800bfe4:	1cfb      	adds	r3, r7, #3
 800bfe6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	23bc      	movs	r3, #188	; 0xbc
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	58d4      	ldr	r4, [r2, r3]
 800bff0:	1cfb      	adds	r3, r7, #3
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	23be      	movs	r3, #190	; 0xbe
 800bff8:	0059      	lsls	r1, r3, #1
 800bffa:	0013      	movs	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	189b      	adds	r3, r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	18c3      	adds	r3, r0, r3
 800c004:	185b      	adds	r3, r3, r1
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	1cfb      	adds	r3, r7, #3
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	0019      	movs	r1, r3
 800c00e:	0020      	movs	r0, r4
 800c010:	f7fe fc92 	bl	800a938 <USBD_LL_DataOutStage>
}
 800c014:	46c0      	nop			; (mov r8, r8)
 800c016:	46bd      	mov	sp, r7
 800c018:	b003      	add	sp, #12
 800c01a:	bd90      	pop	{r4, r7, pc}

0800c01c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	000a      	movs	r2, r1
 800c026:	1cfb      	adds	r3, r7, #3
 800c028:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	23bc      	movs	r3, #188	; 0xbc
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	58d0      	ldr	r0, [r2, r3]
 800c032:	1cfb      	adds	r3, r7, #3
 800c034:	781a      	ldrb	r2, [r3, #0]
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	0013      	movs	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	189b      	adds	r3, r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	18cb      	adds	r3, r1, r3
 800c042:	333c      	adds	r3, #60	; 0x3c
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	1cfb      	adds	r3, r7, #3
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	0019      	movs	r1, r3
 800c04c:	f7fe fcf6 	bl	800aa3c <USBD_LL_DataInStage>
}
 800c050:	46c0      	nop			; (mov r8, r8)
 800c052:	46bd      	mov	sp, r7
 800c054:	b002      	add	sp, #8
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	23bc      	movs	r3, #188	; 0xbc
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	58d3      	ldr	r3, [r2, r3]
 800c068:	0018      	movs	r0, r3
 800c06a:	f7fe fe2d 	bl	800acc8 <USBD_LL_SOF>
}
 800c06e:	46c0      	nop			; (mov r8, r8)
 800c070:	46bd      	mov	sp, r7
 800c072:	b002      	add	sp, #8
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c07e:	230f      	movs	r3, #15
 800c080:	18fb      	adds	r3, r7, r3
 800c082:	2201      	movs	r2, #1
 800c084:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d001      	beq.n	800c092 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c08e:	f7f5 fa97 	bl	80015c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	23bc      	movs	r3, #188	; 0xbc
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	58d2      	ldr	r2, [r2, r3]
 800c09a:	230f      	movs	r3, #15
 800c09c:	18fb      	adds	r3, r7, r3
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	0019      	movs	r1, r3
 800c0a2:	0010      	movs	r0, r2
 800c0a4:	f7fe fdcf 	bl	800ac46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	23bc      	movs	r3, #188	; 0xbc
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	58d3      	ldr	r3, [r2, r3]
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	f7fe fd80 	bl	800abb6 <USBD_LL_Reset>
}
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	b004      	add	sp, #16
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	23bc      	movs	r3, #188	; 0xbc
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	58d3      	ldr	r3, [r2, r3]
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	f7fe fdc9 	bl	800ac68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	699b      	ldr	r3, [r3, #24]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <HAL_PCD_SuspendCallback+0x34>)
 800c0e0:	691a      	ldr	r2, [r3, #16]
 800c0e2:	4b04      	ldr	r3, [pc, #16]	; (800c0f4 <HAL_PCD_SuspendCallback+0x34>)
 800c0e4:	2106      	movs	r1, #6
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b002      	add	sp, #8
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	e000ed00 	.word	0xe000ed00

0800c0f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d007      	beq.n	800c118 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <HAL_PCD_ResumeCallback+0x38>)
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	4b08      	ldr	r3, [pc, #32]	; (800c130 <HAL_PCD_ResumeCallback+0x38>)
 800c10e:	2106      	movs	r1, #6
 800c110:	438a      	bics	r2, r1
 800c112:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c114:	f000 fa44 	bl	800c5a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	23bc      	movs	r3, #188	; 0xbc
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	58d3      	ldr	r3, [r2, r3]
 800c120:	0018      	movs	r0, r3
 800c122:	f7fe fdb9 	bl	800ac98 <USBD_LL_Resume>
}
 800c126:	46c0      	nop			; (mov r8, r8)
 800c128:	46bd      	mov	sp, r7
 800c12a:	b002      	add	sp, #8
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	46c0      	nop			; (mov r8, r8)
 800c130:	e000ed00 	.word	0xe000ed00

0800c134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c13c:	4a2d      	ldr	r2, [pc, #180]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c13e:	23bc      	movs	r3, #188	; 0xbc
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	23b0      	movs	r3, #176	; 0xb0
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4929      	ldr	r1, [pc, #164]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c14e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c150:	4b28      	ldr	r3, [pc, #160]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c152:	4a29      	ldr	r2, [pc, #164]	; (800c1f8 <USBD_LL_Init+0xc4>)
 800c154:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c156:	4b27      	ldr	r3, [pc, #156]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c158:	2208      	movs	r2, #8
 800c15a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c15c:	4b25      	ldr	r3, [pc, #148]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c15e:	2202      	movs	r2, #2
 800c160:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c162:	4b24      	ldr	r3, [pc, #144]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c164:	2202      	movs	r2, #2
 800c166:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c168:	4b22      	ldr	r3, [pc, #136]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c16e:	4b21      	ldr	r3, [pc, #132]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c170:	2200      	movs	r2, #0
 800c172:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c174:	4b1f      	ldr	r3, [pc, #124]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c176:	2200      	movs	r2, #0
 800c178:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c17a:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <USBD_LL_Init+0xc0>)
 800c17c:	0018      	movs	r0, r3
 800c17e:	f7f7 f967 	bl	8003450 <HAL_PCD_Init>
 800c182:	1e03      	subs	r3, r0, #0
 800c184:	d001      	beq.n	800c18a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c186:	f7f5 fa1b 	bl	80015c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	23b0      	movs	r3, #176	; 0xb0
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	58d0      	ldr	r0, [r2, r3]
 800c192:	2318      	movs	r3, #24
 800c194:	2200      	movs	r2, #0
 800c196:	2100      	movs	r1, #0
 800c198:	f7f8 ff48 	bl	800502c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	23b0      	movs	r3, #176	; 0xb0
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	58d0      	ldr	r0, [r2, r3]
 800c1a4:	2358      	movs	r3, #88	; 0x58
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2180      	movs	r1, #128	; 0x80
 800c1aa:	f7f8 ff3f 	bl	800502c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	23b0      	movs	r3, #176	; 0xb0
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	58d0      	ldr	r0, [r2, r3]
 800c1b6:	23c0      	movs	r3, #192	; 0xc0
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2181      	movs	r1, #129	; 0x81
 800c1bc:	f7f8 ff36 	bl	800502c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	23b0      	movs	r3, #176	; 0xb0
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	58d0      	ldr	r0, [r2, r3]
 800c1c8:	2388      	movs	r3, #136	; 0x88
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	f7f8 ff2c 	bl	800502c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	23b0      	movs	r3, #176	; 0xb0
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	58d0      	ldr	r0, [r2, r3]
 800c1dc:	2380      	movs	r3, #128	; 0x80
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	2182      	movs	r1, #130	; 0x82
 800c1e4:	f7f8 ff22 	bl	800502c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	b002      	add	sp, #8
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	2000132c 	.word	0x2000132c
 800c1f8:	40005c00 	.word	0x40005c00

0800c1fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c204:	210f      	movs	r1, #15
 800c206:	187b      	adds	r3, r7, r1
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20c:	260e      	movs	r6, #14
 800c20e:	19bb      	adds	r3, r7, r6
 800c210:	2200      	movs	r2, #0
 800c212:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	23b0      	movs	r3, #176	; 0xb0
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	58d3      	ldr	r3, [r2, r3]
 800c21c:	000d      	movs	r5, r1
 800c21e:	187c      	adds	r4, r7, r1
 800c220:	0018      	movs	r0, r3
 800c222:	f7f7 fa25 	bl	8003670 <HAL_PCD_Start>
 800c226:	0003      	movs	r3, r0
 800c228:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22a:	19bc      	adds	r4, r7, r6
 800c22c:	197b      	adds	r3, r7, r5
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	0018      	movs	r0, r3
 800c232:	f000 f9bc 	bl	800c5ae <USBD_Get_USB_Status>
 800c236:	0003      	movs	r3, r0
 800c238:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c23a:	19bb      	adds	r3, r7, r6
 800c23c:	781b      	ldrb	r3, [r3, #0]
}
 800c23e:	0018      	movs	r0, r3
 800c240:	46bd      	mov	sp, r7
 800c242:	b005      	add	sp, #20
 800c244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c246:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c248:	b085      	sub	sp, #20
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	000c      	movs	r4, r1
 800c250:	0010      	movs	r0, r2
 800c252:	0019      	movs	r1, r3
 800c254:	1cfb      	adds	r3, r7, #3
 800c256:	1c22      	adds	r2, r4, #0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	1cbb      	adds	r3, r7, #2
 800c25c:	1c02      	adds	r2, r0, #0
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	003b      	movs	r3, r7
 800c262:	1c0a      	adds	r2, r1, #0
 800c264:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c266:	260f      	movs	r6, #15
 800c268:	19bb      	adds	r3, r7, r6
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c26e:	250e      	movs	r5, #14
 800c270:	197b      	adds	r3, r7, r5
 800c272:	2200      	movs	r2, #0
 800c274:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	23b0      	movs	r3, #176	; 0xb0
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	58d0      	ldr	r0, [r2, r3]
 800c27e:	19bc      	adds	r4, r7, r6
 800c280:	1cbb      	adds	r3, r7, #2
 800c282:	781d      	ldrb	r5, [r3, #0]
 800c284:	003b      	movs	r3, r7
 800c286:	881a      	ldrh	r2, [r3, #0]
 800c288:	1cfb      	adds	r3, r7, #3
 800c28a:	7819      	ldrb	r1, [r3, #0]
 800c28c:	002b      	movs	r3, r5
 800c28e:	f7f7 fbbc 	bl	8003a0a <HAL_PCD_EP_Open>
 800c292:	0003      	movs	r3, r0
 800c294:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c296:	250e      	movs	r5, #14
 800c298:	197c      	adds	r4, r7, r5
 800c29a:	19bb      	adds	r3, r7, r6
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f000 f985 	bl	800c5ae <USBD_Get_USB_Status>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c2a8:	197b      	adds	r3, r7, r5
 800c2aa:	781b      	ldrb	r3, [r3, #0]
}
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	b005      	add	sp, #20
 800c2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	000a      	movs	r2, r1
 800c2be:	1cfb      	adds	r3, r7, #3
 800c2c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c2:	210f      	movs	r1, #15
 800c2c4:	187b      	adds	r3, r7, r1
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ca:	260e      	movs	r6, #14
 800c2cc:	19bb      	adds	r3, r7, r6
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	23b0      	movs	r3, #176	; 0xb0
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	58d2      	ldr	r2, [r2, r3]
 800c2da:	000d      	movs	r5, r1
 800c2dc:	187c      	adds	r4, r7, r1
 800c2de:	1cfb      	adds	r3, r7, #3
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	0019      	movs	r1, r3
 800c2e4:	0010      	movs	r0, r2
 800c2e6:	f7f7 fc08 	bl	8003afa <HAL_PCD_EP_Close>
 800c2ea:	0003      	movs	r3, r0
 800c2ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ee:	19bc      	adds	r4, r7, r6
 800c2f0:	197b      	adds	r3, r7, r5
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	f000 f95a 	bl	800c5ae <USBD_Get_USB_Status>
 800c2fa:	0003      	movs	r3, r0
 800c2fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c2fe:	19bb      	adds	r3, r7, r6
 800c300:	781b      	ldrb	r3, [r3, #0]
}
 800c302:	0018      	movs	r0, r3
 800c304:	46bd      	mov	sp, r7
 800c306:	b005      	add	sp, #20
 800c308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c30a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c30a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c30c:	b085      	sub	sp, #20
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	000a      	movs	r2, r1
 800c314:	1cfb      	adds	r3, r7, #3
 800c316:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	210f      	movs	r1, #15
 800c31a:	187b      	adds	r3, r7, r1
 800c31c:	2200      	movs	r2, #0
 800c31e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c320:	260e      	movs	r6, #14
 800c322:	19bb      	adds	r3, r7, r6
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	23b0      	movs	r3, #176	; 0xb0
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	58d2      	ldr	r2, [r2, r3]
 800c330:	000d      	movs	r5, r1
 800c332:	187c      	adds	r4, r7, r1
 800c334:	1cfb      	adds	r3, r7, #3
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	0019      	movs	r1, r3
 800c33a:	0010      	movs	r0, r2
 800c33c:	f7f7 fcd4 	bl	8003ce8 <HAL_PCD_EP_SetStall>
 800c340:	0003      	movs	r3, r0
 800c342:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c344:	19bc      	adds	r4, r7, r6
 800c346:	197b      	adds	r3, r7, r5
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	0018      	movs	r0, r3
 800c34c:	f000 f92f 	bl	800c5ae <USBD_Get_USB_Status>
 800c350:	0003      	movs	r3, r0
 800c352:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c354:	19bb      	adds	r3, r7, r6
 800c356:	781b      	ldrb	r3, [r3, #0]
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b005      	add	sp, #20
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c360 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	000a      	movs	r2, r1
 800c36a:	1cfb      	adds	r3, r7, #3
 800c36c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36e:	210f      	movs	r1, #15
 800c370:	187b      	adds	r3, r7, r1
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c376:	260e      	movs	r6, #14
 800c378:	19bb      	adds	r3, r7, r6
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	23b0      	movs	r3, #176	; 0xb0
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	58d2      	ldr	r2, [r2, r3]
 800c386:	000d      	movs	r5, r1
 800c388:	187c      	adds	r4, r7, r1
 800c38a:	1cfb      	adds	r3, r7, #3
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	0019      	movs	r1, r3
 800c390:	0010      	movs	r0, r2
 800c392:	f7f7 fd05 	bl	8003da0 <HAL_PCD_EP_ClrStall>
 800c396:	0003      	movs	r3, r0
 800c398:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c39a:	19bc      	adds	r4, r7, r6
 800c39c:	197b      	adds	r3, r7, r5
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f000 f904 	bl	800c5ae <USBD_Get_USB_Status>
 800c3a6:	0003      	movs	r3, r0
 800c3a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c3aa:	19bb      	adds	r3, r7, r6
 800c3ac:	781b      	ldrb	r3, [r3, #0]
}
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	b005      	add	sp, #20
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	000a      	movs	r2, r1
 800c3c0:	1cfb      	adds	r3, r7, #3
 800c3c2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	23b0      	movs	r3, #176	; 0xb0
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	58d3      	ldr	r3, [r2, r3]
 800c3cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3ce:	1cfb      	adds	r3, r7, #3
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	b25b      	sxtb	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da0d      	bge.n	800c3f4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3d8:	1cfb      	adds	r3, r7, #3
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	227f      	movs	r2, #127	; 0x7f
 800c3de:	4013      	ands	r3, r2
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	0013      	movs	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	189b      	adds	r3, r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	18cb      	adds	r3, r1, r3
 800c3ee:	3302      	adds	r3, #2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	e00d      	b.n	800c410 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3f4:	1cfb      	adds	r3, r7, #3
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	227f      	movs	r2, #127	; 0x7f
 800c3fa:	401a      	ands	r2, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	23b5      	movs	r3, #181	; 0xb5
 800c400:	0059      	lsls	r1, r3, #1
 800c402:	0013      	movs	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	189b      	adds	r3, r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	18c3      	adds	r3, r0, r3
 800c40c:	185b      	adds	r3, r3, r1
 800c40e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c410:	0018      	movs	r0, r3
 800c412:	46bd      	mov	sp, r7
 800c414:	b004      	add	sp, #16
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	000a      	movs	r2, r1
 800c422:	1cfb      	adds	r3, r7, #3
 800c424:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c426:	210f      	movs	r1, #15
 800c428:	187b      	adds	r3, r7, r1
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42e:	260e      	movs	r6, #14
 800c430:	19bb      	adds	r3, r7, r6
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	23b0      	movs	r3, #176	; 0xb0
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	58d2      	ldr	r2, [r2, r3]
 800c43e:	000d      	movs	r5, r1
 800c440:	187c      	adds	r4, r7, r1
 800c442:	1cfb      	adds	r3, r7, #3
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	0019      	movs	r1, r3
 800c448:	0010      	movs	r0, r2
 800c44a:	f7f7 fab3 	bl	80039b4 <HAL_PCD_SetAddress>
 800c44e:	0003      	movs	r3, r0
 800c450:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c452:	19bc      	adds	r4, r7, r6
 800c454:	197b      	adds	r3, r7, r5
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	0018      	movs	r0, r3
 800c45a:	f000 f8a8 	bl	800c5ae <USBD_Get_USB_Status>
 800c45e:	0003      	movs	r3, r0
 800c460:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c462:	19bb      	adds	r3, r7, r6
 800c464:	781b      	ldrb	r3, [r3, #0]
}
 800c466:	0018      	movs	r0, r3
 800c468:	46bd      	mov	sp, r7
 800c46a:	b005      	add	sp, #20
 800c46c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c46e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c46e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c470:	b087      	sub	sp, #28
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	0008      	movs	r0, r1
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	0019      	movs	r1, r3
 800c47c:	230b      	movs	r3, #11
 800c47e:	18fb      	adds	r3, r7, r3
 800c480:	1c02      	adds	r2, r0, #0
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	2408      	movs	r4, #8
 800c486:	193b      	adds	r3, r7, r4
 800c488:	1c0a      	adds	r2, r1, #0
 800c48a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48c:	2117      	movs	r1, #23
 800c48e:	187b      	adds	r3, r7, r1
 800c490:	2200      	movs	r2, #0
 800c492:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c494:	2516      	movs	r5, #22
 800c496:	197b      	adds	r3, r7, r5
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	23b0      	movs	r3, #176	; 0xb0
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	58d0      	ldr	r0, [r2, r3]
 800c4a4:	193b      	adds	r3, r7, r4
 800c4a6:	881d      	ldrh	r5, [r3, #0]
 800c4a8:	000e      	movs	r6, r1
 800c4aa:	187c      	adds	r4, r7, r1
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	230b      	movs	r3, #11
 800c4b0:	18fb      	adds	r3, r7, r3
 800c4b2:	7819      	ldrb	r1, [r3, #0]
 800c4b4:	002b      	movs	r3, r5
 800c4b6:	f7f7 fbce 	bl	8003c56 <HAL_PCD_EP_Transmit>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4be:	2516      	movs	r5, #22
 800c4c0:	197c      	adds	r4, r7, r5
 800c4c2:	19bb      	adds	r3, r7, r6
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f000 f871 	bl	800c5ae <USBD_Get_USB_Status>
 800c4cc:	0003      	movs	r3, r0
 800c4ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4d0:	197b      	adds	r3, r7, r5
 800c4d2:	781b      	ldrb	r3, [r3, #0]
}
 800c4d4:	0018      	movs	r0, r3
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	b007      	add	sp, #28
 800c4da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	0008      	movs	r0, r1
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	0019      	movs	r1, r3
 800c4ea:	230b      	movs	r3, #11
 800c4ec:	18fb      	adds	r3, r7, r3
 800c4ee:	1c02      	adds	r2, r0, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	2408      	movs	r4, #8
 800c4f4:	193b      	adds	r3, r7, r4
 800c4f6:	1c0a      	adds	r2, r1, #0
 800c4f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4fa:	2117      	movs	r1, #23
 800c4fc:	187b      	adds	r3, r7, r1
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c502:	2516      	movs	r5, #22
 800c504:	197b      	adds	r3, r7, r5
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	23b0      	movs	r3, #176	; 0xb0
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	58d0      	ldr	r0, [r2, r3]
 800c512:	193b      	adds	r3, r7, r4
 800c514:	881d      	ldrh	r5, [r3, #0]
 800c516:	000e      	movs	r6, r1
 800c518:	187c      	adds	r4, r7, r1
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	230b      	movs	r3, #11
 800c51e:	18fb      	adds	r3, r7, r3
 800c520:	7819      	ldrb	r1, [r3, #0]
 800c522:	002b      	movs	r3, r5
 800c524:	f7f7 fb3a 	bl	8003b9c <HAL_PCD_EP_Receive>
 800c528:	0003      	movs	r3, r0
 800c52a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52c:	2516      	movs	r5, #22
 800c52e:	197c      	adds	r4, r7, r5
 800c530:	19bb      	adds	r3, r7, r6
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	0018      	movs	r0, r3
 800c536:	f000 f83a 	bl	800c5ae <USBD_Get_USB_Status>
 800c53a:	0003      	movs	r3, r0
 800c53c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c53e:	197b      	adds	r3, r7, r5
 800c540:	781b      	ldrb	r3, [r3, #0]
}
 800c542:	0018      	movs	r0, r3
 800c544:	46bd      	mov	sp, r7
 800c546:	b007      	add	sp, #28
 800c548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c54a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	000a      	movs	r2, r1
 800c554:	1cfb      	adds	r3, r7, #3
 800c556:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	23b0      	movs	r3, #176	; 0xb0
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	58d2      	ldr	r2, [r2, r3]
 800c560:	1cfb      	adds	r3, r7, #3
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	0019      	movs	r1, r3
 800c566:	0010      	movs	r0, r2
 800c568:	f7f7 fb5c 	bl	8003c24 <HAL_PCD_EP_GetRxCount>
 800c56c:	0003      	movs	r3, r0
}
 800c56e:	0018      	movs	r0, r3
 800c570:	46bd      	mov	sp, r7
 800c572:	b002      	add	sp, #8
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <USBD_static_malloc+0x14>)
}
 800c582:	0018      	movs	r0, r3
 800c584:	46bd      	mov	sp, r7
 800c586:	b002      	add	sp, #8
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	20000268 	.word	0x20000268

0800c590 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

}
 800c598:	46c0      	nop			; (mov r8, r8)
 800c59a:	46bd      	mov	sp, r7
 800c59c:	b002      	add	sp, #8
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c5a4:	f7f4 f9fc 	bl	80009a0 <SystemClock_Config>
}
 800c5a8:	46c0      	nop			; (mov r8, r8)
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	0002      	movs	r2, r0
 800c5b6:	1dfb      	adds	r3, r7, #7
 800c5b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ba:	230f      	movs	r3, #15
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	2200      	movs	r2, #0
 800c5c0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c5c2:	1dfb      	adds	r3, r7, #7
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d017      	beq.n	800c5fa <USBD_Get_USB_Status+0x4c>
 800c5ca:	dc1b      	bgt.n	800c604 <USBD_Get_USB_Status+0x56>
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d00f      	beq.n	800c5f0 <USBD_Get_USB_Status+0x42>
 800c5d0:	dc18      	bgt.n	800c604 <USBD_Get_USB_Status+0x56>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <USBD_Get_USB_Status+0x2e>
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d005      	beq.n	800c5e6 <USBD_Get_USB_Status+0x38>
 800c5da:	e013      	b.n	800c604 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5dc:	230f      	movs	r3, #15
 800c5de:	18fb      	adds	r3, r7, r3
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	701a      	strb	r2, [r3, #0]
    break;
 800c5e4:	e013      	b.n	800c60e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5e6:	230f      	movs	r3, #15
 800c5e8:	18fb      	adds	r3, r7, r3
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	701a      	strb	r2, [r3, #0]
    break;
 800c5ee:	e00e      	b.n	800c60e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5f0:	230f      	movs	r3, #15
 800c5f2:	18fb      	adds	r3, r7, r3
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	701a      	strb	r2, [r3, #0]
    break;
 800c5f8:	e009      	b.n	800c60e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5fa:	230f      	movs	r3, #15
 800c5fc:	18fb      	adds	r3, r7, r3
 800c5fe:	2202      	movs	r2, #2
 800c600:	701a      	strb	r2, [r3, #0]
    break;
 800c602:	e004      	b.n	800c60e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c604:	230f      	movs	r3, #15
 800c606:	18fb      	adds	r3, r7, r3
 800c608:	2202      	movs	r2, #2
 800c60a:	701a      	strb	r2, [r3, #0]
    break;
 800c60c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c60e:	230f      	movs	r3, #15
 800c610:	18fb      	adds	r3, r7, r3
 800c612:	781b      	ldrb	r3, [r3, #0]
}
 800c614:	0018      	movs	r0, r3
 800c616:	46bd      	mov	sp, r7
 800c618:	b004      	add	sp, #16
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <__errno>:
 800c61c:	4b01      	ldr	r3, [pc, #4]	; (800c624 <__errno+0x8>)
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	4770      	bx	lr
 800c622:	46c0      	nop			; (mov r8, r8)
 800c624:	2000017c 	.word	0x2000017c

0800c628 <__libc_init_array>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	2600      	movs	r6, #0
 800c62c:	4d0c      	ldr	r5, [pc, #48]	; (800c660 <__libc_init_array+0x38>)
 800c62e:	4c0d      	ldr	r4, [pc, #52]	; (800c664 <__libc_init_array+0x3c>)
 800c630:	1b64      	subs	r4, r4, r5
 800c632:	10a4      	asrs	r4, r4, #2
 800c634:	42a6      	cmp	r6, r4
 800c636:	d109      	bne.n	800c64c <__libc_init_array+0x24>
 800c638:	2600      	movs	r6, #0
 800c63a:	f000 fc5b 	bl	800cef4 <_init>
 800c63e:	4d0a      	ldr	r5, [pc, #40]	; (800c668 <__libc_init_array+0x40>)
 800c640:	4c0a      	ldr	r4, [pc, #40]	; (800c66c <__libc_init_array+0x44>)
 800c642:	1b64      	subs	r4, r4, r5
 800c644:	10a4      	asrs	r4, r4, #2
 800c646:	42a6      	cmp	r6, r4
 800c648:	d105      	bne.n	800c656 <__libc_init_array+0x2e>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	00b3      	lsls	r3, r6, #2
 800c64e:	58eb      	ldr	r3, [r5, r3]
 800c650:	4798      	blx	r3
 800c652:	3601      	adds	r6, #1
 800c654:	e7ee      	b.n	800c634 <__libc_init_array+0xc>
 800c656:	00b3      	lsls	r3, r6, #2
 800c658:	58eb      	ldr	r3, [r5, r3]
 800c65a:	4798      	blx	r3
 800c65c:	3601      	adds	r6, #1
 800c65e:	e7f2      	b.n	800c646 <__libc_init_array+0x1e>
 800c660:	0800d198 	.word	0x0800d198
 800c664:	0800d198 	.word	0x0800d198
 800c668:	0800d198 	.word	0x0800d198
 800c66c:	0800d19c 	.word	0x0800d19c

0800c670 <malloc>:
 800c670:	b510      	push	{r4, lr}
 800c672:	4b03      	ldr	r3, [pc, #12]	; (800c680 <malloc+0x10>)
 800c674:	0001      	movs	r1, r0
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	f000 f860 	bl	800c73c <_malloc_r>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	46c0      	nop			; (mov r8, r8)
 800c680:	2000017c 	.word	0x2000017c

0800c684 <free>:
 800c684:	b510      	push	{r4, lr}
 800c686:	4b03      	ldr	r3, [pc, #12]	; (800c694 <free+0x10>)
 800c688:	0001      	movs	r1, r0
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	f000 f80c 	bl	800c6a8 <_free_r>
 800c690:	bd10      	pop	{r4, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	2000017c 	.word	0x2000017c

0800c698 <memset>:
 800c698:	0003      	movs	r3, r0
 800c69a:	1882      	adds	r2, r0, r2
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d100      	bne.n	800c6a2 <memset+0xa>
 800c6a0:	4770      	bx	lr
 800c6a2:	7019      	strb	r1, [r3, #0]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	e7f9      	b.n	800c69c <memset+0x4>

0800c6a8 <_free_r>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	0005      	movs	r5, r0
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d010      	beq.n	800c6d2 <_free_r+0x2a>
 800c6b0:	1f0c      	subs	r4, r1, #4
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	da00      	bge.n	800c6ba <_free_r+0x12>
 800c6b8:	18e4      	adds	r4, r4, r3
 800c6ba:	0028      	movs	r0, r5
 800c6bc:	f000 f8ce 	bl	800c85c <__malloc_lock>
 800c6c0:	4a1d      	ldr	r2, [pc, #116]	; (800c738 <_free_r+0x90>)
 800c6c2:	6813      	ldr	r3, [r2, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <_free_r+0x2c>
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6014      	str	r4, [r2, #0]
 800c6cc:	0028      	movs	r0, r5
 800c6ce:	f000 f8cd 	bl	800c86c <__malloc_unlock>
 800c6d2:	bd70      	pop	{r4, r5, r6, pc}
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d908      	bls.n	800c6ea <_free_r+0x42>
 800c6d8:	6821      	ldr	r1, [r4, #0]
 800c6da:	1860      	adds	r0, r4, r1
 800c6dc:	4283      	cmp	r3, r0
 800c6de:	d1f3      	bne.n	800c6c8 <_free_r+0x20>
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	1841      	adds	r1, r0, r1
 800c6e6:	6021      	str	r1, [r4, #0]
 800c6e8:	e7ee      	b.n	800c6c8 <_free_r+0x20>
 800c6ea:	001a      	movs	r2, r3
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <_free_r+0x4e>
 800c6f2:	42a3      	cmp	r3, r4
 800c6f4:	d9f9      	bls.n	800c6ea <_free_r+0x42>
 800c6f6:	6811      	ldr	r1, [r2, #0]
 800c6f8:	1850      	adds	r0, r2, r1
 800c6fa:	42a0      	cmp	r0, r4
 800c6fc:	d10b      	bne.n	800c716 <_free_r+0x6e>
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	1809      	adds	r1, r1, r0
 800c702:	1850      	adds	r0, r2, r1
 800c704:	6011      	str	r1, [r2, #0]
 800c706:	4283      	cmp	r3, r0
 800c708:	d1e0      	bne.n	800c6cc <_free_r+0x24>
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	1841      	adds	r1, r0, r1
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	6053      	str	r3, [r2, #4]
 800c714:	e7da      	b.n	800c6cc <_free_r+0x24>
 800c716:	42a0      	cmp	r0, r4
 800c718:	d902      	bls.n	800c720 <_free_r+0x78>
 800c71a:	230c      	movs	r3, #12
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	e7d5      	b.n	800c6cc <_free_r+0x24>
 800c720:	6821      	ldr	r1, [r4, #0]
 800c722:	1860      	adds	r0, r4, r1
 800c724:	4283      	cmp	r3, r0
 800c726:	d103      	bne.n	800c730 <_free_r+0x88>
 800c728:	6818      	ldr	r0, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	1841      	adds	r1, r0, r1
 800c72e:	6021      	str	r1, [r4, #0]
 800c730:	6063      	str	r3, [r4, #4]
 800c732:	6054      	str	r4, [r2, #4]
 800c734:	e7ca      	b.n	800c6cc <_free_r+0x24>
 800c736:	46c0      	nop			; (mov r8, r8)
 800c738:	20000488 	.word	0x20000488

0800c73c <_malloc_r>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	2303      	movs	r3, #3
 800c740:	1ccd      	adds	r5, r1, #3
 800c742:	439d      	bics	r5, r3
 800c744:	3508      	adds	r5, #8
 800c746:	0006      	movs	r6, r0
 800c748:	2d0c      	cmp	r5, #12
 800c74a:	d21f      	bcs.n	800c78c <_malloc_r+0x50>
 800c74c:	250c      	movs	r5, #12
 800c74e:	42a9      	cmp	r1, r5
 800c750:	d81e      	bhi.n	800c790 <_malloc_r+0x54>
 800c752:	0030      	movs	r0, r6
 800c754:	f000 f882 	bl	800c85c <__malloc_lock>
 800c758:	4925      	ldr	r1, [pc, #148]	; (800c7f0 <_malloc_r+0xb4>)
 800c75a:	680a      	ldr	r2, [r1, #0]
 800c75c:	0014      	movs	r4, r2
 800c75e:	2c00      	cmp	r4, #0
 800c760:	d11a      	bne.n	800c798 <_malloc_r+0x5c>
 800c762:	4f24      	ldr	r7, [pc, #144]	; (800c7f4 <_malloc_r+0xb8>)
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d104      	bne.n	800c774 <_malloc_r+0x38>
 800c76a:	0021      	movs	r1, r4
 800c76c:	0030      	movs	r0, r6
 800c76e:	f000 f843 	bl	800c7f8 <_sbrk_r>
 800c772:	6038      	str	r0, [r7, #0]
 800c774:	0029      	movs	r1, r5
 800c776:	0030      	movs	r0, r6
 800c778:	f000 f83e 	bl	800c7f8 <_sbrk_r>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d12b      	bne.n	800c7d8 <_malloc_r+0x9c>
 800c780:	230c      	movs	r3, #12
 800c782:	0030      	movs	r0, r6
 800c784:	6033      	str	r3, [r6, #0]
 800c786:	f000 f871 	bl	800c86c <__malloc_unlock>
 800c78a:	e003      	b.n	800c794 <_malloc_r+0x58>
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	dade      	bge.n	800c74e <_malloc_r+0x12>
 800c790:	230c      	movs	r3, #12
 800c792:	6033      	str	r3, [r6, #0]
 800c794:	2000      	movs	r0, #0
 800c796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	1b5b      	subs	r3, r3, r5
 800c79c:	d419      	bmi.n	800c7d2 <_malloc_r+0x96>
 800c79e:	2b0b      	cmp	r3, #11
 800c7a0:	d903      	bls.n	800c7aa <_malloc_r+0x6e>
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	18e4      	adds	r4, r4, r3
 800c7a6:	6025      	str	r5, [r4, #0]
 800c7a8:	e003      	b.n	800c7b2 <_malloc_r+0x76>
 800c7aa:	6863      	ldr	r3, [r4, #4]
 800c7ac:	42a2      	cmp	r2, r4
 800c7ae:	d10e      	bne.n	800c7ce <_malloc_r+0x92>
 800c7b0:	600b      	str	r3, [r1, #0]
 800c7b2:	0030      	movs	r0, r6
 800c7b4:	f000 f85a 	bl	800c86c <__malloc_unlock>
 800c7b8:	0020      	movs	r0, r4
 800c7ba:	2207      	movs	r2, #7
 800c7bc:	300b      	adds	r0, #11
 800c7be:	1d23      	adds	r3, r4, #4
 800c7c0:	4390      	bics	r0, r2
 800c7c2:	1ac2      	subs	r2, r0, r3
 800c7c4:	4298      	cmp	r0, r3
 800c7c6:	d0e6      	beq.n	800c796 <_malloc_r+0x5a>
 800c7c8:	1a1b      	subs	r3, r3, r0
 800c7ca:	50a3      	str	r3, [r4, r2]
 800c7cc:	e7e3      	b.n	800c796 <_malloc_r+0x5a>
 800c7ce:	6053      	str	r3, [r2, #4]
 800c7d0:	e7ef      	b.n	800c7b2 <_malloc_r+0x76>
 800c7d2:	0022      	movs	r2, r4
 800c7d4:	6864      	ldr	r4, [r4, #4]
 800c7d6:	e7c2      	b.n	800c75e <_malloc_r+0x22>
 800c7d8:	2303      	movs	r3, #3
 800c7da:	1cc4      	adds	r4, r0, #3
 800c7dc:	439c      	bics	r4, r3
 800c7de:	42a0      	cmp	r0, r4
 800c7e0:	d0e1      	beq.n	800c7a6 <_malloc_r+0x6a>
 800c7e2:	1a21      	subs	r1, r4, r0
 800c7e4:	0030      	movs	r0, r6
 800c7e6:	f000 f807 	bl	800c7f8 <_sbrk_r>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	d1db      	bne.n	800c7a6 <_malloc_r+0x6a>
 800c7ee:	e7c7      	b.n	800c780 <_malloc_r+0x44>
 800c7f0:	20000488 	.word	0x20000488
 800c7f4:	2000048c 	.word	0x2000048c

0800c7f8 <_sbrk_r>:
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	b570      	push	{r4, r5, r6, lr}
 800c7fc:	4d06      	ldr	r5, [pc, #24]	; (800c818 <_sbrk_r+0x20>)
 800c7fe:	0004      	movs	r4, r0
 800c800:	0008      	movs	r0, r1
 800c802:	602b      	str	r3, [r5, #0]
 800c804:	f7f5 fa60 	bl	8001cc8 <_sbrk>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	d103      	bne.n	800c814 <_sbrk_r+0x1c>
 800c80c:	682b      	ldr	r3, [r5, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d000      	beq.n	800c814 <_sbrk_r+0x1c>
 800c812:	6023      	str	r3, [r4, #0]
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	20001620 	.word	0x20001620

0800c81c <siprintf>:
 800c81c:	b40e      	push	{r1, r2, r3}
 800c81e:	b500      	push	{lr}
 800c820:	490b      	ldr	r1, [pc, #44]	; (800c850 <siprintf+0x34>)
 800c822:	b09c      	sub	sp, #112	; 0x70
 800c824:	ab1d      	add	r3, sp, #116	; 0x74
 800c826:	9002      	str	r0, [sp, #8]
 800c828:	9006      	str	r0, [sp, #24]
 800c82a:	9107      	str	r1, [sp, #28]
 800c82c:	9104      	str	r1, [sp, #16]
 800c82e:	4809      	ldr	r0, [pc, #36]	; (800c854 <siprintf+0x38>)
 800c830:	4909      	ldr	r1, [pc, #36]	; (800c858 <siprintf+0x3c>)
 800c832:	cb04      	ldmia	r3!, {r2}
 800c834:	9105      	str	r1, [sp, #20]
 800c836:	6800      	ldr	r0, [r0, #0]
 800c838:	a902      	add	r1, sp, #8
 800c83a:	9301      	str	r3, [sp, #4]
 800c83c:	f000 f880 	bl	800c940 <_svfiprintf_r>
 800c840:	2300      	movs	r3, #0
 800c842:	9a02      	ldr	r2, [sp, #8]
 800c844:	7013      	strb	r3, [r2, #0]
 800c846:	b01c      	add	sp, #112	; 0x70
 800c848:	bc08      	pop	{r3}
 800c84a:	b003      	add	sp, #12
 800c84c:	4718      	bx	r3
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	7fffffff 	.word	0x7fffffff
 800c854:	2000017c 	.word	0x2000017c
 800c858:	ffff0208 	.word	0xffff0208

0800c85c <__malloc_lock>:
 800c85c:	b510      	push	{r4, lr}
 800c85e:	4802      	ldr	r0, [pc, #8]	; (800c868 <__malloc_lock+0xc>)
 800c860:	f000 faf0 	bl	800ce44 <__retarget_lock_acquire_recursive>
 800c864:	bd10      	pop	{r4, pc}
 800c866:	46c0      	nop			; (mov r8, r8)
 800c868:	20001628 	.word	0x20001628

0800c86c <__malloc_unlock>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4802      	ldr	r0, [pc, #8]	; (800c878 <__malloc_unlock+0xc>)
 800c870:	f000 fae9 	bl	800ce46 <__retarget_lock_release_recursive>
 800c874:	bd10      	pop	{r4, pc}
 800c876:	46c0      	nop			; (mov r8, r8)
 800c878:	20001628 	.word	0x20001628

0800c87c <__ssputs_r>:
 800c87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87e:	688e      	ldr	r6, [r1, #8]
 800c880:	b085      	sub	sp, #20
 800c882:	0007      	movs	r7, r0
 800c884:	000c      	movs	r4, r1
 800c886:	9203      	str	r2, [sp, #12]
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	429e      	cmp	r6, r3
 800c88c:	d83c      	bhi.n	800c908 <__ssputs_r+0x8c>
 800c88e:	2390      	movs	r3, #144	; 0x90
 800c890:	898a      	ldrh	r2, [r1, #12]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	421a      	tst	r2, r3
 800c896:	d034      	beq.n	800c902 <__ssputs_r+0x86>
 800c898:	2503      	movs	r5, #3
 800c89a:	6909      	ldr	r1, [r1, #16]
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	1a5b      	subs	r3, r3, r1
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	6963      	ldr	r3, [r4, #20]
 800c8a4:	9802      	ldr	r0, [sp, #8]
 800c8a6:	435d      	muls	r5, r3
 800c8a8:	0feb      	lsrs	r3, r5, #31
 800c8aa:	195d      	adds	r5, r3, r5
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	106d      	asrs	r5, r5, #1
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	181b      	adds	r3, r3, r0
 800c8b4:	42ab      	cmp	r3, r5
 800c8b6:	d900      	bls.n	800c8ba <__ssputs_r+0x3e>
 800c8b8:	001d      	movs	r5, r3
 800c8ba:	0553      	lsls	r3, r2, #21
 800c8bc:	d532      	bpl.n	800c924 <__ssputs_r+0xa8>
 800c8be:	0029      	movs	r1, r5
 800c8c0:	0038      	movs	r0, r7
 800c8c2:	f7ff ff3b 	bl	800c73c <_malloc_r>
 800c8c6:	1e06      	subs	r6, r0, #0
 800c8c8:	d109      	bne.n	800c8de <__ssputs_r+0x62>
 800c8ca:	230c      	movs	r3, #12
 800c8cc:	603b      	str	r3, [r7, #0]
 800c8ce:	2340      	movs	r3, #64	; 0x40
 800c8d0:	2001      	movs	r0, #1
 800c8d2:	89a2      	ldrh	r2, [r4, #12]
 800c8d4:	4240      	negs	r0, r0
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	b005      	add	sp, #20
 800c8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8de:	9a02      	ldr	r2, [sp, #8]
 800c8e0:	6921      	ldr	r1, [r4, #16]
 800c8e2:	f000 fabc 	bl	800ce5e <memcpy>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	4a14      	ldr	r2, [pc, #80]	; (800c93c <__ssputs_r+0xc0>)
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	2380      	movs	r3, #128	; 0x80
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	81a3      	strh	r3, [r4, #12]
 800c8f2:	9b02      	ldr	r3, [sp, #8]
 800c8f4:	6126      	str	r6, [r4, #16]
 800c8f6:	18f6      	adds	r6, r6, r3
 800c8f8:	6026      	str	r6, [r4, #0]
 800c8fa:	6165      	str	r5, [r4, #20]
 800c8fc:	9e01      	ldr	r6, [sp, #4]
 800c8fe:	1aed      	subs	r5, r5, r3
 800c900:	60a5      	str	r5, [r4, #8]
 800c902:	9b01      	ldr	r3, [sp, #4]
 800c904:	429e      	cmp	r6, r3
 800c906:	d900      	bls.n	800c90a <__ssputs_r+0x8e>
 800c908:	9e01      	ldr	r6, [sp, #4]
 800c90a:	0032      	movs	r2, r6
 800c90c:	9903      	ldr	r1, [sp, #12]
 800c90e:	6820      	ldr	r0, [r4, #0]
 800c910:	f000 faae 	bl	800ce70 <memmove>
 800c914:	68a3      	ldr	r3, [r4, #8]
 800c916:	2000      	movs	r0, #0
 800c918:	1b9b      	subs	r3, r3, r6
 800c91a:	60a3      	str	r3, [r4, #8]
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	199e      	adds	r6, r3, r6
 800c920:	6026      	str	r6, [r4, #0]
 800c922:	e7da      	b.n	800c8da <__ssputs_r+0x5e>
 800c924:	002a      	movs	r2, r5
 800c926:	0038      	movs	r0, r7
 800c928:	f000 fab5 	bl	800ce96 <_realloc_r>
 800c92c:	1e06      	subs	r6, r0, #0
 800c92e:	d1e0      	bne.n	800c8f2 <__ssputs_r+0x76>
 800c930:	0038      	movs	r0, r7
 800c932:	6921      	ldr	r1, [r4, #16]
 800c934:	f7ff feb8 	bl	800c6a8 <_free_r>
 800c938:	e7c7      	b.n	800c8ca <__ssputs_r+0x4e>
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	fffffb7f 	.word	0xfffffb7f

0800c940 <_svfiprintf_r>:
 800c940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c942:	b0a1      	sub	sp, #132	; 0x84
 800c944:	9003      	str	r0, [sp, #12]
 800c946:	001d      	movs	r5, r3
 800c948:	898b      	ldrh	r3, [r1, #12]
 800c94a:	000f      	movs	r7, r1
 800c94c:	0016      	movs	r6, r2
 800c94e:	061b      	lsls	r3, r3, #24
 800c950:	d511      	bpl.n	800c976 <_svfiprintf_r+0x36>
 800c952:	690b      	ldr	r3, [r1, #16]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10e      	bne.n	800c976 <_svfiprintf_r+0x36>
 800c958:	2140      	movs	r1, #64	; 0x40
 800c95a:	f7ff feef 	bl	800c73c <_malloc_r>
 800c95e:	6038      	str	r0, [r7, #0]
 800c960:	6138      	str	r0, [r7, #16]
 800c962:	2800      	cmp	r0, #0
 800c964:	d105      	bne.n	800c972 <_svfiprintf_r+0x32>
 800c966:	230c      	movs	r3, #12
 800c968:	9a03      	ldr	r2, [sp, #12]
 800c96a:	3801      	subs	r0, #1
 800c96c:	6013      	str	r3, [r2, #0]
 800c96e:	b021      	add	sp, #132	; 0x84
 800c970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c972:	2340      	movs	r3, #64	; 0x40
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	2300      	movs	r3, #0
 800c978:	ac08      	add	r4, sp, #32
 800c97a:	6163      	str	r3, [r4, #20]
 800c97c:	3320      	adds	r3, #32
 800c97e:	7663      	strb	r3, [r4, #25]
 800c980:	3310      	adds	r3, #16
 800c982:	76a3      	strb	r3, [r4, #26]
 800c984:	9507      	str	r5, [sp, #28]
 800c986:	0035      	movs	r5, r6
 800c988:	782b      	ldrb	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <_svfiprintf_r+0x52>
 800c98e:	2b25      	cmp	r3, #37	; 0x25
 800c990:	d147      	bne.n	800ca22 <_svfiprintf_r+0xe2>
 800c992:	1bab      	subs	r3, r5, r6
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	42b5      	cmp	r5, r6
 800c998:	d00c      	beq.n	800c9b4 <_svfiprintf_r+0x74>
 800c99a:	0032      	movs	r2, r6
 800c99c:	0039      	movs	r1, r7
 800c99e:	9803      	ldr	r0, [sp, #12]
 800c9a0:	f7ff ff6c 	bl	800c87c <__ssputs_r>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d100      	bne.n	800c9aa <_svfiprintf_r+0x6a>
 800c9a8:	e0ae      	b.n	800cb08 <_svfiprintf_r+0x1c8>
 800c9aa:	6962      	ldr	r2, [r4, #20]
 800c9ac:	9b05      	ldr	r3, [sp, #20]
 800c9ae:	4694      	mov	ip, r2
 800c9b0:	4463      	add	r3, ip
 800c9b2:	6163      	str	r3, [r4, #20]
 800c9b4:	782b      	ldrb	r3, [r5, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d100      	bne.n	800c9bc <_svfiprintf_r+0x7c>
 800c9ba:	e0a5      	b.n	800cb08 <_svfiprintf_r+0x1c8>
 800c9bc:	2201      	movs	r2, #1
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4252      	negs	r2, r2
 800c9c2:	6062      	str	r2, [r4, #4]
 800c9c4:	a904      	add	r1, sp, #16
 800c9c6:	3254      	adds	r2, #84	; 0x54
 800c9c8:	1852      	adds	r2, r2, r1
 800c9ca:	1c6e      	adds	r6, r5, #1
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	60e3      	str	r3, [r4, #12]
 800c9d0:	60a3      	str	r3, [r4, #8]
 800c9d2:	7013      	strb	r3, [r2, #0]
 800c9d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800c9d6:	2205      	movs	r2, #5
 800c9d8:	7831      	ldrb	r1, [r6, #0]
 800c9da:	4854      	ldr	r0, [pc, #336]	; (800cb2c <_svfiprintf_r+0x1ec>)
 800c9dc:	f000 fa34 	bl	800ce48 <memchr>
 800c9e0:	1c75      	adds	r5, r6, #1
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d11f      	bne.n	800ca26 <_svfiprintf_r+0xe6>
 800c9e6:	6822      	ldr	r2, [r4, #0]
 800c9e8:	06d3      	lsls	r3, r2, #27
 800c9ea:	d504      	bpl.n	800c9f6 <_svfiprintf_r+0xb6>
 800c9ec:	2353      	movs	r3, #83	; 0x53
 800c9ee:	a904      	add	r1, sp, #16
 800c9f0:	185b      	adds	r3, r3, r1
 800c9f2:	2120      	movs	r1, #32
 800c9f4:	7019      	strb	r1, [r3, #0]
 800c9f6:	0713      	lsls	r3, r2, #28
 800c9f8:	d504      	bpl.n	800ca04 <_svfiprintf_r+0xc4>
 800c9fa:	2353      	movs	r3, #83	; 0x53
 800c9fc:	a904      	add	r1, sp, #16
 800c9fe:	185b      	adds	r3, r3, r1
 800ca00:	212b      	movs	r1, #43	; 0x2b
 800ca02:	7019      	strb	r1, [r3, #0]
 800ca04:	7833      	ldrb	r3, [r6, #0]
 800ca06:	2b2a      	cmp	r3, #42	; 0x2a
 800ca08:	d016      	beq.n	800ca38 <_svfiprintf_r+0xf8>
 800ca0a:	0035      	movs	r5, r6
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	200a      	movs	r0, #10
 800ca10:	68e3      	ldr	r3, [r4, #12]
 800ca12:	782a      	ldrb	r2, [r5, #0]
 800ca14:	1c6e      	adds	r6, r5, #1
 800ca16:	3a30      	subs	r2, #48	; 0x30
 800ca18:	2a09      	cmp	r2, #9
 800ca1a:	d94e      	bls.n	800caba <_svfiprintf_r+0x17a>
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	d111      	bne.n	800ca44 <_svfiprintf_r+0x104>
 800ca20:	e017      	b.n	800ca52 <_svfiprintf_r+0x112>
 800ca22:	3501      	adds	r5, #1
 800ca24:	e7b0      	b.n	800c988 <_svfiprintf_r+0x48>
 800ca26:	4b41      	ldr	r3, [pc, #260]	; (800cb2c <_svfiprintf_r+0x1ec>)
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	1ac0      	subs	r0, r0, r3
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	4083      	lsls	r3, r0
 800ca30:	4313      	orrs	r3, r2
 800ca32:	002e      	movs	r6, r5
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	e7ce      	b.n	800c9d6 <_svfiprintf_r+0x96>
 800ca38:	9b07      	ldr	r3, [sp, #28]
 800ca3a:	1d19      	adds	r1, r3, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	9107      	str	r1, [sp, #28]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	db01      	blt.n	800ca48 <_svfiprintf_r+0x108>
 800ca44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca46:	e004      	b.n	800ca52 <_svfiprintf_r+0x112>
 800ca48:	425b      	negs	r3, r3
 800ca4a:	60e3      	str	r3, [r4, #12]
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	782b      	ldrb	r3, [r5, #0]
 800ca54:	2b2e      	cmp	r3, #46	; 0x2e
 800ca56:	d10a      	bne.n	800ca6e <_svfiprintf_r+0x12e>
 800ca58:	786b      	ldrb	r3, [r5, #1]
 800ca5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca5c:	d135      	bne.n	800caca <_svfiprintf_r+0x18a>
 800ca5e:	9b07      	ldr	r3, [sp, #28]
 800ca60:	3502      	adds	r5, #2
 800ca62:	1d1a      	adds	r2, r3, #4
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	9207      	str	r2, [sp, #28]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	db2b      	blt.n	800cac4 <_svfiprintf_r+0x184>
 800ca6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca6e:	4e30      	ldr	r6, [pc, #192]	; (800cb30 <_svfiprintf_r+0x1f0>)
 800ca70:	2203      	movs	r2, #3
 800ca72:	0030      	movs	r0, r6
 800ca74:	7829      	ldrb	r1, [r5, #0]
 800ca76:	f000 f9e7 	bl	800ce48 <memchr>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d006      	beq.n	800ca8c <_svfiprintf_r+0x14c>
 800ca7e:	2340      	movs	r3, #64	; 0x40
 800ca80:	1b80      	subs	r0, r0, r6
 800ca82:	4083      	lsls	r3, r0
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	3501      	adds	r5, #1
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	7829      	ldrb	r1, [r5, #0]
 800ca8e:	2206      	movs	r2, #6
 800ca90:	4828      	ldr	r0, [pc, #160]	; (800cb34 <_svfiprintf_r+0x1f4>)
 800ca92:	1c6e      	adds	r6, r5, #1
 800ca94:	7621      	strb	r1, [r4, #24]
 800ca96:	f000 f9d7 	bl	800ce48 <memchr>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d03c      	beq.n	800cb18 <_svfiprintf_r+0x1d8>
 800ca9e:	4b26      	ldr	r3, [pc, #152]	; (800cb38 <_svfiprintf_r+0x1f8>)
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d125      	bne.n	800caf0 <_svfiprintf_r+0x1b0>
 800caa4:	2207      	movs	r2, #7
 800caa6:	9b07      	ldr	r3, [sp, #28]
 800caa8:	3307      	adds	r3, #7
 800caaa:	4393      	bics	r3, r2
 800caac:	3308      	adds	r3, #8
 800caae:	9307      	str	r3, [sp, #28]
 800cab0:	6963      	ldr	r3, [r4, #20]
 800cab2:	9a04      	ldr	r2, [sp, #16]
 800cab4:	189b      	adds	r3, r3, r2
 800cab6:	6163      	str	r3, [r4, #20]
 800cab8:	e765      	b.n	800c986 <_svfiprintf_r+0x46>
 800caba:	4343      	muls	r3, r0
 800cabc:	0035      	movs	r5, r6
 800cabe:	2101      	movs	r1, #1
 800cac0:	189b      	adds	r3, r3, r2
 800cac2:	e7a6      	b.n	800ca12 <_svfiprintf_r+0xd2>
 800cac4:	2301      	movs	r3, #1
 800cac6:	425b      	negs	r3, r3
 800cac8:	e7d0      	b.n	800ca6c <_svfiprintf_r+0x12c>
 800caca:	2300      	movs	r3, #0
 800cacc:	200a      	movs	r0, #10
 800cace:	001a      	movs	r2, r3
 800cad0:	3501      	adds	r5, #1
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	7829      	ldrb	r1, [r5, #0]
 800cad6:	1c6e      	adds	r6, r5, #1
 800cad8:	3930      	subs	r1, #48	; 0x30
 800cada:	2909      	cmp	r1, #9
 800cadc:	d903      	bls.n	800cae6 <_svfiprintf_r+0x1a6>
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0c5      	beq.n	800ca6e <_svfiprintf_r+0x12e>
 800cae2:	9209      	str	r2, [sp, #36]	; 0x24
 800cae4:	e7c3      	b.n	800ca6e <_svfiprintf_r+0x12e>
 800cae6:	4342      	muls	r2, r0
 800cae8:	0035      	movs	r5, r6
 800caea:	2301      	movs	r3, #1
 800caec:	1852      	adds	r2, r2, r1
 800caee:	e7f1      	b.n	800cad4 <_svfiprintf_r+0x194>
 800caf0:	ab07      	add	r3, sp, #28
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	003a      	movs	r2, r7
 800caf6:	0021      	movs	r1, r4
 800caf8:	4b10      	ldr	r3, [pc, #64]	; (800cb3c <_svfiprintf_r+0x1fc>)
 800cafa:	9803      	ldr	r0, [sp, #12]
 800cafc:	e000      	b.n	800cb00 <_svfiprintf_r+0x1c0>
 800cafe:	bf00      	nop
 800cb00:	9004      	str	r0, [sp, #16]
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	3301      	adds	r3, #1
 800cb06:	d1d3      	bne.n	800cab0 <_svfiprintf_r+0x170>
 800cb08:	89bb      	ldrh	r3, [r7, #12]
 800cb0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb0c:	065b      	lsls	r3, r3, #25
 800cb0e:	d400      	bmi.n	800cb12 <_svfiprintf_r+0x1d2>
 800cb10:	e72d      	b.n	800c96e <_svfiprintf_r+0x2e>
 800cb12:	2001      	movs	r0, #1
 800cb14:	4240      	negs	r0, r0
 800cb16:	e72a      	b.n	800c96e <_svfiprintf_r+0x2e>
 800cb18:	ab07      	add	r3, sp, #28
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	003a      	movs	r2, r7
 800cb1e:	0021      	movs	r1, r4
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <_svfiprintf_r+0x1fc>)
 800cb22:	9803      	ldr	r0, [sp, #12]
 800cb24:	f000 f87c 	bl	800cc20 <_printf_i>
 800cb28:	e7ea      	b.n	800cb00 <_svfiprintf_r+0x1c0>
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	0800d164 	.word	0x0800d164
 800cb30:	0800d16a 	.word	0x0800d16a
 800cb34:	0800d16e 	.word	0x0800d16e
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	0800c87d 	.word	0x0800c87d

0800cb40 <_printf_common>:
 800cb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb42:	0015      	movs	r5, r2
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	688a      	ldr	r2, [r1, #8]
 800cb48:	690b      	ldr	r3, [r1, #16]
 800cb4a:	000c      	movs	r4, r1
 800cb4c:	9000      	str	r0, [sp, #0]
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	da00      	bge.n	800cb54 <_printf_common+0x14>
 800cb52:	0013      	movs	r3, r2
 800cb54:	0022      	movs	r2, r4
 800cb56:	602b      	str	r3, [r5, #0]
 800cb58:	3243      	adds	r2, #67	; 0x43
 800cb5a:	7812      	ldrb	r2, [r2, #0]
 800cb5c:	2a00      	cmp	r2, #0
 800cb5e:	d001      	beq.n	800cb64 <_printf_common+0x24>
 800cb60:	3301      	adds	r3, #1
 800cb62:	602b      	str	r3, [r5, #0]
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	069b      	lsls	r3, r3, #26
 800cb68:	d502      	bpl.n	800cb70 <_printf_common+0x30>
 800cb6a:	682b      	ldr	r3, [r5, #0]
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	602b      	str	r3, [r5, #0]
 800cb70:	6822      	ldr	r2, [r4, #0]
 800cb72:	2306      	movs	r3, #6
 800cb74:	0017      	movs	r7, r2
 800cb76:	401f      	ands	r7, r3
 800cb78:	421a      	tst	r2, r3
 800cb7a:	d027      	beq.n	800cbcc <_printf_common+0x8c>
 800cb7c:	0023      	movs	r3, r4
 800cb7e:	3343      	adds	r3, #67	; 0x43
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	1e5a      	subs	r2, r3, #1
 800cb84:	4193      	sbcs	r3, r2
 800cb86:	6822      	ldr	r2, [r4, #0]
 800cb88:	0692      	lsls	r2, r2, #26
 800cb8a:	d430      	bmi.n	800cbee <_printf_common+0xae>
 800cb8c:	0022      	movs	r2, r4
 800cb8e:	9901      	ldr	r1, [sp, #4]
 800cb90:	9800      	ldr	r0, [sp, #0]
 800cb92:	9e08      	ldr	r6, [sp, #32]
 800cb94:	3243      	adds	r2, #67	; 0x43
 800cb96:	47b0      	blx	r6
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d025      	beq.n	800cbe8 <_printf_common+0xa8>
 800cb9c:	2306      	movs	r3, #6
 800cb9e:	6820      	ldr	r0, [r4, #0]
 800cba0:	682a      	ldr	r2, [r5, #0]
 800cba2:	68e1      	ldr	r1, [r4, #12]
 800cba4:	2500      	movs	r5, #0
 800cba6:	4003      	ands	r3, r0
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d103      	bne.n	800cbb4 <_printf_common+0x74>
 800cbac:	1a8d      	subs	r5, r1, r2
 800cbae:	43eb      	mvns	r3, r5
 800cbb0:	17db      	asrs	r3, r3, #31
 800cbb2:	401d      	ands	r5, r3
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	6922      	ldr	r2, [r4, #16]
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	dd01      	ble.n	800cbc0 <_printf_common+0x80>
 800cbbc:	1a9b      	subs	r3, r3, r2
 800cbbe:	18ed      	adds	r5, r5, r3
 800cbc0:	2700      	movs	r7, #0
 800cbc2:	42bd      	cmp	r5, r7
 800cbc4:	d120      	bne.n	800cc08 <_printf_common+0xc8>
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	e010      	b.n	800cbec <_printf_common+0xac>
 800cbca:	3701      	adds	r7, #1
 800cbcc:	68e3      	ldr	r3, [r4, #12]
 800cbce:	682a      	ldr	r2, [r5, #0]
 800cbd0:	1a9b      	subs	r3, r3, r2
 800cbd2:	42bb      	cmp	r3, r7
 800cbd4:	ddd2      	ble.n	800cb7c <_printf_common+0x3c>
 800cbd6:	0022      	movs	r2, r4
 800cbd8:	2301      	movs	r3, #1
 800cbda:	9901      	ldr	r1, [sp, #4]
 800cbdc:	9800      	ldr	r0, [sp, #0]
 800cbde:	9e08      	ldr	r6, [sp, #32]
 800cbe0:	3219      	adds	r2, #25
 800cbe2:	47b0      	blx	r6
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d1f0      	bne.n	800cbca <_printf_common+0x8a>
 800cbe8:	2001      	movs	r0, #1
 800cbea:	4240      	negs	r0, r0
 800cbec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbee:	2030      	movs	r0, #48	; 0x30
 800cbf0:	18e1      	adds	r1, r4, r3
 800cbf2:	3143      	adds	r1, #67	; 0x43
 800cbf4:	7008      	strb	r0, [r1, #0]
 800cbf6:	0021      	movs	r1, r4
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	3145      	adds	r1, #69	; 0x45
 800cbfc:	7809      	ldrb	r1, [r1, #0]
 800cbfe:	18a2      	adds	r2, r4, r2
 800cc00:	3243      	adds	r2, #67	; 0x43
 800cc02:	3302      	adds	r3, #2
 800cc04:	7011      	strb	r1, [r2, #0]
 800cc06:	e7c1      	b.n	800cb8c <_printf_common+0x4c>
 800cc08:	0022      	movs	r2, r4
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	9901      	ldr	r1, [sp, #4]
 800cc0e:	9800      	ldr	r0, [sp, #0]
 800cc10:	9e08      	ldr	r6, [sp, #32]
 800cc12:	321a      	adds	r2, #26
 800cc14:	47b0      	blx	r6
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d0e6      	beq.n	800cbe8 <_printf_common+0xa8>
 800cc1a:	3701      	adds	r7, #1
 800cc1c:	e7d1      	b.n	800cbc2 <_printf_common+0x82>
	...

0800cc20 <_printf_i>:
 800cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc22:	b08b      	sub	sp, #44	; 0x2c
 800cc24:	9206      	str	r2, [sp, #24]
 800cc26:	000a      	movs	r2, r1
 800cc28:	3243      	adds	r2, #67	; 0x43
 800cc2a:	9307      	str	r3, [sp, #28]
 800cc2c:	9005      	str	r0, [sp, #20]
 800cc2e:	9204      	str	r2, [sp, #16]
 800cc30:	7e0a      	ldrb	r2, [r1, #24]
 800cc32:	000c      	movs	r4, r1
 800cc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc36:	2a78      	cmp	r2, #120	; 0x78
 800cc38:	d806      	bhi.n	800cc48 <_printf_i+0x28>
 800cc3a:	2a62      	cmp	r2, #98	; 0x62
 800cc3c:	d808      	bhi.n	800cc50 <_printf_i+0x30>
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	d100      	bne.n	800cc44 <_printf_i+0x24>
 800cc42:	e0c0      	b.n	800cdc6 <_printf_i+0x1a6>
 800cc44:	2a58      	cmp	r2, #88	; 0x58
 800cc46:	d052      	beq.n	800ccee <_printf_i+0xce>
 800cc48:	0026      	movs	r6, r4
 800cc4a:	3642      	adds	r6, #66	; 0x42
 800cc4c:	7032      	strb	r2, [r6, #0]
 800cc4e:	e022      	b.n	800cc96 <_printf_i+0x76>
 800cc50:	0010      	movs	r0, r2
 800cc52:	3863      	subs	r0, #99	; 0x63
 800cc54:	2815      	cmp	r0, #21
 800cc56:	d8f7      	bhi.n	800cc48 <_printf_i+0x28>
 800cc58:	f7f3 fa5e 	bl	8000118 <__gnu_thumb1_case_shi>
 800cc5c:	001f0016 	.word	0x001f0016
 800cc60:	fff6fff6 	.word	0xfff6fff6
 800cc64:	fff6fff6 	.word	0xfff6fff6
 800cc68:	fff6001f 	.word	0xfff6001f
 800cc6c:	fff6fff6 	.word	0xfff6fff6
 800cc70:	00a8fff6 	.word	0x00a8fff6
 800cc74:	009a0036 	.word	0x009a0036
 800cc78:	fff6fff6 	.word	0xfff6fff6
 800cc7c:	fff600b9 	.word	0xfff600b9
 800cc80:	fff60036 	.word	0xfff60036
 800cc84:	009efff6 	.word	0x009efff6
 800cc88:	0026      	movs	r6, r4
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	3642      	adds	r6, #66	; 0x42
 800cc8e:	1d11      	adds	r1, r2, #4
 800cc90:	6019      	str	r1, [r3, #0]
 800cc92:	6813      	ldr	r3, [r2, #0]
 800cc94:	7033      	strb	r3, [r6, #0]
 800cc96:	2301      	movs	r3, #1
 800cc98:	e0a7      	b.n	800cdea <_printf_i+0x1ca>
 800cc9a:	6808      	ldr	r0, [r1, #0]
 800cc9c:	6819      	ldr	r1, [r3, #0]
 800cc9e:	1d0a      	adds	r2, r1, #4
 800cca0:	0605      	lsls	r5, r0, #24
 800cca2:	d50b      	bpl.n	800ccbc <_printf_i+0x9c>
 800cca4:	680d      	ldr	r5, [r1, #0]
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	da03      	bge.n	800ccb4 <_printf_i+0x94>
 800ccac:	232d      	movs	r3, #45	; 0x2d
 800ccae:	9a04      	ldr	r2, [sp, #16]
 800ccb0:	426d      	negs	r5, r5
 800ccb2:	7013      	strb	r3, [r2, #0]
 800ccb4:	4b61      	ldr	r3, [pc, #388]	; (800ce3c <_printf_i+0x21c>)
 800ccb6:	270a      	movs	r7, #10
 800ccb8:	9303      	str	r3, [sp, #12]
 800ccba:	e032      	b.n	800cd22 <_printf_i+0x102>
 800ccbc:	680d      	ldr	r5, [r1, #0]
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	0641      	lsls	r1, r0, #25
 800ccc2:	d5f1      	bpl.n	800cca8 <_printf_i+0x88>
 800ccc4:	b22d      	sxth	r5, r5
 800ccc6:	e7ef      	b.n	800cca8 <_printf_i+0x88>
 800ccc8:	680d      	ldr	r5, [r1, #0]
 800ccca:	6819      	ldr	r1, [r3, #0]
 800cccc:	1d08      	adds	r0, r1, #4
 800ccce:	6018      	str	r0, [r3, #0]
 800ccd0:	062e      	lsls	r6, r5, #24
 800ccd2:	d501      	bpl.n	800ccd8 <_printf_i+0xb8>
 800ccd4:	680d      	ldr	r5, [r1, #0]
 800ccd6:	e003      	b.n	800cce0 <_printf_i+0xc0>
 800ccd8:	066d      	lsls	r5, r5, #25
 800ccda:	d5fb      	bpl.n	800ccd4 <_printf_i+0xb4>
 800ccdc:	680d      	ldr	r5, [r1, #0]
 800ccde:	b2ad      	uxth	r5, r5
 800cce0:	4b56      	ldr	r3, [pc, #344]	; (800ce3c <_printf_i+0x21c>)
 800cce2:	270a      	movs	r7, #10
 800cce4:	9303      	str	r3, [sp, #12]
 800cce6:	2a6f      	cmp	r2, #111	; 0x6f
 800cce8:	d117      	bne.n	800cd1a <_printf_i+0xfa>
 800ccea:	2708      	movs	r7, #8
 800ccec:	e015      	b.n	800cd1a <_printf_i+0xfa>
 800ccee:	3145      	adds	r1, #69	; 0x45
 800ccf0:	700a      	strb	r2, [r1, #0]
 800ccf2:	4a52      	ldr	r2, [pc, #328]	; (800ce3c <_printf_i+0x21c>)
 800ccf4:	9203      	str	r2, [sp, #12]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	6821      	ldr	r1, [r4, #0]
 800ccfa:	ca20      	ldmia	r2!, {r5}
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	0608      	lsls	r0, r1, #24
 800cd00:	d550      	bpl.n	800cda4 <_printf_i+0x184>
 800cd02:	07cb      	lsls	r3, r1, #31
 800cd04:	d502      	bpl.n	800cd0c <_printf_i+0xec>
 800cd06:	2320      	movs	r3, #32
 800cd08:	4319      	orrs	r1, r3
 800cd0a:	6021      	str	r1, [r4, #0]
 800cd0c:	2710      	movs	r7, #16
 800cd0e:	2d00      	cmp	r5, #0
 800cd10:	d103      	bne.n	800cd1a <_printf_i+0xfa>
 800cd12:	2320      	movs	r3, #32
 800cd14:	6822      	ldr	r2, [r4, #0]
 800cd16:	439a      	bics	r2, r3
 800cd18:	6022      	str	r2, [r4, #0]
 800cd1a:	0023      	movs	r3, r4
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	3343      	adds	r3, #67	; 0x43
 800cd20:	701a      	strb	r2, [r3, #0]
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	60a3      	str	r3, [r4, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	db03      	blt.n	800cd32 <_printf_i+0x112>
 800cd2a:	2204      	movs	r2, #4
 800cd2c:	6821      	ldr	r1, [r4, #0]
 800cd2e:	4391      	bics	r1, r2
 800cd30:	6021      	str	r1, [r4, #0]
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	d102      	bne.n	800cd3c <_printf_i+0x11c>
 800cd36:	9e04      	ldr	r6, [sp, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00c      	beq.n	800cd56 <_printf_i+0x136>
 800cd3c:	9e04      	ldr	r6, [sp, #16]
 800cd3e:	0028      	movs	r0, r5
 800cd40:	0039      	movs	r1, r7
 800cd42:	f7f3 fa79 	bl	8000238 <__aeabi_uidivmod>
 800cd46:	9b03      	ldr	r3, [sp, #12]
 800cd48:	3e01      	subs	r6, #1
 800cd4a:	5c5b      	ldrb	r3, [r3, r1]
 800cd4c:	7033      	strb	r3, [r6, #0]
 800cd4e:	002b      	movs	r3, r5
 800cd50:	0005      	movs	r5, r0
 800cd52:	429f      	cmp	r7, r3
 800cd54:	d9f3      	bls.n	800cd3e <_printf_i+0x11e>
 800cd56:	2f08      	cmp	r7, #8
 800cd58:	d109      	bne.n	800cd6e <_printf_i+0x14e>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	07db      	lsls	r3, r3, #31
 800cd5e:	d506      	bpl.n	800cd6e <_printf_i+0x14e>
 800cd60:	6863      	ldr	r3, [r4, #4]
 800cd62:	6922      	ldr	r2, [r4, #16]
 800cd64:	4293      	cmp	r3, r2
 800cd66:	dc02      	bgt.n	800cd6e <_printf_i+0x14e>
 800cd68:	2330      	movs	r3, #48	; 0x30
 800cd6a:	3e01      	subs	r6, #1
 800cd6c:	7033      	strb	r3, [r6, #0]
 800cd6e:	9b04      	ldr	r3, [sp, #16]
 800cd70:	1b9b      	subs	r3, r3, r6
 800cd72:	6123      	str	r3, [r4, #16]
 800cd74:	9b07      	ldr	r3, [sp, #28]
 800cd76:	0021      	movs	r1, r4
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	9805      	ldr	r0, [sp, #20]
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	aa09      	add	r2, sp, #36	; 0x24
 800cd80:	f7ff fede 	bl	800cb40 <_printf_common>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d135      	bne.n	800cdf4 <_printf_i+0x1d4>
 800cd88:	2001      	movs	r0, #1
 800cd8a:	4240      	negs	r0, r0
 800cd8c:	b00b      	add	sp, #44	; 0x2c
 800cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd90:	2220      	movs	r2, #32
 800cd92:	6809      	ldr	r1, [r1, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	6022      	str	r2, [r4, #0]
 800cd98:	0022      	movs	r2, r4
 800cd9a:	2178      	movs	r1, #120	; 0x78
 800cd9c:	3245      	adds	r2, #69	; 0x45
 800cd9e:	7011      	strb	r1, [r2, #0]
 800cda0:	4a27      	ldr	r2, [pc, #156]	; (800ce40 <_printf_i+0x220>)
 800cda2:	e7a7      	b.n	800ccf4 <_printf_i+0xd4>
 800cda4:	0648      	lsls	r0, r1, #25
 800cda6:	d5ac      	bpl.n	800cd02 <_printf_i+0xe2>
 800cda8:	b2ad      	uxth	r5, r5
 800cdaa:	e7aa      	b.n	800cd02 <_printf_i+0xe2>
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	680d      	ldr	r5, [r1, #0]
 800cdb0:	1d10      	adds	r0, r2, #4
 800cdb2:	6949      	ldr	r1, [r1, #20]
 800cdb4:	6018      	str	r0, [r3, #0]
 800cdb6:	6813      	ldr	r3, [r2, #0]
 800cdb8:	062e      	lsls	r6, r5, #24
 800cdba:	d501      	bpl.n	800cdc0 <_printf_i+0x1a0>
 800cdbc:	6019      	str	r1, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <_printf_i+0x1a6>
 800cdc0:	066d      	lsls	r5, r5, #25
 800cdc2:	d5fb      	bpl.n	800cdbc <_printf_i+0x19c>
 800cdc4:	8019      	strh	r1, [r3, #0]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9e04      	ldr	r6, [sp, #16]
 800cdca:	6123      	str	r3, [r4, #16]
 800cdcc:	e7d2      	b.n	800cd74 <_printf_i+0x154>
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	1d11      	adds	r1, r2, #4
 800cdd2:	6019      	str	r1, [r3, #0]
 800cdd4:	6816      	ldr	r6, [r2, #0]
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	0030      	movs	r0, r6
 800cdda:	6862      	ldr	r2, [r4, #4]
 800cddc:	f000 f834 	bl	800ce48 <memchr>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d001      	beq.n	800cde8 <_printf_i+0x1c8>
 800cde4:	1b80      	subs	r0, r0, r6
 800cde6:	6060      	str	r0, [r4, #4]
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	6123      	str	r3, [r4, #16]
 800cdec:	2300      	movs	r3, #0
 800cdee:	9a04      	ldr	r2, [sp, #16]
 800cdf0:	7013      	strb	r3, [r2, #0]
 800cdf2:	e7bf      	b.n	800cd74 <_printf_i+0x154>
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	0032      	movs	r2, r6
 800cdf8:	9906      	ldr	r1, [sp, #24]
 800cdfa:	9805      	ldr	r0, [sp, #20]
 800cdfc:	9d07      	ldr	r5, [sp, #28]
 800cdfe:	47a8      	blx	r5
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d0c1      	beq.n	800cd88 <_printf_i+0x168>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	079b      	lsls	r3, r3, #30
 800ce08:	d415      	bmi.n	800ce36 <_printf_i+0x216>
 800ce0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0c:	68e0      	ldr	r0, [r4, #12]
 800ce0e:	4298      	cmp	r0, r3
 800ce10:	dabc      	bge.n	800cd8c <_printf_i+0x16c>
 800ce12:	0018      	movs	r0, r3
 800ce14:	e7ba      	b.n	800cd8c <_printf_i+0x16c>
 800ce16:	0022      	movs	r2, r4
 800ce18:	2301      	movs	r3, #1
 800ce1a:	9906      	ldr	r1, [sp, #24]
 800ce1c:	9805      	ldr	r0, [sp, #20]
 800ce1e:	9e07      	ldr	r6, [sp, #28]
 800ce20:	3219      	adds	r2, #25
 800ce22:	47b0      	blx	r6
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d0af      	beq.n	800cd88 <_printf_i+0x168>
 800ce28:	3501      	adds	r5, #1
 800ce2a:	68e3      	ldr	r3, [r4, #12]
 800ce2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce2e:	1a9b      	subs	r3, r3, r2
 800ce30:	42ab      	cmp	r3, r5
 800ce32:	dcf0      	bgt.n	800ce16 <_printf_i+0x1f6>
 800ce34:	e7e9      	b.n	800ce0a <_printf_i+0x1ea>
 800ce36:	2500      	movs	r5, #0
 800ce38:	e7f7      	b.n	800ce2a <_printf_i+0x20a>
 800ce3a:	46c0      	nop			; (mov r8, r8)
 800ce3c:	0800d175 	.word	0x0800d175
 800ce40:	0800d186 	.word	0x0800d186

0800ce44 <__retarget_lock_acquire_recursive>:
 800ce44:	4770      	bx	lr

0800ce46 <__retarget_lock_release_recursive>:
 800ce46:	4770      	bx	lr

0800ce48 <memchr>:
 800ce48:	b2c9      	uxtb	r1, r1
 800ce4a:	1882      	adds	r2, r0, r2
 800ce4c:	4290      	cmp	r0, r2
 800ce4e:	d101      	bne.n	800ce54 <memchr+0xc>
 800ce50:	2000      	movs	r0, #0
 800ce52:	4770      	bx	lr
 800ce54:	7803      	ldrb	r3, [r0, #0]
 800ce56:	428b      	cmp	r3, r1
 800ce58:	d0fb      	beq.n	800ce52 <memchr+0xa>
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	e7f6      	b.n	800ce4c <memchr+0x4>

0800ce5e <memcpy>:
 800ce5e:	2300      	movs	r3, #0
 800ce60:	b510      	push	{r4, lr}
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d100      	bne.n	800ce68 <memcpy+0xa>
 800ce66:	bd10      	pop	{r4, pc}
 800ce68:	5ccc      	ldrb	r4, [r1, r3]
 800ce6a:	54c4      	strb	r4, [r0, r3]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	e7f8      	b.n	800ce62 <memcpy+0x4>

0800ce70 <memmove>:
 800ce70:	b510      	push	{r4, lr}
 800ce72:	4288      	cmp	r0, r1
 800ce74:	d902      	bls.n	800ce7c <memmove+0xc>
 800ce76:	188b      	adds	r3, r1, r2
 800ce78:	4298      	cmp	r0, r3
 800ce7a:	d303      	bcc.n	800ce84 <memmove+0x14>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	e007      	b.n	800ce90 <memmove+0x20>
 800ce80:	5c8b      	ldrb	r3, [r1, r2]
 800ce82:	5483      	strb	r3, [r0, r2]
 800ce84:	3a01      	subs	r2, #1
 800ce86:	d2fb      	bcs.n	800ce80 <memmove+0x10>
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	5ccc      	ldrb	r4, [r1, r3]
 800ce8c:	54c4      	strb	r4, [r0, r3]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d1fa      	bne.n	800ce8a <memmove+0x1a>
 800ce94:	e7f8      	b.n	800ce88 <memmove+0x18>

0800ce96 <_realloc_r>:
 800ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce98:	0007      	movs	r7, r0
 800ce9a:	000d      	movs	r5, r1
 800ce9c:	0016      	movs	r6, r2
 800ce9e:	2900      	cmp	r1, #0
 800cea0:	d105      	bne.n	800ceae <_realloc_r+0x18>
 800cea2:	0011      	movs	r1, r2
 800cea4:	f7ff fc4a 	bl	800c73c <_malloc_r>
 800cea8:	0004      	movs	r4, r0
 800ceaa:	0020      	movs	r0, r4
 800ceac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceae:	2a00      	cmp	r2, #0
 800ceb0:	d103      	bne.n	800ceba <_realloc_r+0x24>
 800ceb2:	f7ff fbf9 	bl	800c6a8 <_free_r>
 800ceb6:	0034      	movs	r4, r6
 800ceb8:	e7f7      	b.n	800ceaa <_realloc_r+0x14>
 800ceba:	f000 f812 	bl	800cee2 <_malloc_usable_size_r>
 800cebe:	002c      	movs	r4, r5
 800cec0:	42b0      	cmp	r0, r6
 800cec2:	d2f2      	bcs.n	800ceaa <_realloc_r+0x14>
 800cec4:	0031      	movs	r1, r6
 800cec6:	0038      	movs	r0, r7
 800cec8:	f7ff fc38 	bl	800c73c <_malloc_r>
 800cecc:	1e04      	subs	r4, r0, #0
 800cece:	d0ec      	beq.n	800ceaa <_realloc_r+0x14>
 800ced0:	0029      	movs	r1, r5
 800ced2:	0032      	movs	r2, r6
 800ced4:	f7ff ffc3 	bl	800ce5e <memcpy>
 800ced8:	0029      	movs	r1, r5
 800ceda:	0038      	movs	r0, r7
 800cedc:	f7ff fbe4 	bl	800c6a8 <_free_r>
 800cee0:	e7e3      	b.n	800ceaa <_realloc_r+0x14>

0800cee2 <_malloc_usable_size_r>:
 800cee2:	1f0b      	subs	r3, r1, #4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	1f18      	subs	r0, r3, #4
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da01      	bge.n	800cef0 <_malloc_usable_size_r+0xe>
 800ceec:	580b      	ldr	r3, [r1, r0]
 800ceee:	18c0      	adds	r0, r0, r3
 800cef0:	4770      	bx	lr
	...

0800cef4 <_init>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	46c0      	nop			; (mov r8, r8)
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr

0800cf00 <_fini>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	46c0      	nop			; (mov r8, r8)
 800cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf06:	bc08      	pop	{r3}
 800cf08:	469e      	mov	lr, r3
 800cf0a:	4770      	bx	lr
