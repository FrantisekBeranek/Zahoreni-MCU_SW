
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d398  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d458  0800d458  0001d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6c8  0800d6c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6c8  0800d6c8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6c8  0800d6c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6c8  0800d6c8  0001d6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001e0  0800d8b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800d8b0  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be64  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005159  00000000  00000000  0004c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000511c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00052938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020725  00000000  00000000  00053ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ae3  00000000  00000000  000745e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a472e  00000000  00000000  000950c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001397f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  0013984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d440 	.word	0x0800d440

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d440 	.word	0x0800d440

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a4      	sub	sp, #144	; 0x90
 8000420:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 8000422:	4bbd      	ldr	r3, [pc, #756]	; (8000718 <comHandler+0x300>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	7d1b      	ldrb	r3, [r3, #20]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d109      	bne.n	8000440 <comHandler+0x28>
	{
		flags.data_received = 0;
 800042c:	4bbb      	ldr	r3, [pc, #748]	; (800071c <comHandler+0x304>)
 800042e:	7a1a      	ldrb	r2, [r3, #8]
 8000430:	2101      	movs	r1, #1
 8000432:	438a      	bics	r2, r1
 8000434:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000436:	4bb8      	ldr	r3, [pc, #736]	; (8000718 <comHandler+0x300>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fb64 	bl	8001b08 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 8000440:	4bb6      	ldr	r3, [pc, #728]	; (800071c <comHandler+0x304>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2201      	movs	r2, #1
 8000446:	4013      	ands	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <comHandler+0x38>
 800044e:	e0d0      	b.n	80005f2 <comHandler+0x1da>
	{
		int start = 0;	//flag o nalezení počátku paketu
 8000450:	2300      	movs	r3, #0
 8000452:	67fb      	str	r3, [r7, #124]	; 0x7c

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000454:	2300      	movs	r3, #0
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	18ba      	adds	r2, r7, r2
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	e04b      	b.n	80004f6 <comHandler+0xde>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 800045e:	4bae      	ldr	r3, [pc, #696]	; (8000718 <comHandler+0x300>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	264b      	movs	r6, #75	; 0x4b
 8000464:	2218      	movs	r2, #24
 8000466:	18b9      	adds	r1, r7, r2
 8000468:	198a      	adds	r2, r1, r6
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	1878      	adds	r0, r7, r1
 800046e:	6801      	ldr	r1, [r0, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fbf1 	bl	8001c58 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 8000476:	4ba8      	ldr	r3, [pc, #672]	; (8000718 <comHandler+0x300>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	224a      	movs	r2, #74	; 0x4a
 8000484:	2118      	movs	r1, #24
 8000486:	468c      	mov	ip, r1
 8000488:	44bc      	add	ip, r7
 800048a:	4462      	add	r2, ip
 800048c:	0019      	movs	r1, r3
 800048e:	f001 fbe3 	bl	8001c58 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000492:	2218      	movs	r2, #24
 8000494:	18bb      	adds	r3, r7, r2
 8000496:	199b      	adds	r3, r3, r6
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b3e      	cmp	r3, #62	; 0x3e
 800049c:	d125      	bne.n	80004ea <comHandler+0xd2>
 800049e:	18bb      	adds	r3, r7, r2
 80004a0:	199b      	adds	r3, r3, r6
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b3e      	cmp	r3, #62	; 0x3e
 80004a6:	d120      	bne.n	80004ea <comHandler+0xd2>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004a8:	2300      	movs	r3, #0
 80004aa:	2284      	movs	r2, #132	; 0x84
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e010      	b.n	80004d4 <comHandler+0xbc>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b2:	4b99      	ldr	r3, [pc, #612]	; (8000718 <comHandler+0x300>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2249      	movs	r2, #73	; 0x49
 80004b8:	2118      	movs	r1, #24
 80004ba:	468c      	mov	ip, r1
 80004bc:	44bc      	add	ip, r7
 80004be:	4462      	add	r2, ip
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fb95 	bl	8001bf2 <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c8:	2284      	movs	r2, #132	; 0x84
 80004ca:	18bb      	adds	r3, r7, r2
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	2384      	movs	r3, #132	; 0x84
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbe6      	blt.n	80004b2 <comHandler+0x9a>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004e4:	2301      	movs	r3, #1
 80004e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80004e8:	e00d      	b.n	8000506 <comHandler+0xee>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	18bb      	adds	r3, r7, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	18ba      	adds	r2, r7, r2
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <comHandler+0x300>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	18ba      	adds	r2, r7, r2
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbab      	blt.n	800045e <comHandler+0x46>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000508:	2b00      	cmp	r3, #0
 800050a:	d06d      	beq.n	80005e8 <comHandler+0x1d0>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800050c:	2300      	movs	r3, #0
 800050e:	2288      	movs	r2, #136	; 0x88
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	e060      	b.n	80005d8 <comHandler+0x1c0>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <comHandler+0x300>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2648      	movs	r6, #72	; 0x48
 800051c:	2218      	movs	r2, #24
 800051e:	18b9      	adds	r1, r7, r2
 8000520:	198a      	adds	r2, r1, r6
 8000522:	2188      	movs	r1, #136	; 0x88
 8000524:	1878      	adds	r0, r7, r1
 8000526:	6801      	ldr	r1, [r0, #0]
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fb95 	bl	8001c58 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800052e:	4b7a      	ldr	r3, [pc, #488]	; (8000718 <comHandler+0x300>)
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	2388      	movs	r3, #136	; 0x88
 8000534:	18f9      	adds	r1, r7, r3
 8000536:	680b      	ldr	r3, [r1, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	2247      	movs	r2, #71	; 0x47
 800053c:	2118      	movs	r1, #24
 800053e:	468c      	mov	ip, r1
 8000540:	44bc      	add	ip, r7
 8000542:	4462      	add	r2, ip
 8000544:	0019      	movs	r1, r3
 8000546:	f001 fb87 	bl	8001c58 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 800054a:	2218      	movs	r2, #24
 800054c:	18b9      	adds	r1, r7, r2
 800054e:	198b      	adds	r3, r1, r6
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b3c      	cmp	r3, #60	; 0x3c
 8000554:	d13a      	bne.n	80005cc <comHandler+0x1b4>
 8000556:	18ba      	adds	r2, r7, r2
 8000558:	1993      	adds	r3, r2, r6
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b3c      	cmp	r3, #60	; 0x3c
 800055e:	d135      	bne.n	80005cc <comHandler+0x1b4>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000560:	2388      	movs	r3, #136	; 0x88
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3302      	adds	r3, #2
 8000568:	0018      	movs	r0, r3
 800056a:	f00c fb27 	bl	800cbbc <malloc>
 800056e:	0003      	movs	r3, r0
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000572:	2300      	movs	r3, #0
 8000574:	228c      	movs	r2, #140	; 0x8c
 8000576:	18ba      	adds	r2, r7, r2
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e00f      	b.n	800059c <comHandler+0x184>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 800057c:	4b66      	ldr	r3, [pc, #408]	; (8000718 <comHandler+0x300>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	268c      	movs	r6, #140	; 0x8c
 8000582:	19bb      	adds	r3, r7, r6
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	0019      	movs	r1, r3
 800058c:	f001 fb31 	bl	8001bf2 <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000590:	0032      	movs	r2, r6
 8000592:	18bb      	adds	r3, r7, r2
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	2188      	movs	r1, #136	; 0x88
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	18ba      	adds	r2, r7, r2
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dde6      	ble.n	800057c <comHandler+0x164>
					}

					decodePaket(tmp, i+2);
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	3302      	adds	r3, #2
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fa8d 	bl	8000adc <decodePaket>
					free(tmp);
 80005c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005c4:	0018      	movs	r0, r3
 80005c6:	f00c fb03 	bl	800cbd0 <free>
					break;
 80005ca:	e00d      	b.n	80005e8 <comHandler+0x1d0>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80005cc:	2288      	movs	r2, #136	; 0x88
 80005ce:	18bb      	adds	r3, r7, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	18ba      	adds	r2, r7, r2
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <comHandler+0x300>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2288      	movs	r2, #136	; 0x88
 80005e0:	18ba      	adds	r2, r7, r2
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	db96      	blt.n	8000516 <comHandler+0xfe>
				}
			}
		}

		flags.data_received = 0;
 80005e8:	4b4c      	ldr	r3, [pc, #304]	; (800071c <comHandler+0x304>)
 80005ea:	7a1a      	ldrb	r2, [r3, #8]
 80005ec:	2101      	movs	r1, #1
 80005ee:	438a      	bics	r2, r1
 80005f0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <comHandler+0x304>)
 80005f4:	7e1b      	ldrb	r3, [r3, #24]
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d055      	beq.n	80006ac <comHandler+0x294>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 8000600:	f001 fe40 	bl	8002284 <currentPhase>
 8000604:	0003      	movs	r3, r0
 8000606:	2b06      	cmp	r3, #6
 8000608:	d834      	bhi.n	8000674 <comHandler+0x25c>
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <comHandler+0x308>)
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000614:	2346      	movs	r3, #70	; 0x46
 8000616:	2218      	movs	r2, #24
 8000618:	4694      	mov	ip, r2
 800061a:	44bc      	add	ip, r7
 800061c:	4463      	add	r3, ip
 800061e:	2273      	movs	r2, #115	; 0x73
 8000620:	701a      	strb	r2, [r3, #0]
			break;
 8000622:	e02f      	b.n	8000684 <comHandler+0x26c>
		case START_DONE:
			testPhaseChr = 's';
 8000624:	2346      	movs	r3, #70	; 0x46
 8000626:	2218      	movs	r2, #24
 8000628:	4694      	mov	ip, r2
 800062a:	44bc      	add	ip, r7
 800062c:	4463      	add	r3, ip
 800062e:	2273      	movs	r2, #115	; 0x73
 8000630:	701a      	strb	r2, [r3, #0]
			break;
 8000632:	e027      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 8000634:	2346      	movs	r3, #70	; 0x46
 8000636:	2218      	movs	r2, #24
 8000638:	4694      	mov	ip, r2
 800063a:	44bc      	add	ip, r7
 800063c:	4463      	add	r3, ip
 800063e:	226d      	movs	r2, #109	; 0x6d
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e01f      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000644:	2346      	movs	r3, #70	; 0x46
 8000646:	2218      	movs	r2, #24
 8000648:	4694      	mov	ip, r2
 800064a:	44bc      	add	ip, r7
 800064c:	4463      	add	r3, ip
 800064e:	226d      	movs	r2, #109	; 0x6d
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e017      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000654:	2346      	movs	r3, #70	; 0x46
 8000656:	2218      	movs	r2, #24
 8000658:	4694      	mov	ip, r2
 800065a:	44bc      	add	ip, r7
 800065c:	4463      	add	r3, ip
 800065e:	2262      	movs	r2, #98	; 0x62
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	e00f      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000664:	2346      	movs	r3, #70	; 0x46
 8000666:	2218      	movs	r2, #24
 8000668:	4694      	mov	ip, r2
 800066a:	44bc      	add	ip, r7
 800066c:	4463      	add	r3, ip
 800066e:	224d      	movs	r2, #77	; 0x4d
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e007      	b.n	8000684 <comHandler+0x26c>
		default:
			testPhaseChr = 'e';
 8000674:	2346      	movs	r3, #70	; 0x46
 8000676:	2218      	movs	r2, #24
 8000678:	4694      	mov	ip, r2
 800067a:	44bc      	add	ip, r7
 800067c:	4463      	add	r3, ip
 800067e:	2265      	movs	r2, #101	; 0x65
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 8000684:	2346      	movs	r3, #70	; 0x46
 8000686:	2118      	movs	r1, #24
 8000688:	187a      	adds	r2, r7, r1
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	2638      	movs	r6, #56	; 0x38
 800068e:	187b      	adds	r3, r7, r1
 8000690:	1998      	adds	r0, r3, r6
 8000692:	2301      	movs	r3, #1
 8000694:	2104      	movs	r1, #4
 8000696:	f000 f925 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <comHandler+0x30c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2118      	movs	r1, #24
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	1992      	adds	r2, r2, r6
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f95c 	bl	8000964 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <comHandler+0x304>)
 80006ae:	7d1b      	ldrb	r3, [r3, #20]
 80006b0:	2202      	movs	r2, #2
 80006b2:	4013      	ands	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d051      	beq.n	800075e <comHandler+0x346>
	{
		if(!flags.meas.calibMeas)
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <comHandler+0x304>)
 80006bc:	7d1b      	ldrb	r3, [r3, #20]
 80006be:	2240      	movs	r2, #64	; 0x40
 80006c0:	4013      	ands	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d117      	bne.n	80006f8 <comHandler+0x2e0>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <comHandler+0x310>)
 80006ca:	2620      	movs	r6, #32
 80006cc:	2318      	movs	r3, #24
 80006ce:	18f9      	adds	r1, r7, r3
 80006d0:	1988      	adds	r0, r1, r6
 80006d2:	2301      	movs	r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	f000 f905 	bl	80008e4 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <comHandler+0x30c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2218      	movs	r2, #24
 80006e0:	18ba      	adds	r2, r7, r2
 80006e2:	1992      	adds	r2, r2, r6
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f93c 	bl	8000964 <pushPaket>
			testNum++;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <comHandler+0x310>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <comHandler+0x310>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e004      	b.n	8000702 <comHandler+0x2ea>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <comHandler+0x304>)
 80006fa:	7d1a      	ldrb	r2, [r3, #20]
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	438a      	bics	r2, r1
 8000700:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000702:	f000 f8c3 	bl	800088c <makeByteArray>
		Paket paket;
		outPaketType type = (flags.meas.onlyBattery)? DATA_BAT_PAKET : DATA_PAKET;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <comHandler+0x304>)
 8000708:	7d1b      	ldrb	r3, [r3, #20]
 800070a:	2220      	movs	r2, #32
 800070c:	4013      	ands	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <comHandler+0x314>
 8000714:	2202      	movs	r2, #2
 8000716:	e00a      	b.n	800072e <comHandler+0x316>
 8000718:	20001134 	.word	0x20001134
 800071c:	20000630 	.word	0x20000630
 8000720:	0800d4fc 	.word	0x0800d4fc
 8000724:	20000490 	.word	0x20000490
 8000728:	20000260 	.word	0x20000260
 800072c:	2201      	movs	r2, #1
 800072e:	215b      	movs	r1, #91	; 0x5b
 8000730:	2018      	movs	r0, #24
 8000732:	183b      	adds	r3, r7, r0
 8000734:	185b      	adds	r3, r3, r1
 8000736:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, type, data, 14);
 8000738:	4a50      	ldr	r2, [pc, #320]	; (800087c <comHandler+0x464>)
 800073a:	183b      	adds	r3, r7, r0
 800073c:	185b      	adds	r3, r3, r1
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	262c      	movs	r6, #44	; 0x2c
 8000742:	183b      	adds	r3, r7, r0
 8000744:	1998      	adds	r0, r3, r6
 8000746:	230e      	movs	r3, #14
 8000748:	f000 f8cc 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <comHandler+0x468>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2018      	movs	r0, #24
 8000752:	183a      	adds	r2, r7, r0
 8000754:	1992      	adds	r2, r2, r6
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f903 	bl	8000964 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <comHandler+0x46c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2202      	movs	r2, #2
 8000764:	4013      	ands	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d011      	beq.n	8000790 <comHandler+0x378>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 800076c:	2614      	movs	r6, #20
 800076e:	2218      	movs	r2, #24
 8000770:	18bb      	adds	r3, r7, r2
 8000772:	1998      	adds	r0, r3, r6
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	2106      	movs	r1, #6
 800077a:	f000 f8b3 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <comHandler+0x468>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2218      	movs	r2, #24
 8000784:	18ba      	adds	r2, r7, r2
 8000786:	1992      	adds	r2, r2, r6
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f8ea 	bl	8000964 <pushPaket>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <comHandler+0x468>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7d1b      	ldrb	r3, [r3, #20]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d11b      	bne.n	80007d2 <comHandler+0x3ba>
	{
		flags.ui.shortBeep = 1;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <comHandler+0x46c>)
 800079c:	7c1a      	ldrb	r2, [r3, #16]
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80007a4:	261c      	movs	r6, #28
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	4a37      	ldr	r2, [pc, #220]	; (8000888 <comHandler+0x470>)
 80007aa:	ca43      	ldmia	r2!, {r0, r1, r6}
 80007ac:	c343      	stmia	r3!, {r0, r1, r6}
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80007b2:	261c      	movs	r6, #28
 80007b4:	19bb      	adds	r3, r7, r6
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fca6 	bl	8000108 <strlen>
 80007bc:	0002      	movs	r2, r0
 80007be:	19bb      	adds	r3, r7, r6
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f00b fd14 	bl	800c1f0 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <comHandler+0x468>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f99b 	bl	8001b08 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <comHandler+0x468>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d048      	beq.n	800086e <comHandler+0x456>
	{
 80007dc:	466b      	mov	r3, sp
 80007de:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <comHandler+0x468>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		char tmpStr[size];
 80007e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80007ee:	001a      	movs	r2, r3
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	60fa      	str	r2, [r7, #12]
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	0002      	movs	r2, r0
 80007fc:	0f52      	lsrs	r2, r2, #29
 80007fe:	000e      	movs	r6, r1
 8000800:	00f6      	lsls	r6, r6, #3
 8000802:	617e      	str	r6, [r7, #20]
 8000804:	697e      	ldr	r6, [r7, #20]
 8000806:	4316      	orrs	r6, r2
 8000808:	617e      	str	r6, [r7, #20]
 800080a:	0002      	movs	r2, r0
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	613a      	str	r2, [r7, #16]
 8000810:	001a      	movs	r2, r3
 8000812:	603a      	str	r2, [r7, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	0002      	movs	r2, r0
 800081e:	0f52      	lsrs	r2, r2, #29
 8000820:	000e      	movs	r6, r1
 8000822:	00f5      	lsls	r5, r6, #3
 8000824:	4315      	orrs	r5, r2
 8000826:	0002      	movs	r2, r0
 8000828:	00d4      	lsls	r4, r2, #3
 800082a:	3307      	adds	r3, #7
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	466a      	mov	r2, sp
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	469d      	mov	sp, r3
 8000836:	466b      	mov	r3, sp
 8000838:	3300      	adds	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
		for(int i = 0; i < size; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000840:	e00a      	b.n	8000858 <comHandler+0x440>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <comHandler+0x468>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	0019      	movs	r1, r3
 800084e:	f001 f9d0 	bl	8001bf2 <pop>
		for(int i = 0; i < size; i++)
 8000852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000854:	3301      	adds	r3, #1
 8000856:	67bb      	str	r3, [r7, #120]	; 0x78
 8000858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800085a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <comHandler+0x42a>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000862:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f00b fcc2 	bl	800c1f0 <CDC_Transmit_FS>
 800086c:	46c5      	mov	sp, r8
	}

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b024      	add	sp, #144	; 0x90
 8000874:	bc80      	pop	{r7}
 8000876:	46b8      	mov	r8, r7
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000494 	.word	0x20000494
 8000880:	20000490 	.word	0x20000490
 8000884:	20000630 	.word	0x20000630
 8000888:	0800d458 	.word	0x0800d458

0800088c <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e018      	b.n	80008ca <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	005a      	lsls	r2, r3, #1
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <makeByteArray+0x50>)
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	58d3      	ldr	r3, [r2, r3]
 80008a2:	0a1a      	lsrs	r2, r3, #8
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b2d1      	uxtb	r1, r2
 80008aa:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <makeByteArray+0x54>)
 80008ac:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	005a      	lsls	r2, r3, #1
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <makeByteArray+0x50>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d2      	ldr	r2, [r2, r3]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	3301      	adds	r3, #1
 80008be:	b2d1      	uxtb	r1, r2
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <makeByteArray+0x54>)
 80008c2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	dde3      	ble.n	8000898 <makeByteArray+0xc>
	}
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	20000494 	.word	0x20000494

080008e4 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	0008      	movs	r0, r1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	0019      	movs	r1, r3
 80008f2:	240b      	movs	r4, #11
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	1c02      	adds	r2, r0, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	200a      	movs	r0, #10
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	0021      	movs	r1, r4
 8000906:	187a      	adds	r2, r7, r1
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	183a      	adds	r2, r7, r0
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 800091a:	2317      	movs	r3, #23
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	187a      	adds	r2, r7, r1
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e00c      	b.n	8000944 <fillPaket+0x60>
		CA += data[i];
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	2217      	movs	r2, #23
 8000934:	18bb      	adds	r3, r7, r2
 8000936:	18ba      	adds	r2, r7, r2
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	188a      	adds	r2, r1, r2
 800093c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	230a      	movs	r3, #10
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbec      	blt.n	800092a <fillPaket+0x46>
	paket->CA_value = CA;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2217      	movs	r2, #23
 8000954:	18ba      	adds	r2, r7, r2
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	725a      	strb	r2, [r3, #9]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b007      	add	sp, #28
 8000960:	bd90      	pop	{r4, r7, pc}
	...

08000964 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	46c6      	mov	lr, r8
 8000968:	b500      	push	{lr}
 800096a:	b096      	sub	sp, #88	; 0x58
 800096c:	af00      	add	r7, sp, #0
 800096e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000970:	63b9      	str	r1, [r7, #56]	; 0x38
 8000972:	466b      	mov	r3, sp
 8000974:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	1c9a      	adds	r2, r3, #2
 800097c:	1e53      	subs	r3, r2, #1
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
 8000980:	0013      	movs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69b8      	ldr	r0, [r7, #24]
 800098a:	69f9      	ldr	r1, [r7, #28]
 800098c:	0003      	movs	r3, r0
 800098e:	0f5b      	lsrs	r3, r3, #29
 8000990:	000e      	movs	r6, r1
 8000992:	00f5      	lsls	r5, r6, #3
 8000994:	431d      	orrs	r5, r3
 8000996:	0003      	movs	r3, r0
 8000998:	00dc      	lsls	r4, r3, #3
 800099a:	0013      	movs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	6979      	ldr	r1, [r7, #20]
 80009a6:	0003      	movs	r3, r0
 80009a8:	0f5b      	lsrs	r3, r3, #29
 80009aa:	000c      	movs	r4, r1
 80009ac:	00e4      	lsls	r4, r4, #3
 80009ae:	637c      	str	r4, [r7, #52]	; 0x34
 80009b0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80009b2:	431c      	orrs	r4, r3
 80009b4:	637c      	str	r4, [r7, #52]	; 0x34
 80009b6:	0003      	movs	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
 80009bc:	0013      	movs	r3, r2
 80009be:	3307      	adds	r3, #7
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	466a      	mov	r2, sp
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	469d      	mov	sp, r3
 80009ca:	466b      	mov	r3, sp
 80009cc:	3300      	adds	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	1c58      	adds	r0, r3, #1
 80009dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009de:	6859      	ldr	r1, [r3, #4]
 80009e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	001a      	movs	r2, r3
 80009e6:	f00c f8fd 	bl	800cbe4 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 80009ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ec:	7a1b      	ldrb	r3, [r3, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f2:	7a51      	ldrb	r1, [r2, #9]
 80009f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009f6:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 80009f8:	200c      	movs	r0, #12
 80009fa:	2638      	movs	r6, #56	; 0x38
 80009fc:	19bb      	adds	r3, r7, r6
 80009fe:	181b      	adds	r3, r3, r0
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <pushPaket+0x170>)
 8000a02:	8811      	ldrh	r1, [r2, #0]
 8000a04:	8019      	strh	r1, [r3, #0]
 8000a06:	7892      	ldrb	r2, [r2, #2]
 8000a08:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000a0a:	2508      	movs	r5, #8
 8000a0c:	19bb      	adds	r3, r7, r6
 8000a0e:	195b      	adds	r3, r3, r5
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <pushPaket+0x174>)
 8000a12:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	1e63      	subs	r3, r4, #1
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a20:	0023      	movs	r3, r4
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	000b      	movs	r3, r1
 8000a2e:	0f5b      	lsrs	r3, r3, #29
 8000a30:	0016      	movs	r6, r2
 8000a32:	00f6      	lsls	r6, r6, #3
 8000a34:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a36:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a42:	0023      	movs	r3, r4
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	000b      	movs	r3, r1
 8000a50:	0f5b      	lsrs	r3, r3, #29
 8000a52:	0016      	movs	r6, r2
 8000a54:	00f6      	lsls	r6, r6, #3
 8000a56:	627e      	str	r6, [r7, #36]	; 0x24
 8000a58:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	627e      	str	r6, [r7, #36]	; 0x24
 8000a5e:	000b      	movs	r3, r1
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	0023      	movs	r3, r4
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	466a      	mov	r2, sp
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	469d      	mov	sp, r3
 8000a72:	466b      	mov	r3, sp
 8000a74:	3300      	adds	r3, #0
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7a:	2638      	movs	r6, #56	; 0x38
 8000a7c:	19ba      	adds	r2, r7, r6
 8000a7e:	1811      	adds	r1, r2, r0
 8000a80:	2202      	movs	r2, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f00c f8ae 	bl	800cbe4 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a8a:	1c98      	adds	r0, r3, #2
 8000a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	3302      	adds	r3, #2
 8000a94:	001a      	movs	r2, r3
 8000a96:	f00c f8a5 	bl	800cbe4 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9e:	7a1b      	ldrb	r3, [r3, #8]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	19bb      	adds	r3, r7, r6
 8000aa6:	195b      	adds	r3, r3, r5
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	0019      	movs	r1, r3
 8000aac:	2304      	movs	r3, #4
 8000aae:	001a      	movs	r2, r3
 8000ab0:	f00c f898 	bl	800cbe4 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000ab4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ab6:	0023      	movs	r3, r4
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	001a      	movs	r2, r3
 8000abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 f86f 	bl	8001ba2 <pushStr>
 8000ac4:	46c5      	mov	sp, r8
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b016      	add	sp, #88	; 0x58
 8000acc:	bc80      	pop	{r7}
 8000ace:	46b8      	mov	r8, r7
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	0800d468 	.word	0x0800d468
 8000ad8:	000a3c3c 	.word	0x000a3c3c

08000adc <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e00a      	b.n	8000b0a <decodePaket+0x2e>
	{
		sum += data[i];
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b03      	subs	r3, #3
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbee      	blt.n	8000af4 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000b16:	1cfb      	adds	r3, r7, #3
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b03      	subs	r3, #3
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d13b      	bne.n	8000ba2 <decodePaket+0xc6>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b73      	cmp	r3, #115	; 0x73
 8000b32:	d008      	beq.n	8000b46 <decodePaket+0x6a>
 8000b34:	dc2f      	bgt.n	8000b96 <decodePaket+0xba>
 8000b36:	2b70      	cmp	r3, #112	; 0x70
 8000b38:	d019      	beq.n	8000b6e <decodePaket+0x92>
 8000b3a:	dc2c      	bgt.n	8000b96 <decodePaket+0xba>
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d00c      	beq.n	8000b5a <decodePaket+0x7e>
 8000b40:	2b6b      	cmp	r3, #107	; 0x6b
 8000b42:	d01e      	beq.n	8000b82 <decodePaket+0xa6>
 8000b44:	e027      	b.n	8000b96 <decodePaket+0xba>
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d12b      	bne.n	8000ba6 <decodePaket+0xca>
			{
				flags.instructions.startRequest = 1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <decodePaket+0xe4>)
 8000b50:	7b1a      	ldrb	r2, [r3, #12]
 8000b52:	2101      	movs	r1, #1
 8000b54:	430a      	orrs	r2, r1
 8000b56:	731a      	strb	r2, [r3, #12]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000b58:	e025      	b.n	8000ba6 <decodePaket+0xca>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000b5a:	1cfb      	adds	r3, r7, #3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d123      	bne.n	8000baa <decodePaket+0xce>
		{
			flags.instructions.stopRequest = 1;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <decodePaket+0xe4>)
 8000b64:	7b1a      	ldrb	r2, [r3, #12]
 8000b66:	2102      	movs	r1, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b6c:	e01d      	b.n	8000baa <decodePaket+0xce>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000b6e:	1cfb      	adds	r3, r7, #3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d11b      	bne.n	8000bae <decodePaket+0xd2>
		{
			flags.instructions.pauseRequest = 1;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <decodePaket+0xe4>)
 8000b78:	7b1a      	ldrb	r2, [r3, #12]
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b80:	e015      	b.n	8000bae <decodePaket+0xd2>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d113      	bne.n	8000bb2 <decodePaket+0xd6>
		{
			flags.instructions.calibRequest = 1;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <decodePaket+0xe4>)
 8000b8c:	7b1a      	ldrb	r2, [r3, #12]
 8000b8e:	2108      	movs	r1, #8
 8000b90:	430a      	orrs	r2, r1
 8000b92:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b94:	e00d      	b.n	8000bb2 <decodePaket+0xd6>

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <decodePaket+0xe4>)
 8000b98:	7b1a      	ldrb	r2, [r3, #12]
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000ba0:	e008      	b.n	8000bb4 <decodePaket+0xd8>
		}
	}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	e006      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e004      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	e002      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	e000      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bb2:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000630 	.word	0x20000630

08000bc4 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d033      	beq.n	8000c40 <setColour+0x7c>
 8000bd8:	dc49      	bgt.n	8000c6e <setColour+0xaa>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <setColour+0x20>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d017      	beq.n	8000c12 <setColour+0x4e>
 8000be2:	e044      	b.n	8000c6e <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <setColour+0xe0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	0019      	movs	r1, r3
 8000bee:	f002 fe80 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	0219      	lsls	r1, r3, #8
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f002 fe78 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <setColour+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f002 fe71 	bl	80038f2 <HAL_GPIO_WritePin>
		break;
 8000c10:	e044      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <setColour+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f002 fe69 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	0219      	lsls	r1, r3, #8
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fe61 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <setColour+0xe0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f002 fe5a 	bl	80038f2 <HAL_GPIO_WritePin>
		break;
 8000c3e:	e02d      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <setColour+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	f002 fe52 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	0219      	lsls	r1, r3, #8
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2201      	movs	r2, #1
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 fe4a 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <setColour+0xe0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	0019      	movs	r1, r3
 8000c68:	f002 fe43 	bl	80038f2 <HAL_GPIO_WritePin>
		break;
 8000c6c:	e016      	b.n	8000c9c <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <setColour+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	0019      	movs	r1, r3
 8000c78:	f002 fe3b 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	0219      	lsls	r1, r3, #8
 8000c80:	2390      	movs	r3, #144	; 0x90
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 fe33 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <setColour+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	0019      	movs	r1, r3
 8000c96:	f002 fe2c 	bl	80038f2 <HAL_GPIO_WritePin>
		break;
 8000c9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d104      	bne.n	8000cca <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cc2:	791a      	ldrb	r2, [r3, #4]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d104      	bne.n	8000ce0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cd8:	791a      	ldrb	r2, [r3, #4]
 8000cda:	2104      	movs	r1, #4
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	711a      	strb	r2, [r3, #4]
	}
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000630 	.word	0x20000630

08000cec <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d104      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	}
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200005e8 	.word	0x200005e8
 8000d14:	20000630 	.word	0x20000630

08000d18 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 ff86 	bl	8002c34 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000d2a:	7d1a      	ldrb	r2, [r3, #20]
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	751a      	strb	r2, [r3, #20]
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000630 	.word	0x20000630

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f001 fd3c 	bl	80027c0 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 fea8 	bl	8001a9e <createBuffer>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <main+0xec>)
 8000d52:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f000 fea2 	bl	8001a9e <createBuffer>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <main+0xf0>)
 8000d5e:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fe9a 	bl	8001a9e <createBuffer>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <main+0xf4>)
 8000d6e:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 8000d70:	23fa      	movs	r3, #250	; 0xfa
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fe92 	bl	8001a9e <createBuffer>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <main+0xf8>)
 8000d7e:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f862 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 faac 	bl	80012e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d88:	f00b f988 	bl	800c09c <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8000d8c:	f000 f8c8 	bl	8000f20 <MX_ADC_Init>
  MX_SPI1_Init();
 8000d90:	f000 f9e4 	bl	800115c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000d94:	f000 fa74 	bl	8001280 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000d98:	f000 fa26 	bl	80011e8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <main+0xfc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fda5 	bl	80038f2 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <main+0xfc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	2140      	movs	r1, #64	; 0x40
 8000dae:	0018      	movs	r0, r3
 8000db0:	f002 fd9f 	bl	80038f2 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8000db4:	f000 ffc0 	bl	8001d38 <regInit>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d004      	beq.n	8000dc6 <main+0x86>
  {
	  flags.conErr = 1;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <main+0x100>)
 8000dbe:	7e1a      	ldrb	r2, [r3, #24]
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <main+0x104>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f006 f801 	bl	8006dd0 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <main+0x100>)
 8000dd0:	7c1a      	ldrb	r2, [r3, #16]
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <main+0x100>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	0fdb      	lsrs	r3, r3, #31
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f8      	beq.n	8000dd8 <main+0x98>
	  {
		  clkHandler();
 8000de6:	f000 fb67 	bl	80014b8 <clkHandler>
		  buttonDebounce();
 8000dea:	f000 fbe3 	bl	80015b4 <buttonDebounce>
		  comHandler();
 8000dee:	f7ff fb13 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0x100>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	071b      	lsls	r3, r3, #28
 8000df8:	0fdb      	lsrs	r3, r3, #31
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00e      	beq.n	8000e1e <main+0xde>
		  {
			  flags.meas.measRequest = 1;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <main+0x100>)
 8000e02:	7d1a      	ldrb	r2, [r3, #20]
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <main+0x100>)
 8000e0c:	7d1a      	ldrb	r2, [r3, #20]
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	430a      	orrs	r2, r1
 8000e12:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <main+0x100>)
 8000e16:	7b1a      	ldrb	r2, [r3, #12]
 8000e18:	2108      	movs	r1, #8
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 8000e1e:	f000 fc47 	bl	80016b0 <UI_Handler>
		  testHandler();
 8000e22:	f001 fa39 	bl	8002298 <testHandler>
		  measHandler();
 8000e26:	f000 fd83 	bl	8001930 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000e2a:	e7d5      	b.n	8000dd8 <main+0x98>
 8000e2c:	200004a4 	.word	0x200004a4
 8000e30:	20000694 	.word	0x20000694
 8000e34:	20001134 	.word	0x20001134
 8000e38:	20000490 	.word	0x20000490
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	20000630 	.word	0x20000630
 8000e44:	200005e8 	.word	0x200005e8

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b099      	sub	sp, #100	; 0x64
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	242c      	movs	r4, #44	; 0x2c
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	2334      	movs	r3, #52	; 0x34
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f00b fecc 	bl	800cbf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5e:	231c      	movs	r3, #28
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	0018      	movs	r0, r3
 8000e64:	2310      	movs	r3, #16
 8000e66:	001a      	movs	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f00b fec4 	bl	800cbf6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6e:	003b      	movs	r3, r7
 8000e70:	0018      	movs	r0, r3
 8000e72:	231c      	movs	r3, #28
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f00b febd 	bl	800cbf6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2232      	movs	r2, #50	; 0x32
 8000e82:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2201      	movs	r2, #1
 8000e94:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2210      	movs	r2, #16
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0212      	lsls	r2, r2, #8
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0352      	lsls	r2, r2, #13
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f004 fbdd 	bl	8005680 <HAL_RCC_OscConfig>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000eca:	f000 fde3 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	211c      	movs	r1, #28
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2202      	movs	r2, #2
 8000eda:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2101      	movs	r1, #1
 8000eec:	0018      	movs	r0, r3
 8000eee:	f004 ff4d 	bl	8005d8c <HAL_RCC_ClockConfig>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ef6:	f000 fdcd 	bl	8001a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	0292      	lsls	r2, r2, #10
 8000f00:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	003b      	movs	r3, r7
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f005 f8ba 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f14:	f000 fdbe 	bl	8001a94 <Error_Handler>
  }
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b019      	add	sp, #100	; 0x64
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f00b fe61 	bl	800cbf6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f34:	4b87      	ldr	r3, [pc, #540]	; (8001154 <MX_ADC_Init+0x234>)
 8000f36:	4a88      	ldr	r2, [pc, #544]	; (8001158 <MX_ADC_Init+0x238>)
 8000f38:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f3a:	4b86      	ldr	r3, [pc, #536]	; (8001154 <MX_ADC_Init+0x234>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b84      	ldr	r3, [pc, #528]	; (8001154 <MX_ADC_Init+0x234>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <MX_ADC_Init+0x234>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f4c:	4b81      	ldr	r3, [pc, #516]	; (8001154 <MX_ADC_Init+0x234>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <MX_ADC_Init+0x234>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f58:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <MX_ADC_Init+0x234>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <MX_ADC_Init+0x234>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f64:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <MX_ADC_Init+0x234>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <MX_ADC_Init+0x234>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f70:	4b78      	ldr	r3, [pc, #480]	; (8001154 <MX_ADC_Init+0x234>)
 8000f72:	22c2      	movs	r2, #194	; 0xc2
 8000f74:	32ff      	adds	r2, #255	; 0xff
 8000f76:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b76      	ldr	r3, [pc, #472]	; (8001154 <MX_ADC_Init+0x234>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b75      	ldr	r3, [pc, #468]	; (8001154 <MX_ADC_Init+0x234>)
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b73      	ldr	r3, [pc, #460]	; (8001154 <MX_ADC_Init+0x234>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f8c:	4b71      	ldr	r3, [pc, #452]	; (8001154 <MX_ADC_Init+0x234>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 fc9e 	bl	80028d0 <HAL_ADC_Init>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 fd7c 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	0152      	lsls	r2, r2, #5
 8000fa8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2205      	movs	r2, #5
 8000fae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fb0:	1d3a      	adds	r2, r7, #4
 8000fb2:	4b68      	ldr	r3, [pc, #416]	; (8001154 <MX_ADC_Init+0x234>)
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 ff5a 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000fc0:	f000 fd68 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fca:	1d3a      	adds	r2, r7, #4
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <MX_ADC_Init+0x234>)
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 ff4d 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000fda:	f000 fd5b 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe4:	1d3a      	adds	r2, r7, #4
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <MX_ADC_Init+0x234>)
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 ff40 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000ff4:	f000 fd4e 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	4b54      	ldr	r3, [pc, #336]	; (8001154 <MX_ADC_Init+0x234>)
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f001 ff33 	bl	8002e70 <HAL_ADC_ConfigChannel>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800100e:	f000 fd41 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2204      	movs	r2, #4
 8001016:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001018:	1d3a      	adds	r2, r7, #4
 800101a:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <MX_ADC_Init+0x234>)
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f001 ff26 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001028:	f000 fd34 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2205      	movs	r2, #5
 8001030:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001032:	1d3a      	adds	r2, r7, #4
 8001034:	4b47      	ldr	r3, [pc, #284]	; (8001154 <MX_ADC_Init+0x234>)
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f001 ff19 	bl	8002e70 <HAL_ADC_ConfigChannel>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001042:	f000 fd27 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2206      	movs	r2, #6
 800104a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800104c:	1d3a      	adds	r2, r7, #4
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <MX_ADC_Init+0x234>)
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f001 ff0c 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800105c:	f000 fd1a 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2207      	movs	r2, #7
 8001064:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001066:	1d3a      	adds	r2, r7, #4
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <MX_ADC_Init+0x234>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f001 feff 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8001076:	f000 fd0d 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2208      	movs	r2, #8
 800107e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001080:	1d3a      	adds	r2, r7, #4
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_ADC_Init+0x234>)
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f001 fef2 	bl	8002e70 <HAL_ADC_ConfigChannel>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001090:	f000 fd00 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2209      	movs	r2, #9
 8001098:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC_Init+0x234>)
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 fee5 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80010aa:	f000 fcf3 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	220a      	movs	r2, #10
 80010b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b4:	1d3a      	adds	r2, r7, #4
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_ADC_Init+0x234>)
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fed8 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80010c4:	f000 fce6 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	220b      	movs	r2, #11
 80010cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_ADC_Init+0x234>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f001 fecb 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 80010de:	f000 fcd9 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	220c      	movs	r2, #12
 80010e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e8:	1d3a      	adds	r2, r7, #4
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC_Init+0x234>)
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 febe 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 80010f8:	f000 fccc 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	220d      	movs	r2, #13
 8001100:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001102:	1d3a      	adds	r2, r7, #4
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_ADC_Init+0x234>)
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f001 feb1 	bl	8002e70 <HAL_ADC_ConfigChannel>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8001112:	f000 fcbf 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	220e      	movs	r2, #14
 800111a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800111c:	1d3a      	adds	r2, r7, #4
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_ADC_Init+0x234>)
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f001 fea4 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 800112c:	f000 fcb2 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	220f      	movs	r2, #15
 8001134:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001136:	1d3a      	adds	r2, r7, #4
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_ADC_Init+0x234>)
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f001 fe97 	bl	8002e70 <HAL_ADC_ConfigChannel>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d001      	beq.n	800114a <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 8001146:	f000 fca5 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	2000064c 	.word	0x2000064c
 8001158:	40012400 	.word	0x40012400

0800115c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_SPI1_Init+0x80>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <MX_SPI1_Init+0x84>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_SPI1_Init+0x80>)
 8001168:	2282      	movs	r2, #130	; 0x82
 800116a:	0052      	lsls	r2, r2, #1
 800116c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_SPI1_Init+0x80>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_SPI1_Init+0x80>)
 8001176:	22e0      	movs	r2, #224	; 0xe0
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x80>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x80>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0x80>)
 8001192:	2238      	movs	r2, #56	; 0x38
 8001194:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x80>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x80>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x80>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x80>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI1_Init+0x80>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x80>)
 80011b6:	2208      	movs	r2, #8
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI1_Init+0x80>)
 80011bc:	0018      	movs	r0, r3
 80011be:	f005 f85f 	bl	8006280 <HAL_SPI_Init>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 fc65 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0x88>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	0018      	movs	r0, r3
 80011d2:	f002 fb8e 	bl	80038f2 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000584 	.word	0x20000584
 80011e0:	40013000 	.word	0x40013000
 80011e4:	48000400 	.word	0x48000400

080011e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	0018      	movs	r0, r3
 80011f2:	231c      	movs	r3, #28
 80011f4:	001a      	movs	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	f00b fcfd 	bl	800cbf6 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM14_Init+0x8c>)
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <MX_TIM14_Init+0x90>)
 8001200:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_TIM14_Init+0x8c>)
 8001204:	222f      	movs	r2, #47	; 0x2f
 8001206:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM14_Init+0x8c>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_TIM14_Init+0x8c>)
 8001210:	4a1a      	ldr	r2, [pc, #104]	; (800127c <MX_TIM14_Init+0x94>)
 8001212:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_TIM14_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_TIM14_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_TIM14_Init+0x8c>)
 8001222:	0018      	movs	r0, r3
 8001224:	f005 fd84 	bl	8006d30 <HAL_TIM_Base_Init>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800122c:	f000 fc32 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_TIM14_Init+0x8c>)
 8001232:	0018      	movs	r0, r3
 8001234:	f005 fe1e 	bl	8006e74 <HAL_TIM_OC_Init>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 fc2a 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	1d39      	adds	r1, r7, #4
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_TIM14_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f005 ff76 	bl	8007150 <HAL_TIM_OC_ConfigChannel>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001268:	f000 fc14 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b008      	add	sp, #32
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200005e8 	.word	0x200005e8
 8001278:	40002000 	.word	0x40002000
 800127c:	0000270f 	.word	0x0000270f

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_USART3_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 800128c:	2296      	movs	r2, #150	; 0x96
 800128e:	0212      	lsls	r2, r2, #8
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MX_USART3_UART_Init+0x58>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f006 fa47 	bl	8007758 <HAL_UART_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 fbe1 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000500 	.word	0x20000500
 80012dc:	40004800 	.word	0x40004800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	2414      	movs	r4, #20
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	0018      	movs	r0, r3
 80012ec:	2314      	movs	r3, #20
 80012ee:	001a      	movs	r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	f00b fc80 	bl	800cbf6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	03c9      	lsls	r1, r1, #15
 8001300:	430a      	orrs	r2, r1
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	03db      	lsls	r3, r3, #15
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0309      	lsls	r1, r1, #12
 800131c:	430a      	orrs	r2, r1
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	031b      	lsls	r3, r3, #12
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0289      	lsls	r1, r1, #10
 8001338:	430a      	orrs	r2, r1
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	029b      	lsls	r3, r3, #10
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	02c9      	lsls	r1, r1, #11
 8001354:	430a      	orrs	r2, r1
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	02db      	lsls	r3, r3, #11
 8001360:	4013      	ands	r3, r2
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0349      	lsls	r1, r1, #13
 8001370:	430a      	orrs	r2, r1
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MX_GPIO_Init+0x1c4>)
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	035b      	lsls	r3, r3, #13
 800137c:	4013      	ands	r3, r2
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8001382:	4949      	ldr	r1, [pc, #292]	; (80014a8 <MX_GPIO_Init+0x1c8>)
 8001384:	4b49      	ldr	r3, [pc, #292]	; (80014ac <MX_GPIO_Init+0x1cc>)
 8001386:	2200      	movs	r2, #0
 8001388:	0018      	movs	r0, r3
 800138a:	f002 fab2 	bl	80038f2 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 800138e:	239e      	movs	r3, #158	; 0x9e
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	4847      	ldr	r0, [pc, #284]	; (80014b0 <MX_GPIO_Init+0x1d0>)
 8001394:	2200      	movs	r2, #0
 8001396:	0019      	movs	r1, r3
 8001398:	f002 faab 	bl	80038f2 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	0219      	lsls	r1, r3, #8
 80013a0:	2390      	movs	r3, #144	; 0x90
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	2200      	movs	r2, #0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 faa3 	bl	80038f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <MX_GPIO_Init+0x1c8>)
 80013b0:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2201      	movs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	4a39      	ldr	r2, [pc, #228]	; (80014ac <MX_GPIO_Init+0x1cc>)
 80013c8:	0019      	movs	r1, r3
 80013ca:	0010      	movs	r0, r2
 80013cc:	f002 f8fc 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80013d0:	0021      	movs	r1, r4
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	229e      	movs	r2, #158	; 0x9e
 80013d6:	0152      	lsls	r2, r2, #5
 80013d8:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	000c      	movs	r4, r1
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2201      	movs	r2, #1
 80013e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <MX_GPIO_Init+0x1d0>)
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f002 f8e7 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	22c0      	movs	r2, #192	; 0xc0
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2288      	movs	r2, #136	; 0x88
 8001406:	0352      	lsls	r2, r2, #13
 8001408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2202      	movs	r2, #2
 800140e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	193a      	adds	r2, r7, r4
 8001412:	2390      	movs	r3, #144	; 0x90
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f002 f8d5 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	193b      	adds	r3, r7, r4
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001432:	193a      	adds	r2, r7, r4
 8001434:	2390      	movs	r3, #144	; 0x90
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f002 f8c4 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001440:	0021      	movs	r1, r4
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0212      	lsls	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	000c      	movs	r4, r1
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2201      	movs	r2, #1
 8001450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	193b      	adds	r3, r7, r4
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	193b      	adds	r3, r7, r4
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 800145e:	193a      	adds	r2, r7, r4
 8001460:	2390      	movs	r3, #144	; 0x90
 8001462:	05db      	lsls	r3, r3, #23
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f002 f8ae 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 800146c:	193b      	adds	r3, r7, r4
 800146e:	2204      	movs	r2, #4
 8001470:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	193b      	adds	r3, r7, r4
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	193b      	adds	r3, r7, r4
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 800147e:	193b      	adds	r3, r7, r4
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <MX_GPIO_Init+0x1d4>)
 8001482:	0019      	movs	r1, r3
 8001484:	0010      	movs	r0, r2
 8001486:	f002 f89f 	bl	80035c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2007      	movs	r0, #7
 8001490:	f001 ffea 	bl	8003468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001494:	2007      	movs	r0, #7
 8001496:	f001 fffc 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b00b      	add	sp, #44	; 0x2c
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	40021000 	.word	0x40021000
 80014a8:	0000f3c4 	.word	0x0000f3c4
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48000800 	.word	0x48000800
 80014b4:	48000c00 	.word	0x48000c00

080014b8 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
void clkHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <clkHandler+0xf4>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <clkHandler+0xf4>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	2102      	movs	r1, #2
 80014cc:	438a      	bics	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <clkHandler+0xf4>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	2104      	movs	r1, #4
 80014d6:	438a      	bics	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <clkHandler+0xf4>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	2108      	movs	r1, #8
 80014e0:	438a      	bics	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <clkHandler+0xf8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <clkHandler+0xf8>)
 80014ec:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <clkHandler+0xf8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2164      	movs	r1, #100	; 0x64
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe fe9f 	bl	8000238 <__aeabi_uidivmod>
 80014fa:	1e0b      	subs	r3, r1, #0
 80014fc:	d109      	bne.n	8001512 <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <clkHandler+0xf8>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <clkHandler+0xf8>)
 8001506:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <clkHandler+0xf4>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	2102      	movs	r1, #2
 800150e:	430a      	orrs	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <clkHandler+0xf4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	079b      	lsls	r3, r3, #30
 8001518:	0fdb      	lsrs	r3, r3, #31
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d042      	beq.n	80015a6 <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <clkHandler+0xf8>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	213c      	movs	r1, #60	; 0x3c
 8001526:	0018      	movs	r0, r3
 8001528:	f7fe fe86 	bl	8000238 <__aeabi_uidivmod>
 800152c:	1e0b      	subs	r3, r1, #0
 800152e:	d110      	bne.n	8001552 <clkHandler+0x9a>
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <clkHandler+0xf8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00c      	beq.n	8001552 <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <clkHandler+0xf8>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <clkHandler+0xf8>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <clkHandler+0xf8>)
 8001546:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <clkHandler+0xf4>)
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	2104      	movs	r1, #4
 800154e:	430a      	orrs	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <clkHandler+0xf4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	075b      	lsls	r3, r3, #29
 8001558:	0fdb      	lsrs	r3, r3, #31
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <clkHandler+0xf8>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	213c      	movs	r1, #60	; 0x3c
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe fe66 	bl	8000238 <__aeabi_uidivmod>
 800156c:	1e0b      	subs	r3, r1, #0
 800156e:	d11a      	bne.n	80015a6 <clkHandler+0xee>
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <clkHandler+0xf8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d016      	beq.n	80015a6 <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <clkHandler+0xf8>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <clkHandler+0xf8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <clkHandler+0xf8>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <clkHandler+0xf8>)
 800158c:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <clkHandler+0xf4>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	2108      	movs	r1, #8
 8001594:	430a      	orrs	r2, r1
 8001596:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <clkHandler+0xf8>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b16      	cmp	r3, #22
 800159e:	d902      	bls.n	80015a6 <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <clkHandler+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000630 	.word	0x20000630
 80015b0:	2000023c 	.word	0x2000023c

080015b4 <buttonDebounce>:

//_____Debounce tlačítek_____//
void buttonDebounce(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <buttonDebounce+0xf0>)
 80015ba:	791a      	ldrb	r2, [r3, #4]
 80015bc:	2102      	movs	r1, #2
 80015be:	438a      	bics	r2, r1
 80015c0:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <buttonDebounce+0xf0>)
 80015c4:	791a      	ldrb	r2, [r3, #4]
 80015c6:	2108      	movs	r1, #8
 80015c8:	438a      	bics	r2, r1
 80015ca:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tlačítka 0
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <buttonDebounce+0xf0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	07db      	lsls	r3, r3, #31
 80015d2:	0fdb      	lsrs	r3, r3, #31
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d02c      	beq.n	8001634 <buttonDebounce+0x80>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	009a      	lsls	r2, r3, #2
 80015de:	2390      	movs	r3, #144	; 0x90
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 f967 	bl	80038b8 <HAL_GPIO_ReadPin>
 80015ea:	0003      	movs	r3, r0
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <buttonDebounce+0xf4>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <buttonDebounce+0xf4>)
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <buttonDebounce+0x5c>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <buttonDebounce+0xf4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <buttonDebounce+0xf0>)
 8001608:	791a      	ldrb	r2, [r3, #4]
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <buttonDebounce+0xf4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b04      	cmp	r3, #4
 8001618:	d90c      	bls.n	8001634 <buttonDebounce+0x80>
		{
			flags.buttons.butt0_ver = 1;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <buttonDebounce+0xf0>)
 800161c:	791a      	ldrb	r2, [r3, #4]
 800161e:	2102      	movs	r1, #2
 8001620:	430a      	orrs	r2, r1
 8001622:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <buttonDebounce+0xf0>)
 8001626:	791a      	ldrb	r2, [r3, #4]
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <buttonDebounce+0xf4>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tlačítka 1
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <buttonDebounce+0xf0>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	075b      	lsls	r3, r3, #29
 800163a:	0fdb      	lsrs	r3, r3, #31
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d02c      	beq.n	800169c <buttonDebounce+0xe8>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	2390      	movs	r3, #144	; 0x90
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f002 f933 	bl	80038b8 <HAL_GPIO_ReadPin>
 8001652:	0003      	movs	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d107      	bne.n	8001668 <buttonDebounce+0xb4>
		{
			button1_Debounce++;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <buttonDebounce+0xf8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <buttonDebounce+0xf8>)
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e007      	b.n	8001678 <buttonDebounce+0xc4>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <buttonDebounce+0xf8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <buttonDebounce+0xf0>)
 8001670:	791a      	ldrb	r2, [r3, #4]
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <buttonDebounce+0xf8>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b04      	cmp	r3, #4
 8001680:	d90c      	bls.n	800169c <buttonDebounce+0xe8>
		{
			flags.buttons.butt1_ver = 1;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <buttonDebounce+0xf0>)
 8001684:	791a      	ldrb	r2, [r3, #4]
 8001686:	2108      	movs	r1, #8
 8001688:	430a      	orrs	r2, r1
 800168a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <buttonDebounce+0xf0>)
 800168e:	791a      	ldrb	r2, [r3, #4]
 8001690:	2104      	movs	r1, #4
 8001692:	438a      	bics	r2, r1
 8001694:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <buttonDebounce+0xf8>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	20000630 	.word	0x20000630
 80016a8:	2000024c 	.word	0x2000024c
 80016ac:	2000024d 	.word	0x2000024d

080016b0 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

	static uint32_t startTime;	//proměnná pro časování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <UI_Handler+0x264>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	0fdb      	lsrs	r3, r3, #31
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <UI_Handler+0x2a>
 80016c2:	4b95      	ldr	r3, [pc, #596]	; (8001918 <UI_Handler+0x268>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d007      	beq.n	80016da <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <UI_Handler+0x268>)
 80016cc:	2203      	movs	r2, #3
 80016ce:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <UI_Handler+0x26c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <UI_Handler+0x270>)
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e05e      	b.n	8001798 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 80016da:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <UI_Handler+0x264>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	071b      	lsls	r3, r3, #28
 80016e0:	0fdb      	lsrs	r3, r3, #31
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d010      	beq.n	800170a <UI_Handler+0x5a>
 80016e8:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <UI_Handler+0x268>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 80016f0:	4b89      	ldr	r3, [pc, #548]	; (8001918 <UI_Handler+0x268>)
 80016f2:	2204      	movs	r2, #4
 80016f4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <UI_Handler+0x26c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <UI_Handler+0x270>)
 80016fc:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80016fe:	4b85      	ldr	r3, [pc, #532]	; (8001914 <UI_Handler+0x264>)
 8001700:	7c1a      	ldrb	r2, [r3, #16]
 8001702:	2108      	movs	r1, #8
 8001704:	438a      	bics	r2, r1
 8001706:	741a      	strb	r2, [r3, #16]
 8001708:	e046      	b.n	8001798 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800170a:	4b82      	ldr	r3, [pc, #520]	; (8001914 <UI_Handler+0x264>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	06db      	lsls	r3, r3, #27
 8001710:	0fdb      	lsrs	r3, r3, #31
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d010      	beq.n	800173a <UI_Handler+0x8a>
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <UI_Handler+0x268>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10c      	bne.n	800173a <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001720:	4b7d      	ldr	r3, [pc, #500]	; (8001918 <UI_Handler+0x268>)
 8001722:	2205      	movs	r2, #5
 8001724:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <UI_Handler+0x26c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <UI_Handler+0x270>)
 800172c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800172e:	4b79      	ldr	r3, [pc, #484]	; (8001914 <UI_Handler+0x264>)
 8001730:	7c1a      	ldrb	r2, [r3, #16]
 8001732:	2110      	movs	r1, #16
 8001734:	438a      	bics	r2, r1
 8001736:	741a      	strb	r2, [r3, #16]
 8001738:	e02e      	b.n	8001798 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 800173a:	4b76      	ldr	r3, [pc, #472]	; (8001914 <UI_Handler+0x264>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	079b      	lsls	r3, r3, #30
 8001740:	0fdb      	lsrs	r3, r3, #31
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d010      	beq.n	800176a <UI_Handler+0xba>
 8001748:	4b73      	ldr	r3, [pc, #460]	; (8001918 <UI_Handler+0x268>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001750:	4b71      	ldr	r3, [pc, #452]	; (8001918 <UI_Handler+0x268>)
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001756:	4b71      	ldr	r3, [pc, #452]	; (800191c <UI_Handler+0x26c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b71      	ldr	r3, [pc, #452]	; (8001920 <UI_Handler+0x270>)
 800175c:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <UI_Handler+0x264>)
 8001760:	7c1a      	ldrb	r2, [r3, #16]
 8001762:	2102      	movs	r1, #2
 8001764:	438a      	bics	r2, r1
 8001766:	741a      	strb	r2, [r3, #16]
 8001768:	e016      	b.n	8001798 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <UI_Handler+0x264>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	07db      	lsls	r3, r3, #31
 8001770:	0fdb      	lsrs	r3, r3, #31
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00f      	beq.n	8001798 <UI_Handler+0xe8>
 8001778:	4b67      	ldr	r3, [pc, #412]	; (8001918 <UI_Handler+0x268>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10b      	bne.n	8001798 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001780:	4b65      	ldr	r3, [pc, #404]	; (8001918 <UI_Handler+0x268>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <UI_Handler+0x26c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <UI_Handler+0x270>)
 800178c:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <UI_Handler+0x264>)
 8001790:	7c1a      	ldrb	r2, [r3, #16]
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001798:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <UI_Handler+0x268>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d900      	bls.n	80017a2 <UI_Handler+0xf2>
 80017a0:	e0a0      	b.n	80018e4 <UI_Handler+0x234>
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <UI_Handler+0x274>)
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	485d      	ldr	r0, [pc, #372]	; (8001928 <UI_Handler+0x278>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	0019      	movs	r1, r3
 80017b6:	f002 f89c 	bl	80038f2 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <UI_Handler+0x26c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <UI_Handler+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b31      	cmp	r3, #49	; 0x31
 80017c6:	d800      	bhi.n	80017ca <UI_Handler+0x11a>
 80017c8:	e097      	b.n	80018fa <UI_Handler+0x24a>
		{
			UI_State = OFF;
 80017ca:	4b53      	ldr	r3, [pc, #332]	; (8001918 <UI_Handler+0x268>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	4854      	ldr	r0, [pc, #336]	; (8001928 <UI_Handler+0x278>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	0019      	movs	r1, r3
 80017da:	f002 f88a 	bl	80038f2 <HAL_GPIO_WritePin>
		}
		break;
 80017de:	e08c      	b.n	80018fa <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	4850      	ldr	r0, [pc, #320]	; (8001928 <UI_Handler+0x278>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	0019      	movs	r1, r3
 80017ea:	f002 f882 	bl	80038f2 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <UI_Handler+0x26c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <UI_Handler+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b63      	cmp	r3, #99	; 0x63
 80017fa:	d800      	bhi.n	80017fe <UI_Handler+0x14e>
 80017fc:	e07f      	b.n	80018fe <UI_Handler+0x24e>
		{
			UI_State = OFF;
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <UI_Handler+0x268>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4847      	ldr	r0, [pc, #284]	; (8001928 <UI_Handler+0x278>)
 800180a:	2200      	movs	r2, #0
 800180c:	0019      	movs	r1, r3
 800180e:	f002 f870 	bl	80038f2 <HAL_GPIO_WritePin>
		}
		break;
 8001812:	e074      	b.n	80018fe <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <UI_Handler+0x264>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	075b      	lsls	r3, r3, #29
 800181a:	0fdb      	lsrs	r3, r3, #31
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <UI_Handler+0x178>
			UI_State = OFF;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <UI_Handler+0x268>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <UI_Handler+0x26c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <UI_Handler+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2132      	movs	r1, #50	; 0x32
 8001834:	0018      	movs	r0, r3
 8001836:	f7fe fcff 	bl	8000238 <__aeabi_uidivmod>
 800183a:	1e0b      	subs	r3, r1, #0
 800183c:	d161      	bne.n	8001902 <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	4a39      	ldr	r2, [pc, #228]	; (8001928 <UI_Handler+0x278>)
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f002 f870 	bl	800392c <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	021a      	lsls	r2, r3, #8
 8001850:	2390      	movs	r3, #144	; 0x90
 8001852:	05db      	lsls	r3, r3, #23
 8001854:	0011      	movs	r1, r2
 8001856:	0018      	movs	r0, r3
 8001858:	f002 f868 	bl	800392c <HAL_GPIO_TogglePin>
		}
		break;
 800185c:	e051      	b.n	8001902 <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <UI_Handler+0x26c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <UI_Handler+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2123      	movs	r1, #35	; 0x23
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe fce4 	bl	8000238 <__aeabi_uidivmod>
 8001870:	1e0b      	subs	r3, r1, #0
 8001872:	d106      	bne.n	8001882 <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <UI_Handler+0x278>)
 800187a:	0019      	movs	r1, r3
 800187c:	0010      	movs	r0, r2
 800187e:	f002 f855 	bl	800392c <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukonči
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <UI_Handler+0x26c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <UI_Handler+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2bd0      	cmp	r3, #208	; 0xd0
 800188e:	d93a      	bls.n	8001906 <UI_Handler+0x256>
			UI_State = OFF;
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <UI_Handler+0x268>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
		break;
 8001896:	e036      	b.n	8001906 <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001898:	4b20      	ldr	r3, [pc, #128]	; (800191c <UI_Handler+0x26c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <UI_Handler+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2132      	movs	r1, #50	; 0x32
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7fe fcc7 	bl	8000238 <__aeabi_uidivmod>
 80018aa:	1e0b      	subs	r3, r1, #0
 80018ac:	d10d      	bne.n	80018ca <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	015b      	lsls	r3, r3, #5
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <UI_Handler+0x278>)
 80018b4:	0019      	movs	r1, r3
 80018b6:	0010      	movs	r0, r2
 80018b8:	f002 f838 	bl	800392c <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <UI_Handler+0x27c>)
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f002 f831 	bl	800392c <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukonči
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <UI_Handler+0x26c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <UI_Handler+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	2395      	movs	r3, #149	; 0x95
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	429a      	cmp	r2, r3
 80018da:	d916      	bls.n	800190a <UI_Handler+0x25a>
			UI_State = OFF;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <UI_Handler+0x268>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
		break;
 80018e2:	e012      	b.n	800190a <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	015b      	lsls	r3, r3, #5
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <UI_Handler+0x278>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	0019      	movs	r1, r3
 80018ee:	f002 f800 	bl	80038f2 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f7ff f966 	bl	8000bc4 <setColour>
#endif
		break;
 80018f8:	e008      	b.n	800190c <UI_Handler+0x25c>
		break;
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	e006      	b.n	800190c <UI_Handler+0x25c>
		break;
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	e004      	b.n	800190c <UI_Handler+0x25c>
		break;
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	e002      	b.n	800190c <UI_Handler+0x25c>
		break;
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	e000      	b.n	800190c <UI_Handler+0x25c>
		break;
 800190a:	46c0      	nop			; (mov r8, r8)

	}
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	20000630 	.word	0x20000630
 8001918:	2000024e 	.word	0x2000024e
 800191c:	2000023c 	.word	0x2000023c
 8001920:	20000250 	.word	0x20000250
 8001924:	0800d558 	.word	0x0800d558
 8001928:	48000800 	.word	0x48000800
 800192c:	48000400 	.word	0x48000400

08001930 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 8001934:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <measHandler+0x14c>)
 8001936:	7d1a      	ldrb	r2, [r3, #20]
 8001938:	2102      	movs	r1, #2
 800193a:	438a      	bics	r2, r1
 800193c:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <measHandler+0x14c>)
 8001940:	7d1a      	ldrb	r2, [r3, #20]
 8001942:	2110      	movs	r1, #16
 8001944:	438a      	bics	r2, r1
 8001946:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <measHandler+0x14c>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	07db      	lsls	r3, r3, #31
 800194e:	0fdb      	lsrs	r3, r3, #31
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d045      	beq.n	80019e2 <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <measHandler+0x14c>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	071b      	lsls	r3, r3, #28
 800195c:	0fdb      	lsrs	r3, r3, #31
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d134      	bne.n	80019ce <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <measHandler+0x14c>)
 8001966:	7d1a      	ldrb	r2, [r3, #20]
 8001968:	2108      	movs	r1, #8
 800196a:	430a      	orrs	r2, r1
 800196c:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 800196e:	f000 fc89 	bl	8002284 <currentPhase>
 8001972:	0003      	movs	r3, r0
 8001974:	2b05      	cmp	r3, #5
 8001976:	d004      	beq.n	8001982 <measHandler+0x52>
 8001978:	f000 fc84 	bl	8002284 <currentPhase>
 800197c:	0003      	movs	r3, r0
 800197e:	2b06      	cmp	r3, #6
 8001980:	d110      	bne.n	80019a4 <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <measHandler+0x14c>)
 8001984:	7d1a      	ldrb	r2, [r3, #20]
 8001986:	2120      	movs	r1, #32
 8001988:	430a      	orrs	r2, r1
 800198a:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 800198c:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <measHandler+0x150>)
 800198e:	220d      	movs	r2, #13
 8001990:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <measHandler+0x150>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	1e59      	subs	r1, r3, #1
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <measHandler+0x154>)
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <measHandler+0x158>)
 800199c:	0089      	lsls	r1, r1, #2
 800199e:	588a      	ldr	r2, [r1, r2]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
 80019a2:	e00f      	b.n	80019c4 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <measHandler+0x14c>)
 80019a6:	7d1a      	ldrb	r2, [r3, #20]
 80019a8:	2120      	movs	r1, #32
 80019aa:	438a      	bics	r2, r1
 80019ac:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <measHandler+0x150>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <measHandler+0x150>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	1e59      	subs	r1, r3, #1
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <measHandler+0x154>)
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <measHandler+0x158>)
 80019be:	0089      	lsls	r1, r1, #2
 80019c0:	588a      	ldr	r2, [r1, r2]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <measHandler+0x15c>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 f8c2 	bl	8002b50 <HAL_ADC_Start_IT>
 80019cc:	e004      	b.n	80019d8 <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <measHandler+0x14c>)
 80019d0:	7d1a      	ldrb	r2, [r3, #20]
 80019d2:	2110      	movs	r1, #16
 80019d4:	430a      	orrs	r2, r1
 80019d6:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <measHandler+0x14c>)
 80019da:	7d1a      	ldrb	r2, [r3, #20]
 80019dc:	2101      	movs	r1, #1
 80019de:	438a      	bics	r2, r1
 80019e0:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <measHandler+0x150>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d045      	beq.n	8001a76 <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <measHandler+0x14c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	075b      	lsls	r3, r3, #29
 80019f0:	0fdb      	lsrs	r3, r3, #31
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d03e      	beq.n	8001a76 <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <measHandler+0x14c>)
 80019fa:	7d1a      	ldrb	r2, [r3, #20]
 80019fc:	2104      	movs	r1, #4
 80019fe:	438a      	bics	r2, r1
 8001a00:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <measHandler+0x150>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0d      	cmp	r3, #13
 8001a08:	d118      	bne.n	8001a3c <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <measHandler+0x150>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	1e5c      	subs	r4, r3, #1
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <measHandler+0x15c>)
 8001a12:	0018      	movs	r0, r3
 8001a14:	f001 f958 	bl	8002cc8 <HAL_ADC_GetValue>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <measHandler+0x160>)
 8001a1c:	00a2      	lsls	r2, r4, #2
 8001a1e:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <measHandler+0x14c>)
 8001a22:	7d1a      	ldrb	r2, [r3, #20]
 8001a24:	2102      	movs	r1, #2
 8001a26:	430a      	orrs	r2, r1
 8001a28:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <measHandler+0x14c>)
 8001a2c:	7d1a      	ldrb	r2, [r3, #20]
 8001a2e:	2108      	movs	r1, #8
 8001a30:	438a      	bics	r2, r1
 8001a32:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <measHandler+0x150>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001a3a:	e01c      	b.n	8001a76 <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <measHandler+0x150>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	1e5c      	subs	r4, r3, #1
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <measHandler+0x15c>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 f93f 	bl	8002cc8 <HAL_ADC_GetValue>
 8001a4a:	0001      	movs	r1, r0
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <measHandler+0x160>)
 8001a4e:	00a2      	lsls	r2, r4, #2
 8001a50:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <measHandler+0x150>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3302      	adds	r3, #2
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <measHandler+0x150>)
 8001a5c:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <measHandler+0x150>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	1e59      	subs	r1, r3, #1
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <measHandler+0x154>)
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <measHandler+0x158>)
 8001a68:	0089      	lsls	r1, r1, #2
 8001a6a:	588a      	ldr	r2, [r1, r2]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <measHandler+0x15c>)
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 f86d 	bl	8002b50 <HAL_ADC_Start_IT>
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	20000630 	.word	0x20000630
 8001a80:	20000254 	.word	0x20000254
 8001a84:	40012400 	.word	0x40012400
 8001a88:	0800d518 	.word	0x0800d518
 8001a8c:	2000064c 	.word	0x2000064c
 8001a90:	200001fc 	.word	0x200001fc

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>

08001a9e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001aa6:	2018      	movs	r0, #24
 8001aa8:	f00b f888 	bl	800cbbc <malloc>
 8001aac:	0003      	movs	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <createBuffer+0x1c>
	{
		return NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e022      	b.n	8001b00 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f00b f87d 	bl	800cbbc <malloc>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <createBuffer+0x40>
	{
		free(buffer);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f00b f87b 	bl	800cbd0 <free>
		return NULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e010      	b.n	8001b00 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1e5a      	subs	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b004      	add	sp, #16
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <clearBuffer>:
	free(buffer);
}

//_____Uvede buffer do výchzího stavu_____//
void clearBuffer(RING_BUFFER* buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	buffer->filled = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
	buffer->last = buffer->bufferSize-1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	751a      	strb	r2, [r3, #20]
}
 8001b2c:	46c0      	nop			; (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	000a      	movs	r2, r1
 8001b3e:	1cfb      	adds	r3, r7, #3
 8001b40:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7d1b      	ldrb	r3, [r3, #20]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d101      	bne.n	8001b4e <push+0x1a>
		return BUFFER_FULL;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e025      	b.n	8001b9a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0019      	movs	r1, r3
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	f7fe fc56 	bl	800040c <__aeabi_idivmod>
 8001b60:	000b      	movs	r3, r1
 8001b62:	001a      	movs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	18d3      	adds	r3, r2, r3
 8001b7c:	1cfa      	adds	r2, r7, #3
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	db01      	blt.n	8001b92 <push+0x5e>
 8001b8e:	2202      	movs	r2, #2
 8001b90:	e000      	b.n	8001b94 <push+0x60>
 8001b92:	2200      	movs	r2, #0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	18cb      	adds	r3, r1, r3
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	da01      	bge.n	8001bc2 <pushStr+0x20>
		return BUFFER_FULL;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e013      	b.n	8001bea <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e00b      	b.n	8001be0 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff ffad 	bl	8001b34 <push>
	for(int i = 0; i < len; i++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbef      	blt.n	8001bc8 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b006      	add	sp, #24
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7d1b      	ldrb	r3, [r3, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <pop+0x16>
		return BUFFER_EMPTY;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e023      	b.n	8001c50 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	18d3      	adds	r3, r2, r3
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	0019      	movs	r1, r3
 8001c24:	0010      	movs	r0, r2
 8001c26:	f7fe fbf1 	bl	800040c <__aeabi_idivmod>
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	4313      	orrs	r3, r2
 8001c44:	0fdb      	lsrs	r3, r3, #31
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	001a      	movs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <at>:

//_____Přečte a zachová hodnotu na dané pozici od prvního uloženého znaku_____//
BUFFER_STATE at(RING_BUFFER* buffer, int index, char* character)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	if(buffer->status == BUFFER_EMPTY)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7d1b      	ldrb	r3, [r3, #20]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <at+0x18>
		return BUFFER_EMPTY;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e01a      	b.n	8001ca6 <at+0x4e>

	 if((index + 1) > buffer->filled)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	db01      	blt.n	8001c7e <at+0x26>
		 return BUFFER_ERR;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e013      	b.n	8001ca6 <at+0x4e>

	 int tmp = (buffer->first + index) % (buffer->bufferSize);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	18d2      	adds	r2, r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	f7fe fbbd 	bl	800040c <__aeabi_idivmod>
 8001c92:	000b      	movs	r3, r1
 8001c94:	617b      	str	r3, [r7, #20]
	 *character = buffer->buffer[tmp];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	701a      	strb	r2, [r3, #0]

	 return BUFFER_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b006      	add	sp, #24
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <getCount+0x7c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	222a      	movs	r2, #42	; 0x2a
 8001cc0:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001cc8:	1dba      	adds	r2, r7, #6
 8001cca:	1df9      	adds	r1, r7, #7
 8001ccc:	4818      	ldr	r0, [pc, #96]	; (8001d30 <getCount+0x80>)
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f004 fce4 	bl	80066a0 <HAL_SPI_TransmitReceive>
 8001cd8:	1e03      	subs	r3, r0, #0
 8001cda:	d001      	beq.n	8001ce0 <getCount+0x30>
			return 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e021      	b.n	8001d24 <getCount+0x74>
		regCount++;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <getCount+0x7c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <getCount+0x7c>)
 8001cea:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f000 fdcb 	bl	8002888 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <getCount+0x7c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b63      	cmp	r3, #99	; 0x63
 8001cf8:	d906      	bls.n	8001d08 <getCount+0x58>
		{
			flags.conErr = 1;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <getCount+0x84>)
 8001cfc:	7e1a      	ldrb	r2, [r3, #24]
 8001cfe:	2104      	movs	r1, #4
 8001d00:	430a      	orrs	r2, r1
 8001d02:	761a      	strb	r2, [r3, #24]
			return 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e00d      	b.n	8001d24 <getCount+0x74>
		}
	}
	while(answer != question);
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1d3      	bne.n	8001cbc <getCount+0xc>

	regCount--;
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <getCount+0x7c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <getCount+0x7c>)
 8001d1e:	701a      	strb	r2, [r3, #0]

	return regCount;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <getCount+0x7c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000691 	.word	0x20000691
 8001d30:	20000584 	.word	0x20000584
 8001d34:	20000630 	.word	0x20000630

08001d38 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	019b      	lsls	r3, r3, #6
 8001d42:	4827      	ldr	r0, [pc, #156]	; (8001de0 <regInit+0xa8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	0019      	movs	r1, r3
 8001d48:	f001 fdd3 	bl	80038f2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001d4c:	2005      	movs	r0, #5
 8001d4e:	f000 fd9b 	bl	8002888 <HAL_Delay>
	REG_CLR_INACTIVE;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	4822      	ldr	r0, [pc, #136]	; (8001de0 <regInit+0xa8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	f001 fdc9 	bl	80038f2 <HAL_GPIO_WritePin>

	REG_DISABLE;
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	481e      	ldr	r0, [pc, #120]	; (8001de0 <regInit+0xa8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	0019      	movs	r1, r3
 8001d6a:	f001 fdc2 	bl	80038f2 <HAL_GPIO_WritePin>

		if(getCount() == 0)
 8001d6e:	f7ff ff9f 	bl	8001cb0 <getCount>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d101      	bne.n	8001d7a <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 8001d76:	2301      	movs	r3, #1
 8001d78:	e02e      	b.n	8001dd8 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <regInit+0xac>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f00a ff1c 	bl	800cbbc <malloc>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <regInit+0xb0>)
 8001d8a:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <regInit+0xb0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <regInit+0x66>
		{
			regState = REG_ERR;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <regInit+0xb4>)
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e01c      	b.n	8001dd8 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	e008      	b.n	8001db6 <regInit+0x7e>
		{
			regValues[i] = 0;
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <regInit+0xb0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <regInit+0xac>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	001a      	movs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	dbf0      	blt.n	8001da4 <regInit+0x6c>
		}

		sendData();
 8001dc2:	f000 f815 	bl	8001df0 <sendData>

	REG_ENABLE;
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <regInit+0xa8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	0019      	movs	r1, r3
 8001dd0:	f001 fd8f 	bl	80038f2 <HAL_GPIO_WritePin>

	return regState;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <regInit+0xb4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	48000400 	.word	0x48000400
 8001de4:	20000691 	.word	0x20000691
 8001de8:	2000068c 	.word	0x2000068c
 8001dec:	20000690 	.word	0x20000690

08001df0 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <sendData+0x64>)
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <sendData+0x68>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <sendData+0x6c>)
 8001e00:	2364      	movs	r3, #100	; 0x64
 8001e02:	f004 faf5 	bl	80063f0 <HAL_SPI_Transmit>
 8001e06:	1e03      	subs	r3, r0, #0
 8001e08:	d114      	bne.n	8001e34 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	01db      	lsls	r3, r3, #7
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <sendData+0x70>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	0019      	movs	r1, r3
 8001e14:	f001 fd6d 	bl	80038f2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f000 fd35 	bl	8002888 <HAL_Delay>
		REG_RCLK_LOW;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	01db      	lsls	r3, r3, #7
 8001e22:	480f      	ldr	r0, [pc, #60]	; (8001e60 <sendData+0x70>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	0019      	movs	r1, r3
 8001e28:	f001 fd63 	bl	80038f2 <HAL_GPIO_WritePin>

		regState = REG_OK;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <sendData+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e009      	b.n	8001e48 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <sendData+0x74>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	4808      	ldr	r0, [pc, #32]	; (8001e60 <sendData+0x70>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	0019      	movs	r1, r3
 8001e44:	f001 fd55 	bl	80038f2 <HAL_GPIO_WritePin>
	}

	return regState;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <sendData+0x74>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	2000068c 	.word	0x2000068c
 8001e58:	20000691 	.word	0x20000691
 8001e5c:	20000584 	.word	0x20000584
 8001e60:	48000400 	.word	0x48000400
 8001e64:	20000690 	.word	0x20000690

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_MspInit+0x44>)
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_MspInit+0x44>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_MspInit+0x44>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x44>)
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_MspInit+0x44>)
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	0549      	lsls	r1, r1, #21
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_MspInit+0x44>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	055b      	lsls	r3, r3, #21
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b08d      	sub	sp, #52	; 0x34
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	241c      	movs	r4, #28
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f00a fe97 	bl	800cbf6 <memset>
  if(hadc->Instance==ADC1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_ADC_MspInit+0x108>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d16d      	bne.n	8001fae <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0089      	lsls	r1, r1, #2
 8001edc:	430a      	orrs	r2, r1
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0309      	lsls	r1, r1, #12
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	615a      	str	r2, [r3, #20]
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	031b      	lsls	r3, r3, #12
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0289      	lsls	r1, r1, #10
 8001f14:	430a      	orrs	r2, r1
 8001f16:	615a      	str	r2, [r3, #20]
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	02c9      	lsls	r1, r1, #11
 8001f30:	430a      	orrs	r2, r1
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_ADC_MspInit+0x10c>)
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	02db      	lsls	r3, r3, #11
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f48:	193b      	adds	r3, r7, r4
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	193b      	adds	r3, r7, r4
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_ADC_MspInit+0x110>)
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	f001 fb34 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f60:	193b      	adds	r3, r7, r4
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f66:	193b      	adds	r3, r7, r4
 8001f68:	2203      	movs	r2, #3
 8001f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	193a      	adds	r2, r7, r4
 8001f74:	2390      	movs	r3, #144	; 0x90
 8001f76:	05db      	lsls	r3, r3, #23
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f001 fb24 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	2203      	movs	r2, #3
 8001f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	2203      	movs	r2, #3
 8001f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_ADC_MspInit+0x114>)
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f001 fb15 	bl	80035c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	200c      	movs	r0, #12
 8001fa4:	f001 fa60 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001fa8:	200c      	movs	r0, #12
 8001faa:	f001 fa72 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b00d      	add	sp, #52	; 0x34
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40012400 	.word	0x40012400
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	2414      	movs	r4, #20
 8001fd2:	193b      	adds	r3, r7, r4
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	2314      	movs	r3, #20
 8001fd8:	001a      	movs	r2, r3
 8001fda:	2100      	movs	r1, #0
 8001fdc:	f00a fe0b 	bl	800cbf6 <memset>
  if(hspi->Instance==SPI1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_SPI_MspInit+0x90>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d131      	bne.n	800204e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_SPI_MspInit+0x94>)
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_SPI_MspInit+0x94>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0149      	lsls	r1, r1, #5
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_SPI_MspInit+0x94>)
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	015b      	lsls	r3, r3, #5
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_SPI_MspInit+0x94>)
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_SPI_MspInit+0x94>)
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	02c9      	lsls	r1, r1, #11
 8002010:	430a      	orrs	r2, r1
 8002012:	615a      	str	r2, [r3, #20]
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_SPI_MspInit+0x94>)
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	02db      	lsls	r3, r3, #11
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002022:	0021      	movs	r1, r4
 8002024:	187b      	adds	r3, r7, r1
 8002026:	2238      	movs	r2, #56	; 0x38
 8002028:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	187b      	adds	r3, r7, r1
 800202c:	2202      	movs	r2, #2
 800202e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2203      	movs	r2, #3
 800203a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	187b      	adds	r3, r7, r1
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_SPI_MspInit+0x98>)
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f001 fabd 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b00b      	add	sp, #44	; 0x2c
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40013000 	.word	0x40013000
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_TIM_Base_MspInit+0x48>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d115      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0049      	lsls	r1, r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2013      	movs	r0, #19
 8002098:	f001 f9e6 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800209c:	2013      	movs	r0, #19
 800209e:	f001 f9f8 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40002000 	.word	0x40002000
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	2414      	movs	r4, #20
 80020be:	193b      	adds	r3, r7, r4
 80020c0:	0018      	movs	r0, r3
 80020c2:	2314      	movs	r3, #20
 80020c4:	001a      	movs	r2, r3
 80020c6:	2100      	movs	r1, #0
 80020c8:	f00a fd95 	bl	800cbf6 <memset>
  if(huart->Instance==USART3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_UART_MspInit+0xa0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d13a      	bne.n	800214c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_UART_MspInit+0xa4>)
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_UART_MspInit+0xa4>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	02c9      	lsls	r1, r1, #11
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_UART_MspInit+0xa4>)
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	02db      	lsls	r3, r3, #11
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_UART_MspInit+0xa4>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_UART_MspInit+0xa4>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0309      	lsls	r1, r1, #12
 80020fc:	430a      	orrs	r2, r1
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_UART_MspInit+0xa4>)
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	031b      	lsls	r3, r3, #12
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800210e:	193b      	adds	r3, r7, r4
 8002110:	22c0      	movs	r2, #192	; 0xc0
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	0021      	movs	r1, r4
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2202      	movs	r2, #2
 800211c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2203      	movs	r2, #3
 8002128:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2201      	movs	r2, #1
 800212e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	187b      	adds	r3, r7, r1
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_UART_MspInit+0xa8>)
 8002134:	0019      	movs	r1, r3
 8002136:	0010      	movs	r0, r2
 8002138:	f001 fa46 	bl	80035c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	201d      	movs	r0, #29
 8002142:	f001 f991 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002146:	201d      	movs	r0, #29
 8002148:	f001 f9a3 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b00b      	add	sp, #44	; 0x2c
 8002152:	bd90      	pop	{r4, r7, pc}
 8002154:	40004800 	.word	0x40004800
 8002158:	40021000 	.word	0x40021000
 800215c:	48000800 	.word	0x48000800

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <NMI_Handler+0x4>

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f000 fb64 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	0018      	movs	r0, r3
 8002198:	f001 fbe4 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	0018      	movs	r0, r3
 80021a2:	f001 fbdf 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <ADC1_COMP_IRQHandler+0x14>)
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fd94 	bl	8002ce0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	2000064c 	.word	0x2000064c

080021c4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <TIM14_IRQHandler+0x14>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f004 feaa 	bl	8006f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	200005e8 	.word	0x200005e8

080021dc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <USART3_4_IRQHandler+0x14>)
 80021e2:	0018      	movs	r0, r3
 80021e4:	f005 fb0c 	bl	8007800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	20000500 	.word	0x20000500

080021f4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <USB_IRQHandler+0x14>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f001 fd04 	bl	8003c08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	20001338 	.word	0x20001338

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f00a fc94 	bl	800cb68 <__errno>
 8002240:	0003      	movs	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	2301      	movs	r3, #1
 8002248:	425b      	negs	r3, r3
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	18d2      	adds	r2, r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b006      	add	sp, #24
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20004000 	.word	0x20004000
 800226c:	00000400 	.word	0x00000400
 8002270:	20000258 	.word	0x20000258
 8002274:	20001640 	.word	0x20001640

08002278 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	return testPhase;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <currentPhase+0x10>)
 800228a:	781b      	ldrb	r3, [r3, #0]
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	2000025c 	.word	0x2000025c

08002298 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b092      	sub	sp, #72	; 0x48
 800229c:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 800229e:	4bdb      	ldr	r3, [pc, #876]	; (800260c <testHandler+0x374>)
 80022a0:	7e1a      	ldrb	r2, [r3, #24]
 80022a2:	2102      	movs	r1, #2
 80022a4:	438a      	bics	r2, r1
 80022a6:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 80022a8:	4bd8      	ldr	r3, [pc, #864]	; (800260c <testHandler+0x374>)
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4013      	ands	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d034      	beq.n	8002320 <testHandler+0x88>
	{
		if(testPhase == WAITING)
 80022b6:	4bd6      	ldr	r3, [pc, #856]	; (8002610 <testHandler+0x378>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d126      	bne.n	800230c <testHandler+0x74>
		{
			if(flags.conErr)
 80022be:	4bd3      	ldr	r3, [pc, #844]	; (800260c <testHandler+0x374>)
 80022c0:	7e1b      	ldrb	r3, [r3, #24]
 80022c2:	2204      	movs	r2, #4
 80022c4:	4013      	ands	r3, r2
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01c      	beq.n	8002306 <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 80022cc:	211c      	movs	r1, #28
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	4ad0      	ldr	r2, [pc, #832]	; (8002614 <testHandler+0x37c>)
 80022d2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80022d4:	c331      	stmia	r3!, {r0, r4, r5}
 80022d6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80022d8:	c331      	stmia	r3!, {r0, r4, r5}
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 80022de:	4bce      	ldr	r3, [pc, #824]	; (8002618 <testHandler+0x380>)
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	000d      	movs	r5, r1
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7fd ff0e 	bl	8000108 <strlen>
 80022ec:	0003      	movs	r3, r0
 80022ee:	001a      	movs	r2, r3
 80022f0:	197b      	adds	r3, r7, r5
 80022f2:	0019      	movs	r1, r3
 80022f4:	0020      	movs	r0, r4
 80022f6:	f7ff fc54 	bl	8001ba2 <pushStr>
				flags.instructions.startRequest = 0;
 80022fa:	4bc4      	ldr	r3, [pc, #784]	; (800260c <testHandler+0x374>)
 80022fc:	7b1a      	ldrb	r2, [r3, #12]
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	731a      	strb	r2, [r3, #12]
 8002304:	e00c      	b.n	8002320 <testHandler+0x88>
			}
			else
			{
				startTest();
 8002306:	f000 f999 	bl	800263c <startTest>
 800230a:	e009      	b.n	8002320 <testHandler+0x88>
			}
		}
		else
		{
			flags.startConflict = 1;
 800230c:	4bbf      	ldr	r3, [pc, #764]	; (800260c <testHandler+0x374>)
 800230e:	7e1a      	ldrb	r2, [r3, #24]
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002316:	4bbd      	ldr	r3, [pc, #756]	; (800260c <testHandler+0x374>)
 8002318:	7b1a      	ldrb	r2, [r3, #12]
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002320:	4bba      	ldr	r3, [pc, #744]	; (800260c <testHandler+0x374>)
 8002322:	7b1b      	ldrb	r3, [r3, #12]
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <testHandler+0x9a>
	{
		stopTest();
 800232e:	f000 f9e7 	bl	8002700 <stopTest>
	}

	switch(testPhase)
 8002332:	4bb7      	ldr	r3, [pc, #732]	; (8002610 <testHandler+0x378>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d900      	bls.n	800233c <testHandler+0xa4>
 800233a:	e17a      	b.n	8002632 <testHandler+0x39a>
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	4bb7      	ldr	r3, [pc, #732]	; (800261c <testHandler+0x384>)
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002346:	4bb1      	ldr	r3, [pc, #708]	; (800260c <testHandler+0x374>)
 8002348:	7e1a      	ldrb	r2, [r3, #24]
 800234a:	2102      	movs	r1, #2
 800234c:	438a      	bics	r2, r1
 800234e:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002350:	e16f      	b.n	8002632 <testHandler+0x39a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002352:	4bae      	ldr	r3, [pc, #696]	; (800260c <testHandler+0x374>)
 8002354:	7d1b      	ldrb	r3, [r3, #20]
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <testHandler+0xd6>
		{
			testPhase++;
 8002360:	4bab      	ldr	r3, [pc, #684]	; (8002610 <testHandler+0x378>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4ba9      	ldr	r3, [pc, #676]	; (8002610 <testHandler+0x378>)
 800236a:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 800236c:	e146      	b.n	80025fc <testHandler+0x364>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 800236e:	4bac      	ldr	r3, [pc, #688]	; (8002620 <testHandler+0x388>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d000      	beq.n	8002378 <testHandler+0xe0>
 8002376:	e141      	b.n	80025fc <testHandler+0x364>
			flags.meas.measRequest = 1;
 8002378:	4ba4      	ldr	r3, [pc, #656]	; (800260c <testHandler+0x374>)
 800237a:	7d1a      	ldrb	r2, [r3, #20]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	751a      	strb	r2, [r3, #20]
		break;
 8002382:	e13b      	b.n	80025fc <testHandler+0x364>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002384:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <testHandler+0x38c>)
 8002386:	2201      	movs	r2, #1
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fab1 	bl	80038f2 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002390:	4ba4      	ldr	r3, [pc, #656]	; (8002624 <testHandler+0x38c>)
 8002392:	2201      	movs	r2, #1
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	0018      	movs	r0, r3
 8002398:	f001 faab 	bl	80038f2 <HAL_GPIO_WritePin>

		testPhase++;
 800239c:	4b9c      	ldr	r3, [pc, #624]	; (8002610 <testHandler+0x378>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b9a      	ldr	r3, [pc, #616]	; (8002610 <testHandler+0x378>)
 80023a6:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 80023a8:	4b98      	ldr	r3, [pc, #608]	; (800260c <testHandler+0x374>)
 80023aa:	7e1a      	ldrb	r2, [r3, #24]
 80023ac:	2102      	movs	r1, #2
 80023ae:	430a      	orrs	r2, r1
 80023b0:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 80023b2:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <testHandler+0x390>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	4b9b      	ldr	r3, [pc, #620]	; (8002628 <testHandler+0x390>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2120      	movs	r1, #32
 80023be:	430a      	orrs	r2, r1
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
		sendData();
 80023c4:	f7ff fd14 	bl	8001df0 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 80023c8:	2301      	movs	r3, #1
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023cc:	e007      	b.n	80023de <testHandler+0x146>
		{
			sysTime[i] = 0;
 80023ce:	4b94      	ldr	r3, [pc, #592]	; (8002620 <testHandler+0x388>)
 80023d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	2100      	movs	r1, #0
 80023d6:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 80023d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023da:	3301      	adds	r3, #1
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	ddf4      	ble.n	80023ce <testHandler+0x136>
		}
		break;
 80023e4:	e125      	b.n	8002632 <testHandler+0x39a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 80023e6:	4b89      	ldr	r3, [pc, #548]	; (800260c <testHandler+0x374>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2202      	movs	r2, #2
 80023ec:	4013      	ands	r3, r2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d026      	beq.n	8002442 <testHandler+0x1aa>
		{
			//___Zobrazení času na displej___//
			char time[9] = {0};
 80023f4:	2510      	movs	r5, #16
 80023f6:	197b      	adds	r3, r7, r5
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2205      	movs	r2, #5
 8002400:	2100      	movs	r1, #0
 8002402:	0018      	movs	r0, r3
 8002404:	f00a fbf7 	bl	800cbf6 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002408:	4b85      	ldr	r3, [pc, #532]	; (8002620 <testHandler+0x388>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	223c      	movs	r2, #60	; 0x3c
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	4b83      	ldr	r3, [pc, #524]	; (8002620 <testHandler+0x388>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	213c      	movs	r1, #60	; 0x3c
 8002416:	1acc      	subs	r4, r1, r3
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <testHandler+0x388>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2103      	movs	r1, #3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	4982      	ldr	r1, [pc, #520]	; (800262c <testHandler+0x394>)
 8002422:	1978      	adds	r0, r7, r5
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	0023      	movs	r3, r4
 8002428:	f00a fca8 	bl	800cd7c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 800242c:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <testHandler+0x390>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <testHandler+0x390>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2110      	movs	r1, #16
 8002438:	404a      	eors	r2, r1
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]
			sendData();
 800243e:	f7ff fcd7 	bl	8001df0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8002442:	4b77      	ldr	r3, [pc, #476]	; (8002620 <testHandler+0x388>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <testHandler+0x1ca>
 800244a:	4b70      	ldr	r3, [pc, #448]	; (800260c <testHandler+0x374>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2204      	movs	r2, #4
 8002450:	4013      	ands	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <testHandler+0x1ca>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002458:	4b6c      	ldr	r3, [pc, #432]	; (800260c <testHandler+0x374>)
 800245a:	7d1a      	ldrb	r2, [r3, #20]
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <testHandler+0x388>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b09      	cmp	r3, #9
 8002468:	dc00      	bgt.n	800246c <testHandler+0x1d4>
 800246a:	e0c9      	b.n	8002600 <testHandler+0x368>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <testHandler+0x378>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <testHandler+0x378>)
 8002476:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002478:	e0c2      	b.n	8002600 <testHandler+0x368>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 800247a:	4b64      	ldr	r3, [pc, #400]	; (800260c <testHandler+0x374>)
 800247c:	7d1b      	ldrb	r3, [r3, #20]
 800247e:	2208      	movs	r2, #8
 8002480:	4013      	ands	r3, r2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d000      	beq.n	800248a <testHandler+0x1f2>
 8002488:	e0bc      	b.n	8002604 <testHandler+0x36c>
		{
			flags.ui.notice = 1;
 800248a:	4b60      	ldr	r3, [pc, #384]	; (800260c <testHandler+0x374>)
 800248c:	7c1a      	ldrb	r2, [r3, #16]
 800248e:	2108      	movs	r1, #8
 8002490:	430a      	orrs	r2, r1
 8002492:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002494:	4b5d      	ldr	r3, [pc, #372]	; (800260c <testHandler+0x374>)
 8002496:	7e1a      	ldrb	r2, [r3, #24]
 8002498:	2102      	movs	r1, #2
 800249a:	430a      	orrs	r2, r1
 800249c:	761a      	strb	r2, [r3, #24]

			testPhase++;
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <testHandler+0x378>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <testHandler+0x378>)
 80024a8:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 80024aa:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <testHandler+0x38c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 fa1e 	bl	80038f2 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 80024b6:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <testHandler+0x38c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	0018      	movs	r0, r3
 80024be:	f001 fa18 	bl	80038f2 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <testHandler+0x390>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <testHandler+0x390>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2110      	movs	r1, #16
 80024ce:	430a      	orrs	r2, r1
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <testHandler+0x390>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <testHandler+0x390>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]
			sendData();
 80024e6:	f7ff fc83 	bl	8001df0 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 80024ea:	2301      	movs	r3, #1
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ee:	e007      	b.n	8002500 <testHandler+0x268>
			{
				sysTime[i] = 0;
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <testHandler+0x388>)
 80024f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	2100      	movs	r1, #0
 80024f8:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3301      	adds	r3, #1
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	2b03      	cmp	r3, #3
 8002504:	ddf4      	ble.n	80024f0 <testHandler+0x258>
			}
		}
		break;
 8002506:	e07d      	b.n	8002604 <testHandler+0x36c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <testHandler+0x374>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d025      	beq.n	8002562 <testHandler+0x2ca>
		{
			char time[9] = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	3304      	adds	r3, #4
 800251e:	2205      	movs	r2, #5
 8002520:	2100      	movs	r1, #0
 8002522:	0018      	movs	r0, r3
 8002524:	f00a fb67 	bl	800cbf6 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <testHandler+0x388>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	223c      	movs	r2, #60	; 0x3c
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <testHandler+0x388>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	213c      	movs	r1, #60	; 0x3c
 8002536:	1acc      	subs	r4, r1, r3
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <testHandler+0x388>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2103      	movs	r1, #3
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	493a      	ldr	r1, [pc, #232]	; (800262c <testHandler+0x394>)
 8002542:	1d38      	adds	r0, r7, #4
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	0023      	movs	r3, r4
 8002548:	f00a fc18 	bl	800cd7c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <testHandler+0x390>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	4b35      	ldr	r3, [pc, #212]	; (8002628 <testHandler+0x390>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2108      	movs	r1, #8
 8002558:	404a      	eors	r2, r1
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
			sendData();
 800255e:	f7ff fc47 	bl	8001df0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <testHandler+0x388>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <testHandler+0x2ea>
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <testHandler+0x374>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	4013      	ands	r3, r2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <testHandler+0x2ea>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <testHandler+0x374>)
 800257a:	7d1a      	ldrb	r2, [r3, #20]
 800257c:	2101      	movs	r1, #1
 800257e:	430a      	orrs	r2, r1
 8002580:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <testHandler+0x388>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b02      	cmp	r3, #2
 8002588:	dd3e      	ble.n	8002608 <testHandler+0x370>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <testHandler+0x378>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <testHandler+0x378>)
 8002594:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002596:	e037      	b.n	8002608 <testHandler+0x370>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <testHandler+0x374>)
 800259a:	7d1b      	ldrb	r3, [r3, #20]
 800259c:	2208      	movs	r2, #8
 800259e:	4013      	ands	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d144      	bne.n	8002630 <testHandler+0x398>
		{
			flags.ui.done = 1;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <testHandler+0x374>)
 80025a8:	7c1a      	ldrb	r2, [r3, #16]
 80025aa:	2110      	movs	r1, #16
 80025ac:	430a      	orrs	r2, r1
 80025ae:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <testHandler+0x374>)
 80025b2:	7e1a      	ldrb	r2, [r3, #24]
 80025b4:	2102      	movs	r1, #2
 80025b6:	430a      	orrs	r2, r1
 80025b8:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <testHandler+0x390>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <testHandler+0x390>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2108      	movs	r1, #8
 80025c6:	430a      	orrs	r2, r1
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <testHandler+0x390>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <testHandler+0x390>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2102      	movs	r1, #2
 80025d8:	438a      	bics	r2, r1
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <testHandler+0x390>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <testHandler+0x390>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	438a      	bics	r2, r1
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
			sendData();
 80025f0:	f7ff fbfe 	bl	8001df0 <sendData>

			testPhase = WAITING;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <testHandler+0x378>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80025fa:	e019      	b.n	8002630 <testHandler+0x398>
		break;
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	e018      	b.n	8002632 <testHandler+0x39a>
		break;
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	e016      	b.n	8002632 <testHandler+0x39a>
		break;
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	e014      	b.n	8002632 <testHandler+0x39a>
		break;
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	e012      	b.n	8002632 <testHandler+0x39a>
 800260c:	20000630 	.word	0x20000630
 8002610:	2000025c 	.word	0x2000025c
 8002614:	0800d478 	.word	0x0800d478
 8002618:	20000490 	.word	0x20000490
 800261c:	0800d588 	.word	0x0800d588
 8002620:	2000023c 	.word	0x2000023c
 8002624:	48000800 	.word	0x48000800
 8002628:	20000698 	.word	0x20000698
 800262c:	0800d46c 	.word	0x0800d46c
		break;
 8002630:	46c0      	nop			; (mov r8, r8)

	}
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b010      	add	sp, #64	; 0x40
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)

0800263c <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <startTest+0xa8>)
 8002644:	7c1a      	ldrb	r2, [r3, #16]
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <startTest+0xac>)
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <startTest+0xb0>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <startTest+0xa8>)
 800265a:	7e1a      	ldrb	r2, [r3, #24]
 800265c:	2102      	movs	r1, #2
 800265e:	430a      	orrs	r2, r1
 8002660:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <startTest+0xb4>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <startTest+0xb8>)
 8002668:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	e008      	b.n	8002682 <startTest+0x46>
	{
		regValues[i] = 0;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <startTest+0xb4>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3301      	adds	r3, #1
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <startTest+0xbc>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	001a      	movs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4293      	cmp	r3, r2
 800268c:	dbf0      	blt.n	8002670 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <startTest+0xb8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <startTest+0xb8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2120      	movs	r1, #32
 800269a:	430a      	orrs	r2, r1
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <startTest+0xb8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <startTest+0xb8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2102      	movs	r1, #2
 80026ac:	430a      	orrs	r2, r1
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 80026b2:	f7ff fb9d 	bl	8001df0 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 80026b6:	2301      	movs	r3, #1
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	e007      	b.n	80026cc <startTest+0x90>
	{
		sysTime[i] = 0;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <startTest+0xc0>)
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	2100      	movs	r1, #0
 80026c4:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	ddf4      	ble.n	80026bc <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <startTest+0xa8>)
 80026d4:	7b1a      	ldrb	r2, [r3, #12]
 80026d6:	2101      	movs	r1, #1
 80026d8:	438a      	bics	r2, r1
 80026da:	731a      	strb	r2, [r3, #12]
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000630 	.word	0x20000630
 80026e8:	2000025c 	.word	0x2000025c
 80026ec:	20000260 	.word	0x20000260
 80026f0:	2000068c 	.word	0x2000068c
 80026f4:	20000698 	.word	0x20000698
 80026f8:	20000691 	.word	0x20000691
 80026fc:	2000023c 	.word	0x2000023c

08002700 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <stopTest+0x5c>)
 8002706:	7c1a      	ldrb	r2, [r3, #16]
 8002708:	2102      	movs	r1, #2
 800270a:	430a      	orrs	r2, r1
 800270c:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <stopTest+0x60>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <stopTest+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	0018      	movs	r0, r3
 800271c:	f001 f8e9 	bl	80038f2 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <stopTest+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	0018      	movs	r0, r3
 8002728:	f001 f8e3 	bl	80038f2 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <stopTest+0x68>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <stopTest+0x68>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <stopTest+0x68>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2104      	movs	r1, #4
 8002740:	430a      	orrs	r2, r1
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	sendData();
 8002746:	f7ff fb53 	bl	8001df0 <sendData>

	flags.instructions.stopRequest = 0;
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <stopTest+0x5c>)
 800274c:	7b1a      	ldrb	r2, [r3, #12]
 800274e:	2102      	movs	r1, #2
 8002750:	438a      	bics	r2, r1
 8002752:	731a      	strb	r2, [r3, #12]
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	20000630 	.word	0x20000630
 8002760:	2000025c 	.word	0x2000025c
 8002764:	48000800 	.word	0x48000800
 8002768:	20000698 	.word	0x20000698

0800276c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800276c:	480d      	ldr	r0, [pc, #52]	; (80027a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800276e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002772:	490e      	ldr	r1, [pc, #56]	; (80027ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <LoopForever+0xe>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002788:	4c0b      	ldr	r4, [pc, #44]	; (80027b8 <LoopForever+0x16>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002796:	f7ff fd6f 	bl	8002278 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800279a:	f00a f9eb 	bl	800cb74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279e:	f7fe facf 	bl	8000d40 <main>

080027a2 <LoopForever>:

LoopForever:
    b LoopForever
 80027a2:	e7fe      	b.n	80027a2 <LoopForever>
  ldr   r0, =_estack
 80027a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027b0:	0800d6d0 	.word	0x0800d6d0
  ldr r2, =_sbss
 80027b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027b8:	2000163c 	.word	0x2000163c

080027bc <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <CEC_CAN_IRQHandler>
	...

080027c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_Init+0x24>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_Init+0x24>)
 80027ca:	2110      	movs	r1, #16
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 f809 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d6:	f7ff fb47 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40022000 	.word	0x40022000

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_InitTick+0x5c>)
 80027f2:	681c      	ldr	r4, [r3, #0]
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_InitTick+0x60>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	0019      	movs	r1, r3
 80027fa:	23fa      	movs	r3, #250	; 0xfa
 80027fc:	0098      	lsls	r0, r3, #2
 80027fe:	f7fd fc95 	bl	800012c <__udivsi3>
 8002802:	0003      	movs	r3, r0
 8002804:	0019      	movs	r1, r3
 8002806:	0020      	movs	r0, r4
 8002808:	f7fd fc90 	bl	800012c <__udivsi3>
 800280c:	0003      	movs	r3, r0
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fe4f 	bl	80034b2 <HAL_SYSTICK_Config>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e00f      	b.n	800283c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d80b      	bhi.n	800283a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	2301      	movs	r3, #1
 8002826:	425b      	negs	r3, r3
 8002828:	2200      	movs	r2, #0
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fe1c 	bl	8003468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_InitTick+0x64>)
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b003      	add	sp, #12
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	20000008 	.word	0x20000008
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	001a      	movs	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	18d2      	adds	r2, r2, r3
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_IncTick+0x20>)
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000008 	.word	0x20000008
 8002870:	2000069c 	.word	0x2000069c

08002874 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	2000069c 	.word	0x2000069c

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001a      	movs	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e125      	b.n	8002b3a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2234      	movs	r2, #52	; 0x34
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff fad2 	bl	8001eb0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	2210      	movs	r2, #16
 8002912:	4013      	ands	r3, r2
 8002914:	d000      	beq.n	8002918 <HAL_ADC_Init+0x48>
 8002916:	e103      	b.n	8002b20 <HAL_ADC_Init+0x250>
 8002918:	230f      	movs	r3, #15
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d000      	beq.n	8002924 <HAL_ADC_Init+0x54>
 8002922:	e0fd      	b.n	8002b20 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2204      	movs	r2, #4
 800292c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800292e:	d000      	beq.n	8002932 <HAL_ADC_Init+0x62>
 8002930:	e0f6      	b.n	8002b20 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4a83      	ldr	r2, [pc, #524]	; (8002b44 <HAL_ADC_Init+0x274>)
 8002938:	4013      	ands	r3, r2
 800293a:	2202      	movs	r2, #2
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2203      	movs	r2, #3
 800294a:	4013      	ands	r3, r2
 800294c:	2b01      	cmp	r3, #1
 800294e:	d112      	bne.n	8002976 <HAL_ADC_Init+0xa6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	2b01      	cmp	r3, #1
 800295c:	d009      	beq.n	8002972 <HAL_ADC_Init+0xa2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	401a      	ands	r2, r3
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	429a      	cmp	r2, r3
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0xa6>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_ADC_Init+0xa8>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2218      	movs	r2, #24
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	0899      	lsrs	r1, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4964      	ldr	r1, [pc, #400]	; (8002b48 <HAL_ADC_Init+0x278>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7e1b      	ldrb	r3, [r3, #24]
 80029be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e5b      	ldrb	r3, [r3, #25]
 80029c4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e9b      	ldrb	r3, [r3, #26]
 80029cc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80029ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d002      	beq.n	80029de <HAL_ADC_Init+0x10e>
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	e000      	b.n	80029e0 <HAL_ADC_Init+0x110>
 80029de:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80029e6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_Init+0x124>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_Init+0x126>
 80029f4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80029f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2124      	movs	r1, #36	; 0x24
 80029fc:	5c5b      	ldrb	r3, [r3, r1]
 80029fe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a00:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7edb      	ldrb	r3, [r3, #27]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d115      	bne.n	8002a3c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e9b      	ldrb	r3, [r3, #26]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0252      	lsls	r2, r2, #9
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	e00b      	b.n	8002a3c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2220      	movs	r2, #32
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	2201      	movs	r2, #1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	23c2      	movs	r3, #194	; 0xc2
 8002a42:	33ff      	adds	r3, #255	; 0xff
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d007      	beq.n	8002a58 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002a50:	4313      	orrs	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	055b      	lsls	r3, r3, #21
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d01b      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d017      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d013      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d00f      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d00b      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d007      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d003      	beq.n	8002aac <HAL_ADC_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d112      	bne.n	8002ad2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2107      	movs	r1, #7
 8002ab8:	438a      	bics	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6959      	ldr	r1, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	401a      	ands	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_ADC_Init+0x27c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d10b      	bne.n	8002afa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	2203      	movs	r2, #3
 8002aee:	4393      	bics	r3, r2
 8002af0:	2201      	movs	r2, #1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002af8:	e01c      	b.n	8002b34 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	2212      	movs	r2, #18
 8002b00:	4393      	bics	r3, r2
 8002b02:	2210      	movs	r2, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2201      	movs	r2, #1
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b1e:	e009      	b.n	8002b34 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	2210      	movs	r2, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	fffffefd 	.word	0xfffffefd
 8002b48:	fffe0219 	.word	0xfffe0219
 8002b4c:	833fffe7 	.word	0x833fffe7

08002b50 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d156      	bne.n	8002c1a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2234      	movs	r2, #52	; 0x34
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Start_IT+0x2a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e056      	b.n	8002c28 <HAL_ADC_Start_IT+0xd8>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2234      	movs	r2, #52	; 0x34
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7e5b      	ldrb	r3, [r3, #25]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d007      	beq.n	8002b9a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b8a:	230f      	movs	r3, #15
 8002b8c:	18fc      	adds	r4, r7, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 fa7b 	bl	800308c <ADC_Enable>
 8002b96:	0003      	movs	r3, r0
 8002b98:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d13e      	bne.n	8002c22 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_ADC_Start_IT+0xe0>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2234      	movs	r2, #52	; 0x34
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	221c      	movs	r2, #28
 8002bca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d110      	bne.n	8002bf6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2104      	movs	r1, #4
 8002be0:	438a      	bics	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2118      	movs	r1, #24
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
          break;
 8002bf4:	e008      	b.n	8002c08 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	211c      	movs	r1, #28
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
          break;
 8002c06:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2104      	movs	r1, #4
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	e003      	b.n	8002c22 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002c22:	230f      	movs	r3, #15
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	781b      	ldrb	r3, [r3, #0]
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b005      	add	sp, #20
 8002c2e:	bd90      	pop	{r4, r7, pc}
 8002c30:	fffff0fe 	.word	0xfffff0fe

08002c34 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2234      	movs	r2, #52	; 0x34
 8002c48:	5c9b      	ldrb	r3, [r3, r2]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Stop_IT+0x1e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e033      	b.n	8002cba <HAL_ADC_Stop_IT+0x86>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2234      	movs	r2, #52	; 0x34
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c5a:	250f      	movs	r5, #15
 8002c5c:	197c      	adds	r4, r7, r5
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fb08 	bl	8003276 <ADC_ConversionStop>
 8002c66:	0003      	movs	r3, r0
 8002c68:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	183b      	adds	r3, r7, r0
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11b      	bne.n	8002cac <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	211c      	movs	r1, #28
 8002c80:	438a      	bics	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c84:	0005      	movs	r5, r0
 8002c86:	183c      	adds	r4, r7, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 fa82 	bl	8003194 <ADC_Disable>
 8002c90:	0003      	movs	r3, r0
 8002c92:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c94:	197b      	adds	r3, r7, r5
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_ADC_Stop_IT+0x90>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2234      	movs	r2, #52	; 0x34
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffefe 	.word	0xfffffefe

08002cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_IRQHandler+0x24>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d00d      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d14f      	bne.n	8002db2 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d148      	bne.n	8002db2 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	2210      	movs	r2, #16
 8002d26:	4013      	ands	r3, r2
 8002d28:	d106      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	23c0      	movs	r3, #192	; 0xc0
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4013      	ands	r3, r2
 8002d44:	d12d      	bne.n	8002da2 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d129      	bne.n	8002da2 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2208      	movs	r2, #8
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d122      	bne.n	8002da2 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2204      	movs	r2, #4
 8002d64:	4013      	ands	r3, r2
 8002d66:	d110      	bne.n	8002d8a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	210c      	movs	r1, #12
 8002d74:	438a      	bics	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_ADC_IRQHandler+0x16c>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2201      	movs	r2, #1
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
 8002d88:	e00b      	b.n	8002da2 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	2220      	movs	r2, #32
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fd ffb7 	bl	8000d18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	220c      	movs	r2, #12
 8002db0:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d115      	bne.n	8002dec <HAL_ADC_IRQHandler+0x10c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	0252      	lsls	r2, r2, #9
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 f836 	bl	8002e50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2210      	movs	r2, #16
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d123      	bne.n	8002e42 <HAL_ADC_IRQHandler+0x162>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2210      	movs	r2, #16
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d11c      	bne.n	8002e42 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d006      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10d      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2202      	movs	r2, #2
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2210      	movs	r2, #16
 8002e30:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f813 	bl	8002e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2210      	movs	r2, #16
 8002e40:	601a      	str	r2, [r3, #0]
  }

}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	fffffefe 	.word	0xfffffefe

08002e50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7a:	230f      	movs	r3, #15
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	055b      	lsls	r3, r3, #21
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d011      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d00d      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d005      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d001      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x46>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2234      	movs	r2, #52	; 0x34
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x54>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0d0      	b.n	8003066 <HAL_ADC_ConfigChannel+0x1f6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2234      	movs	r2, #52	; 0x34
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d000      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x6a>
 8002ed8:	e0b4      	b.n	8003044 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a64      	ldr	r2, [pc, #400]	; (8003070 <HAL_ADC_ConfigChannel+0x200>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x76>
 8002ee4:	e082      	b.n	8002fec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	055b      	lsls	r3, r3, #21
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d037      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d033      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d02f      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d02b      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d027      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d023      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d01f      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	2b07      	cmp	r3, #7
 8002f3e:	d01b      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2107      	movs	r1, #7
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d012      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2107      	movs	r1, #7
 8002f5e:	438a      	bics	r2, r1
 8002f60:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d007      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x120>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b11      	cmp	r3, #17
 8002f86:	d003      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x120>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d163      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f90:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_ADC_ConfigChannel+0x204>)
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0x140>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b11      	cmp	r3, #17
 8002fa2:	d102      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x13a>
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	03db      	lsls	r3, r3, #15
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x144>
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	045b      	lsls	r3, r3, #17
 8002fae:	e001      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x144>
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <HAL_ADC_ConfigChannel+0x204>)
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d14a      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_ADC_ConfigChannel+0x208>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_ADC_ConfigChannel+0x20c>)
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd f8af 	bl	800012c <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x16e>
 8002fea:	e035      	b.n	8003058 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4099      	lsls	r1, r3
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	43d9      	mvns	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b10      	cmp	r3, #16
 800300c:	d007      	beq.n	800301e <HAL_ADC_ConfigChannel+0x1ae>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b11      	cmp	r3, #17
 8003014:	d003      	beq.n	800301e <HAL_ADC_ConfigChannel+0x1ae>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b12      	cmp	r3, #18
 800301c:	d11c      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_ADC_ConfigChannel+0x204>)
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d007      	beq.n	800303a <HAL_ADC_ConfigChannel+0x1ca>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b11      	cmp	r3, #17
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x1c6>
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_ADC_ConfigChannel+0x210>)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x1cc>
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_ADC_ConfigChannel+0x214>)
 8003038:	e000      	b.n	800303c <HAL_ADC_ConfigChannel+0x1cc>
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_ADC_ConfigChannel+0x218>)
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_ADC_ConfigChannel+0x204>)
 800303e:	400b      	ands	r3, r1
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e009      	b.n	8003058 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	2220      	movs	r2, #32
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003050:	230f      	movs	r3, #15
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2234      	movs	r2, #52	; 0x34
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	00001001 	.word	0x00001001
 8003074:	40012708 	.word	0x40012708
 8003078:	20000000 	.word	0x20000000
 800307c:	000f4240 	.word	0x000f4240
 8003080:	ffbfffff 	.word	0xffbfffff
 8003084:	feffffff 	.word	0xfeffffff
 8003088:	ff7fffff 	.word	0xff7fffff

0800308c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2203      	movs	r2, #3
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d112      	bne.n	80030d0 <ADC_Enable+0x44>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d009      	beq.n	80030cc <ADC_Enable+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	401a      	ands	r2, r3
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d101      	bne.n	80030d0 <ADC_Enable+0x44>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <ADC_Enable+0x46>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d152      	bne.n	800317c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <ADC_Enable+0xfc>)
 80030de:	4013      	ands	r3, r2
 80030e0:	d00d      	beq.n	80030fe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	2210      	movs	r2, #16
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	2201      	movs	r2, #1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e03f      	b.n	800317e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <ADC_Enable+0x100>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	491f      	ldr	r1, [pc, #124]	; (8003190 <ADC_Enable+0x104>)
 8003114:	0018      	movs	r0, r3
 8003116:	f7fd f809 	bl	800012c <__udivsi3>
 800311a:	0003      	movs	r3, r0
 800311c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800311e:	e002      	b.n	8003126 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3b01      	subs	r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f9      	bne.n	8003120 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800312c:	f7ff fba2 	bl	8002874 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003134:	e01b      	b.n	800316e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003136:	f7ff fb9d 	bl	8002874 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d914      	bls.n	800316e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	4013      	ands	r3, r2
 800314e:	2b01      	cmp	r3, #1
 8003150:	d00d      	beq.n	800316e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	2210      	movs	r2, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	2201      	movs	r2, #1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	2b01      	cmp	r3, #1
 800317a:	d1dc      	bne.n	8003136 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	80000017 	.word	0x80000017
 800318c:	20000000 	.word	0x20000000
 8003190:	000f4240 	.word	0x000f4240

08003194 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2203      	movs	r2, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d112      	bne.n	80031d4 <ADC_Disable+0x40>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d009      	beq.n	80031d0 <ADC_Disable+0x3c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	401a      	ands	r2, r3
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d101      	bne.n	80031d4 <ADC_Disable+0x40>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <ADC_Disable+0x42>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d048      	beq.n	800326c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2205      	movs	r2, #5
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d110      	bne.n	800320a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2102      	movs	r1, #2
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2203      	movs	r2, #3
 80031fe:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003200:	f7ff fb38 	bl	8002874 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003208:	e029      	b.n	800325e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	2210      	movs	r2, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2201      	movs	r2, #1
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e023      	b.n	800326e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003226:	f7ff fb25 	bl	8002874 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d914      	bls.n	800325e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10d      	bne.n	800325e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	2210      	movs	r2, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2201      	movs	r2, #1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e007      	b.n	800326e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	2b01      	cmp	r3, #1
 800326a:	d0dc      	beq.n	8003226 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bd80      	pop	{r7, pc}

08003276 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2204      	movs	r2, #4
 800328a:	4013      	ands	r3, r2
 800328c:	d03a      	beq.n	8003304 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2204      	movs	r2, #4
 8003296:	4013      	ands	r3, r2
 8003298:	2b04      	cmp	r3, #4
 800329a:	d10d      	bne.n	80032b8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80032a6:	d107      	bne.n	80032b8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2110      	movs	r1, #16
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032b8:	f7ff fadc 	bl	8002874 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032c0:	e01a      	b.n	80032f8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80032c2:	f7ff fad7 	bl	8002874 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d913      	bls.n	80032f8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2204      	movs	r2, #4
 80032d8:	4013      	ands	r3, r2
 80032da:	d00d      	beq.n	80032f8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2210      	movs	r2, #16
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	2201      	movs	r2, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e006      	b.n	8003306 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2204      	movs	r2, #4
 8003300:	4013      	ands	r3, r2
 8003302:	d1de      	bne.n	80032c2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b7f      	cmp	r3, #127	; 0x7f
 8003322:	d809      	bhi.n	8003338 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	001a      	movs	r2, r3
 800332a:	231f      	movs	r3, #31
 800332c:	401a      	ands	r2, r3
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <__NVIC_EnableIRQ+0x30>)
 8003330:	2101      	movs	r1, #1
 8003332:	4091      	lsls	r1, r2
 8003334:	000a      	movs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
  }
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	0002      	movs	r2, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b7f      	cmp	r3, #127	; 0x7f
 8003358:	d828      	bhi.n	80033ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <__NVIC_SetPriority+0xd4>)
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b25b      	sxtb	r3, r3
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	33c0      	adds	r3, #192	; 0xc0
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	589b      	ldr	r3, [r3, r2]
 800336a:	1dfa      	adds	r2, r7, #7
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	0011      	movs	r1, r2
 8003370:	2203      	movs	r2, #3
 8003372:	400a      	ands	r2, r1
 8003374:	00d2      	lsls	r2, r2, #3
 8003376:	21ff      	movs	r1, #255	; 0xff
 8003378:	4091      	lsls	r1, r2
 800337a:	000a      	movs	r2, r1
 800337c:	43d2      	mvns	r2, r2
 800337e:	401a      	ands	r2, r3
 8003380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	401a      	ands	r2, r3
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	0018      	movs	r0, r3
 8003390:	2303      	movs	r3, #3
 8003392:	4003      	ands	r3, r0
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003398:	481f      	ldr	r0, [pc, #124]	; (8003418 <__NVIC_SetPriority+0xd4>)
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	430a      	orrs	r2, r1
 80033a4:	33c0      	adds	r3, #192	; 0xc0
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033aa:	e031      	b.n	8003410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <__NVIC_SetPriority+0xd8>)
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	0019      	movs	r1, r3
 80033b4:	230f      	movs	r3, #15
 80033b6:	400b      	ands	r3, r1
 80033b8:	3b08      	subs	r3, #8
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	3306      	adds	r3, #6
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	3304      	adds	r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1dfa      	adds	r2, r7, #7
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	0011      	movs	r1, r2
 80033cc:	2203      	movs	r2, #3
 80033ce:	400a      	ands	r2, r1
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	21ff      	movs	r1, #255	; 0xff
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	43d2      	mvns	r2, r2
 80033da:	401a      	ands	r2, r3
 80033dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	401a      	ands	r2, r3
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0018      	movs	r0, r3
 80033ec:	2303      	movs	r3, #3
 80033ee:	4003      	ands	r3, r0
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f4:	4809      	ldr	r0, [pc, #36]	; (800341c <__NVIC_SetPriority+0xd8>)
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	001c      	movs	r4, r3
 80033fc:	230f      	movs	r3, #15
 80033fe:	4023      	ands	r3, r4
 8003400:	3b08      	subs	r3, #8
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	430a      	orrs	r2, r1
 8003406:	3306      	adds	r3, #6
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	18c3      	adds	r3, r0, r3
 800340c:	3304      	adds	r3, #4
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b003      	add	sp, #12
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	045b      	lsls	r3, r3, #17
 8003430:	429a      	cmp	r2, r3
 8003432:	d301      	bcc.n	8003438 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003434:	2301      	movs	r3, #1
 8003436:	e010      	b.n	800345a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <SysTick_Config+0x44>)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	3a01      	subs	r2, #1
 800343e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003440:	2301      	movs	r3, #1
 8003442:	425b      	negs	r3, r3
 8003444:	2103      	movs	r1, #3
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff ff7c 	bl	8003344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SysTick_Config+0x44>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <SysTick_Config+0x44>)
 8003454:	2207      	movs	r2, #7
 8003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	e000e010 	.word	0xe000e010

08003468 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	210f      	movs	r1, #15
 8003474:	187b      	adds	r3, r7, r1
 8003476:	1c02      	adds	r2, r0, #0
 8003478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	187b      	adds	r3, r7, r1
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff ff5d 	bl	8003344 <__NVIC_SetPriority>
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	0002      	movs	r2, r0
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ff33 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff ffaf 	bl	8003420 <SysTick_Config>
 80034c2:	0003      	movs	r3, r0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2221      	movs	r2, #33	; 0x21
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d008      	beq.n	80034f2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e020      	b.n	8003534 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	210e      	movs	r1, #14
 80034fe:	438a      	bics	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	438a      	bics	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2101      	movs	r1, #1
 800351c:	4091      	lsls	r1, r2
 800351e:	000a      	movs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2221      	movs	r2, #33	; 0x21
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	2100      	movs	r1, #0
 8003530:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	210f      	movs	r1, #15
 8003546:	187b      	adds	r3, r7, r1
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2221      	movs	r2, #33	; 0x21
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d006      	beq.n	8003566 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2204      	movs	r2, #4
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e028      	b.n	80035b8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	210e      	movs	r1, #14
 8003572:	438a      	bics	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	438a      	bics	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2101      	movs	r1, #1
 8003590:	4091      	lsls	r1, r2
 8003592:	000a      	movs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	0010      	movs	r0, r2
 80035b6:	4798      	blx	r3
    } 
  }
  return status;
 80035b8:	230f      	movs	r3, #15
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781b      	ldrb	r3, [r3, #0]
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d6:	e155      	b.n	8003884 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4091      	lsls	r1, r2
 80035e2:	000a      	movs	r2, r1
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d100      	bne.n	80035f0 <HAL_GPIO_Init+0x28>
 80035ee:	e146      	b.n	800387e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2203      	movs	r2, #3
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d005      	beq.n	8003608 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003604:	2b02      	cmp	r3, #2
 8003606:	d130      	bne.n	800366a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	409a      	lsls	r2, r3
 8003616:	0013      	movs	r3, r2
 8003618:	43da      	mvns	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363e:	2201      	movs	r2, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	43da      	mvns	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	2201      	movs	r2, #1
 8003656:	401a      	ands	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2203      	movs	r2, #3
 8003670:	4013      	ands	r3, r2
 8003672:	2b03      	cmp	r3, #3
 8003674:	d017      	beq.n	80036a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	43da      	mvns	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	0013      	movs	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d123      	bne.n	80036fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	58d3      	ldr	r3, [r2, r3]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4013      	ands	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	43da      	mvns	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2107      	movs	r1, #7
 80036de:	400b      	ands	r3, r1
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	0092      	lsls	r2, r2, #2
 80036f6:	6939      	ldr	r1, [r7, #16]
 80036f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	409a      	lsls	r2, r3
 8003708:	0013      	movs	r3, r2
 800370a:	43da      	mvns	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2203      	movs	r2, #3
 8003718:	401a      	ands	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	0013      	movs	r3, r2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	23c0      	movs	r3, #192	; 0xc0
 8003734:	029b      	lsls	r3, r3, #10
 8003736:	4013      	ands	r3, r2
 8003738:	d100      	bne.n	800373c <HAL_GPIO_Init+0x174>
 800373a:	e0a0      	b.n	800387e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_GPIO_Init+0x2d4>)
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_GPIO_Init+0x2d4>)
 8003742:	2101      	movs	r1, #1
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
 8003748:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_GPIO_Init+0x2d4>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2201      	movs	r2, #1
 800374e:	4013      	ands	r3, r2
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_GPIO_Init+0x2d8>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	589b      	ldr	r3, [r3, r2]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2203      	movs	r2, #3
 8003766:	4013      	ands	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	409a      	lsls	r2, r3
 800376e:	0013      	movs	r3, r2
 8003770:	43da      	mvns	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	2390      	movs	r3, #144	; 0x90
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	429a      	cmp	r2, r3
 8003780:	d019      	beq.n	80037b6 <HAL_GPIO_Init+0x1ee>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <HAL_GPIO_Init+0x2dc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_GPIO_Init+0x1ea>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <HAL_GPIO_Init+0x2e0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00d      	beq.n	80037ae <HAL_GPIO_Init+0x1e6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a45      	ldr	r2, [pc, #276]	; (80038ac <HAL_GPIO_Init+0x2e4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0x1e2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a44      	ldr	r2, [pc, #272]	; (80038b0 <HAL_GPIO_Init+0x2e8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_GPIO_Init+0x1de>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e008      	b.n	80037b8 <HAL_GPIO_Init+0x1f0>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e006      	b.n	80037b8 <HAL_GPIO_Init+0x1f0>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e004      	b.n	80037b8 <HAL_GPIO_Init+0x1f0>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e002      	b.n	80037b8 <HAL_GPIO_Init+0x1f0>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_GPIO_Init+0x1f0>
 80037b6:	2300      	movs	r3, #0
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	2103      	movs	r1, #3
 80037bc:	400a      	ands	r2, r1
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	4093      	lsls	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c8:	4935      	ldr	r1, [pc, #212]	; (80038a0 <HAL_GPIO_Init+0x2d8>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43da      	mvns	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	025b      	lsls	r3, r3, #9
 80037ee:	4013      	ands	r3, r2
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037fa:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003800:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	43da      	mvns	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	029b      	lsls	r3, r3, #10
 8003818:	4013      	ands	r3, r2
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43da      	mvns	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	035b      	lsls	r3, r3, #13
 8003842:	4013      	ands	r3, r2
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43da      	mvns	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	039b      	lsls	r3, r3, #14
 800386c:	4013      	ands	r3, r2
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	40da      	lsrs	r2, r3
 800388c:	1e13      	subs	r3, r2, #0
 800388e:	d000      	beq.n	8003892 <HAL_GPIO_Init+0x2ca>
 8003890:	e6a2      	b.n	80035d8 <HAL_GPIO_Init+0x10>
  } 
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b006      	add	sp, #24
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	40010000 	.word	0x40010000
 80038a4:	48000400 	.word	0x48000400
 80038a8:	48000800 	.word	0x48000800
 80038ac:	48000c00 	.word	0x48000c00
 80038b0:	48001000 	.word	0x48001000
 80038b4:	40010400 	.word	0x40010400

080038b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	000a      	movs	r2, r1
 80038c2:	1cbb      	adds	r3, r7, #2
 80038c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	1cba      	adds	r2, r7, #2
 80038cc:	8812      	ldrh	r2, [r2, #0]
 80038ce:	4013      	ands	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80038d2:	230f      	movs	r3, #15
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e003      	b.n	80038e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80038e4:	230f      	movs	r3, #15
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	781b      	ldrb	r3, [r3, #0]
  }
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	0008      	movs	r0, r1
 80038fc:	0011      	movs	r1, r2
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	1c02      	adds	r2, r0, #0
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	1c7b      	adds	r3, r7, #1
 8003906:	1c0a      	adds	r2, r1, #0
 8003908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800390a:	1c7b      	adds	r3, r7, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800391a:	e003      	b.n	8003924 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800391c:	1cbb      	adds	r3, r7, #2
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	000a      	movs	r2, r1
 8003936:	1cbb      	adds	r3, r7, #2
 8003938:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003940:	1cbb      	adds	r3, r7, #2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4013      	ands	r3, r2
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	1cb9      	adds	r1, r7, #2
 8003950:	8809      	ldrh	r1, [r1, #0]
 8003952:	400b      	ands	r3, r1
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	1dba      	adds	r2, r7, #6
 8003976:	8812      	ldrh	r2, [r2, #0]
 8003978:	4013      	ands	r3, r2
 800397a:	d008      	beq.n	800398e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800397e:	1dba      	adds	r2, r7, #6
 8003980:	8812      	ldrh	r2, [r2, #0]
 8003982:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003984:	1dbb      	adds	r3, r7, #6
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	0018      	movs	r0, r3
 800398a:	f7fd f98d 	bl	8000ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b08b      	sub	sp, #44	; 0x2c
 80039a0:	af06      	add	r7, sp, #24
 80039a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0ff      	b.n	8003bae <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a81      	ldr	r2, [pc, #516]	; (8003bb8 <HAL_PCD_Init+0x21c>)
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	23aa      	movs	r3, #170	; 0xaa
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	2100      	movs	r1, #0
 80039c2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f008 fd70 	bl	800c4ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a7a      	ldr	r2, [pc, #488]	; (8003bb8 <HAL_PCD_Init+0x21c>)
 80039d0:	2103      	movs	r1, #3
 80039d2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0018      	movs	r0, r3
 80039da:	f004 fe0f 	bl	80085fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039de:	230f      	movs	r3, #15
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e058      	b.n	8003a9a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e8:	200f      	movs	r0, #15
 80039ea:	183b      	adds	r3, r7, r0
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	0013      	movs	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	18cb      	adds	r3, r1, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	0013      	movs	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	183a      	adds	r2, r7, r0
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a18:	0004      	movs	r4, r0
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b298      	uxth	r0, r3
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	0013      	movs	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	18cb      	adds	r3, r1, r3
 8003a30:	3336      	adds	r3, #54	; 0x36
 8003a32:	1c02      	adds	r2, r0, #0
 8003a34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	0013      	movs	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	18cb      	adds	r3, r1, r3
 8003a48:	3303      	adds	r3, #3
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	0013      	movs	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	18cb      	adds	r3, r1, r3
 8003a5e:	3338      	adds	r3, #56	; 0x38
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	18cb      	adds	r3, r1, r3
 8003a74:	333c      	adds	r3, #60	; 0x3c
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	0013      	movs	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	18cb      	adds	r3, r1, r3
 8003a8a:	3340      	adds	r3, #64	; 0x40
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	3201      	adds	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	210f      	movs	r1, #15
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d39f      	bcc.n	80039e8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e056      	b.n	8003b5e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ab0:	240f      	movs	r4, #15
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	236a      	movs	r3, #106	; 0x6a
 8003aba:	33ff      	adds	r3, #255	; 0xff
 8003abc:	0019      	movs	r1, r3
 8003abe:	0013      	movs	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	18c3      	adds	r3, r0, r3
 8003ac8:	185b      	adds	r3, r3, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	23b4      	movs	r3, #180	; 0xb4
 8003ad6:	0059      	lsls	r1, r3, #1
 8003ad8:	0013      	movs	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	18c3      	adds	r3, r0, r3
 8003ae2:	185b      	adds	r3, r3, r1
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	236c      	movs	r3, #108	; 0x6c
 8003af2:	33ff      	adds	r3, #255	; 0xff
 8003af4:	0019      	movs	r1, r3
 8003af6:	0013      	movs	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	18c3      	adds	r3, r0, r3
 8003b00:	185b      	adds	r3, r3, r1
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	23bc      	movs	r3, #188	; 0xbc
 8003b0e:	0059      	lsls	r1, r3, #1
 8003b10:	0013      	movs	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	18c3      	adds	r3, r0, r3
 8003b1a:	185b      	adds	r3, r3, r1
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	23be      	movs	r3, #190	; 0xbe
 8003b28:	0059      	lsls	r1, r3, #1
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	18c3      	adds	r3, r0, r3
 8003b34:	185b      	adds	r3, r3, r1
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	23c0      	movs	r3, #192	; 0xc0
 8003b42:	0059      	lsls	r1, r3, #1
 8003b44:	0013      	movs	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	189b      	adds	r3, r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	18c3      	adds	r3, r0, r3
 8003b4e:	185b      	adds	r3, r3, r1
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	193b      	adds	r3, r7, r4
 8003b5a:	3201      	adds	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781a      	ldrb	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3a1      	bcc.n	8003ab0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	466a      	mov	r2, sp
 8003b74:	0011      	movs	r1, r2
 8003b76:	001a      	movs	r2, r3
 8003b78:	3210      	adds	r2, #16
 8003b7a:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003b7c:	c170      	stmia	r1!, {r4, r5, r6}
 8003b7e:	ca30      	ldmia	r2!, {r4, r5}
 8003b80:	c130      	stmia	r1!, {r4, r5}
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f004 fd52 	bl	8008630 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <HAL_PCD_Init+0x21c>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d103      	bne.n	8003bac <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f001 fd34 	bl	8005614 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b005      	add	sp, #20
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	000002a9 	.word	0x000002a9

08003bbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	23aa      	movs	r3, #170	; 0xaa
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	5cd3      	ldrb	r3, [r2, r3]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_PCD_Start+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e014      	b.n	8003bfe <HAL_PCD_Start+0x42>
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	23aa      	movs	r3, #170	; 0xaa
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	2101      	movs	r1, #1
 8003bdc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f004 fcf4 	bl	80085d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f006 fc4f 	bl	800a490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	23aa      	movs	r3, #170	; 0xaa
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f006 fc51 	bl	800a4bc <USB_ReadInterrupts>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	401a      	ands	r2, r3
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d103      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fbbb 	bl	80043a8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f006 fc40 	bl	800a4bc <USB_ReadInterrupts>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	401a      	ands	r2, r3
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d114      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2244      	movs	r2, #68	; 0x44
 8003c52:	5a9b      	ldrh	r3, [r3, r2]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	49a2      	ldr	r1, [pc, #648]	; (8003ee4 <HAL_PCD_IRQHandler+0x2dc>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	b291      	uxth	r1, r2
 8003c60:	2244      	movs	r2, #68	; 0x44
 8003c62:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f008 fcab 	bl	800c5c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2100      	movs	r1, #0
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f945 	bl	8003f00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f006 fc1e 	bl	800a4bc <USB_ReadInterrupts>
 8003c80:	0002      	movs	r2, r0
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	01db      	lsls	r3, r3, #7
 8003c86:	401a      	ands	r2, r3
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2244      	movs	r2, #68	; 0x44
 8003c96:	5a9b      	ldrh	r3, [r3, r2]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4992      	ldr	r1, [pc, #584]	; (8003ee8 <HAL_PCD_IRQHandler+0x2e0>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	b291      	uxth	r1, r2
 8003ca4:	2244      	movs	r2, #68	; 0x44
 8003ca6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f006 fc05 	bl	800a4bc <USB_ReadInterrupts>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	019b      	lsls	r3, r3, #6
 8003cb8:	401a      	ands	r2, r3
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10b      	bne.n	8003cda <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2244      	movs	r2, #68	; 0x44
 8003cc8:	5a9b      	ldrh	r3, [r3, r2]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4986      	ldr	r1, [pc, #536]	; (8003eec <HAL_PCD_IRQHandler+0x2e4>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	b291      	uxth	r1, r2
 8003cd6:	2244      	movs	r2, #68	; 0x44
 8003cd8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f006 fbec 	bl	800a4bc <USB_ReadInterrupts>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	401a      	ands	r2, r3
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d137      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2240      	movs	r2, #64	; 0x40
 8003cfa:	5a9b      	ldrh	r3, [r3, r2]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2104      	movs	r1, #4
 8003d04:	438a      	bics	r2, r1
 8003d06:	b291      	uxth	r1, r2
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2240      	movs	r2, #64	; 0x40
 8003d12:	5a9b      	ldrh	r3, [r3, r2]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	b291      	uxth	r1, r2
 8003d20:	2240      	movs	r2, #64	; 0x40
 8003d22:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	23b8      	movs	r3, #184	; 0xb8
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d109      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	23b8      	movs	r3, #184	; 0xb8
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	2100      	movs	r1, #0
 8003d38:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f001 fc92 	bl	8005668 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f008 fc7c 	bl	800c644 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2244      	movs	r2, #68	; 0x44
 8003d52:	5a9b      	ldrh	r3, [r3, r2]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4965      	ldr	r1, [pc, #404]	; (8003ef0 <HAL_PCD_IRQHandler+0x2e8>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	b291      	uxth	r1, r2
 8003d60:	2244      	movs	r2, #68	; 0x44
 8003d62:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f006 fba7 	bl	800a4bc <USB_ReadInterrupts>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	401a      	ands	r2, r3
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d127      	bne.n	8003dce <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	5a9b      	ldrh	r3, [r3, r2]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	b291      	uxth	r1, r2
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2244      	movs	r2, #68	; 0x44
 8003d9c:	5a9b      	ldrh	r3, [r3, r2]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4953      	ldr	r1, [pc, #332]	; (8003ef4 <HAL_PCD_IRQHandler+0x2ec>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	b291      	uxth	r1, r2
 8003daa:	2244      	movs	r2, #68	; 0x44
 8003dac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	5a9b      	ldrh	r3, [r3, r2]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	b291      	uxth	r1, r2
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f008 fc1f 	bl	800c60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f006 fb72 	bl	800a4bc <USB_ReadInterrupts>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	2280      	movs	r2, #128	; 0x80
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d145      	bne.n	8003e6e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2244      	movs	r2, #68	; 0x44
 8003de8:	5a9b      	ldrh	r3, [r3, r2]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	438a      	bics	r2, r1
 8003df4:	b291      	uxth	r1, r2
 8003df6:	2244      	movs	r2, #68	; 0x44
 8003df8:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	23b8      	movs	r3, #184	; 0xb8
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12f      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	5a9b      	ldrh	r3, [r3, r2]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2104      	movs	r1, #4
 8003e16:	430a      	orrs	r2, r1
 8003e18:	b291      	uxth	r1, r2
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	b291      	uxth	r1, r2
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	23b8      	movs	r3, #184	; 0xb8
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2254      	movs	r2, #84	; 0x54
 8003e46:	5a9b      	ldrh	r3, [r3, r2]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	223c      	movs	r2, #60	; 0x3c
 8003e4e:	4013      	ands	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	23b9      	movs	r3, #185	; 0xb9
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f001 fc02 	bl	8005668 <HAL_PCDEx_LPM_Callback>
 8003e64:	e003      	b.n	8003e6e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f008 fbcf 	bl	800c60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f006 fb22 	bl	800a4bc <USB_ReadInterrupts>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	401a      	ands	r2, r3
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10f      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2244      	movs	r2, #68	; 0x44
 8003e8e:	5a9b      	ldrh	r3, [r3, r2]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4918      	ldr	r1, [pc, #96]	; (8003ef8 <HAL_PCD_IRQHandler+0x2f0>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	b291      	uxth	r1, r2
 8003e9c:	2244      	movs	r2, #68	; 0x44
 8003e9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f008 fb7e 	bl	800c5a4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f006 fb05 	bl	800a4bc <USB_ReadInterrupts>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	401a      	ands	r2, r3
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10b      	bne.n	8003eda <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2244      	movs	r2, #68	; 0x44
 8003ec8:	5a9b      	ldrh	r3, [r3, r2]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490a      	ldr	r1, [pc, #40]	; (8003efc <HAL_PCD_IRQHandler+0x2f4>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	b291      	uxth	r1, r2
 8003ed6:	2244      	movs	r2, #68	; 0x44
 8003ed8:	5299      	strh	r1, [r3, r2]
  }
}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	fffffbff 	.word	0xfffffbff
 8003ee8:	ffffbfff 	.word	0xffffbfff
 8003eec:	ffffdfff 	.word	0xffffdfff
 8003ef0:	ffffefff 	.word	0xffffefff
 8003ef4:	fffff7ff 	.word	0xfffff7ff
 8003ef8:	fffffdff 	.word	0xfffffdff
 8003efc:	fffffeff 	.word	0xfffffeff

08003f00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	000a      	movs	r2, r1
 8003f0a:	1cfb      	adds	r3, r7, #3
 8003f0c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	23aa      	movs	r3, #170	; 0xaa
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_PCD_SetAddress+0x1e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e017      	b.n	8003f4e <HAL_PCD_SetAddress+0x4e>
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	23aa      	movs	r3, #170	; 0xaa
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	2101      	movs	r1, #1
 8003f26:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1cfa      	adds	r2, r7, #3
 8003f2c:	2124      	movs	r1, #36	; 0x24
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	1cfb      	adds	r3, r7, #3
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	f006 fa93 	bl	800a468 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	23aa      	movs	r3, #170	; 0xaa
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	2100      	movs	r1, #0
 8003f4a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f56:	b590      	push	{r4, r7, lr}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	000c      	movs	r4, r1
 8003f60:	0010      	movs	r0, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	1cfb      	adds	r3, r7, #3
 8003f66:	1c22      	adds	r2, r4, #0
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	003b      	movs	r3, r7
 8003f6c:	1c02      	adds	r2, r0, #0
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	1cbb      	adds	r3, r7, #2
 8003f72:	1c0a      	adds	r2, r1, #0
 8003f74:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f76:	230b      	movs	r3, #11
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f7e:	1cfb      	adds	r3, r7, #3
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b25b      	sxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da0f      	bge.n	8003fa8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f88:	1cfb      	adds	r3, r7, #3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	4013      	ands	r3, r2
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	0013      	movs	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	18d3      	adds	r3, r2, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	705a      	strb	r2, [r3, #1]
 8003fa6:	e00f      	b.n	8003fc8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa8:	1cfb      	adds	r3, r7, #3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2207      	movs	r2, #7
 8003fae:	401a      	ands	r2, r3
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	3369      	adds	r3, #105	; 0x69
 8003fba:	33ff      	adds	r3, #255	; 0xff
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc8:	1cfb      	adds	r3, r7, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2207      	movs	r2, #7
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fd6:	003b      	movs	r3, r7
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1cba      	adds	r2, r7, #2
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ff8:	1cbb      	adds	r3, r7, #2
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	23aa      	movs	r3, #170	; 0xaa
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_Open+0xc0>
 8004012:	2302      	movs	r3, #2
 8004014:	e013      	b.n	800403e <HAL_PCD_EP_Open+0xe8>
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	23aa      	movs	r3, #170	; 0xaa
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	2101      	movs	r1, #1
 800401e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	0011      	movs	r1, r2
 8004028:	0018      	movs	r0, r3
 800402a:	f004 fb2d 	bl	8008688 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	23aa      	movs	r3, #170	; 0xaa
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	2100      	movs	r1, #0
 8004036:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004038:	230b      	movs	r3, #11
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	781b      	ldrb	r3, [r3, #0]
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b005      	add	sp, #20
 8004044:	bd90      	pop	{r4, r7, pc}

08004046 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	000a      	movs	r2, r1
 8004050:	1cfb      	adds	r3, r7, #3
 8004052:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004054:	1cfb      	adds	r3, r7, #3
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b25b      	sxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	da0f      	bge.n	800407e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2207      	movs	r2, #7
 8004064:	4013      	ands	r3, r2
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	0013      	movs	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	189b      	adds	r3, r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	705a      	strb	r2, [r3, #1]
 800407c:	e00f      	b.n	800409e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407e:	1cfb      	adds	r3, r7, #3
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2207      	movs	r2, #7
 8004084:	401a      	ands	r2, r3
 8004086:	0013      	movs	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	189b      	adds	r3, r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	3369      	adds	r3, #105	; 0x69
 8004090:	33ff      	adds	r3, #255	; 0xff
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	18d3      	adds	r3, r2, r3
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800409e:	1cfb      	adds	r3, r7, #3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2207      	movs	r2, #7
 80040a4:	4013      	ands	r3, r2
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	23aa      	movs	r3, #170	; 0xaa
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_PCD_EP_Close+0x76>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e011      	b.n	80040e0 <HAL_PCD_EP_Close+0x9a>
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	23aa      	movs	r3, #170	; 0xaa
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	2101      	movs	r1, #1
 80040c4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	0011      	movs	r1, r2
 80040ce:	0018      	movs	r0, r3
 80040d0:	f004 fe4e 	bl	8008d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	23aa      	movs	r3, #170	; 0xaa
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	2100      	movs	r1, #0
 80040dc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	200b      	movs	r0, #11
 80040f6:	183b      	adds	r3, r7, r0
 80040f8:	1c0a      	adds	r2, r1, #0
 80040fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	0001      	movs	r1, r0
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2207      	movs	r2, #7
 8004104:	401a      	ands	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	189b      	adds	r3, r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3369      	adds	r3, #105	; 0x69
 8004110:	33ff      	adds	r3, #255	; 0xff
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	18d3      	adds	r3, r2, r3
 8004116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004130:	187b      	adds	r3, r7, r1
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2207      	movs	r2, #7
 8004136:	4013      	ands	r3, r2
 8004138:	b2da      	uxtb	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413e:	187b      	adds	r3, r7, r1
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2207      	movs	r2, #7
 8004144:	4013      	ands	r3, r2
 8004146:	d107      	bne.n	8004158 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f004 ffcd 	bl	80090f0 <USB_EPStartXfer>
 8004156:	e006      	b.n	8004166 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	0011      	movs	r1, r2
 8004160:	0018      	movs	r0, r3
 8004162:	f004 ffc5 	bl	80090f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b006      	add	sp, #24
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	000a      	movs	r2, r1
 800417a:	1cfb      	adds	r3, r7, #3
 800417c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800417e:	1cfb      	adds	r3, r7, #3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2207      	movs	r2, #7
 8004184:	401a      	ands	r2, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	23c2      	movs	r3, #194	; 0xc2
 800418a:	0059      	lsls	r1, r3, #1
 800418c:	0013      	movs	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	189b      	adds	r3, r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	18c3      	adds	r3, r0, r3
 8004196:	185b      	adds	r3, r3, r1
 8004198:	681b      	ldr	r3, [r3, #0]
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b002      	add	sp, #8
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	200b      	movs	r0, #11
 80041b0:	183b      	adds	r3, r7, r0
 80041b2:	1c0a      	adds	r2, r1, #0
 80041b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b6:	183b      	adds	r3, r7, r0
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2207      	movs	r2, #7
 80041bc:	4013      	ands	r3, r2
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	0013      	movs	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	18d3      	adds	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2201      	movs	r2, #1
 80041f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f4:	183b      	adds	r3, r7, r0
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2207      	movs	r2, #7
 80041fa:	4013      	ands	r3, r2
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004202:	183b      	adds	r3, r7, r0
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2207      	movs	r2, #7
 8004208:	4013      	ands	r3, r2
 800420a:	d107      	bne.n	800421c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f004 ff6b 	bl	80090f0 <USB_EPStartXfer>
 800421a:	e006      	b.n	800422a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f004 ff63 	bl	80090f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b006      	add	sp, #24
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	000a      	movs	r2, r1
 800423e:	1cfb      	adds	r3, r7, #3
 8004240:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004242:	1cfb      	adds	r3, r7, #3
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2207      	movs	r2, #7
 8004248:	401a      	ands	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d901      	bls.n	8004256 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e046      	b.n	80042e4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004256:	1cfb      	adds	r3, r7, #3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	da0f      	bge.n	8004280 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004260:	1cfb      	adds	r3, r7, #3
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2207      	movs	r2, #7
 8004266:	4013      	ands	r3, r2
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	0013      	movs	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	189b      	adds	r3, r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	18d3      	adds	r3, r2, r3
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	705a      	strb	r2, [r3, #1]
 800427e:	e00d      	b.n	800429c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004280:	1cfb      	adds	r3, r7, #3
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	0013      	movs	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	189b      	adds	r3, r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3369      	adds	r3, #105	; 0x69
 800428e:	33ff      	adds	r3, #255	; 0xff
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a2:	1cfb      	adds	r3, r7, #3
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2207      	movs	r2, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	23aa      	movs	r3, #170	; 0xaa
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_EP_SetStall+0x8c>
 80042bc:	2302      	movs	r3, #2
 80042be:	e011      	b.n	80042e4 <HAL_PCD_EP_SetStall+0xb0>
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	23aa      	movs	r3, #170	; 0xaa
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	2101      	movs	r1, #1
 80042c8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	0011      	movs	r1, r2
 80042d2:	0018      	movs	r0, r3
 80042d4:	f005 ffc6 	bl	800a264 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	23aa      	movs	r3, #170	; 0xaa
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	2100      	movs	r1, #0
 80042e0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	000a      	movs	r2, r1
 80042f6:	1cfb      	adds	r3, r7, #3
 80042f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042fa:	1cfb      	adds	r3, r7, #3
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	220f      	movs	r2, #15
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d901      	bls.n	800430e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e048      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800430e:	1cfb      	adds	r3, r7, #3
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b25b      	sxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0f      	bge.n	8004338 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	1cfb      	adds	r3, r7, #3
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2207      	movs	r2, #7
 800431e:	4013      	ands	r3, r2
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	0013      	movs	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	189b      	adds	r3, r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
 8004336:	e00f      	b.n	8004358 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004338:	1cfb      	adds	r3, r7, #3
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2207      	movs	r2, #7
 800433e:	401a      	ands	r2, r3
 8004340:	0013      	movs	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	189b      	adds	r3, r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	3369      	adds	r3, #105	; 0x69
 800434a:	33ff      	adds	r3, #255	; 0xff
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435e:	1cfb      	adds	r3, r7, #3
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2207      	movs	r2, #7
 8004364:	4013      	ands	r3, r2
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	23aa      	movs	r3, #170	; 0xaa
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_PCD_EP_ClrStall+0x90>
 8004378:	2302      	movs	r3, #2
 800437a:	e011      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xb4>
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	23aa      	movs	r3, #170	; 0xaa
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	2101      	movs	r1, #1
 8004384:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f005 ffb8 	bl	800a304 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	23aa      	movs	r3, #170	; 0xaa
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	2100      	movs	r1, #0
 800439c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b004      	add	sp, #16
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b096      	sub	sp, #88	; 0x58
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043b0:	f000 fbd8 	bl	8004b64 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2056      	movs	r0, #86	; 0x56
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	2144      	movs	r1, #68	; 0x44
 80043be:	5a52      	ldrh	r2, [r2, r1]
 80043c0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80043c2:	183b      	adds	r3, r7, r0
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	2455      	movs	r4, #85	; 0x55
 80043ca:	193b      	adds	r3, r7, r4
 80043cc:	210f      	movs	r1, #15
 80043ce:	400a      	ands	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80043d2:	193b      	adds	r3, r7, r4
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d000      	beq.n	80043dc <PCD_EP_ISR_Handler+0x34>
 80043da:	e179      	b.n	80046d0 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043dc:	183b      	adds	r3, r7, r0
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	2210      	movs	r2, #16
 80043e2:	4013      	ands	r3, r2
 80043e4:	d154      	bne.n	8004490 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	200e      	movs	r0, #14
 80043f0:	183b      	adds	r3, r7, r0
 80043f2:	49af      	ldr	r1, [pc, #700]	; (80046b0 <PCD_EP_ISR_Handler+0x308>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	801a      	strh	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	183a      	adds	r2, r7, r0
 80043fe:	8812      	ldrh	r2, [r2, #0]
 8004400:	49ac      	ldr	r1, [pc, #688]	; (80046b4 <PCD_EP_ISR_Handler+0x30c>)
 8004402:	430a      	orrs	r2, r1
 8004404:	b292      	uxth	r2, r2
 8004406:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3328      	adds	r3, #40	; 0x28
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2250      	movs	r2, #80	; 0x50
 8004414:	5a9b      	ldrh	r3, [r3, r2]
 8004416:	b29b      	uxth	r3, r3
 8004418:	001a      	movs	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	18d2      	adds	r2, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	18d3      	adds	r3, r2, r3
 8004428:	4aa3      	ldr	r2, [pc, #652]	; (80046b8 <PCD_EP_ISR_Handler+0x310>)
 800442a:	4694      	mov	ip, r2
 800442c:	4463      	add	r3, ip
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	059b      	lsls	r3, r3, #22
 8004432:	0d9a      	lsrs	r2, r3, #22
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	18d2      	adds	r2, r2, r3
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2100      	movs	r1, #0
 800444a:	0018      	movs	r0, r3
 800444c:	f008 f88c 	bl	800c568 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	5c9b      	ldrb	r3, [r3, r2]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <PCD_EP_ISR_Handler+0xb8>
 800445c:	f000 fb82 	bl	8004b64 <PCD_EP_ISR_Handler+0x7bc>
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <PCD_EP_ISR_Handler+0xc4>
 8004468:	f000 fb7c 	bl	8004b64 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	5c9b      	ldrb	r3, [r3, r2]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	4252      	negs	r2, r2
 8004478:	4313      	orrs	r3, r2
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b291      	uxth	r1, r2
 8004482:	224c      	movs	r2, #76	; 0x4c
 8004484:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]
 800448e:	e369      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3369      	adds	r3, #105	; 0x69
 8004494:	33ff      	adds	r3, #255	; 0xff
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2152      	movs	r1, #82	; 0x52
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	8812      	ldrh	r2, [r2, #0]
 80044a2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	d037      	beq.n	8004520 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2250      	movs	r2, #80	; 0x50
 80044b6:	5a9b      	ldrh	r3, [r3, r2]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	001a      	movs	r2, r3
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	18d2      	adds	r2, r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	18d3      	adds	r3, r2, r3
 80044ca:	4a7c      	ldr	r2, [pc, #496]	; (80046bc <PCD_EP_ISR_Handler+0x314>)
 80044cc:	4694      	mov	ip, r2
 80044ce:	4463      	add	r3, ip
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	059b      	lsls	r3, r3, #22
 80044d4:	0d9a      	lsrs	r2, r3, #22
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	22ac      	movs	r2, #172	; 0xac
 80044e2:	0092      	lsls	r2, r2, #2
 80044e4:	1899      	adds	r1, r3, r2
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f006 f836 	bl	800a560 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	2010      	movs	r0, #16
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	496f      	ldr	r1, [pc, #444]	; (80046c0 <PCD_EP_ISR_Handler+0x318>)
 8004502:	400a      	ands	r2, r1
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	183a      	adds	r2, r7, r0
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	430a      	orrs	r2, r1
 8004512:	b292      	uxth	r2, r2
 8004514:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f007 ffef 	bl	800c4fc <HAL_PCD_SetupStageCallback>
 800451e:	e321      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004520:	2352      	movs	r3, #82	; 0x52
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2200      	movs	r2, #0
 8004526:	5e9b      	ldrsh	r3, [r3, r2]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db00      	blt.n	800452e <PCD_EP_ISR_Handler+0x186>
 800452c:	e31a      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	201e      	movs	r0, #30
 8004538:	183b      	adds	r3, r7, r0
 800453a:	4961      	ldr	r1, [pc, #388]	; (80046c0 <PCD_EP_ISR_Handler+0x318>)
 800453c:	400a      	ands	r2, r1
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	183a      	adds	r2, r7, r0
 8004546:	8812      	ldrh	r2, [r2, #0]
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	430a      	orrs	r2, r1
 800454c:	b292      	uxth	r2, r2
 800454e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2250      	movs	r2, #80	; 0x50
 8004556:	5a9b      	ldrh	r3, [r3, r2]
 8004558:	b29b      	uxth	r3, r3
 800455a:	001a      	movs	r2, r3
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	18d2      	adds	r2, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	18d3      	adds	r3, r2, r3
 800456a:	4a54      	ldr	r2, [pc, #336]	; (80046bc <PCD_EP_ISR_Handler+0x314>)
 800456c:	4694      	mov	ip, r2
 800456e:	4463      	add	r3, ip
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	059b      	lsls	r3, r3, #22
 8004574:	0d9a      	lsrs	r2, r3, #22
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01a      	beq.n	80045b8 <PCD_EP_ISR_Handler+0x210>
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004594:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800459a:	b29b      	uxth	r3, r3
 800459c:	f005 ffe0 	bl	800a560 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2100      	movs	r1, #0
 80045b2:	0018      	movs	r0, r3
 80045b4:	f007 ffb7 	bl	800c526 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	001a      	movs	r2, r3
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4013      	ands	r3, r2
 80045c8:	d000      	beq.n	80045cc <PCD_EP_ISR_Handler+0x224>
 80045ca:	e2cb      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2250      	movs	r2, #80	; 0x50
 80045d8:	5a9b      	ldrh	r3, [r3, r2]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	001a      	movs	r2, r3
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4a35      	ldr	r2, [pc, #212]	; (80046bc <PCD_EP_ISR_Handler+0x314>)
 80045e8:	4694      	mov	ip, r2
 80045ea:	4463      	add	r3, ip
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d110      	bne.n	8004618 <PCD_EP_ISR_Handler+0x270>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4a31      	ldr	r2, [pc, #196]	; (80046c4 <PCD_EP_ISR_Handler+0x31c>)
 80045fe:	4013      	ands	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <PCD_EP_ISR_Handler+0x30c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	b29a      	uxth	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	801a      	strh	r2, [r3, #0]
 8004616:	e02b      	b.n	8004670 <PCD_EP_ISR_Handler+0x2c8>
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b3e      	cmp	r3, #62	; 0x3e
 800461e:	d812      	bhi.n	8004646 <PCD_EP_ISR_Handler+0x29e>
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2201      	movs	r2, #1
 800462e:	4013      	ands	r3, r2
 8004630:	d002      	beq.n	8004638 <PCD_EP_ISR_Handler+0x290>
 8004632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004634:	3301      	adds	r3, #1
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29a      	uxth	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e014      	b.n	8004670 <PCD_EP_ISR_Handler+0x2c8>
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	221f      	movs	r2, #31
 8004654:	4013      	ands	r3, r2
 8004656:	d102      	bne.n	800465e <PCD_EP_ISR_Handler+0x2b6>
 8004658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465a:	3b01      	subs	r3, #1
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	b29b      	uxth	r3, r3
 8004662:	029b      	lsls	r3, r3, #10
 8004664:	b29b      	uxth	r3, r3
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <PCD_EP_ISR_Handler+0x30c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	b29a      	uxth	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29a      	uxth	r2, r3
 8004678:	2012      	movs	r0, #18
 800467a:	183b      	adds	r3, r7, r0
 800467c:	4912      	ldr	r1, [pc, #72]	; (80046c8 <PCD_EP_ISR_Handler+0x320>)
 800467e:	400a      	ands	r2, r1
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	183b      	adds	r3, r7, r0
 8004684:	183a      	adds	r2, r7, r0
 8004686:	8812      	ldrh	r2, [r2, #0]
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	0149      	lsls	r1, r1, #5
 800468c:	404a      	eors	r2, r1
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	183b      	adds	r3, r7, r0
 8004692:	183a      	adds	r2, r7, r0
 8004694:	8812      	ldrh	r2, [r2, #0]
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	0189      	lsls	r1, r1, #6
 800469a:	404a      	eors	r2, r1
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	183a      	adds	r2, r7, r0
 80046a4:	8812      	ldrh	r2, [r2, #0]
 80046a6:	4909      	ldr	r1, [pc, #36]	; (80046cc <PCD_EP_ISR_Handler+0x324>)
 80046a8:	430a      	orrs	r2, r1
 80046aa:	b292      	uxth	r2, r2
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e259      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
 80046b0:	ffff8f0f 	.word	0xffff8f0f
 80046b4:	ffff8000 	.word	0xffff8000
 80046b8:	00000402 	.word	0x00000402
 80046bc:	00000406 	.word	0x00000406
 80046c0:	00000f8f 	.word	0x00000f8f
 80046c4:	ffff83ff 	.word	0xffff83ff
 80046c8:	ffffbf8f 	.word	0xffffbf8f
 80046cc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	001a      	movs	r2, r3
 80046d6:	2055      	movs	r0, #85	; 0x55
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	18d2      	adds	r2, r2, r3
 80046e0:	2152      	movs	r1, #82	; 0x52
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	5e9b      	ldrsh	r3, [r3, r2]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	db00      	blt.n	80046f4 <PCD_EP_ISR_Handler+0x34c>
 80046f2:	e0fa      	b.n	80048ea <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	001a      	movs	r2, r3
 80046fa:	183b      	adds	r3, r7, r0
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	18d3      	adds	r3, r2, r3
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29a      	uxth	r2, r3
 8004706:	2450      	movs	r4, #80	; 0x50
 8004708:	193b      	adds	r3, r7, r4
 800470a:	49cf      	ldr	r1, [pc, #828]	; (8004a48 <PCD_EP_ISR_Handler+0x6a0>)
 800470c:	400a      	ands	r2, r1
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	001a      	movs	r2, r3
 8004716:	183b      	adds	r3, r7, r0
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	18d3      	adds	r3, r2, r3
 800471e:	193a      	adds	r2, r7, r4
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	430a      	orrs	r2, r1
 8004726:	b292      	uxth	r2, r2
 8004728:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800472a:	183b      	adds	r3, r7, r0
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	0013      	movs	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	189b      	adds	r3, r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	3369      	adds	r3, #105	; 0x69
 8004738:	33ff      	adds	r3, #255	; 0xff
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004742:	7b1b      	ldrb	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d125      	bne.n	8004794 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2250      	movs	r2, #80	; 0x50
 800474e:	5a9b      	ldrh	r3, [r3, r2]
 8004750:	b29b      	uxth	r3, r3
 8004752:	001a      	movs	r2, r3
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	18d2      	adds	r2, r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	4aba      	ldr	r2, [pc, #744]	; (8004a4c <PCD_EP_ISR_Handler+0x6a4>)
 8004764:	4694      	mov	ip, r2
 8004766:	4463      	add	r3, ip
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	2448      	movs	r4, #72	; 0x48
 800476c:	193b      	adds	r3, r7, r4
 800476e:	0592      	lsls	r2, r2, #22
 8004770:	0d92      	lsrs	r2, r2, #22
 8004772:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004774:	193b      	adds	r3, r7, r4
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d100      	bne.n	800477e <PCD_EP_ISR_Handler+0x3d6>
 800477c:	e08d      	b.n	800489a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004788:	88da      	ldrh	r2, [r3, #6]
 800478a:	193b      	adds	r3, r7, r4
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f005 fee7 	bl	800a560 <USB_ReadPMA>
 8004792:	e082      	b.n	800489a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004796:	78db      	ldrb	r3, [r3, #3]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d10c      	bne.n	80047b6 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800479c:	2348      	movs	r3, #72	; 0x48
 800479e:	18fc      	adds	r4, r7, r3
 80047a0:	2352      	movs	r3, #82	; 0x52
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	881a      	ldrh	r2, [r3, #0]
 80047a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f9ee 	bl	8004b8c <HAL_PCD_EP_DB_Receive>
 80047b0:	0003      	movs	r3, r0
 80047b2:	8023      	strh	r3, [r4, #0]
 80047b4:	e071      	b.n	800489a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	001a      	movs	r2, r3
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	18d3      	adds	r3, r2, r3
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	204a      	movs	r0, #74	; 0x4a
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	49a0      	ldr	r1, [pc, #640]	; (8004a50 <PCD_EP_ISR_Handler+0x6a8>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	001a      	movs	r2, r3
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	183a      	adds	r2, r7, r0
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	499b      	ldr	r1, [pc, #620]	; (8004a54 <PCD_EP_ISR_Handler+0x6ac>)
 80047e6:	430a      	orrs	r2, r1
 80047e8:	b292      	uxth	r2, r2
 80047ea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	001a      	movs	r2, r3
 80047f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	01db      	lsls	r3, r3, #7
 8004804:	4013      	ands	r3, r2
 8004806:	d024      	beq.n	8004852 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2250      	movs	r2, #80	; 0x50
 800480e:	5a9b      	ldrh	r3, [r3, r2]
 8004810:	b29b      	uxth	r3, r3
 8004812:	001a      	movs	r2, r3
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	18d2      	adds	r2, r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	4a8d      	ldr	r2, [pc, #564]	; (8004a58 <PCD_EP_ISR_Handler+0x6b0>)
 8004824:	4694      	mov	ip, r2
 8004826:	4463      	add	r3, ip
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	2448      	movs	r4, #72	; 0x48
 800482c:	193b      	adds	r3, r7, r4
 800482e:	0592      	lsls	r2, r2, #22
 8004830:	0d92      	lsrs	r2, r2, #22
 8004832:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004834:	193b      	adds	r3, r7, r4
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02e      	beq.n	800489a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	891a      	ldrh	r2, [r3, #8]
 8004848:	193b      	adds	r3, r7, r4
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f005 fe88 	bl	800a560 <USB_ReadPMA>
 8004850:	e023      	b.n	800489a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2250      	movs	r2, #80	; 0x50
 8004858:	5a9b      	ldrh	r3, [r3, r2]
 800485a:	b29b      	uxth	r3, r3
 800485c:	001a      	movs	r2, r3
 800485e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	18d2      	adds	r2, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	18d3      	adds	r3, r2, r3
 800486c:	4a77      	ldr	r2, [pc, #476]	; (8004a4c <PCD_EP_ISR_Handler+0x6a4>)
 800486e:	4694      	mov	ip, r2
 8004870:	4463      	add	r3, ip
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	2448      	movs	r4, #72	; 0x48
 8004876:	193b      	adds	r3, r7, r4
 8004878:	0592      	lsls	r2, r2, #22
 800487a:	0d92      	lsrs	r2, r2, #22
 800487c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800487e:	193b      	adds	r3, r7, r4
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	6959      	ldr	r1, [r3, #20]
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	895a      	ldrh	r2, [r3, #10]
 8004892:	193b      	adds	r3, r7, r4
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f005 fe63 	bl	800a560 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	2148      	movs	r1, #72	; 0x48
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	18d2      	adds	r2, r2, r3
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	18d2      	adds	r2, r2, r3
 80048b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <PCD_EP_ISR_Handler+0x524>
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f007 fe26 	bl	800c526 <HAL_PCD_DataOutStageCallback>
 80048da:	e006      	b.n	80048ea <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f004 fc03 	bl	80090f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048ea:	2452      	movs	r4, #82	; 0x52
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	2280      	movs	r2, #128	; 0x80
 80048f2:	4013      	ands	r3, r2
 80048f4:	d100      	bne.n	80048f8 <PCD_EP_ISR_Handler+0x550>
 80048f6:	e135      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80048f8:	2055      	movs	r0, #85	; 0x55
 80048fa:	183b      	adds	r3, r7, r0
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	0013      	movs	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	189b      	adds	r3, r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	18d3      	adds	r3, r2, r3
 800490c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	001a      	movs	r2, r3
 8004914:	183b      	adds	r3, r7, r0
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	18d3      	adds	r3, r2, r3
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	2542      	movs	r5, #66	; 0x42
 8004922:	197b      	adds	r3, r7, r5
 8004924:	494d      	ldr	r1, [pc, #308]	; (8004a5c <PCD_EP_ISR_Handler+0x6b4>)
 8004926:	400a      	ands	r2, r1
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	001a      	movs	r2, r3
 8004930:	183b      	adds	r3, r7, r0
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	197a      	adds	r2, r7, r5
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	4948      	ldr	r1, [pc, #288]	; (8004a60 <PCD_EP_ISR_Handler+0x6b8>)
 800493e:	430a      	orrs	r2, r1
 8004940:	b292      	uxth	r2, r2
 8004942:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8004944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004946:	78db      	ldrb	r3, [r3, #3]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d100      	bne.n	800494e <PCD_EP_ISR_Handler+0x5a6>
 800494c:	e0ad      	b.n	8004aaa <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004954:	193b      	adds	r3, r7, r4
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4013      	ands	r3, r2
 800495c:	d046      	beq.n	80049ec <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d125      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x60a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2250      	movs	r2, #80	; 0x50
 8004972:	5a9b      	ldrh	r3, [r3, r2]
 8004974:	b29b      	uxth	r3, r3
 8004976:	001a      	movs	r2, r3
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	189b      	adds	r3, r3, r2
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00da      	lsls	r2, r3, #3
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	18d3      	adds	r3, r2, r3
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <PCD_EP_ISR_Handler+0x6b0>)
 800498a:	4694      	mov	ip, r2
 800498c:	4463      	add	r3, ip
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	4a33      	ldr	r2, [pc, #204]	; (8004a64 <PCD_EP_ISR_Handler+0x6bc>)
 8004998:	4013      	ands	r3, r2
 800499a:	b29a      	uxth	r2, r3
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4a2e      	ldr	r2, [pc, #184]	; (8004a60 <PCD_EP_ISR_Handler+0x6b8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	e073      	b.n	8004a9a <PCD_EP_ISR_Handler+0x6f2>
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d16f      	bne.n	8004a9a <PCD_EP_ISR_Handler+0x6f2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2250      	movs	r2, #80	; 0x50
 80049c6:	5a9b      	ldrh	r3, [r3, r2]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	001a      	movs	r2, r3
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	00da      	lsls	r2, r3, #3
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	18d3      	adds	r3, r2, r3
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <PCD_EP_ISR_Handler+0x6b0>)
 80049de:	4694      	mov	ip, r2
 80049e0:	4463      	add	r3, ip
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2200      	movs	r2, #0
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e056      	b.n	8004a9a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d136      	bne.n	8004a68 <PCD_EP_ISR_Handler+0x6c0>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2250      	movs	r2, #80	; 0x50
 8004a06:	5a9b      	ldrh	r3, [r3, r2]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	00da      	lsls	r2, r3, #3
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	18d3      	adds	r3, r2, r3
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <PCD_EP_ISR_Handler+0x6a4>)
 8004a1e:	4694      	mov	ip, r2
 8004a20:	4463      	add	r3, ip
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <PCD_EP_ISR_Handler+0x6bc>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <PCD_EP_ISR_Handler+0x6b8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e029      	b.n	8004a9a <PCD_EP_ISR_Handler+0x6f2>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	00000f8f 	.word	0x00000f8f
 8004a4c:	00000406 	.word	0x00000406
 8004a50:	ffff8f8f 	.word	0xffff8f8f
 8004a54:	ffff80c0 	.word	0xffff80c0
 8004a58:	00000402 	.word	0x00000402
 8004a5c:	ffff8f0f 	.word	0xffff8f0f
 8004a60:	ffff8000 	.word	0xffff8000
 8004a64:	ffff83ff 	.word	0xffff83ff
 8004a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d114      	bne.n	8004a9a <PCD_EP_ISR_Handler+0x6f2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2250      	movs	r2, #80	; 0x50
 8004a76:	5a9b      	ldrh	r3, [r3, r2]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	001a      	movs	r2, r3
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	00da      	lsls	r2, r3, #3
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	4a3d      	ldr	r2, [pc, #244]	; (8004b84 <PCD_EP_ISR_Handler+0x7dc>)
 8004a8e:	4694      	mov	ip, r2
 8004a90:	4463      	add	r3, ip
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2200      	movs	r2, #0
 8004a98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f007 fd60 	bl	800c568 <HAL_PCD_DataInStageCallback>
 8004aa8:	e05c      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aac:	78db      	ldrb	r3, [r3, #3]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d150      	bne.n	8004b54 <PCD_EP_ISR_Handler+0x7ac>
 8004ab2:	2352      	movs	r3, #82	; 0x52
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	d149      	bne.n	8004b54 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2250      	movs	r2, #80	; 0x50
 8004ac6:	5a9b      	ldrh	r3, [r3, r2]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	001a      	movs	r2, r3
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <PCD_EP_ISR_Handler+0x7e0>)
 8004adc:	4694      	mov	ip, r2
 8004ade:	4463      	add	r3, ip
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	2140      	movs	r1, #64	; 0x40
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	0592      	lsls	r2, r2, #22
 8004ae8:	0d92      	lsrs	r2, r2, #22
 8004aea:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d907      	bls.n	8004b08 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	1ad2      	subs	r2, r2, r3
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	619a      	str	r2, [r3, #24]
 8004b06:	e002      	b.n	8004b0e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f007 fd22 	bl	800c568 <HAL_PCD_DataInStageCallback>
 8004b24:	e01e      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	2140      	movs	r1, #64	; 0x40
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	18d2      	adds	r2, r2, r3
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	18d2      	adds	r2, r2, r3
 8004b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b42:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f004 facf 	bl	80090f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004b52:	e007      	b.n	8004b64 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b54:	2352      	movs	r3, #82	; 0x52
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f930 	bl	8004dc4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2244      	movs	r2, #68	; 0x44
 8004b6a:	5a9b      	ldrh	r3, [r3, r2]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da01      	bge.n	8004b78 <PCD_EP_ISR_Handler+0x7d0>
 8004b74:	f7ff fc1e 	bl	80043b4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b016      	add	sp, #88	; 0x58
 8004b80:	bdb0      	pop	{r4, r5, r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	00000406 	.word	0x00000406
 8004b88:	00000402 	.word	0x00000402

08004b8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	1dbb      	adds	r3, r7, #6
 8004b98:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b9a:	1dbb      	adds	r3, r7, #6
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	01db      	lsls	r3, r3, #7
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d100      	bne.n	8004ba8 <HAL_PCD_EP_DB_Receive+0x1c>
 8004ba6:	e07d      	b.n	8004ca4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2250      	movs	r2, #80	; 0x50
 8004bae:	5a9b      	ldrh	r3, [r3, r2]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	18d2      	adds	r2, r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	18d3      	adds	r3, r2, r3
 8004bc2:	4a7a      	ldr	r2, [pc, #488]	; (8004dac <HAL_PCD_EP_DB_Receive+0x220>)
 8004bc4:	4694      	mov	ip, r2
 8004bc6:	4463      	add	r3, ip
 8004bc8:	881a      	ldrh	r2, [r3, #0]
 8004bca:	211a      	movs	r1, #26
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	0592      	lsls	r2, r2, #22
 8004bd0:	0d92      	lsrs	r2, r2, #22
 8004bd2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d307      	bcc.n	8004bf0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	1ad2      	subs	r2, r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	619a      	str	r2, [r3, #24]
 8004bee:	e002      	b.n	8004bf6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d121      	bne.n	8004c42 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	001a      	movs	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	2018      	movs	r0, #24
 8004c12:	183b      	adds	r3, r7, r0
 8004c14:	4966      	ldr	r1, [pc, #408]	; (8004db0 <HAL_PCD_EP_DB_Receive+0x224>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	183b      	adds	r3, r7, r0
 8004c1c:	183a      	adds	r2, r7, r0
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	0189      	lsls	r1, r1, #6
 8004c24:	404a      	eors	r2, r1
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	183a      	adds	r2, r7, r0
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	495e      	ldr	r1, [pc, #376]	; (8004db4 <HAL_PCD_EP_DB_Receive+0x228>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c42:	1dbb      	adds	r3, r7, #6
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	2240      	movs	r2, #64	; 0x40
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d01a      	beq.n	8004c82 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	001a      	movs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	2016      	movs	r0, #22
 8004c60:	183b      	adds	r3, r7, r0
 8004c62:	4955      	ldr	r1, [pc, #340]	; (8004db8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	18d3      	adds	r3, r2, r3
 8004c76:	183a      	adds	r2, r7, r0
 8004c78:	8812      	ldrh	r2, [r2, #0]
 8004c7a:	4950      	ldr	r1, [pc, #320]	; (8004dbc <HAL_PCD_EP_DB_Receive+0x230>)
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004c82:	241a      	movs	r4, #26
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d100      	bne.n	8004c8e <HAL_PCD_EP_DB_Receive+0x102>
 8004c8c:	e086      	b.n	8004d9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	891a      	ldrh	r2, [r3, #8]
 8004c9a:	193b      	adds	r3, r7, r4
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	f005 fc5f 	bl	800a560 <USB_ReadPMA>
 8004ca2:	e07b      	b.n	8004d9c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2250      	movs	r2, #80	; 0x50
 8004caa:	5a9b      	ldrh	r3, [r3, r2]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	001a      	movs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	18d2      	adds	r2, r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_PCD_EP_DB_Receive+0x234>)
 8004cc0:	4694      	mov	ip, r2
 8004cc2:	4463      	add	r3, ip
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	211a      	movs	r1, #26
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	0592      	lsls	r2, r2, #22
 8004ccc:	0d92      	lsrs	r2, r2, #22
 8004cce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d307      	bcc.n	8004cec <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	1ad2      	subs	r2, r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	619a      	str	r2, [r3, #24]
 8004cea:	e002      	b.n	8004cf2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d121      	bne.n	8004d3e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	001a      	movs	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	201e      	movs	r0, #30
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	4927      	ldr	r1, [pc, #156]	; (8004db0 <HAL_PCD_EP_DB_Receive+0x224>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	183a      	adds	r2, r7, r0
 8004d1a:	8812      	ldrh	r2, [r2, #0]
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0189      	lsls	r1, r1, #6
 8004d20:	404a      	eors	r2, r1
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	001a      	movs	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	183a      	adds	r2, r7, r0
 8004d34:	8812      	ldrh	r2, [r2, #0]
 8004d36:	491f      	ldr	r1, [pc, #124]	; (8004db4 <HAL_PCD_EP_DB_Receive+0x228>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	4013      	ands	r3, r2
 8004d46:	d11a      	bne.n	8004d7e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	18d3      	adds	r3, r2, r3
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	201c      	movs	r0, #28
 8004d5c:	183b      	adds	r3, r7, r0
 8004d5e:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	001a      	movs	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	18d3      	adds	r3, r2, r3
 8004d72:	183a      	adds	r2, r7, r0
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	4911      	ldr	r1, [pc, #68]	; (8004dbc <HAL_PCD_EP_DB_Receive+0x230>)
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	b292      	uxth	r2, r2
 8004d7c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004d7e:	241a      	movs	r4, #26
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6959      	ldr	r1, [r3, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	895a      	ldrh	r2, [r3, #10]
 8004d94:	193b      	adds	r3, r7, r4
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	f005 fbe2 	bl	800a560 <USB_ReadPMA>
    }
  }

  return count;
 8004d9c:	231a      	movs	r3, #26
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	881b      	ldrh	r3, [r3, #0]
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b009      	add	sp, #36	; 0x24
 8004da8:	bd90      	pop	{r4, r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	00000402 	.word	0x00000402
 8004db0:	ffffbf8f 	.word	0xffffbf8f
 8004db4:	ffff8080 	.word	0xffff8080
 8004db8:	ffff8f8f 	.word	0xffff8f8f
 8004dbc:	ffff80c0 	.word	0xffff80c0
 8004dc0:	00000406 	.word	0x00000406

08004dc4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b0a2      	sub	sp, #136	; 0x88
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	1dbb      	adds	r3, r7, #6
 8004dd0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dd2:	1dbb      	adds	r3, r7, #6
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_PCD_EP_DB_Transmit+0x1a>
 8004ddc:	e1c8      	b.n	8005170 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2250      	movs	r2, #80	; 0x50
 8004de4:	5a9b      	ldrh	r3, [r3, r2]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	001a      	movs	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	18d2      	adds	r2, r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	18d3      	adds	r3, r2, r3
 8004df8:	4ad7      	ldr	r2, [pc, #860]	; (8005158 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004dfa:	4694      	mov	ip, r2
 8004dfc:	4463      	add	r3, ip
 8004dfe:	881a      	ldrh	r2, [r3, #0]
 8004e00:	214e      	movs	r1, #78	; 0x4e
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	0592      	lsls	r2, r2, #22
 8004e06:	0d92      	lsrs	r2, r2, #22
 8004e08:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	187b      	adds	r3, r7, r1
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d907      	bls.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	187b      	adds	r3, r7, r1
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	619a      	str	r2, [r3, #24]
 8004e24:	e002      	b.n	8004e2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d000      	beq.n	8004e36 <HAL_PCD_EP_DB_Transmit+0x72>
 8004e34:	e0b5      	b.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d125      	bne.n	8004e8a <HAL_PCD_EP_DB_Transmit+0xc6>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2250      	movs	r2, #80	; 0x50
 8004e4a:	5a9b      	ldrh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	001a      	movs	r2, r3
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	00da      	lsls	r2, r3, #3
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	18d3      	adds	r3, r2, r3
 8004e60:	4abd      	ldr	r2, [pc, #756]	; (8005158 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004e62:	4694      	mov	ip, r2
 8004e64:	4463      	add	r3, ip
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4abb      	ldr	r2, [pc, #748]	; (800515c <HAL_PCD_EP_DB_Transmit+0x398>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4ab8      	ldr	r2, [pc, #736]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e01b      	b.n	8004ec2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d117      	bne.n	8004ec2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2250      	movs	r2, #80	; 0x50
 8004e9e:	5a9b      	ldrh	r3, [r3, r2]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	189b      	adds	r3, r3, r2
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00da      	lsls	r2, r3, #3
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	4aa8      	ldr	r2, [pc, #672]	; (8005158 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004eb6:	4694      	mov	ip, r2
 8004eb8:	4463      	add	r3, ip
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d125      	bne.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x158>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2250      	movs	r2, #80	; 0x50
 8004edc:	5a9b      	ldrh	r3, [r3, r2]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	00da      	lsls	r2, r3, #3
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	18d3      	adds	r3, r2, r3
 8004ef2:	4a9c      	ldr	r2, [pc, #624]	; (8005164 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	4463      	add	r3, ip
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4a96      	ldr	r2, [pc, #600]	; (800515c <HAL_PCD_EP_DB_Transmit+0x398>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	4a93      	ldr	r2, [pc, #588]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	e018      	b.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d114      	bne.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2250      	movs	r2, #80	; 0x50
 8004f2a:	5a9b      	ldrh	r3, [r3, r2]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	001a      	movs	r2, r3
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00da      	lsls	r2, r3, #3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	18d3      	adds	r3, r2, r3
 8004f40:	4a88      	ldr	r2, [pc, #544]	; (8005164 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004f42:	4694      	mov	ip, r2
 8004f44:	4463      	add	r3, ip
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	0011      	movs	r1, r2
 8004f56:	0018      	movs	r0, r3
 8004f58:	f007 fb06 	bl	800c568 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f5c:	1dbb      	adds	r3, r7, #6
 8004f5e:	881a      	ldrh	r2, [r3, #0]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	01db      	lsls	r3, r3, #7
 8004f64:	4013      	ands	r3, r2
 8004f66:	d100      	bne.n	8004f6a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004f68:	e2d4      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	001a      	movs	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	18d3      	adds	r3, r2, r3
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	2012      	movs	r0, #18
 8004f7e:	183b      	adds	r3, r7, r0
 8004f80:	4979      	ldr	r1, [pc, #484]	; (8005168 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	183a      	adds	r2, r7, r0
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	4974      	ldr	r1, [pc, #464]	; (800516c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e2b8      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa2:	1dbb      	adds	r3, r7, #6
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4013      	ands	r3, r2
 8004fac:	d01a      	beq.n	8004fe4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	001a      	movs	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	18d3      	adds	r3, r2, r3
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	2044      	movs	r0, #68	; 0x44
 8004fc2:	183b      	adds	r3, r7, r0
 8004fc4:	4968      	ldr	r1, [pc, #416]	; (8005168 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	001a      	movs	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	183a      	adds	r2, r7, r0
 8004fda:	8812      	ldrh	r2, [r2, #0]
 8004fdc:	4963      	ldr	r1, [pc, #396]	; (800516c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2224      	movs	r2, #36	; 0x24
 8004fe8:	5c9b      	ldrb	r3, [r3, r2]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d000      	beq.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004fee:	e291      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	214e      	movs	r1, #78	; 0x4e
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	18d2      	adds	r2, r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	187b      	adds	r3, r7, r1
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	18d2      	adds	r2, r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d309      	bcc.n	800502e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	621a      	str	r2, [r3, #32]
 800502c:	e016      	b.n	800505c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005036:	234e      	movs	r3, #78	; 0x4e
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2224      	movs	r2, #36	; 0x24
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]
 8005046:	e009      	b.n	800505c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d150      	bne.n	8005106 <HAL_PCD_EP_DB_Transmit+0x342>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	63bb      	str	r3, [r7, #56]	; 0x38
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2250      	movs	r2, #80	; 0x50
 8005070:	5a9b      	ldrh	r3, [r3, r2]
 8005072:	b29b      	uxth	r3, r3
 8005074:	001a      	movs	r2, r3
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	189b      	adds	r3, r3, r2
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	00da      	lsls	r2, r3, #3
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	18d3      	adds	r3, r2, r3
 8005086:	4a34      	ldr	r2, [pc, #208]	; (8005158 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005088:	4694      	mov	ip, r2
 800508a:	4463      	add	r3, ip
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005090:	2b00      	cmp	r3, #0
 8005092:	d110      	bne.n	80050b6 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	4a30      	ldr	r2, [pc, #192]	; (800515c <HAL_PCD_EP_DB_Transmit+0x398>)
 800509c:	4013      	ands	r3, r2
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4a2d      	ldr	r2, [pc, #180]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e044      	b.n	8005140 <HAL_PCD_EP_DB_Transmit+0x37c>
 80050b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b8:	2b3e      	cmp	r3, #62	; 0x3e
 80050ba:	d810      	bhi.n	80050de <HAL_PCD_EP_DB_Transmit+0x31a>
 80050bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	d002      	beq.n	80050d0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80050ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050cc:	3301      	adds	r3, #1
 80050ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e030      	b.n	8005140 <HAL_PCD_EP_DB_Transmit+0x37c>
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e6:	221f      	movs	r2, #31
 80050e8:	4013      	ands	r3, r2
 80050ea:	d102      	bne.n	80050f2 <HAL_PCD_EP_DB_Transmit+0x32e>
 80050ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ee:	3b01      	subs	r3, #1
 80050f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e01c      	b.n	8005140 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d118      	bne.n	8005140 <HAL_PCD_EP_DB_Transmit+0x37c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2250      	movs	r2, #80	; 0x50
 800511a:	5a9b      	ldrh	r3, [r3, r2]
 800511c:	b29b      	uxth	r3, r3
 800511e:	001a      	movs	r2, r3
 8005120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005122:	189b      	adds	r3, r3, r2
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	00da      	lsls	r2, r3, #3
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	18d3      	adds	r3, r2, r3
 8005130:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005132:	4694      	mov	ip, r2
 8005134:	4463      	add	r3, ip
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513a:	b29a      	uxth	r2, r3
 800513c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6959      	ldr	r1, [r3, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	891a      	ldrh	r2, [r3, #8]
 800514c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	f005 f9c2 	bl	800a4d8 <USB_WritePMA>
 8005154:	e1de      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	00000402 	.word	0x00000402
 800515c:	ffff83ff 	.word	0xffff83ff
 8005160:	ffff8000 	.word	0xffff8000
 8005164:	00000406 	.word	0x00000406
 8005168:	ffff8f8f 	.word	0xffff8f8f
 800516c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2250      	movs	r2, #80	; 0x50
 8005176:	5a9b      	ldrh	r3, [r3, r2]
 8005178:	b29b      	uxth	r3, r3
 800517a:	001a      	movs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	18d2      	adds	r2, r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	18d3      	adds	r3, r2, r3
 800518a:	4aca      	ldr	r2, [pc, #808]	; (80054b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800518c:	4694      	mov	ip, r2
 800518e:	4463      	add	r3, ip
 8005190:	881a      	ldrh	r2, [r3, #0]
 8005192:	214e      	movs	r1, #78	; 0x4e
 8005194:	187b      	adds	r3, r7, r1
 8005196:	0592      	lsls	r2, r2, #22
 8005198:	0d92      	lsrs	r2, r2, #22
 800519a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d307      	bcc.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e002      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d000      	beq.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x404>
 80051c6:	e0c0      	b.n	800534a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d125      	bne.n	800521c <HAL_PCD_EP_DB_Transmit+0x458>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2250      	movs	r2, #80	; 0x50
 80051dc:	5a9b      	ldrh	r3, [r3, r2]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	001a      	movs	r2, r3
 80051e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e4:	189b      	adds	r3, r3, r2
 80051e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	00da      	lsls	r2, r3, #3
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	18d3      	adds	r3, r2, r3
 80051f2:	4ab1      	ldr	r2, [pc, #708]	; (80054b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80051f4:	4694      	mov	ip, r2
 80051f6:	4463      	add	r3, ip
 80051f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4aae      	ldr	r2, [pc, #696]	; (80054bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005202:	4013      	ands	r3, r2
 8005204:	b29a      	uxth	r2, r3
 8005206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4aab      	ldr	r2, [pc, #684]	; (80054c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	b29a      	uxth	r2, r3
 8005216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e01b      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x490>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d117      	bne.n	8005254 <HAL_PCD_EP_DB_Transmit+0x490>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	677b      	str	r3, [r7, #116]	; 0x74
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2250      	movs	r2, #80	; 0x50
 8005230:	5a9b      	ldrh	r3, [r3, r2]
 8005232:	b29b      	uxth	r3, r3
 8005234:	001a      	movs	r2, r3
 8005236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005238:	189b      	adds	r3, r3, r2
 800523a:	677b      	str	r3, [r7, #116]	; 0x74
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	00da      	lsls	r2, r3, #3
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	4a9c      	ldr	r2, [pc, #624]	; (80054b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005248:	4694      	mov	ip, r2
 800524a:	4463      	add	r3, ip
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
 800524e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005250:	2200      	movs	r2, #0
 8005252:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	67bb      	str	r3, [r7, #120]	; 0x78
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d130      	bne.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x500>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	187a      	adds	r2, r7, r1
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2250      	movs	r2, #80	; 0x50
 8005272:	5a9b      	ldrh	r3, [r3, r2]
 8005274:	b29b      	uxth	r3, r3
 8005276:	001a      	movs	r2, r3
 8005278:	187b      	adds	r3, r7, r1
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	189b      	adds	r3, r3, r2
 800527e:	187a      	adds	r2, r7, r1
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	00da      	lsls	r2, r3, #3
 8005288:	187b      	adds	r3, r7, r1
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	4a89      	ldr	r2, [pc, #548]	; (80054b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005290:	4694      	mov	ip, r2
 8005292:	4463      	add	r3, ip
 8005294:	2184      	movs	r1, #132	; 0x84
 8005296:	187a      	adds	r2, r7, r1
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	187b      	adds	r3, r7, r1
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	4a86      	ldr	r2, [pc, #536]	; (80054bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	4a82      	ldr	r2, [pc, #520]	; (80054c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	e018      	b.n	80052f6 <HAL_PCD_EP_DB_Transmit+0x532>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d114      	bne.n	80052f6 <HAL_PCD_EP_DB_Transmit+0x532>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2250      	movs	r2, #80	; 0x50
 80052d2:	5a9b      	ldrh	r3, [r3, r2]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	001a      	movs	r2, r3
 80052d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	00da      	lsls	r2, r3, #3
 80052e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e6:	18d3      	adds	r3, r2, r3
 80052e8:	4a72      	ldr	r2, [pc, #456]	; (80054b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80052ea:	4694      	mov	ip, r2
 80052ec:	4463      	add	r3, ip
 80052ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052f2:	2200      	movs	r2, #0
 80052f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f007 f932 	bl	800c568 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	4013      	ands	r3, r2
 800530e:	d000      	beq.n	8005312 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005310:	e100      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	001a      	movs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	18d3      	adds	r3, r2, r3
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	2046      	movs	r0, #70	; 0x46
 8005326:	183b      	adds	r3, r7, r0
 8005328:	4966      	ldr	r1, [pc, #408]	; (80054c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 800532a:	400a      	ands	r2, r1
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	001a      	movs	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	183a      	adds	r2, r7, r0
 800533e:	8812      	ldrh	r2, [r2, #0]
 8005340:	4961      	ldr	r1, [pc, #388]	; (80054c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005342:	430a      	orrs	r2, r1
 8005344:	b292      	uxth	r2, r2
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e0e4      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800534a:	1dbb      	adds	r3, r7, #6
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4013      	ands	r3, r2
 8005354:	d11a      	bne.n	800538c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	001a      	movs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29a      	uxth	r2, r3
 8005368:	204c      	movs	r0, #76	; 0x4c
 800536a:	183b      	adds	r3, r7, r0
 800536c:	4955      	ldr	r1, [pc, #340]	; (80054c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 800536e:	400a      	ands	r2, r1
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	001a      	movs	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	183a      	adds	r2, r7, r0
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	4950      	ldr	r1, [pc, #320]	; (80054c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005386:	430a      	orrs	r2, r1
 8005388:	b292      	uxth	r2, r2
 800538a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	5c9b      	ldrb	r3, [r3, r2]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d000      	beq.n	8005398 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005396:	e0bd      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	214e      	movs	r1, #78	; 0x4e
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	187b      	adds	r3, r7, r1
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	18d2      	adds	r2, r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d309      	bcc.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	621a      	str	r2, [r3, #32]
 80053d4:	e016      	b.n	8005404 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d108      	bne.n	80053f0 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80053de:	234e      	movs	r3, #78	; 0x4e
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2224      	movs	r2, #36	; 0x24
 80053ea:	2100      	movs	r1, #0
 80053ec:	5499      	strb	r1, [r3, r2]
 80053ee:	e009      	b.n	8005404 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	667b      	str	r3, [r7, #100]	; 0x64
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d15c      	bne.n	80054cc <HAL_PCD_EP_DB_Transmit+0x708>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2250      	movs	r2, #80	; 0x50
 800541e:	5a9b      	ldrh	r3, [r3, r2]
 8005420:	b29b      	uxth	r3, r3
 8005422:	001a      	movs	r2, r3
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	189b      	adds	r3, r3, r2
 8005428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	00da      	lsls	r2, r3, #3
 8005430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005432:	18d3      	adds	r3, r2, r3
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005436:	4694      	mov	ip, r2
 8005438:	4463      	add	r3, ip
 800543a:	65bb      	str	r3, [r7, #88]	; 0x58
 800543c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543e:	2b00      	cmp	r3, #0
 8005440:	d110      	bne.n	8005464 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800544a:	4013      	ands	r3, r2
 800544c:	b29a      	uxth	r2, r3
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e04d      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d810      	bhi.n	800548c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800546a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	657b      	str	r3, [r7, #84]	; 0x54
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	2201      	movs	r2, #1
 8005474:	4013      	ands	r3, r2
 8005476:	d002      	beq.n	800547e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	3301      	adds	r3, #1
 800547c:	657b      	str	r3, [r7, #84]	; 0x54
 800547e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29a      	uxth	r2, r3
 8005486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e039      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x73c>
 800548c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	657b      	str	r3, [r7, #84]	; 0x54
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	221f      	movs	r2, #31
 8005496:	4013      	ands	r3, r2
 8005498:	d102      	bne.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800549a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549c:	3b01      	subs	r3, #1
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	e025      	b.n	8005500 <HAL_PCD_EP_DB_Transmit+0x73c>
 80054b4:	00000406 	.word	0x00000406
 80054b8:	00000402 	.word	0x00000402
 80054bc:	ffff83ff 	.word	0xffff83ff
 80054c0:	ffff8000 	.word	0xffff8000
 80054c4:	ffff8f8f 	.word	0xffff8f8f
 80054c8:	ffffc080 	.word	0xffffc080
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d115      	bne.n	8005500 <HAL_PCD_EP_DB_Transmit+0x73c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2250      	movs	r2, #80	; 0x50
 80054da:	5a9b      	ldrh	r3, [r3, r2]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	001a      	movs	r2, r3
 80054e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	667b      	str	r3, [r7, #100]	; 0x64
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	00da      	lsls	r2, r3, #3
 80054ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80054f2:	4694      	mov	ip, r2
 80054f4:	4463      	add	r3, ip
 80054f6:	663b      	str	r3, [r7, #96]	; 0x60
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6959      	ldr	r1, [r3, #20]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	895a      	ldrh	r2, [r3, #10]
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	f004 ffe2 	bl	800a4d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	001a      	movs	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	18d3      	adds	r3, r2, r3
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29a      	uxth	r2, r3
 8005526:	2010      	movs	r0, #16
 8005528:	183b      	adds	r3, r7, r0
 800552a:	4911      	ldr	r1, [pc, #68]	; (8005570 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800552c:	400a      	ands	r2, r1
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	183b      	adds	r3, r7, r0
 8005532:	183a      	adds	r2, r7, r0
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	2110      	movs	r1, #16
 8005538:	404a      	eors	r2, r1
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	183b      	adds	r3, r7, r0
 800553e:	183a      	adds	r2, r7, r0
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	2120      	movs	r1, #32
 8005544:	404a      	eors	r2, r1
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	001a      	movs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	183a      	adds	r2, r7, r0
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	4906      	ldr	r1, [pc, #24]	; (8005574 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 800555c:	430a      	orrs	r2, r1
 800555e:	b292      	uxth	r2, r2
 8005560:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b022      	add	sp, #136	; 0x88
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00000406 	.word	0x00000406
 8005570:	ffff8fbf 	.word	0xffff8fbf
 8005574:	ffff8080 	.word	0xffff8080

08005578 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	0008      	movs	r0, r1
 8005582:	0011      	movs	r1, r2
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	240a      	movs	r4, #10
 8005588:	193b      	adds	r3, r7, r4
 800558a:	1c02      	adds	r2, r0, #0
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	2308      	movs	r3, #8
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	1c0a      	adds	r2, r1, #0
 8005594:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005596:	0021      	movs	r1, r4
 8005598:	187b      	adds	r3, r7, r1
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	2280      	movs	r2, #128	; 0x80
 800559e:	4013      	ands	r3, r2
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	2207      	movs	r2, #7
 80055ac:	4013      	ands	r3, r2
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	0013      	movs	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e00b      	b.n	80055d8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055c0:	230a      	movs	r3, #10
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	0013      	movs	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	3369      	adds	r3, #105	; 0x69
 80055d0:	33ff      	adds	r3, #255	; 0xff
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055d8:	2308      	movs	r3, #8
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	80da      	strh	r2, [r3, #6]
 80055f0:	e00b      	b.n	800560a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2201      	movs	r2, #1
 80055f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	b29a      	uxth	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b007      	add	sp, #28
 8005612:	bd90      	pop	{r4, r7, pc}

08005614 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	23ba      	movs	r3, #186	; 0xba
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	2101      	movs	r1, #1
 800562a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	23b8      	movs	r3, #184	; 0xb8
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	2100      	movs	r1, #0
 8005634:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2254      	movs	r2, #84	; 0x54
 800563a:	5a9b      	ldrh	r3, [r3, r2]
 800563c:	b29b      	uxth	r3, r3
 800563e:	2201      	movs	r2, #1
 8005640:	4313      	orrs	r3, r2
 8005642:	b299      	uxth	r1, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2254      	movs	r2, #84	; 0x54
 8005648:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2254      	movs	r2, #84	; 0x54
 800564e:	5a9b      	ldrh	r3, [r3, r2]
 8005650:	b29b      	uxth	r3, r3
 8005652:	2202      	movs	r2, #2
 8005654:	4313      	orrs	r3, r2
 8005656:	b299      	uxth	r1, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2254      	movs	r2, #84	; 0x54
 800565c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b004      	add	sp, #16
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	000a      	movs	r2, r1
 8005672:	1cfb      	adds	r3, r7, #3
 8005674:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f000 fb76 	bl	8005d80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	4013      	ands	r3, r2
 800569c:	d100      	bne.n	80056a0 <HAL_RCC_OscConfig+0x20>
 800569e:	e08e      	b.n	80057be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80056a0:	4bc5      	ldr	r3, [pc, #788]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	220c      	movs	r2, #12
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00e      	beq.n	80056ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056ac:	4bc2      	ldr	r3, [pc, #776]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	220c      	movs	r2, #12
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d117      	bne.n	80056e8 <HAL_RCC_OscConfig+0x68>
 80056b8:	4bbf      	ldr	r3, [pc, #764]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	23c0      	movs	r3, #192	; 0xc0
 80056be:	025b      	lsls	r3, r3, #9
 80056c0:	401a      	ands	r2, r3
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d10e      	bne.n	80056e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ca:	4bbb      	ldr	r3, [pc, #748]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	4013      	ands	r3, r2
 80056d4:	d100      	bne.n	80056d8 <HAL_RCC_OscConfig+0x58>
 80056d6:	e071      	b.n	80057bc <HAL_RCC_OscConfig+0x13c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d000      	beq.n	80056e2 <HAL_RCC_OscConfig+0x62>
 80056e0:	e06c      	b.n	80057bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f000 fb4c 	bl	8005d80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_OscConfig+0x80>
 80056f0:	4bb1      	ldr	r3, [pc, #708]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4bb0      	ldr	r3, [pc, #704]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	0249      	lsls	r1, r1, #9
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e02f      	b.n	8005760 <HAL_RCC_OscConfig+0xe0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10c      	bne.n	8005722 <HAL_RCC_OscConfig+0xa2>
 8005708:	4bab      	ldr	r3, [pc, #684]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4baa      	ldr	r3, [pc, #680]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800570e:	49ab      	ldr	r1, [pc, #684]	; (80059bc <HAL_RCC_OscConfig+0x33c>)
 8005710:	400a      	ands	r2, r1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	4ba8      	ldr	r3, [pc, #672]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4ba7      	ldr	r3, [pc, #668]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800571a:	49a9      	ldr	r1, [pc, #676]	; (80059c0 <HAL_RCC_OscConfig+0x340>)
 800571c:	400a      	ands	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e01e      	b.n	8005760 <HAL_RCC_OscConfig+0xe0>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b05      	cmp	r3, #5
 8005728:	d10e      	bne.n	8005748 <HAL_RCC_OscConfig+0xc8>
 800572a:	4ba3      	ldr	r3, [pc, #652]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4ba2      	ldr	r3, [pc, #648]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	02c9      	lsls	r1, r1, #11
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	4b9f      	ldr	r3, [pc, #636]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b9e      	ldr	r3, [pc, #632]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	0249      	lsls	r1, r1, #9
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xe0>
 8005748:	4b9b      	ldr	r3, [pc, #620]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b9a      	ldr	r3, [pc, #616]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800574e:	499b      	ldr	r1, [pc, #620]	; (80059bc <HAL_RCC_OscConfig+0x33c>)
 8005750:	400a      	ands	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	4b98      	ldr	r3, [pc, #608]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b97      	ldr	r3, [pc, #604]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800575a:	4999      	ldr	r1, [pc, #612]	; (80059c0 <HAL_RCC_OscConfig+0x340>)
 800575c:	400a      	ands	r2, r1
 800575e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d014      	beq.n	8005792 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fd f884 	bl	8002874 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005772:	f7fd f87f 	bl	8002874 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b64      	cmp	r3, #100	; 0x64
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e2fd      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005784:	4b8c      	ldr	r3, [pc, #560]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	4013      	ands	r3, r2
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0xf2>
 8005790:	e015      	b.n	80057be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005792:	f7fd f86f 	bl	8002874 <HAL_GetTick>
 8005796:	0003      	movs	r3, r0
 8005798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800579c:	f7fd f86a 	bl	8002874 <HAL_GetTick>
 80057a0:	0002      	movs	r2, r0
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e2e8      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ae:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	029b      	lsls	r3, r3, #10
 80057b6:	4013      	ands	r3, r2
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x11c>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2202      	movs	r2, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	d100      	bne.n	80057ca <HAL_RCC_OscConfig+0x14a>
 80057c8:	e06c      	b.n	80058a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057ca:	4b7b      	ldr	r3, [pc, #492]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	220c      	movs	r2, #12
 80057d0:	4013      	ands	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057d4:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	220c      	movs	r2, #12
 80057da:	4013      	ands	r3, r2
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d11f      	bne.n	8005820 <HAL_RCC_OscConfig+0x1a0>
 80057e0:	4b75      	ldr	r3, [pc, #468]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	23c0      	movs	r3, #192	; 0xc0
 80057e6:	025b      	lsls	r3, r3, #9
 80057e8:	401a      	ands	r2, r3
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d116      	bne.n	8005820 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	4b71      	ldr	r3, [pc, #452]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2202      	movs	r2, #2
 80057f8:	4013      	ands	r3, r2
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_OscConfig+0x188>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e2bb      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005808:	4b6b      	ldr	r3, [pc, #428]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	22f8      	movs	r2, #248	; 0xf8
 800580e:	4393      	bics	r3, r2
 8005810:	0019      	movs	r1, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00da      	lsls	r2, r3, #3
 8005818:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	e041      	b.n	80058a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d024      	beq.n	8005872 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005828:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800582e:	2101      	movs	r1, #1
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fd f81e 	bl	8002874 <HAL_GetTick>
 8005838:	0003      	movs	r3, r0
 800583a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800583e:	f7fd f819 	bl	8002874 <HAL_GetTick>
 8005842:	0002      	movs	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e297      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2202      	movs	r2, #2
 8005856:	4013      	ands	r3, r2
 8005858:	d0f1      	beq.n	800583e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	4b57      	ldr	r3, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	22f8      	movs	r2, #248	; 0xf8
 8005860:	4393      	bics	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	00da      	lsls	r2, r3, #3
 800586a:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e018      	b.n	80058a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b51      	ldr	r3, [pc, #324]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005878:	2101      	movs	r1, #1
 800587a:	438a      	bics	r2, r1
 800587c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fc fff9 	bl	8002874 <HAL_GetTick>
 8005882:	0003      	movs	r3, r0
 8005884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005888:	f7fc fff4 	bl	8002874 <HAL_GetTick>
 800588c:	0002      	movs	r2, r0
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e272      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589a:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2202      	movs	r2, #2
 80058a0:	4013      	ands	r3, r2
 80058a2:	d1f1      	bne.n	8005888 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2208      	movs	r2, #8
 80058aa:	4013      	ands	r3, r2
 80058ac:	d036      	beq.n	800591c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b6:	4b40      	ldr	r3, [pc, #256]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80058b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ba:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80058bc:	2101      	movs	r1, #1
 80058be:	430a      	orrs	r2, r1
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c2:	f7fc ffd7 	bl	8002874 <HAL_GetTick>
 80058c6:	0003      	movs	r3, r0
 80058c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058cc:	f7fc ffd2 	bl	8002874 <HAL_GetTick>
 80058d0:	0002      	movs	r2, r0
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e250      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	d0f1      	beq.n	80058cc <HAL_RCC_OscConfig+0x24c>
 80058e8:	e018      	b.n	800591c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80058ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ee:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80058f0:	2101      	movs	r1, #1
 80058f2:	438a      	bics	r2, r1
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f6:	f7fc ffbd 	bl	8002874 <HAL_GetTick>
 80058fa:	0003      	movs	r3, r0
 80058fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005900:	f7fc ffb8 	bl	8002874 <HAL_GetTick>
 8005904:	0002      	movs	r2, r0
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e236      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2202      	movs	r2, #2
 8005918:	4013      	ands	r3, r2
 800591a:	d1f1      	bne.n	8005900 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2204      	movs	r2, #4
 8005922:	4013      	ands	r3, r2
 8005924:	d100      	bne.n	8005928 <HAL_RCC_OscConfig+0x2a8>
 8005926:	e0b5      	b.n	8005a94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005928:	201f      	movs	r0, #31
 800592a:	183b      	adds	r3, r7, r0
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	055b      	lsls	r3, r3, #21
 8005938:	4013      	ands	r3, r2
 800593a:	d110      	bne.n	800595e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	0549      	lsls	r1, r1, #21
 8005946:	430a      	orrs	r2, r1
 8005948:	61da      	str	r2, [r3, #28]
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	055b      	lsls	r3, r3, #21
 8005952:	4013      	ands	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005958:	183b      	adds	r3, r7, r0
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_RCC_OscConfig+0x344>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4013      	ands	r3, r2
 8005968:	d11a      	bne.n	80059a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <HAL_RCC_OscConfig+0x344>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_RCC_OscConfig+0x344>)
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	0049      	lsls	r1, r1, #1
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005978:	f7fc ff7c 	bl	8002874 <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005982:	f7fc ff77 	bl	8002874 <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b64      	cmp	r3, #100	; 0x64
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e1f5      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_OscConfig+0x344>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10f      	bne.n	80059c8 <HAL_RCC_OscConfig+0x348>
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	4b02      	ldr	r3, [pc, #8]	; (80059b8 <HAL_RCC_OscConfig+0x338>)
 80059ae:	2101      	movs	r1, #1
 80059b0:	430a      	orrs	r2, r1
 80059b2:	621a      	str	r2, [r3, #32]
 80059b4:	e036      	b.n	8005a24 <HAL_RCC_OscConfig+0x3a4>
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	40021000 	.word	0x40021000
 80059bc:	fffeffff 	.word	0xfffeffff
 80059c0:	fffbffff 	.word	0xfffbffff
 80059c4:	40007000 	.word	0x40007000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10c      	bne.n	80059ea <HAL_RCC_OscConfig+0x36a>
 80059d0:	4bca      	ldr	r3, [pc, #808]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	4bc9      	ldr	r3, [pc, #804]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	438a      	bics	r2, r1
 80059da:	621a      	str	r2, [r3, #32]
 80059dc:	4bc7      	ldr	r3, [pc, #796]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	4bc6      	ldr	r3, [pc, #792]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059e2:	2104      	movs	r1, #4
 80059e4:	438a      	bics	r2, r1
 80059e6:	621a      	str	r2, [r3, #32]
 80059e8:	e01c      	b.n	8005a24 <HAL_RCC_OscConfig+0x3a4>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x38c>
 80059f2:	4bc2      	ldr	r3, [pc, #776]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	4bc1      	ldr	r3, [pc, #772]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 80059f8:	2104      	movs	r1, #4
 80059fa:	430a      	orrs	r2, r1
 80059fc:	621a      	str	r2, [r3, #32]
 80059fe:	4bbf      	ldr	r3, [pc, #764]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	4bbe      	ldr	r3, [pc, #760]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a04:	2101      	movs	r1, #1
 8005a06:	430a      	orrs	r2, r1
 8005a08:	621a      	str	r2, [r3, #32]
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCC_OscConfig+0x3a4>
 8005a0c:	4bbb      	ldr	r3, [pc, #748]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	4bba      	ldr	r3, [pc, #744]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a12:	2101      	movs	r1, #1
 8005a14:	438a      	bics	r2, r1
 8005a16:	621a      	str	r2, [r3, #32]
 8005a18:	4bb8      	ldr	r3, [pc, #736]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	4bb7      	ldr	r3, [pc, #732]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a1e:	2104      	movs	r1, #4
 8005a20:	438a      	bics	r2, r1
 8005a22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d014      	beq.n	8005a56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2c:	f7fc ff22 	bl	8002874 <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	e009      	b.n	8005a4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fc ff1d 	bl	8002874 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	4aaf      	ldr	r2, [pc, #700]	; (8005d00 <HAL_RCC_OscConfig+0x680>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e19a      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4a:	4bac      	ldr	r3, [pc, #688]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	4013      	ands	r3, r2
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x3b6>
 8005a54:	e013      	b.n	8005a7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a56:	f7fc ff0d 	bl	8002874 <HAL_GetTick>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5e:	e009      	b.n	8005a74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a60:	f7fc ff08 	bl	8002874 <HAL_GetTick>
 8005a64:	0002      	movs	r2, r0
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	4aa5      	ldr	r2, [pc, #660]	; (8005d00 <HAL_RCC_OscConfig+0x680>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e185      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a74:	4ba1      	ldr	r3, [pc, #644]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a7e:	231f      	movs	r3, #31
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b9c      	ldr	r3, [pc, #624]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	4b9b      	ldr	r3, [pc, #620]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005a8e:	499d      	ldr	r1, [pc, #628]	; (8005d04 <HAL_RCC_OscConfig+0x684>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d063      	beq.n	8005b66 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d12a      	bne.n	8005afc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005aa6:	4b95      	ldr	r3, [pc, #596]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aaa:	4b94      	ldr	r3, [pc, #592]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005aac:	2104      	movs	r1, #4
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005ab2:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab6:	4b91      	ldr	r3, [pc, #580]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005abe:	f7fc fed9 	bl	8002874 <HAL_GetTick>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ac8:	f7fc fed4 	bl	8002874 <HAL_GetTick>
 8005acc:	0002      	movs	r2, r0
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e152      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ada:	4b88      	ldr	r3, [pc, #544]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	2202      	movs	r2, #2
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d0f1      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ae4:	4b85      	ldr	r3, [pc, #532]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	22f8      	movs	r2, #248	; 0xf8
 8005aea:	4393      	bics	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	00da      	lsls	r2, r3, #3
 8005af4:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005af6:	430a      	orrs	r2, r1
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34
 8005afa:	e034      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	3305      	adds	r3, #5
 8005b02:	d111      	bne.n	8005b28 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005b04:	4b7d      	ldr	r3, [pc, #500]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b08:	4b7c      	ldr	r3, [pc, #496]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b10:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	22f8      	movs	r2, #248	; 0xf8
 8005b16:	4393      	bics	r3, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b22:	430a      	orrs	r2, r1
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34
 8005b26:	e01e      	b.n	8005b66 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b28:	4b74      	ldr	r3, [pc, #464]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2c:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b2e:	2104      	movs	r1, #4
 8005b30:	430a      	orrs	r2, r1
 8005b32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005b34:	4b71      	ldr	r3, [pc, #452]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b38:	4b70      	ldr	r3, [pc, #448]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	438a      	bics	r2, r1
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b40:	f7fc fe98 	bl	8002874 <HAL_GetTick>
 8005b44:	0003      	movs	r3, r0
 8005b46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b4a:	f7fc fe93 	bl	8002874 <HAL_GetTick>
 8005b4e:	0002      	movs	r2, r0
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e111      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b5c:	4b67      	ldr	r3, [pc, #412]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	2202      	movs	r2, #2
 8005b62:	4013      	ands	r3, r2
 8005b64:	d1f1      	bne.n	8005b4a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d05c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005b70:	4b62      	ldr	r3, [pc, #392]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	220c      	movs	r2, #12
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	d00e      	beq.n	8005b9a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005b7c:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	220c      	movs	r2, #12
 8005b82:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d114      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005b88:	4b5c      	ldr	r3, [pc, #368]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	23c0      	movs	r3, #192	; 0xc0
 8005b8e:	025b      	lsls	r3, r3, #9
 8005b90:	401a      	ands	r2, r3
 8005b92:	23c0      	movs	r3, #192	; 0xc0
 8005b94:	025b      	lsls	r3, r3, #9
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d10b      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005b9a:	4b58      	ldr	r3, [pc, #352]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	025b      	lsls	r3, r3, #9
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d040      	beq.n	8005c28 <HAL_RCC_OscConfig+0x5a8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d03c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0e6      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01b      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005bba:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbe:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	0249      	lsls	r1, r1, #9
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc8:	f7fc fe54 	bl	8002874 <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bd2:	f7fc fe4f 	bl	8002874 <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0cd      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	025b      	lsls	r3, r3, #9
 8005bec:	4013      	ands	r3, r2
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x552>
 8005bf0:	e01b      	b.n	8005c2a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005bf2:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf6:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005bf8:	4943      	ldr	r1, [pc, #268]	; (8005d08 <HAL_RCC_OscConfig+0x688>)
 8005bfa:	400a      	ands	r2, r1
 8005bfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfe:	f7fc fe39 	bl	8002874 <HAL_GetTick>
 8005c02:	0003      	movs	r3, r0
 8005c04:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c08:	f7fc fe34 	bl	8002874 <HAL_GetTick>
 8005c0c:	0002      	movs	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e0b2      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005c1a:	4b38      	ldr	r3, [pc, #224]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	025b      	lsls	r3, r3, #9
 8005c22:	4013      	ands	r3, r2
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x588>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c28:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d100      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5b4>
 8005c32:	e0a4      	b.n	8005d7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	220c      	movs	r2, #12
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d100      	bne.n	8005c42 <HAL_RCC_OscConfig+0x5c2>
 8005c40:	e078      	b.n	8005d34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d14c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c50:	492e      	ldr	r1, [pc, #184]	; (8005d0c <HAL_RCC_OscConfig+0x68c>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fc fe0d 	bl	8002874 <HAL_GetTick>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c60:	f7fc fe08 	bl	8002874 <HAL_GetTick>
 8005c64:	0002      	movs	r2, r0
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e086      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	049b      	lsls	r3, r3, #18
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	220f      	movs	r2, #15
 8005c84:	4393      	bics	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8c:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_RCC_OscConfig+0x690>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005cb2:	2180      	movs	r1, #128	; 0x80
 8005cb4:	0449      	lsls	r1, r1, #17
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fc fddb 	bl	8002874 <HAL_GetTick>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fc fdd6 	bl	8002874 <HAL_GetTick>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e054      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	049b      	lsls	r3, r3, #18
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x644>
 8005ce2:	e04c      	b.n	8005d7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <HAL_RCC_OscConfig+0x67c>)
 8005cea:	4908      	ldr	r1, [pc, #32]	; (8005d0c <HAL_RCC_OscConfig+0x68c>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf0:	f7fc fdc0 	bl	8002874 <HAL_GetTick>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cf8:	e015      	b.n	8005d26 <HAL_RCC_OscConfig+0x6a6>
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	00001388 	.word	0x00001388
 8005d04:	efffffff 	.word	0xefffffff
 8005d08:	fffeffff 	.word	0xfffeffff
 8005d0c:	feffffff 	.word	0xfeffffff
 8005d10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fc fdae 	bl	8002874 <HAL_GetTick>
 8005d18:	0002      	movs	r2, r0
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e02c      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d26:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <HAL_RCC_OscConfig+0x708>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	049b      	lsls	r3, r3, #18
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x694>
 8005d32:	e024      	b.n	8005d7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e01f      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_RCC_OscConfig+0x708>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <HAL_RCC_OscConfig+0x708>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	23c0      	movs	r3, #192	; 0xc0
 8005d50:	025b      	lsls	r3, r3, #9
 8005d52:	401a      	ands	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10e      	bne.n	8005d7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	220f      	movs	r2, #15
 8005d60:	401a      	ands	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d107      	bne.n	8005d7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	23f0      	movs	r3, #240	; 0xf0
 8005d6e:	039b      	lsls	r3, r3, #14
 8005d70:	401a      	ands	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d001      	beq.n	8005d7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b008      	add	sp, #32
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40021000 	.word	0x40021000

08005d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0bf      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005da0:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2201      	movs	r2, #1
 8005da6:	4013      	ands	r3, r2
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d911      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dae:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2201      	movs	r2, #1
 8005db4:	4393      	bics	r3, r2
 8005db6:	0019      	movs	r1, r3
 8005db8:	4b5b      	ldr	r3, [pc, #364]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc0:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e0a6      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d015      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2204      	movs	r2, #4
 8005de2:	4013      	ands	r3, r2
 8005de4:	d006      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005de6:	4b51      	ldr	r3, [pc, #324]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4b50      	ldr	r3, [pc, #320]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005dec:	21e0      	movs	r1, #224	; 0xe0
 8005dee:	00c9      	lsls	r1, r1, #3
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df4:	4b4d      	ldr	r3, [pc, #308]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	22f0      	movs	r2, #240	; 0xf0
 8005dfa:	4393      	bics	r3, r2
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d04c      	beq.n	8005eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	4b44      	ldr	r3, [pc, #272]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	4013      	ands	r3, r2
 8005e24:	d120      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e07a      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d107      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	4b3e      	ldr	r3, [pc, #248]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	049b      	lsls	r3, r3, #18
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d114      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e06e      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005e4a:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	025b      	lsls	r3, r3, #9
 8005e52:	4013      	ands	r3, r2
 8005e54:	d108      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e062      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5a:	4b34      	ldr	r3, [pc, #208]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	4013      	ands	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e05b      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	4393      	bics	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e7c:	f7fc fcfa 	bl	8002874 <HAL_GetTick>
 8005e80:	0003      	movs	r3, r0
 8005e82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e84:	e009      	b.n	8005e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e86:	f7fc fcf5 	bl	8002874 <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <HAL_RCC_ClockConfig+0x1a4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e042      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	220c      	movs	r2, #12
 8005ea0:	401a      	ands	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d1ec      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eac:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d211      	bcs.n	8005ede <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4393      	bics	r3, r2
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_RCC_ClockConfig+0x19c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e020      	b.n	8005f20 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <HAL_RCC_ClockConfig+0x1a8>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005efc:	f000 f820 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8005f00:	0001      	movs	r1, r0
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <HAL_RCC_ClockConfig+0x1a0>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	220f      	movs	r2, #15
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <HAL_RCC_ClockConfig+0x1ac>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	000a      	movs	r2, r1
 8005f12:	40da      	lsrs	r2, r3
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <HAL_RCC_ClockConfig+0x1b0>)
 8005f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005f18:	2003      	movs	r0, #3
 8005f1a:	f7fc fc65 	bl	80027e8 <HAL_InitTick>
  
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b004      	add	sp, #16
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40022000 	.word	0x40022000
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	00001388 	.word	0x00001388
 8005f34:	fffff8ff 	.word	0xfffff8ff
 8005f38:	0800d570 	.word	0x0800d570
 8005f3c:	20000000 	.word	0x20000000

08005f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b08f      	sub	sp, #60	; 0x3c
 8005f44:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005f46:	2314      	movs	r3, #20
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	4a38      	ldr	r2, [pc, #224]	; (800602c <HAL_RCC_GetSysClockFreq+0xec>)
 8005f4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005f4e:	c313      	stmia	r3!, {r0, r1, r4}
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005f54:	1d3b      	adds	r3, r7, #4
 8005f56:	4a36      	ldr	r2, [pc, #216]	; (8006030 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005f58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005f5a:	c313      	stmia	r3!, {r0, r1, r4}
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f64:	2300      	movs	r3, #0
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f68:	2300      	movs	r3, #0
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005f74:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	220c      	movs	r2, #12
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d047      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0xd4>
 8005f84:	d849      	bhi.n	800601a <HAL_RCC_GetSysClockFreq+0xda>
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d002      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x50>
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d003      	beq.n	8005f96 <HAL_RCC_GetSysClockFreq+0x56>
 8005f8e:	e044      	b.n	800601a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f94:	e044      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	0c9b      	lsrs	r3, r3, #18
 8005f9a:	220f      	movs	r2, #15
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2214      	movs	r2, #20
 8005fa0:	18ba      	adds	r2, r7, r2
 8005fa2:	5cd3      	ldrb	r3, [r2, r3]
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	220f      	movs	r2, #15
 8005fac:	4013      	ands	r3, r2
 8005fae:	1d3a      	adds	r2, r7, #4
 8005fb0:	5cd3      	ldrb	r3, [r2, r3]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb6:	23c0      	movs	r3, #192	; 0xc0
 8005fb8:	025b      	lsls	r3, r3, #9
 8005fba:	401a      	ands	r2, r3
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	025b      	lsls	r3, r3, #9
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d109      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc6:	481c      	ldr	r0, [pc, #112]	; (8006038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc8:	f7fa f8b0 	bl	800012c <__udivsi3>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	001a      	movs	r2, r3
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	4353      	muls	r3, r2
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd6:	e01a      	b.n	800600e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fda:	23c0      	movs	r3, #192	; 0xc0
 8005fdc:	025b      	lsls	r3, r3, #9
 8005fde:	401a      	ands	r2, r3
 8005fe0:	23c0      	movs	r3, #192	; 0xc0
 8005fe2:	025b      	lsls	r3, r3, #9
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d109      	bne.n	8005ffc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fea:	4814      	ldr	r0, [pc, #80]	; (800603c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fec:	f7fa f89e 	bl	800012c <__udivsi3>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	4353      	muls	r3, r2
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffa:	e008      	b.n	800600e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ffe:	4810      	ldr	r0, [pc, #64]	; (8006040 <HAL_RCC_GetSysClockFreq+0x100>)
 8006000:	f7fa f894 	bl	800012c <__udivsi3>
 8006004:	0003      	movs	r3, r0
 8006006:	001a      	movs	r2, r3
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	4353      	muls	r3, r2
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006012:	e005      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006018:	e002      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <HAL_RCC_GetSysClockFreq+0x100>)
 800601c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800601e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b00f      	add	sp, #60	; 0x3c
 8006028:	bd90      	pop	{r4, r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	0800d494 	.word	0x0800d494
 8006030:	0800d4a4 	.word	0x0800d4a4
 8006034:	40021000 	.word	0x40021000
 8006038:	00f42400 	.word	0x00f42400
 800603c:	02dc6c00 	.word	0x02dc6c00
 8006040:	007a1200 	.word	0x007a1200

08006044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b02      	ldr	r3, [pc, #8]	; (8006054 <HAL_RCC_GetHCLKFreq+0x10>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	20000000 	.word	0x20000000

08006058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800605c:	f7ff fff2 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006060:	0001      	movs	r1, r0
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	2207      	movs	r2, #7
 800606a:	4013      	ands	r3, r2
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	40d9      	lsrs	r1, r3
 8006072:	000b      	movs	r3, r1
}    
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	40021000 	.word	0x40021000
 8006080:	0800d580 	.word	0x0800d580

08006084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	025b      	lsls	r3, r3, #9
 800609c:	4013      	ands	r3, r2
 800609e:	d100      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80060a0:	e08e      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80060a2:	2017      	movs	r0, #23
 80060a4:	183b      	adds	r3, r7, r0
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060aa:	4b6e      	ldr	r3, [pc, #440]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	055b      	lsls	r3, r3, #21
 80060b2:	4013      	ands	r3, r2
 80060b4:	d110      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b6:	4b6b      	ldr	r3, [pc, #428]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	4b6a      	ldr	r3, [pc, #424]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060bc:	2180      	movs	r1, #128	; 0x80
 80060be:	0549      	lsls	r1, r1, #21
 80060c0:	430a      	orrs	r2, r1
 80060c2:	61da      	str	r2, [r3, #28]
 80060c4:	4b67      	ldr	r3, [pc, #412]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	055b      	lsls	r3, r3, #21
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060d2:	183b      	adds	r3, r7, r0
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d8:	4b63      	ldr	r3, [pc, #396]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4013      	ands	r3, r2
 80060e2:	d11a      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060e4:	4b60      	ldr	r3, [pc, #384]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b5f      	ldr	r3, [pc, #380]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	0049      	lsls	r1, r1, #1
 80060ee:	430a      	orrs	r2, r1
 80060f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f2:	f7fc fbbf 	bl	8002874 <HAL_GetTick>
 80060f6:	0003      	movs	r3, r0
 80060f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	e008      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fc:	f7fc fbba 	bl	8002874 <HAL_GetTick>
 8006100:	0002      	movs	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e0a6      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610e:	4b56      	ldr	r3, [pc, #344]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4013      	ands	r3, r2
 8006118:	d0f0      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800611a:	4b52      	ldr	r3, [pc, #328]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	23c0      	movs	r3, #192	; 0xc0
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4013      	ands	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d034      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	23c0      	movs	r3, #192	; 0xc0
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4013      	ands	r3, r2
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	429a      	cmp	r2, r3
 800613a:	d02c      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800613c:	4b49      	ldr	r3, [pc, #292]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006142:	4013      	ands	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006146:	4b47      	ldr	r3, [pc, #284]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006148:	6a1a      	ldr	r2, [r3, #32]
 800614a:	4b46      	ldr	r3, [pc, #280]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	0249      	lsls	r1, r1, #9
 8006150:	430a      	orrs	r2, r1
 8006152:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006154:	4b43      	ldr	r3, [pc, #268]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	4b42      	ldr	r3, [pc, #264]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800615a:	4945      	ldr	r1, [pc, #276]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800615c:	400a      	ands	r2, r1
 800615e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006160:	4b40      	ldr	r3, [pc, #256]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	4013      	ands	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fc fb81 	bl	8002874 <HAL_GetTick>
 8006172:	0003      	movs	r3, r0
 8006174:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006176:	e009      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006178:	f7fc fb7c 	bl	8002874 <HAL_GetTick>
 800617c:	0002      	movs	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a3c      	ldr	r2, [pc, #240]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e067      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	2202      	movs	r2, #2
 8006192:	4013      	ands	r3, r2
 8006194:	d0f0      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006196:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4a34      	ldr	r2, [pc, #208]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800619c:	4013      	ands	r3, r2
 800619e:	0019      	movs	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061a6:	430a      	orrs	r2, r1
 80061a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061aa:	2317      	movs	r3, #23
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b4:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ba:	492f      	ldr	r1, [pc, #188]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80061bc:	400a      	ands	r2, r1
 80061be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	4013      	ands	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ca:	4b26      	ldr	r3, [pc, #152]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	2203      	movs	r2, #3
 80061d0:	4393      	bics	r3, r2
 80061d2:	0019      	movs	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061da:	430a      	orrs	r2, r1
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2202      	movs	r2, #2
 80061e4:	4013      	ands	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061f8:	430a      	orrs	r2, r1
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2220      	movs	r2, #32
 8006202:	4013      	ands	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006206:	4b17      	ldr	r3, [pc, #92]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	2210      	movs	r2, #16
 800620c:	4393      	bics	r3, r2
 800620e:	0019      	movs	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	4b13      	ldr	r3, [pc, #76]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006216:	430a      	orrs	r2, r1
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	4013      	ands	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	2280      	movs	r2, #128	; 0x80
 800622c:	4393      	bics	r3, r2
 800622e:	0019      	movs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006236:	430a      	orrs	r2, r1
 8006238:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4013      	ands	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006246:	4b07      	ldr	r3, [pc, #28]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	4393      	bics	r3, r2
 800624e:	0019      	movs	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006256:	430a      	orrs	r2, r1
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	b006      	add	sp, #24
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40021000 	.word	0x40021000
 8006268:	40007000 	.word	0x40007000
 800626c:	fffffcff 	.word	0xfffffcff
 8006270:	fffeffff 	.word	0xfffeffff
 8006274:	00001388 	.word	0x00001388
 8006278:	efffffff 	.word	0xefffffff
 800627c:	fffcffff 	.word	0xfffcffff

08006280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0a8      	b.n	80063e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	2382      	movs	r3, #130	; 0x82
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d009      	beq.n	80062ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	61da      	str	r2, [r3, #28]
 80062ac:	e005      	b.n	80062ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	225d      	movs	r2, #93	; 0x5d
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	225c      	movs	r2, #92	; 0x5c
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7fb fe76 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	225d      	movs	r2, #93	; 0x5d
 80062e0:	2102      	movs	r1, #2
 80062e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2140      	movs	r1, #64	; 0x40
 80062f0:	438a      	bics	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	23e0      	movs	r3, #224	; 0xe0
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d902      	bls.n	8006306 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e002      	b.n	800630c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	015b      	lsls	r3, r3, #5
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	23f0      	movs	r3, #240	; 0xf0
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	429a      	cmp	r2, r3
 8006316:	d008      	beq.n	800632a <HAL_SPI_Init+0xaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	23e0      	movs	r3, #224	; 0xe0
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	429a      	cmp	r2, r3
 8006322:	d002      	beq.n	800632a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	2382      	movs	r3, #130	; 0x82
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	401a      	ands	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6899      	ldr	r1, [r3, #8]
 8006338:	2384      	movs	r3, #132	; 0x84
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	400b      	ands	r3, r1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2102      	movs	r1, #2
 8006346:	400b      	ands	r3, r1
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2101      	movs	r1, #1
 8006350:	400b      	ands	r3, r1
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	400b      	ands	r3, r1
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	2138      	movs	r1, #56	; 0x38
 8006366:	400b      	ands	r3, r1
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	400b      	ands	r3, r1
 8006372:	431a      	orrs	r2, r3
 8006374:	0011      	movs	r1, r2
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	019b      	lsls	r3, r3, #6
 800637e:	401a      	ands	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	2204      	movs	r2, #4
 8006390:	401a      	ands	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2110      	movs	r1, #16
 8006398:	400b      	ands	r3, r1
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	2108      	movs	r1, #8
 80063a2:	400b      	ands	r3, r1
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68d9      	ldr	r1, [r3, #12]
 80063aa:	23f0      	movs	r3, #240	; 0xf0
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	400b      	ands	r3, r1
 80063b0:	431a      	orrs	r2, r3
 80063b2:	0011      	movs	r1, r2
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	015b      	lsls	r3, r3, #5
 80063ba:	401a      	ands	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69da      	ldr	r2, [r3, #28]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4907      	ldr	r1, [pc, #28]	; (80063ec <HAL_SPI_Init+0x16c>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	225d      	movs	r2, #93	; 0x5d
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	0018      	movs	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b004      	add	sp, #16
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	fffff7ff 	.word	0xfffff7ff

080063f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	1dbb      	adds	r3, r7, #6
 80063fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006400:	231f      	movs	r3, #31
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	225c      	movs	r2, #92	; 0x5c
 800640c:	5c9b      	ldrb	r3, [r3, r2]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_SPI_Transmit+0x26>
 8006412:	2302      	movs	r3, #2
 8006414:	e140      	b.n	8006698 <HAL_SPI_Transmit+0x2a8>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	225c      	movs	r2, #92	; 0x5c
 800641a:	2101      	movs	r1, #1
 800641c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800641e:	f7fc fa29 	bl	8002874 <HAL_GetTick>
 8006422:	0003      	movs	r3, r0
 8006424:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006426:	2316      	movs	r3, #22
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	1dba      	adds	r2, r7, #6
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	225d      	movs	r2, #93	; 0x5d
 8006434:	5c9b      	ldrb	r3, [r3, r2]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d004      	beq.n	8006446 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800643c:	231f      	movs	r3, #31
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	2202      	movs	r2, #2
 8006442:	701a      	strb	r2, [r3, #0]
    goto error;
 8006444:	e11d      	b.n	8006682 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_SPI_Transmit+0x64>
 800644c:	1dbb      	adds	r3, r7, #6
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006454:	231f      	movs	r3, #31
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2201      	movs	r2, #1
 800645a:	701a      	strb	r2, [r3, #0]
    goto error;
 800645c:	e111      	b.n	8006682 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	225d      	movs	r2, #93	; 0x5d
 8006462:	2103      	movs	r1, #3
 8006464:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1dba      	adds	r2, r7, #6
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1dba      	adds	r2, r7, #6
 800647e:	8812      	ldrh	r2, [r2, #0]
 8006480:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2244      	movs	r2, #68	; 0x44
 800648c:	2100      	movs	r1, #0
 800648e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2246      	movs	r2, #70	; 0x46
 8006494:	2100      	movs	r1, #0
 8006496:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d110      	bne.n	80064d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2140      	movs	r1, #64	; 0x40
 80064bc:	438a      	bics	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	01c9      	lsls	r1, r1, #7
 80064ce:	430a      	orrs	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2240      	movs	r2, #64	; 0x40
 80064da:	4013      	ands	r3, r2
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d007      	beq.n	80064f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2140      	movs	r1, #64	; 0x40
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	23e0      	movs	r3, #224	; 0xe0
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d94e      	bls.n	800659a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_SPI_Transmit+0x11e>
 8006504:	2316      	movs	r3, #22
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d13f      	bne.n	800658e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	881a      	ldrh	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	1c9a      	adds	r2, r3, #2
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006532:	e02c      	b.n	800658e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2202      	movs	r2, #2
 800653c:	4013      	ands	r3, r2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d112      	bne.n	8006568 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006566:	e012      	b.n	800658e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006568:	f7fc f984 	bl	8002874 <HAL_GetTick>
 800656c:	0002      	movs	r2, r0
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d802      	bhi.n	800657e <HAL_SPI_Transmit+0x18e>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	d102      	bne.n	8006584 <HAL_SPI_Transmit+0x194>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006584:	231f      	movs	r3, #31
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2203      	movs	r2, #3
 800658a:	701a      	strb	r2, [r3, #0]
          goto error;
 800658c:	e079      	b.n	8006682 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1cd      	bne.n	8006534 <HAL_SPI_Transmit+0x144>
 8006598:	e04f      	b.n	800663a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <HAL_SPI_Transmit+0x1bc>
 80065a2:	2316      	movs	r3, #22
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d141      	bne.n	8006630 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80065d2:	e02d      	b.n	8006630 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d113      	bne.n	800660a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006608:	e012      	b.n	8006630 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660a:	f7fc f933 	bl	8002874 <HAL_GetTick>
 800660e:	0002      	movs	r2, r0
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d802      	bhi.n	8006620 <HAL_SPI_Transmit+0x230>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	d102      	bne.n	8006626 <HAL_SPI_Transmit+0x236>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006626:	231f      	movs	r3, #31
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	2203      	movs	r2, #3
 800662c:	701a      	strb	r2, [r3, #0]
          goto error;
 800662e:	e028      	b.n	8006682 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1cc      	bne.n	80065d4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	0018      	movs	r0, r3
 8006642:	f000 fb2f 	bl	8006ca4 <SPI_EndRxTxTransaction>
 8006646:	1e03      	subs	r3, r0, #0
 8006648:	d002      	beq.n	8006650 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006676:	231f      	movs	r3, #31
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e000      	b.n	8006682 <HAL_SPI_Transmit+0x292>
  }

error:
 8006680:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	225d      	movs	r2, #93	; 0x5d
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	225c      	movs	r2, #92	; 0x5c
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006692:	231f      	movs	r3, #31
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b008      	add	sp, #32
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	001a      	movs	r2, r3
 80066ae:	1cbb      	adds	r3, r7, #2
 80066b0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066b2:	2301      	movs	r3, #1
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066b6:	2323      	movs	r3, #35	; 0x23
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	225c      	movs	r2, #92	; 0x5c
 80066c2:	5c9b      	ldrb	r3, [r3, r2]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x2c>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e1b5      	b.n	8006a38 <HAL_SPI_TransmitReceive+0x398>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	225c      	movs	r2, #92	; 0x5c
 80066d0:	2101      	movs	r1, #1
 80066d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066d4:	f7fc f8ce 	bl	8002874 <HAL_GetTick>
 80066d8:	0003      	movs	r3, r0
 80066da:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066dc:	201b      	movs	r0, #27
 80066de:	183b      	adds	r3, r7, r0
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	215d      	movs	r1, #93	; 0x5d
 80066e4:	5c52      	ldrb	r2, [r2, r1]
 80066e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80066ee:	2312      	movs	r3, #18
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	1cba      	adds	r2, r7, #2
 80066f4:	8812      	ldrh	r2, [r2, #0]
 80066f6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f8:	183b      	adds	r3, r7, r0
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d011      	beq.n	8006724 <HAL_SPI_TransmitReceive+0x84>
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	2382      	movs	r3, #130	; 0x82
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	429a      	cmp	r2, r3
 8006708:	d107      	bne.n	800671a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <HAL_SPI_TransmitReceive+0x7a>
 8006712:	183b      	adds	r3, r7, r0
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d004      	beq.n	8006724 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800671a:	2323      	movs	r3, #35	; 0x23
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	2202      	movs	r2, #2
 8006720:	701a      	strb	r2, [r3, #0]
    goto error;
 8006722:	e17e      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x98>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x98>
 8006730:	1cbb      	adds	r3, r7, #2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006738:	2323      	movs	r3, #35	; 0x23
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006740:	e16f      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	225d      	movs	r2, #93	; 0x5d
 8006746:	5c9b      	ldrb	r3, [r3, r2]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b04      	cmp	r3, #4
 800674c:	d003      	beq.n	8006756 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	225d      	movs	r2, #93	; 0x5d
 8006752:	2105      	movs	r1, #5
 8006754:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1cba      	adds	r2, r7, #2
 8006766:	2146      	movs	r1, #70	; 0x46
 8006768:	8812      	ldrh	r2, [r2, #0]
 800676a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1cba      	adds	r2, r7, #2
 8006770:	2144      	movs	r1, #68	; 0x44
 8006772:	8812      	ldrh	r2, [r2, #0]
 8006774:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1cba      	adds	r2, r7, #2
 8006780:	8812      	ldrh	r2, [r2, #0]
 8006782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1cba      	adds	r2, r7, #2
 8006788:	8812      	ldrh	r2, [r2, #0]
 800678a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	23e0      	movs	r3, #224	; 0xe0
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d908      	bls.n	80067b6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	49a4      	ldr	r1, [pc, #656]	; (8006a40 <HAL_SPI_TransmitReceive+0x3a0>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	e008      	b.n	80067c8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	0149      	lsls	r1, r1, #5
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d007      	beq.n	80067e6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2140      	movs	r1, #64	; 0x40
 80067e2:	430a      	orrs	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	23e0      	movs	r3, #224	; 0xe0
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d800      	bhi.n	80067f4 <HAL_SPI_TransmitReceive+0x154>
 80067f2:	e07f      	b.n	80068f4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x168>
 80067fc:	2312      	movs	r3, #18
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d000      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x168>
 8006806:	e069      	b.n	80068dc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682c:	e056      	b.n	80068dc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2202      	movs	r2, #2
 8006836:	4013      	ands	r3, r2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d11b      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x1d4>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x1d4>
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2b01      	cmp	r3, #1
 800684a:	d113      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2201      	movs	r2, #1
 800687c:	4013      	ands	r3, r2
 800687e:	2b01      	cmp	r3, #1
 8006880:	d11c      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x21c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2246      	movs	r2, #70	; 0x46
 8006886:	5a9b      	ldrh	r3, [r3, r2]
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	b292      	uxth	r2, r2
 800689a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2246      	movs	r2, #70	; 0x46
 80068aa:	5a9b      	ldrh	r3, [r3, r2]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b299      	uxth	r1, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2246      	movs	r2, #70	; 0x46
 80068b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068bc:	f7fb ffda 	bl	8002874 <HAL_GetTick>
 80068c0:	0002      	movs	r2, r0
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d807      	bhi.n	80068dc <HAL_SPI_TransmitReceive+0x23c>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	3301      	adds	r3, #1
 80068d0:	d004      	beq.n	80068dc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80068d2:	2323      	movs	r3, #35	; 0x23
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	2203      	movs	r2, #3
 80068d8:	701a      	strb	r2, [r3, #0]
        goto error;
 80068da:	e0a2      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1a3      	bne.n	800682e <HAL_SPI_TransmitReceive+0x18e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2246      	movs	r2, #70	; 0x46
 80068ea:	5a9b      	ldrh	r3, [r3, r2]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d19d      	bne.n	800682e <HAL_SPI_TransmitReceive+0x18e>
 80068f2:	e085      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x268>
 80068fc:	2312      	movs	r3, #18
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d000      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x268>
 8006906:	e070      	b.n	80069ea <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	7812      	ldrb	r2, [r2, #0]
 8006914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692e:	e05c      	b.n	80069ea <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2202      	movs	r2, #2
 8006938:	4013      	ands	r3, r2
 800693a:	2b02      	cmp	r3, #2
 800693c:	d11c      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x2d8>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d017      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x2d8>
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2b01      	cmp	r3, #1
 800694c:	d114      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2201      	movs	r2, #1
 8006980:	4013      	ands	r3, r2
 8006982:	2b01      	cmp	r3, #1
 8006984:	d11e      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x324>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2246      	movs	r2, #70	; 0x46
 800698a:	5a9b      	ldrh	r3, [r3, r2]
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	001a      	movs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2246      	movs	r2, #70	; 0x46
 80069b2:	5a9b      	ldrh	r3, [r3, r2]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b299      	uxth	r1, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2246      	movs	r2, #70	; 0x46
 80069be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c0:	2301      	movs	r3, #1
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069c4:	f7fb ff56 	bl	8002874 <HAL_GetTick>
 80069c8:	0002      	movs	r2, r0
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d802      	bhi.n	80069da <HAL_SPI_TransmitReceive+0x33a>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	3301      	adds	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x340>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80069e0:	2323      	movs	r3, #35	; 0x23
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	2203      	movs	r2, #3
 80069e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80069e8:	e01b      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d19d      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x290>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2246      	movs	r2, #70	; 0x46
 80069f8:	5a9b      	ldrh	r3, [r3, r2]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d197      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	0018      	movs	r0, r3
 8006a08:	f000 f94c 	bl	8006ca4 <SPI_EndRxTxTransaction>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006a10:	2323      	movs	r3, #35	; 0x23
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	2201      	movs	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a1e:	e000      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006a20:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	225d      	movs	r2, #93	; 0x5d
 8006a26:	2101      	movs	r1, #1
 8006a28:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	225c      	movs	r2, #92	; 0x5c
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a32:	2323      	movs	r3, #35	; 0x23
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	781b      	ldrb	r3, [r3, #0]
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b00a      	add	sp, #40	; 0x28
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	ffffefff 	.word	0xffffefff

08006a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	1dfb      	adds	r3, r7, #7
 8006a52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a54:	f7fb ff0e 	bl	8002874 <HAL_GetTick>
 8006a58:	0002      	movs	r2, r0
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	18d3      	adds	r3, r2, r3
 8006a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a64:	f7fb ff06 	bl	8002874 <HAL_GetTick>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a6c:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	015b      	lsls	r3, r3, #5
 8006a72:	0d1b      	lsrs	r3, r3, #20
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	4353      	muls	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7a:	e058      	b.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	d055      	beq.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a82:	f7fb fef7 	bl	8002874 <HAL_GetTick>
 8006a86:	0002      	movs	r2, r0
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d902      	bls.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d142      	bne.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	21e0      	movs	r1, #224	; 0xe0
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	2382      	movs	r3, #130	; 0x82
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d113      	bne.n	8006adc <SPI_WaitFlagStateUntilTimeout+0x98>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d005      	beq.n	8006acc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d107      	bne.n	8006adc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2140      	movs	r1, #64	; 0x40
 8006ad8:	438a      	bics	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae0:	2380      	movs	r3, #128	; 0x80
 8006ae2:	019b      	lsls	r3, r3, #6
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d110      	bne.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	491a      	ldr	r1, [pc, #104]	; (8006b5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006af4:	400a      	ands	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2180      	movs	r1, #128	; 0x80
 8006b04:	0189      	lsls	r1, r1, #6
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	225d      	movs	r2, #93	; 0x5d
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	225c      	movs	r2, #92	; 0x5c
 8006b16:	2100      	movs	r1, #0
 8006b18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e017      	b.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	425a      	negs	r2, r3
 8006b3e:	4153      	adcs	r3, r2
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	001a      	movs	r2, r3
 8006b44:	1dfb      	adds	r3, r7, #7
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d197      	bne.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	0018      	movs	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b008      	add	sp, #32
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	20000000 	.word	0x20000000
 8006b5c:	ffffdfff 	.word	0xffffdfff

08006b60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b6e:	2317      	movs	r3, #23
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	2200      	movs	r2, #0
 8006b74:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b76:	f7fb fe7d 	bl	8002874 <HAL_GetTick>
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	18d3      	adds	r3, r2, r3
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006b86:	f7fb fe75 	bl	8002874 <HAL_GetTick>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	0013      	movs	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	00da      	lsls	r2, r3, #3
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	0d1b      	lsrs	r3, r3, #20
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	4353      	muls	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006bac:	e068      	b.n	8006c80 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	23c0      	movs	r3, #192	; 0xc0
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d10a      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	2117      	movs	r1, #23
 8006bc6:	187b      	adds	r3, r7, r1
 8006bc8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	d055      	beq.n	8006c80 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bd4:	f7fb fe4e 	bl	8002874 <HAL_GetTick>
 8006bd8:	0002      	movs	r2, r0
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d902      	bls.n	8006bea <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d142      	bne.n	8006c70 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	21e0      	movs	r1, #224	; 0xe0
 8006bf6:	438a      	bics	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	2382      	movs	r3, #130	; 0x82
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d113      	bne.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d005      	beq.n	8006c1e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	2380      	movs	r3, #128	; 0x80
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d107      	bne.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c32:	2380      	movs	r3, #128	; 0x80
 8006c34:	019b      	lsls	r3, r3, #6
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d110      	bne.n	8006c5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4916      	ldr	r1, [pc, #88]	; (8006ca0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	0189      	lsls	r1, r1, #6
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	225d      	movs	r2, #93	; 0x5d
 8006c60:	2101      	movs	r1, #1
 8006c62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	225c      	movs	r2, #92	; 0x5c
 8006c68:	2100      	movs	r1, #0
 8006c6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e010      	b.n	8006c92 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d18e      	bne.n	8006bae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b00a      	add	sp, #40	; 0x28
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	ffffdfff 	.word	0xffffdfff

08006ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	23c0      	movs	r3, #192	; 0xc0
 8006cb4:	0159      	lsls	r1, r3, #5
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	0013      	movs	r3, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f7ff ff4e 	bl	8006b60 <SPI_WaitFifoStateUntilTimeout>
 8006cc4:	1e03      	subs	r3, r0, #0
 8006cc6:	d007      	beq.n	8006cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ccc:	2220      	movs	r2, #32
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e027      	b.n	8006d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	0013      	movs	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	f7ff fead 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006cea:	1e03      	subs	r3, r0, #0
 8006cec:	d007      	beq.n	8006cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e014      	b.n	8006d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	23c0      	movs	r3, #192	; 0xc0
 8006d02:	00d9      	lsls	r1, r3, #3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	0013      	movs	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f7ff ff27 	bl	8006b60 <SPI_WaitFifoStateUntilTimeout>
 8006d12:	1e03      	subs	r3, r0, #0
 8006d14:	d007      	beq.n	8006d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e000      	b.n	8006d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b004      	add	sp, #16
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e042      	b.n	8006dc8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	223d      	movs	r2, #61	; 0x3d
 8006d46:	5c9b      	ldrb	r3, [r3, r2]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d107      	bne.n	8006d5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	223c      	movs	r2, #60	; 0x3c
 8006d52:	2100      	movs	r1, #0
 8006d54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f7fb f983 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	223d      	movs	r2, #61	; 0x3d
 8006d62:	2102      	movs	r1, #2
 8006d64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	0019      	movs	r1, r3
 8006d70:	0010      	movs	r0, r2
 8006d72:	f000 fa65 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2246      	movs	r2, #70	; 0x46
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	223e      	movs	r2, #62	; 0x3e
 8006d82:	2101      	movs	r1, #1
 8006d84:	5499      	strb	r1, [r3, r2]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	223f      	movs	r2, #63	; 0x3f
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	5499      	strb	r1, [r3, r2]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2240      	movs	r2, #64	; 0x40
 8006d92:	2101      	movs	r1, #1
 8006d94:	5499      	strb	r1, [r3, r2]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2241      	movs	r2, #65	; 0x41
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2242      	movs	r2, #66	; 0x42
 8006da2:	2101      	movs	r1, #1
 8006da4:	5499      	strb	r1, [r3, r2]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2243      	movs	r2, #67	; 0x43
 8006daa:	2101      	movs	r1, #1
 8006dac:	5499      	strb	r1, [r3, r2]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2244      	movs	r2, #68	; 0x44
 8006db2:	2101      	movs	r1, #1
 8006db4:	5499      	strb	r1, [r3, r2]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2245      	movs	r2, #69	; 0x45
 8006dba:	2101      	movs	r1, #1
 8006dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	223d      	movs	r2, #61	; 0x3d
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	223d      	movs	r2, #61	; 0x3d
 8006ddc:	5c9b      	ldrb	r3, [r3, r2]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d001      	beq.n	8006de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e03b      	b.n	8006e60 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	223d      	movs	r2, #61	; 0x3d
 8006dec:	2102      	movs	r1, #2
 8006dee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_TIM_Base_Start_IT+0x98>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x5a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	05db      	lsls	r3, r3, #23
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d009      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x5a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <HAL_TIM_Base_Start_IT+0x9c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIM_Base_Start_IT+0x5a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d111      	bne.n	8006e4e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2207      	movs	r2, #7
 8006e32:	4013      	ands	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d010      	beq.n	8006e5e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2101      	movs	r1, #1
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	e007      	b.n	8006e5e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	0018      	movs	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b004      	add	sp, #16
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40014000 	.word	0x40014000

08006e74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e042      	b.n	8006f0c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	223d      	movs	r2, #61	; 0x3d
 8006e8a:	5c9b      	ldrb	r3, [r3, r2]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d107      	bne.n	8006ea2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	223c      	movs	r2, #60	; 0x3c
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 f839 	bl	8006f14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	223d      	movs	r2, #61	; 0x3d
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	0010      	movs	r0, r2
 8006eb6:	f000 f9c3 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2246      	movs	r2, #70	; 0x46
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	223e      	movs	r2, #62	; 0x3e
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	5499      	strb	r1, [r3, r2]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	223f      	movs	r2, #63	; 0x3f
 8006ece:	2101      	movs	r1, #1
 8006ed0:	5499      	strb	r1, [r3, r2]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2240      	movs	r2, #64	; 0x40
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	5499      	strb	r1, [r3, r2]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2241      	movs	r2, #65	; 0x41
 8006ede:	2101      	movs	r1, #1
 8006ee0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2242      	movs	r2, #66	; 0x42
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	5499      	strb	r1, [r3, r2]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2243      	movs	r2, #67	; 0x43
 8006eee:	2101      	movs	r1, #1
 8006ef0:	5499      	strb	r1, [r3, r2]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2244      	movs	r2, #68	; 0x44
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	5499      	strb	r1, [r3, r2]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2245      	movs	r2, #69	; 0x45
 8006efe:	2101      	movs	r1, #1
 8006f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	223d      	movs	r2, #61	; 0x3d
 8006f06:	2101      	movs	r1, #1
 8006f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b002      	add	sp, #8
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f1c:	46c0      	nop			; (mov r8, r8)
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b002      	add	sp, #8
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2202      	movs	r2, #2
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d124      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d11d      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	4252      	negs	r2, r2
 8006f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	4013      	ands	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 f952 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006f6c:	e007      	b.n	8006f7e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 f945 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f951 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d125      	bne.n	8006fde <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2204      	movs	r2, #4
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d11e      	bne.n	8006fde <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2205      	movs	r2, #5
 8006fa6:	4252      	negs	r2, r2
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	23c0      	movs	r3, #192	; 0xc0
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 f925 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006fc6:	e007      	b.n	8006fd8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f918 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 f924 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d124      	bne.n	8007036 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d11d      	bne.n	8007036 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2209      	movs	r2, #9
 8007000:	4252      	negs	r2, r2
 8007002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2204      	movs	r2, #4
 8007008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	2203      	movs	r2, #3
 8007012:	4013      	ands	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f000 f8f9 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 800701e:	e007      	b.n	8007030 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0018      	movs	r0, r3
 8007024:	f000 f8ec 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f000 f8f8 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2210      	movs	r2, #16
 800703e:	4013      	ands	r3, r2
 8007040:	2b10      	cmp	r3, #16
 8007042:	d125      	bne.n	8007090 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2210      	movs	r2, #16
 800704c:	4013      	ands	r3, r2
 800704e:	2b10      	cmp	r3, #16
 8007050:	d11e      	bne.n	8007090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2211      	movs	r2, #17
 8007058:	4252      	negs	r2, r2
 800705a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2208      	movs	r2, #8
 8007060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	23c0      	movs	r3, #192	; 0xc0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	0018      	movs	r0, r3
 8007074:	f000 f8cc 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8007078:	e007      	b.n	800708a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0018      	movs	r0, r3
 800707e:	f000 f8bf 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 f8cb 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2201      	movs	r2, #1
 8007098:	4013      	ands	r3, r2
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10f      	bne.n	80070be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d108      	bne.n	80070be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2202      	movs	r2, #2
 80070b2:	4252      	negs	r2, r2
 80070b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7f9 fe17 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2280      	movs	r2, #128	; 0x80
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d10f      	bne.n	80070ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d108      	bne.n	80070ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2281      	movs	r2, #129	; 0x81
 80070e0:	4252      	negs	r2, r2
 80070e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	0018      	movs	r0, r3
 80070e8:	f000 fb2e 	bl	8007748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b40      	cmp	r3, #64	; 0x40
 80070f8:	d10f      	bne.n	800711a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2240      	movs	r2, #64	; 0x40
 8007102:	4013      	ands	r3, r2
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d108      	bne.n	800711a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2241      	movs	r2, #65	; 0x41
 800710e:	4252      	negs	r2, r2
 8007110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f88b 	bl	8007230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2220      	movs	r2, #32
 8007122:	4013      	ands	r3, r2
 8007124:	2b20      	cmp	r3, #32
 8007126:	d10f      	bne.n	8007148 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	4013      	ands	r3, r2
 8007132:	2b20      	cmp	r3, #32
 8007134:	d108      	bne.n	8007148 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2221      	movs	r2, #33	; 0x21
 800713c:	4252      	negs	r2, r2
 800713e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0018      	movs	r0, r3
 8007144:	f000 faf8 	bl	8007738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b002      	add	sp, #8
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800715c:	2317      	movs	r3, #23
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	223c      	movs	r2, #60	; 0x3c
 8007168:	5c9b      	ldrb	r3, [r3, r2]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_TIM_OC_ConfigChannel+0x22>
 800716e:	2302      	movs	r3, #2
 8007170:	e042      	b.n	80071f8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	223c      	movs	r2, #60	; 0x3c
 8007176:	2101      	movs	r1, #1
 8007178:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b0c      	cmp	r3, #12
 800717e:	d027      	beq.n	80071d0 <HAL_TIM_OC_ConfigChannel+0x80>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d82c      	bhi.n	80071e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d019      	beq.n	80071c0 <HAL_TIM_OC_ConfigChannel+0x70>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d826      	bhi.n	80071e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_TIM_OC_ConfigChannel+0x50>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d008      	beq.n	80071b0 <HAL_TIM_OC_ConfigChannel+0x60>
 800719e:	e01f      	b.n	80071e0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0011      	movs	r1, r2
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 f8c9 	bl	8007340 <TIM_OC1_SetConfig>
      break;
 80071ae:	e01c      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	0011      	movs	r1, r2
 80071b8:	0018      	movs	r0, r3
 80071ba:	f000 f949 	bl	8007450 <TIM_OC2_SetConfig>
      break;
 80071be:	e014      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 f9c5 	bl	8007558 <TIM_OC3_SetConfig>
      break;
 80071ce:	e00c      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0011      	movs	r1, r2
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 fa43 	bl	8007664 <TIM_OC4_SetConfig>
      break;
 80071de:	e004      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80071e0:	2317      	movs	r3, #23
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2201      	movs	r2, #1
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	223c      	movs	r2, #60	; 0x3c
 80071ee:	2100      	movs	r1, #0
 80071f0:	5499      	strb	r1, [r3, r2]

  return status;
 80071f2:	2317      	movs	r3, #23
 80071f4:	18fb      	adds	r3, r7, r3
 80071f6:	781b      	ldrb	r3, [r3, #0]
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b006      	add	sp, #24
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b002      	add	sp, #8
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b002      	add	sp, #8
 800723e:	bd80      	pop	{r7, pc}

08007240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a34      	ldr	r2, [pc, #208]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d008      	beq.n	800726a <TIM_Base_SetConfig+0x2a>
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	2380      	movs	r3, #128	; 0x80
 800725c:	05db      	lsls	r3, r3, #23
 800725e:	429a      	cmp	r2, r3
 8007260:	d003      	beq.n	800726a <TIM_Base_SetConfig+0x2a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a30      	ldr	r2, [pc, #192]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d108      	bne.n	800727c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2270      	movs	r2, #112	; 0x70
 800726e:	4393      	bics	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	05db      	lsls	r3, r3, #23
 800728a:	429a      	cmp	r2, r3
 800728c:	d013      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a25      	ldr	r2, [pc, #148]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a24      	ldr	r2, [pc, #144]	; (800732c <TIM_Base_SetConfig+0xec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a23      	ldr	r2, [pc, #140]	; (8007330 <TIM_Base_SetConfig+0xf0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a22      	ldr	r2, [pc, #136]	; (8007334 <TIM_Base_SetConfig+0xf4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a21      	ldr	r2, [pc, #132]	; (8007338 <TIM_Base_SetConfig+0xf8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d108      	bne.n	80072c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a20      	ldr	r2, [pc, #128]	; (800733c <TIM_Base_SetConfig+0xfc>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2280      	movs	r2, #128	; 0x80
 80072cc:	4393      	bics	r3, r2
 80072ce:	001a      	movs	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a0c      	ldr	r2, [pc, #48]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00b      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <TIM_Base_SetConfig+0xf0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d007      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a0c      	ldr	r2, [pc, #48]	; (8007334 <TIM_Base_SetConfig+0xf4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <TIM_Base_SetConfig+0xf8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d103      	bne.n	8007316 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	615a      	str	r2, [r3, #20]
}
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	46bd      	mov	sp, r7
 8007320:	b004      	add	sp, #16
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40000400 	.word	0x40000400
 800732c:	40002000 	.word	0x40002000
 8007330:	40014000 	.word	0x40014000
 8007334:	40014400 	.word	0x40014400
 8007338:	40014800 	.word	0x40014800
 800733c:	fffffcff 	.word	0xfffffcff

08007340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	2201      	movs	r2, #1
 8007350:	4393      	bics	r3, r2
 8007352:	001a      	movs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2270      	movs	r2, #112	; 0x70
 800736e:	4393      	bics	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2203      	movs	r2, #3
 8007376:	4393      	bics	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2202      	movs	r2, #2
 8007388:	4393      	bics	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a27      	ldr	r2, [pc, #156]	; (8007438 <TIM_OC1_SetConfig+0xf8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00b      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a26      	ldr	r2, [pc, #152]	; (800743c <TIM_OC1_SetConfig+0xfc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d007      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <TIM_OC1_SetConfig+0x100>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d003      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a24      	ldr	r2, [pc, #144]	; (8007444 <TIM_OC1_SetConfig+0x104>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d10c      	bne.n	80073d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2208      	movs	r2, #8
 80073ba:	4393      	bics	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2204      	movs	r2, #4
 80073cc:	4393      	bics	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a19      	ldr	r2, [pc, #100]	; (8007438 <TIM_OC1_SetConfig+0xf8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <TIM_OC1_SetConfig+0xfc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a17      	ldr	r2, [pc, #92]	; (8007440 <TIM_OC1_SetConfig+0x100>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a16      	ldr	r2, [pc, #88]	; (8007444 <TIM_OC1_SetConfig+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d111      	bne.n	8007414 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <TIM_OC1_SetConfig+0x108>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4a14      	ldr	r2, [pc, #80]	; (800744c <TIM_OC1_SetConfig+0x10c>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b006      	add	sp, #24
 8007434:	bd80      	pop	{r7, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	fffffeff 	.word	0xfffffeff
 800744c:	fffffdff 	.word	0xfffffdff

08007450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	2210      	movs	r2, #16
 8007460:	4393      	bics	r3, r2
 8007462:	001a      	movs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a2e      	ldr	r2, [pc, #184]	; (8007538 <TIM_OC2_SetConfig+0xe8>)
 800747e:	4013      	ands	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a2d      	ldr	r2, [pc, #180]	; (800753c <TIM_OC2_SetConfig+0xec>)
 8007486:	4013      	ands	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2220      	movs	r2, #32
 800749a:	4393      	bics	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a24      	ldr	r2, [pc, #144]	; (8007540 <TIM_OC2_SetConfig+0xf0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d10d      	bne.n	80074ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2280      	movs	r2, #128	; 0x80
 80074b6:	4393      	bics	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	4393      	bics	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <TIM_OC2_SetConfig+0xf0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <TIM_OC2_SetConfig+0xf4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <TIM_OC2_SetConfig+0xf8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a18      	ldr	r2, [pc, #96]	; (800754c <TIM_OC2_SetConfig+0xfc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d113      	bne.n	8007516 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4a17      	ldr	r2, [pc, #92]	; (8007550 <TIM_OC2_SetConfig+0x100>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4a16      	ldr	r2, [pc, #88]	; (8007554 <TIM_OC2_SetConfig+0x104>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b006      	add	sp, #24
 8007536:	bd80      	pop	{r7, pc}
 8007538:	ffff8fff 	.word	0xffff8fff
 800753c:	fffffcff 	.word	0xfffffcff
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400
 800754c:	40014800 	.word	0x40014800
 8007550:	fffffbff 	.word	0xfffffbff
 8007554:	fffff7ff 	.word	0xfffff7ff

08007558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	4a35      	ldr	r2, [pc, #212]	; (800763c <TIM_OC3_SetConfig+0xe4>)
 8007568:	401a      	ands	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2270      	movs	r2, #112	; 0x70
 8007584:	4393      	bics	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	4393      	bics	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4a28      	ldr	r2, [pc, #160]	; (8007640 <TIM_OC3_SetConfig+0xe8>)
 800759e:	4013      	ands	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a24      	ldr	r2, [pc, #144]	; (8007644 <TIM_OC3_SetConfig+0xec>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10d      	bne.n	80075d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4a23      	ldr	r2, [pc, #140]	; (8007648 <TIM_OC3_SetConfig+0xf0>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <TIM_OC3_SetConfig+0xf4>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1b      	ldr	r2, [pc, #108]	; (8007644 <TIM_OC3_SetConfig+0xec>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <TIM_OC3_SetConfig+0xf8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <TIM_OC3_SetConfig+0xfc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <TIM_OC3_SetConfig+0x100>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d113      	bne.n	800761a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <TIM_OC3_SetConfig+0x104>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <TIM_OC3_SetConfig+0x108>)
 80075fe:	4013      	ands	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b006      	add	sp, #24
 800763a:	bd80      	pop	{r7, pc}
 800763c:	fffffeff 	.word	0xfffffeff
 8007640:	fffffdff 	.word	0xfffffdff
 8007644:	40012c00 	.word	0x40012c00
 8007648:	fffff7ff 	.word	0xfffff7ff
 800764c:	fffffbff 	.word	0xfffffbff
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800
 800765c:	ffffefff 	.word	0xffffefff
 8007660:	ffffdfff 	.word	0xffffdfff

08007664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	4a28      	ldr	r2, [pc, #160]	; (8007714 <TIM_OC4_SetConfig+0xb0>)
 8007674:	401a      	ands	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <TIM_OC4_SetConfig+0xb4>)
 8007690:	4013      	ands	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a21      	ldr	r2, [pc, #132]	; (800771c <TIM_OC4_SetConfig+0xb8>)
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <TIM_OC4_SetConfig+0xbc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	031b      	lsls	r3, r3, #12
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <TIM_OC4_SetConfig+0xc0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00b      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <TIM_OC4_SetConfig+0xc4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d007      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <TIM_OC4_SetConfig+0xc8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <TIM_OC4_SetConfig+0xcc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d109      	bne.n	80076f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <TIM_OC4_SetConfig+0xd0>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	019b      	lsls	r3, r3, #6
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	621a      	str	r2, [r3, #32]
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	b006      	add	sp, #24
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	ffffefff 	.word	0xffffefff
 8007718:	ffff8fff 	.word	0xffff8fff
 800771c:	fffffcff 	.word	0xfffffcff
 8007720:	ffffdfff 	.word	0xffffdfff
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	ffffbfff 	.word	0xffffbfff

08007738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	46bd      	mov	sp, r7
 8007744:	b002      	add	sp, #8
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	46bd      	mov	sp, r7
 8007754:	b002      	add	sp, #8
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e044      	b.n	80077f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2274      	movs	r2, #116	; 0x74
 8007776:	2100      	movs	r1, #0
 8007778:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f7fa fc99 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2224      	movs	r2, #36	; 0x24
 8007786:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2101      	movs	r1, #1
 8007794:	438a      	bics	r2, r1
 8007796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	0018      	movs	r0, r3
 800779c:	f000 fb24 	bl	8007de8 <UART_SetConfig>
 80077a0:	0003      	movs	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e024      	b.n	80077f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 fc9f 	bl	80080f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	490d      	ldr	r1, [pc, #52]	; (80077fc <HAL_UART_Init+0xa4>)
 80077c6:	400a      	ands	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	212a      	movs	r1, #42	; 0x2a
 80077d6:	438a      	bics	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2101      	movs	r1, #1
 80077e6:	430a      	orrs	r2, r1
 80077e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	0018      	movs	r0, r3
 80077ee:	f000 fd37 	bl	8008260 <UART_CheckIdleState>
 80077f2:	0003      	movs	r3, r0
}
 80077f4:	0018      	movs	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	b002      	add	sp, #8
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	ffffb7ff 	.word	0xffffb7ff

08007800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b0ab      	sub	sp, #172	; 0xac
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	22a4      	movs	r2, #164	; 0xa4
 8007810:	18b9      	adds	r1, r7, r2
 8007812:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	20a0      	movs	r0, #160	; 0xa0
 800781c:	1839      	adds	r1, r7, r0
 800781e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	219c      	movs	r1, #156	; 0x9c
 8007828:	1879      	adds	r1, r7, r1
 800782a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800782c:	0011      	movs	r1, r2
 800782e:	18bb      	adds	r3, r7, r2
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a99      	ldr	r2, [pc, #612]	; (8007a98 <HAL_UART_IRQHandler+0x298>)
 8007834:	4013      	ands	r3, r2
 8007836:	2298      	movs	r2, #152	; 0x98
 8007838:	18bc      	adds	r4, r7, r2
 800783a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800783c:	18bb      	adds	r3, r7, r2
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d114      	bne.n	800786e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007844:	187b      	adds	r3, r7, r1
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2220      	movs	r2, #32
 800784a:	4013      	ands	r3, r2
 800784c:	d00f      	beq.n	800786e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800784e:	183b      	adds	r3, r7, r0
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2220      	movs	r2, #32
 8007854:	4013      	ands	r3, r2
 8007856:	d00a      	beq.n	800786e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785c:	2b00      	cmp	r3, #0
 800785e:	d100      	bne.n	8007862 <HAL_UART_IRQHandler+0x62>
 8007860:	e296      	b.n	8007d90 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	0010      	movs	r0, r2
 800786a:	4798      	blx	r3
      }
      return;
 800786c:	e290      	b.n	8007d90 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800786e:	2398      	movs	r3, #152	; 0x98
 8007870:	18fb      	adds	r3, r7, r3
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d100      	bne.n	800787a <HAL_UART_IRQHandler+0x7a>
 8007878:	e114      	b.n	8007aa4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800787a:	239c      	movs	r3, #156	; 0x9c
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2201      	movs	r2, #1
 8007882:	4013      	ands	r3, r2
 8007884:	d106      	bne.n	8007894 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007886:	23a0      	movs	r3, #160	; 0xa0
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a83      	ldr	r2, [pc, #524]	; (8007a9c <HAL_UART_IRQHandler+0x29c>)
 800788e:	4013      	ands	r3, r2
 8007890:	d100      	bne.n	8007894 <HAL_UART_IRQHandler+0x94>
 8007892:	e107      	b.n	8007aa4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007894:	23a4      	movs	r3, #164	; 0xa4
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2201      	movs	r2, #1
 800789c:	4013      	ands	r3, r2
 800789e:	d012      	beq.n	80078c6 <HAL_UART_IRQHandler+0xc6>
 80078a0:	23a0      	movs	r3, #160	; 0xa0
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	2380      	movs	r3, #128	; 0x80
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	4013      	ands	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2201      	movs	r2, #1
 80078b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2280      	movs	r2, #128	; 0x80
 80078ba:	589b      	ldr	r3, [r3, r2]
 80078bc:	2201      	movs	r2, #1
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2180      	movs	r1, #128	; 0x80
 80078c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c6:	23a4      	movs	r3, #164	; 0xa4
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2202      	movs	r2, #2
 80078ce:	4013      	ands	r3, r2
 80078d0:	d011      	beq.n	80078f6 <HAL_UART_IRQHandler+0xf6>
 80078d2:	239c      	movs	r3, #156	; 0x9c
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2201      	movs	r2, #1
 80078da:	4013      	ands	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2202      	movs	r2, #2
 80078e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2280      	movs	r2, #128	; 0x80
 80078ea:	589b      	ldr	r3, [r3, r2]
 80078ec:	2204      	movs	r2, #4
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2180      	movs	r1, #128	; 0x80
 80078f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f6:	23a4      	movs	r3, #164	; 0xa4
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2204      	movs	r2, #4
 80078fe:	4013      	ands	r3, r2
 8007900:	d011      	beq.n	8007926 <HAL_UART_IRQHandler+0x126>
 8007902:	239c      	movs	r3, #156	; 0x9c
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2201      	movs	r2, #1
 800790a:	4013      	ands	r3, r2
 800790c:	d00b      	beq.n	8007926 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2204      	movs	r2, #4
 8007914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2280      	movs	r2, #128	; 0x80
 800791a:	589b      	ldr	r3, [r3, r2]
 800791c:	2202      	movs	r2, #2
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007926:	23a4      	movs	r3, #164	; 0xa4
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2208      	movs	r2, #8
 800792e:	4013      	ands	r3, r2
 8007930:	d017      	beq.n	8007962 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007932:	23a0      	movs	r3, #160	; 0xa0
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2220      	movs	r2, #32
 800793a:	4013      	ands	r3, r2
 800793c:	d105      	bne.n	800794a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800793e:	239c      	movs	r3, #156	; 0x9c
 8007940:	18fb      	adds	r3, r7, r3
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2201      	movs	r2, #1
 8007946:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007948:	d00b      	beq.n	8007962 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2208      	movs	r2, #8
 8007950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2280      	movs	r2, #128	; 0x80
 8007956:	589b      	ldr	r3, [r3, r2]
 8007958:	2208      	movs	r2, #8
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007962:	23a4      	movs	r3, #164	; 0xa4
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	4013      	ands	r3, r2
 800796e:	d013      	beq.n	8007998 <HAL_UART_IRQHandler+0x198>
 8007970:	23a0      	movs	r3, #160	; 0xa0
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	2380      	movs	r3, #128	; 0x80
 8007978:	04db      	lsls	r3, r3, #19
 800797a:	4013      	ands	r3, r2
 800797c:	d00c      	beq.n	8007998 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2280      	movs	r2, #128	; 0x80
 8007984:	0112      	lsls	r2, r2, #4
 8007986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2280      	movs	r2, #128	; 0x80
 800798c:	589b      	ldr	r3, [r3, r2]
 800798e:	2220      	movs	r2, #32
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2280      	movs	r2, #128	; 0x80
 800799c:	589b      	ldr	r3, [r3, r2]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d100      	bne.n	80079a4 <HAL_UART_IRQHandler+0x1a4>
 80079a2:	e1f7      	b.n	8007d94 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80079a4:	23a4      	movs	r3, #164	; 0xa4
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2220      	movs	r2, #32
 80079ac:	4013      	ands	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079b0:	23a0      	movs	r3, #160	; 0xa0
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2220      	movs	r2, #32
 80079b8:	4013      	ands	r3, r2
 80079ba:	d008      	beq.n	80079ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	0010      	movs	r0, r2
 80079cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2280      	movs	r2, #128	; 0x80
 80079d2:	589b      	ldr	r3, [r3, r2]
 80079d4:	2194      	movs	r1, #148	; 0x94
 80079d6:	187a      	adds	r2, r7, r1
 80079d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2240      	movs	r2, #64	; 0x40
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d004      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079e8:	187b      	adds	r3, r7, r1
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2228      	movs	r2, #40	; 0x28
 80079ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079f0:	d047      	beq.n	8007a82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f000 fd3f 	bl	8008478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2240      	movs	r2, #64	; 0x40
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d137      	bne.n	8007a78 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a08:	f3ef 8310 	mrs	r3, PRIMASK
 8007a0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a10:	2090      	movs	r0, #144	; 0x90
 8007a12:	183a      	adds	r2, r7, r0
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	2301      	movs	r3, #1
 8007a18:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a1c:	f383 8810 	msr	PRIMASK, r3
}
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2140      	movs	r1, #64	; 0x40
 8007a2e:	438a      	bics	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]
 8007a32:	183b      	adds	r3, r7, r0
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a3a:	f383 8810 	msr	PRIMASK, r3
}
 8007a3e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d012      	beq.n	8007a6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a14      	ldr	r2, [pc, #80]	; (8007aa0 <HAL_UART_IRQHandler+0x2a0>)
 8007a4e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7fb fd71 	bl	800353c <HAL_DMA_Abort_IT>
 8007a5a:	1e03      	subs	r3, r0, #0
 8007a5c:	d01a      	beq.n	8007a94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	0018      	movs	r0, r3
 8007a6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e012      	b.n	8007a94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	0018      	movs	r0, r3
 8007a72:	f000 f9a5 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a76:	e00d      	b.n	8007a94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 f9a0 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	e008      	b.n	8007a94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	0018      	movs	r0, r3
 8007a86:	f000 f99b 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2280      	movs	r2, #128	; 0x80
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007a92:	e17f      	b.n	8007d94 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a94:	46c0      	nop			; (mov r8, r8)
    return;
 8007a96:	e17d      	b.n	8007d94 <HAL_UART_IRQHandler+0x594>
 8007a98:	0000080f 	.word	0x0000080f
 8007a9c:	04000120 	.word	0x04000120
 8007aa0:	0800853d 	.word	0x0800853d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d000      	beq.n	8007aae <HAL_UART_IRQHandler+0x2ae>
 8007aac:	e131      	b.n	8007d12 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007aae:	23a4      	movs	r3, #164	; 0xa4
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d100      	bne.n	8007abc <HAL_UART_IRQHandler+0x2bc>
 8007aba:	e12a      	b.n	8007d12 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007abc:	23a0      	movs	r3, #160	; 0xa0
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d100      	bne.n	8007aca <HAL_UART_IRQHandler+0x2ca>
 8007ac8:	e123      	b.n	8007d12 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2210      	movs	r2, #16
 8007ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2240      	movs	r2, #64	; 0x40
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d000      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x2e2>
 8007ae0:	e09b      	b.n	8007c1a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	217e      	movs	r1, #126	; 0x7e
 8007aec:	187b      	adds	r3, r7, r1
 8007aee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d100      	bne.n	8007afa <HAL_UART_IRQHandler+0x2fa>
 8007af8:	e14e      	b.n	8007d98 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2258      	movs	r2, #88	; 0x58
 8007afe:	5a9b      	ldrh	r3, [r3, r2]
 8007b00:	187a      	adds	r2, r7, r1
 8007b02:	8812      	ldrh	r2, [r2, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d300      	bcc.n	8007b0a <HAL_UART_IRQHandler+0x30a>
 8007b08:	e146      	b.n	8007d98 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	187a      	adds	r2, r7, r1
 8007b0e:	215a      	movs	r1, #90	; 0x5a
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d06e      	beq.n	8007bfc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b22:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b28:	2301      	movs	r3, #1
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	f383 8810 	msr	PRIMASK, r3
}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	499a      	ldr	r1, [pc, #616]	; (8007da8 <HAL_UART_IRQHandler+0x5a8>)
 8007b40:	400a      	ands	r2, r1
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	f383 8810 	msr	PRIMASK, r3
}
 8007b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b50:	f3ef 8310 	mrs	r3, PRIMASK
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b58:	677b      	str	r3, [r7, #116]	; 0x74
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b60:	f383 8810 	msr	PRIMASK, r3
}
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2101      	movs	r1, #1
 8007b72:	438a      	bics	r2, r1
 8007b74:	609a      	str	r2, [r3, #8]
 8007b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b78:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7c:	f383 8810 	msr	PRIMASK, r3
}
 8007b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b82:	f3ef 8310 	mrs	r3, PRIMASK
 8007b86:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8a:	673b      	str	r3, [r7, #112]	; 0x70
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b92:	f383 8810 	msr	PRIMASK, r3
}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2140      	movs	r1, #64	; 0x40
 8007ba4:	438a      	bics	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bca:	2301      	movs	r3, #1
 8007bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd0:	f383 8810 	msr	PRIMASK, r3
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2110      	movs	r1, #16
 8007be2:	438a      	bics	r2, r1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7fb fc68 	bl	80034cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2258      	movs	r2, #88	; 0x58
 8007c00:	5a9a      	ldrh	r2, [r3, r2]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	215a      	movs	r1, #90	; 0x5a
 8007c06:	5a5b      	ldrh	r3, [r3, r1]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0011      	movs	r1, r2
 8007c12:	0018      	movs	r0, r3
 8007c14:	f000 f8dc 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c18:	e0be      	b.n	8007d98 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2258      	movs	r2, #88	; 0x58
 8007c1e:	5a99      	ldrh	r1, [r3, r2]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	225a      	movs	r2, #90	; 0x5a
 8007c24:	5a9b      	ldrh	r3, [r3, r2]
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	208e      	movs	r0, #142	; 0x8e
 8007c2a:	183b      	adds	r3, r7, r0
 8007c2c:	1a8a      	subs	r2, r1, r2
 8007c2e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	225a      	movs	r2, #90	; 0x5a
 8007c34:	5a9b      	ldrh	r3, [r3, r2]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d100      	bne.n	8007c3e <HAL_UART_IRQHandler+0x43e>
 8007c3c:	e0ae      	b.n	8007d9c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8007c3e:	183b      	adds	r3, r7, r0
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d100      	bne.n	8007c48 <HAL_UART_IRQHandler+0x448>
 8007c46:	e0a9      	b.n	8007d9c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c48:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c50:	2488      	movs	r4, #136	; 0x88
 8007c52:	193a      	adds	r2, r7, r4
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	2301      	movs	r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f383 8810 	msr	PRIMASK, r3
}
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	494f      	ldr	r1, [pc, #316]	; (8007dac <HAL_UART_IRQHandler+0x5ac>)
 8007c6e:	400a      	ands	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	193b      	adds	r3, r7, r4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f383 8810 	msr	PRIMASK, r3
}
 8007c7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c80:	f3ef 8310 	mrs	r3, PRIMASK
 8007c84:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c86:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	2484      	movs	r4, #132	; 0x84
 8007c8a:	193a      	adds	r2, r7, r4
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f383 8810 	msr	PRIMASK, r3
}
 8007c98:	46c0      	nop			; (mov r8, r8)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
 8007caa:	193b      	adds	r3, r7, r4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f383 8810 	msr	PRIMASK, r3
}
 8007cb6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cca:	f3ef 8310 	mrs	r3, PRIMASK
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	2480      	movs	r4, #128	; 0x80
 8007cd4:	193a      	adds	r2, r7, r4
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	f383 8810 	msr	PRIMASK, r3
}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2110      	movs	r1, #16
 8007cf0:	438a      	bics	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	193b      	adds	r3, r7, r4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	f383 8810 	msr	PRIMASK, r3
}
 8007d00:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d02:	183b      	adds	r3, r7, r0
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0011      	movs	r1, r2
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 f860 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d10:	e044      	b.n	8007d9c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d12:	23a4      	movs	r3, #164	; 0xa4
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	035b      	lsls	r3, r3, #13
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d010      	beq.n	8007d42 <HAL_UART_IRQHandler+0x542>
 8007d20:	239c      	movs	r3, #156	; 0x9c
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	2380      	movs	r3, #128	; 0x80
 8007d28:	03db      	lsls	r3, r3, #15
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	0352      	lsls	r2, r2, #13
 8007d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f000 fc40 	bl	80085c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d40:	e02f      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d42:	23a4      	movs	r3, #164	; 0xa4
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2280      	movs	r2, #128	; 0x80
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	d00f      	beq.n	8007d6e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d4e:	23a0      	movs	r3, #160	; 0xa0
 8007d50:	18fb      	adds	r3, r7, r3
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2280      	movs	r2, #128	; 0x80
 8007d56:	4013      	ands	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01e      	beq.n	8007da0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	0010      	movs	r0, r2
 8007d6a:	4798      	blx	r3
    }
    return;
 8007d6c:	e018      	b.n	8007da0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d6e:	23a4      	movs	r3, #164	; 0xa4
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2240      	movs	r2, #64	; 0x40
 8007d76:	4013      	ands	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
 8007d7a:	23a0      	movs	r3, #160	; 0xa0
 8007d7c:	18fb      	adds	r3, r7, r3
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2240      	movs	r2, #64	; 0x40
 8007d82:	4013      	ands	r3, r2
 8007d84:	d00d      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f000 fbee 	bl	800856a <UART_EndTransmit_IT>
    return;
 8007d8e:	e008      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007d90:	46c0      	nop			; (mov r8, r8)
 8007d92:	e006      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007d94:	46c0      	nop			; (mov r8, r8)
 8007d96:	e004      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	e002      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007d9c:	46c0      	nop			; (mov r8, r8)
 8007d9e:	e000      	b.n	8007da2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007da0:	46c0      	nop			; (mov r8, r8)
  }

}
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b02b      	add	sp, #172	; 0xac
 8007da6:	bd90      	pop	{r4, r7, pc}
 8007da8:	fffffeff 	.word	0xfffffeff
 8007dac:	fffffedf 	.word	0xfffffedf

08007db0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	000a      	movs	r2, r1
 8007dda:	1cbb      	adds	r3, r7, #2
 8007ddc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b002      	add	sp, #8
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007df0:	231e      	movs	r3, #30
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4aaf      	ldr	r2, [pc, #700]	; (80080d4 <UART_SetConfig+0x2ec>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	0019      	movs	r1, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	4aaa      	ldr	r2, [pc, #680]	; (80080d8 <UART_SetConfig+0x2f0>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	0019      	movs	r1, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	4aa1      	ldr	r2, [pc, #644]	; (80080dc <UART_SetConfig+0x2f4>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	0019      	movs	r1, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a9d      	ldr	r2, [pc, #628]	; (80080e0 <UART_SetConfig+0x2f8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d127      	bne.n	8007ebe <UART_SetConfig+0xd6>
 8007e6e:	4b9d      	ldr	r3, [pc, #628]	; (80080e4 <UART_SetConfig+0x2fc>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	2203      	movs	r2, #3
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d00d      	beq.n	8007e96 <UART_SetConfig+0xae>
 8007e7a:	d81b      	bhi.n	8007eb4 <UART_SetConfig+0xcc>
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d014      	beq.n	8007eaa <UART_SetConfig+0xc2>
 8007e80:	d818      	bhi.n	8007eb4 <UART_SetConfig+0xcc>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <UART_SetConfig+0xa4>
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d00a      	beq.n	8007ea0 <UART_SetConfig+0xb8>
 8007e8a:	e013      	b.n	8007eb4 <UART_SetConfig+0xcc>
 8007e8c:	231f      	movs	r3, #31
 8007e8e:	18fb      	adds	r3, r7, r3
 8007e90:	2200      	movs	r2, #0
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	e065      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007e96:	231f      	movs	r3, #31
 8007e98:	18fb      	adds	r3, r7, r3
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e060      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007ea0:	231f      	movs	r3, #31
 8007ea2:	18fb      	adds	r3, r7, r3
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e05b      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007eaa:	231f      	movs	r3, #31
 8007eac:	18fb      	adds	r3, r7, r3
 8007eae:	2208      	movs	r2, #8
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e056      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007eb4:	231f      	movs	r3, #31
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	2210      	movs	r2, #16
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e051      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a89      	ldr	r2, [pc, #548]	; (80080e8 <UART_SetConfig+0x300>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d134      	bne.n	8007f32 <UART_SetConfig+0x14a>
 8007ec8:	4b86      	ldr	r3, [pc, #536]	; (80080e4 <UART_SetConfig+0x2fc>)
 8007eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ecc:	23c0      	movs	r3, #192	; 0xc0
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	22c0      	movs	r2, #192	; 0xc0
 8007ed4:	0292      	lsls	r2, r2, #10
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d017      	beq.n	8007f0a <UART_SetConfig+0x122>
 8007eda:	22c0      	movs	r2, #192	; 0xc0
 8007edc:	0292      	lsls	r2, r2, #10
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d822      	bhi.n	8007f28 <UART_SetConfig+0x140>
 8007ee2:	2280      	movs	r2, #128	; 0x80
 8007ee4:	0292      	lsls	r2, r2, #10
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d019      	beq.n	8007f1e <UART_SetConfig+0x136>
 8007eea:	2280      	movs	r2, #128	; 0x80
 8007eec:	0292      	lsls	r2, r2, #10
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d81a      	bhi.n	8007f28 <UART_SetConfig+0x140>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <UART_SetConfig+0x118>
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	0252      	lsls	r2, r2, #9
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00a      	beq.n	8007f14 <UART_SetConfig+0x12c>
 8007efe:	e013      	b.n	8007f28 <UART_SetConfig+0x140>
 8007f00:	231f      	movs	r3, #31
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e02b      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f0a:	231f      	movs	r3, #31
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	2202      	movs	r2, #2
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	e026      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f14:	231f      	movs	r3, #31
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	2204      	movs	r2, #4
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e021      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f1e:	231f      	movs	r3, #31
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2208      	movs	r2, #8
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e01c      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f28:	231f      	movs	r3, #31
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e017      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a6d      	ldr	r2, [pc, #436]	; (80080ec <UART_SetConfig+0x304>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d104      	bne.n	8007f46 <UART_SetConfig+0x15e>
 8007f3c:	231f      	movs	r3, #31
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e00d      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a69      	ldr	r2, [pc, #420]	; (80080f0 <UART_SetConfig+0x308>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d104      	bne.n	8007f5a <UART_SetConfig+0x172>
 8007f50:	231f      	movs	r3, #31
 8007f52:	18fb      	adds	r3, r7, r3
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e003      	b.n	8007f62 <UART_SetConfig+0x17a>
 8007f5a:	231f      	movs	r3, #31
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	2210      	movs	r2, #16
 8007f60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69da      	ldr	r2, [r3, #28]
 8007f66:	2380      	movs	r3, #128	; 0x80
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d15d      	bne.n	800802a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007f6e:	231f      	movs	r3, #31
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d015      	beq.n	8007fa4 <UART_SetConfig+0x1bc>
 8007f78:	dc18      	bgt.n	8007fac <UART_SetConfig+0x1c4>
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d00d      	beq.n	8007f9a <UART_SetConfig+0x1b2>
 8007f7e:	dc15      	bgt.n	8007fac <UART_SetConfig+0x1c4>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <UART_SetConfig+0x1a2>
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d005      	beq.n	8007f94 <UART_SetConfig+0x1ac>
 8007f88:	e010      	b.n	8007fac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f8a:	f7fe f865 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	61bb      	str	r3, [r7, #24]
        break;
 8007f92:	e012      	b.n	8007fba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f94:	4b57      	ldr	r3, [pc, #348]	; (80080f4 <UART_SetConfig+0x30c>)
 8007f96:	61bb      	str	r3, [r7, #24]
        break;
 8007f98:	e00f      	b.n	8007fba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9a:	f7fd ffd1 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	61bb      	str	r3, [r7, #24]
        break;
 8007fa2:	e00a      	b.n	8007fba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa4:	2380      	movs	r3, #128	; 0x80
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	61bb      	str	r3, [r7, #24]
        break;
 8007faa:	e006      	b.n	8007fba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fb0:	231e      	movs	r3, #30
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
        break;
 8007fb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d100      	bne.n	8007fc2 <UART_SetConfig+0x1da>
 8007fc0:	e07b      	b.n	80080ba <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	18d2      	adds	r2, r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	0019      	movs	r1, r3
 8007fd4:	0010      	movs	r0, r2
 8007fd6:	f7f8 f8a9 	bl	800012c <__udivsi3>
 8007fda:	0003      	movs	r3, r0
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b0f      	cmp	r3, #15
 8007fe4:	d91c      	bls.n	8008020 <UART_SetConfig+0x238>
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	025b      	lsls	r3, r3, #9
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d217      	bcs.n	8008020 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	200e      	movs	r0, #14
 8007ff6:	183b      	adds	r3, r7, r0
 8007ff8:	210f      	movs	r1, #15
 8007ffa:	438a      	bics	r2, r1
 8007ffc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	085b      	lsrs	r3, r3, #1
 8008002:	b29b      	uxth	r3, r3
 8008004:	2207      	movs	r2, #7
 8008006:	4013      	ands	r3, r2
 8008008:	b299      	uxth	r1, r3
 800800a:	183b      	adds	r3, r7, r0
 800800c:	183a      	adds	r2, r7, r0
 800800e:	8812      	ldrh	r2, [r2, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	183a      	adds	r2, r7, r0
 800801a:	8812      	ldrh	r2, [r2, #0]
 800801c:	60da      	str	r2, [r3, #12]
 800801e:	e04c      	b.n	80080ba <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008020:	231e      	movs	r3, #30
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	e047      	b.n	80080ba <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800802a:	231f      	movs	r3, #31
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d015      	beq.n	8008060 <UART_SetConfig+0x278>
 8008034:	dc18      	bgt.n	8008068 <UART_SetConfig+0x280>
 8008036:	2b04      	cmp	r3, #4
 8008038:	d00d      	beq.n	8008056 <UART_SetConfig+0x26e>
 800803a:	dc15      	bgt.n	8008068 <UART_SetConfig+0x280>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <UART_SetConfig+0x25e>
 8008040:	2b02      	cmp	r3, #2
 8008042:	d005      	beq.n	8008050 <UART_SetConfig+0x268>
 8008044:	e010      	b.n	8008068 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008046:	f7fe f807 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800804a:	0003      	movs	r3, r0
 800804c:	61bb      	str	r3, [r7, #24]
        break;
 800804e:	e012      	b.n	8008076 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008050:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <UART_SetConfig+0x30c>)
 8008052:	61bb      	str	r3, [r7, #24]
        break;
 8008054:	e00f      	b.n	8008076 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008056:	f7fd ff73 	bl	8005f40 <HAL_RCC_GetSysClockFreq>
 800805a:	0003      	movs	r3, r0
 800805c:	61bb      	str	r3, [r7, #24]
        break;
 800805e:	e00a      	b.n	8008076 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	61bb      	str	r3, [r7, #24]
        break;
 8008066:	e006      	b.n	8008076 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800806c:	231e      	movs	r3, #30
 800806e:	18fb      	adds	r3, r7, r3
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
        break;
 8008074:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01e      	beq.n	80080ba <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	085a      	lsrs	r2, r3, #1
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	18d2      	adds	r2, r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	0019      	movs	r1, r3
 800808c:	0010      	movs	r0, r2
 800808e:	f7f8 f84d 	bl	800012c <__udivsi3>
 8008092:	0003      	movs	r3, r0
 8008094:	b29b      	uxth	r3, r3
 8008096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b0f      	cmp	r3, #15
 800809c:	d909      	bls.n	80080b2 <UART_SetConfig+0x2ca>
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	2380      	movs	r3, #128	; 0x80
 80080a2:	025b      	lsls	r3, r3, #9
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d204      	bcs.n	80080b2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	60da      	str	r2, [r3, #12]
 80080b0:	e003      	b.n	80080ba <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80080b2:	231e      	movs	r3, #30
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	2201      	movs	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080c6:	231e      	movs	r3, #30
 80080c8:	18fb      	adds	r3, r7, r3
 80080ca:	781b      	ldrb	r3, [r3, #0]
}
 80080cc:	0018      	movs	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b008      	add	sp, #32
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	efff69f3 	.word	0xefff69f3
 80080d8:	ffffcfff 	.word	0xffffcfff
 80080dc:	fffff4ff 	.word	0xfffff4ff
 80080e0:	40013800 	.word	0x40013800
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40004400 	.word	0x40004400
 80080ec:	40004800 	.word	0x40004800
 80080f0:	40004c00 	.word	0x40004c00
 80080f4:	007a1200 	.word	0x007a1200

080080f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2201      	movs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	d00b      	beq.n	8008122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a4a      	ldr	r2, [pc, #296]	; (800823c <UART_AdvFeatureConfig+0x144>)
 8008112:	4013      	ands	r3, r2
 8008114:	0019      	movs	r1, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2202      	movs	r2, #2
 8008128:	4013      	ands	r3, r2
 800812a:	d00b      	beq.n	8008144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a43      	ldr	r2, [pc, #268]	; (8008240 <UART_AdvFeatureConfig+0x148>)
 8008134:	4013      	ands	r3, r2
 8008136:	0019      	movs	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2204      	movs	r2, #4
 800814a:	4013      	ands	r3, r2
 800814c:	d00b      	beq.n	8008166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a3b      	ldr	r2, [pc, #236]	; (8008244 <UART_AdvFeatureConfig+0x14c>)
 8008156:	4013      	ands	r3, r2
 8008158:	0019      	movs	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2208      	movs	r2, #8
 800816c:	4013      	ands	r3, r2
 800816e:	d00b      	beq.n	8008188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4a34      	ldr	r2, [pc, #208]	; (8008248 <UART_AdvFeatureConfig+0x150>)
 8008178:	4013      	ands	r3, r2
 800817a:	0019      	movs	r1, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2210      	movs	r2, #16
 800818e:	4013      	ands	r3, r2
 8008190:	d00b      	beq.n	80081aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	4a2c      	ldr	r2, [pc, #176]	; (800824c <UART_AdvFeatureConfig+0x154>)
 800819a:	4013      	ands	r3, r2
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2220      	movs	r2, #32
 80081b0:	4013      	ands	r3, r2
 80081b2:	d00b      	beq.n	80081cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	4a25      	ldr	r2, [pc, #148]	; (8008250 <UART_AdvFeatureConfig+0x158>)
 80081bc:	4013      	ands	r3, r2
 80081be:	0019      	movs	r1, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2240      	movs	r2, #64	; 0x40
 80081d2:	4013      	ands	r3, r2
 80081d4:	d01d      	beq.n	8008212 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <UART_AdvFeatureConfig+0x15c>)
 80081de:	4013      	ands	r3, r2
 80081e0:	0019      	movs	r1, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081f2:	2380      	movs	r3, #128	; 0x80
 80081f4:	035b      	lsls	r3, r3, #13
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d10b      	bne.n	8008212 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4a15      	ldr	r2, [pc, #84]	; (8008258 <UART_AdvFeatureConfig+0x160>)
 8008202:	4013      	ands	r3, r2
 8008204:	0019      	movs	r1, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	4013      	ands	r3, r2
 800821a:	d00b      	beq.n	8008234 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4a0e      	ldr	r2, [pc, #56]	; (800825c <UART_AdvFeatureConfig+0x164>)
 8008224:	4013      	ands	r3, r2
 8008226:	0019      	movs	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b002      	add	sp, #8
 800823a:	bd80      	pop	{r7, pc}
 800823c:	fffdffff 	.word	0xfffdffff
 8008240:	fffeffff 	.word	0xfffeffff
 8008244:	fffbffff 	.word	0xfffbffff
 8008248:	ffff7fff 	.word	0xffff7fff
 800824c:	ffffefff 	.word	0xffffefff
 8008250:	ffffdfff 	.word	0xffffdfff
 8008254:	ffefffff 	.word	0xffefffff
 8008258:	ff9fffff 	.word	0xff9fffff
 800825c:	fff7ffff 	.word	0xfff7ffff

08008260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2280      	movs	r2, #128	; 0x80
 800826c:	2100      	movs	r1, #0
 800826e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008270:	f7fa fb00 	bl	8002874 <HAL_GetTick>
 8008274:	0003      	movs	r3, r0
 8008276:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2208      	movs	r2, #8
 8008280:	4013      	ands	r3, r2
 8008282:	2b08      	cmp	r3, #8
 8008284:	d10c      	bne.n	80082a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2280      	movs	r2, #128	; 0x80
 800828a:	0391      	lsls	r1, r2, #14
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	4a17      	ldr	r2, [pc, #92]	; (80082ec <UART_CheckIdleState+0x8c>)
 8008290:	9200      	str	r2, [sp, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	f000 f82c 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8008298:	1e03      	subs	r3, r0, #0
 800829a:	d001      	beq.n	80082a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e021      	b.n	80082e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2204      	movs	r2, #4
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d10c      	bne.n	80082c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2280      	movs	r2, #128	; 0x80
 80082b2:	03d1      	lsls	r1, r2, #15
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4a0d      	ldr	r2, [pc, #52]	; (80082ec <UART_CheckIdleState+0x8c>)
 80082b8:	9200      	str	r2, [sp, #0]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f000 f818 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d001      	beq.n	80082c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e00d      	b.n	80082e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2274      	movs	r2, #116	; 0x74
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b004      	add	sp, #16
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	01ffffff 	.word	0x01ffffff

080082f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b094      	sub	sp, #80	; 0x50
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	1dfb      	adds	r3, r7, #7
 80082fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008300:	e0a3      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008304:	3301      	adds	r3, #1
 8008306:	d100      	bne.n	800830a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008308:	e09f      	b.n	800844a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fa fab3 	bl	8002874 <HAL_GetTick>
 800830e:	0002      	movs	r2, r0
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <UART_WaitOnFlagUntilTimeout+0x30>
 800831a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800831c:	2b00      	cmp	r3, #0
 800831e:	d13d      	bne.n	800839c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008320:	f3ef 8310 	mrs	r3, PRIMASK
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008328:	647b      	str	r3, [r7, #68]	; 0x44
 800832a:	2301      	movs	r3, #1
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	f383 8810 	msr	PRIMASK, r3
}
 8008334:	46c0      	nop			; (mov r8, r8)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	494c      	ldr	r1, [pc, #304]	; (8008474 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008342:	400a      	ands	r2, r1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008348:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	f383 8810 	msr	PRIMASK, r3
}
 8008350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008352:	f3ef 8310 	mrs	r3, PRIMASK
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835a:	643b      	str	r3, [r7, #64]	; 0x40
 800835c:	2301      	movs	r3, #1
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	f383 8810 	msr	PRIMASK, r3
}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2101      	movs	r1, #1
 8008374:	438a      	bics	r2, r1
 8008376:	609a      	str	r2, [r3, #8]
 8008378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837e:	f383 8810 	msr	PRIMASK, r3
}
 8008382:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2274      	movs	r2, #116	; 0x74
 8008394:	2100      	movs	r1, #0
 8008396:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e067      	b.n	800846c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2204      	movs	r2, #4
 80083a4:	4013      	ands	r3, r2
 80083a6:	d050      	beq.n	800844a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69da      	ldr	r2, [r3, #28]
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	401a      	ands	r2, r3
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d146      	bne.n	800844a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2280      	movs	r2, #128	; 0x80
 80083c2:	0112      	lsls	r2, r2, #4
 80083c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ca:	613b      	str	r3, [r7, #16]
  return(result);
 80083cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d0:	2301      	movs	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f383 8810 	msr	PRIMASK, r3
}
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4923      	ldr	r1, [pc, #140]	; (8008474 <UART_WaitOnFlagUntilTimeout+0x184>)
 80083e8:	400a      	ands	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083f8:	f3ef 8310 	mrs	r3, PRIMASK
 80083fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80083fe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
 8008402:	2301      	movs	r3, #1
 8008404:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f383 8810 	msr	PRIMASK, r3
}
 800840c:	46c0      	nop			; (mov r8, r8)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2101      	movs	r1, #1
 800841a:	438a      	bics	r2, r1
 800841c:	609a      	str	r2, [r3, #8]
 800841e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	2120      	movs	r1, #32
 800843c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2274      	movs	r2, #116	; 0x74
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e010      	b.n	800846c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4013      	ands	r3, r2
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	425a      	negs	r2, r3
 800845a:	4153      	adcs	r3, r2
 800845c:	b2db      	uxtb	r3, r3
 800845e:	001a      	movs	r2, r3
 8008460:	1dfb      	adds	r3, r7, #7
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d100      	bne.n	800846a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008468:	e74b      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	0018      	movs	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	b014      	add	sp, #80	; 0x50
 8008472:	bd80      	pop	{r7, pc}
 8008474:	fffffe5f 	.word	0xfffffe5f

08008478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08e      	sub	sp, #56	; 0x38
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	617b      	str	r3, [r7, #20]
  return(result);
 8008486:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
 800848a:	2301      	movs	r3, #1
 800848c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f383 8810 	msr	PRIMASK, r3
}
 8008494:	46c0      	nop			; (mov r8, r8)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4925      	ldr	r1, [pc, #148]	; (8008538 <UART_EndRxTransfer+0xc0>)
 80084a2:	400a      	ands	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f383 8810 	msr	PRIMASK, r3
}
 80084b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b2:	f3ef 8310 	mrs	r3, PRIMASK
 80084b6:	623b      	str	r3, [r7, #32]
  return(result);
 80084b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ba:	633b      	str	r3, [r7, #48]	; 0x30
 80084bc:	2301      	movs	r3, #1
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	f383 8810 	msr	PRIMASK, r3
}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2101      	movs	r1, #1
 80084d4:	438a      	bics	r2, r1
 80084d6:	609a      	str	r2, [r3, #8]
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	f383 8810 	msr	PRIMASK, r3
}
 80084e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d118      	bne.n	800851e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ec:	f3ef 8310 	mrs	r3, PRIMASK
 80084f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80084f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f6:	2301      	movs	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f383 8810 	msr	PRIMASK, r3
}
 8008500:	46c0      	nop			; (mov r8, r8)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2110      	movs	r1, #16
 800850e:	438a      	bics	r2, r1
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f383 8810 	msr	PRIMASK, r3
}
 800851c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008530:	46c0      	nop			; (mov r8, r8)
 8008532:	46bd      	mov	sp, r7
 8008534:	b00e      	add	sp, #56	; 0x38
 8008536:	bd80      	pop	{r7, pc}
 8008538:	fffffedf 	.word	0xfffffedf

0800853c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	225a      	movs	r2, #90	; 0x5a
 800854e:	2100      	movs	r1, #0
 8008550:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2252      	movs	r2, #82	; 0x52
 8008556:	2100      	movs	r1, #0
 8008558:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	0018      	movs	r0, r3
 800855e:	f7ff fc2f 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b004      	add	sp, #16
 8008568:	bd80      	pop	{r7, pc}

0800856a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008572:	f3ef 8310 	mrs	r3, PRIMASK
 8008576:	60bb      	str	r3, [r7, #8]
  return(result);
 8008578:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	2301      	movs	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f383 8810 	msr	PRIMASK, r3
}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2140      	movs	r1, #64	; 0x40
 8008594:	438a      	bics	r2, r1
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	0018      	movs	r0, r3
 80085b4:	f7ff fbfc 	bl	8007db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b8:	46c0      	nop			; (mov r8, r8)
 80085ba:	46bd      	mov	sp, r7
 80085bc:	b006      	add	sp, #24
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085c8:	46c0      	nop			; (mov r8, r8)
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b002      	add	sp, #8
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2244      	movs	r2, #68	; 0x44
 80085dc:	2100      	movs	r1, #0
 80085de:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <USB_EnableGlobalInt+0x28>)
 80085e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	b299      	uxth	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	0018      	movs	r0, r3
 80085f2:	46bd      	mov	sp, r7
 80085f4:	b004      	add	sp, #16
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	0000bf80 	.word	0x0000bf80

080085fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <USB_DisableGlobalInt+0x30>)
 8008606:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2240      	movs	r2, #64	; 0x40
 800860c:	5a9b      	ldrh	r3, [r3, r2]
 800860e:	b29b      	uxth	r3, r3
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	b292      	uxth	r2, r2
 8008614:	43d2      	mvns	r2, r2
 8008616:	b292      	uxth	r2, r2
 8008618:	4013      	ands	r3, r2
 800861a:	b299      	uxth	r1, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2240      	movs	r2, #64	; 0x40
 8008620:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	b004      	add	sp, #16
 800862a:	bd80      	pop	{r7, pc}
 800862c:	0000bf80 	.word	0x0000bf80

08008630 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008630:	b084      	sub	sp, #16
 8008632:	b590      	push	{r4, r7, lr}
 8008634:	46c6      	mov	lr, r8
 8008636:	b500      	push	{lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	2004      	movs	r0, #4
 8008640:	2410      	movs	r4, #16
 8008642:	46a4      	mov	ip, r4
 8008644:	2408      	movs	r4, #8
 8008646:	46a0      	mov	r8, r4
 8008648:	44b8      	add	r8, r7
 800864a:	44c4      	add	ip, r8
 800864c:	4460      	add	r0, ip
 800864e:	6001      	str	r1, [r0, #0]
 8008650:	6042      	str	r2, [r0, #4]
 8008652:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2240      	movs	r2, #64	; 0x40
 8008658:	2101      	movs	r1, #1
 800865a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2240      	movs	r2, #64	; 0x40
 8008660:	2100      	movs	r1, #0
 8008662:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2244      	movs	r2, #68	; 0x44
 8008668:	2100      	movs	r1, #0
 800866a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2250      	movs	r2, #80	; 0x50
 8008670:	2100      	movs	r1, #0
 8008672:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	0018      	movs	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	b002      	add	sp, #8
 800867c:	bc80      	pop	{r7}
 800867e:	46b8      	mov	r8, r7
 8008680:	bc90      	pop	{r4, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	b004      	add	sp, #16
 8008686:	4718      	bx	r3

08008688 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b09c      	sub	sp, #112	; 0x70
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008692:	236f      	movs	r3, #111	; 0x6f
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	18d3      	adds	r3, r2, r3
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	236c      	movs	r3, #108	; 0x6c
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	49cf      	ldr	r1, [pc, #828]	; (80089ec <USB_ActivateEndpoint+0x364>)
 80086ae:	400a      	ands	r2, r1
 80086b0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	78db      	ldrb	r3, [r3, #3]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d017      	beq.n	80086ea <USB_ActivateEndpoint+0x62>
 80086ba:	dc28      	bgt.n	800870e <USB_ActivateEndpoint+0x86>
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d00e      	beq.n	80086de <USB_ActivateEndpoint+0x56>
 80086c0:	dc25      	bgt.n	800870e <USB_ActivateEndpoint+0x86>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <USB_ActivateEndpoint+0x44>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d018      	beq.n	80086fc <USB_ActivateEndpoint+0x74>
 80086ca:	e020      	b.n	800870e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80086cc:	226c      	movs	r2, #108	; 0x6c
 80086ce:	18bb      	adds	r3, r7, r2
 80086d0:	18ba      	adds	r2, r7, r2
 80086d2:	8812      	ldrh	r2, [r2, #0]
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	0089      	lsls	r1, r1, #2
 80086d8:	430a      	orrs	r2, r1
 80086da:	801a      	strh	r2, [r3, #0]
      break;
 80086dc:	e01c      	b.n	8008718 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80086de:	226c      	movs	r2, #108	; 0x6c
 80086e0:	18bb      	adds	r3, r7, r2
 80086e2:	18ba      	adds	r2, r7, r2
 80086e4:	8812      	ldrh	r2, [r2, #0]
 80086e6:	801a      	strh	r2, [r3, #0]
      break;
 80086e8:	e016      	b.n	8008718 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80086ea:	226c      	movs	r2, #108	; 0x6c
 80086ec:	18bb      	adds	r3, r7, r2
 80086ee:	18ba      	adds	r2, r7, r2
 80086f0:	8812      	ldrh	r2, [r2, #0]
 80086f2:	21c0      	movs	r1, #192	; 0xc0
 80086f4:	00c9      	lsls	r1, r1, #3
 80086f6:	430a      	orrs	r2, r1
 80086f8:	801a      	strh	r2, [r3, #0]
      break;
 80086fa:	e00d      	b.n	8008718 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80086fc:	226c      	movs	r2, #108	; 0x6c
 80086fe:	18bb      	adds	r3, r7, r2
 8008700:	18ba      	adds	r2, r7, r2
 8008702:	8812      	ldrh	r2, [r2, #0]
 8008704:	2180      	movs	r1, #128	; 0x80
 8008706:	00c9      	lsls	r1, r1, #3
 8008708:	430a      	orrs	r2, r1
 800870a:	801a      	strh	r2, [r3, #0]
      break;
 800870c:	e004      	b.n	8008718 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800870e:	236f      	movs	r3, #111	; 0x6f
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
      break;
 8008716:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	226c      	movs	r2, #108	; 0x6c
 8008724:	18ba      	adds	r2, r7, r2
 8008726:	8812      	ldrh	r2, [r2, #0]
 8008728:	49b1      	ldr	r1, [pc, #708]	; (80089f0 <USB_ActivateEndpoint+0x368>)
 800872a:	430a      	orrs	r2, r1
 800872c:	b292      	uxth	r2, r2
 800872e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	18d3      	adds	r3, r2, r3
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	b21b      	sxth	r3, r3
 8008740:	4aac      	ldr	r2, [pc, #688]	; (80089f4 <USB_ActivateEndpoint+0x36c>)
 8008742:	4013      	ands	r3, r2
 8008744:	b21a      	sxth	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b21b      	sxth	r3, r3
 800874c:	4313      	orrs	r3, r2
 800874e:	b21a      	sxth	r2, r3
 8008750:	2166      	movs	r1, #102	; 0x66
 8008752:	187b      	adds	r3, r7, r1
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	18d3      	adds	r3, r2, r3
 8008760:	187a      	adds	r2, r7, r1
 8008762:	8812      	ldrh	r2, [r2, #0]
 8008764:	49a2      	ldr	r1, [pc, #648]	; (80089f0 <USB_ActivateEndpoint+0x368>)
 8008766:	430a      	orrs	r2, r1
 8008768:	b292      	uxth	r2, r2
 800876a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	7b1b      	ldrb	r3, [r3, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d000      	beq.n	8008776 <USB_ActivateEndpoint+0xee>
 8008774:	e150      	b.n	8008a18 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d100      	bne.n	8008780 <USB_ActivateEndpoint+0xf8>
 800877e:	e07a      	b.n	8008876 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2250      	movs	r2, #80	; 0x50
 8008788:	5a9b      	ldrh	r3, [r3, r2]
 800878a:	b29b      	uxth	r3, r3
 800878c:	001a      	movs	r2, r3
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	189b      	adds	r3, r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	00da      	lsls	r2, r3, #3
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	18d3      	adds	r3, r2, r3
 800879e:	2280      	movs	r2, #128	; 0x80
 80087a0:	00d2      	lsls	r2, r2, #3
 80087a2:	4694      	mov	ip, r2
 80087a4:	4463      	add	r3, ip
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	085b      	lsrs	r3, r3, #1
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	18db      	adds	r3, r3, r3
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	18d2      	adds	r2, r2, r3
 80087c2:	2112      	movs	r1, #18
 80087c4:	187b      	adds	r3, r7, r1
 80087c6:	8812      	ldrh	r2, [r2, #0]
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	187b      	adds	r3, r7, r1
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	2240      	movs	r2, #64	; 0x40
 80087d0:	4013      	ands	r3, r2
 80087d2:	d016      	beq.n	8008802 <USB_ActivateEndpoint+0x17a>
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	18d3      	adds	r3, r2, r3
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	2010      	movs	r0, #16
 80087e4:	183b      	adds	r3, r7, r0
 80087e6:	4983      	ldr	r1, [pc, #524]	; (80089f4 <USB_ActivateEndpoint+0x36c>)
 80087e8:	400a      	ands	r2, r1
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	18d3      	adds	r3, r2, r3
 80087f6:	183a      	adds	r2, r7, r0
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	497f      	ldr	r1, [pc, #508]	; (80089f8 <USB_ActivateEndpoint+0x370>)
 80087fc:	430a      	orrs	r2, r1
 80087fe:	b292      	uxth	r2, r2
 8008800:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d01d      	beq.n	8008846 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	18d3      	adds	r3, r2, r3
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29a      	uxth	r2, r3
 8008818:	200c      	movs	r0, #12
 800881a:	183b      	adds	r3, r7, r0
 800881c:	4977      	ldr	r1, [pc, #476]	; (80089fc <USB_ActivateEndpoint+0x374>)
 800881e:	400a      	ands	r2, r1
 8008820:	801a      	strh	r2, [r3, #0]
 8008822:	183b      	adds	r3, r7, r0
 8008824:	183a      	adds	r2, r7, r0
 8008826:	8812      	ldrh	r2, [r2, #0]
 8008828:	2120      	movs	r1, #32
 800882a:	404a      	eors	r2, r1
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	18d3      	adds	r3, r2, r3
 8008838:	183a      	adds	r2, r7, r0
 800883a:	8812      	ldrh	r2, [r2, #0]
 800883c:	496c      	ldr	r1, [pc, #432]	; (80089f0 <USB_ActivateEndpoint+0x368>)
 800883e:	430a      	orrs	r2, r1
 8008840:	b292      	uxth	r2, r2
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	e27a      	b.n	8008d3c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	18d3      	adds	r3, r2, r3
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29a      	uxth	r2, r3
 8008854:	200e      	movs	r0, #14
 8008856:	183b      	adds	r3, r7, r0
 8008858:	4968      	ldr	r1, [pc, #416]	; (80089fc <USB_ActivateEndpoint+0x374>)
 800885a:	400a      	ands	r2, r1
 800885c:	801a      	strh	r2, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	18d3      	adds	r3, r2, r3
 8008868:	183a      	adds	r2, r7, r0
 800886a:	8812      	ldrh	r2, [r2, #0]
 800886c:	4960      	ldr	r1, [pc, #384]	; (80089f0 <USB_ActivateEndpoint+0x368>)
 800886e:	430a      	orrs	r2, r1
 8008870:	b292      	uxth	r2, r2
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e262      	b.n	8008d3c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	633b      	str	r3, [r7, #48]	; 0x30
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2250      	movs	r2, #80	; 0x50
 800887e:	5a9b      	ldrh	r3, [r3, r2]
 8008880:	b29b      	uxth	r3, r3
 8008882:	001a      	movs	r2, r3
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	189b      	adds	r3, r3, r2
 8008888:	633b      	str	r3, [r7, #48]	; 0x30
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	00da      	lsls	r2, r3, #3
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	18d3      	adds	r3, r2, r3
 8008894:	4a5a      	ldr	r2, [pc, #360]	; (8008a00 <USB_ActivateEndpoint+0x378>)
 8008896:	4694      	mov	ip, r2
 8008898:	4463      	add	r3, ip
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	88db      	ldrh	r3, [r3, #6]
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	18db      	adds	r3, r3, r3
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2250      	movs	r2, #80	; 0x50
 80088b4:	5a9b      	ldrh	r3, [r3, r2]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	001a      	movs	r2, r3
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	00da      	lsls	r2, r3, #3
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	18d3      	adds	r3, r2, r3
 80088ca:	4a4e      	ldr	r2, [pc, #312]	; (8008a04 <USB_ActivateEndpoint+0x37c>)
 80088cc:	4694      	mov	ip, r2
 80088ce:	4463      	add	r3, ip
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d110      	bne.n	80088fc <USB_ActivateEndpoint+0x274>
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4a49      	ldr	r2, [pc, #292]	; (8008a08 <USB_ActivateEndpoint+0x380>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4a46      	ldr	r2, [pc, #280]	; (8008a0c <USB_ActivateEndpoint+0x384>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e02b      	b.n	8008954 <USB_ActivateEndpoint+0x2cc>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b3e      	cmp	r3, #62	; 0x3e
 8008902:	d812      	bhi.n	800892a <USB_ActivateEndpoint+0x2a2>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	66bb      	str	r3, [r7, #104]	; 0x68
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2201      	movs	r2, #1
 8008912:	4013      	ands	r3, r2
 8008914:	d002      	beq.n	800891c <USB_ActivateEndpoint+0x294>
 8008916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008918:	3301      	adds	r3, #1
 800891a:	66bb      	str	r3, [r7, #104]	; 0x68
 800891c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800891e:	b29b      	uxth	r3, r3
 8008920:	029b      	lsls	r3, r3, #10
 8008922:	b29a      	uxth	r2, r3
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	e014      	b.n	8008954 <USB_ActivateEndpoint+0x2cc>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	66bb      	str	r3, [r7, #104]	; 0x68
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	221f      	movs	r2, #31
 8008938:	4013      	ands	r3, r2
 800893a:	d102      	bne.n	8008942 <USB_ActivateEndpoint+0x2ba>
 800893c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800893e:	3b01      	subs	r3, #1
 8008940:	66bb      	str	r3, [r7, #104]	; 0x68
 8008942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <USB_ActivateEndpoint+0x384>)
 800894c:	4313      	orrs	r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	18d2      	adds	r2, r2, r3
 800895e:	2122      	movs	r1, #34	; 0x22
 8008960:	187b      	adds	r3, r7, r1
 8008962:	8812      	ldrh	r2, [r2, #0]
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	187b      	adds	r3, r7, r1
 8008968:	881a      	ldrh	r2, [r3, #0]
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	01db      	lsls	r3, r3, #7
 800896e:	4013      	ands	r3, r2
 8008970:	d016      	beq.n	80089a0 <USB_ActivateEndpoint+0x318>
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	18d3      	adds	r3, r2, r3
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	2020      	movs	r0, #32
 8008982:	183b      	adds	r3, r7, r0
 8008984:	491b      	ldr	r1, [pc, #108]	; (80089f4 <USB_ActivateEndpoint+0x36c>)
 8008986:	400a      	ands	r2, r1
 8008988:	801a      	strh	r2, [r3, #0]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	18d3      	adds	r3, r2, r3
 8008994:	183a      	adds	r2, r7, r0
 8008996:	8812      	ldrh	r2, [r2, #0]
 8008998:	491d      	ldr	r1, [pc, #116]	; (8008a10 <USB_ActivateEndpoint+0x388>)
 800899a:	430a      	orrs	r2, r1
 800899c:	b292      	uxth	r2, r2
 800899e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	201e      	movs	r0, #30
 80089b0:	183b      	adds	r3, r7, r0
 80089b2:	4918      	ldr	r1, [pc, #96]	; (8008a14 <USB_ActivateEndpoint+0x38c>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	183b      	adds	r3, r7, r0
 80089ba:	183a      	adds	r2, r7, r0
 80089bc:	8812      	ldrh	r2, [r2, #0]
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	0149      	lsls	r1, r1, #5
 80089c2:	404a      	eors	r2, r1
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	183b      	adds	r3, r7, r0
 80089c8:	183a      	adds	r2, r7, r0
 80089ca:	8812      	ldrh	r2, [r2, #0]
 80089cc:	2180      	movs	r1, #128	; 0x80
 80089ce:	0189      	lsls	r1, r1, #6
 80089d0:	404a      	eors	r2, r1
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	18d3      	adds	r3, r2, r3
 80089de:	183a      	adds	r2, r7, r0
 80089e0:	8812      	ldrh	r2, [r2, #0]
 80089e2:	4903      	ldr	r1, [pc, #12]	; (80089f0 <USB_ActivateEndpoint+0x368>)
 80089e4:	430a      	orrs	r2, r1
 80089e6:	b292      	uxth	r2, r2
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	e1a7      	b.n	8008d3c <USB_ActivateEndpoint+0x6b4>
 80089ec:	ffff898f 	.word	0xffff898f
 80089f0:	ffff8080 	.word	0xffff8080
 80089f4:	ffff8f8f 	.word	0xffff8f8f
 80089f8:	ffff80c0 	.word	0xffff80c0
 80089fc:	ffff8fbf 	.word	0xffff8fbf
 8008a00:	00000404 	.word	0x00000404
 8008a04:	00000406 	.word	0x00000406
 8008a08:	ffff83ff 	.word	0xffff83ff
 8008a0c:	ffff8000 	.word	0xffff8000
 8008a10:	ffffc080 	.word	0xffffc080
 8008a14:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d117      	bne.n	8008a50 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	18d3      	adds	r3, r2, r3
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	2062      	movs	r0, #98	; 0x62
 8008a30:	183b      	adds	r3, r7, r0
 8008a32:	49c6      	ldr	r1, [pc, #792]	; (8008d4c <USB_ActivateEndpoint+0x6c4>)
 8008a34:	400a      	ands	r2, r1
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	18d3      	adds	r3, r2, r3
 8008a42:	183a      	adds	r2, r7, r0
 8008a44:	8812      	ldrh	r2, [r2, #0]
 8008a46:	49c2      	ldr	r1, [pc, #776]	; (8008d50 <USB_ActivateEndpoint+0x6c8>)
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e016      	b.n	8008a7e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	18d3      	adds	r3, r2, r3
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	2064      	movs	r0, #100	; 0x64
 8008a60:	183b      	adds	r3, r7, r0
 8008a62:	49bc      	ldr	r1, [pc, #752]	; (8008d54 <USB_ActivateEndpoint+0x6cc>)
 8008a64:	400a      	ands	r2, r1
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	183a      	adds	r2, r7, r0
 8008a74:	8812      	ldrh	r2, [r2, #0]
 8008a76:	49b8      	ldr	r1, [pc, #736]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2250      	movs	r2, #80	; 0x50
 8008a86:	5a9b      	ldrh	r3, [r3, r2]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	001a      	movs	r2, r3
 8008a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8e:	189b      	adds	r3, r3, r2
 8008a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	00da      	lsls	r2, r3, #3
 8008a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a9a:	18d3      	adds	r3, r2, r3
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	00d2      	lsls	r2, r2, #3
 8008aa0:	4694      	mov	ip, r2
 8008aa2:	4463      	add	r3, ip
 8008aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	891b      	ldrh	r3, [r3, #8]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	18db      	adds	r3, r3, r3
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2250      	movs	r2, #80	; 0x50
 8008abe:	5a9b      	ldrh	r3, [r3, r2]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	00da      	lsls	r2, r3, #3
 8008ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ad2:	18d3      	adds	r3, r2, r3
 8008ad4:	4aa1      	ldr	r2, [pc, #644]	; (8008d5c <USB_ActivateEndpoint+0x6d4>)
 8008ad6:	4694      	mov	ip, r2
 8008ad8:	4463      	add	r3, ip
 8008ada:	653b      	str	r3, [r7, #80]	; 0x50
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	895b      	ldrh	r3, [r3, #10]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	18db      	adds	r3, r3, r3
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d000      	beq.n	8008af6 <USB_ActivateEndpoint+0x46e>
 8008af4:	e087      	b.n	8008c06 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	18d2      	adds	r2, r2, r3
 8008b00:	2140      	movs	r1, #64	; 0x40
 8008b02:	187b      	adds	r3, r7, r1
 8008b04:	8812      	ldrh	r2, [r2, #0]
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	187b      	adds	r3, r7, r1
 8008b0a:	881a      	ldrh	r2, [r3, #0]
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	01db      	lsls	r3, r3, #7
 8008b10:	4013      	ands	r3, r2
 8008b12:	d016      	beq.n	8008b42 <USB_ActivateEndpoint+0x4ba>
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	18d3      	adds	r3, r2, r3
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	203e      	movs	r0, #62	; 0x3e
 8008b24:	183b      	adds	r3, r7, r0
 8008b26:	4989      	ldr	r1, [pc, #548]	; (8008d4c <USB_ActivateEndpoint+0x6c4>)
 8008b28:	400a      	ands	r2, r1
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	18d3      	adds	r3, r2, r3
 8008b36:	183a      	adds	r2, r7, r0
 8008b38:	8812      	ldrh	r2, [r2, #0]
 8008b3a:	4989      	ldr	r1, [pc, #548]	; (8008d60 <USB_ActivateEndpoint+0x6d8>)
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	18d2      	adds	r2, r2, r3
 8008b4c:	213c      	movs	r1, #60	; 0x3c
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	8812      	ldrh	r2, [r2, #0]
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	187b      	adds	r3, r7, r1
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	2240      	movs	r2, #64	; 0x40
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d016      	beq.n	8008b8c <USB_ActivateEndpoint+0x504>
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	203a      	movs	r0, #58	; 0x3a
 8008b6e:	183b      	adds	r3, r7, r0
 8008b70:	4976      	ldr	r1, [pc, #472]	; (8008d4c <USB_ActivateEndpoint+0x6c4>)
 8008b72:	400a      	ands	r2, r1
 8008b74:	801a      	strh	r2, [r3, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	18d3      	adds	r3, r2, r3
 8008b80:	183a      	adds	r2, r7, r0
 8008b82:	8812      	ldrh	r2, [r2, #0]
 8008b84:	4977      	ldr	r1, [pc, #476]	; (8008d64 <USB_ActivateEndpoint+0x6dc>)
 8008b86:	430a      	orrs	r2, r1
 8008b88:	b292      	uxth	r2, r2
 8008b8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	18d3      	adds	r3, r2, r3
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	2038      	movs	r0, #56	; 0x38
 8008b9c:	183b      	adds	r3, r7, r0
 8008b9e:	4972      	ldr	r1, [pc, #456]	; (8008d68 <USB_ActivateEndpoint+0x6e0>)
 8008ba0:	400a      	ands	r2, r1
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	183b      	adds	r3, r7, r0
 8008ba6:	183a      	adds	r2, r7, r0
 8008ba8:	8812      	ldrh	r2, [r2, #0]
 8008baa:	2180      	movs	r1, #128	; 0x80
 8008bac:	0149      	lsls	r1, r1, #5
 8008bae:	404a      	eors	r2, r1
 8008bb0:	801a      	strh	r2, [r3, #0]
 8008bb2:	183b      	adds	r3, r7, r0
 8008bb4:	183a      	adds	r2, r7, r0
 8008bb6:	8812      	ldrh	r2, [r2, #0]
 8008bb8:	2180      	movs	r1, #128	; 0x80
 8008bba:	0189      	lsls	r1, r1, #6
 8008bbc:	404a      	eors	r2, r1
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	18d3      	adds	r3, r2, r3
 8008bca:	183a      	adds	r2, r7, r0
 8008bcc:	8812      	ldrh	r2, [r2, #0]
 8008bce:	4962      	ldr	r1, [pc, #392]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	b292      	uxth	r2, r2
 8008bd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	18d3      	adds	r3, r2, r3
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	2036      	movs	r0, #54	; 0x36
 8008be6:	183b      	adds	r3, r7, r0
 8008be8:	4960      	ldr	r1, [pc, #384]	; (8008d6c <USB_ActivateEndpoint+0x6e4>)
 8008bea:	400a      	ands	r2, r1
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	183a      	adds	r2, r7, r0
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	4956      	ldr	r1, [pc, #344]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	b292      	uxth	r2, r2
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e09a      	b.n	8008d3c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	18d2      	adds	r2, r2, r3
 8008c10:	214e      	movs	r1, #78	; 0x4e
 8008c12:	187b      	adds	r3, r7, r1
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	881a      	ldrh	r2, [r3, #0]
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	01db      	lsls	r3, r3, #7
 8008c20:	4013      	ands	r3, r2
 8008c22:	d016      	beq.n	8008c52 <USB_ActivateEndpoint+0x5ca>
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	18d3      	adds	r3, r2, r3
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	204c      	movs	r0, #76	; 0x4c
 8008c34:	183b      	adds	r3, r7, r0
 8008c36:	4945      	ldr	r1, [pc, #276]	; (8008d4c <USB_ActivateEndpoint+0x6c4>)
 8008c38:	400a      	ands	r2, r1
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	18d3      	adds	r3, r2, r3
 8008c46:	183a      	adds	r2, r7, r0
 8008c48:	8812      	ldrh	r2, [r2, #0]
 8008c4a:	4945      	ldr	r1, [pc, #276]	; (8008d60 <USB_ActivateEndpoint+0x6d8>)
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	b292      	uxth	r2, r2
 8008c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	18d2      	adds	r2, r2, r3
 8008c5c:	214a      	movs	r1, #74	; 0x4a
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	8812      	ldrh	r2, [r2, #0]
 8008c62:	801a      	strh	r2, [r3, #0]
 8008c64:	187b      	adds	r3, r7, r1
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	2240      	movs	r2, #64	; 0x40
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	d016      	beq.n	8008c9c <USB_ActivateEndpoint+0x614>
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	18d3      	adds	r3, r2, r3
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	2048      	movs	r0, #72	; 0x48
 8008c7e:	183b      	adds	r3, r7, r0
 8008c80:	4932      	ldr	r1, [pc, #200]	; (8008d4c <USB_ActivateEndpoint+0x6c4>)
 8008c82:	400a      	ands	r2, r1
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	18d3      	adds	r3, r2, r3
 8008c90:	183a      	adds	r2, r7, r0
 8008c92:	8812      	ldrh	r2, [r2, #0]
 8008c94:	4933      	ldr	r1, [pc, #204]	; (8008d64 <USB_ActivateEndpoint+0x6dc>)
 8008c96:	430a      	orrs	r2, r1
 8008c98:	b292      	uxth	r2, r2
 8008c9a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	78db      	ldrb	r3, [r3, #3]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d01d      	beq.n	8008ce0 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	18d3      	adds	r3, r2, r3
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	2044      	movs	r0, #68	; 0x44
 8008cb4:	183b      	adds	r3, r7, r0
 8008cb6:	492d      	ldr	r1, [pc, #180]	; (8008d6c <USB_ActivateEndpoint+0x6e4>)
 8008cb8:	400a      	ands	r2, r1
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	183b      	adds	r3, r7, r0
 8008cbe:	183a      	adds	r2, r7, r0
 8008cc0:	8812      	ldrh	r2, [r2, #0]
 8008cc2:	2120      	movs	r1, #32
 8008cc4:	404a      	eors	r2, r1
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	183a      	adds	r2, r7, r0
 8008cd4:	8812      	ldrh	r2, [r2, #0]
 8008cd6:	4920      	ldr	r1, [pc, #128]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	b292      	uxth	r2, r2
 8008cdc:	801a      	strh	r2, [r3, #0]
 8008cde:	e016      	b.n	8008d0e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	18d3      	adds	r3, r2, r3
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	2046      	movs	r0, #70	; 0x46
 8008cf0:	183b      	adds	r3, r7, r0
 8008cf2:	491e      	ldr	r1, [pc, #120]	; (8008d6c <USB_ActivateEndpoint+0x6e4>)
 8008cf4:	400a      	ands	r2, r1
 8008cf6:	801a      	strh	r2, [r3, #0]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	18d3      	adds	r3, r2, r3
 8008d02:	183a      	adds	r2, r7, r0
 8008d04:	8812      	ldrh	r2, [r2, #0]
 8008d06:	4914      	ldr	r1, [pc, #80]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	b292      	uxth	r2, r2
 8008d0c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	2042      	movs	r0, #66	; 0x42
 8008d1e:	183b      	adds	r3, r7, r0
 8008d20:	4911      	ldr	r1, [pc, #68]	; (8008d68 <USB_ActivateEndpoint+0x6e0>)
 8008d22:	400a      	ands	r2, r1
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	18d3      	adds	r3, r2, r3
 8008d30:	183a      	adds	r2, r7, r0
 8008d32:	8812      	ldrh	r2, [r2, #0]
 8008d34:	4908      	ldr	r1, [pc, #32]	; (8008d58 <USB_ActivateEndpoint+0x6d0>)
 8008d36:	430a      	orrs	r2, r1
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008d3c:	236f      	movs	r3, #111	; 0x6f
 8008d3e:	18fb      	adds	r3, r7, r3
 8008d40:	781b      	ldrb	r3, [r3, #0]
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b01c      	add	sp, #112	; 0x70
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	ffff8f8f 	.word	0xffff8f8f
 8008d50:	ffff8180 	.word	0xffff8180
 8008d54:	ffff8e8f 	.word	0xffff8e8f
 8008d58:	ffff8080 	.word	0xffff8080
 8008d5c:	00000404 	.word	0x00000404
 8008d60:	ffffc080 	.word	0xffffc080
 8008d64:	ffff80c0 	.word	0xffff80c0
 8008d68:	ffffbf8f 	.word	0xffffbf8f
 8008d6c:	ffff8fbf 	.word	0xffff8fbf

08008d70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08c      	sub	sp, #48	; 0x30
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	7b1b      	ldrb	r3, [r3, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d000      	beq.n	8008d84 <USB_DeactivateEndpoint+0x14>
 8008d82:	e07e      	b.n	8008e82 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d03c      	beq.n	8008e06 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	18d2      	adds	r2, r2, r3
 8008d96:	210c      	movs	r1, #12
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	8812      	ldrh	r2, [r2, #0]
 8008d9c:	801a      	strh	r2, [r3, #0]
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	4013      	ands	r3, r2
 8008da6:	d016      	beq.n	8008dd6 <USB_DeactivateEndpoint+0x66>
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	18d3      	adds	r3, r2, r3
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	200a      	movs	r0, #10
 8008db8:	183b      	adds	r3, r7, r0
 8008dba:	49c7      	ldr	r1, [pc, #796]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008dbc:	400a      	ands	r2, r1
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	18d3      	adds	r3, r2, r3
 8008dca:	183a      	adds	r2, r7, r0
 8008dcc:	8812      	ldrh	r2, [r2, #0]
 8008dce:	49c3      	ldr	r1, [pc, #780]	; (80090dc <USB_DeactivateEndpoint+0x36c>)
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	b292      	uxth	r2, r2
 8008dd4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	18d3      	adds	r3, r2, r3
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	2008      	movs	r0, #8
 8008de6:	183b      	adds	r3, r7, r0
 8008de8:	49bd      	ldr	r1, [pc, #756]	; (80090e0 <USB_DeactivateEndpoint+0x370>)
 8008dea:	400a      	ands	r2, r1
 8008dec:	801a      	strh	r2, [r3, #0]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	18d3      	adds	r3, r2, r3
 8008df8:	183a      	adds	r2, r7, r0
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	49b9      	ldr	r1, [pc, #740]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	b292      	uxth	r2, r2
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e163      	b.n	80090ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	18d2      	adds	r2, r2, r3
 8008e10:	2112      	movs	r1, #18
 8008e12:	187b      	adds	r3, r7, r1
 8008e14:	8812      	ldrh	r2, [r2, #0]
 8008e16:	801a      	strh	r2, [r3, #0]
 8008e18:	187b      	adds	r3, r7, r1
 8008e1a:	881a      	ldrh	r2, [r3, #0]
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	01db      	lsls	r3, r3, #7
 8008e20:	4013      	ands	r3, r2
 8008e22:	d016      	beq.n	8008e52 <USB_DeactivateEndpoint+0xe2>
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	18d3      	adds	r3, r2, r3
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	2010      	movs	r0, #16
 8008e34:	183b      	adds	r3, r7, r0
 8008e36:	49a8      	ldr	r1, [pc, #672]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008e38:	400a      	ands	r2, r1
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	18d3      	adds	r3, r2, r3
 8008e46:	183a      	adds	r2, r7, r0
 8008e48:	8812      	ldrh	r2, [r2, #0]
 8008e4a:	49a7      	ldr	r1, [pc, #668]	; (80090e8 <USB_DeactivateEndpoint+0x378>)
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	18d3      	adds	r3, r2, r3
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	200e      	movs	r0, #14
 8008e62:	183b      	adds	r3, r7, r0
 8008e64:	49a1      	ldr	r1, [pc, #644]	; (80090ec <USB_DeactivateEndpoint+0x37c>)
 8008e66:	400a      	ands	r2, r1
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	18d3      	adds	r3, r2, r3
 8008e74:	183a      	adds	r2, r7, r0
 8008e76:	8812      	ldrh	r2, [r2, #0]
 8008e78:	499a      	ldr	r1, [pc, #616]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e125      	b.n	80090ce <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d000      	beq.n	8008e8c <USB_DeactivateEndpoint+0x11c>
 8008e8a:	e090      	b.n	8008fae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	18d2      	adds	r2, r2, r3
 8008e96:	2120      	movs	r1, #32
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	8812      	ldrh	r2, [r2, #0]
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	881a      	ldrh	r2, [r3, #0]
 8008ea2:	2380      	movs	r3, #128	; 0x80
 8008ea4:	01db      	lsls	r3, r3, #7
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	d016      	beq.n	8008ed8 <USB_DeactivateEndpoint+0x168>
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	18d3      	adds	r3, r2, r3
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	201e      	movs	r0, #30
 8008eba:	183b      	adds	r3, r7, r0
 8008ebc:	4986      	ldr	r1, [pc, #536]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008ebe:	400a      	ands	r2, r1
 8008ec0:	801a      	strh	r2, [r3, #0]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	18d3      	adds	r3, r2, r3
 8008ecc:	183a      	adds	r2, r7, r0
 8008ece:	8812      	ldrh	r2, [r2, #0]
 8008ed0:	4985      	ldr	r1, [pc, #532]	; (80090e8 <USB_DeactivateEndpoint+0x378>)
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	18d2      	adds	r2, r2, r3
 8008ee2:	211c      	movs	r1, #28
 8008ee4:	187b      	adds	r3, r7, r1
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	2240      	movs	r2, #64	; 0x40
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d016      	beq.n	8008f22 <USB_DeactivateEndpoint+0x1b2>
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	18d3      	adds	r3, r2, r3
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	201a      	movs	r0, #26
 8008f04:	183b      	adds	r3, r7, r0
 8008f06:	4974      	ldr	r1, [pc, #464]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008f08:	400a      	ands	r2, r1
 8008f0a:	801a      	strh	r2, [r3, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	18d3      	adds	r3, r2, r3
 8008f16:	183a      	adds	r2, r7, r0
 8008f18:	8812      	ldrh	r2, [r2, #0]
 8008f1a:	4970      	ldr	r1, [pc, #448]	; (80090dc <USB_DeactivateEndpoint+0x36c>)
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	18d3      	adds	r3, r2, r3
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	2018      	movs	r0, #24
 8008f32:	183b      	adds	r3, r7, r0
 8008f34:	4968      	ldr	r1, [pc, #416]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008f36:	400a      	ands	r2, r1
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	18d3      	adds	r3, r2, r3
 8008f44:	183a      	adds	r2, r7, r0
 8008f46:	8812      	ldrh	r2, [r2, #0]
 8008f48:	4964      	ldr	r1, [pc, #400]	; (80090dc <USB_DeactivateEndpoint+0x36c>)
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	18d3      	adds	r3, r2, r3
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	2016      	movs	r0, #22
 8008f60:	183b      	adds	r3, r7, r0
 8008f62:	4962      	ldr	r1, [pc, #392]	; (80090ec <USB_DeactivateEndpoint+0x37c>)
 8008f64:	400a      	ands	r2, r1
 8008f66:	801a      	strh	r2, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	18d3      	adds	r3, r2, r3
 8008f72:	183a      	adds	r2, r7, r0
 8008f74:	8812      	ldrh	r2, [r2, #0]
 8008f76:	495b      	ldr	r1, [pc, #364]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	18d3      	adds	r3, r2, r3
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	2014      	movs	r0, #20
 8008f8e:	183b      	adds	r3, r7, r0
 8008f90:	4953      	ldr	r1, [pc, #332]	; (80090e0 <USB_DeactivateEndpoint+0x370>)
 8008f92:	400a      	ands	r2, r1
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	18d3      	adds	r3, r2, r3
 8008fa0:	183a      	adds	r2, r7, r0
 8008fa2:	8812      	ldrh	r2, [r2, #0]
 8008fa4:	494f      	ldr	r1, [pc, #316]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	e08f      	b.n	80090ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	18d2      	adds	r2, r2, r3
 8008fb8:	212e      	movs	r1, #46	; 0x2e
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	8812      	ldrh	r2, [r2, #0]
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	881a      	ldrh	r2, [r3, #0]
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	01db      	lsls	r3, r3, #7
 8008fc8:	4013      	ands	r3, r2
 8008fca:	d016      	beq.n	8008ffa <USB_DeactivateEndpoint+0x28a>
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	18d3      	adds	r3, r2, r3
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	202c      	movs	r0, #44	; 0x2c
 8008fdc:	183b      	adds	r3, r7, r0
 8008fde:	493e      	ldr	r1, [pc, #248]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8008fe0:	400a      	ands	r2, r1
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	18d3      	adds	r3, r2, r3
 8008fee:	183a      	adds	r2, r7, r0
 8008ff0:	8812      	ldrh	r2, [r2, #0]
 8008ff2:	493d      	ldr	r1, [pc, #244]	; (80090e8 <USB_DeactivateEndpoint+0x378>)
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	18d2      	adds	r2, r2, r3
 8009004:	212a      	movs	r1, #42	; 0x2a
 8009006:	187b      	adds	r3, r7, r1
 8009008:	8812      	ldrh	r2, [r2, #0]
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	187b      	adds	r3, r7, r1
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	2240      	movs	r2, #64	; 0x40
 8009012:	4013      	ands	r3, r2
 8009014:	d016      	beq.n	8009044 <USB_DeactivateEndpoint+0x2d4>
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	18d3      	adds	r3, r2, r3
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	b29a      	uxth	r2, r3
 8009024:	2028      	movs	r0, #40	; 0x28
 8009026:	183b      	adds	r3, r7, r0
 8009028:	492b      	ldr	r1, [pc, #172]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 800902a:	400a      	ands	r2, r1
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	18d3      	adds	r3, r2, r3
 8009038:	183a      	adds	r2, r7, r0
 800903a:	8812      	ldrh	r2, [r2, #0]
 800903c:	4927      	ldr	r1, [pc, #156]	; (80090dc <USB_DeactivateEndpoint+0x36c>)
 800903e:	430a      	orrs	r2, r1
 8009040:	b292      	uxth	r2, r2
 8009042:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	18d3      	adds	r3, r2, r3
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	2026      	movs	r0, #38	; 0x26
 8009054:	183b      	adds	r3, r7, r0
 8009056:	4920      	ldr	r1, [pc, #128]	; (80090d8 <USB_DeactivateEndpoint+0x368>)
 8009058:	400a      	ands	r2, r1
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	18d3      	adds	r3, r2, r3
 8009066:	183a      	adds	r2, r7, r0
 8009068:	8812      	ldrh	r2, [r2, #0]
 800906a:	491f      	ldr	r1, [pc, #124]	; (80090e8 <USB_DeactivateEndpoint+0x378>)
 800906c:	430a      	orrs	r2, r1
 800906e:	b292      	uxth	r2, r2
 8009070:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	18d3      	adds	r3, r2, r3
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29a      	uxth	r2, r3
 8009080:	2024      	movs	r0, #36	; 0x24
 8009082:	183b      	adds	r3, r7, r0
 8009084:	4916      	ldr	r1, [pc, #88]	; (80090e0 <USB_DeactivateEndpoint+0x370>)
 8009086:	400a      	ands	r2, r1
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	18d3      	adds	r3, r2, r3
 8009094:	183a      	adds	r2, r7, r0
 8009096:	8812      	ldrh	r2, [r2, #0]
 8009098:	4912      	ldr	r1, [pc, #72]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 800909a:	430a      	orrs	r2, r1
 800909c:	b292      	uxth	r2, r2
 800909e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	18d3      	adds	r3, r2, r3
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	2022      	movs	r0, #34	; 0x22
 80090b0:	183b      	adds	r3, r7, r0
 80090b2:	490e      	ldr	r1, [pc, #56]	; (80090ec <USB_DeactivateEndpoint+0x37c>)
 80090b4:	400a      	ands	r2, r1
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	18d3      	adds	r3, r2, r3
 80090c2:	183a      	adds	r2, r7, r0
 80090c4:	8812      	ldrh	r2, [r2, #0]
 80090c6:	4907      	ldr	r1, [pc, #28]	; (80090e4 <USB_DeactivateEndpoint+0x374>)
 80090c8:	430a      	orrs	r2, r1
 80090ca:	b292      	uxth	r2, r2
 80090cc:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	0018      	movs	r0, r3
 80090d2:	46bd      	mov	sp, r7
 80090d4:	b00c      	add	sp, #48	; 0x30
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	ffff8f8f 	.word	0xffff8f8f
 80090dc:	ffff80c0 	.word	0xffff80c0
 80090e0:	ffff8fbf 	.word	0xffff8fbf
 80090e4:	ffff8080 	.word	0xffff8080
 80090e8:	ffffc080 	.word	0xffffc080
 80090ec:	ffffbf8f 	.word	0xffffbf8f

080090f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b0c3      	sub	sp, #268	; 0x10c
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d001      	beq.n	8009106 <USB_EPStartXfer+0x16>
 8009102:	f000 fcef 	bl	8009ae4 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	429a      	cmp	r2, r3
 8009110:	d905      	bls.n	800911e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	1d7a      	adds	r2, r7, #5
 8009118:	32ff      	adds	r2, #255	; 0xff
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	e004      	b.n	8009128 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	1d7a      	adds	r2, r7, #5
 8009124:	32ff      	adds	r2, #255	; 0xff
 8009126:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	7b1b      	ldrb	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d125      	bne.n	800917c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	6959      	ldr	r1, [r3, #20]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	88da      	ldrh	r2, [r3, #6]
 8009138:	1d7b      	adds	r3, r7, #5
 800913a:	33ff      	adds	r3, #255	; 0xff
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 f9c9 	bl	800a4d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2250      	movs	r2, #80	; 0x50
 800914e:	5a9b      	ldrh	r3, [r3, r2]
 8009150:	b29b      	uxth	r3, r3
 8009152:	001a      	movs	r2, r3
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	189b      	adds	r3, r3, r2
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	00da      	lsls	r2, r3, #3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	18d3      	adds	r3, r2, r3
 8009164:	4acc      	ldr	r2, [pc, #816]	; (8009498 <USB_EPStartXfer+0x3a8>)
 8009166:	4694      	mov	ip, r2
 8009168:	4463      	add	r3, ip
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	1d7b      	adds	r3, r7, #5
 800916e:	33ff      	adds	r3, #255	; 0xff
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	f000 fc8f 	bl	8009a9a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	78db      	ldrb	r3, [r3, #3]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d000      	beq.n	8009186 <USB_EPStartXfer+0x96>
 8009184:	e33a      	b.n	80097fc <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d800      	bhi.n	8009194 <USB_EPStartXfer+0xa4>
 8009192:	e2df      	b.n	8009754 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	18d3      	adds	r3, r2, r3
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	2056      	movs	r0, #86	; 0x56
 80091a4:	183b      	adds	r3, r7, r0
 80091a6:	49bd      	ldr	r1, [pc, #756]	; (800949c <USB_EPStartXfer+0x3ac>)
 80091a8:	400a      	ands	r2, r1
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	18d3      	adds	r3, r2, r3
 80091b6:	183a      	adds	r2, r7, r0
 80091b8:	8812      	ldrh	r2, [r2, #0]
 80091ba:	49b9      	ldr	r1, [pc, #740]	; (80094a0 <USB_EPStartXfer+0x3b0>)
 80091bc:	430a      	orrs	r2, r1
 80091be:	b292      	uxth	r2, r2
 80091c0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	1d7b      	adds	r3, r7, #5
 80091c8:	33ff      	adds	r3, #255	; 0xff
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	1ad2      	subs	r2, r2, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	18d3      	adds	r3, r2, r3
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	001a      	movs	r2, r3
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	4013      	ands	r3, r2
 80091e6:	d100      	bne.n	80091ea <USB_EPStartXfer+0xfa>
 80091e8:	e162      	b.n	80094b0 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	633b      	str	r3, [r7, #48]	; 0x30
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d16a      	bne.n	80092cc <USB_EPStartXfer+0x1dc>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2250      	movs	r2, #80	; 0x50
 80091fe:	5a9b      	ldrh	r3, [r3, r2]
 8009200:	b29b      	uxth	r3, r3
 8009202:	001a      	movs	r2, r3
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	189b      	adds	r3, r3, r2
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	00da      	lsls	r2, r3, #3
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	18d3      	adds	r3, r2, r3
 8009214:	4aa3      	ldr	r2, [pc, #652]	; (80094a4 <USB_EPStartXfer+0x3b4>)
 8009216:	4694      	mov	ip, r2
 8009218:	4463      	add	r3, ip
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
 800921c:	1d7b      	adds	r3, r7, #5
 800921e:	33ff      	adds	r3, #255	; 0xff
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d110      	bne.n	8009248 <USB_EPStartXfer+0x158>
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	4a9e      	ldr	r2, [pc, #632]	; (80094a8 <USB_EPStartXfer+0x3b8>)
 800922e:	4013      	ands	r3, r2
 8009230:	b29a      	uxth	r2, r3
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	801a      	strh	r2, [r3, #0]
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	4a9b      	ldr	r2, [pc, #620]	; (80094ac <USB_EPStartXfer+0x3bc>)
 800923e:	4313      	orrs	r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	e05c      	b.n	8009302 <USB_EPStartXfer+0x212>
 8009248:	1d7b      	adds	r3, r7, #5
 800924a:	33ff      	adds	r3, #255	; 0xff
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b3e      	cmp	r3, #62	; 0x3e
 8009250:	d81c      	bhi.n	800928c <USB_EPStartXfer+0x19c>
 8009252:	1d7b      	adds	r3, r7, #5
 8009254:	33ff      	adds	r3, #255	; 0xff
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	085b      	lsrs	r3, r3, #1
 800925a:	1c7a      	adds	r2, r7, #1
 800925c:	32ff      	adds	r2, #255	; 0xff
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	1d7b      	adds	r3, r7, #5
 8009262:	33ff      	adds	r3, #255	; 0xff
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2201      	movs	r2, #1
 8009268:	4013      	ands	r3, r2
 800926a:	d006      	beq.n	800927a <USB_EPStartXfer+0x18a>
 800926c:	1c7b      	adds	r3, r7, #1
 800926e:	33ff      	adds	r3, #255	; 0xff
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	1c7a      	adds	r2, r7, #1
 8009276:	32ff      	adds	r2, #255	; 0xff
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	1c7b      	adds	r3, r7, #1
 800927c:	33ff      	adds	r3, #255	; 0xff
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	029b      	lsls	r3, r3, #10
 8009284:	b29a      	uxth	r2, r3
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	e03a      	b.n	8009302 <USB_EPStartXfer+0x212>
 800928c:	1d7b      	adds	r3, r7, #5
 800928e:	33ff      	adds	r3, #255	; 0xff
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	1c7a      	adds	r2, r7, #1
 8009296:	32ff      	adds	r2, #255	; 0xff
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	1d7b      	adds	r3, r7, #5
 800929c:	33ff      	adds	r3, #255	; 0xff
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	221f      	movs	r2, #31
 80092a2:	4013      	ands	r3, r2
 80092a4:	d106      	bne.n	80092b4 <USB_EPStartXfer+0x1c4>
 80092a6:	1c7b      	adds	r3, r7, #1
 80092a8:	33ff      	adds	r3, #255	; 0xff
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	1c7a      	adds	r2, r7, #1
 80092b0:	32ff      	adds	r2, #255	; 0xff
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	1c7b      	adds	r3, r7, #1
 80092b6:	33ff      	adds	r3, #255	; 0xff
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4a7a      	ldr	r2, [pc, #488]	; (80094ac <USB_EPStartXfer+0x3bc>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e01a      	b.n	8009302 <USB_EPStartXfer+0x212>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	785b      	ldrb	r3, [r3, #1]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d116      	bne.n	8009302 <USB_EPStartXfer+0x212>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2250      	movs	r2, #80	; 0x50
 80092d8:	5a9b      	ldrh	r3, [r3, r2]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	001a      	movs	r2, r3
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	633b      	str	r3, [r7, #48]	; 0x30
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	00da      	lsls	r2, r3, #3
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	18d3      	adds	r3, r2, r3
 80092ee:	4a6d      	ldr	r2, [pc, #436]	; (80094a4 <USB_EPStartXfer+0x3b4>)
 80092f0:	4694      	mov	ip, r2
 80092f2:	4463      	add	r3, ip
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092f6:	1d7b      	adds	r3, r7, #5
 80092f8:	33ff      	adds	r3, #255	; 0xff
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009302:	2076      	movs	r0, #118	; 0x76
 8009304:	183b      	adds	r3, r7, r0
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	8952      	ldrh	r2, [r2, #10]
 800930a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	6959      	ldr	r1, [r3, #20]
 8009310:	1d7b      	adds	r3, r7, #5
 8009312:	33ff      	adds	r3, #255	; 0xff
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b29c      	uxth	r4, r3
 8009318:	183b      	adds	r3, r7, r0
 800931a:	881a      	ldrh	r2, [r3, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	0023      	movs	r3, r4
 8009320:	f001 f8da 	bl	800a4d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	695a      	ldr	r2, [r3, #20]
 8009328:	1d7b      	adds	r3, r7, #5
 800932a:	33ff      	adds	r3, #255	; 0xff
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	18d2      	adds	r2, r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6a1a      	ldr	r2, [r3, #32]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	429a      	cmp	r2, r3
 800933e:	d908      	bls.n	8009352 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	6a1a      	ldr	r2, [r3, #32]
 8009344:	1d7b      	adds	r3, r7, #5
 8009346:	33ff      	adds	r3, #255	; 0xff
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	1ad2      	subs	r2, r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	621a      	str	r2, [r3, #32]
 8009350:	e007      	b.n	8009362 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1d7a      	adds	r2, r7, #5
 8009358:	32ff      	adds	r2, #255	; 0xff
 800935a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d166      	bne.n	8009438 <USB_EPStartXfer+0x348>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2250      	movs	r2, #80	; 0x50
 8009372:	5a9b      	ldrh	r3, [r3, r2]
 8009374:	b29b      	uxth	r3, r3
 8009376:	001a      	movs	r2, r3
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	189b      	adds	r3, r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	00da      	lsls	r2, r3, #3
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	4a43      	ldr	r2, [pc, #268]	; (8009498 <USB_EPStartXfer+0x3a8>)
 800938a:	4694      	mov	ip, r2
 800938c:	4463      	add	r3, ip
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	1d7b      	adds	r3, r7, #5
 8009392:	33ff      	adds	r3, #255	; 0xff
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d110      	bne.n	80093bc <USB_EPStartXfer+0x2cc>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	4a41      	ldr	r2, [pc, #260]	; (80094a8 <USB_EPStartXfer+0x3b8>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	4a3e      	ldr	r2, [pc, #248]	; (80094ac <USB_EPStartXfer+0x3bc>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	801a      	strh	r2, [r3, #0]
 80093ba:	e05a      	b.n	8009472 <USB_EPStartXfer+0x382>
 80093bc:	1d7b      	adds	r3, r7, #5
 80093be:	33ff      	adds	r3, #255	; 0xff
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b3e      	cmp	r3, #62	; 0x3e
 80093c4:	d81a      	bhi.n	80093fc <USB_EPStartXfer+0x30c>
 80093c6:	1d7b      	adds	r3, r7, #5
 80093c8:	33ff      	adds	r3, #255	; 0xff
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	085b      	lsrs	r3, r3, #1
 80093ce:	21fc      	movs	r1, #252	; 0xfc
 80093d0:	187a      	adds	r2, r7, r1
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	1d7b      	adds	r3, r7, #5
 80093d6:	33ff      	adds	r3, #255	; 0xff
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	4013      	ands	r3, r2
 80093de:	d004      	beq.n	80093ea <USB_EPStartXfer+0x2fa>
 80093e0:	187b      	adds	r3, r7, r1
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	187a      	adds	r2, r7, r1
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	23fc      	movs	r3, #252	; 0xfc
 80093ec:	18fb      	adds	r3, r7, r3
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	e03a      	b.n	8009472 <USB_EPStartXfer+0x382>
 80093fc:	1d7b      	adds	r3, r7, #5
 80093fe:	33ff      	adds	r3, #255	; 0xff
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	095b      	lsrs	r3, r3, #5
 8009404:	21fc      	movs	r1, #252	; 0xfc
 8009406:	187a      	adds	r2, r7, r1
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	1d7b      	adds	r3, r7, #5
 800940c:	33ff      	adds	r3, #255	; 0xff
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	221f      	movs	r2, #31
 8009412:	4013      	ands	r3, r2
 8009414:	d104      	bne.n	8009420 <USB_EPStartXfer+0x330>
 8009416:	187b      	adds	r3, r7, r1
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	187a      	adds	r2, r7, r1
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	23fc      	movs	r3, #252	; 0xfc
 8009422:	18fb      	adds	r3, r7, r3
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	029b      	lsls	r3, r3, #10
 800942a:	b29b      	uxth	r3, r3
 800942c:	4a1f      	ldr	r2, [pc, #124]	; (80094ac <USB_EPStartXfer+0x3bc>)
 800942e:	4313      	orrs	r3, r2
 8009430:	b29a      	uxth	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	e01c      	b.n	8009472 <USB_EPStartXfer+0x382>
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d118      	bne.n	8009472 <USB_EPStartXfer+0x382>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	623b      	str	r3, [r7, #32]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2250      	movs	r2, #80	; 0x50
 8009448:	5a9b      	ldrh	r3, [r3, r2]
 800944a:	b29b      	uxth	r3, r3
 800944c:	001a      	movs	r2, r3
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	189b      	adds	r3, r3, r2
 8009452:	623b      	str	r3, [r7, #32]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	00da      	lsls	r2, r3, #3
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	18d3      	adds	r3, r2, r3
 800945e:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <USB_EPStartXfer+0x3a8>)
 8009460:	4694      	mov	ip, r2
 8009462:	4463      	add	r3, ip
 8009464:	61fb      	str	r3, [r7, #28]
 8009466:	1d7b      	adds	r3, r7, #5
 8009468:	33ff      	adds	r3, #255	; 0xff
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	b29a      	uxth	r2, r3
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009472:	2076      	movs	r0, #118	; 0x76
 8009474:	183b      	adds	r3, r7, r0
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	8912      	ldrh	r2, [r2, #8]
 800947a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	6959      	ldr	r1, [r3, #20]
 8009480:	1d7b      	adds	r3, r7, #5
 8009482:	33ff      	adds	r3, #255	; 0xff
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	b29c      	uxth	r4, r3
 8009488:	183b      	adds	r3, r7, r0
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	0023      	movs	r3, r4
 8009490:	f001 f822 	bl	800a4d8 <USB_WritePMA>
 8009494:	e301      	b.n	8009a9a <USB_EPStartXfer+0x9aa>
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	00000402 	.word	0x00000402
 800949c:	ffff8f8f 	.word	0xffff8f8f
 80094a0:	ffff8180 	.word	0xffff8180
 80094a4:	00000406 	.word	0x00000406
 80094a8:	ffff83ff 	.word	0xffff83ff
 80094ac:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d166      	bne.n	8009586 <USB_EPStartXfer+0x496>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2250      	movs	r2, #80	; 0x50
 80094c0:	5a9b      	ldrh	r3, [r3, r2]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	001a      	movs	r2, r3
 80094c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c8:	189b      	adds	r3, r3, r2
 80094ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	00da      	lsls	r2, r3, #3
 80094d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d4:	18d3      	adds	r3, r2, r3
 80094d6:	4ac3      	ldr	r2, [pc, #780]	; (80097e4 <USB_EPStartXfer+0x6f4>)
 80094d8:	4694      	mov	ip, r2
 80094da:	4463      	add	r3, ip
 80094dc:	647b      	str	r3, [r7, #68]	; 0x44
 80094de:	1d7b      	adds	r3, r7, #5
 80094e0:	33ff      	adds	r3, #255	; 0xff
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d110      	bne.n	800950a <USB_EPStartXfer+0x41a>
 80094e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	4abe      	ldr	r2, [pc, #760]	; (80097e8 <USB_EPStartXfer+0x6f8>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4abb      	ldr	r2, [pc, #748]	; (80097ec <USB_EPStartXfer+0x6fc>)
 8009500:	4313      	orrs	r3, r2
 8009502:	b29a      	uxth	r2, r3
 8009504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e05a      	b.n	80095c0 <USB_EPStartXfer+0x4d0>
 800950a:	1d7b      	adds	r3, r7, #5
 800950c:	33ff      	adds	r3, #255	; 0xff
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b3e      	cmp	r3, #62	; 0x3e
 8009512:	d81a      	bhi.n	800954a <USB_EPStartXfer+0x45a>
 8009514:	1d7b      	adds	r3, r7, #5
 8009516:	33ff      	adds	r3, #255	; 0xff
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	085b      	lsrs	r3, r3, #1
 800951c:	21f8      	movs	r1, #248	; 0xf8
 800951e:	187a      	adds	r2, r7, r1
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	1d7b      	adds	r3, r7, #5
 8009524:	33ff      	adds	r3, #255	; 0xff
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2201      	movs	r2, #1
 800952a:	4013      	ands	r3, r2
 800952c:	d004      	beq.n	8009538 <USB_EPStartXfer+0x448>
 800952e:	187b      	adds	r3, r7, r1
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	187a      	adds	r2, r7, r1
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	23f8      	movs	r3, #248	; 0xf8
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	b29b      	uxth	r3, r3
 8009540:	029b      	lsls	r3, r3, #10
 8009542:	b29a      	uxth	r2, r3
 8009544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	e03a      	b.n	80095c0 <USB_EPStartXfer+0x4d0>
 800954a:	1d7b      	adds	r3, r7, #5
 800954c:	33ff      	adds	r3, #255	; 0xff
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	21f8      	movs	r1, #248	; 0xf8
 8009554:	187a      	adds	r2, r7, r1
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	1d7b      	adds	r3, r7, #5
 800955a:	33ff      	adds	r3, #255	; 0xff
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	221f      	movs	r2, #31
 8009560:	4013      	ands	r3, r2
 8009562:	d104      	bne.n	800956e <USB_EPStartXfer+0x47e>
 8009564:	187b      	adds	r3, r7, r1
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	187a      	adds	r2, r7, r1
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	23f8      	movs	r3, #248	; 0xf8
 8009570:	18fb      	adds	r3, r7, r3
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	029b      	lsls	r3, r3, #10
 8009578:	b29b      	uxth	r3, r3
 800957a:	4a9c      	ldr	r2, [pc, #624]	; (80097ec <USB_EPStartXfer+0x6fc>)
 800957c:	4313      	orrs	r3, r2
 800957e:	b29a      	uxth	r2, r3
 8009580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e01c      	b.n	80095c0 <USB_EPStartXfer+0x4d0>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d118      	bne.n	80095c0 <USB_EPStartXfer+0x4d0>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	653b      	str	r3, [r7, #80]	; 0x50
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2250      	movs	r2, #80	; 0x50
 8009596:	5a9b      	ldrh	r3, [r3, r2]
 8009598:	b29b      	uxth	r3, r3
 800959a:	001a      	movs	r2, r3
 800959c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800959e:	189b      	adds	r3, r3, r2
 80095a0:	653b      	str	r3, [r7, #80]	; 0x50
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	00da      	lsls	r2, r3, #3
 80095a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095aa:	18d3      	adds	r3, r2, r3
 80095ac:	4a8d      	ldr	r2, [pc, #564]	; (80097e4 <USB_EPStartXfer+0x6f4>)
 80095ae:	4694      	mov	ip, r2
 80095b0:	4463      	add	r3, ip
 80095b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b4:	1d7b      	adds	r3, r7, #5
 80095b6:	33ff      	adds	r3, #255	; 0xff
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80095c0:	2076      	movs	r0, #118	; 0x76
 80095c2:	183b      	adds	r3, r7, r0
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	8912      	ldrh	r2, [r2, #8]
 80095c8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6959      	ldr	r1, [r3, #20]
 80095ce:	1d7b      	adds	r3, r7, #5
 80095d0:	33ff      	adds	r3, #255	; 0xff
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	b29c      	uxth	r4, r3
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	881a      	ldrh	r2, [r3, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	0023      	movs	r3, r4
 80095de:	f000 ff7b 	bl	800a4d8 <USB_WritePMA>
            ep->xfer_buff += len;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	695a      	ldr	r2, [r3, #20]
 80095e6:	1d7b      	adds	r3, r7, #5
 80095e8:	33ff      	adds	r3, #255	; 0xff
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	18d2      	adds	r2, r2, r3
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6a1a      	ldr	r2, [r3, #32]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d908      	bls.n	8009610 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	6a1a      	ldr	r2, [r3, #32]
 8009602:	1d7b      	adds	r3, r7, #5
 8009604:	33ff      	adds	r3, #255	; 0xff
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	1ad2      	subs	r2, r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	621a      	str	r2, [r3, #32]
 800960e:	e007      	b.n	8009620 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	1d7a      	adds	r2, r7, #5
 8009616:	32ff      	adds	r2, #255	; 0xff
 8009618:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2200      	movs	r2, #0
 800961e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	643b      	str	r3, [r7, #64]	; 0x40
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d166      	bne.n	80096fa <USB_EPStartXfer+0x60a>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2250      	movs	r2, #80	; 0x50
 8009634:	5a9b      	ldrh	r3, [r3, r2]
 8009636:	b29b      	uxth	r3, r3
 8009638:	001a      	movs	r2, r3
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	189b      	adds	r3, r3, r2
 800963e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	00da      	lsls	r2, r3, #3
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	4a69      	ldr	r2, [pc, #420]	; (80097f0 <USB_EPStartXfer+0x700>)
 800964c:	4694      	mov	ip, r2
 800964e:	4463      	add	r3, ip
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
 8009652:	1d7b      	adds	r3, r7, #5
 8009654:	33ff      	adds	r3, #255	; 0xff
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d110      	bne.n	800967e <USB_EPStartXfer+0x58e>
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	4a61      	ldr	r2, [pc, #388]	; (80097e8 <USB_EPStartXfer+0x6f8>)
 8009664:	4013      	ands	r3, r2
 8009666:	b29a      	uxth	r2, r3
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29b      	uxth	r3, r3
 8009672:	4a5e      	ldr	r2, [pc, #376]	; (80097ec <USB_EPStartXfer+0x6fc>)
 8009674:	4313      	orrs	r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e058      	b.n	8009730 <USB_EPStartXfer+0x640>
 800967e:	1d7b      	adds	r3, r7, #5
 8009680:	33ff      	adds	r3, #255	; 0xff
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b3e      	cmp	r3, #62	; 0x3e
 8009686:	d81a      	bhi.n	80096be <USB_EPStartXfer+0x5ce>
 8009688:	1d7b      	adds	r3, r7, #5
 800968a:	33ff      	adds	r3, #255	; 0xff
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	21f4      	movs	r1, #244	; 0xf4
 8009692:	187a      	adds	r2, r7, r1
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	1d7b      	adds	r3, r7, #5
 8009698:	33ff      	adds	r3, #255	; 0xff
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2201      	movs	r2, #1
 800969e:	4013      	ands	r3, r2
 80096a0:	d004      	beq.n	80096ac <USB_EPStartXfer+0x5bc>
 80096a2:	187b      	adds	r3, r7, r1
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	187a      	adds	r2, r7, r1
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	23f4      	movs	r3, #244	; 0xf4
 80096ae:	18fb      	adds	r3, r7, r3
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ba:	801a      	strh	r2, [r3, #0]
 80096bc:	e038      	b.n	8009730 <USB_EPStartXfer+0x640>
 80096be:	1d7b      	adds	r3, r7, #5
 80096c0:	33ff      	adds	r3, #255	; 0xff
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	095b      	lsrs	r3, r3, #5
 80096c6:	21f4      	movs	r1, #244	; 0xf4
 80096c8:	187a      	adds	r2, r7, r1
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	1d7b      	adds	r3, r7, #5
 80096ce:	33ff      	adds	r3, #255	; 0xff
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	221f      	movs	r2, #31
 80096d4:	4013      	ands	r3, r2
 80096d6:	d104      	bne.n	80096e2 <USB_EPStartXfer+0x5f2>
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3b01      	subs	r3, #1
 80096de:	187a      	adds	r2, r7, r1
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	23f4      	movs	r3, #244	; 0xf4
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	029b      	lsls	r3, r3, #10
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	4a3f      	ldr	r2, [pc, #252]	; (80097ec <USB_EPStartXfer+0x6fc>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e01a      	b.n	8009730 <USB_EPStartXfer+0x640>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d116      	bne.n	8009730 <USB_EPStartXfer+0x640>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2250      	movs	r2, #80	; 0x50
 8009706:	5a9b      	ldrh	r3, [r3, r2]
 8009708:	b29b      	uxth	r3, r3
 800970a:	001a      	movs	r2, r3
 800970c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970e:	189b      	adds	r3, r3, r2
 8009710:	643b      	str	r3, [r7, #64]	; 0x40
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	00da      	lsls	r2, r3, #3
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	18d3      	adds	r3, r2, r3
 800971c:	4a34      	ldr	r2, [pc, #208]	; (80097f0 <USB_EPStartXfer+0x700>)
 800971e:	4694      	mov	ip, r2
 8009720:	4463      	add	r3, ip
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009724:	1d7b      	adds	r3, r7, #5
 8009726:	33ff      	adds	r3, #255	; 0xff
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009730:	2076      	movs	r0, #118	; 0x76
 8009732:	183b      	adds	r3, r7, r0
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	8952      	ldrh	r2, [r2, #10]
 8009738:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6959      	ldr	r1, [r3, #20]
 800973e:	1d7b      	adds	r3, r7, #5
 8009740:	33ff      	adds	r3, #255	; 0xff
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	b29c      	uxth	r4, r3
 8009746:	183b      	adds	r3, r7, r0
 8009748:	881a      	ldrh	r2, [r3, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	0023      	movs	r3, r4
 800974e:	f000 fec3 	bl	800a4d8 <USB_WritePMA>
 8009752:	e1a2      	b.n	8009a9a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	1d7a      	adds	r2, r7, #5
 800975a:	32ff      	adds	r2, #255	; 0xff
 800975c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	18d3      	adds	r3, r2, r3
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29a      	uxth	r2, r3
 800976c:	2062      	movs	r0, #98	; 0x62
 800976e:	183b      	adds	r3, r7, r0
 8009770:	4920      	ldr	r1, [pc, #128]	; (80097f4 <USB_EPStartXfer+0x704>)
 8009772:	400a      	ands	r2, r1
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	183a      	adds	r2, r7, r0
 8009782:	8812      	ldrh	r2, [r2, #0]
 8009784:	491c      	ldr	r1, [pc, #112]	; (80097f8 <USB_EPStartXfer+0x708>)
 8009786:	430a      	orrs	r2, r1
 8009788:	b292      	uxth	r2, r2
 800978a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2250      	movs	r2, #80	; 0x50
 8009794:	5a9b      	ldrh	r3, [r3, r2]
 8009796:	b29b      	uxth	r3, r3
 8009798:	001a      	movs	r2, r3
 800979a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800979c:	189b      	adds	r3, r3, r2
 800979e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	00da      	lsls	r2, r3, #3
 80097a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a8:	18d3      	adds	r3, r2, r3
 80097aa:	4a0e      	ldr	r2, [pc, #56]	; (80097e4 <USB_EPStartXfer+0x6f4>)
 80097ac:	4694      	mov	ip, r2
 80097ae:	4463      	add	r3, ip
 80097b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097b2:	1d7b      	adds	r3, r7, #5
 80097b4:	33ff      	adds	r3, #255	; 0xff
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097be:	2076      	movs	r0, #118	; 0x76
 80097c0:	183b      	adds	r3, r7, r0
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	8912      	ldrh	r2, [r2, #8]
 80097c6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6959      	ldr	r1, [r3, #20]
 80097cc:	1d7b      	adds	r3, r7, #5
 80097ce:	33ff      	adds	r3, #255	; 0xff
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	b29c      	uxth	r4, r3
 80097d4:	183b      	adds	r3, r7, r0
 80097d6:	881a      	ldrh	r2, [r3, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	0023      	movs	r3, r4
 80097dc:	f000 fe7c 	bl	800a4d8 <USB_WritePMA>
 80097e0:	e15b      	b.n	8009a9a <USB_EPStartXfer+0x9aa>
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	00000402 	.word	0x00000402
 80097e8:	ffff83ff 	.word	0xffff83ff
 80097ec:	ffff8000 	.word	0xffff8000
 80097f0:	00000406 	.word	0x00000406
 80097f4:	ffff8e8f 	.word	0xffff8e8f
 80097f8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	6a1a      	ldr	r2, [r3, #32]
 8009800:	1d7b      	adds	r3, r7, #5
 8009802:	33ff      	adds	r3, #255	; 0xff
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	18d3      	adds	r3, r2, r3
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	001a      	movs	r2, r3
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	4013      	ands	r3, r2
 8009820:	d100      	bne.n	8009824 <USB_EPStartXfer+0x734>
 8009822:	e099      	b.n	8009958 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	673b      	str	r3, [r7, #112]	; 0x70
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d166      	bne.n	80098fe <USB_EPStartXfer+0x80e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	66bb      	str	r3, [r7, #104]	; 0x68
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2250      	movs	r2, #80	; 0x50
 8009838:	5a9b      	ldrh	r3, [r3, r2]
 800983a:	b29b      	uxth	r3, r3
 800983c:	001a      	movs	r2, r3
 800983e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009840:	189b      	adds	r3, r3, r2
 8009842:	66bb      	str	r3, [r7, #104]	; 0x68
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00da      	lsls	r2, r3, #3
 800984a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800984c:	18d3      	adds	r3, r2, r3
 800984e:	4ad0      	ldr	r2, [pc, #832]	; (8009b90 <USB_EPStartXfer+0xaa0>)
 8009850:	4694      	mov	ip, r2
 8009852:	4463      	add	r3, ip
 8009854:	667b      	str	r3, [r7, #100]	; 0x64
 8009856:	1d7b      	adds	r3, r7, #5
 8009858:	33ff      	adds	r3, #255	; 0xff
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d110      	bne.n	8009882 <USB_EPStartXfer+0x792>
 8009860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	4acb      	ldr	r2, [pc, #812]	; (8009b94 <USB_EPStartXfer+0xaa4>)
 8009868:	4013      	ands	r3, r2
 800986a:	b29a      	uxth	r2, r3
 800986c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	b29b      	uxth	r3, r3
 8009876:	4ac8      	ldr	r2, [pc, #800]	; (8009b98 <USB_EPStartXfer+0xaa8>)
 8009878:	4313      	orrs	r3, r2
 800987a:	b29a      	uxth	r2, r3
 800987c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800987e:	801a      	strh	r2, [r3, #0]
 8009880:	e058      	b.n	8009934 <USB_EPStartXfer+0x844>
 8009882:	1d7b      	adds	r3, r7, #5
 8009884:	33ff      	adds	r3, #255	; 0xff
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b3e      	cmp	r3, #62	; 0x3e
 800988a:	d81a      	bhi.n	80098c2 <USB_EPStartXfer+0x7d2>
 800988c:	1d7b      	adds	r3, r7, #5
 800988e:	33ff      	adds	r3, #255	; 0xff
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	085b      	lsrs	r3, r3, #1
 8009894:	21f0      	movs	r1, #240	; 0xf0
 8009896:	187a      	adds	r2, r7, r1
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	1d7b      	adds	r3, r7, #5
 800989c:	33ff      	adds	r3, #255	; 0xff
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2201      	movs	r2, #1
 80098a2:	4013      	ands	r3, r2
 80098a4:	d004      	beq.n	80098b0 <USB_EPStartXfer+0x7c0>
 80098a6:	187b      	adds	r3, r7, r1
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	187a      	adds	r2, r7, r1
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	23f0      	movs	r3, #240	; 0xf0
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	029b      	lsls	r3, r3, #10
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	e038      	b.n	8009934 <USB_EPStartXfer+0x844>
 80098c2:	1d7b      	adds	r3, r7, #5
 80098c4:	33ff      	adds	r3, #255	; 0xff
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	21f0      	movs	r1, #240	; 0xf0
 80098cc:	187a      	adds	r2, r7, r1
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	1d7b      	adds	r3, r7, #5
 80098d2:	33ff      	adds	r3, #255	; 0xff
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	221f      	movs	r2, #31
 80098d8:	4013      	ands	r3, r2
 80098da:	d104      	bne.n	80098e6 <USB_EPStartXfer+0x7f6>
 80098dc:	187b      	adds	r3, r7, r1
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	187a      	adds	r2, r7, r1
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	23f0      	movs	r3, #240	; 0xf0
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	029b      	lsls	r3, r3, #10
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	4aa9      	ldr	r2, [pc, #676]	; (8009b98 <USB_EPStartXfer+0xaa8>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098fa:	801a      	strh	r2, [r3, #0]
 80098fc:	e01a      	b.n	8009934 <USB_EPStartXfer+0x844>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d116      	bne.n	8009934 <USB_EPStartXfer+0x844>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2250      	movs	r2, #80	; 0x50
 800990a:	5a9b      	ldrh	r3, [r3, r2]
 800990c:	b29b      	uxth	r3, r3
 800990e:	001a      	movs	r2, r3
 8009910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009912:	189b      	adds	r3, r3, r2
 8009914:	673b      	str	r3, [r7, #112]	; 0x70
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	00da      	lsls	r2, r3, #3
 800991c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800991e:	18d3      	adds	r3, r2, r3
 8009920:	4a9b      	ldr	r2, [pc, #620]	; (8009b90 <USB_EPStartXfer+0xaa0>)
 8009922:	4694      	mov	ip, r2
 8009924:	4463      	add	r3, ip
 8009926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009928:	1d7b      	adds	r3, r7, #5
 800992a:	33ff      	adds	r3, #255	; 0xff
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	b29a      	uxth	r2, r3
 8009930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009932:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009934:	2076      	movs	r0, #118	; 0x76
 8009936:	183b      	adds	r3, r7, r0
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	8952      	ldrh	r2, [r2, #10]
 800993c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6959      	ldr	r1, [r3, #20]
 8009942:	1d7b      	adds	r3, r7, #5
 8009944:	33ff      	adds	r3, #255	; 0xff
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	b29c      	uxth	r4, r3
 800994a:	183b      	adds	r3, r7, r0
 800994c:	881a      	ldrh	r2, [r3, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	0023      	movs	r3, r4
 8009952:	f000 fdc1 	bl	800a4d8 <USB_WritePMA>
 8009956:	e0a0      	b.n	8009a9a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d166      	bne.n	8009a2e <USB_EPStartXfer+0x93e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2250      	movs	r2, #80	; 0x50
 8009968:	5a9b      	ldrh	r3, [r3, r2]
 800996a:	b29b      	uxth	r3, r3
 800996c:	001a      	movs	r2, r3
 800996e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009970:	189b      	adds	r3, r3, r2
 8009972:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	00da      	lsls	r2, r3, #3
 800997a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800997c:	18d3      	adds	r3, r2, r3
 800997e:	4a87      	ldr	r2, [pc, #540]	; (8009b9c <USB_EPStartXfer+0xaac>)
 8009980:	4694      	mov	ip, r2
 8009982:	4463      	add	r3, ip
 8009984:	67bb      	str	r3, [r7, #120]	; 0x78
 8009986:	1d7b      	adds	r3, r7, #5
 8009988:	33ff      	adds	r3, #255	; 0xff
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d110      	bne.n	80099b2 <USB_EPStartXfer+0x8c2>
 8009990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	4a7f      	ldr	r2, [pc, #508]	; (8009b94 <USB_EPStartXfer+0xaa4>)
 8009998:	4013      	ands	r3, r2
 800999a:	b29a      	uxth	r2, r3
 800999c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	4a7c      	ldr	r2, [pc, #496]	; (8009b98 <USB_EPStartXfer+0xaa8>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ae:	801a      	strh	r2, [r3, #0]
 80099b0:	e062      	b.n	8009a78 <USB_EPStartXfer+0x988>
 80099b2:	1d7b      	adds	r3, r7, #5
 80099b4:	33ff      	adds	r3, #255	; 0xff
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b3e      	cmp	r3, #62	; 0x3e
 80099ba:	d81a      	bhi.n	80099f2 <USB_EPStartXfer+0x902>
 80099bc:	1d7b      	adds	r3, r7, #5
 80099be:	33ff      	adds	r3, #255	; 0xff
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	21ec      	movs	r1, #236	; 0xec
 80099c6:	187a      	adds	r2, r7, r1
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	1d7b      	adds	r3, r7, #5
 80099cc:	33ff      	adds	r3, #255	; 0xff
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2201      	movs	r2, #1
 80099d2:	4013      	ands	r3, r2
 80099d4:	d004      	beq.n	80099e0 <USB_EPStartXfer+0x8f0>
 80099d6:	187b      	adds	r3, r7, r1
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	187a      	adds	r2, r7, r1
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	23ec      	movs	r3, #236	; 0xec
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	029b      	lsls	r3, r3, #10
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	e042      	b.n	8009a78 <USB_EPStartXfer+0x988>
 80099f2:	1d7b      	adds	r3, r7, #5
 80099f4:	33ff      	adds	r3, #255	; 0xff
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	21ec      	movs	r1, #236	; 0xec
 80099fc:	187a      	adds	r2, r7, r1
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	1d7b      	adds	r3, r7, #5
 8009a02:	33ff      	adds	r3, #255	; 0xff
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	221f      	movs	r2, #31
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d104      	bne.n	8009a16 <USB_EPStartXfer+0x926>
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	187a      	adds	r2, r7, r1
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	23ec      	movs	r3, #236	; 0xec
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	029b      	lsls	r3, r3, #10
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4a5d      	ldr	r2, [pc, #372]	; (8009b98 <USB_EPStartXfer+0xaa8>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a2a:	801a      	strh	r2, [r3, #0]
 8009a2c:	e024      	b.n	8009a78 <USB_EPStartXfer+0x988>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d120      	bne.n	8009a78 <USB_EPStartXfer+0x988>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2184      	movs	r1, #132	; 0x84
 8009a3a:	187a      	adds	r2, r7, r1
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2250      	movs	r2, #80	; 0x50
 8009a42:	5a9b      	ldrh	r3, [r3, r2]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	001a      	movs	r2, r3
 8009a48:	187b      	adds	r3, r7, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	189b      	adds	r3, r3, r2
 8009a4e:	187a      	adds	r2, r7, r1
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	00da      	lsls	r2, r3, #3
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	18d3      	adds	r3, r2, r3
 8009a5e:	4a4f      	ldr	r2, [pc, #316]	; (8009b9c <USB_EPStartXfer+0xaac>)
 8009a60:	4694      	mov	ip, r2
 8009a62:	4463      	add	r3, ip
 8009a64:	2180      	movs	r1, #128	; 0x80
 8009a66:	187a      	adds	r2, r7, r1
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	1d7b      	adds	r3, r7, #5
 8009a6c:	33ff      	adds	r3, #255	; 0xff
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	187b      	adds	r3, r7, r1
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a78:	2076      	movs	r0, #118	; 0x76
 8009a7a:	183b      	adds	r3, r7, r0
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	8912      	ldrh	r2, [r2, #8]
 8009a80:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6959      	ldr	r1, [r3, #20]
 8009a86:	1d7b      	adds	r3, r7, #5
 8009a88:	33ff      	adds	r3, #255	; 0xff
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	b29c      	uxth	r4, r3
 8009a8e:	183b      	adds	r3, r7, r0
 8009a90:	881a      	ldrh	r2, [r3, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	0023      	movs	r3, r4
 8009a96:	f000 fd1f 	bl	800a4d8 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	18d3      	adds	r3, r2, r3
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	200a      	movs	r0, #10
 8009aaa:	183b      	adds	r3, r7, r0
 8009aac:	493c      	ldr	r1, [pc, #240]	; (8009ba0 <USB_EPStartXfer+0xab0>)
 8009aae:	400a      	ands	r2, r1
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	183b      	adds	r3, r7, r0
 8009ab4:	183a      	adds	r2, r7, r0
 8009ab6:	8812      	ldrh	r2, [r2, #0]
 8009ab8:	2110      	movs	r1, #16
 8009aba:	404a      	eors	r2, r1
 8009abc:	801a      	strh	r2, [r3, #0]
 8009abe:	183b      	adds	r3, r7, r0
 8009ac0:	183a      	adds	r2, r7, r0
 8009ac2:	8812      	ldrh	r2, [r2, #0]
 8009ac4:	2120      	movs	r1, #32
 8009ac6:	404a      	eors	r2, r1
 8009ac8:	801a      	strh	r2, [r3, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	183a      	adds	r2, r7, r0
 8009ad6:	8812      	ldrh	r2, [r2, #0]
 8009ad8:	4932      	ldr	r1, [pc, #200]	; (8009ba4 <USB_EPStartXfer+0xab4>)
 8009ada:	430a      	orrs	r2, r1
 8009adc:	b292      	uxth	r2, r2
 8009ade:	801a      	strh	r2, [r3, #0]
 8009ae0:	f000 fbaf 	bl	800a242 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	7b1b      	ldrb	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d000      	beq.n	8009aee <USB_EPStartXfer+0x9fe>
 8009aec:	e09e      	b.n	8009c2c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d90d      	bls.n	8009b16 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	1d7a      	adds	r2, r7, #5
 8009b00:	32ff      	adds	r2, #255	; 0xff
 8009b02:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	699a      	ldr	r2, [r3, #24]
 8009b08:	1d7b      	adds	r3, r7, #5
 8009b0a:	33ff      	adds	r3, #255	; 0xff
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	619a      	str	r2, [r3, #24]
 8009b14:	e007      	b.n	8009b26 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	1d7a      	adds	r2, r7, #5
 8009b1c:	32ff      	adds	r2, #255	; 0xff
 8009b1e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2190      	movs	r1, #144	; 0x90
 8009b2a:	187a      	adds	r2, r7, r1
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2250      	movs	r2, #80	; 0x50
 8009b32:	5a9b      	ldrh	r3, [r3, r2]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	001a      	movs	r2, r3
 8009b38:	187b      	adds	r3, r7, r1
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	189b      	adds	r3, r3, r2
 8009b3e:	187a      	adds	r2, r7, r1
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	00da      	lsls	r2, r3, #3
 8009b48:	187b      	adds	r3, r7, r1
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	18d3      	adds	r3, r2, r3
 8009b4e:	4a10      	ldr	r2, [pc, #64]	; (8009b90 <USB_EPStartXfer+0xaa0>)
 8009b50:	4694      	mov	ip, r2
 8009b52:	4463      	add	r3, ip
 8009b54:	218c      	movs	r1, #140	; 0x8c
 8009b56:	187a      	adds	r2, r7, r1
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	1d7b      	adds	r3, r7, #5
 8009b5c:	33ff      	adds	r3, #255	; 0xff
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d121      	bne.n	8009ba8 <USB_EPStartXfer+0xab8>
 8009b64:	187b      	adds	r3, r7, r1
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <USB_EPStartXfer+0xaa4>)
 8009b6e:	4013      	ands	r3, r2
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	187b      	adds	r3, r7, r1
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	801a      	strh	r2, [r3, #0]
 8009b78:	187b      	adds	r3, r7, r1
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4a05      	ldr	r2, [pc, #20]	; (8009b98 <USB_EPStartXfer+0xaa8>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	187b      	adds	r3, r7, r1
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	e334      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	00000406 	.word	0x00000406
 8009b94:	ffff83ff 	.word	0xffff83ff
 8009b98:	ffff8000 	.word	0xffff8000
 8009b9c:	00000402 	.word	0x00000402
 8009ba0:	ffff8fbf 	.word	0xffff8fbf
 8009ba4:	ffff8080 	.word	0xffff8080
 8009ba8:	1d7b      	adds	r3, r7, #5
 8009baa:	33ff      	adds	r3, #255	; 0xff
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b3e      	cmp	r3, #62	; 0x3e
 8009bb0:	d81c      	bhi.n	8009bec <USB_EPStartXfer+0xafc>
 8009bb2:	1d7b      	adds	r3, r7, #5
 8009bb4:	33ff      	adds	r3, #255	; 0xff
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	085b      	lsrs	r3, r3, #1
 8009bba:	21e8      	movs	r1, #232	; 0xe8
 8009bbc:	187a      	adds	r2, r7, r1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	1d7b      	adds	r3, r7, #5
 8009bc2:	33ff      	adds	r3, #255	; 0xff
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4013      	ands	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <USB_EPStartXfer+0xae6>
 8009bcc:	187b      	adds	r3, r7, r1
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	187a      	adds	r2, r7, r1
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	23e8      	movs	r3, #232	; 0xe8
 8009bd8:	18fb      	adds	r3, r7, r3
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	029b      	lsls	r3, r3, #10
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	238c      	movs	r3, #140	; 0x8c
 8009be4:	18fb      	adds	r3, r7, r3
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	801a      	strh	r2, [r3, #0]
 8009bea:	e305      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
 8009bec:	1d7b      	adds	r3, r7, #5
 8009bee:	33ff      	adds	r3, #255	; 0xff
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	21e8      	movs	r1, #232	; 0xe8
 8009bf6:	187a      	adds	r2, r7, r1
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	1d7b      	adds	r3, r7, #5
 8009bfc:	33ff      	adds	r3, #255	; 0xff
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	221f      	movs	r2, #31
 8009c02:	4013      	ands	r3, r2
 8009c04:	d104      	bne.n	8009c10 <USB_EPStartXfer+0xb20>
 8009c06:	187b      	adds	r3, r7, r1
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	187a      	adds	r2, r7, r1
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	23e8      	movs	r3, #232	; 0xe8
 8009c12:	18fb      	adds	r3, r7, r3
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	029b      	lsls	r3, r3, #10
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	4aca      	ldr	r2, [pc, #808]	; (8009f48 <USB_EPStartXfer+0xe58>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	238c      	movs	r3, #140	; 0x8c
 8009c24:	18fb      	adds	r3, r7, r3
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	e2e5      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	78db      	ldrb	r3, [r3, #3]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d000      	beq.n	8009c36 <USB_EPStartXfer+0xb46>
 8009c34:	e16f      	b.n	8009f16 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d16f      	bne.n	8009d1e <USB_EPStartXfer+0xc2e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	21ac      	movs	r1, #172	; 0xac
 8009c42:	187a      	adds	r2, r7, r1
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2250      	movs	r2, #80	; 0x50
 8009c4a:	5a9b      	ldrh	r3, [r3, r2]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	001a      	movs	r2, r3
 8009c50:	187b      	adds	r3, r7, r1
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	189b      	adds	r3, r3, r2
 8009c56:	187a      	adds	r2, r7, r1
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	00da      	lsls	r2, r3, #3
 8009c60:	187b      	adds	r3, r7, r1
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	18d3      	adds	r3, r2, r3
 8009c66:	4ab9      	ldr	r2, [pc, #740]	; (8009f4c <USB_EPStartXfer+0xe5c>)
 8009c68:	4694      	mov	ip, r2
 8009c6a:	4463      	add	r3, ip
 8009c6c:	21a8      	movs	r1, #168	; 0xa8
 8009c6e:	187a      	adds	r2, r7, r1
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <USB_EPStartXfer+0xbb4>
 8009c7a:	187b      	adds	r3, r7, r1
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	4ab3      	ldr	r2, [pc, #716]	; (8009f50 <USB_EPStartXfer+0xe60>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	187b      	adds	r3, r7, r1
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	801a      	strh	r2, [r3, #0]
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	4aac      	ldr	r2, [pc, #688]	; (8009f48 <USB_EPStartXfer+0xe58>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	187b      	adds	r3, r7, r1
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	801a      	strh	r2, [r3, #0]
 8009ca2:	e060      	b.n	8009d66 <USB_EPStartXfer+0xc76>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	2b3e      	cmp	r3, #62	; 0x3e
 8009caa:	d81a      	bhi.n	8009ce2 <USB_EPStartXfer+0xbf2>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	085b      	lsrs	r3, r3, #1
 8009cb2:	21e4      	movs	r1, #228	; 0xe4
 8009cb4:	187a      	adds	r2, r7, r1
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	d004      	beq.n	8009ccc <USB_EPStartXfer+0xbdc>
 8009cc2:	187b      	adds	r3, r7, r1
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	187a      	adds	r2, r7, r1
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	23e4      	movs	r3, #228	; 0xe4
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	029b      	lsls	r3, r3, #10
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	23a8      	movs	r3, #168	; 0xa8
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	801a      	strh	r2, [r3, #0]
 8009ce0:	e041      	b.n	8009d66 <USB_EPStartXfer+0xc76>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	21e4      	movs	r1, #228	; 0xe4
 8009cea:	187a      	adds	r2, r7, r1
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	221f      	movs	r2, #31
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	d104      	bne.n	8009d02 <USB_EPStartXfer+0xc12>
 8009cf8:	187b      	adds	r3, r7, r1
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	187a      	adds	r2, r7, r1
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	23e4      	movs	r3, #228	; 0xe4
 8009d04:	18fb      	adds	r3, r7, r3
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	4a8e      	ldr	r2, [pc, #568]	; (8009f48 <USB_EPStartXfer+0xe58>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	23a8      	movs	r3, #168	; 0xa8
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e023      	b.n	8009d66 <USB_EPStartXfer+0xc76>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d11f      	bne.n	8009d66 <USB_EPStartXfer+0xc76>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	21b4      	movs	r1, #180	; 0xb4
 8009d2a:	187a      	adds	r2, r7, r1
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2250      	movs	r2, #80	; 0x50
 8009d32:	5a9b      	ldrh	r3, [r3, r2]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	001a      	movs	r2, r3
 8009d38:	187b      	adds	r3, r7, r1
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	189b      	adds	r3, r3, r2
 8009d3e:	187a      	adds	r2, r7, r1
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	00da      	lsls	r2, r3, #3
 8009d48:	187b      	adds	r3, r7, r1
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	18d3      	adds	r3, r2, r3
 8009d4e:	4a7f      	ldr	r2, [pc, #508]	; (8009f4c <USB_EPStartXfer+0xe5c>)
 8009d50:	4694      	mov	ip, r2
 8009d52:	4463      	add	r3, ip
 8009d54:	21b0      	movs	r1, #176	; 0xb0
 8009d56:	187a      	adds	r2, r7, r1
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	187b      	adds	r3, r7, r1
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	801a      	strh	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	22a4      	movs	r2, #164	; 0xa4
 8009d6a:	18ba      	adds	r2, r7, r2
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d16f      	bne.n	8009e56 <USB_EPStartXfer+0xd66>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	219c      	movs	r1, #156	; 0x9c
 8009d7a:	187a      	adds	r2, r7, r1
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2250      	movs	r2, #80	; 0x50
 8009d82:	5a9b      	ldrh	r3, [r3, r2]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	001a      	movs	r2, r3
 8009d88:	187b      	adds	r3, r7, r1
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	189b      	adds	r3, r3, r2
 8009d8e:	187a      	adds	r2, r7, r1
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	00da      	lsls	r2, r3, #3
 8009d98:	187b      	adds	r3, r7, r1
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	18d3      	adds	r3, r2, r3
 8009d9e:	4a6d      	ldr	r2, [pc, #436]	; (8009f54 <USB_EPStartXfer+0xe64>)
 8009da0:	4694      	mov	ip, r2
 8009da2:	4463      	add	r3, ip
 8009da4:	2198      	movs	r1, #152	; 0x98
 8009da6:	187a      	adds	r2, r7, r1
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d114      	bne.n	8009ddc <USB_EPStartXfer+0xcec>
 8009db2:	187b      	adds	r3, r7, r1
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	4a65      	ldr	r2, [pc, #404]	; (8009f50 <USB_EPStartXfer+0xe60>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	4a5e      	ldr	r2, [pc, #376]	; (8009f48 <USB_EPStartXfer+0xe58>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	187b      	adds	r3, r7, r1
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	e05d      	b.n	8009e98 <USB_EPStartXfer+0xda8>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b3e      	cmp	r3, #62	; 0x3e
 8009de2:	d81a      	bhi.n	8009e1a <USB_EPStartXfer+0xd2a>
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	085b      	lsrs	r3, r3, #1
 8009dea:	21e0      	movs	r1, #224	; 0xe0
 8009dec:	187a      	adds	r2, r7, r1
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2201      	movs	r2, #1
 8009df6:	4013      	ands	r3, r2
 8009df8:	d004      	beq.n	8009e04 <USB_EPStartXfer+0xd14>
 8009dfa:	187b      	adds	r3, r7, r1
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	187a      	adds	r2, r7, r1
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	23e0      	movs	r3, #224	; 0xe0
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	2398      	movs	r3, #152	; 0x98
 8009e12:	18fb      	adds	r3, r7, r3
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	e03e      	b.n	8009e98 <USB_EPStartXfer+0xda8>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	21e0      	movs	r1, #224	; 0xe0
 8009e22:	187a      	adds	r2, r7, r1
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	221f      	movs	r2, #31
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	d104      	bne.n	8009e3a <USB_EPStartXfer+0xd4a>
 8009e30:	187b      	adds	r3, r7, r1
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	187a      	adds	r2, r7, r1
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	23e0      	movs	r3, #224	; 0xe0
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	029b      	lsls	r3, r3, #10
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4a40      	ldr	r2, [pc, #256]	; (8009f48 <USB_EPStartXfer+0xe58>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	2398      	movs	r3, #152	; 0x98
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	e020      	b.n	8009e98 <USB_EPStartXfer+0xda8>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d11c      	bne.n	8009e98 <USB_EPStartXfer+0xda8>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2250      	movs	r2, #80	; 0x50
 8009e62:	5a9b      	ldrh	r3, [r3, r2]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	001a      	movs	r2, r3
 8009e68:	21a4      	movs	r1, #164	; 0xa4
 8009e6a:	187b      	adds	r3, r7, r1
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	189b      	adds	r3, r3, r2
 8009e70:	187a      	adds	r2, r7, r1
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	00da      	lsls	r2, r3, #3
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	18d3      	adds	r3, r2, r3
 8009e80:	4a34      	ldr	r2, [pc, #208]	; (8009f54 <USB_EPStartXfer+0xe64>)
 8009e82:	4694      	mov	ip, r2
 8009e84:	4463      	add	r3, ip
 8009e86:	21a0      	movs	r1, #160	; 0xa0
 8009e88:	187a      	adds	r2, r7, r1
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	187b      	adds	r3, r7, r1
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d100      	bne.n	8009ea2 <USB_EPStartXfer+0xdb2>
 8009ea0:	e1aa      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	18d2      	adds	r2, r2, r3
 8009eac:	2196      	movs	r1, #150	; 0x96
 8009eae:	187b      	adds	r3, r7, r1
 8009eb0:	8812      	ldrh	r2, [r2, #0]
 8009eb2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009eb4:	187b      	adds	r3, r7, r1
 8009eb6:	881a      	ldrh	r2, [r3, #0]
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	01db      	lsls	r3, r3, #7
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	d004      	beq.n	8009eca <USB_EPStartXfer+0xdda>
 8009ec0:	187b      	adds	r3, r7, r1
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	2240      	movs	r2, #64	; 0x40
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d10d      	bne.n	8009ee6 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009eca:	2196      	movs	r1, #150	; 0x96
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	881a      	ldrh	r2, [r3, #0]
 8009ed0:	2380      	movs	r3, #128	; 0x80
 8009ed2:	01db      	lsls	r3, r3, #7
 8009ed4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ed6:	d000      	beq.n	8009eda <USB_EPStartXfer+0xdea>
 8009ed8:	e18e      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009eda:	187b      	adds	r3, r7, r1
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	2240      	movs	r2, #64	; 0x40
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	d000      	beq.n	8009ee6 <USB_EPStartXfer+0xdf6>
 8009ee4:	e188      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	18d3      	adds	r3, r2, r3
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	2094      	movs	r0, #148	; 0x94
 8009ef6:	183b      	adds	r3, r7, r0
 8009ef8:	4917      	ldr	r1, [pc, #92]	; (8009f58 <USB_EPStartXfer+0xe68>)
 8009efa:	400a      	ands	r2, r1
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	18d3      	adds	r3, r2, r3
 8009f08:	183a      	adds	r2, r7, r0
 8009f0a:	8812      	ldrh	r2, [r2, #0]
 8009f0c:	4913      	ldr	r1, [pc, #76]	; (8009f5c <USB_EPStartXfer+0xe6c>)
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	b292      	uxth	r2, r2
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e170      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	78db      	ldrb	r3, [r3, #3]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d000      	beq.n	8009f20 <USB_EPStartXfer+0xe30>
 8009f1e:	e169      	b.n	800a1f4 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d919      	bls.n	8009f60 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	1d7a      	adds	r2, r7, #5
 8009f32:	32ff      	adds	r2, #255	; 0xff
 8009f34:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	699a      	ldr	r2, [r3, #24]
 8009f3a:	1d7b      	adds	r3, r7, #5
 8009f3c:	33ff      	adds	r3, #255	; 0xff
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	1ad2      	subs	r2, r2, r3
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	619a      	str	r2, [r3, #24]
 8009f46:	e013      	b.n	8009f70 <USB_EPStartXfer+0xe80>
 8009f48:	ffff8000 	.word	0xffff8000
 8009f4c:	00000402 	.word	0x00000402
 8009f50:	ffff83ff 	.word	0xffff83ff
 8009f54:	00000406 	.word	0x00000406
 8009f58:	ffff8f8f 	.word	0xffff8f8f
 8009f5c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	1d7a      	adds	r2, r7, #5
 8009f66:	32ff      	adds	r2, #255	; 0xff
 8009f68:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d000      	beq.n	8009f7a <USB_EPStartXfer+0xe8a>
 8009f78:	e075      	b.n	800a066 <USB_EPStartXfer+0xf76>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	21cc      	movs	r1, #204	; 0xcc
 8009f7e:	187a      	adds	r2, r7, r1
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2250      	movs	r2, #80	; 0x50
 8009f86:	5a9b      	ldrh	r3, [r3, r2]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	187b      	adds	r3, r7, r1
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	189b      	adds	r3, r3, r2
 8009f92:	187a      	adds	r2, r7, r1
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	00da      	lsls	r2, r3, #3
 8009f9c:	187b      	adds	r3, r7, r1
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	18d3      	adds	r3, r2, r3
 8009fa2:	4aaa      	ldr	r2, [pc, #680]	; (800a24c <USB_EPStartXfer+0x115c>)
 8009fa4:	4694      	mov	ip, r2
 8009fa6:	4463      	add	r3, ip
 8009fa8:	21c8      	movs	r1, #200	; 0xc8
 8009faa:	187a      	adds	r2, r7, r1
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	1d7b      	adds	r3, r7, #5
 8009fb0:	33ff      	adds	r3, #255	; 0xff
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d114      	bne.n	8009fe2 <USB_EPStartXfer+0xef2>
 8009fb8:	187b      	adds	r3, r7, r1
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4aa3      	ldr	r2, [pc, #652]	; (800a250 <USB_EPStartXfer+0x1160>)
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	187b      	adds	r3, r7, r1
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	187b      	adds	r3, r7, r1
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	4a9f      	ldr	r2, [pc, #636]	; (800a254 <USB_EPStartXfer+0x1164>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e066      	b.n	800a0b0 <USB_EPStartXfer+0xfc0>
 8009fe2:	1d7b      	adds	r3, r7, #5
 8009fe4:	33ff      	adds	r3, #255	; 0xff
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8009fea:	d81c      	bhi.n	800a026 <USB_EPStartXfer+0xf36>
 8009fec:	1d7b      	adds	r3, r7, #5
 8009fee:	33ff      	adds	r3, #255	; 0xff
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	21dc      	movs	r1, #220	; 0xdc
 8009ff6:	187a      	adds	r2, r7, r1
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	1d7b      	adds	r3, r7, #5
 8009ffc:	33ff      	adds	r3, #255	; 0xff
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2201      	movs	r2, #1
 800a002:	4013      	ands	r3, r2
 800a004:	d004      	beq.n	800a010 <USB_EPStartXfer+0xf20>
 800a006:	187b      	adds	r3, r7, r1
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3301      	adds	r3, #1
 800a00c:	187a      	adds	r2, r7, r1
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	23dc      	movs	r3, #220	; 0xdc
 800a012:	18fb      	adds	r3, r7, r3
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	b29b      	uxth	r3, r3
 800a018:	029b      	lsls	r3, r3, #10
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	23c8      	movs	r3, #200	; 0xc8
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	801a      	strh	r2, [r3, #0]
 800a024:	e044      	b.n	800a0b0 <USB_EPStartXfer+0xfc0>
 800a026:	1d7b      	adds	r3, r7, #5
 800a028:	33ff      	adds	r3, #255	; 0xff
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	095b      	lsrs	r3, r3, #5
 800a02e:	21dc      	movs	r1, #220	; 0xdc
 800a030:	187a      	adds	r2, r7, r1
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	1d7b      	adds	r3, r7, #5
 800a036:	33ff      	adds	r3, #255	; 0xff
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	221f      	movs	r2, #31
 800a03c:	4013      	ands	r3, r2
 800a03e:	d104      	bne.n	800a04a <USB_EPStartXfer+0xf5a>
 800a040:	187b      	adds	r3, r7, r1
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3b01      	subs	r3, #1
 800a046:	187a      	adds	r2, r7, r1
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	23dc      	movs	r3, #220	; 0xdc
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	029b      	lsls	r3, r3, #10
 800a054:	b29b      	uxth	r3, r3
 800a056:	4a7f      	ldr	r2, [pc, #508]	; (800a254 <USB_EPStartXfer+0x1164>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	23c8      	movs	r3, #200	; 0xc8
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	e024      	b.n	800a0b0 <USB_EPStartXfer+0xfc0>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	785b      	ldrb	r3, [r3, #1]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d120      	bne.n	800a0b0 <USB_EPStartXfer+0xfc0>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	21d4      	movs	r1, #212	; 0xd4
 800a072:	187a      	adds	r2, r7, r1
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2250      	movs	r2, #80	; 0x50
 800a07a:	5a9b      	ldrh	r3, [r3, r2]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	001a      	movs	r2, r3
 800a080:	187b      	adds	r3, r7, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	189b      	adds	r3, r3, r2
 800a086:	187a      	adds	r2, r7, r1
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	00da      	lsls	r2, r3, #3
 800a090:	187b      	adds	r3, r7, r1
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	18d3      	adds	r3, r2, r3
 800a096:	4a6d      	ldr	r2, [pc, #436]	; (800a24c <USB_EPStartXfer+0x115c>)
 800a098:	4694      	mov	ip, r2
 800a09a:	4463      	add	r3, ip
 800a09c:	21d0      	movs	r1, #208	; 0xd0
 800a09e:	187a      	adds	r2, r7, r1
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	1d7b      	adds	r3, r7, #5
 800a0a4:	33ff      	adds	r3, #255	; 0xff
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	187b      	adds	r3, r7, r1
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	801a      	strh	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	22c4      	movs	r2, #196	; 0xc4
 800a0b4:	18ba      	adds	r2, r7, r2
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d000      	beq.n	800a0c2 <USB_EPStartXfer+0xfd2>
 800a0c0:	e075      	b.n	800a1ae <USB_EPStartXfer+0x10be>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	21bc      	movs	r1, #188	; 0xbc
 800a0c6:	187a      	adds	r2, r7, r1
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2250      	movs	r2, #80	; 0x50
 800a0ce:	5a9b      	ldrh	r3, [r3, r2]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	001a      	movs	r2, r3
 800a0d4:	187b      	adds	r3, r7, r1
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	187a      	adds	r2, r7, r1
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	00da      	lsls	r2, r3, #3
 800a0e4:	187b      	adds	r3, r7, r1
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	18d3      	adds	r3, r2, r3
 800a0ea:	4a5b      	ldr	r2, [pc, #364]	; (800a258 <USB_EPStartXfer+0x1168>)
 800a0ec:	4694      	mov	ip, r2
 800a0ee:	4463      	add	r3, ip
 800a0f0:	21b8      	movs	r1, #184	; 0xb8
 800a0f2:	187a      	adds	r2, r7, r1
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	1d7b      	adds	r3, r7, #5
 800a0f8:	33ff      	adds	r3, #255	; 0xff
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d114      	bne.n	800a12a <USB_EPStartXfer+0x103a>
 800a100:	187b      	adds	r3, r7, r1
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	4a51      	ldr	r2, [pc, #324]	; (800a250 <USB_EPStartXfer+0x1160>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	187b      	adds	r3, r7, r1
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	187b      	adds	r3, r7, r1
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4a4d      	ldr	r2, [pc, #308]	; (800a254 <USB_EPStartXfer+0x1164>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	187b      	adds	r3, r7, r1
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	801a      	strh	r2, [r3, #0]
 800a128:	e066      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
 800a12a:	1d7b      	adds	r3, r7, #5
 800a12c:	33ff      	adds	r3, #255	; 0xff
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b3e      	cmp	r3, #62	; 0x3e
 800a132:	d81c      	bhi.n	800a16e <USB_EPStartXfer+0x107e>
 800a134:	1d7b      	adds	r3, r7, #5
 800a136:	33ff      	adds	r3, #255	; 0xff
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	21d8      	movs	r1, #216	; 0xd8
 800a13e:	187a      	adds	r2, r7, r1
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	1d7b      	adds	r3, r7, #5
 800a144:	33ff      	adds	r3, #255	; 0xff
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2201      	movs	r2, #1
 800a14a:	4013      	ands	r3, r2
 800a14c:	d004      	beq.n	800a158 <USB_EPStartXfer+0x1068>
 800a14e:	187b      	adds	r3, r7, r1
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	187a      	adds	r2, r7, r1
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	23d8      	movs	r3, #216	; 0xd8
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	029b      	lsls	r3, r3, #10
 800a162:	b29a      	uxth	r2, r3
 800a164:	23b8      	movs	r3, #184	; 0xb8
 800a166:	18fb      	adds	r3, r7, r3
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	e044      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
 800a16e:	1d7b      	adds	r3, r7, #5
 800a170:	33ff      	adds	r3, #255	; 0xff
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	21d8      	movs	r1, #216	; 0xd8
 800a178:	187a      	adds	r2, r7, r1
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	1d7b      	adds	r3, r7, #5
 800a17e:	33ff      	adds	r3, #255	; 0xff
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	221f      	movs	r2, #31
 800a184:	4013      	ands	r3, r2
 800a186:	d104      	bne.n	800a192 <USB_EPStartXfer+0x10a2>
 800a188:	187b      	adds	r3, r7, r1
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	187a      	adds	r2, r7, r1
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	23d8      	movs	r3, #216	; 0xd8
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	029b      	lsls	r3, r3, #10
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <USB_EPStartXfer+0x1164>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	23b8      	movs	r3, #184	; 0xb8
 800a1a6:	18fb      	adds	r3, r7, r3
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	801a      	strh	r2, [r3, #0]
 800a1ac:	e024      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d120      	bne.n	800a1f8 <USB_EPStartXfer+0x1108>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2250      	movs	r2, #80	; 0x50
 800a1ba:	5a9b      	ldrh	r3, [r3, r2]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	001a      	movs	r2, r3
 800a1c0:	21c4      	movs	r1, #196	; 0xc4
 800a1c2:	187b      	adds	r3, r7, r1
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	189b      	adds	r3, r3, r2
 800a1c8:	187a      	adds	r2, r7, r1
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	00da      	lsls	r2, r3, #3
 800a1d2:	187b      	adds	r3, r7, r1
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	18d3      	adds	r3, r2, r3
 800a1d8:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <USB_EPStartXfer+0x1168>)
 800a1da:	4694      	mov	ip, r2
 800a1dc:	4463      	add	r3, ip
 800a1de:	21c0      	movs	r1, #192	; 0xc0
 800a1e0:	187a      	adds	r2, r7, r1
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	1d7b      	adds	r3, r7, #5
 800a1e6:	33ff      	adds	r3, #255	; 0xff
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	801a      	strh	r2, [r3, #0]
 800a1f2:	e001      	b.n	800a1f8 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e025      	b.n	800a244 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	18d3      	adds	r3, r2, r3
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29a      	uxth	r2, r3
 800a206:	208a      	movs	r0, #138	; 0x8a
 800a208:	183b      	adds	r3, r7, r0
 800a20a:	4914      	ldr	r1, [pc, #80]	; (800a25c <USB_EPStartXfer+0x116c>)
 800a20c:	400a      	ands	r2, r1
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	183b      	adds	r3, r7, r0
 800a212:	183a      	adds	r2, r7, r0
 800a214:	8812      	ldrh	r2, [r2, #0]
 800a216:	2180      	movs	r1, #128	; 0x80
 800a218:	0149      	lsls	r1, r1, #5
 800a21a:	404a      	eors	r2, r1
 800a21c:	801a      	strh	r2, [r3, #0]
 800a21e:	183b      	adds	r3, r7, r0
 800a220:	183a      	adds	r2, r7, r0
 800a222:	8812      	ldrh	r2, [r2, #0]
 800a224:	2180      	movs	r1, #128	; 0x80
 800a226:	0189      	lsls	r1, r1, #6
 800a228:	404a      	eors	r2, r1
 800a22a:	801a      	strh	r2, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	18d3      	adds	r3, r2, r3
 800a236:	183a      	adds	r2, r7, r0
 800a238:	8812      	ldrh	r2, [r2, #0]
 800a23a:	4909      	ldr	r1, [pc, #36]	; (800a260 <USB_EPStartXfer+0x1170>)
 800a23c:	430a      	orrs	r2, r1
 800a23e:	b292      	uxth	r2, r2
 800a240:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b043      	add	sp, #268	; 0x10c
 800a24a:	bd90      	pop	{r4, r7, pc}
 800a24c:	00000402 	.word	0x00000402
 800a250:	ffff83ff 	.word	0xffff83ff
 800a254:	ffff8000 	.word	0xffff8000
 800a258:	00000406 	.word	0x00000406
 800a25c:	ffffbf8f 	.word	0xffffbf8f
 800a260:	ffff8080 	.word	0xffff8080

0800a264 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01d      	beq.n	800a2b2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	18d3      	adds	r3, r2, r3
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b29a      	uxth	r2, r3
 800a284:	200c      	movs	r0, #12
 800a286:	183b      	adds	r3, r7, r0
 800a288:	491b      	ldr	r1, [pc, #108]	; (800a2f8 <USB_EPSetStall+0x94>)
 800a28a:	400a      	ands	r2, r1
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	183b      	adds	r3, r7, r0
 800a290:	183a      	adds	r2, r7, r0
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	2110      	movs	r1, #16
 800a296:	404a      	eors	r2, r1
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	183a      	adds	r2, r7, r0
 800a2a6:	8812      	ldrh	r2, [r2, #0]
 800a2a8:	4914      	ldr	r1, [pc, #80]	; (800a2fc <USB_EPSetStall+0x98>)
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	b292      	uxth	r2, r2
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	e01d      	b.n	800a2ee <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	18d3      	adds	r3, r2, r3
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	200e      	movs	r0, #14
 800a2c2:	183b      	adds	r3, r7, r0
 800a2c4:	490e      	ldr	r1, [pc, #56]	; (800a300 <USB_EPSetStall+0x9c>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	801a      	strh	r2, [r3, #0]
 800a2ca:	183b      	adds	r3, r7, r0
 800a2cc:	183a      	adds	r2, r7, r0
 800a2ce:	8812      	ldrh	r2, [r2, #0]
 800a2d0:	2180      	movs	r1, #128	; 0x80
 800a2d2:	0149      	lsls	r1, r1, #5
 800a2d4:	404a      	eors	r2, r1
 800a2d6:	801a      	strh	r2, [r3, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	18d3      	adds	r3, r2, r3
 800a2e2:	183a      	adds	r2, r7, r0
 800a2e4:	8812      	ldrh	r2, [r2, #0]
 800a2e6:	4905      	ldr	r1, [pc, #20]	; (800a2fc <USB_EPSetStall+0x98>)
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	b292      	uxth	r2, r2
 800a2ec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b004      	add	sp, #16
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	ffff8fbf 	.word	0xffff8fbf
 800a2fc:	ffff8080 	.word	0xffff8080
 800a300:	ffffbf8f 	.word	0xffffbf8f

0800a304 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	7b1b      	ldrb	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d000      	beq.n	800a318 <USB_EPClearStall+0x14>
 800a316:	e095      	b.n	800a444 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d046      	beq.n	800a3ae <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	18d2      	adds	r2, r2, r3
 800a32a:	2110      	movs	r1, #16
 800a32c:	187b      	adds	r3, r7, r1
 800a32e:	8812      	ldrh	r2, [r2, #0]
 800a330:	801a      	strh	r2, [r3, #0]
 800a332:	187b      	adds	r3, r7, r1
 800a334:	881b      	ldrh	r3, [r3, #0]
 800a336:	2240      	movs	r2, #64	; 0x40
 800a338:	4013      	ands	r3, r2
 800a33a:	d016      	beq.n	800a36a <USB_EPClearStall+0x66>
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	18d3      	adds	r3, r2, r3
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29a      	uxth	r2, r3
 800a34a:	200e      	movs	r0, #14
 800a34c:	183b      	adds	r3, r7, r0
 800a34e:	4940      	ldr	r1, [pc, #256]	; (800a450 <USB_EPClearStall+0x14c>)
 800a350:	400a      	ands	r2, r1
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	183a      	adds	r2, r7, r0
 800a360:	8812      	ldrh	r2, [r2, #0]
 800a362:	493c      	ldr	r1, [pc, #240]	; (800a454 <USB_EPClearStall+0x150>)
 800a364:	430a      	orrs	r2, r1
 800a366:	b292      	uxth	r2, r2
 800a368:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	78db      	ldrb	r3, [r3, #3]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d068      	beq.n	800a444 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	18d3      	adds	r3, r2, r3
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	b29a      	uxth	r2, r3
 800a380:	200c      	movs	r0, #12
 800a382:	183b      	adds	r3, r7, r0
 800a384:	4934      	ldr	r1, [pc, #208]	; (800a458 <USB_EPClearStall+0x154>)
 800a386:	400a      	ands	r2, r1
 800a388:	801a      	strh	r2, [r3, #0]
 800a38a:	183b      	adds	r3, r7, r0
 800a38c:	183a      	adds	r2, r7, r0
 800a38e:	8812      	ldrh	r2, [r2, #0]
 800a390:	2120      	movs	r1, #32
 800a392:	404a      	eors	r2, r1
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	18d3      	adds	r3, r2, r3
 800a3a0:	183a      	adds	r2, r7, r0
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	492d      	ldr	r1, [pc, #180]	; (800a45c <USB_EPClearStall+0x158>)
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	b292      	uxth	r2, r2
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	e04a      	b.n	800a444 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	18d2      	adds	r2, r2, r3
 800a3b8:	2116      	movs	r1, #22
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	8812      	ldrh	r2, [r2, #0]
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	187b      	adds	r3, r7, r1
 800a3c2:	881a      	ldrh	r2, [r3, #0]
 800a3c4:	2380      	movs	r3, #128	; 0x80
 800a3c6:	01db      	lsls	r3, r3, #7
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	d016      	beq.n	800a3fa <USB_EPClearStall+0xf6>
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	18d3      	adds	r3, r2, r3
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	2014      	movs	r0, #20
 800a3dc:	183b      	adds	r3, r7, r0
 800a3de:	491c      	ldr	r1, [pc, #112]	; (800a450 <USB_EPClearStall+0x14c>)
 800a3e0:	400a      	ands	r2, r1
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	18d3      	adds	r3, r2, r3
 800a3ee:	183a      	adds	r2, r7, r0
 800a3f0:	8812      	ldrh	r2, [r2, #0]
 800a3f2:	491b      	ldr	r1, [pc, #108]	; (800a460 <USB_EPClearStall+0x15c>)
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	b292      	uxth	r2, r2
 800a3f8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	18d3      	adds	r3, r2, r3
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	2012      	movs	r0, #18
 800a40a:	183b      	adds	r3, r7, r0
 800a40c:	4915      	ldr	r1, [pc, #84]	; (800a464 <USB_EPClearStall+0x160>)
 800a40e:	400a      	ands	r2, r1
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	183b      	adds	r3, r7, r0
 800a414:	183a      	adds	r2, r7, r0
 800a416:	8812      	ldrh	r2, [r2, #0]
 800a418:	2180      	movs	r1, #128	; 0x80
 800a41a:	0149      	lsls	r1, r1, #5
 800a41c:	404a      	eors	r2, r1
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	183b      	adds	r3, r7, r0
 800a422:	183a      	adds	r2, r7, r0
 800a424:	8812      	ldrh	r2, [r2, #0]
 800a426:	2180      	movs	r1, #128	; 0x80
 800a428:	0189      	lsls	r1, r1, #6
 800a42a:	404a      	eors	r2, r1
 800a42c:	801a      	strh	r2, [r3, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	18d3      	adds	r3, r2, r3
 800a438:	183a      	adds	r2, r7, r0
 800a43a:	8812      	ldrh	r2, [r2, #0]
 800a43c:	4907      	ldr	r1, [pc, #28]	; (800a45c <USB_EPClearStall+0x158>)
 800a43e:	430a      	orrs	r2, r1
 800a440:	b292      	uxth	r2, r2
 800a442:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	0018      	movs	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	b006      	add	sp, #24
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	ffff8f8f 	.word	0xffff8f8f
 800a454:	ffff80c0 	.word	0xffff80c0
 800a458:	ffff8fbf 	.word	0xffff8fbf
 800a45c:	ffff8080 	.word	0xffff8080
 800a460:	ffffc080 	.word	0xffffc080
 800a464:	ffffbf8f 	.word	0xffffbf8f

0800a468 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	000a      	movs	r2, r1
 800a472:	1cfb      	adds	r3, r7, #3
 800a474:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a476:	1cfb      	adds	r3, r7, #3
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d103      	bne.n	800a486 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	224c      	movs	r2, #76	; 0x4c
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b002      	add	sp, #8
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2258      	movs	r2, #88	; 0x58
 800a49c:	5a9b      	ldrh	r3, [r3, r2]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <USB_DevConnect+0x28>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b299      	uxth	r1, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2258      	movs	r2, #88	; 0x58
 800a4aa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b002      	add	sp, #8
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	ffff8000 	.word	0xffff8000

0800a4bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2244      	movs	r2, #68	; 0x44
 800a4c8:	5a9b      	ldrh	r3, [r3, r2]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	b004      	add	sp, #16
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08c      	sub	sp, #48	; 0x30
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	1dbb      	adds	r3, r7, #6
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	1d3b      	adds	r3, r7, #4
 800a4ea:	1c0a      	adds	r2, r1, #0
 800a4ec:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a500:	1dbb      	adds	r3, r7, #6
 800a502:	881a      	ldrh	r2, [r3, #0]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	18d3      	adds	r3, r2, r3
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	00d2      	lsls	r2, r2, #3
 800a50c:	4694      	mov	ip, r2
 800a50e:	4463      	add	r3, ip
 800a510:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a516:	e01b      	b.n	800a550 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	3301      	adds	r3, #1
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	021b      	lsls	r3, r3, #8
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	001a      	movs	r2, r3
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	b29a      	uxth	r2, r3
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	3302      	adds	r3, #2
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	3301      	adds	r3, #1
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	3b01      	subs	r3, #1
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e0      	bne.n	800a518 <USB_WritePMA+0x40>
  }
}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	46c0      	nop			; (mov r8, r8)
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b00c      	add	sp, #48	; 0x30
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08a      	sub	sp, #40	; 0x28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	0019      	movs	r1, r3
 800a56c:	1dbb      	adds	r3, r7, #6
 800a56e:	801a      	strh	r2, [r3, #0]
 800a570:	1d3b      	adds	r3, r7, #4
 800a572:	1c0a      	adds	r2, r1, #0
 800a574:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a576:	1d3b      	adds	r3, r7, #4
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a588:	1dbb      	adds	r3, r7, #6
 800a58a:	881a      	ldrh	r2, [r3, #0]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	18d3      	adds	r3, r2, r3
 800a590:	2280      	movs	r2, #128	; 0x80
 800a592:	00d2      	lsls	r2, r2, #3
 800a594:	4694      	mov	ip, r2
 800a596:	4463      	add	r3, ip
 800a598:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
 800a59e:	e018      	b.n	800a5d2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	0a1b      	lsrs	r3, r3, #8
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e3      	bne.n	800a5a0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a5d8:	1d3b      	adds	r3, r7, #4
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	701a      	strb	r2, [r3, #0]
  }
}
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	b00a      	add	sp, #40	; 0x28
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	000a      	movs	r2, r1
 800a608:	1cfb      	adds	r3, r7, #3
 800a60a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a60c:	230f      	movs	r3, #15
 800a60e:	18fb      	adds	r3, r7, r3
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7c1b      	ldrb	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d116      	bne.n	800a64a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	2181      	movs	r1, #129	; 0x81
 800a626:	f002 f8b4 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	2101      	movs	r1, #1
 800a63a:	f002 f8aa 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	23b6      	movs	r3, #182	; 0xb6
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	2101      	movs	r1, #1
 800a646:	50d1      	str	r1, [r2, r3]
 800a648:	e013      	b.n	800a672 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	2202      	movs	r2, #2
 800a650:	2181      	movs	r1, #129	; 0x81
 800a652:	f002 f89e 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	2340      	movs	r3, #64	; 0x40
 800a660:	2202      	movs	r2, #2
 800a662:	2101      	movs	r1, #1
 800a664:	f002 f895 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	23b6      	movs	r3, #182	; 0xb6
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	2101      	movs	r1, #1
 800a670:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	2308      	movs	r3, #8
 800a676:	2203      	movs	r2, #3
 800a678:	2182      	movs	r1, #130	; 0x82
 800a67a:	f002 f88a 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a684:	2387      	movs	r3, #135	; 0x87
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	0018      	movs	r0, r3
 800a68a:	f002 fa1b 	bl	800cac4 <USBD_static_malloc>
 800a68e:	0001      	movs	r1, r0
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	23ae      	movs	r3, #174	; 0xae
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	23ae      	movs	r3, #174	; 0xae
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	58d3      	ldr	r3, [r2, r3]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a6a4:	230f      	movs	r3, #15
 800a6a6:	18fb      	adds	r3, r7, r3
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e02c      	b.n	800a708 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	23ae      	movs	r3, #174	; 0xae
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	58d3      	ldr	r3, [r2, r3]
 800a6b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	23af      	movs	r3, #175	; 0xaf
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	58d3      	ldr	r3, [r2, r3]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	2385      	movs	r3, #133	; 0x85
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	2386      	movs	r3, #134	; 0x86
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7c1b      	ldrb	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	2381      	movs	r3, #129	; 0x81
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	58d2      	ldr	r2, [r2, r3]
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	f002 f99a 	bl	800ca28 <USBD_LL_PrepareReceive>
 800a6f4:	e008      	b.n	800a708 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	2381      	movs	r3, #129	; 0x81
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	58d2      	ldr	r2, [r2, r3]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	2101      	movs	r1, #1
 800a704:	f002 f990 	bl	800ca28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a708:	230f      	movs	r3, #15
 800a70a:	18fb      	adds	r3, r7, r3
 800a70c:	781b      	ldrb	r3, [r3, #0]
}
 800a70e:	0018      	movs	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	b004      	add	sp, #16
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	000a      	movs	r2, r1
 800a720:	1cfb      	adds	r3, r7, #3
 800a722:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a724:	230f      	movs	r3, #15
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2181      	movs	r1, #129	; 0x81
 800a730:	0018      	movs	r0, r3
 800a732:	f002 f865 	bl	800c800 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2101      	movs	r1, #1
 800a740:	0018      	movs	r0, r3
 800a742:	f002 f85d 	bl	800c800 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	23b6      	movs	r3, #182	; 0xb6
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	2100      	movs	r1, #0
 800a74e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2182      	movs	r1, #130	; 0x82
 800a754:	0018      	movs	r0, r3
 800a756:	f002 f853 	bl	800c800 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	23ae      	movs	r3, #174	; 0xae
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	58d3      	ldr	r3, [r2, r3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d011      	beq.n	800a790 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	23af      	movs	r3, #175	; 0xaf
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	58d3      	ldr	r3, [r2, r3]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	23ae      	movs	r3, #174	; 0xae
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	58d3      	ldr	r3, [r2, r3]
 800a780:	0018      	movs	r0, r3
 800a782:	f002 f9ab 	bl	800cadc <USBD_static_free>
    pdev->pClassData = NULL;
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	23ae      	movs	r3, #174	; 0xae
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	2100      	movs	r1, #0
 800a78e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a790:	230f      	movs	r3, #15
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	781b      	ldrb	r3, [r3, #0]
}
 800a796:	0018      	movs	r0, r3
 800a798:	46bd      	mov	sp, r7
 800a79a:	b004      	add	sp, #16
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	23ae      	movs	r3, #174	; 0xae
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	58d3      	ldr	r3, [r2, r3]
 800a7b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a7b4:	230f      	movs	r3, #15
 800a7b6:	18fb      	adds	r3, r7, r3
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a7bc:	230c      	movs	r3, #12
 800a7be:	18fb      	adds	r3, r7, r3
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a7c4:	2317      	movs	r3, #23
 800a7c6:	18fb      	adds	r3, r7, r3
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	001a      	movs	r2, r3
 800a7d2:	2360      	movs	r3, #96	; 0x60
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d03d      	beq.n	800a854 <USBD_CDC_Setup+0xb4>
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d000      	beq.n	800a7de <USBD_CDC_Setup+0x3e>
 800a7dc:	e094      	b.n	800a908 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	88db      	ldrh	r3, [r3, #6]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d02b      	beq.n	800a83e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	da12      	bge.n	800a816 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	23af      	movs	r3, #175	; 0xaf
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	58d3      	ldr	r3, [r2, r3]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a7fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	88d2      	ldrh	r2, [r2, #6]
 800a804:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a806:	6939      	ldr	r1, [r7, #16]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	88da      	ldrh	r2, [r3, #6]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	0018      	movs	r0, r3
 800a810:	f001 fbb2 	bl	800bf78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a814:	e083      	b.n	800a91e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	7859      	ldrb	r1, [r3, #1]
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	88db      	ldrh	r3, [r3, #6]
 800a826:	b2d9      	uxtb	r1, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	4a40      	ldr	r2, [pc, #256]	; (800a92c <USBD_CDC_Setup+0x18c>)
 800a82c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a82e:	6939      	ldr	r1, [r7, #16]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	88da      	ldrh	r2, [r3, #6]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	0018      	movs	r0, r3
 800a838:	f001 fbd1 	bl	800bfde <USBD_CtlPrepareRx>
      break;
 800a83c:	e06f      	b.n	800a91e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	23af      	movs	r3, #175	; 0xaf
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	58d3      	ldr	r3, [r2, r3]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	7850      	ldrb	r0, [r2, #1]
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	2200      	movs	r2, #0
 800a850:	4798      	blx	r3
      break;
 800a852:	e064      	b.n	800a91e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d037      	beq.n	800a8cc <USBD_CDC_Setup+0x12c>
 800a85c:	dc47      	bgt.n	800a8ee <USBD_CDC_Setup+0x14e>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <USBD_CDC_Setup+0xc8>
 800a862:	2b0a      	cmp	r3, #10
 800a864:	d019      	beq.n	800a89a <USBD_CDC_Setup+0xfa>
 800a866:	e042      	b.n	800a8ee <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	23a7      	movs	r3, #167	; 0xa7
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	5cd3      	ldrb	r3, [r2, r3]
 800a870:	2b03      	cmp	r3, #3
 800a872:	d107      	bne.n	800a884 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a874:	230c      	movs	r3, #12
 800a876:	18f9      	adds	r1, r7, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	0018      	movs	r0, r3
 800a87e:	f001 fb7b 	bl	800bf78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a882:	e040      	b.n	800a906 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	0011      	movs	r1, r2
 800a88a:	0018      	movs	r0, r3
 800a88c:	f001 faf6 	bl	800be7c <USBD_CtlError>
            ret = USBD_FAIL;
 800a890:	2317      	movs	r3, #23
 800a892:	18fb      	adds	r3, r7, r3
 800a894:	2202      	movs	r2, #2
 800a896:	701a      	strb	r2, [r3, #0]
          break;
 800a898:	e035      	b.n	800a906 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	23a7      	movs	r3, #167	; 0xa7
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	5cd3      	ldrb	r3, [r2, r3]
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d107      	bne.n	800a8b6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a8a6:	230f      	movs	r3, #15
 800a8a8:	18f9      	adds	r1, r7, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f001 fb62 	bl	800bf78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8b4:	e027      	b.n	800a906 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	0011      	movs	r1, r2
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f001 fadd 	bl	800be7c <USBD_CtlError>
            ret = USBD_FAIL;
 800a8c2:	2317      	movs	r3, #23
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	701a      	strb	r2, [r3, #0]
          break;
 800a8ca:	e01c      	b.n	800a906 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	23a7      	movs	r3, #167	; 0xa7
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	5cd3      	ldrb	r3, [r2, r3]
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d015      	beq.n	800a904 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0011      	movs	r1, r2
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f001 facc 	bl	800be7c <USBD_CtlError>
            ret = USBD_FAIL;
 800a8e4:	2317      	movs	r3, #23
 800a8e6:	18fb      	adds	r3, r7, r3
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a8ec:	e00a      	b.n	800a904 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	0011      	movs	r1, r2
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f001 fac1 	bl	800be7c <USBD_CtlError>
          ret = USBD_FAIL;
 800a8fa:	2317      	movs	r3, #23
 800a8fc:	18fb      	adds	r3, r7, r3
 800a8fe:	2202      	movs	r2, #2
 800a900:	701a      	strb	r2, [r3, #0]
          break;
 800a902:	e000      	b.n	800a906 <USBD_CDC_Setup+0x166>
          break;
 800a904:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a906:	e00a      	b.n	800a91e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	0011      	movs	r1, r2
 800a90e:	0018      	movs	r0, r3
 800a910:	f001 fab4 	bl	800be7c <USBD_CtlError>
      ret = USBD_FAIL;
 800a914:	2317      	movs	r3, #23
 800a916:	18fb      	adds	r3, r7, r3
 800a918:	2202      	movs	r2, #2
 800a91a:	701a      	strb	r2, [r3, #0]
      break;
 800a91c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a91e:	2317      	movs	r3, #23
 800a920:	18fb      	adds	r3, r7, r3
 800a922:	781b      	ldrb	r3, [r3, #0]
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b006      	add	sp, #24
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	00000201 	.word	0x00000201

0800a930 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	000a      	movs	r2, r1
 800a93a:	1cfb      	adds	r3, r7, #3
 800a93c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	23ae      	movs	r3, #174	; 0xae
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	58d3      	ldr	r3, [r2, r3]
 800a946:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	23b0      	movs	r3, #176	; 0xb0
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	58d3      	ldr	r3, [r2, r3]
 800a950:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	23ae      	movs	r3, #174	; 0xae
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	58d3      	ldr	r3, [r2, r3]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d03e      	beq.n	800a9dc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a95e:	1cfb      	adds	r3, r7, #3
 800a960:	781a      	ldrb	r2, [r3, #0]
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	0013      	movs	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	189b      	adds	r3, r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	18cb      	adds	r3, r1, r3
 800a96e:	331c      	adds	r3, #28
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d02b      	beq.n	800a9ce <USBD_CDC_DataIn+0x9e>
 800a976:	1cfb      	adds	r3, r7, #3
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	0013      	movs	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	189b      	adds	r3, r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	18cb      	adds	r3, r1, r3
 800a986:	331c      	adds	r3, #28
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	1cfb      	adds	r3, r7, #3
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	0013      	movs	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	189b      	adds	r3, r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	18cb      	adds	r3, r1, r3
 800a99a:	3338      	adds	r3, #56	; 0x38
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	0019      	movs	r1, r3
 800a9a0:	f7f5 fc4a 	bl	8000238 <__aeabi_uidivmod>
 800a9a4:	1e0b      	subs	r3, r1, #0
 800a9a6:	d112      	bne.n	800a9ce <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a9a8:	1cfb      	adds	r3, r7, #3
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	0013      	movs	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	189b      	adds	r3, r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	18cb      	adds	r3, r1, r3
 800a9b8:	331c      	adds	r3, #28
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9be:	1cfb      	adds	r3, r7, #3
 800a9c0:	7819      	ldrb	r1, [r3, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f001 fff7 	bl	800c9ba <USBD_LL_Transmit>
 800a9cc:	e004      	b.n	800a9d8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	2385      	movs	r3, #133	; 0x85
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e000      	b.n	800a9de <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a9dc:	2302      	movs	r3, #2
  }
}
 800a9de:	0018      	movs	r0, r3
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	b004      	add	sp, #16
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	000a      	movs	r2, r1
 800a9f0:	1cfb      	adds	r3, r7, #3
 800a9f2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	23ae      	movs	r3, #174	; 0xae
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	58d3      	ldr	r3, [r2, r3]
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a9fe:	1cfb      	adds	r3, r7, #3
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	0011      	movs	r1, r2
 800aa06:	0018      	movs	r0, r3
 800aa08:	f002 f845 	bl	800ca96 <USBD_LL_GetRxDataSize>
 800aa0c:	0001      	movs	r1, r0
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	2383      	movs	r3, #131	; 0x83
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	23ae      	movs	r3, #174	; 0xae
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	58d3      	ldr	r3, [r2, r3]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d011      	beq.n	800aa46 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	23af      	movs	r3, #175	; 0xaf
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	58d3      	ldr	r3, [r2, r3]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	2381      	movs	r3, #129	; 0x81
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	58c8      	ldr	r0, [r1, r3]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2183      	movs	r1, #131	; 0x83
 800aa38:	0089      	lsls	r1, r1, #2
 800aa3a:	468c      	mov	ip, r1
 800aa3c:	4463      	add	r3, ip
 800aa3e:	0019      	movs	r1, r3
 800aa40:	4790      	blx	r2

    return USBD_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e000      	b.n	800aa48 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
  }
}
 800aa48:	0018      	movs	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	b004      	add	sp, #16
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	23ae      	movs	r3, #174	; 0xae
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	58d3      	ldr	r3, [r2, r3]
 800aa60:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	23af      	movs	r3, #175	; 0xaf
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	58d3      	ldr	r3, [r2, r3]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d019      	beq.n	800aaa2 <USBD_CDC_EP0_RxReady+0x52>
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	2380      	movs	r3, #128	; 0x80
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	5cd3      	ldrb	r3, [r2, r3]
 800aa76:	2bff      	cmp	r3, #255	; 0xff
 800aa78:	d013      	beq.n	800aaa2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	23af      	movs	r3, #175	; 0xaf
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	58d3      	ldr	r3, [r2, r3]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	68f9      	ldr	r1, [r7, #12]
 800aa86:	2280      	movs	r2, #128	; 0x80
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800aa8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4c06      	ldr	r4, [pc, #24]	; (800aaac <USBD_CDC_EP0_RxReady+0x5c>)
 800aa92:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aa94:	b292      	uxth	r2, r2
 800aa96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	2380      	movs	r3, #128	; 0x80
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	21ff      	movs	r1, #255	; 0xff
 800aaa0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b005      	add	sp, #20
 800aaaa:	bd90      	pop	{r4, r7, pc}
 800aaac:	00000201 	.word	0x00000201

0800aab0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2243      	movs	r2, #67	; 0x43
 800aabc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800aabe:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800aac0:	0018      	movs	r0, r3
 800aac2:	46bd      	mov	sp, r7
 800aac4:	b002      	add	sp, #8
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20000094 	.word	0x20000094

0800aacc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2243      	movs	r2, #67	; 0x43
 800aad8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aada:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800aadc:	0018      	movs	r0, r3
 800aade:	46bd      	mov	sp, r7
 800aae0:	b002      	add	sp, #8
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20000050 	.word	0x20000050

0800aae8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2243      	movs	r2, #67	; 0x43
 800aaf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aaf6:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b002      	add	sp, #8
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200000d8 	.word	0x200000d8

0800ab04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	220a      	movs	r2, #10
 800ab10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ab12:	4b02      	ldr	r3, [pc, #8]	; (800ab1c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800ab14:	0018      	movs	r0, r3
 800ab16:	46bd      	mov	sp, r7
 800ab18:	b002      	add	sp, #8
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	2000000c 	.word	0x2000000c

0800ab20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ab2a:	200f      	movs	r0, #15
 800ab2c:	183b      	adds	r3, r7, r0
 800ab2e:	2202      	movs	r2, #2
 800ab30:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	23af      	movs	r3, #175	; 0xaf
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800ab42:	183b      	adds	r3, r7, r0
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800ab48:	230f      	movs	r3, #15
 800ab4a:	18fb      	adds	r3, r7, r3
 800ab4c:	781b      	ldrb	r3, [r3, #0]
}
 800ab4e:	0018      	movs	r0, r3
 800ab50:	46bd      	mov	sp, r7
 800ab52:	b004      	add	sp, #16
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b086      	sub	sp, #24
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	1dbb      	adds	r3, r7, #6
 800ab62:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	23ae      	movs	r3, #174	; 0xae
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	58d3      	ldr	r3, [r2, r3]
 800ab6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	2382      	movs	r3, #130	; 0x82
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800ab78:	1dbb      	adds	r3, r7, #6
 800ab7a:	8819      	ldrh	r1, [r3, #0]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	2384      	movs	r3, #132	; 0x84
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	0018      	movs	r0, r3
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	b006      	add	sp, #24
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	23ae      	movs	r3, #174	; 0xae
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	58d3      	ldr	r3, [r2, r3]
 800aba0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	2381      	movs	r3, #129	; 0x81
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	0018      	movs	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b004      	add	sp, #16
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	23ae      	movs	r3, #174	; 0xae
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	58d3      	ldr	r3, [r2, r3]
 800abc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	23ae      	movs	r3, #174	; 0xae
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	58d3      	ldr	r3, [r2, r3]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d022      	beq.n	800ac1a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	2385      	movs	r3, #133	; 0x85
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	58d3      	ldr	r3, [r2, r3]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11a      	bne.n	800ac16 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	2385      	movs	r3, #133	; 0x85
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	2101      	movs	r1, #1
 800abe8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	2384      	movs	r3, #132	; 0x84
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	58d2      	ldr	r2, [r2, r3]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	2382      	movs	r3, #130	; 0x82
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	2384      	movs	r3, #132	; 0x84
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	000a      	movs	r2, r1
 800ac0c:	2181      	movs	r1, #129	; 0x81
 800ac0e:	f001 fed4 	bl	800c9ba <USBD_LL_Transmit>

      return USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e002      	b.n	800ac1c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800ac1a:	2302      	movs	r3, #2
  }
}
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b004      	add	sp, #16
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	23ae      	movs	r3, #174	; 0xae
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	58d3      	ldr	r3, [r2, r3]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	23ae      	movs	r3, #174	; 0xae
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	58d3      	ldr	r3, [r2, r3]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d019      	beq.n	800ac76 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7c1b      	ldrb	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10a      	bne.n	800ac60 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	2381      	movs	r3, #129	; 0x81
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	58d2      	ldr	r2, [r2, r3]
 800ac52:	2380      	movs	r3, #128	; 0x80
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	2101      	movs	r1, #1
 800ac5a:	f001 fee5 	bl	800ca28 <USBD_LL_PrepareReceive>
 800ac5e:	e008      	b.n	800ac72 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	2381      	movs	r3, #129	; 0x81
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	58d2      	ldr	r2, [r2, r3]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	f001 fedb 	bl	800ca28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e000      	b.n	800ac78 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800ac76:	2302      	movs	r3, #2
  }
}
 800ac78:	0018      	movs	r0, r3
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	b004      	add	sp, #16
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	1dfb      	adds	r3, r7, #7
 800ac8c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ac94:	2302      	movs	r3, #2
 800ac96:	e020      	b.n	800acda <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	23ad      	movs	r3, #173	; 0xad
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	58d3      	ldr	r3, [r2, r3]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	23ad      	movs	r3, #173	; 0xad
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	2100      	movs	r1, #0
 800acac:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d004      	beq.n	800acbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	23ac      	movs	r3, #172	; 0xac
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	23a7      	movs	r3, #167	; 0xa7
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	2101      	movs	r1, #1
 800acc6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	1dfa      	adds	r2, r7, #7
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0018      	movs	r0, r3
 800acd4:	f001 fcd4 	bl	800c680 <USBD_LL_Init>

  return USBD_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	0018      	movs	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	b004      	add	sp, #16
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800acec:	200f      	movs	r0, #15
 800acee:	183b      	adds	r3, r7, r0
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d008      	beq.n	800ad0c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	23ad      	movs	r3, #173	; 0xad
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800ad04:	183b      	adds	r3, r7, r0
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	e003      	b.n	800ad14 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ad0c:	230f      	movs	r3, #15
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	2202      	movs	r2, #2
 800ad12:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ad14:	230f      	movs	r3, #15
 800ad16:	18fb      	adds	r3, r7, r3
 800ad18:	781b      	ldrb	r3, [r3, #0]
}
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b004      	add	sp, #16
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f001 fd0b 	bl	800c748 <USBD_LL_Start>

  return USBD_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	0018      	movs	r0, r3
 800ad36:	46bd      	mov	sp, r7
 800ad38:	b002      	add	sp, #8
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	0018      	movs	r0, r3
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	b002      	add	sp, #8
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ad4e:	b590      	push	{r4, r7, lr}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	000a      	movs	r2, r1
 800ad58:	1cfb      	adds	r3, r7, #3
 800ad5a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad5c:	240f      	movs	r4, #15
 800ad5e:	193b      	adds	r3, r7, r4
 800ad60:	2202      	movs	r2, #2
 800ad62:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	23ad      	movs	r3, #173	; 0xad
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	58d3      	ldr	r3, [r2, r3]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	23ad      	movs	r3, #173	; 0xad
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	58d3      	ldr	r3, [r2, r3]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	1cfa      	adds	r2, r7, #3
 800ad7c:	7811      	ldrb	r1, [r2, #0]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	0010      	movs	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	1e03      	subs	r3, r0, #0
 800ad86:	d102      	bne.n	800ad8e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800ad88:	193b      	adds	r3, r7, r4
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800ad8e:	230f      	movs	r3, #15
 800ad90:	18fb      	adds	r3, r7, r3
 800ad92:	781b      	ldrb	r3, [r3, #0]
}
 800ad94:	0018      	movs	r0, r3
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b005      	add	sp, #20
 800ad9a:	bd90      	pop	{r4, r7, pc}

0800ad9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	000a      	movs	r2, r1
 800ada6:	1cfb      	adds	r3, r7, #3
 800ada8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	23ad      	movs	r3, #173	; 0xad
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	58d3      	ldr	r3, [r2, r3]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	1cfa      	adds	r2, r7, #3
 800adb6:	7811      	ldrb	r1, [r2, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	0010      	movs	r0, r2
 800adbc:	4798      	blx	r3

  return USBD_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	0018      	movs	r0, r3
 800adc2:	46bd      	mov	sp, r7
 800adc4:	b002      	add	sp, #8
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	22aa      	movs	r2, #170	; 0xaa
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	4694      	mov	ip, r2
 800adda:	4463      	add	r3, ip
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	0011      	movs	r1, r2
 800ade0:	0018      	movs	r0, r3
 800ade2:	f001 f810 	bl	800be06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	23a5      	movs	r3, #165	; 0xa5
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	2101      	movs	r1, #1
 800adee:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a23      	ldr	r2, [pc, #140]	; (800ae80 <USBD_LL_SetupStage+0xb8>)
 800adf4:	5a9b      	ldrh	r3, [r3, r2]
 800adf6:	0019      	movs	r1, r3
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	23a6      	movs	r3, #166	; 0xa6
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	23aa      	movs	r3, #170	; 0xaa
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	5cd3      	ldrb	r3, [r2, r3]
 800ae08:	001a      	movs	r2, r3
 800ae0a:	231f      	movs	r3, #31
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d019      	beq.n	800ae46 <USBD_LL_SetupStage+0x7e>
 800ae12:	d822      	bhi.n	800ae5a <USBD_LL_SetupStage+0x92>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <USBD_LL_SetupStage+0x56>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d00a      	beq.n	800ae32 <USBD_LL_SetupStage+0x6a>
 800ae1c:	e01d      	b.n	800ae5a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	22aa      	movs	r2, #170	; 0xaa
 800ae22:	0092      	lsls	r2, r2, #2
 800ae24:	189a      	adds	r2, r3, r2
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	0011      	movs	r1, r2
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f000 fa10 	bl	800b250 <USBD_StdDevReq>
      break;
 800ae30:	e020      	b.n	800ae74 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	22aa      	movs	r2, #170	; 0xaa
 800ae36:	0092      	lsls	r2, r2, #2
 800ae38:	189a      	adds	r2, r3, r2
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 fa78 	bl	800b334 <USBD_StdItfReq>
      break;
 800ae44:	e016      	b.n	800ae74 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	22aa      	movs	r2, #170	; 0xaa
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	189a      	adds	r2, r3, r2
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	0011      	movs	r1, r2
 800ae52:	0018      	movs	r0, r3
 800ae54:	f000 fac5 	bl	800b3e2 <USBD_StdEPReq>
      break;
 800ae58:	e00c      	b.n	800ae74 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	23aa      	movs	r3, #170	; 0xaa
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	5cd3      	ldrb	r3, [r2, r3]
 800ae62:	227f      	movs	r2, #127	; 0x7f
 800ae64:	4393      	bics	r3, r2
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	0011      	movs	r1, r2
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f001 fcf2 	bl	800c856 <USBD_LL_StallEP>
      break;
 800ae72:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b002      	add	sp, #8
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	000002ae 	.word	0x000002ae

0800ae84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	200b      	movs	r0, #11
 800ae90:	183b      	adds	r3, r7, r0
 800ae92:	1c0a      	adds	r2, r1, #0
 800ae94:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ae96:	183b      	adds	r3, r7, r0
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d154      	bne.n	800af48 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3355      	adds	r3, #85	; 0x55
 800aea2:	33ff      	adds	r3, #255	; 0xff
 800aea4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	23a5      	movs	r3, #165	; 0xa5
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	58d3      	ldr	r3, [r2, r3]
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d139      	bne.n	800af26 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d919      	bls.n	800aef2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	1ad2      	subs	r2, r2, r3
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d203      	bcs.n	800aee0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aedc:	b29b      	uxth	r3, r3
 800aede:	e002      	b.n	800aee6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	001a      	movs	r2, r3
 800aeec:	f001 f89b 	bl	800c026 <USBD_CtlContinueRx>
 800aef0:	e045      	b.n	800af7e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	23ad      	movs	r3, #173	; 0xad
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	58d3      	ldr	r3, [r2, r3]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	23a7      	movs	r3, #167	; 0xa7
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d107      	bne.n	800af1c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	23ad      	movs	r3, #173	; 0xad
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	58d3      	ldr	r3, [r2, r3]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	0010      	movs	r0, r2
 800af1a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0018      	movs	r0, r3
 800af20:	f001 f894 	bl	800c04c <USBD_CtlSendStatus>
 800af24:	e02b      	b.n	800af7e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	23a5      	movs	r3, #165	; 0xa5
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	58d3      	ldr	r3, [r2, r3]
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d125      	bne.n	800af7e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	23a5      	movs	r3, #165	; 0xa5
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	2100      	movs	r1, #0
 800af3a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2100      	movs	r1, #0
 800af40:	0018      	movs	r0, r3
 800af42:	f001 fc88 	bl	800c856 <USBD_LL_StallEP>
 800af46:	e01a      	b.n	800af7e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	23ad      	movs	r3, #173	; 0xad
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	58d3      	ldr	r3, [r2, r3]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d011      	beq.n	800af7a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	23a7      	movs	r3, #167	; 0xa7
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d10b      	bne.n	800af7a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	23ad      	movs	r3, #173	; 0xad
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	58d3      	ldr	r3, [r2, r3]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	220b      	movs	r2, #11
 800af6e:	18ba      	adds	r2, r7, r2
 800af70:	7811      	ldrb	r1, [r2, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	0010      	movs	r0, r2
 800af76:	4798      	blx	r3
 800af78:	e001      	b.n	800af7e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af7a:	2302      	movs	r3, #2
 800af7c:	e000      	b.n	800af80 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	0018      	movs	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	b006      	add	sp, #24
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	200b      	movs	r0, #11
 800af94:	183b      	adds	r3, r7, r0
 800af96:	1c0a      	adds	r2, r1, #0
 800af98:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af9a:	183b      	adds	r3, r7, r0
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d000      	beq.n	800afa4 <USBD_LL_DataInStage+0x1c>
 800afa2:	e08e      	b.n	800b0c2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3314      	adds	r3, #20
 800afa8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	23a5      	movs	r3, #165	; 0xa5
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	58d3      	ldr	r3, [r2, r3]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d164      	bne.n	800b080 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d915      	bls.n	800afee <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	0018      	movs	r0, r3
 800afdc:	f000 ffec 	bl	800bfb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	2300      	movs	r3, #0
 800afe4:	2200      	movs	r2, #0
 800afe6:	2100      	movs	r1, #0
 800afe8:	f001 fd1e 	bl	800ca28 <USBD_LL_PrepareReceive>
 800afec:	e059      	b.n	800b0a2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	0019      	movs	r1, r3
 800aff8:	0010      	movs	r0, r2
 800affa:	f7f5 f91d 	bl	8000238 <__aeabi_uidivmod>
 800affe:	1e0b      	subs	r3, r1, #0
 800b000:	d11f      	bne.n	800b042 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d319      	bcc.n	800b042 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	68f9      	ldr	r1, [r7, #12]
 800b014:	23a6      	movs	r3, #166	; 0xa6
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d211      	bcs.n	800b042 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	2100      	movs	r1, #0
 800b024:	0018      	movs	r0, r3
 800b026:	f000 ffc7 	bl	800bfb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	23a6      	movs	r3, #166	; 0xa6
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	2100      	movs	r1, #0
 800b032:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	2300      	movs	r3, #0
 800b038:	2200      	movs	r2, #0
 800b03a:	2100      	movs	r1, #0
 800b03c:	f001 fcf4 	bl	800ca28 <USBD_LL_PrepareReceive>
 800b040:	e02f      	b.n	800b0a2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	23ad      	movs	r3, #173	; 0xad
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	58d3      	ldr	r3, [r2, r3]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00d      	beq.n	800b06c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	23a7      	movs	r3, #167	; 0xa7
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d107      	bne.n	800b06c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	23ad      	movs	r3, #173	; 0xad
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	58d3      	ldr	r3, [r2, r3]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	0010      	movs	r0, r2
 800b06a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2180      	movs	r1, #128	; 0x80
 800b070:	0018      	movs	r0, r3
 800b072:	f001 fbf0 	bl	800c856 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	0018      	movs	r0, r3
 800b07a:	f000 fffb 	bl	800c074 <USBD_CtlReceiveStatus>
 800b07e:	e010      	b.n	800b0a2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	23a5      	movs	r3, #165	; 0xa5
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	58d3      	ldr	r3, [r2, r3]
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d005      	beq.n	800b098 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	23a5      	movs	r3, #165	; 0xa5
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2180      	movs	r1, #128	; 0x80
 800b09c:	0018      	movs	r0, r3
 800b09e:	f001 fbda 	bl	800c856 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	23a8      	movs	r3, #168	; 0xa8
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	5cd3      	ldrb	r3, [r2, r3]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d124      	bne.n	800b0f8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f7ff fe43 	bl	800ad3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	23a8      	movs	r3, #168	; 0xa8
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	2100      	movs	r1, #0
 800b0be:	54d1      	strb	r1, [r2, r3]
 800b0c0:	e01a      	b.n	800b0f8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	23ad      	movs	r3, #173	; 0xad
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	58d3      	ldr	r3, [r2, r3]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d011      	beq.n	800b0f4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	23a7      	movs	r3, #167	; 0xa7
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d10b      	bne.n	800b0f4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	23ad      	movs	r3, #173	; 0xad
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	58d3      	ldr	r3, [r2, r3]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	220b      	movs	r2, #11
 800b0e8:	18ba      	adds	r2, r7, r2
 800b0ea:	7811      	ldrb	r1, [r2, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	0010      	movs	r0, r2
 800b0f0:	4798      	blx	r3
 800b0f2:	e001      	b.n	800b0f8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e000      	b.n	800b0fa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b006      	add	sp, #24
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	2340      	movs	r3, #64	; 0x40
 800b10e:	2200      	movs	r2, #0
 800b110:	2100      	movs	r1, #0
 800b112:	f001 fb3e 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	23ac      	movs	r3, #172	; 0xac
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	2101      	movs	r1, #1
 800b11e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	23b2      	movs	r3, #178	; 0xb2
 800b124:	005b      	lsls	r3, r3, #1
 800b126:	2140      	movs	r1, #64	; 0x40
 800b128:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	2340      	movs	r3, #64	; 0x40
 800b12e:	2200      	movs	r2, #0
 800b130:	2180      	movs	r1, #128	; 0x80
 800b132:	f001 fb2e 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2240      	movs	r2, #64	; 0x40
 800b140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	23a7      	movs	r3, #167	; 0xa7
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	2101      	movs	r1, #1
 800b14a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	23a5      	movs	r3, #165	; 0xa5
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	2100      	movs	r1, #0
 800b154:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	23a9      	movs	r3, #169	; 0xa9
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	2100      	movs	r1, #0
 800b164:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	23ae      	movs	r3, #174	; 0xae
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	58d3      	ldr	r3, [r2, r3]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	23ad      	movs	r3, #173	; 0xad
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	58d3      	ldr	r3, [r2, r3]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	b2d9      	uxtb	r1, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	0018      	movs	r0, r3
 800b186:	4790      	blx	r2
  }

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	0018      	movs	r0, r3
 800b18c:	46bd      	mov	sp, r7
 800b18e:	b002      	add	sp, #8
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	000a      	movs	r2, r1
 800b19c:	1cfb      	adds	r3, r7, #3
 800b19e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	1cfa      	adds	r2, r7, #3
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	0018      	movs	r0, r3
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	b002      	add	sp, #8
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	23a7      	movs	r3, #167	; 0xa7
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	5cd1      	ldrb	r1, [r2, r3]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a06      	ldr	r2, [pc, #24]	; (800b1e0 <USBD_LL_Suspend+0x2c>)
 800b1c8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	23a7      	movs	r3, #167	; 0xa7
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	b002      	add	sp, #8
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	46c0      	nop			; (mov r8, r8)
 800b1e0:	0000029d 	.word	0x0000029d

0800b1e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	23a7      	movs	r3, #167	; 0xa7
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	5cd3      	ldrb	r3, [r2, r3]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d106      	bne.n	800b206 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a05      	ldr	r2, [pc, #20]	; (800b210 <USBD_LL_Resume+0x2c>)
 800b1fc:	5c99      	ldrb	r1, [r3, r2]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	23a7      	movs	r3, #167	; 0xa7
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	0018      	movs	r0, r3
 800b20a:	46bd      	mov	sp, r7
 800b20c:	b002      	add	sp, #8
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	0000029d 	.word	0x0000029d

0800b214 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	23a7      	movs	r3, #167	; 0xa7
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	5cd3      	ldrb	r3, [r2, r3]
 800b224:	2b03      	cmp	r3, #3
 800b226:	d10e      	bne.n	800b246 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	23ad      	movs	r3, #173	; 0xad
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	58d3      	ldr	r3, [r2, r3]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	23ad      	movs	r3, #173	; 0xad
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	58d3      	ldr	r3, [r2, r3]
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	0010      	movs	r0, r2
 800b244:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	0018      	movs	r0, r3
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b002      	add	sp, #8
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b25a:	230f      	movs	r3, #15
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	001a      	movs	r2, r3
 800b268:	2360      	movs	r3, #96	; 0x60
 800b26a:	4013      	ands	r3, r2
 800b26c:	2b40      	cmp	r3, #64	; 0x40
 800b26e:	d004      	beq.n	800b27a <USBD_StdDevReq+0x2a>
 800b270:	d84f      	bhi.n	800b312 <USBD_StdDevReq+0xc2>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <USBD_StdDevReq+0x3e>
 800b276:	2b20      	cmp	r3, #32
 800b278:	d14b      	bne.n	800b312 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	23ad      	movs	r3, #173	; 0xad
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	58d3      	ldr	r3, [r2, r3]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	0010      	movs	r0, r2
 800b28a:	4798      	blx	r3
      break;
 800b28c:	e048      	b.n	800b320 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	785b      	ldrb	r3, [r3, #1]
 800b292:	2b09      	cmp	r3, #9
 800b294:	d835      	bhi.n	800b302 <USBD_StdDevReq+0xb2>
 800b296:	009a      	lsls	r2, r3, #2
 800b298:	4b25      	ldr	r3, [pc, #148]	; (800b330 <USBD_StdDevReq+0xe0>)
 800b29a:	18d3      	adds	r3, r2, r3
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	0011      	movs	r1, r2
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f000 fa52 	bl	800b750 <USBD_GetDescriptor>
          break;
 800b2ac:	e030      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	0011      	movs	r1, r2
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f000 fbfd 	bl	800bab4 <USBD_SetAddress>
          break;
 800b2ba:	e029      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	0011      	movs	r1, r2
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f000 fc4a 	bl	800bb5c <USBD_SetConfig>
          break;
 800b2c8:	e022      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	0011      	movs	r1, r2
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	f000 fce7 	bl	800bca4 <USBD_GetConfig>
          break;
 800b2d6:	e01b      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	0011      	movs	r1, r2
 800b2de:	0018      	movs	r0, r3
 800b2e0:	f000 fd1b 	bl	800bd1a <USBD_GetStatus>
          break;
 800b2e4:	e014      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	0011      	movs	r1, r2
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 fd4e 	bl	800bd8e <USBD_SetFeature>
          break;
 800b2f2:	e00d      	b.n	800b310 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	0011      	movs	r1, r2
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	f000 fd5d 	bl	800bdba <USBD_ClrFeature>
          break;
 800b300:	e006      	b.n	800b310 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	0011      	movs	r1, r2
 800b308:	0018      	movs	r0, r3
 800b30a:	f000 fdb7 	bl	800be7c <USBD_CtlError>
          break;
 800b30e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b310:	e006      	b.n	800b320 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	0011      	movs	r1, r2
 800b318:	0018      	movs	r0, r3
 800b31a:	f000 fdaf 	bl	800be7c <USBD_CtlError>
      break;
 800b31e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b320:	230f      	movs	r3, #15
 800b322:	18fb      	adds	r3, r7, r3
 800b324:	781b      	ldrb	r3, [r3, #0]
}
 800b326:	0018      	movs	r0, r3
 800b328:	46bd      	mov	sp, r7
 800b32a:	b004      	add	sp, #16
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	0800d5a4 	.word	0x0800d5a4

0800b334 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b334:	b5b0      	push	{r4, r5, r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b33e:	230f      	movs	r3, #15
 800b340:	18fb      	adds	r3, r7, r3
 800b342:	2200      	movs	r2, #0
 800b344:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	001a      	movs	r2, r3
 800b34c:	2360      	movs	r3, #96	; 0x60
 800b34e:	4013      	ands	r3, r2
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d004      	beq.n	800b35e <USBD_StdItfReq+0x2a>
 800b354:	d839      	bhi.n	800b3ca <USBD_StdItfReq+0x96>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <USBD_StdItfReq+0x2a>
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d135      	bne.n	800b3ca <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	23a7      	movs	r3, #167	; 0xa7
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	5cd3      	ldrb	r3, [r2, r3]
 800b366:	3b01      	subs	r3, #1
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d825      	bhi.n	800b3b8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	889b      	ldrh	r3, [r3, #4]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b01      	cmp	r3, #1
 800b374:	d819      	bhi.n	800b3aa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	23ad      	movs	r3, #173	; 0xad
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	58d3      	ldr	r3, [r2, r3]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	250f      	movs	r5, #15
 800b382:	197c      	adds	r4, r7, r5
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	0010      	movs	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	0003      	movs	r3, r0
 800b38e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	88db      	ldrh	r3, [r3, #6]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d116      	bne.n	800b3c6 <USBD_StdItfReq+0x92>
 800b398:	197b      	adds	r3, r7, r5
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d112      	bne.n	800b3c6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	f000 fe52 	bl	800c04c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3a8:	e00d      	b.n	800b3c6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	0011      	movs	r1, r2
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f000 fd63 	bl	800be7c <USBD_CtlError>
          break;
 800b3b6:	e006      	b.n	800b3c6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	0011      	movs	r1, r2
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f000 fd5c 	bl	800be7c <USBD_CtlError>
          break;
 800b3c4:	e000      	b.n	800b3c8 <USBD_StdItfReq+0x94>
          break;
 800b3c6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b3c8:	e006      	b.n	800b3d8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	0011      	movs	r1, r2
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f000 fd53 	bl	800be7c <USBD_CtlError>
      break;
 800b3d6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	0018      	movs	r0, r3
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	b004      	add	sp, #16
 800b3e0:	bdb0      	pop	{r4, r5, r7, pc}

0800b3e2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3e2:	b5b0      	push	{r4, r5, r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ec:	230f      	movs	r3, #15
 800b3ee:	18fb      	adds	r3, r7, r3
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	889a      	ldrh	r2, [r3, #4]
 800b3f8:	230e      	movs	r3, #14
 800b3fa:	18fb      	adds	r3, r7, r3
 800b3fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	001a      	movs	r2, r3
 800b404:	2360      	movs	r3, #96	; 0x60
 800b406:	4013      	ands	r3, r2
 800b408:	2b40      	cmp	r3, #64	; 0x40
 800b40a:	d006      	beq.n	800b41a <USBD_StdEPReq+0x38>
 800b40c:	d900      	bls.n	800b410 <USBD_StdEPReq+0x2e>
 800b40e:	e190      	b.n	800b732 <USBD_StdEPReq+0x350>
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00c      	beq.n	800b42e <USBD_StdEPReq+0x4c>
 800b414:	2b20      	cmp	r3, #32
 800b416:	d000      	beq.n	800b41a <USBD_StdEPReq+0x38>
 800b418:	e18b      	b.n	800b732 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	23ad      	movs	r3, #173	; 0xad
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	58d3      	ldr	r3, [r2, r3]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	0010      	movs	r0, r2
 800b42a:	4798      	blx	r3
      break;
 800b42c:	e188      	b.n	800b740 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	001a      	movs	r2, r3
 800b434:	2360      	movs	r3, #96	; 0x60
 800b436:	4013      	ands	r3, r2
 800b438:	2b20      	cmp	r3, #32
 800b43a:	d10f      	bne.n	800b45c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	23ad      	movs	r3, #173	; 0xad
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	58d3      	ldr	r3, [r2, r3]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	250f      	movs	r5, #15
 800b448:	197c      	adds	r4, r7, r5
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	0010      	movs	r0, r2
 800b450:	4798      	blx	r3
 800b452:	0003      	movs	r3, r0
 800b454:	7023      	strb	r3, [r4, #0]

        return ret;
 800b456:	197b      	adds	r3, r7, r5
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	e174      	b.n	800b746 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d007      	beq.n	800b474 <USBD_StdEPReq+0x92>
 800b464:	dd00      	ble.n	800b468 <USBD_StdEPReq+0x86>
 800b466:	e15c      	b.n	800b722 <USBD_StdEPReq+0x340>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d100      	bne.n	800b46e <USBD_StdEPReq+0x8c>
 800b46c:	e092      	b.n	800b594 <USBD_StdEPReq+0x1b2>
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d04b      	beq.n	800b50a <USBD_StdEPReq+0x128>
 800b472:	e156      	b.n	800b722 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	23a7      	movs	r3, #167	; 0xa7
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	5cd3      	ldrb	r3, [r2, r3]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d002      	beq.n	800b486 <USBD_StdEPReq+0xa4>
 800b480:	2b03      	cmp	r3, #3
 800b482:	d01d      	beq.n	800b4c0 <USBD_StdEPReq+0xde>
 800b484:	e039      	b.n	800b4fa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b486:	220e      	movs	r2, #14
 800b488:	18bb      	adds	r3, r7, r2
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d010      	beq.n	800b4b2 <USBD_StdEPReq+0xd0>
 800b490:	18bb      	adds	r3, r7, r2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b80      	cmp	r3, #128	; 0x80
 800b496:	d00c      	beq.n	800b4b2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b498:	18bb      	adds	r3, r7, r2
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	0011      	movs	r1, r2
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f001 f9d8 	bl	800c856 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2180      	movs	r1, #128	; 0x80
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f001 f9d3 	bl	800c856 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4b0:	e02a      	b.n	800b508 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	0011      	movs	r1, r2
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	f000 fcdf 	bl	800be7c <USBD_CtlError>
              break;
 800b4be:	e023      	b.n	800b508 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	885b      	ldrh	r3, [r3, #2]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d113      	bne.n	800b4f0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b4c8:	220e      	movs	r2, #14
 800b4ca:	18bb      	adds	r3, r7, r2
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00e      	beq.n	800b4f0 <USBD_StdEPReq+0x10e>
 800b4d2:	18bb      	adds	r3, r7, r2
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b80      	cmp	r3, #128	; 0x80
 800b4d8:	d00a      	beq.n	800b4f0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4e2:	18bb      	adds	r3, r7, r2
 800b4e4:	781a      	ldrb	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	0011      	movs	r1, r2
 800b4ea:	0018      	movs	r0, r3
 800b4ec:	f001 f9b3 	bl	800c856 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f000 fdaa 	bl	800c04c <USBD_CtlSendStatus>

              break;
 800b4f8:	e006      	b.n	800b508 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0011      	movs	r1, r2
 800b500:	0018      	movs	r0, r3
 800b502:	f000 fcbb 	bl	800be7c <USBD_CtlError>
              break;
 800b506:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b508:	e112      	b.n	800b730 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	23a7      	movs	r3, #167	; 0xa7
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	5cd3      	ldrb	r3, [r2, r3]
 800b512:	2b02      	cmp	r3, #2
 800b514:	d002      	beq.n	800b51c <USBD_StdEPReq+0x13a>
 800b516:	2b03      	cmp	r3, #3
 800b518:	d01d      	beq.n	800b556 <USBD_StdEPReq+0x174>
 800b51a:	e032      	b.n	800b582 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b51c:	220e      	movs	r2, #14
 800b51e:	18bb      	adds	r3, r7, r2
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d010      	beq.n	800b548 <USBD_StdEPReq+0x166>
 800b526:	18bb      	adds	r3, r7, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b80      	cmp	r3, #128	; 0x80
 800b52c:	d00c      	beq.n	800b548 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b52e:	18bb      	adds	r3, r7, r2
 800b530:	781a      	ldrb	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	0011      	movs	r1, r2
 800b536:	0018      	movs	r0, r3
 800b538:	f001 f98d 	bl	800c856 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2180      	movs	r1, #128	; 0x80
 800b540:	0018      	movs	r0, r3
 800b542:	f001 f988 	bl	800c856 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b546:	e024      	b.n	800b592 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	0011      	movs	r1, r2
 800b54e:	0018      	movs	r0, r3
 800b550:	f000 fc94 	bl	800be7c <USBD_CtlError>
              break;
 800b554:	e01d      	b.n	800b592 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	885b      	ldrh	r3, [r3, #2]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d118      	bne.n	800b590 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b55e:	210e      	movs	r1, #14
 800b560:	187b      	adds	r3, r7, r1
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	227f      	movs	r2, #127	; 0x7f
 800b566:	4013      	ands	r3, r2
 800b568:	d006      	beq.n	800b578 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b56a:	187b      	adds	r3, r7, r1
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	0011      	movs	r1, r2
 800b572:	0018      	movs	r0, r3
 800b574:	f001 f99a 	bl	800c8ac <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	0018      	movs	r0, r3
 800b57c:	f000 fd66 	bl	800c04c <USBD_CtlSendStatus>
              }
              break;
 800b580:	e006      	b.n	800b590 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	0011      	movs	r1, r2
 800b588:	0018      	movs	r0, r3
 800b58a:	f000 fc77 	bl	800be7c <USBD_CtlError>
              break;
 800b58e:	e000      	b.n	800b592 <USBD_StdEPReq+0x1b0>
              break;
 800b590:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b592:	e0cd      	b.n	800b730 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	23a7      	movs	r3, #167	; 0xa7
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	5cd3      	ldrb	r3, [r2, r3]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d002      	beq.n	800b5a6 <USBD_StdEPReq+0x1c4>
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d03c      	beq.n	800b61e <USBD_StdEPReq+0x23c>
 800b5a4:	e0b5      	b.n	800b712 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5a6:	220e      	movs	r2, #14
 800b5a8:	18bb      	adds	r3, r7, r2
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <USBD_StdEPReq+0x1e4>
 800b5b0:	18bb      	adds	r3, r7, r2
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b80      	cmp	r3, #128	; 0x80
 800b5b6:	d006      	beq.n	800b5c6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0011      	movs	r1, r2
 800b5be:	0018      	movs	r0, r3
 800b5c0:	f000 fc5c 	bl	800be7c <USBD_CtlError>
                break;
 800b5c4:	e0ac      	b.n	800b720 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5c6:	220e      	movs	r2, #14
 800b5c8:	18bb      	adds	r3, r7, r2
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b25b      	sxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da0c      	bge.n	800b5ec <USBD_StdEPReq+0x20a>
 800b5d2:	18bb      	adds	r3, r7, r2
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	227f      	movs	r2, #127	; 0x7f
 800b5d8:	401a      	ands	r2, r3
 800b5da:	0013      	movs	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	189b      	adds	r3, r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	3310      	adds	r3, #16
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	18d3      	adds	r3, r2, r3
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	e00d      	b.n	800b608 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ec:	230e      	movs	r3, #14
 800b5ee:	18fb      	adds	r3, r7, r3
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	227f      	movs	r2, #127	; 0x7f
 800b5f4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f6:	0013      	movs	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	3351      	adds	r3, #81	; 0x51
 800b600:	33ff      	adds	r3, #255	; 0xff
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	18d3      	adds	r3, r2, r3
 800b606:	3304      	adds	r3, #4
 800b608:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2202      	movs	r2, #2
 800b616:	0018      	movs	r0, r3
 800b618:	f000 fcae 	bl	800bf78 <USBD_CtlSendData>
              break;
 800b61c:	e080      	b.n	800b720 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b61e:	220e      	movs	r2, #14
 800b620:	18bb      	adds	r3, r7, r2
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b25b      	sxtb	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	da14      	bge.n	800b654 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b62a:	18bb      	adds	r3, r7, r2
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	220f      	movs	r2, #15
 800b630:	401a      	ands	r2, r3
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	0013      	movs	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	189b      	adds	r3, r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	18cb      	adds	r3, r1, r3
 800b63e:	3318      	adds	r3, #24
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d11e      	bne.n	800b684 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	0011      	movs	r1, r2
 800b64c:	0018      	movs	r0, r3
 800b64e:	f000 fc15 	bl	800be7c <USBD_CtlError>
                  break;
 800b652:	e065      	b.n	800b720 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b654:	230e      	movs	r3, #14
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	220f      	movs	r2, #15
 800b65c:	401a      	ands	r2, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	23ac      	movs	r3, #172	; 0xac
 800b662:	0059      	lsls	r1, r3, #1
 800b664:	0013      	movs	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	189b      	adds	r3, r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	18c3      	adds	r3, r0, r3
 800b66e:	185b      	adds	r3, r3, r1
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	0011      	movs	r1, r2
 800b67c:	0018      	movs	r0, r3
 800b67e:	f000 fbfd 	bl	800be7c <USBD_CtlError>
                  break;
 800b682:	e04d      	b.n	800b720 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b684:	220e      	movs	r2, #14
 800b686:	18bb      	adds	r3, r7, r2
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b25b      	sxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	da0c      	bge.n	800b6aa <USBD_StdEPReq+0x2c8>
 800b690:	18bb      	adds	r3, r7, r2
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	227f      	movs	r2, #127	; 0x7f
 800b696:	401a      	ands	r2, r3
 800b698:	0013      	movs	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	189b      	adds	r3, r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	3310      	adds	r3, #16
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	18d3      	adds	r3, r2, r3
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	e00d      	b.n	800b6c6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6aa:	230e      	movs	r3, #14
 800b6ac:	18fb      	adds	r3, r7, r3
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	227f      	movs	r2, #127	; 0x7f
 800b6b2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6b4:	0013      	movs	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	189b      	adds	r3, r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	3351      	adds	r3, #81	; 0x51
 800b6be:	33ff      	adds	r3, #255	; 0xff
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	18d3      	adds	r3, r2, r3
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b6c8:	220e      	movs	r2, #14
 800b6ca:	18bb      	adds	r3, r7, r2
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <USBD_StdEPReq+0x2f8>
 800b6d2:	18bb      	adds	r3, r7, r2
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b80      	cmp	r3, #128	; 0x80
 800b6d8:	d103      	bne.n	800b6e2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	e010      	b.n	800b704 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b6e2:	230e      	movs	r3, #14
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	0011      	movs	r1, r2
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	f001 f908 	bl	800c902 <USBD_LL_IsStallEP>
 800b6f2:	1e03      	subs	r3, r0, #0
 800b6f4:	d003      	beq.n	800b6fe <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	e002      	b.n	800b704 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	0018      	movs	r0, r3
 800b70c:	f000 fc34 	bl	800bf78 <USBD_CtlSendData>
              break;
 800b710:	e006      	b.n	800b720 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	0011      	movs	r1, r2
 800b718:	0018      	movs	r0, r3
 800b71a:	f000 fbaf 	bl	800be7c <USBD_CtlError>
              break;
 800b71e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b720:	e006      	b.n	800b730 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	0011      	movs	r1, r2
 800b728:	0018      	movs	r0, r3
 800b72a:	f000 fba7 	bl	800be7c <USBD_CtlError>
          break;
 800b72e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b730:	e006      	b.n	800b740 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	0011      	movs	r1, r2
 800b738:	0018      	movs	r0, r3
 800b73a:	f000 fb9f 	bl	800be7c <USBD_CtlError>
      break;
 800b73e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b740:	230f      	movs	r3, #15
 800b742:	18fb      	adds	r3, r7, r3
 800b744:	781b      	ldrb	r3, [r3, #0]
}
 800b746:	0018      	movs	r0, r3
 800b748:	46bd      	mov	sp, r7
 800b74a:	b004      	add	sp, #16
 800b74c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b750 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b75a:	2308      	movs	r3, #8
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	2200      	movs	r2, #0
 800b760:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b766:	230b      	movs	r3, #11
 800b768:	18fb      	adds	r3, r7, r3
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	0a1b      	lsrs	r3, r3, #8
 800b774:	b29b      	uxth	r3, r3
 800b776:	2b07      	cmp	r3, #7
 800b778:	d900      	bls.n	800b77c <USBD_GetDescriptor+0x2c>
 800b77a:	e159      	b.n	800ba30 <USBD_GetDescriptor+0x2e0>
 800b77c:	009a      	lsls	r2, r3, #2
 800b77e:	4bcb      	ldr	r3, [pc, #812]	; (800baac <USBD_GetDescriptor+0x35c>)
 800b780:	18d3      	adds	r3, r2, r3
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	23ac      	movs	r3, #172	; 0xac
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	58d3      	ldr	r3, [r2, r3]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	7c12      	ldrb	r2, [r2, #16]
 800b794:	2108      	movs	r1, #8
 800b796:	1879      	adds	r1, r7, r1
 800b798:	0010      	movs	r0, r2
 800b79a:	4798      	blx	r3
 800b79c:	0003      	movs	r3, r0
 800b79e:	60fb      	str	r3, [r7, #12]
      break;
 800b7a0:	e153      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7c1b      	ldrb	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10f      	bne.n	800b7ca <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	23ad      	movs	r3, #173	; 0xad
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	58d3      	ldr	r3, [r2, r3]
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b4:	2208      	movs	r2, #8
 800b7b6:	18ba      	adds	r2, r7, r2
 800b7b8:	0010      	movs	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	0003      	movs	r3, r0
 800b7be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b7c8:	e13f      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	23ad      	movs	r3, #173	; 0xad
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	58d3      	ldr	r3, [r2, r3]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	18ba      	adds	r2, r7, r2
 800b7d8:	0010      	movs	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	0003      	movs	r3, r0
 800b7de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	701a      	strb	r2, [r3, #0]
      break;
 800b7e8:	e12f      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	885b      	ldrh	r3, [r3, #2]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b05      	cmp	r3, #5
 800b7f2:	d900      	bls.n	800b7f6 <USBD_GetDescriptor+0xa6>
 800b7f4:	e0d0      	b.n	800b998 <USBD_GetDescriptor+0x248>
 800b7f6:	009a      	lsls	r2, r3, #2
 800b7f8:	4bad      	ldr	r3, [pc, #692]	; (800bab0 <USBD_GetDescriptor+0x360>)
 800b7fa:	18d3      	adds	r3, r2, r3
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	23ac      	movs	r3, #172	; 0xac
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	58d3      	ldr	r3, [r2, r3]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00d      	beq.n	800b82a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	23ac      	movs	r3, #172	; 0xac
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	58d3      	ldr	r3, [r2, r3]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7c12      	ldrb	r2, [r2, #16]
 800b81c:	2108      	movs	r1, #8
 800b81e:	1879      	adds	r1, r7, r1
 800b820:	0010      	movs	r0, r2
 800b822:	4798      	blx	r3
 800b824:	0003      	movs	r3, r0
 800b826:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b828:	e0c3      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	0011      	movs	r1, r2
 800b830:	0018      	movs	r0, r3
 800b832:	f000 fb23 	bl	800be7c <USBD_CtlError>
            err++;
 800b836:	210b      	movs	r1, #11
 800b838:	187b      	adds	r3, r7, r1
 800b83a:	781a      	ldrb	r2, [r3, #0]
 800b83c:	187b      	adds	r3, r7, r1
 800b83e:	3201      	adds	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
          break;
 800b842:	e0b6      	b.n	800b9b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	23ac      	movs	r3, #172	; 0xac
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	58d3      	ldr	r3, [r2, r3]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00d      	beq.n	800b86e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	23ac      	movs	r3, #172	; 0xac
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	58d3      	ldr	r3, [r2, r3]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	7c12      	ldrb	r2, [r2, #16]
 800b860:	2108      	movs	r1, #8
 800b862:	1879      	adds	r1, r7, r1
 800b864:	0010      	movs	r0, r2
 800b866:	4798      	blx	r3
 800b868:	0003      	movs	r3, r0
 800b86a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86c:	e0a1      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	0011      	movs	r1, r2
 800b874:	0018      	movs	r0, r3
 800b876:	f000 fb01 	bl	800be7c <USBD_CtlError>
            err++;
 800b87a:	210b      	movs	r1, #11
 800b87c:	187b      	adds	r3, r7, r1
 800b87e:	781a      	ldrb	r2, [r3, #0]
 800b880:	187b      	adds	r3, r7, r1
 800b882:	3201      	adds	r2, #1
 800b884:	701a      	strb	r2, [r3, #0]
          break;
 800b886:	e094      	b.n	800b9b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	23ac      	movs	r3, #172	; 0xac
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	58d3      	ldr	r3, [r2, r3]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00d      	beq.n	800b8b2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	23ac      	movs	r3, #172	; 0xac
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	58d3      	ldr	r3, [r2, r3]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	7c12      	ldrb	r2, [r2, #16]
 800b8a4:	2108      	movs	r1, #8
 800b8a6:	1879      	adds	r1, r7, r1
 800b8a8:	0010      	movs	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	0003      	movs	r3, r0
 800b8ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b0:	e07f      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	0011      	movs	r1, r2
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f000 fadf 	bl	800be7c <USBD_CtlError>
            err++;
 800b8be:	210b      	movs	r1, #11
 800b8c0:	187b      	adds	r3, r7, r1
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	187b      	adds	r3, r7, r1
 800b8c6:	3201      	adds	r2, #1
 800b8c8:	701a      	strb	r2, [r3, #0]
          break;
 800b8ca:	e072      	b.n	800b9b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	23ac      	movs	r3, #172	; 0xac
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	58d3      	ldr	r3, [r2, r3]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	23ac      	movs	r3, #172	; 0xac
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	58d3      	ldr	r3, [r2, r3]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	7c12      	ldrb	r2, [r2, #16]
 800b8e8:	2108      	movs	r1, #8
 800b8ea:	1879      	adds	r1, r7, r1
 800b8ec:	0010      	movs	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8f4:	e05d      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f000 fabd 	bl	800be7c <USBD_CtlError>
            err++;
 800b902:	210b      	movs	r1, #11
 800b904:	187b      	adds	r3, r7, r1
 800b906:	781a      	ldrb	r2, [r3, #0]
 800b908:	187b      	adds	r3, r7, r1
 800b90a:	3201      	adds	r2, #1
 800b90c:	701a      	strb	r2, [r3, #0]
          break;
 800b90e:	e050      	b.n	800b9b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	23ac      	movs	r3, #172	; 0xac
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	58d3      	ldr	r3, [r2, r3]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00d      	beq.n	800b93a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	23ac      	movs	r3, #172	; 0xac
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	58d3      	ldr	r3, [r2, r3]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7c12      	ldrb	r2, [r2, #16]
 800b92c:	2108      	movs	r1, #8
 800b92e:	1879      	adds	r1, r7, r1
 800b930:	0010      	movs	r0, r2
 800b932:	4798      	blx	r3
 800b934:	0003      	movs	r3, r0
 800b936:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b938:	e03b      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	0011      	movs	r1, r2
 800b940:	0018      	movs	r0, r3
 800b942:	f000 fa9b 	bl	800be7c <USBD_CtlError>
            err++;
 800b946:	210b      	movs	r1, #11
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	187b      	adds	r3, r7, r1
 800b94e:	3201      	adds	r2, #1
 800b950:	701a      	strb	r2, [r3, #0]
          break;
 800b952:	e02e      	b.n	800b9b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	23ac      	movs	r3, #172	; 0xac
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	58d3      	ldr	r3, [r2, r3]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	23ac      	movs	r3, #172	; 0xac
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	58d3      	ldr	r3, [r2, r3]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7c12      	ldrb	r2, [r2, #16]
 800b970:	2108      	movs	r1, #8
 800b972:	1879      	adds	r1, r7, r1
 800b974:	0010      	movs	r0, r2
 800b976:	4798      	blx	r3
 800b978:	0003      	movs	r3, r0
 800b97a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97c:	e019      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	0011      	movs	r1, r2
 800b984:	0018      	movs	r0, r3
 800b986:	f000 fa79 	bl	800be7c <USBD_CtlError>
            err++;
 800b98a:	210b      	movs	r1, #11
 800b98c:	187b      	adds	r3, r7, r1
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	187b      	adds	r3, r7, r1
 800b992:	3201      	adds	r2, #1
 800b994:	701a      	strb	r2, [r3, #0]
          break;
 800b996:	e00c      	b.n	800b9b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	0011      	movs	r1, r2
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f000 fa6c 	bl	800be7c <USBD_CtlError>
          err++;
 800b9a4:	210b      	movs	r1, #11
 800b9a6:	187b      	adds	r3, r7, r1
 800b9a8:	781a      	ldrb	r2, [r3, #0]
 800b9aa:	187b      	adds	r3, r7, r1
 800b9ac:	3201      	adds	r2, #1
 800b9ae:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b9b0:	e04b      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>
 800b9b2:	e04a      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7c1b      	ldrb	r3, [r3, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	23ad      	movs	r3, #173	; 0xad
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	58d3      	ldr	r3, [r2, r3]
 800b9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c6:	2208      	movs	r2, #8
 800b9c8:	18ba      	adds	r2, r7, r2
 800b9ca:	0010      	movs	r0, r2
 800b9cc:	4798      	blx	r3
 800b9ce:	0003      	movs	r3, r0
 800b9d0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9d2:	e03a      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	0011      	movs	r1, r2
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f000 fa4e 	bl	800be7c <USBD_CtlError>
        err++;
 800b9e0:	210b      	movs	r1, #11
 800b9e2:	187b      	adds	r3, r7, r1
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	187b      	adds	r3, r7, r1
 800b9e8:	3201      	adds	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]
      break;
 800b9ec:	e02d      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7c1b      	ldrb	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10f      	bne.n	800ba16 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	23ad      	movs	r3, #173	; 0xad
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	58d3      	ldr	r3, [r2, r3]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	2208      	movs	r2, #8
 800ba02:	18ba      	adds	r2, r7, r2
 800ba04:	0010      	movs	r0, r2
 800ba06:	4798      	blx	r3
 800ba08:	0003      	movs	r3, r0
 800ba0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	2207      	movs	r2, #7
 800ba12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba14:	e019      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	0011      	movs	r1, r2
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	f000 fa2d 	bl	800be7c <USBD_CtlError>
        err++;
 800ba22:	210b      	movs	r1, #11
 800ba24:	187b      	adds	r3, r7, r1
 800ba26:	781a      	ldrb	r2, [r3, #0]
 800ba28:	187b      	adds	r3, r7, r1
 800ba2a:	3201      	adds	r2, #1
 800ba2c:	701a      	strb	r2, [r3, #0]
      break;
 800ba2e:	e00c      	b.n	800ba4a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	0011      	movs	r1, r2
 800ba36:	0018      	movs	r0, r3
 800ba38:	f000 fa20 	bl	800be7c <USBD_CtlError>
      err++;
 800ba3c:	210b      	movs	r1, #11
 800ba3e:	187b      	adds	r3, r7, r1
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	187b      	adds	r3, r7, r1
 800ba44:	3201      	adds	r2, #1
 800ba46:	701a      	strb	r2, [r3, #0]
      break;
 800ba48:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800ba4a:	230b      	movs	r3, #11
 800ba4c:	18fb      	adds	r3, r7, r3
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d127      	bne.n	800baa4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba54:	2108      	movs	r1, #8
 800ba56:	187b      	adds	r3, r7, r1
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d019      	beq.n	800ba92 <USBD_GetDescriptor+0x342>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	88db      	ldrh	r3, [r3, #6]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d015      	beq.n	800ba92 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	88da      	ldrh	r2, [r3, #6]
 800ba6a:	187b      	adds	r3, r7, r1
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	1c18      	adds	r0, r3, #0
 800ba70:	1c11      	adds	r1, r2, #0
 800ba72:	b28a      	uxth	r2, r1
 800ba74:	b283      	uxth	r3, r0
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d900      	bls.n	800ba7c <USBD_GetDescriptor+0x32c>
 800ba7a:	1c01      	adds	r1, r0, #0
 800ba7c:	b28a      	uxth	r2, r1
 800ba7e:	2108      	movs	r1, #8
 800ba80:	187b      	adds	r3, r7, r1
 800ba82:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba84:	187b      	adds	r3, r7, r1
 800ba86:	881a      	ldrh	r2, [r3, #0]
 800ba88:	68f9      	ldr	r1, [r7, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f000 fa73 	bl	800bf78 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	88db      	ldrh	r3, [r3, #6]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	f000 fad5 	bl	800c04c <USBD_CtlSendStatus>
 800baa2:	e000      	b.n	800baa6 <USBD_GetDescriptor+0x356>
    return;
 800baa4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800baa6:	46bd      	mov	sp, r7
 800baa8:	b004      	add	sp, #16
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	0800d5cc 	.word	0x0800d5cc
 800bab0:	0800d5ec 	.word	0x0800d5ec

0800bab4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bab4:	b590      	push	{r4, r7, lr}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	889b      	ldrh	r3, [r3, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d13d      	bne.n	800bb42 <USBD_SetAddress+0x8e>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	88db      	ldrh	r3, [r3, #6]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d139      	bne.n	800bb42 <USBD_SetAddress+0x8e>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	885b      	ldrh	r3, [r3, #2]
 800bad2:	2b7f      	cmp	r3, #127	; 0x7f
 800bad4:	d835      	bhi.n	800bb42 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	885b      	ldrh	r3, [r3, #2]
 800bada:	b2da      	uxtb	r2, r3
 800badc:	230f      	movs	r3, #15
 800bade:	18fb      	adds	r3, r7, r3
 800bae0:	217f      	movs	r1, #127	; 0x7f
 800bae2:	400a      	ands	r2, r1
 800bae4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	23a7      	movs	r3, #167	; 0xa7
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	5cd3      	ldrb	r3, [r2, r3]
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d106      	bne.n	800bb00 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	0011      	movs	r1, r2
 800baf8:	0018      	movs	r0, r3
 800bafa:	f000 f9bf 	bl	800be7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bafe:	e027      	b.n	800bb50 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	240f      	movs	r4, #15
 800bb04:	193a      	adds	r2, r7, r4
 800bb06:	4914      	ldr	r1, [pc, #80]	; (800bb58 <USBD_SetAddress+0xa4>)
 800bb08:	7812      	ldrb	r2, [r2, #0]
 800bb0a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb0c:	193b      	adds	r3, r7, r4
 800bb0e:	781a      	ldrb	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	0011      	movs	r1, r2
 800bb14:	0018      	movs	r0, r3
 800bb16:	f000 ff25 	bl	800c964 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f000 fa95 	bl	800c04c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb22:	193b      	adds	r3, r7, r4
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	23a7      	movs	r3, #167	; 0xa7
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	2102      	movs	r1, #2
 800bb32:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb34:	e00c      	b.n	800bb50 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	23a7      	movs	r3, #167	; 0xa7
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb40:	e006      	b.n	800bb50 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	0011      	movs	r1, r2
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f000 f997 	bl	800be7c <USBD_CtlError>
  }
}
 800bb4e:	46c0      	nop			; (mov r8, r8)
 800bb50:	46c0      	nop			; (mov r8, r8)
 800bb52:	46bd      	mov	sp, r7
 800bb54:	b005      	add	sp, #20
 800bb56:	bd90      	pop	{r4, r7, pc}
 800bb58:	0000029e 	.word	0x0000029e

0800bb5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	885b      	ldrh	r3, [r3, #2]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	4b4c      	ldr	r3, [pc, #304]	; (800bca0 <USBD_SetConfig+0x144>)
 800bb6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb70:	4b4b      	ldr	r3, [pc, #300]	; (800bca0 <USBD_SetConfig+0x144>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d906      	bls.n	800bb86 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	0011      	movs	r1, r2
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f000 f97c 	bl	800be7c <USBD_CtlError>
 800bb84:	e088      	b.n	800bc98 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	23a7      	movs	r3, #167	; 0xa7
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	5cd3      	ldrb	r3, [r2, r3]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d002      	beq.n	800bb98 <USBD_SetConfig+0x3c>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d029      	beq.n	800bbea <USBD_SetConfig+0x8e>
 800bb96:	e071      	b.n	800bc7c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb98:	4b41      	ldr	r3, [pc, #260]	; (800bca0 <USBD_SetConfig+0x144>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d01f      	beq.n	800bbe0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bba0:	4b3f      	ldr	r3, [pc, #252]	; (800bca0 <USBD_SetConfig+0x144>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	001a      	movs	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	23a7      	movs	r3, #167	; 0xa7
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	2103      	movs	r1, #3
 800bbb2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bbb4:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <USBD_SetConfig+0x144>)
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	0011      	movs	r1, r2
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f7ff f8c6 	bl	800ad4e <USBD_SetClassConfig>
 800bbc2:	0003      	movs	r3, r0
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d106      	bne.n	800bbd6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	0011      	movs	r1, r2
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f000 f954 	bl	800be7c <USBD_CtlError>
            return;
 800bbd4:	e060      	b.n	800bc98 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f000 fa37 	bl	800c04c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbde:	e05b      	b.n	800bc98 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	f000 fa32 	bl	800c04c <USBD_CtlSendStatus>
        break;
 800bbe8:	e056      	b.n	800bc98 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bbea:	4b2d      	ldr	r3, [pc, #180]	; (800bca0 <USBD_SetConfig+0x144>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d115      	bne.n	800bc1e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	23a7      	movs	r3, #167	; 0xa7
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	2102      	movs	r1, #2
 800bbfa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800bbfc:	4b28      	ldr	r3, [pc, #160]	; (800bca0 <USBD_SetConfig+0x144>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	001a      	movs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bc06:	4b26      	ldr	r3, [pc, #152]	; (800bca0 <USBD_SetConfig+0x144>)
 800bc08:	781a      	ldrb	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	0011      	movs	r1, r2
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f7ff f8c4 	bl	800ad9c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	0018      	movs	r0, r3
 800bc18:	f000 fa18 	bl	800c04c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bc1c:	e03c      	b.n	800bc98 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800bc1e:	4b20      	ldr	r3, [pc, #128]	; (800bca0 <USBD_SetConfig+0x144>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	001a      	movs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d022      	beq.n	800bc72 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	0011      	movs	r1, r2
 800bc36:	0018      	movs	r0, r3
 800bc38:	f7ff f8b0 	bl	800ad9c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bc3c:	4b18      	ldr	r3, [pc, #96]	; (800bca0 <USBD_SetConfig+0x144>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	001a      	movs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <USBD_SetConfig+0x144>)
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	0011      	movs	r1, r2
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f7ff f87d 	bl	800ad4e <USBD_SetClassConfig>
 800bc54:	0003      	movs	r3, r0
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d106      	bne.n	800bc68 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	0011      	movs	r1, r2
 800bc60:	0018      	movs	r0, r3
 800bc62:	f000 f90b 	bl	800be7c <USBD_CtlError>
            return;
 800bc66:	e017      	b.n	800bc98 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f000 f9ee 	bl	800c04c <USBD_CtlSendStatus>
        break;
 800bc70:	e012      	b.n	800bc98 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	0018      	movs	r0, r3
 800bc76:	f000 f9e9 	bl	800c04c <USBD_CtlSendStatus>
        break;
 800bc7a:	e00d      	b.n	800bc98 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	0011      	movs	r1, r2
 800bc82:	0018      	movs	r0, r3
 800bc84:	f000 f8fa 	bl	800be7c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <USBD_SetConfig+0x144>)
 800bc8a:	781a      	ldrb	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	0011      	movs	r1, r2
 800bc90:	0018      	movs	r0, r3
 800bc92:	f7ff f883 	bl	800ad9c <USBD_ClrClassConfig>
        break;
 800bc96:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	b002      	add	sp, #8
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	46c0      	nop			; (mov r8, r8)
 800bca0:	20000264 	.word	0x20000264

0800bca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	88db      	ldrh	r3, [r3, #6]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d006      	beq.n	800bcc4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	0011      	movs	r1, r2
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f000 f8dd 	bl	800be7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcc2:	e026      	b.n	800bd12 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	23a7      	movs	r3, #167	; 0xa7
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	5cd3      	ldrb	r3, [r2, r3]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	dc02      	bgt.n	800bcd6 <USBD_GetConfig+0x32>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc03      	bgt.n	800bcdc <USBD_GetConfig+0x38>
 800bcd4:	e016      	b.n	800bd04 <USBD_GetConfig+0x60>
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d00c      	beq.n	800bcf4 <USBD_GetConfig+0x50>
 800bcda:	e013      	b.n	800bd04 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3308      	adds	r3, #8
 800bce6:	0019      	movs	r1, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	0018      	movs	r0, r3
 800bcee:	f000 f943 	bl	800bf78 <USBD_CtlSendData>
        break;
 800bcf2:	e00e      	b.n	800bd12 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	1d19      	adds	r1, r3, #4
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f000 f93b 	bl	800bf78 <USBD_CtlSendData>
        break;
 800bd02:	e006      	b.n	800bd12 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	0011      	movs	r1, r2
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	f000 f8b6 	bl	800be7c <USBD_CtlError>
        break;
 800bd10:	46c0      	nop			; (mov r8, r8)
}
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b002      	add	sp, #8
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	23a7      	movs	r3, #167	; 0xa7
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	5cd3      	ldrb	r3, [r2, r3]
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d822      	bhi.n	800bd78 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	88db      	ldrh	r3, [r3, #6]
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d006      	beq.n	800bd48 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	0011      	movs	r1, r2
 800bd40:	0018      	movs	r0, r3
 800bd42:	f000 f89b 	bl	800be7c <USBD_CtlError>
        break;
 800bd46:	e01e      	b.n	800bd86 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	23a9      	movs	r3, #169	; 0xa9
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	58d3      	ldr	r3, [r2, r3]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d005      	beq.n	800bd66 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	330c      	adds	r3, #12
 800bd6a:	0019      	movs	r1, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	0018      	movs	r0, r3
 800bd72:	f000 f901 	bl	800bf78 <USBD_CtlSendData>
      break;
 800bd76:	e006      	b.n	800bd86 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	0011      	movs	r1, r2
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f000 f87c 	bl	800be7c <USBD_CtlError>
      break;
 800bd84:	46c0      	nop			; (mov r8, r8)
  }
}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	b002      	add	sp, #8
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	885b      	ldrh	r3, [r3, #2]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d108      	bne.n	800bdb2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	23a9      	movs	r3, #169	; 0xa9
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	2101      	movs	r1, #1
 800bda8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	0018      	movs	r0, r3
 800bdae:	f000 f94d 	bl	800c04c <USBD_CtlSendStatus>
  }
}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	b002      	add	sp, #8
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	23a7      	movs	r3, #167	; 0xa7
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	5cd3      	ldrb	r3, [r2, r3]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d80d      	bhi.n	800bdee <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d110      	bne.n	800bdfc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	23a9      	movs	r3, #169	; 0xa9
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	2100      	movs	r1, #0
 800bde2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	0018      	movs	r0, r3
 800bde8:	f000 f930 	bl	800c04c <USBD_CtlSendStatus>
      }
      break;
 800bdec:	e006      	b.n	800bdfc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	0011      	movs	r1, r2
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	f000 f841 	bl	800be7c <USBD_CtlError>
      break;
 800bdfa:	e000      	b.n	800bdfe <USBD_ClrFeature+0x44>
      break;
 800bdfc:	46c0      	nop			; (mov r8, r8)
  }
}
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	46bd      	mov	sp, r7
 800be02:	b002      	add	sp, #8
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781a      	ldrb	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	785a      	ldrb	r2, [r3, #1]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3302      	adds	r3, #2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	b29a      	uxth	r2, r3
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	3303      	adds	r3, #3
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	021b      	lsls	r3, r3, #8
 800be32:	b29b      	uxth	r3, r3
 800be34:	18d3      	adds	r3, r2, r3
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	3304      	adds	r3, #4
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b29a      	uxth	r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	3305      	adds	r3, #5
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	b29b      	uxth	r3, r3
 800be50:	18d3      	adds	r3, r2, r3
 800be52:	b29a      	uxth	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	3306      	adds	r3, #6
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	3307      	adds	r3, #7
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	b29b      	uxth	r3, r3
 800be68:	021b      	lsls	r3, r3, #8
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	18d3      	adds	r3, r2, r3
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	80da      	strh	r2, [r3, #6]

}
 800be74:	46c0      	nop			; (mov r8, r8)
 800be76:	46bd      	mov	sp, r7
 800be78:	b002      	add	sp, #8
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2180      	movs	r1, #128	; 0x80
 800be8a:	0018      	movs	r0, r3
 800be8c:	f000 fce3 	bl	800c856 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2100      	movs	r1, #0
 800be94:	0018      	movs	r0, r3
 800be96:	f000 fcde 	bl	800c856 <USBD_LL_StallEP>
}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	46bd      	mov	sp, r7
 800be9e:	b002      	add	sp, #8
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bea2:	b590      	push	{r4, r7, lr}
 800bea4:	b087      	sub	sp, #28
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800beae:	2417      	movs	r4, #23
 800beb0:	193b      	adds	r3, r7, r4
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d03c      	beq.n	800bf36 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	0018      	movs	r0, r3
 800bec0:	f000 f83d 	bl	800bf3e <USBD_GetLen>
 800bec4:	0003      	movs	r3, r0
 800bec6:	3301      	adds	r3, #1
 800bec8:	b29b      	uxth	r3, r3
 800beca:	18db      	adds	r3, r3, r3
 800becc:	b29a      	uxth	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bed2:	193b      	adds	r3, r7, r4
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	193a      	adds	r2, r7, r4
 800bed8:	1c59      	adds	r1, r3, #1
 800beda:	7011      	strb	r1, [r2, #0]
 800bedc:	001a      	movs	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	189b      	adds	r3, r3, r2
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	7812      	ldrb	r2, [r2, #0]
 800bee6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bee8:	193b      	adds	r3, r7, r4
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	193a      	adds	r2, r7, r4
 800beee:	1c59      	adds	r1, r3, #1
 800bef0:	7011      	strb	r1, [r2, #0]
 800bef2:	001a      	movs	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	189b      	adds	r3, r3, r2
 800bef8:	2203      	movs	r2, #3
 800befa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800befc:	e017      	b.n	800bf2e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	60fa      	str	r2, [r7, #12]
 800bf04:	2417      	movs	r4, #23
 800bf06:	193a      	adds	r2, r7, r4
 800bf08:	7812      	ldrb	r2, [r2, #0]
 800bf0a:	1939      	adds	r1, r7, r4
 800bf0c:	1c50      	adds	r0, r2, #1
 800bf0e:	7008      	strb	r0, [r1, #0]
 800bf10:	0011      	movs	r1, r2
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	1852      	adds	r2, r2, r1
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bf1a:	193b      	adds	r3, r7, r4
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	193a      	adds	r2, r7, r4
 800bf20:	1c59      	adds	r1, r3, #1
 800bf22:	7011      	strb	r1, [r2, #0]
 800bf24:	001a      	movs	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	189b      	adds	r3, r3, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1e3      	bne.n	800befe <USBD_GetString+0x5c>
    }
  }
}
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	b007      	add	sp, #28
 800bf3c:	bd90      	pop	{r4, r7, pc}

0800bf3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf46:	230f      	movs	r3, #15
 800bf48:	18fb      	adds	r3, r7, r3
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bf4e:	e008      	b.n	800bf62 <USBD_GetLen+0x24>
  {
    len++;
 800bf50:	210f      	movs	r1, #15
 800bf52:	187b      	adds	r3, r7, r1
 800bf54:	781a      	ldrb	r2, [r3, #0]
 800bf56:	187b      	adds	r3, r7, r1
 800bf58:	3201      	adds	r2, #1
 800bf5a:	701a      	strb	r2, [r3, #0]
    buf++;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1f2      	bne.n	800bf50 <USBD_GetLen+0x12>
  }

  return len;
 800bf6a:	230f      	movs	r3, #15
 800bf6c:	18fb      	adds	r3, r7, r3
 800bf6e:	781b      	ldrb	r3, [r3, #0]
}
 800bf70:	0018      	movs	r0, r3
 800bf72:	46bd      	mov	sp, r7
 800bf74:	b004      	add	sp, #16
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	1dbb      	adds	r3, r7, #6
 800bf84:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	23a5      	movs	r3, #165	; 0xa5
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	2102      	movs	r1, #2
 800bf8e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bf90:	1dbb      	adds	r3, r7, #6
 800bf92:	881a      	ldrh	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bf98:	1dbb      	adds	r3, r7, #6
 800bf9a:	881a      	ldrh	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfa0:	1dbb      	adds	r3, r7, #6
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	f000 fd06 	bl	800c9ba <USBD_LL_Transmit>

  return USBD_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	0018      	movs	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	b004      	add	sp, #16
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	1dbb      	adds	r3, r7, #6
 800bfc4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfc6:	1dbb      	adds	r3, r7, #6
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	2100      	movs	r1, #0
 800bfd0:	f000 fcf3 	bl	800c9ba <USBD_LL_Transmit>

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	b004      	add	sp, #16
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	1dbb      	adds	r3, r7, #6
 800bfea:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	23a5      	movs	r3, #165	; 0xa5
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	2103      	movs	r1, #3
 800bff4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bff6:	1dbb      	adds	r3, r7, #6
 800bff8:	8819      	ldrh	r1, [r3, #0]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	23ae      	movs	r3, #174	; 0xae
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c002:	1dbb      	adds	r3, r7, #6
 800c004:	8819      	ldrh	r1, [r3, #0]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	23b0      	movs	r3, #176	; 0xb0
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c00e:	1dbb      	adds	r3, r7, #6
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	2100      	movs	r1, #0
 800c018:	f000 fd06 	bl	800ca28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	0018      	movs	r0, r3
 800c020:	46bd      	mov	sp, r7
 800c022:	b004      	add	sp, #16
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	1dbb      	adds	r3, r7, #6
 800c032:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c034:	1dbb      	adds	r3, r7, #6
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	2100      	movs	r1, #0
 800c03e:	f000 fcf3 	bl	800ca28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	0018      	movs	r0, r3
 800c046:	46bd      	mov	sp, r7
 800c048:	b004      	add	sp, #16
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	23a5      	movs	r3, #165	; 0xa5
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	2104      	movs	r1, #4
 800c05c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	2300      	movs	r3, #0
 800c062:	2200      	movs	r2, #0
 800c064:	2100      	movs	r1, #0
 800c066:	f000 fca8 	bl	800c9ba <USBD_LL_Transmit>

  return USBD_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	0018      	movs	r0, r3
 800c06e:	46bd      	mov	sp, r7
 800c070:	b002      	add	sp, #8
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	23a5      	movs	r3, #165	; 0xa5
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	2105      	movs	r1, #5
 800c084:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	2300      	movs	r3, #0
 800c08a:	2200      	movs	r2, #0
 800c08c:	2100      	movs	r1, #0
 800c08e:	f000 fccb 	bl	800ca28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	0018      	movs	r0, r3
 800c096:	46bd      	mov	sp, r7
 800c098:	b002      	add	sp, #8
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0a0:	4914      	ldr	r1, [pc, #80]	; (800c0f4 <MX_USB_DEVICE_Init+0x58>)
 800c0a2:	4b15      	ldr	r3, [pc, #84]	; (800c0f8 <MX_USB_DEVICE_Init+0x5c>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	0018      	movs	r0, r3
 800c0a8:	f7fe fdea 	bl	800ac80 <USBD_Init>
 800c0ac:	1e03      	subs	r3, r0, #0
 800c0ae:	d001      	beq.n	800c0b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c0b0:	f7f5 fcf0 	bl	8001a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0b4:	4a11      	ldr	r2, [pc, #68]	; (800c0fc <MX_USB_DEVICE_Init+0x60>)
 800c0b6:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <MX_USB_DEVICE_Init+0x5c>)
 800c0b8:	0011      	movs	r1, r2
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f7fe fe11 	bl	800ace2 <USBD_RegisterClass>
 800c0c0:	1e03      	subs	r3, r0, #0
 800c0c2:	d001      	beq.n	800c0c8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c0c4:	f7f5 fce6 	bl	8001a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0c8:	4a0d      	ldr	r2, [pc, #52]	; (800c100 <MX_USB_DEVICE_Init+0x64>)
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <MX_USB_DEVICE_Init+0x5c>)
 800c0cc:	0011      	movs	r1, r2
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f7fe fd26 	bl	800ab20 <USBD_CDC_RegisterInterface>
 800c0d4:	1e03      	subs	r3, r0, #0
 800c0d6:	d001      	beq.n	800c0dc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c0d8:	f7f5 fcdc 	bl	8001a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <MX_USB_DEVICE_Init+0x5c>)
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f7fe fe1f 	bl	800ad22 <USBD_Start>
 800c0e4:	1e03      	subs	r3, r0, #0
 800c0e6:	d001      	beq.n	800c0ec <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c0e8:	f7f5 fcd4 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0ec:	46c0      	nop			; (mov r8, r8)
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	2000012c 	.word	0x2000012c
 800c0f8:	200006a0 	.word	0x200006a0
 800c0fc:	20000018 	.word	0x20000018
 800c100:	2000011c 	.word	0x2000011c

0800c104 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c108:	4907      	ldr	r1, [pc, #28]	; (800c128 <CDC_Init_FS+0x24>)
 800c10a:	4b08      	ldr	r3, [pc, #32]	; (800c12c <CDC_Init_FS+0x28>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	0018      	movs	r0, r3
 800c110:	f7fe fd21 	bl	800ab56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c114:	4a06      	ldr	r2, [pc, #24]	; (800c130 <CDC_Init_FS+0x2c>)
 800c116:	4b05      	ldr	r3, [pc, #20]	; (800c12c <CDC_Init_FS+0x28>)
 800c118:	0011      	movs	r1, r2
 800c11a:	0018      	movs	r0, r3
 800c11c:	f7fe fd37 	bl	800ab8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c120:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c122:	0018      	movs	r0, r3
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20000d4c 	.word	0x20000d4c
 800c12c:	200006a0 	.word	0x200006a0
 800c130:	20000964 	.word	0x20000964

0800c134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c13a:	0018      	movs	r0, r3
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6039      	str	r1, [r7, #0]
 800c148:	0011      	movs	r1, r2
 800c14a:	1dfb      	adds	r3, r7, #7
 800c14c:	1c02      	adds	r2, r0, #0
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	1d3b      	adds	r3, r7, #4
 800c152:	1c0a      	adds	r2, r1, #0
 800c154:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c156:	1dfb      	adds	r3, r7, #7
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b23      	cmp	r3, #35	; 0x23
 800c15c:	d804      	bhi.n	800c168 <CDC_Control_FS+0x28>
 800c15e:	009a      	lsls	r2, r3, #2
 800c160:	4b04      	ldr	r3, [pc, #16]	; (800c174 <CDC_Control_FS+0x34>)
 800c162:	18d3      	adds	r3, r2, r3
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c168:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800c16a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c16c:	0018      	movs	r0, r3
 800c16e:	46bd      	mov	sp, r7
 800c170:	b002      	add	sp, #8
 800c172:	bd80      	pop	{r7, pc}
 800c174:	0800d604 	.word	0x0800d604

0800c178 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800c182:	4b18      	ldr	r3, [pc, #96]	; (800c1e4 <CDC_Receive_FS+0x6c>)
 800c184:	7a1a      	ldrb	r2, [r3, #8]
 800c186:	2101      	movs	r1, #1
 800c188:	430a      	orrs	r2, r1
 800c18a:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800c18c:	230f      	movs	r3, #15
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	e00f      	b.n	800c1b6 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <CDC_Receive_FS+0x70>)
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	240f      	movs	r4, #15
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	18d3      	adds	r3, r2, r3
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	0019      	movs	r1, r3
 800c1a8:	f7f5 fcc4 	bl	8001b34 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800c1ac:	193b      	adds	r3, r7, r4
 800c1ae:	781a      	ldrb	r2, [r3, #0]
 800c1b0:	193b      	adds	r3, r7, r4
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	701a      	strb	r2, [r3, #0]
 800c1b6:	230f      	movs	r3, #15
 800c1b8:	18fb      	adds	r3, r7, r3
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d3e8      	bcc.n	800c196 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <CDC_Receive_FS+0x74>)
 800c1c8:	0011      	movs	r1, r2
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	f7fe fcdf 	bl	800ab8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1d0:	4b06      	ldr	r3, [pc, #24]	; (800c1ec <CDC_Receive_FS+0x74>)
 800c1d2:	0018      	movs	r0, r3
 800c1d4:	f7fe fd26 	bl	800ac24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c1d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1da:	0018      	movs	r0, r3
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	b005      	add	sp, #20
 800c1e0:	bd90      	pop	{r4, r7, pc}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	20000630 	.word	0x20000630
 800c1e8:	20001134 	.word	0x20001134
 800c1ec:	200006a0 	.word	0x200006a0

0800c1f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	000a      	movs	r2, r1
 800c1fa:	1cbb      	adds	r3, r7, #2
 800c1fc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c1fe:	230f      	movs	r3, #15
 800c200:	18fb      	adds	r3, r7, r3
 800c202:	2200      	movs	r2, #0
 800c204:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c206:	4a11      	ldr	r2, [pc, #68]	; (800c24c <CDC_Transmit_FS+0x5c>)
 800c208:	23ae      	movs	r3, #174	; 0xae
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	58d3      	ldr	r3, [r2, r3]
 800c20e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	2385      	movs	r3, #133	; 0x85
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	58d3      	ldr	r3, [r2, r3]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e010      	b.n	800c242 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c220:	1cbb      	adds	r3, r7, #2
 800c222:	881a      	ldrh	r2, [r3, #0]
 800c224:	6879      	ldr	r1, [r7, #4]
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <CDC_Transmit_FS+0x5c>)
 800c228:	0018      	movs	r0, r3
 800c22a:	f7fe fc94 	bl	800ab56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c22e:	250f      	movs	r5, #15
 800c230:	197c      	adds	r4, r7, r5
 800c232:	4b06      	ldr	r3, [pc, #24]	; (800c24c <CDC_Transmit_FS+0x5c>)
 800c234:	0018      	movs	r0, r3
 800c236:	f7fe fcbe 	bl	800abb6 <USBD_CDC_TransmitPacket>
 800c23a:	0003      	movs	r3, r0
 800c23c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c23e:	197b      	adds	r3, r7, r5
 800c240:	781b      	ldrb	r3, [r3, #0]
}
 800c242:	0018      	movs	r0, r3
 800c244:	46bd      	mov	sp, r7
 800c246:	b004      	add	sp, #16
 800c248:	bdb0      	pop	{r4, r5, r7, pc}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	200006a0 	.word	0x200006a0

0800c250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	0002      	movs	r2, r0
 800c258:	6039      	str	r1, [r7, #0]
 800c25a:	1dfb      	adds	r3, r7, #7
 800c25c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2212      	movs	r2, #18
 800c262:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c266:	0018      	movs	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	b002      	add	sp, #8
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	46c0      	nop			; (mov r8, r8)
 800c270:	20000148 	.word	0x20000148

0800c274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	0002      	movs	r2, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	1dfb      	adds	r3, r7, #7
 800c280:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2204      	movs	r2, #4
 800c286:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c28a:	0018      	movs	r0, r3
 800c28c:	46bd      	mov	sp, r7
 800c28e:	b002      	add	sp, #8
 800c290:	bd80      	pop	{r7, pc}
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	2000015c 	.word	0x2000015c

0800c298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	0002      	movs	r2, r0
 800c2a0:	6039      	str	r1, [r7, #0]
 800c2a2:	1dfb      	adds	r3, r7, #7
 800c2a4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c2a6:	1dfb      	adds	r3, r7, #7
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	4908      	ldr	r1, [pc, #32]	; (800c2d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c2b2:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <USBD_FS_ProductStrDescriptor+0x40>)
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f7ff fdf4 	bl	800bea2 <USBD_GetString>
 800c2ba:	e005      	b.n	800c2c8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	4905      	ldr	r1, [pc, #20]	; (800c2d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c2c0:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <USBD_FS_ProductStrDescriptor+0x40>)
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f7ff fded 	bl	800bea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2c8:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	b002      	add	sp, #8
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	46c0      	nop			; (mov r8, r8)
 800c2d4:	20001138 	.word	0x20001138
 800c2d8:	0800d4b4 	.word	0x0800d4b4

0800c2dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	0002      	movs	r2, r0
 800c2e4:	6039      	str	r1, [r7, #0]
 800c2e6:	1dfb      	adds	r3, r7, #7
 800c2e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	4904      	ldr	r1, [pc, #16]	; (800c300 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2ee:	4b05      	ldr	r3, [pc, #20]	; (800c304 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f7ff fdd6 	bl	800bea2 <USBD_GetString>
  return USBD_StrDesc;
 800c2f6:	4b02      	ldr	r3, [pc, #8]	; (800c300 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b002      	add	sp, #8
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20001138 	.word	0x20001138
 800c304:	0800d4cc 	.word	0x0800d4cc

0800c308 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	0002      	movs	r2, r0
 800c310:	6039      	str	r1, [r7, #0]
 800c312:	1dfb      	adds	r3, r7, #7
 800c314:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	221a      	movs	r2, #26
 800c31a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c31c:	f000 f84c 	bl	800c3b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c320:	4b02      	ldr	r3, [pc, #8]	; (800c32c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c322:	0018      	movs	r0, r3
 800c324:	46bd      	mov	sp, r7
 800c326:	b002      	add	sp, #8
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	46c0      	nop			; (mov r8, r8)
 800c32c:	20000160 	.word	0x20000160

0800c330 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	0002      	movs	r2, r0
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	1dfb      	adds	r3, r7, #7
 800c33c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c33e:	1dfb      	adds	r3, r7, #7
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	4908      	ldr	r1, [pc, #32]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c34a:	4b09      	ldr	r3, [pc, #36]	; (800c370 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c34c:	0018      	movs	r0, r3
 800c34e:	f7ff fda8 	bl	800bea2 <USBD_GetString>
 800c352:	e005      	b.n	800c360 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	4905      	ldr	r1, [pc, #20]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c35a:	0018      	movs	r0, r3
 800c35c:	f7ff fda1 	bl	800bea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c362:	0018      	movs	r0, r3
 800c364:	46bd      	mov	sp, r7
 800c366:	b002      	add	sp, #8
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	20001138 	.word	0x20001138
 800c370:	0800d4e0 	.word	0x0800d4e0

0800c374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	0002      	movs	r2, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	1dfb      	adds	r3, r7, #7
 800c380:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c382:	1dfb      	adds	r3, r7, #7
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	4908      	ldr	r1, [pc, #32]	; (800c3b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c38e:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c390:	0018      	movs	r0, r3
 800c392:	f7ff fd86 	bl	800bea2 <USBD_GetString>
 800c396:	e005      	b.n	800c3a4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	4905      	ldr	r1, [pc, #20]	; (800c3b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c39e:	0018      	movs	r0, r3
 800c3a0:	f7ff fd7f 	bl	800bea2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3a4:	4b02      	ldr	r3, [pc, #8]	; (800c3b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	b002      	add	sp, #8
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	20001138 	.word	0x20001138
 800c3b4:	0800d4ec 	.word	0x0800d4ec

0800c3b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3be:	4b10      	ldr	r3, [pc, #64]	; (800c400 <Get_SerialNum+0x48>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3c4:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <Get_SerialNum+0x4c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3ca:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <Get_SerialNum+0x50>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	18d3      	adds	r3, r2, r3
 800c3d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3de:	490b      	ldr	r1, [pc, #44]	; (800c40c <Get_SerialNum+0x54>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2208      	movs	r2, #8
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	f000 f815 	bl	800c414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3ea:	4909      	ldr	r1, [pc, #36]	; (800c410 <Get_SerialNum+0x58>)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f000 f80f 	bl	800c414 <IntToUnicode>
  }
}
 800c3f6:	46c0      	nop			; (mov r8, r8)
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	b004      	add	sp, #16
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	1ffff7ac 	.word	0x1ffff7ac
 800c404:	1ffff7b0 	.word	0x1ffff7b0
 800c408:	1ffff7b4 	.word	0x1ffff7b4
 800c40c:	20000162 	.word	0x20000162
 800c410:	20000172 	.word	0x20000172

0800c414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	1dfb      	adds	r3, r7, #7
 800c420:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c422:	2117      	movs	r1, #23
 800c424:	187b      	adds	r3, r7, r1
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c42a:	187b      	adds	r3, r7, r1
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	e02f      	b.n	800c492 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	0f1b      	lsrs	r3, r3, #28
 800c436:	2b09      	cmp	r3, #9
 800c438:	d80d      	bhi.n	800c456 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	0f1b      	lsrs	r3, r3, #28
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	2317      	movs	r3, #23
 800c442:	18fb      	adds	r3, r7, r3
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	0019      	movs	r1, r3
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	185b      	adds	r3, r3, r1
 800c44e:	3230      	adds	r2, #48	; 0x30
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e00c      	b.n	800c470 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	0f1b      	lsrs	r3, r3, #28
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	2317      	movs	r3, #23
 800c45e:	18fb      	adds	r3, r7, r3
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	0019      	movs	r1, r3
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	185b      	adds	r3, r3, r1
 800c46a:	3237      	adds	r2, #55	; 0x37
 800c46c:	b2d2      	uxtb	r2, r2
 800c46e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c476:	2117      	movs	r1, #23
 800c478:	187b      	adds	r3, r7, r1
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	3301      	adds	r3, #1
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	18d3      	adds	r3, r2, r3
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c488:	187b      	adds	r3, r7, r1
 800c48a:	781a      	ldrb	r2, [r3, #0]
 800c48c:	187b      	adds	r3, r7, r1
 800c48e:	3201      	adds	r2, #1
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	2317      	movs	r3, #23
 800c494:	18fa      	adds	r2, r7, r3
 800c496:	1dfb      	adds	r3, r7, #7
 800c498:	7812      	ldrb	r2, [r2, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d3c8      	bcc.n	800c432 <IntToUnicode+0x1e>
  }
}
 800c4a0:	46c0      	nop			; (mov r8, r8)
 800c4a2:	46c0      	nop			; (mov r8, r8)
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	b006      	add	sp, #24
 800c4a8:	bd80      	pop	{r7, pc}
	...

0800c4ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <HAL_PCD_MspInit+0x48>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d115      	bne.n	800c4ea <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c4be:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <HAL_PCD_MspInit+0x4c>)
 800c4c0:	69da      	ldr	r2, [r3, #28]
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <HAL_PCD_MspInit+0x4c>)
 800c4c4:	2180      	movs	r1, #128	; 0x80
 800c4c6:	0409      	lsls	r1, r1, #16
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	61da      	str	r2, [r3, #28]
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <HAL_PCD_MspInit+0x4c>)
 800c4ce:	69da      	ldr	r2, [r3, #28]
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	041b      	lsls	r3, r3, #16
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2100      	movs	r1, #0
 800c4de:	201f      	movs	r0, #31
 800c4e0:	f7f6 ffc2 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c4e4:	201f      	movs	r0, #31
 800c4e6:	f7f6 ffd4 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	b004      	add	sp, #16
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	46c0      	nop			; (mov r8, r8)
 800c4f4:	40005c00 	.word	0x40005c00
 800c4f8:	40021000 	.word	0x40021000

0800c4fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	23bc      	movs	r3, #188	; 0xbc
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	58d2      	ldr	r2, [r2, r3]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	21ac      	movs	r1, #172	; 0xac
 800c510:	0089      	lsls	r1, r1, #2
 800c512:	468c      	mov	ip, r1
 800c514:	4463      	add	r3, ip
 800c516:	0019      	movs	r1, r3
 800c518:	0010      	movs	r0, r2
 800c51a:	f7fe fc55 	bl	800adc8 <USBD_LL_SetupStage>
}
 800c51e:	46c0      	nop			; (mov r8, r8)
 800c520:	46bd      	mov	sp, r7
 800c522:	b002      	add	sp, #8
 800c524:	bd80      	pop	{r7, pc}

0800c526 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c526:	b590      	push	{r4, r7, lr}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	000a      	movs	r2, r1
 800c530:	1cfb      	adds	r3, r7, #3
 800c532:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	23bc      	movs	r3, #188	; 0xbc
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	58d4      	ldr	r4, [r2, r3]
 800c53c:	1cfb      	adds	r3, r7, #3
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	23be      	movs	r3, #190	; 0xbe
 800c544:	0059      	lsls	r1, r3, #1
 800c546:	0013      	movs	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	189b      	adds	r3, r3, r2
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	18c3      	adds	r3, r0, r3
 800c550:	185b      	adds	r3, r3, r1
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	1cfb      	adds	r3, r7, #3
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	0019      	movs	r1, r3
 800c55a:	0020      	movs	r0, r4
 800c55c:	f7fe fc92 	bl	800ae84 <USBD_LL_DataOutStage>
}
 800c560:	46c0      	nop			; (mov r8, r8)
 800c562:	46bd      	mov	sp, r7
 800c564:	b003      	add	sp, #12
 800c566:	bd90      	pop	{r4, r7, pc}

0800c568 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	000a      	movs	r2, r1
 800c572:	1cfb      	adds	r3, r7, #3
 800c574:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	23bc      	movs	r3, #188	; 0xbc
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	58d0      	ldr	r0, [r2, r3]
 800c57e:	1cfb      	adds	r3, r7, #3
 800c580:	781a      	ldrb	r2, [r3, #0]
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	0013      	movs	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	189b      	adds	r3, r3, r2
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	18cb      	adds	r3, r1, r3
 800c58e:	333c      	adds	r3, #60	; 0x3c
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	1cfb      	adds	r3, r7, #3
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	0019      	movs	r1, r3
 800c598:	f7fe fcf6 	bl	800af88 <USBD_LL_DataInStage>
}
 800c59c:	46c0      	nop			; (mov r8, r8)
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b002      	add	sp, #8
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	23bc      	movs	r3, #188	; 0xbc
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	58d3      	ldr	r3, [r2, r3]
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f7fe fe2d 	bl	800b214 <USBD_LL_SOF>
}
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	b002      	add	sp, #8
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5ca:	230f      	movs	r3, #15
 800c5cc:	18fb      	adds	r3, r7, r3
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d001      	beq.n	800c5de <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c5da:	f7f5 fa5b 	bl	8001a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	23bc      	movs	r3, #188	; 0xbc
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	58d2      	ldr	r2, [r2, r3]
 800c5e6:	230f      	movs	r3, #15
 800c5e8:	18fb      	adds	r3, r7, r3
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	0019      	movs	r1, r3
 800c5ee:	0010      	movs	r0, r2
 800c5f0:	f7fe fdcf 	bl	800b192 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	23bc      	movs	r3, #188	; 0xbc
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	58d3      	ldr	r3, [r2, r3]
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f7fe fd80 	bl	800b102 <USBD_LL_Reset>
}
 800c602:	46c0      	nop			; (mov r8, r8)
 800c604:	46bd      	mov	sp, r7
 800c606:	b004      	add	sp, #16
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	23bc      	movs	r3, #188	; 0xbc
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	58d3      	ldr	r3, [r2, r3]
 800c61c:	0018      	movs	r0, r3
 800c61e:	f7fe fdc9 	bl	800b1b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <HAL_PCD_SuspendCallback+0x34>)
 800c62c:	691a      	ldr	r2, [r3, #16]
 800c62e:	4b04      	ldr	r3, [pc, #16]	; (800c640 <HAL_PCD_SuspendCallback+0x34>)
 800c630:	2106      	movs	r1, #6
 800c632:	430a      	orrs	r2, r1
 800c634:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c636:	46c0      	nop			; (mov r8, r8)
 800c638:	46bd      	mov	sp, r7
 800c63a:	b002      	add	sp, #8
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	46c0      	nop			; (mov r8, r8)
 800c640:	e000ed00 	.word	0xe000ed00

0800c644 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d007      	beq.n	800c664 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <HAL_PCD_ResumeCallback+0x38>)
 800c656:	691a      	ldr	r2, [r3, #16]
 800c658:	4b08      	ldr	r3, [pc, #32]	; (800c67c <HAL_PCD_ResumeCallback+0x38>)
 800c65a:	2106      	movs	r1, #6
 800c65c:	438a      	bics	r2, r1
 800c65e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c660:	f000 fa44 	bl	800caec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	23bc      	movs	r3, #188	; 0xbc
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	58d3      	ldr	r3, [r2, r3]
 800c66c:	0018      	movs	r0, r3
 800c66e:	f7fe fdb9 	bl	800b1e4 <USBD_LL_Resume>
}
 800c672:	46c0      	nop			; (mov r8, r8)
 800c674:	46bd      	mov	sp, r7
 800c676:	b002      	add	sp, #8
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	46c0      	nop			; (mov r8, r8)
 800c67c:	e000ed00 	.word	0xe000ed00

0800c680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c688:	4a2d      	ldr	r2, [pc, #180]	; (800c740 <USBD_LL_Init+0xc0>)
 800c68a:	23bc      	movs	r3, #188	; 0xbc
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	23b0      	movs	r3, #176	; 0xb0
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4929      	ldr	r1, [pc, #164]	; (800c740 <USBD_LL_Init+0xc0>)
 800c69a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c69c:	4b28      	ldr	r3, [pc, #160]	; (800c740 <USBD_LL_Init+0xc0>)
 800c69e:	4a29      	ldr	r2, [pc, #164]	; (800c744 <USBD_LL_Init+0xc4>)
 800c6a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c6a2:	4b27      	ldr	r3, [pc, #156]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6a4:	2208      	movs	r2, #8
 800c6a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c6a8:	4b25      	ldr	r3, [pc, #148]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6ae:	4b24      	ldr	r3, [pc, #144]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c6b4:	4b22      	ldr	r3, [pc, #136]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c6ba:	4b21      	ldr	r3, [pc, #132]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c6c0:	4b1f      	ldr	r3, [pc, #124]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c6c6:	4b1e      	ldr	r3, [pc, #120]	; (800c740 <USBD_LL_Init+0xc0>)
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f7f7 f967 	bl	800399c <HAL_PCD_Init>
 800c6ce:	1e03      	subs	r3, r0, #0
 800c6d0:	d001      	beq.n	800c6d6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c6d2:	f7f5 f9df 	bl	8001a94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	23b0      	movs	r3, #176	; 0xb0
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	58d0      	ldr	r0, [r2, r3]
 800c6de:	2318      	movs	r3, #24
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	f7f8 ff48 	bl	8005578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	23b0      	movs	r3, #176	; 0xb0
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	58d0      	ldr	r0, [r2, r3]
 800c6f0:	2358      	movs	r3, #88	; 0x58
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2180      	movs	r1, #128	; 0x80
 800c6f6:	f7f8 ff3f 	bl	8005578 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	23b0      	movs	r3, #176	; 0xb0
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	58d0      	ldr	r0, [r2, r3]
 800c702:	23c0      	movs	r3, #192	; 0xc0
 800c704:	2200      	movs	r2, #0
 800c706:	2181      	movs	r1, #129	; 0x81
 800c708:	f7f8 ff36 	bl	8005578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	23b0      	movs	r3, #176	; 0xb0
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	58d0      	ldr	r0, [r2, r3]
 800c714:	2388      	movs	r3, #136	; 0x88
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	2200      	movs	r2, #0
 800c71a:	2101      	movs	r1, #1
 800c71c:	f7f8 ff2c 	bl	8005578 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	23b0      	movs	r3, #176	; 0xb0
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	58d0      	ldr	r0, [r2, r3]
 800c728:	2380      	movs	r3, #128	; 0x80
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	2200      	movs	r2, #0
 800c72e:	2182      	movs	r1, #130	; 0x82
 800c730:	f7f8 ff22 	bl	8005578 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b002      	add	sp, #8
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	46c0      	nop			; (mov r8, r8)
 800c740:	20001338 	.word	0x20001338
 800c744:	40005c00 	.word	0x40005c00

0800c748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c750:	210f      	movs	r1, #15
 800c752:	187b      	adds	r3, r7, r1
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c758:	260e      	movs	r6, #14
 800c75a:	19bb      	adds	r3, r7, r6
 800c75c:	2200      	movs	r2, #0
 800c75e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	23b0      	movs	r3, #176	; 0xb0
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	58d3      	ldr	r3, [r2, r3]
 800c768:	000d      	movs	r5, r1
 800c76a:	187c      	adds	r4, r7, r1
 800c76c:	0018      	movs	r0, r3
 800c76e:	f7f7 fa25 	bl	8003bbc <HAL_PCD_Start>
 800c772:	0003      	movs	r3, r0
 800c774:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c776:	19bc      	adds	r4, r7, r6
 800c778:	197b      	adds	r3, r7, r5
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	0018      	movs	r0, r3
 800c77e:	f000 f9bc 	bl	800cafa <USBD_Get_USB_Status>
 800c782:	0003      	movs	r3, r0
 800c784:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c786:	19bb      	adds	r3, r7, r6
 800c788:	781b      	ldrb	r3, [r3, #0]
}
 800c78a:	0018      	movs	r0, r3
 800c78c:	46bd      	mov	sp, r7
 800c78e:	b005      	add	sp, #20
 800c790:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c792 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c792:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c794:	b085      	sub	sp, #20
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	000c      	movs	r4, r1
 800c79c:	0010      	movs	r0, r2
 800c79e:	0019      	movs	r1, r3
 800c7a0:	1cfb      	adds	r3, r7, #3
 800c7a2:	1c22      	adds	r2, r4, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	1cbb      	adds	r3, r7, #2
 800c7a8:	1c02      	adds	r2, r0, #0
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	003b      	movs	r3, r7
 800c7ae:	1c0a      	adds	r2, r1, #0
 800c7b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b2:	260f      	movs	r6, #15
 800c7b4:	19bb      	adds	r3, r7, r6
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ba:	250e      	movs	r5, #14
 800c7bc:	197b      	adds	r3, r7, r5
 800c7be:	2200      	movs	r2, #0
 800c7c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	23b0      	movs	r3, #176	; 0xb0
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	58d0      	ldr	r0, [r2, r3]
 800c7ca:	19bc      	adds	r4, r7, r6
 800c7cc:	1cbb      	adds	r3, r7, #2
 800c7ce:	781d      	ldrb	r5, [r3, #0]
 800c7d0:	003b      	movs	r3, r7
 800c7d2:	881a      	ldrh	r2, [r3, #0]
 800c7d4:	1cfb      	adds	r3, r7, #3
 800c7d6:	7819      	ldrb	r1, [r3, #0]
 800c7d8:	002b      	movs	r3, r5
 800c7da:	f7f7 fbbc 	bl	8003f56 <HAL_PCD_EP_Open>
 800c7de:	0003      	movs	r3, r0
 800c7e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e2:	250e      	movs	r5, #14
 800c7e4:	197c      	adds	r4, r7, r5
 800c7e6:	19bb      	adds	r3, r7, r6
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f000 f985 	bl	800cafa <USBD_Get_USB_Status>
 800c7f0:	0003      	movs	r3, r0
 800c7f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c7f4:	197b      	adds	r3, r7, r5
 800c7f6:	781b      	ldrb	r3, [r3, #0]
}
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	b005      	add	sp, #20
 800c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c800 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	000a      	movs	r2, r1
 800c80a:	1cfb      	adds	r3, r7, #3
 800c80c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c80e:	210f      	movs	r1, #15
 800c810:	187b      	adds	r3, r7, r1
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c816:	260e      	movs	r6, #14
 800c818:	19bb      	adds	r3, r7, r6
 800c81a:	2200      	movs	r2, #0
 800c81c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	23b0      	movs	r3, #176	; 0xb0
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	58d2      	ldr	r2, [r2, r3]
 800c826:	000d      	movs	r5, r1
 800c828:	187c      	adds	r4, r7, r1
 800c82a:	1cfb      	adds	r3, r7, #3
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	0019      	movs	r1, r3
 800c830:	0010      	movs	r0, r2
 800c832:	f7f7 fc08 	bl	8004046 <HAL_PCD_EP_Close>
 800c836:	0003      	movs	r3, r0
 800c838:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c83a:	19bc      	adds	r4, r7, r6
 800c83c:	197b      	adds	r3, r7, r5
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	0018      	movs	r0, r3
 800c842:	f000 f95a 	bl	800cafa <USBD_Get_USB_Status>
 800c846:	0003      	movs	r3, r0
 800c848:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c84a:	19bb      	adds	r3, r7, r6
 800c84c:	781b      	ldrb	r3, [r3, #0]
}
 800c84e:	0018      	movs	r0, r3
 800c850:	46bd      	mov	sp, r7
 800c852:	b005      	add	sp, #20
 800c854:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c856 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c856:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	000a      	movs	r2, r1
 800c860:	1cfb      	adds	r3, r7, #3
 800c862:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c864:	210f      	movs	r1, #15
 800c866:	187b      	adds	r3, r7, r1
 800c868:	2200      	movs	r2, #0
 800c86a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c86c:	260e      	movs	r6, #14
 800c86e:	19bb      	adds	r3, r7, r6
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	23b0      	movs	r3, #176	; 0xb0
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	58d2      	ldr	r2, [r2, r3]
 800c87c:	000d      	movs	r5, r1
 800c87e:	187c      	adds	r4, r7, r1
 800c880:	1cfb      	adds	r3, r7, #3
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	0019      	movs	r1, r3
 800c886:	0010      	movs	r0, r2
 800c888:	f7f7 fcd4 	bl	8004234 <HAL_PCD_EP_SetStall>
 800c88c:	0003      	movs	r3, r0
 800c88e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c890:	19bc      	adds	r4, r7, r6
 800c892:	197b      	adds	r3, r7, r5
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	0018      	movs	r0, r3
 800c898:	f000 f92f 	bl	800cafa <USBD_Get_USB_Status>
 800c89c:	0003      	movs	r3, r0
 800c89e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c8a0:	19bb      	adds	r3, r7, r6
 800c8a2:	781b      	ldrb	r3, [r3, #0]
}
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	b005      	add	sp, #20
 800c8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	000a      	movs	r2, r1
 800c8b6:	1cfb      	adds	r3, r7, #3
 800c8b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ba:	210f      	movs	r1, #15
 800c8bc:	187b      	adds	r3, r7, r1
 800c8be:	2200      	movs	r2, #0
 800c8c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8c2:	260e      	movs	r6, #14
 800c8c4:	19bb      	adds	r3, r7, r6
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	23b0      	movs	r3, #176	; 0xb0
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	58d2      	ldr	r2, [r2, r3]
 800c8d2:	000d      	movs	r5, r1
 800c8d4:	187c      	adds	r4, r7, r1
 800c8d6:	1cfb      	adds	r3, r7, #3
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	0019      	movs	r1, r3
 800c8dc:	0010      	movs	r0, r2
 800c8de:	f7f7 fd05 	bl	80042ec <HAL_PCD_EP_ClrStall>
 800c8e2:	0003      	movs	r3, r0
 800c8e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8e6:	19bc      	adds	r4, r7, r6
 800c8e8:	197b      	adds	r3, r7, r5
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	f000 f904 	bl	800cafa <USBD_Get_USB_Status>
 800c8f2:	0003      	movs	r3, r0
 800c8f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c8f6:	19bb      	adds	r3, r7, r6
 800c8f8:	781b      	ldrb	r3, [r3, #0]
}
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	b005      	add	sp, #20
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c902 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	000a      	movs	r2, r1
 800c90c:	1cfb      	adds	r3, r7, #3
 800c90e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	23b0      	movs	r3, #176	; 0xb0
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	58d3      	ldr	r3, [r2, r3]
 800c918:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c91a:	1cfb      	adds	r3, r7, #3
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	b25b      	sxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	da0d      	bge.n	800c940 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c924:	1cfb      	adds	r3, r7, #3
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	227f      	movs	r2, #127	; 0x7f
 800c92a:	4013      	ands	r3, r2
 800c92c:	68f9      	ldr	r1, [r7, #12]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	0013      	movs	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	189b      	adds	r3, r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	18cb      	adds	r3, r1, r3
 800c93a:	3302      	adds	r3, #2
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	e00d      	b.n	800c95c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c940:	1cfb      	adds	r3, r7, #3
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	227f      	movs	r2, #127	; 0x7f
 800c946:	401a      	ands	r2, r3
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	23b5      	movs	r3, #181	; 0xb5
 800c94c:	0059      	lsls	r1, r3, #1
 800c94e:	0013      	movs	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	189b      	adds	r3, r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	18c3      	adds	r3, r0, r3
 800c958:	185b      	adds	r3, r3, r1
 800c95a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c95c:	0018      	movs	r0, r3
 800c95e:	46bd      	mov	sp, r7
 800c960:	b004      	add	sp, #16
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	000a      	movs	r2, r1
 800c96e:	1cfb      	adds	r3, r7, #3
 800c970:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c972:	210f      	movs	r1, #15
 800c974:	187b      	adds	r3, r7, r1
 800c976:	2200      	movs	r2, #0
 800c978:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c97a:	260e      	movs	r6, #14
 800c97c:	19bb      	adds	r3, r7, r6
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	23b0      	movs	r3, #176	; 0xb0
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	58d2      	ldr	r2, [r2, r3]
 800c98a:	000d      	movs	r5, r1
 800c98c:	187c      	adds	r4, r7, r1
 800c98e:	1cfb      	adds	r3, r7, #3
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	0019      	movs	r1, r3
 800c994:	0010      	movs	r0, r2
 800c996:	f7f7 fab3 	bl	8003f00 <HAL_PCD_SetAddress>
 800c99a:	0003      	movs	r3, r0
 800c99c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c99e:	19bc      	adds	r4, r7, r6
 800c9a0:	197b      	adds	r3, r7, r5
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 f8a8 	bl	800cafa <USBD_Get_USB_Status>
 800c9aa:	0003      	movs	r3, r0
 800c9ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c9ae:	19bb      	adds	r3, r7, r6
 800c9b0:	781b      	ldrb	r3, [r3, #0]
}
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	b005      	add	sp, #20
 800c9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c9ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9bc:	b087      	sub	sp, #28
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	0008      	movs	r0, r1
 800c9c4:	607a      	str	r2, [r7, #4]
 800c9c6:	0019      	movs	r1, r3
 800c9c8:	230b      	movs	r3, #11
 800c9ca:	18fb      	adds	r3, r7, r3
 800c9cc:	1c02      	adds	r2, r0, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
 800c9d0:	2408      	movs	r4, #8
 800c9d2:	193b      	adds	r3, r7, r4
 800c9d4:	1c0a      	adds	r2, r1, #0
 800c9d6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d8:	2117      	movs	r1, #23
 800c9da:	187b      	adds	r3, r7, r1
 800c9dc:	2200      	movs	r2, #0
 800c9de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e0:	2516      	movs	r5, #22
 800c9e2:	197b      	adds	r3, r7, r5
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	23b0      	movs	r3, #176	; 0xb0
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	58d0      	ldr	r0, [r2, r3]
 800c9f0:	193b      	adds	r3, r7, r4
 800c9f2:	881d      	ldrh	r5, [r3, #0]
 800c9f4:	000e      	movs	r6, r1
 800c9f6:	187c      	adds	r4, r7, r1
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	230b      	movs	r3, #11
 800c9fc:	18fb      	adds	r3, r7, r3
 800c9fe:	7819      	ldrb	r1, [r3, #0]
 800ca00:	002b      	movs	r3, r5
 800ca02:	f7f7 fbce 	bl	80041a2 <HAL_PCD_EP_Transmit>
 800ca06:	0003      	movs	r3, r0
 800ca08:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca0a:	2516      	movs	r5, #22
 800ca0c:	197c      	adds	r4, r7, r5
 800ca0e:	19bb      	adds	r3, r7, r6
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	0018      	movs	r0, r3
 800ca14:	f000 f871 	bl	800cafa <USBD_Get_USB_Status>
 800ca18:	0003      	movs	r3, r0
 800ca1a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ca1c:	197b      	adds	r3, r7, r5
 800ca1e:	781b      	ldrb	r3, [r3, #0]
}
 800ca20:	0018      	movs	r0, r3
 800ca22:	46bd      	mov	sp, r7
 800ca24:	b007      	add	sp, #28
 800ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	0008      	movs	r0, r1
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	0019      	movs	r1, r3
 800ca36:	230b      	movs	r3, #11
 800ca38:	18fb      	adds	r3, r7, r3
 800ca3a:	1c02      	adds	r2, r0, #0
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	2408      	movs	r4, #8
 800ca40:	193b      	adds	r3, r7, r4
 800ca42:	1c0a      	adds	r2, r1, #0
 800ca44:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca46:	2117      	movs	r1, #23
 800ca48:	187b      	adds	r3, r7, r1
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4e:	2516      	movs	r5, #22
 800ca50:	197b      	adds	r3, r7, r5
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	23b0      	movs	r3, #176	; 0xb0
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	58d0      	ldr	r0, [r2, r3]
 800ca5e:	193b      	adds	r3, r7, r4
 800ca60:	881d      	ldrh	r5, [r3, #0]
 800ca62:	000e      	movs	r6, r1
 800ca64:	187c      	adds	r4, r7, r1
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	230b      	movs	r3, #11
 800ca6a:	18fb      	adds	r3, r7, r3
 800ca6c:	7819      	ldrb	r1, [r3, #0]
 800ca6e:	002b      	movs	r3, r5
 800ca70:	f7f7 fb3a 	bl	80040e8 <HAL_PCD_EP_Receive>
 800ca74:	0003      	movs	r3, r0
 800ca76:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca78:	2516      	movs	r5, #22
 800ca7a:	197c      	adds	r4, r7, r5
 800ca7c:	19bb      	adds	r3, r7, r6
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	0018      	movs	r0, r3
 800ca82:	f000 f83a 	bl	800cafa <USBD_Get_USB_Status>
 800ca86:	0003      	movs	r3, r0
 800ca88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ca8a:	197b      	adds	r3, r7, r5
 800ca8c:	781b      	ldrb	r3, [r3, #0]
}
 800ca8e:	0018      	movs	r0, r3
 800ca90:	46bd      	mov	sp, r7
 800ca92:	b007      	add	sp, #28
 800ca94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	000a      	movs	r2, r1
 800caa0:	1cfb      	adds	r3, r7, #3
 800caa2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	23b0      	movs	r3, #176	; 0xb0
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	58d2      	ldr	r2, [r2, r3]
 800caac:	1cfb      	adds	r3, r7, #3
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	0019      	movs	r1, r3
 800cab2:	0010      	movs	r0, r2
 800cab4:	f7f7 fb5c 	bl	8004170 <HAL_PCD_EP_GetRxCount>
 800cab8:	0003      	movs	r3, r0
}
 800caba:	0018      	movs	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	b002      	add	sp, #8
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cacc:	4b02      	ldr	r3, [pc, #8]	; (800cad8 <USBD_static_malloc+0x14>)
}
 800cace:	0018      	movs	r0, r3
 800cad0:	46bd      	mov	sp, r7
 800cad2:	b002      	add	sp, #8
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	46c0      	nop			; (mov r8, r8)
 800cad8:	20000268 	.word	0x20000268

0800cadc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]

}
 800cae4:	46c0      	nop			; (mov r8, r8)
 800cae6:	46bd      	mov	sp, r7
 800cae8:	b002      	add	sp, #8
 800caea:	bd80      	pop	{r7, pc}

0800caec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800caf0:	f7f4 f9aa 	bl	8000e48 <SystemClock_Config>
}
 800caf4:	46c0      	nop			; (mov r8, r8)
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	0002      	movs	r2, r0
 800cb02:	1dfb      	adds	r3, r7, #7
 800cb04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb06:	230f      	movs	r3, #15
 800cb08:	18fb      	adds	r3, r7, r3
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800cb0e:	1dfb      	adds	r3, r7, #7
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d017      	beq.n	800cb46 <USBD_Get_USB_Status+0x4c>
 800cb16:	dc1b      	bgt.n	800cb50 <USBD_Get_USB_Status+0x56>
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d00f      	beq.n	800cb3c <USBD_Get_USB_Status+0x42>
 800cb1c:	dc18      	bgt.n	800cb50 <USBD_Get_USB_Status+0x56>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <USBD_Get_USB_Status+0x2e>
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d005      	beq.n	800cb32 <USBD_Get_USB_Status+0x38>
 800cb26:	e013      	b.n	800cb50 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb28:	230f      	movs	r3, #15
 800cb2a:	18fb      	adds	r3, r7, r3
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
    break;
 800cb30:	e013      	b.n	800cb5a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb32:	230f      	movs	r3, #15
 800cb34:	18fb      	adds	r3, r7, r3
 800cb36:	2202      	movs	r2, #2
 800cb38:	701a      	strb	r2, [r3, #0]
    break;
 800cb3a:	e00e      	b.n	800cb5a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb3c:	230f      	movs	r3, #15
 800cb3e:	18fb      	adds	r3, r7, r3
 800cb40:	2201      	movs	r2, #1
 800cb42:	701a      	strb	r2, [r3, #0]
    break;
 800cb44:	e009      	b.n	800cb5a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb46:	230f      	movs	r3, #15
 800cb48:	18fb      	adds	r3, r7, r3
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	701a      	strb	r2, [r3, #0]
    break;
 800cb4e:	e004      	b.n	800cb5a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cb50:	230f      	movs	r3, #15
 800cb52:	18fb      	adds	r3, r7, r3
 800cb54:	2202      	movs	r2, #2
 800cb56:	701a      	strb	r2, [r3, #0]
    break;
 800cb58:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800cb5a:	230f      	movs	r3, #15
 800cb5c:	18fb      	adds	r3, r7, r3
 800cb5e:	781b      	ldrb	r3, [r3, #0]
}
 800cb60:	0018      	movs	r0, r3
 800cb62:	46bd      	mov	sp, r7
 800cb64:	b004      	add	sp, #16
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <__errno>:
 800cb68:	4b01      	ldr	r3, [pc, #4]	; (800cb70 <__errno+0x8>)
 800cb6a:	6818      	ldr	r0, [r3, #0]
 800cb6c:	4770      	bx	lr
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	2000017c 	.word	0x2000017c

0800cb74 <__libc_init_array>:
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	2600      	movs	r6, #0
 800cb78:	4d0c      	ldr	r5, [pc, #48]	; (800cbac <__libc_init_array+0x38>)
 800cb7a:	4c0d      	ldr	r4, [pc, #52]	; (800cbb0 <__libc_init_array+0x3c>)
 800cb7c:	1b64      	subs	r4, r4, r5
 800cb7e:	10a4      	asrs	r4, r4, #2
 800cb80:	42a6      	cmp	r6, r4
 800cb82:	d109      	bne.n	800cb98 <__libc_init_array+0x24>
 800cb84:	2600      	movs	r6, #0
 800cb86:	f000 fc5b 	bl	800d440 <_init>
 800cb8a:	4d0a      	ldr	r5, [pc, #40]	; (800cbb4 <__libc_init_array+0x40>)
 800cb8c:	4c0a      	ldr	r4, [pc, #40]	; (800cbb8 <__libc_init_array+0x44>)
 800cb8e:	1b64      	subs	r4, r4, r5
 800cb90:	10a4      	asrs	r4, r4, #2
 800cb92:	42a6      	cmp	r6, r4
 800cb94:	d105      	bne.n	800cba2 <__libc_init_array+0x2e>
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	00b3      	lsls	r3, r6, #2
 800cb9a:	58eb      	ldr	r3, [r5, r3]
 800cb9c:	4798      	blx	r3
 800cb9e:	3601      	adds	r6, #1
 800cba0:	e7ee      	b.n	800cb80 <__libc_init_array+0xc>
 800cba2:	00b3      	lsls	r3, r6, #2
 800cba4:	58eb      	ldr	r3, [r5, r3]
 800cba6:	4798      	blx	r3
 800cba8:	3601      	adds	r6, #1
 800cbaa:	e7f2      	b.n	800cb92 <__libc_init_array+0x1e>
 800cbac:	0800d6c8 	.word	0x0800d6c8
 800cbb0:	0800d6c8 	.word	0x0800d6c8
 800cbb4:	0800d6c8 	.word	0x0800d6c8
 800cbb8:	0800d6cc 	.word	0x0800d6cc

0800cbbc <malloc>:
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	4b03      	ldr	r3, [pc, #12]	; (800cbcc <malloc+0x10>)
 800cbc0:	0001      	movs	r1, r0
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	f000 f86a 	bl	800cc9c <_malloc_r>
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	46c0      	nop			; (mov r8, r8)
 800cbcc:	2000017c 	.word	0x2000017c

0800cbd0 <free>:
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	4b03      	ldr	r3, [pc, #12]	; (800cbe0 <free+0x10>)
 800cbd4:	0001      	movs	r1, r0
 800cbd6:	6818      	ldr	r0, [r3, #0]
 800cbd8:	f000 f816 	bl	800cc08 <_free_r>
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	46c0      	nop			; (mov r8, r8)
 800cbe0:	2000017c 	.word	0x2000017c

0800cbe4 <memcpy>:
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d100      	bne.n	800cbee <memcpy+0xa>
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	5ccc      	ldrb	r4, [r1, r3]
 800cbf0:	54c4      	strb	r4, [r0, r3]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	e7f8      	b.n	800cbe8 <memcpy+0x4>

0800cbf6 <memset>:
 800cbf6:	0003      	movs	r3, r0
 800cbf8:	1882      	adds	r2, r0, r2
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d100      	bne.n	800cc00 <memset+0xa>
 800cbfe:	4770      	bx	lr
 800cc00:	7019      	strb	r1, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	e7f9      	b.n	800cbfa <memset+0x4>
	...

0800cc08 <_free_r>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	0005      	movs	r5, r0
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	d010      	beq.n	800cc32 <_free_r+0x2a>
 800cc10:	1f0c      	subs	r4, r1, #4
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	da00      	bge.n	800cc1a <_free_r+0x12>
 800cc18:	18e4      	adds	r4, r4, r3
 800cc1a:	0028      	movs	r0, r5
 800cc1c:	f000 f8ce 	bl	800cdbc <__malloc_lock>
 800cc20:	4a1d      	ldr	r2, [pc, #116]	; (800cc98 <_free_r+0x90>)
 800cc22:	6813      	ldr	r3, [r2, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d105      	bne.n	800cc34 <_free_r+0x2c>
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6014      	str	r4, [r2, #0]
 800cc2c:	0028      	movs	r0, r5
 800cc2e:	f000 f8cd 	bl	800cdcc <__malloc_unlock>
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d908      	bls.n	800cc4a <_free_r+0x42>
 800cc38:	6821      	ldr	r1, [r4, #0]
 800cc3a:	1860      	adds	r0, r4, r1
 800cc3c:	4283      	cmp	r3, r0
 800cc3e:	d1f3      	bne.n	800cc28 <_free_r+0x20>
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	1841      	adds	r1, r0, r1
 800cc46:	6021      	str	r1, [r4, #0]
 800cc48:	e7ee      	b.n	800cc28 <_free_r+0x20>
 800cc4a:	001a      	movs	r2, r3
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <_free_r+0x4e>
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	d9f9      	bls.n	800cc4a <_free_r+0x42>
 800cc56:	6811      	ldr	r1, [r2, #0]
 800cc58:	1850      	adds	r0, r2, r1
 800cc5a:	42a0      	cmp	r0, r4
 800cc5c:	d10b      	bne.n	800cc76 <_free_r+0x6e>
 800cc5e:	6820      	ldr	r0, [r4, #0]
 800cc60:	1809      	adds	r1, r1, r0
 800cc62:	1850      	adds	r0, r2, r1
 800cc64:	6011      	str	r1, [r2, #0]
 800cc66:	4283      	cmp	r3, r0
 800cc68:	d1e0      	bne.n	800cc2c <_free_r+0x24>
 800cc6a:	6818      	ldr	r0, [r3, #0]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	1841      	adds	r1, r0, r1
 800cc70:	6011      	str	r1, [r2, #0]
 800cc72:	6053      	str	r3, [r2, #4]
 800cc74:	e7da      	b.n	800cc2c <_free_r+0x24>
 800cc76:	42a0      	cmp	r0, r4
 800cc78:	d902      	bls.n	800cc80 <_free_r+0x78>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	e7d5      	b.n	800cc2c <_free_r+0x24>
 800cc80:	6821      	ldr	r1, [r4, #0]
 800cc82:	1860      	adds	r0, r4, r1
 800cc84:	4283      	cmp	r3, r0
 800cc86:	d103      	bne.n	800cc90 <_free_r+0x88>
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	1841      	adds	r1, r0, r1
 800cc8e:	6021      	str	r1, [r4, #0]
 800cc90:	6063      	str	r3, [r4, #4]
 800cc92:	6054      	str	r4, [r2, #4]
 800cc94:	e7ca      	b.n	800cc2c <_free_r+0x24>
 800cc96:	46c0      	nop			; (mov r8, r8)
 800cc98:	20000488 	.word	0x20000488

0800cc9c <_malloc_r>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	2303      	movs	r3, #3
 800cca0:	1ccd      	adds	r5, r1, #3
 800cca2:	439d      	bics	r5, r3
 800cca4:	3508      	adds	r5, #8
 800cca6:	0006      	movs	r6, r0
 800cca8:	2d0c      	cmp	r5, #12
 800ccaa:	d21f      	bcs.n	800ccec <_malloc_r+0x50>
 800ccac:	250c      	movs	r5, #12
 800ccae:	42a9      	cmp	r1, r5
 800ccb0:	d81e      	bhi.n	800ccf0 <_malloc_r+0x54>
 800ccb2:	0030      	movs	r0, r6
 800ccb4:	f000 f882 	bl	800cdbc <__malloc_lock>
 800ccb8:	4925      	ldr	r1, [pc, #148]	; (800cd50 <_malloc_r+0xb4>)
 800ccba:	680a      	ldr	r2, [r1, #0]
 800ccbc:	0014      	movs	r4, r2
 800ccbe:	2c00      	cmp	r4, #0
 800ccc0:	d11a      	bne.n	800ccf8 <_malloc_r+0x5c>
 800ccc2:	4f24      	ldr	r7, [pc, #144]	; (800cd54 <_malloc_r+0xb8>)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d104      	bne.n	800ccd4 <_malloc_r+0x38>
 800ccca:	0021      	movs	r1, r4
 800cccc:	0030      	movs	r0, r6
 800ccce:	f000 f843 	bl	800cd58 <_sbrk_r>
 800ccd2:	6038      	str	r0, [r7, #0]
 800ccd4:	0029      	movs	r1, r5
 800ccd6:	0030      	movs	r0, r6
 800ccd8:	f000 f83e 	bl	800cd58 <_sbrk_r>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d12b      	bne.n	800cd38 <_malloc_r+0x9c>
 800cce0:	230c      	movs	r3, #12
 800cce2:	0030      	movs	r0, r6
 800cce4:	6033      	str	r3, [r6, #0]
 800cce6:	f000 f871 	bl	800cdcc <__malloc_unlock>
 800ccea:	e003      	b.n	800ccf4 <_malloc_r+0x58>
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	dade      	bge.n	800ccae <_malloc_r+0x12>
 800ccf0:	230c      	movs	r3, #12
 800ccf2:	6033      	str	r3, [r6, #0]
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	1b5b      	subs	r3, r3, r5
 800ccfc:	d419      	bmi.n	800cd32 <_malloc_r+0x96>
 800ccfe:	2b0b      	cmp	r3, #11
 800cd00:	d903      	bls.n	800cd0a <_malloc_r+0x6e>
 800cd02:	6023      	str	r3, [r4, #0]
 800cd04:	18e4      	adds	r4, r4, r3
 800cd06:	6025      	str	r5, [r4, #0]
 800cd08:	e003      	b.n	800cd12 <_malloc_r+0x76>
 800cd0a:	6863      	ldr	r3, [r4, #4]
 800cd0c:	42a2      	cmp	r2, r4
 800cd0e:	d10e      	bne.n	800cd2e <_malloc_r+0x92>
 800cd10:	600b      	str	r3, [r1, #0]
 800cd12:	0030      	movs	r0, r6
 800cd14:	f000 f85a 	bl	800cdcc <__malloc_unlock>
 800cd18:	0020      	movs	r0, r4
 800cd1a:	2207      	movs	r2, #7
 800cd1c:	300b      	adds	r0, #11
 800cd1e:	1d23      	adds	r3, r4, #4
 800cd20:	4390      	bics	r0, r2
 800cd22:	1ac2      	subs	r2, r0, r3
 800cd24:	4298      	cmp	r0, r3
 800cd26:	d0e6      	beq.n	800ccf6 <_malloc_r+0x5a>
 800cd28:	1a1b      	subs	r3, r3, r0
 800cd2a:	50a3      	str	r3, [r4, r2]
 800cd2c:	e7e3      	b.n	800ccf6 <_malloc_r+0x5a>
 800cd2e:	6053      	str	r3, [r2, #4]
 800cd30:	e7ef      	b.n	800cd12 <_malloc_r+0x76>
 800cd32:	0022      	movs	r2, r4
 800cd34:	6864      	ldr	r4, [r4, #4]
 800cd36:	e7c2      	b.n	800ccbe <_malloc_r+0x22>
 800cd38:	2303      	movs	r3, #3
 800cd3a:	1cc4      	adds	r4, r0, #3
 800cd3c:	439c      	bics	r4, r3
 800cd3e:	42a0      	cmp	r0, r4
 800cd40:	d0e1      	beq.n	800cd06 <_malloc_r+0x6a>
 800cd42:	1a21      	subs	r1, r4, r0
 800cd44:	0030      	movs	r0, r6
 800cd46:	f000 f807 	bl	800cd58 <_sbrk_r>
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	d1db      	bne.n	800cd06 <_malloc_r+0x6a>
 800cd4e:	e7c7      	b.n	800cce0 <_malloc_r+0x44>
 800cd50:	20000488 	.word	0x20000488
 800cd54:	2000048c 	.word	0x2000048c

0800cd58 <_sbrk_r>:
 800cd58:	2300      	movs	r3, #0
 800cd5a:	b570      	push	{r4, r5, r6, lr}
 800cd5c:	4d06      	ldr	r5, [pc, #24]	; (800cd78 <_sbrk_r+0x20>)
 800cd5e:	0004      	movs	r4, r0
 800cd60:	0008      	movs	r0, r1
 800cd62:	602b      	str	r3, [r5, #0]
 800cd64:	f7f5 fa52 	bl	800220c <_sbrk>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	d103      	bne.n	800cd74 <_sbrk_r+0x1c>
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d000      	beq.n	800cd74 <_sbrk_r+0x1c>
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	46c0      	nop			; (mov r8, r8)
 800cd78:	2000162c 	.word	0x2000162c

0800cd7c <siprintf>:
 800cd7c:	b40e      	push	{r1, r2, r3}
 800cd7e:	b500      	push	{lr}
 800cd80:	490b      	ldr	r1, [pc, #44]	; (800cdb0 <siprintf+0x34>)
 800cd82:	b09c      	sub	sp, #112	; 0x70
 800cd84:	ab1d      	add	r3, sp, #116	; 0x74
 800cd86:	9002      	str	r0, [sp, #8]
 800cd88:	9006      	str	r0, [sp, #24]
 800cd8a:	9107      	str	r1, [sp, #28]
 800cd8c:	9104      	str	r1, [sp, #16]
 800cd8e:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <siprintf+0x38>)
 800cd90:	4909      	ldr	r1, [pc, #36]	; (800cdb8 <siprintf+0x3c>)
 800cd92:	cb04      	ldmia	r3!, {r2}
 800cd94:	9105      	str	r1, [sp, #20]
 800cd96:	6800      	ldr	r0, [r0, #0]
 800cd98:	a902      	add	r1, sp, #8
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	f000 f880 	bl	800cea0 <_svfiprintf_r>
 800cda0:	2300      	movs	r3, #0
 800cda2:	9a02      	ldr	r2, [sp, #8]
 800cda4:	7013      	strb	r3, [r2, #0]
 800cda6:	b01c      	add	sp, #112	; 0x70
 800cda8:	bc08      	pop	{r3}
 800cdaa:	b003      	add	sp, #12
 800cdac:	4718      	bx	r3
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	7fffffff 	.word	0x7fffffff
 800cdb4:	2000017c 	.word	0x2000017c
 800cdb8:	ffff0208 	.word	0xffff0208

0800cdbc <__malloc_lock>:
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	4802      	ldr	r0, [pc, #8]	; (800cdc8 <__malloc_lock+0xc>)
 800cdc0:	f000 faf0 	bl	800d3a4 <__retarget_lock_acquire_recursive>
 800cdc4:	bd10      	pop	{r4, pc}
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	20001634 	.word	0x20001634

0800cdcc <__malloc_unlock>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	4802      	ldr	r0, [pc, #8]	; (800cdd8 <__malloc_unlock+0xc>)
 800cdd0:	f000 fae9 	bl	800d3a6 <__retarget_lock_release_recursive>
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	46c0      	nop			; (mov r8, r8)
 800cdd8:	20001634 	.word	0x20001634

0800cddc <__ssputs_r>:
 800cddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdde:	688e      	ldr	r6, [r1, #8]
 800cde0:	b085      	sub	sp, #20
 800cde2:	0007      	movs	r7, r0
 800cde4:	000c      	movs	r4, r1
 800cde6:	9203      	str	r2, [sp, #12]
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	429e      	cmp	r6, r3
 800cdec:	d83c      	bhi.n	800ce68 <__ssputs_r+0x8c>
 800cdee:	2390      	movs	r3, #144	; 0x90
 800cdf0:	898a      	ldrh	r2, [r1, #12]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	421a      	tst	r2, r3
 800cdf6:	d034      	beq.n	800ce62 <__ssputs_r+0x86>
 800cdf8:	2503      	movs	r5, #3
 800cdfa:	6909      	ldr	r1, [r1, #16]
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	1a5b      	subs	r3, r3, r1
 800ce00:	9302      	str	r3, [sp, #8]
 800ce02:	6963      	ldr	r3, [r4, #20]
 800ce04:	9802      	ldr	r0, [sp, #8]
 800ce06:	435d      	muls	r5, r3
 800ce08:	0feb      	lsrs	r3, r5, #31
 800ce0a:	195d      	adds	r5, r3, r5
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	106d      	asrs	r5, r5, #1
 800ce10:	3301      	adds	r3, #1
 800ce12:	181b      	adds	r3, r3, r0
 800ce14:	42ab      	cmp	r3, r5
 800ce16:	d900      	bls.n	800ce1a <__ssputs_r+0x3e>
 800ce18:	001d      	movs	r5, r3
 800ce1a:	0553      	lsls	r3, r2, #21
 800ce1c:	d532      	bpl.n	800ce84 <__ssputs_r+0xa8>
 800ce1e:	0029      	movs	r1, r5
 800ce20:	0038      	movs	r0, r7
 800ce22:	f7ff ff3b 	bl	800cc9c <_malloc_r>
 800ce26:	1e06      	subs	r6, r0, #0
 800ce28:	d109      	bne.n	800ce3e <__ssputs_r+0x62>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	603b      	str	r3, [r7, #0]
 800ce2e:	2340      	movs	r3, #64	; 0x40
 800ce30:	2001      	movs	r0, #1
 800ce32:	89a2      	ldrh	r2, [r4, #12]
 800ce34:	4240      	negs	r0, r0
 800ce36:	4313      	orrs	r3, r2
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	b005      	add	sp, #20
 800ce3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce3e:	9a02      	ldr	r2, [sp, #8]
 800ce40:	6921      	ldr	r1, [r4, #16]
 800ce42:	f7ff fecf 	bl	800cbe4 <memcpy>
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	4a14      	ldr	r2, [pc, #80]	; (800ce9c <__ssputs_r+0xc0>)
 800ce4a:	401a      	ands	r2, r3
 800ce4c:	2380      	movs	r3, #128	; 0x80
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	9b02      	ldr	r3, [sp, #8]
 800ce54:	6126      	str	r6, [r4, #16]
 800ce56:	18f6      	adds	r6, r6, r3
 800ce58:	6026      	str	r6, [r4, #0]
 800ce5a:	6165      	str	r5, [r4, #20]
 800ce5c:	9e01      	ldr	r6, [sp, #4]
 800ce5e:	1aed      	subs	r5, r5, r3
 800ce60:	60a5      	str	r5, [r4, #8]
 800ce62:	9b01      	ldr	r3, [sp, #4]
 800ce64:	429e      	cmp	r6, r3
 800ce66:	d900      	bls.n	800ce6a <__ssputs_r+0x8e>
 800ce68:	9e01      	ldr	r6, [sp, #4]
 800ce6a:	0032      	movs	r2, r6
 800ce6c:	9903      	ldr	r1, [sp, #12]
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	f000 faa5 	bl	800d3be <memmove>
 800ce74:	68a3      	ldr	r3, [r4, #8]
 800ce76:	2000      	movs	r0, #0
 800ce78:	1b9b      	subs	r3, r3, r6
 800ce7a:	60a3      	str	r3, [r4, #8]
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	199e      	adds	r6, r3, r6
 800ce80:	6026      	str	r6, [r4, #0]
 800ce82:	e7da      	b.n	800ce3a <__ssputs_r+0x5e>
 800ce84:	002a      	movs	r2, r5
 800ce86:	0038      	movs	r0, r7
 800ce88:	f000 faac 	bl	800d3e4 <_realloc_r>
 800ce8c:	1e06      	subs	r6, r0, #0
 800ce8e:	d1e0      	bne.n	800ce52 <__ssputs_r+0x76>
 800ce90:	0038      	movs	r0, r7
 800ce92:	6921      	ldr	r1, [r4, #16]
 800ce94:	f7ff feb8 	bl	800cc08 <_free_r>
 800ce98:	e7c7      	b.n	800ce2a <__ssputs_r+0x4e>
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	fffffb7f 	.word	0xfffffb7f

0800cea0 <_svfiprintf_r>:
 800cea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cea2:	b0a1      	sub	sp, #132	; 0x84
 800cea4:	9003      	str	r0, [sp, #12]
 800cea6:	001d      	movs	r5, r3
 800cea8:	898b      	ldrh	r3, [r1, #12]
 800ceaa:	000f      	movs	r7, r1
 800ceac:	0016      	movs	r6, r2
 800ceae:	061b      	lsls	r3, r3, #24
 800ceb0:	d511      	bpl.n	800ced6 <_svfiprintf_r+0x36>
 800ceb2:	690b      	ldr	r3, [r1, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10e      	bne.n	800ced6 <_svfiprintf_r+0x36>
 800ceb8:	2140      	movs	r1, #64	; 0x40
 800ceba:	f7ff feef 	bl	800cc9c <_malloc_r>
 800cebe:	6038      	str	r0, [r7, #0]
 800cec0:	6138      	str	r0, [r7, #16]
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d105      	bne.n	800ced2 <_svfiprintf_r+0x32>
 800cec6:	230c      	movs	r3, #12
 800cec8:	9a03      	ldr	r2, [sp, #12]
 800ceca:	3801      	subs	r0, #1
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	b021      	add	sp, #132	; 0x84
 800ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced2:	2340      	movs	r3, #64	; 0x40
 800ced4:	617b      	str	r3, [r7, #20]
 800ced6:	2300      	movs	r3, #0
 800ced8:	ac08      	add	r4, sp, #32
 800ceda:	6163      	str	r3, [r4, #20]
 800cedc:	3320      	adds	r3, #32
 800cede:	7663      	strb	r3, [r4, #25]
 800cee0:	3310      	adds	r3, #16
 800cee2:	76a3      	strb	r3, [r4, #26]
 800cee4:	9507      	str	r5, [sp, #28]
 800cee6:	0035      	movs	r5, r6
 800cee8:	782b      	ldrb	r3, [r5, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <_svfiprintf_r+0x52>
 800ceee:	2b25      	cmp	r3, #37	; 0x25
 800cef0:	d147      	bne.n	800cf82 <_svfiprintf_r+0xe2>
 800cef2:	1bab      	subs	r3, r5, r6
 800cef4:	9305      	str	r3, [sp, #20]
 800cef6:	42b5      	cmp	r5, r6
 800cef8:	d00c      	beq.n	800cf14 <_svfiprintf_r+0x74>
 800cefa:	0032      	movs	r2, r6
 800cefc:	0039      	movs	r1, r7
 800cefe:	9803      	ldr	r0, [sp, #12]
 800cf00:	f7ff ff6c 	bl	800cddc <__ssputs_r>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d100      	bne.n	800cf0a <_svfiprintf_r+0x6a>
 800cf08:	e0ae      	b.n	800d068 <_svfiprintf_r+0x1c8>
 800cf0a:	6962      	ldr	r2, [r4, #20]
 800cf0c:	9b05      	ldr	r3, [sp, #20]
 800cf0e:	4694      	mov	ip, r2
 800cf10:	4463      	add	r3, ip
 800cf12:	6163      	str	r3, [r4, #20]
 800cf14:	782b      	ldrb	r3, [r5, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d100      	bne.n	800cf1c <_svfiprintf_r+0x7c>
 800cf1a:	e0a5      	b.n	800d068 <_svfiprintf_r+0x1c8>
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	2300      	movs	r3, #0
 800cf20:	4252      	negs	r2, r2
 800cf22:	6062      	str	r2, [r4, #4]
 800cf24:	a904      	add	r1, sp, #16
 800cf26:	3254      	adds	r2, #84	; 0x54
 800cf28:	1852      	adds	r2, r2, r1
 800cf2a:	1c6e      	adds	r6, r5, #1
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	60e3      	str	r3, [r4, #12]
 800cf30:	60a3      	str	r3, [r4, #8]
 800cf32:	7013      	strb	r3, [r2, #0]
 800cf34:	65a3      	str	r3, [r4, #88]	; 0x58
 800cf36:	2205      	movs	r2, #5
 800cf38:	7831      	ldrb	r1, [r6, #0]
 800cf3a:	4854      	ldr	r0, [pc, #336]	; (800d08c <_svfiprintf_r+0x1ec>)
 800cf3c:	f000 fa34 	bl	800d3a8 <memchr>
 800cf40:	1c75      	adds	r5, r6, #1
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d11f      	bne.n	800cf86 <_svfiprintf_r+0xe6>
 800cf46:	6822      	ldr	r2, [r4, #0]
 800cf48:	06d3      	lsls	r3, r2, #27
 800cf4a:	d504      	bpl.n	800cf56 <_svfiprintf_r+0xb6>
 800cf4c:	2353      	movs	r3, #83	; 0x53
 800cf4e:	a904      	add	r1, sp, #16
 800cf50:	185b      	adds	r3, r3, r1
 800cf52:	2120      	movs	r1, #32
 800cf54:	7019      	strb	r1, [r3, #0]
 800cf56:	0713      	lsls	r3, r2, #28
 800cf58:	d504      	bpl.n	800cf64 <_svfiprintf_r+0xc4>
 800cf5a:	2353      	movs	r3, #83	; 0x53
 800cf5c:	a904      	add	r1, sp, #16
 800cf5e:	185b      	adds	r3, r3, r1
 800cf60:	212b      	movs	r1, #43	; 0x2b
 800cf62:	7019      	strb	r1, [r3, #0]
 800cf64:	7833      	ldrb	r3, [r6, #0]
 800cf66:	2b2a      	cmp	r3, #42	; 0x2a
 800cf68:	d016      	beq.n	800cf98 <_svfiprintf_r+0xf8>
 800cf6a:	0035      	movs	r5, r6
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	200a      	movs	r0, #10
 800cf70:	68e3      	ldr	r3, [r4, #12]
 800cf72:	782a      	ldrb	r2, [r5, #0]
 800cf74:	1c6e      	adds	r6, r5, #1
 800cf76:	3a30      	subs	r2, #48	; 0x30
 800cf78:	2a09      	cmp	r2, #9
 800cf7a:	d94e      	bls.n	800d01a <_svfiprintf_r+0x17a>
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	d111      	bne.n	800cfa4 <_svfiprintf_r+0x104>
 800cf80:	e017      	b.n	800cfb2 <_svfiprintf_r+0x112>
 800cf82:	3501      	adds	r5, #1
 800cf84:	e7b0      	b.n	800cee8 <_svfiprintf_r+0x48>
 800cf86:	4b41      	ldr	r3, [pc, #260]	; (800d08c <_svfiprintf_r+0x1ec>)
 800cf88:	6822      	ldr	r2, [r4, #0]
 800cf8a:	1ac0      	subs	r0, r0, r3
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	4083      	lsls	r3, r0
 800cf90:	4313      	orrs	r3, r2
 800cf92:	002e      	movs	r6, r5
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	e7ce      	b.n	800cf36 <_svfiprintf_r+0x96>
 800cf98:	9b07      	ldr	r3, [sp, #28]
 800cf9a:	1d19      	adds	r1, r3, #4
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	9107      	str	r1, [sp, #28]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db01      	blt.n	800cfa8 <_svfiprintf_r+0x108>
 800cfa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfa6:	e004      	b.n	800cfb2 <_svfiprintf_r+0x112>
 800cfa8:	425b      	negs	r3, r3
 800cfaa:	60e3      	str	r3, [r4, #12]
 800cfac:	2302      	movs	r3, #2
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	782b      	ldrb	r3, [r5, #0]
 800cfb4:	2b2e      	cmp	r3, #46	; 0x2e
 800cfb6:	d10a      	bne.n	800cfce <_svfiprintf_r+0x12e>
 800cfb8:	786b      	ldrb	r3, [r5, #1]
 800cfba:	2b2a      	cmp	r3, #42	; 0x2a
 800cfbc:	d135      	bne.n	800d02a <_svfiprintf_r+0x18a>
 800cfbe:	9b07      	ldr	r3, [sp, #28]
 800cfc0:	3502      	adds	r5, #2
 800cfc2:	1d1a      	adds	r2, r3, #4
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	9207      	str	r2, [sp, #28]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	db2b      	blt.n	800d024 <_svfiprintf_r+0x184>
 800cfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfce:	4e30      	ldr	r6, [pc, #192]	; (800d090 <_svfiprintf_r+0x1f0>)
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	0030      	movs	r0, r6
 800cfd4:	7829      	ldrb	r1, [r5, #0]
 800cfd6:	f000 f9e7 	bl	800d3a8 <memchr>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d006      	beq.n	800cfec <_svfiprintf_r+0x14c>
 800cfde:	2340      	movs	r3, #64	; 0x40
 800cfe0:	1b80      	subs	r0, r0, r6
 800cfe2:	4083      	lsls	r3, r0
 800cfe4:	6822      	ldr	r2, [r4, #0]
 800cfe6:	3501      	adds	r5, #1
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	7829      	ldrb	r1, [r5, #0]
 800cfee:	2206      	movs	r2, #6
 800cff0:	4828      	ldr	r0, [pc, #160]	; (800d094 <_svfiprintf_r+0x1f4>)
 800cff2:	1c6e      	adds	r6, r5, #1
 800cff4:	7621      	strb	r1, [r4, #24]
 800cff6:	f000 f9d7 	bl	800d3a8 <memchr>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d03c      	beq.n	800d078 <_svfiprintf_r+0x1d8>
 800cffe:	4b26      	ldr	r3, [pc, #152]	; (800d098 <_svfiprintf_r+0x1f8>)
 800d000:	2b00      	cmp	r3, #0
 800d002:	d125      	bne.n	800d050 <_svfiprintf_r+0x1b0>
 800d004:	2207      	movs	r2, #7
 800d006:	9b07      	ldr	r3, [sp, #28]
 800d008:	3307      	adds	r3, #7
 800d00a:	4393      	bics	r3, r2
 800d00c:	3308      	adds	r3, #8
 800d00e:	9307      	str	r3, [sp, #28]
 800d010:	6963      	ldr	r3, [r4, #20]
 800d012:	9a04      	ldr	r2, [sp, #16]
 800d014:	189b      	adds	r3, r3, r2
 800d016:	6163      	str	r3, [r4, #20]
 800d018:	e765      	b.n	800cee6 <_svfiprintf_r+0x46>
 800d01a:	4343      	muls	r3, r0
 800d01c:	0035      	movs	r5, r6
 800d01e:	2101      	movs	r1, #1
 800d020:	189b      	adds	r3, r3, r2
 800d022:	e7a6      	b.n	800cf72 <_svfiprintf_r+0xd2>
 800d024:	2301      	movs	r3, #1
 800d026:	425b      	negs	r3, r3
 800d028:	e7d0      	b.n	800cfcc <_svfiprintf_r+0x12c>
 800d02a:	2300      	movs	r3, #0
 800d02c:	200a      	movs	r0, #10
 800d02e:	001a      	movs	r2, r3
 800d030:	3501      	adds	r5, #1
 800d032:	6063      	str	r3, [r4, #4]
 800d034:	7829      	ldrb	r1, [r5, #0]
 800d036:	1c6e      	adds	r6, r5, #1
 800d038:	3930      	subs	r1, #48	; 0x30
 800d03a:	2909      	cmp	r1, #9
 800d03c:	d903      	bls.n	800d046 <_svfiprintf_r+0x1a6>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0c5      	beq.n	800cfce <_svfiprintf_r+0x12e>
 800d042:	9209      	str	r2, [sp, #36]	; 0x24
 800d044:	e7c3      	b.n	800cfce <_svfiprintf_r+0x12e>
 800d046:	4342      	muls	r2, r0
 800d048:	0035      	movs	r5, r6
 800d04a:	2301      	movs	r3, #1
 800d04c:	1852      	adds	r2, r2, r1
 800d04e:	e7f1      	b.n	800d034 <_svfiprintf_r+0x194>
 800d050:	ab07      	add	r3, sp, #28
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	003a      	movs	r2, r7
 800d056:	0021      	movs	r1, r4
 800d058:	4b10      	ldr	r3, [pc, #64]	; (800d09c <_svfiprintf_r+0x1fc>)
 800d05a:	9803      	ldr	r0, [sp, #12]
 800d05c:	e000      	b.n	800d060 <_svfiprintf_r+0x1c0>
 800d05e:	bf00      	nop
 800d060:	9004      	str	r0, [sp, #16]
 800d062:	9b04      	ldr	r3, [sp, #16]
 800d064:	3301      	adds	r3, #1
 800d066:	d1d3      	bne.n	800d010 <_svfiprintf_r+0x170>
 800d068:	89bb      	ldrh	r3, [r7, #12]
 800d06a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d06c:	065b      	lsls	r3, r3, #25
 800d06e:	d400      	bmi.n	800d072 <_svfiprintf_r+0x1d2>
 800d070:	e72d      	b.n	800cece <_svfiprintf_r+0x2e>
 800d072:	2001      	movs	r0, #1
 800d074:	4240      	negs	r0, r0
 800d076:	e72a      	b.n	800cece <_svfiprintf_r+0x2e>
 800d078:	ab07      	add	r3, sp, #28
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	003a      	movs	r2, r7
 800d07e:	0021      	movs	r1, r4
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <_svfiprintf_r+0x1fc>)
 800d082:	9803      	ldr	r0, [sp, #12]
 800d084:	f000 f87c 	bl	800d180 <_printf_i>
 800d088:	e7ea      	b.n	800d060 <_svfiprintf_r+0x1c0>
 800d08a:	46c0      	nop			; (mov r8, r8)
 800d08c:	0800d694 	.word	0x0800d694
 800d090:	0800d69a 	.word	0x0800d69a
 800d094:	0800d69e 	.word	0x0800d69e
 800d098:	00000000 	.word	0x00000000
 800d09c:	0800cddd 	.word	0x0800cddd

0800d0a0 <_printf_common>:
 800d0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0a2:	0015      	movs	r5, r2
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	688a      	ldr	r2, [r1, #8]
 800d0a8:	690b      	ldr	r3, [r1, #16]
 800d0aa:	000c      	movs	r4, r1
 800d0ac:	9000      	str	r0, [sp, #0]
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	da00      	bge.n	800d0b4 <_printf_common+0x14>
 800d0b2:	0013      	movs	r3, r2
 800d0b4:	0022      	movs	r2, r4
 800d0b6:	602b      	str	r3, [r5, #0]
 800d0b8:	3243      	adds	r2, #67	; 0x43
 800d0ba:	7812      	ldrb	r2, [r2, #0]
 800d0bc:	2a00      	cmp	r2, #0
 800d0be:	d001      	beq.n	800d0c4 <_printf_common+0x24>
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	602b      	str	r3, [r5, #0]
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	069b      	lsls	r3, r3, #26
 800d0c8:	d502      	bpl.n	800d0d0 <_printf_common+0x30>
 800d0ca:	682b      	ldr	r3, [r5, #0]
 800d0cc:	3302      	adds	r3, #2
 800d0ce:	602b      	str	r3, [r5, #0]
 800d0d0:	6822      	ldr	r2, [r4, #0]
 800d0d2:	2306      	movs	r3, #6
 800d0d4:	0017      	movs	r7, r2
 800d0d6:	401f      	ands	r7, r3
 800d0d8:	421a      	tst	r2, r3
 800d0da:	d027      	beq.n	800d12c <_printf_common+0x8c>
 800d0dc:	0023      	movs	r3, r4
 800d0de:	3343      	adds	r3, #67	; 0x43
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	1e5a      	subs	r2, r3, #1
 800d0e4:	4193      	sbcs	r3, r2
 800d0e6:	6822      	ldr	r2, [r4, #0]
 800d0e8:	0692      	lsls	r2, r2, #26
 800d0ea:	d430      	bmi.n	800d14e <_printf_common+0xae>
 800d0ec:	0022      	movs	r2, r4
 800d0ee:	9901      	ldr	r1, [sp, #4]
 800d0f0:	9800      	ldr	r0, [sp, #0]
 800d0f2:	9e08      	ldr	r6, [sp, #32]
 800d0f4:	3243      	adds	r2, #67	; 0x43
 800d0f6:	47b0      	blx	r6
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d025      	beq.n	800d148 <_printf_common+0xa8>
 800d0fc:	2306      	movs	r3, #6
 800d0fe:	6820      	ldr	r0, [r4, #0]
 800d100:	682a      	ldr	r2, [r5, #0]
 800d102:	68e1      	ldr	r1, [r4, #12]
 800d104:	2500      	movs	r5, #0
 800d106:	4003      	ands	r3, r0
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d103      	bne.n	800d114 <_printf_common+0x74>
 800d10c:	1a8d      	subs	r5, r1, r2
 800d10e:	43eb      	mvns	r3, r5
 800d110:	17db      	asrs	r3, r3, #31
 800d112:	401d      	ands	r5, r3
 800d114:	68a3      	ldr	r3, [r4, #8]
 800d116:	6922      	ldr	r2, [r4, #16]
 800d118:	4293      	cmp	r3, r2
 800d11a:	dd01      	ble.n	800d120 <_printf_common+0x80>
 800d11c:	1a9b      	subs	r3, r3, r2
 800d11e:	18ed      	adds	r5, r5, r3
 800d120:	2700      	movs	r7, #0
 800d122:	42bd      	cmp	r5, r7
 800d124:	d120      	bne.n	800d168 <_printf_common+0xc8>
 800d126:	2000      	movs	r0, #0
 800d128:	e010      	b.n	800d14c <_printf_common+0xac>
 800d12a:	3701      	adds	r7, #1
 800d12c:	68e3      	ldr	r3, [r4, #12]
 800d12e:	682a      	ldr	r2, [r5, #0]
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	42bb      	cmp	r3, r7
 800d134:	ddd2      	ble.n	800d0dc <_printf_common+0x3c>
 800d136:	0022      	movs	r2, r4
 800d138:	2301      	movs	r3, #1
 800d13a:	9901      	ldr	r1, [sp, #4]
 800d13c:	9800      	ldr	r0, [sp, #0]
 800d13e:	9e08      	ldr	r6, [sp, #32]
 800d140:	3219      	adds	r2, #25
 800d142:	47b0      	blx	r6
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d1f0      	bne.n	800d12a <_printf_common+0x8a>
 800d148:	2001      	movs	r0, #1
 800d14a:	4240      	negs	r0, r0
 800d14c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d14e:	2030      	movs	r0, #48	; 0x30
 800d150:	18e1      	adds	r1, r4, r3
 800d152:	3143      	adds	r1, #67	; 0x43
 800d154:	7008      	strb	r0, [r1, #0]
 800d156:	0021      	movs	r1, r4
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	3145      	adds	r1, #69	; 0x45
 800d15c:	7809      	ldrb	r1, [r1, #0]
 800d15e:	18a2      	adds	r2, r4, r2
 800d160:	3243      	adds	r2, #67	; 0x43
 800d162:	3302      	adds	r3, #2
 800d164:	7011      	strb	r1, [r2, #0]
 800d166:	e7c1      	b.n	800d0ec <_printf_common+0x4c>
 800d168:	0022      	movs	r2, r4
 800d16a:	2301      	movs	r3, #1
 800d16c:	9901      	ldr	r1, [sp, #4]
 800d16e:	9800      	ldr	r0, [sp, #0]
 800d170:	9e08      	ldr	r6, [sp, #32]
 800d172:	321a      	adds	r2, #26
 800d174:	47b0      	blx	r6
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d0e6      	beq.n	800d148 <_printf_common+0xa8>
 800d17a:	3701      	adds	r7, #1
 800d17c:	e7d1      	b.n	800d122 <_printf_common+0x82>
	...

0800d180 <_printf_i>:
 800d180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d182:	b08b      	sub	sp, #44	; 0x2c
 800d184:	9206      	str	r2, [sp, #24]
 800d186:	000a      	movs	r2, r1
 800d188:	3243      	adds	r2, #67	; 0x43
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	9005      	str	r0, [sp, #20]
 800d18e:	9204      	str	r2, [sp, #16]
 800d190:	7e0a      	ldrb	r2, [r1, #24]
 800d192:	000c      	movs	r4, r1
 800d194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d196:	2a78      	cmp	r2, #120	; 0x78
 800d198:	d806      	bhi.n	800d1a8 <_printf_i+0x28>
 800d19a:	2a62      	cmp	r2, #98	; 0x62
 800d19c:	d808      	bhi.n	800d1b0 <_printf_i+0x30>
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	d100      	bne.n	800d1a4 <_printf_i+0x24>
 800d1a2:	e0c0      	b.n	800d326 <_printf_i+0x1a6>
 800d1a4:	2a58      	cmp	r2, #88	; 0x58
 800d1a6:	d052      	beq.n	800d24e <_printf_i+0xce>
 800d1a8:	0026      	movs	r6, r4
 800d1aa:	3642      	adds	r6, #66	; 0x42
 800d1ac:	7032      	strb	r2, [r6, #0]
 800d1ae:	e022      	b.n	800d1f6 <_printf_i+0x76>
 800d1b0:	0010      	movs	r0, r2
 800d1b2:	3863      	subs	r0, #99	; 0x63
 800d1b4:	2815      	cmp	r0, #21
 800d1b6:	d8f7      	bhi.n	800d1a8 <_printf_i+0x28>
 800d1b8:	f7f2 ffae 	bl	8000118 <__gnu_thumb1_case_shi>
 800d1bc:	001f0016 	.word	0x001f0016
 800d1c0:	fff6fff6 	.word	0xfff6fff6
 800d1c4:	fff6fff6 	.word	0xfff6fff6
 800d1c8:	fff6001f 	.word	0xfff6001f
 800d1cc:	fff6fff6 	.word	0xfff6fff6
 800d1d0:	00a8fff6 	.word	0x00a8fff6
 800d1d4:	009a0036 	.word	0x009a0036
 800d1d8:	fff6fff6 	.word	0xfff6fff6
 800d1dc:	fff600b9 	.word	0xfff600b9
 800d1e0:	fff60036 	.word	0xfff60036
 800d1e4:	009efff6 	.word	0x009efff6
 800d1e8:	0026      	movs	r6, r4
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	3642      	adds	r6, #66	; 0x42
 800d1ee:	1d11      	adds	r1, r2, #4
 800d1f0:	6019      	str	r1, [r3, #0]
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	7033      	strb	r3, [r6, #0]
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e0a7      	b.n	800d34a <_printf_i+0x1ca>
 800d1fa:	6808      	ldr	r0, [r1, #0]
 800d1fc:	6819      	ldr	r1, [r3, #0]
 800d1fe:	1d0a      	adds	r2, r1, #4
 800d200:	0605      	lsls	r5, r0, #24
 800d202:	d50b      	bpl.n	800d21c <_printf_i+0x9c>
 800d204:	680d      	ldr	r5, [r1, #0]
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	2d00      	cmp	r5, #0
 800d20a:	da03      	bge.n	800d214 <_printf_i+0x94>
 800d20c:	232d      	movs	r3, #45	; 0x2d
 800d20e:	9a04      	ldr	r2, [sp, #16]
 800d210:	426d      	negs	r5, r5
 800d212:	7013      	strb	r3, [r2, #0]
 800d214:	4b61      	ldr	r3, [pc, #388]	; (800d39c <_printf_i+0x21c>)
 800d216:	270a      	movs	r7, #10
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	e032      	b.n	800d282 <_printf_i+0x102>
 800d21c:	680d      	ldr	r5, [r1, #0]
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	0641      	lsls	r1, r0, #25
 800d222:	d5f1      	bpl.n	800d208 <_printf_i+0x88>
 800d224:	b22d      	sxth	r5, r5
 800d226:	e7ef      	b.n	800d208 <_printf_i+0x88>
 800d228:	680d      	ldr	r5, [r1, #0]
 800d22a:	6819      	ldr	r1, [r3, #0]
 800d22c:	1d08      	adds	r0, r1, #4
 800d22e:	6018      	str	r0, [r3, #0]
 800d230:	062e      	lsls	r6, r5, #24
 800d232:	d501      	bpl.n	800d238 <_printf_i+0xb8>
 800d234:	680d      	ldr	r5, [r1, #0]
 800d236:	e003      	b.n	800d240 <_printf_i+0xc0>
 800d238:	066d      	lsls	r5, r5, #25
 800d23a:	d5fb      	bpl.n	800d234 <_printf_i+0xb4>
 800d23c:	680d      	ldr	r5, [r1, #0]
 800d23e:	b2ad      	uxth	r5, r5
 800d240:	4b56      	ldr	r3, [pc, #344]	; (800d39c <_printf_i+0x21c>)
 800d242:	270a      	movs	r7, #10
 800d244:	9303      	str	r3, [sp, #12]
 800d246:	2a6f      	cmp	r2, #111	; 0x6f
 800d248:	d117      	bne.n	800d27a <_printf_i+0xfa>
 800d24a:	2708      	movs	r7, #8
 800d24c:	e015      	b.n	800d27a <_printf_i+0xfa>
 800d24e:	3145      	adds	r1, #69	; 0x45
 800d250:	700a      	strb	r2, [r1, #0]
 800d252:	4a52      	ldr	r2, [pc, #328]	; (800d39c <_printf_i+0x21c>)
 800d254:	9203      	str	r2, [sp, #12]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	6821      	ldr	r1, [r4, #0]
 800d25a:	ca20      	ldmia	r2!, {r5}
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	0608      	lsls	r0, r1, #24
 800d260:	d550      	bpl.n	800d304 <_printf_i+0x184>
 800d262:	07cb      	lsls	r3, r1, #31
 800d264:	d502      	bpl.n	800d26c <_printf_i+0xec>
 800d266:	2320      	movs	r3, #32
 800d268:	4319      	orrs	r1, r3
 800d26a:	6021      	str	r1, [r4, #0]
 800d26c:	2710      	movs	r7, #16
 800d26e:	2d00      	cmp	r5, #0
 800d270:	d103      	bne.n	800d27a <_printf_i+0xfa>
 800d272:	2320      	movs	r3, #32
 800d274:	6822      	ldr	r2, [r4, #0]
 800d276:	439a      	bics	r2, r3
 800d278:	6022      	str	r2, [r4, #0]
 800d27a:	0023      	movs	r3, r4
 800d27c:	2200      	movs	r2, #0
 800d27e:	3343      	adds	r3, #67	; 0x43
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	60a3      	str	r3, [r4, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	db03      	blt.n	800d292 <_printf_i+0x112>
 800d28a:	2204      	movs	r2, #4
 800d28c:	6821      	ldr	r1, [r4, #0]
 800d28e:	4391      	bics	r1, r2
 800d290:	6021      	str	r1, [r4, #0]
 800d292:	2d00      	cmp	r5, #0
 800d294:	d102      	bne.n	800d29c <_printf_i+0x11c>
 800d296:	9e04      	ldr	r6, [sp, #16]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00c      	beq.n	800d2b6 <_printf_i+0x136>
 800d29c:	9e04      	ldr	r6, [sp, #16]
 800d29e:	0028      	movs	r0, r5
 800d2a0:	0039      	movs	r1, r7
 800d2a2:	f7f2 ffc9 	bl	8000238 <__aeabi_uidivmod>
 800d2a6:	9b03      	ldr	r3, [sp, #12]
 800d2a8:	3e01      	subs	r6, #1
 800d2aa:	5c5b      	ldrb	r3, [r3, r1]
 800d2ac:	7033      	strb	r3, [r6, #0]
 800d2ae:	002b      	movs	r3, r5
 800d2b0:	0005      	movs	r5, r0
 800d2b2:	429f      	cmp	r7, r3
 800d2b4:	d9f3      	bls.n	800d29e <_printf_i+0x11e>
 800d2b6:	2f08      	cmp	r7, #8
 800d2b8:	d109      	bne.n	800d2ce <_printf_i+0x14e>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	07db      	lsls	r3, r3, #31
 800d2be:	d506      	bpl.n	800d2ce <_printf_i+0x14e>
 800d2c0:	6863      	ldr	r3, [r4, #4]
 800d2c2:	6922      	ldr	r2, [r4, #16]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	dc02      	bgt.n	800d2ce <_printf_i+0x14e>
 800d2c8:	2330      	movs	r3, #48	; 0x30
 800d2ca:	3e01      	subs	r6, #1
 800d2cc:	7033      	strb	r3, [r6, #0]
 800d2ce:	9b04      	ldr	r3, [sp, #16]
 800d2d0:	1b9b      	subs	r3, r3, r6
 800d2d2:	6123      	str	r3, [r4, #16]
 800d2d4:	9b07      	ldr	r3, [sp, #28]
 800d2d6:	0021      	movs	r1, r4
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	9805      	ldr	r0, [sp, #20]
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	aa09      	add	r2, sp, #36	; 0x24
 800d2e0:	f7ff fede 	bl	800d0a0 <_printf_common>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d135      	bne.n	800d354 <_printf_i+0x1d4>
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	4240      	negs	r0, r0
 800d2ec:	b00b      	add	sp, #44	; 0x2c
 800d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	6809      	ldr	r1, [r1, #0]
 800d2f4:	430a      	orrs	r2, r1
 800d2f6:	6022      	str	r2, [r4, #0]
 800d2f8:	0022      	movs	r2, r4
 800d2fa:	2178      	movs	r1, #120	; 0x78
 800d2fc:	3245      	adds	r2, #69	; 0x45
 800d2fe:	7011      	strb	r1, [r2, #0]
 800d300:	4a27      	ldr	r2, [pc, #156]	; (800d3a0 <_printf_i+0x220>)
 800d302:	e7a7      	b.n	800d254 <_printf_i+0xd4>
 800d304:	0648      	lsls	r0, r1, #25
 800d306:	d5ac      	bpl.n	800d262 <_printf_i+0xe2>
 800d308:	b2ad      	uxth	r5, r5
 800d30a:	e7aa      	b.n	800d262 <_printf_i+0xe2>
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	680d      	ldr	r5, [r1, #0]
 800d310:	1d10      	adds	r0, r2, #4
 800d312:	6949      	ldr	r1, [r1, #20]
 800d314:	6018      	str	r0, [r3, #0]
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	062e      	lsls	r6, r5, #24
 800d31a:	d501      	bpl.n	800d320 <_printf_i+0x1a0>
 800d31c:	6019      	str	r1, [r3, #0]
 800d31e:	e002      	b.n	800d326 <_printf_i+0x1a6>
 800d320:	066d      	lsls	r5, r5, #25
 800d322:	d5fb      	bpl.n	800d31c <_printf_i+0x19c>
 800d324:	8019      	strh	r1, [r3, #0]
 800d326:	2300      	movs	r3, #0
 800d328:	9e04      	ldr	r6, [sp, #16]
 800d32a:	6123      	str	r3, [r4, #16]
 800d32c:	e7d2      	b.n	800d2d4 <_printf_i+0x154>
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	1d11      	adds	r1, r2, #4
 800d332:	6019      	str	r1, [r3, #0]
 800d334:	6816      	ldr	r6, [r2, #0]
 800d336:	2100      	movs	r1, #0
 800d338:	0030      	movs	r0, r6
 800d33a:	6862      	ldr	r2, [r4, #4]
 800d33c:	f000 f834 	bl	800d3a8 <memchr>
 800d340:	2800      	cmp	r0, #0
 800d342:	d001      	beq.n	800d348 <_printf_i+0x1c8>
 800d344:	1b80      	subs	r0, r0, r6
 800d346:	6060      	str	r0, [r4, #4]
 800d348:	6863      	ldr	r3, [r4, #4]
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	2300      	movs	r3, #0
 800d34e:	9a04      	ldr	r2, [sp, #16]
 800d350:	7013      	strb	r3, [r2, #0]
 800d352:	e7bf      	b.n	800d2d4 <_printf_i+0x154>
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	0032      	movs	r2, r6
 800d358:	9906      	ldr	r1, [sp, #24]
 800d35a:	9805      	ldr	r0, [sp, #20]
 800d35c:	9d07      	ldr	r5, [sp, #28]
 800d35e:	47a8      	blx	r5
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d0c1      	beq.n	800d2e8 <_printf_i+0x168>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	079b      	lsls	r3, r3, #30
 800d368:	d415      	bmi.n	800d396 <_printf_i+0x216>
 800d36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36c:	68e0      	ldr	r0, [r4, #12]
 800d36e:	4298      	cmp	r0, r3
 800d370:	dabc      	bge.n	800d2ec <_printf_i+0x16c>
 800d372:	0018      	movs	r0, r3
 800d374:	e7ba      	b.n	800d2ec <_printf_i+0x16c>
 800d376:	0022      	movs	r2, r4
 800d378:	2301      	movs	r3, #1
 800d37a:	9906      	ldr	r1, [sp, #24]
 800d37c:	9805      	ldr	r0, [sp, #20]
 800d37e:	9e07      	ldr	r6, [sp, #28]
 800d380:	3219      	adds	r2, #25
 800d382:	47b0      	blx	r6
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d0af      	beq.n	800d2e8 <_printf_i+0x168>
 800d388:	3501      	adds	r5, #1
 800d38a:	68e3      	ldr	r3, [r4, #12]
 800d38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d38e:	1a9b      	subs	r3, r3, r2
 800d390:	42ab      	cmp	r3, r5
 800d392:	dcf0      	bgt.n	800d376 <_printf_i+0x1f6>
 800d394:	e7e9      	b.n	800d36a <_printf_i+0x1ea>
 800d396:	2500      	movs	r5, #0
 800d398:	e7f7      	b.n	800d38a <_printf_i+0x20a>
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	0800d6a5 	.word	0x0800d6a5
 800d3a0:	0800d6b6 	.word	0x0800d6b6

0800d3a4 <__retarget_lock_acquire_recursive>:
 800d3a4:	4770      	bx	lr

0800d3a6 <__retarget_lock_release_recursive>:
 800d3a6:	4770      	bx	lr

0800d3a8 <memchr>:
 800d3a8:	b2c9      	uxtb	r1, r1
 800d3aa:	1882      	adds	r2, r0, r2
 800d3ac:	4290      	cmp	r0, r2
 800d3ae:	d101      	bne.n	800d3b4 <memchr+0xc>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	4770      	bx	lr
 800d3b4:	7803      	ldrb	r3, [r0, #0]
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	d0fb      	beq.n	800d3b2 <memchr+0xa>
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	e7f6      	b.n	800d3ac <memchr+0x4>

0800d3be <memmove>:
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	4288      	cmp	r0, r1
 800d3c2:	d902      	bls.n	800d3ca <memmove+0xc>
 800d3c4:	188b      	adds	r3, r1, r2
 800d3c6:	4298      	cmp	r0, r3
 800d3c8:	d303      	bcc.n	800d3d2 <memmove+0x14>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e007      	b.n	800d3de <memmove+0x20>
 800d3ce:	5c8b      	ldrb	r3, [r1, r2]
 800d3d0:	5483      	strb	r3, [r0, r2]
 800d3d2:	3a01      	subs	r2, #1
 800d3d4:	d2fb      	bcs.n	800d3ce <memmove+0x10>
 800d3d6:	bd10      	pop	{r4, pc}
 800d3d8:	5ccc      	ldrb	r4, [r1, r3]
 800d3da:	54c4      	strb	r4, [r0, r3]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d1fa      	bne.n	800d3d8 <memmove+0x1a>
 800d3e2:	e7f8      	b.n	800d3d6 <memmove+0x18>

0800d3e4 <_realloc_r>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	0007      	movs	r7, r0
 800d3e8:	000d      	movs	r5, r1
 800d3ea:	0016      	movs	r6, r2
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	d105      	bne.n	800d3fc <_realloc_r+0x18>
 800d3f0:	0011      	movs	r1, r2
 800d3f2:	f7ff fc53 	bl	800cc9c <_malloc_r>
 800d3f6:	0004      	movs	r4, r0
 800d3f8:	0020      	movs	r0, r4
 800d3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3fc:	2a00      	cmp	r2, #0
 800d3fe:	d103      	bne.n	800d408 <_realloc_r+0x24>
 800d400:	f7ff fc02 	bl	800cc08 <_free_r>
 800d404:	0034      	movs	r4, r6
 800d406:	e7f7      	b.n	800d3f8 <_realloc_r+0x14>
 800d408:	f000 f812 	bl	800d430 <_malloc_usable_size_r>
 800d40c:	002c      	movs	r4, r5
 800d40e:	42b0      	cmp	r0, r6
 800d410:	d2f2      	bcs.n	800d3f8 <_realloc_r+0x14>
 800d412:	0031      	movs	r1, r6
 800d414:	0038      	movs	r0, r7
 800d416:	f7ff fc41 	bl	800cc9c <_malloc_r>
 800d41a:	1e04      	subs	r4, r0, #0
 800d41c:	d0ec      	beq.n	800d3f8 <_realloc_r+0x14>
 800d41e:	0029      	movs	r1, r5
 800d420:	0032      	movs	r2, r6
 800d422:	f7ff fbdf 	bl	800cbe4 <memcpy>
 800d426:	0029      	movs	r1, r5
 800d428:	0038      	movs	r0, r7
 800d42a:	f7ff fbed 	bl	800cc08 <_free_r>
 800d42e:	e7e3      	b.n	800d3f8 <_realloc_r+0x14>

0800d430 <_malloc_usable_size_r>:
 800d430:	1f0b      	subs	r3, r1, #4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	1f18      	subs	r0, r3, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	da01      	bge.n	800d43e <_malloc_usable_size_r+0xe>
 800d43a:	580b      	ldr	r3, [r1, r0]
 800d43c:	18c0      	adds	r0, r0, r3
 800d43e:	4770      	bx	lr

0800d440 <_init>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	46c0      	nop			; (mov r8, r8)
 800d444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d446:	bc08      	pop	{r3}
 800d448:	469e      	mov	lr, r3
 800d44a:	4770      	bx	lr

0800d44c <_fini>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d452:	bc08      	pop	{r3}
 800d454:	469e      	mov	lr, r3
 800d456:	4770      	bx	lr
