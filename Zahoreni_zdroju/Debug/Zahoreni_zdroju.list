
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d044  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d394  0800d394  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d394  0800d394  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d394  0800d394  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d398  0800d398  0001d398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001494  200001e0  0800d57c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800d57c  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a340  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2d  00000000  00000000  0004a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0004f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00050a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb2e  00000000  00000000  00051f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fba4  00000000  00000000  00071aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a42c6  00000000  00000000  00091652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0013596c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d0ec 	.word	0x0800d0ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d0ec 	.word	0x0800d0ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0a5      	sub	sp, #148	; 0x94
 800041c:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 800041e:	4bd3      	ldr	r3, [pc, #844]	; (800076c <comHandler+0x354>)
 8000420:	7a1b      	ldrb	r3, [r3, #8]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d042      	beq.n	80004b2 <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800042c:	e02e      	b.n	800048c <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 800042e:	2357      	movs	r3, #87	; 0x57
 8000430:	2220      	movs	r2, #32
 8000432:	4694      	mov	ip, r2
 8000434:	44bc      	add	ip, r7
 8000436:	4463      	add	r3, ip
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b73      	cmp	r3, #115	; 0x73
 800043c:	d008      	beq.n	8000450 <comHandler+0x38>
 800043e:	dc1f      	bgt.n	8000480 <comHandler+0x68>
 8000440:	2b70      	cmp	r3, #112	; 0x70
 8000442:	d011      	beq.n	8000468 <comHandler+0x50>
 8000444:	dc1c      	bgt.n	8000480 <comHandler+0x68>
 8000446:	2b63      	cmp	r3, #99	; 0x63
 8000448:	d008      	beq.n	800045c <comHandler+0x44>
 800044a:	2b6b      	cmp	r3, #107	; 0x6b
 800044c:	d012      	beq.n	8000474 <comHandler+0x5c>
 800044e:	e017      	b.n	8000480 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000450:	4bc6      	ldr	r3, [pc, #792]	; (800076c <comHandler+0x354>)
 8000452:	7b1a      	ldrb	r2, [r3, #12]
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800045a:	e017      	b.n	800048c <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 800045c:	4bc3      	ldr	r3, [pc, #780]	; (800076c <comHandler+0x354>)
 800045e:	7b1a      	ldrb	r2, [r3, #12]
 8000460:	2102      	movs	r1, #2
 8000462:	430a      	orrs	r2, r1
 8000464:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000466:	e011      	b.n	800048c <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000468:	4bc0      	ldr	r3, [pc, #768]	; (800076c <comHandler+0x354>)
 800046a:	7b1a      	ldrb	r2, [r3, #12]
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000472:	e00b      	b.n	800048c <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000474:	4bbd      	ldr	r3, [pc, #756]	; (800076c <comHandler+0x354>)
 8000476:	7b1a      	ldrb	r2, [r3, #12]
 8000478:	2108      	movs	r1, #8
 800047a:	430a      	orrs	r2, r1
 800047c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800047e:	e005      	b.n	800048c <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000480:	4bba      	ldr	r3, [pc, #744]	; (800076c <comHandler+0x354>)
 8000482:	7b1a      	ldrb	r2, [r3, #12]
 8000484:	2110      	movs	r1, #16
 8000486:	430a      	orrs	r2, r1
 8000488:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800048a:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800048c:	4bb8      	ldr	r3, [pc, #736]	; (8000770 <comHandler+0x358>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2257      	movs	r2, #87	; 0x57
 8000492:	2120      	movs	r1, #32
 8000494:	468c      	mov	ip, r1
 8000496:	44bc      	add	ip, r7
 8000498:	4462      	add	r2, ip
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 f99c 	bl	80017da <pop>
 80004a2:	0003      	movs	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d1c2      	bne.n	800042e <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 80004a8:	4bb0      	ldr	r3, [pc, #704]	; (800076c <comHandler+0x354>)
 80004aa:	7a1a      	ldrb	r2, [r3, #8]
 80004ac:	2101      	movs	r1, #1
 80004ae:	438a      	bics	r2, r1
 80004b0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 80004b2:	4bae      	ldr	r3, [pc, #696]	; (800076c <comHandler+0x354>)
 80004b4:	7e1b      	ldrb	r3, [r3, #24]
 80004b6:	2202      	movs	r2, #2
 80004b8:	4013      	ands	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d067      	beq.n	8000590 <comHandler+0x178>
	{
		char testPhaseChr;
		switch(currentPhase())
 80004c0:	f001 fcd6 	bl	8001e70 <currentPhase>
 80004c4:	0003      	movs	r3, r0
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d834      	bhi.n	8000534 <comHandler+0x11c>
 80004ca:	009a      	lsls	r2, r3, #2
 80004cc:	4ba9      	ldr	r3, [pc, #676]	; (8000774 <comHandler+0x35c>)
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 80004d4:	2367      	movs	r3, #103	; 0x67
 80004d6:	2220      	movs	r2, #32
 80004d8:	4694      	mov	ip, r2
 80004da:	44bc      	add	ip, r7
 80004dc:	4463      	add	r3, ip
 80004de:	2273      	movs	r2, #115	; 0x73
 80004e0:	701a      	strb	r2, [r3, #0]
			break;
 80004e2:	e02f      	b.n	8000544 <comHandler+0x12c>
		case START_DONE:
			testPhaseChr = 's';
 80004e4:	2367      	movs	r3, #103	; 0x67
 80004e6:	2220      	movs	r2, #32
 80004e8:	4694      	mov	ip, r2
 80004ea:	44bc      	add	ip, r7
 80004ec:	4463      	add	r3, ip
 80004ee:	2273      	movs	r2, #115	; 0x73
 80004f0:	701a      	strb	r2, [r3, #0]
			break;
 80004f2:	e027      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80004f4:	2367      	movs	r3, #103	; 0x67
 80004f6:	2220      	movs	r2, #32
 80004f8:	4694      	mov	ip, r2
 80004fa:	44bc      	add	ip, r7
 80004fc:	4463      	add	r3, ip
 80004fe:	226d      	movs	r2, #109	; 0x6d
 8000500:	701a      	strb	r2, [r3, #0]
			break;
 8000502:	e01f      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000504:	2367      	movs	r3, #103	; 0x67
 8000506:	2220      	movs	r2, #32
 8000508:	4694      	mov	ip, r2
 800050a:	44bc      	add	ip, r7
 800050c:	4463      	add	r3, ip
 800050e:	226d      	movs	r2, #109	; 0x6d
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e017      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000514:	2367      	movs	r3, #103	; 0x67
 8000516:	2220      	movs	r2, #32
 8000518:	4694      	mov	ip, r2
 800051a:	44bc      	add	ip, r7
 800051c:	4463      	add	r3, ip
 800051e:	2262      	movs	r2, #98	; 0x62
 8000520:	701a      	strb	r2, [r3, #0]
			break;
 8000522:	e00f      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000524:	2367      	movs	r3, #103	; 0x67
 8000526:	2220      	movs	r2, #32
 8000528:	4694      	mov	ip, r2
 800052a:	44bc      	add	ip, r7
 800052c:	4463      	add	r3, ip
 800052e:	224d      	movs	r2, #77	; 0x4d
 8000530:	701a      	strb	r2, [r3, #0]
			break;
 8000532:	e007      	b.n	8000544 <comHandler+0x12c>
		default:
			testPhaseChr = 'e';
 8000534:	2367      	movs	r3, #103	; 0x67
 8000536:	2220      	movs	r2, #32
 8000538:	4694      	mov	ip, r2
 800053a:	44bc      	add	ip, r7
 800053c:	4463      	add	r3, ip
 800053e:	2265      	movs	r2, #101	; 0x65
 8000540:	701a      	strb	r2, [r3, #0]
			break;
 8000542:	46c0      	nop			; (mov r8, r8)
		}
		char txt[30];
#ifdef __APP_COMPATIBILITY__
		sprintf(txt, "#%c\n", testPhaseChr);
#else
		sprintf(txt, "Test progress #%c\n", testPhaseChr);
 8000544:	2367      	movs	r3, #103	; 0x67
 8000546:	2220      	movs	r2, #32
 8000548:	4694      	mov	ip, r2
 800054a:	44bc      	add	ip, r7
 800054c:	4463      	add	r3, ip
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4989      	ldr	r1, [pc, #548]	; (8000778 <comHandler+0x360>)
 8000552:	2338      	movs	r3, #56	; 0x38
 8000554:	001c      	movs	r4, r3
 8000556:	2020      	movs	r0, #32
 8000558:	4684      	mov	ip, r0
 800055a:	44bc      	add	ip, r7
 800055c:	4463      	add	r3, ip
 800055e:	0018      	movs	r0, r3
 8000560:	f00c fa58 	bl	800ca14 <siprintf>
#endif
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000564:	4b85      	ldr	r3, [pc, #532]	; (800077c <comHandler+0x364>)
 8000566:	681e      	ldr	r6, [r3, #0]
 8000568:	0023      	movs	r3, r4
 800056a:	001c      	movs	r4, r3
 800056c:	2220      	movs	r2, #32
 800056e:	4694      	mov	ip, r2
 8000570:	44bc      	add	ip, r7
 8000572:	4463      	add	r3, ip
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <strlen>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	2120      	movs	r1, #32
 8000582:	468c      	mov	ip, r1
 8000584:	44bc      	add	ip, r7
 8000586:	4463      	add	r3, ip
 8000588:	0019      	movs	r1, r3
 800058a:	0030      	movs	r0, r6
 800058c:	f001 f8fd 	bl	800178a <pushStr>
	}

	if(flags.meas.measComplete)
 8000590:	4b76      	ldr	r3, [pc, #472]	; (800076c <comHandler+0x354>)
 8000592:	7d1b      	ldrb	r3, [r3, #20]
 8000594:	2202      	movs	r2, #2
 8000596:	4013      	ands	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <comHandler+0x188>
 800059e:	e08b      	b.n	80006b8 <comHandler+0x2a0>
	{
		//char txt[10];
		//sprintf(txt, "#%d\n", testNum);
		//pushStr(USB_Tx_Buffer, txt, strlen(txt));
		push(USB_Tx_Buffer, '#');
 80005a0:	4b76      	ldr	r3, [pc, #472]	; (800077c <comHandler+0x364>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2123      	movs	r1, #35	; 0x23
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f8b8 	bl	800171c <push>
		push(USB_Tx_Buffer, testNum);
 80005ac:	4b73      	ldr	r3, [pc, #460]	; (800077c <comHandler+0x364>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b73      	ldr	r3, [pc, #460]	; (8000780 <comHandler+0x368>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	0019      	movs	r1, r3
 80005b8:	0010      	movs	r0, r2
 80005ba:	f001 f8af 	bl	800171c <push>
		push(USB_Tx_Buffer, '\n');
 80005be:	4b6f      	ldr	r3, [pc, #444]	; (800077c <comHandler+0x364>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	210a      	movs	r1, #10
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f8a9 	bl	800171c <push>
		}
		pushStr(USB_Tx_Buffer, measResult, 32);
		*/


		if(flags.meas.onlyBattery)
 80005ca:	4b68      	ldr	r3, [pc, #416]	; (800076c <comHandler+0x354>)
 80005cc:	7d1b      	ldrb	r3, [r3, #20]
 80005ce:	2220      	movs	r2, #32
 80005d0:	4013      	ands	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d02c      	beq.n	8000632 <comHandler+0x21a>
		{
			char res[20] = {0};
 80005d8:	2624      	movs	r6, #36	; 0x24
 80005da:	2320      	movs	r3, #32
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	199b      	adds	r3, r3, r6
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2210      	movs	r2, #16
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f00c f950 	bl	800c890 <memset>
			sprintf(res, "%d;\n", ADC_Results[12]);
 80005f0:	4b64      	ldr	r3, [pc, #400]	; (8000784 <comHandler+0x36c>)
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	4964      	ldr	r1, [pc, #400]	; (8000788 <comHandler+0x370>)
 80005f6:	0034      	movs	r4, r6
 80005f8:	2320      	movs	r3, #32
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	199b      	adds	r3, r3, r6
 80005fe:	0018      	movs	r0, r3
 8000600:	f00c fa08 	bl	800ca14 <siprintf>
			pushStr(USB_Tx_Buffer, res, strlen(res));
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <comHandler+0x364>)
 8000606:	681e      	ldr	r6, [r3, #0]
 8000608:	0023      	movs	r3, r4
 800060a:	001c      	movs	r4, r3
 800060c:	2220      	movs	r2, #32
 800060e:	4694      	mov	ip, r2
 8000610:	44bc      	add	ip, r7
 8000612:	4463      	add	r3, ip
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fd77 	bl	8000108 <strlen>
 800061a:	0003      	movs	r3, r0
 800061c:	001a      	movs	r2, r3
 800061e:	0023      	movs	r3, r4
 8000620:	2120      	movs	r1, #32
 8000622:	468c      	mov	ip, r1
 8000624:	44bc      	add	ip, r7
 8000626:	4463      	add	r3, ip
 8000628:	0019      	movs	r1, r3
 800062a:	0030      	movs	r0, r6
 800062c:	f001 f8ad 	bl	800178a <pushStr>
 8000630:	e03d      	b.n	80006ae <comHandler+0x296>
		}
		else
		{
			for(int i = 0; i < 7; i++)
 8000632:	2300      	movs	r3, #0
 8000634:	2288      	movs	r2, #136	; 0x88
 8000636:	18ba      	adds	r2, r7, r2
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	e02d      	b.n	8000698 <comHandler+0x280>
			{
				char res[20];
				sprintf(res, "%d;", ADC_Results[2*i]);
 800063c:	2388      	movs	r3, #136	; 0x88
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	005a      	lsls	r2, r3, #1
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <comHandler+0x36c>)
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	58d2      	ldr	r2, [r2, r3]
 800064a:	4950      	ldr	r1, [pc, #320]	; (800078c <comHandler+0x374>)
 800064c:	2310      	movs	r3, #16
 800064e:	001c      	movs	r4, r3
 8000650:	2020      	movs	r0, #32
 8000652:	4684      	mov	ip, r0
 8000654:	44bc      	add	ip, r7
 8000656:	4463      	add	r3, ip
 8000658:	0018      	movs	r0, r3
 800065a:	f00c f9db 	bl	800ca14 <siprintf>
				pushStr(USB_Tx_Buffer, res, strlen(res));
 800065e:	4b47      	ldr	r3, [pc, #284]	; (800077c <comHandler+0x364>)
 8000660:	681e      	ldr	r6, [r3, #0]
 8000662:	0023      	movs	r3, r4
 8000664:	001c      	movs	r4, r3
 8000666:	2220      	movs	r2, #32
 8000668:	4694      	mov	ip, r2
 800066a:	44bc      	add	ip, r7
 800066c:	4463      	add	r3, ip
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fd4a 	bl	8000108 <strlen>
 8000674:	0003      	movs	r3, r0
 8000676:	001a      	movs	r2, r3
 8000678:	0023      	movs	r3, r4
 800067a:	2120      	movs	r1, #32
 800067c:	468c      	mov	ip, r1
 800067e:	44bc      	add	ip, r7
 8000680:	4463      	add	r3, ip
 8000682:	0019      	movs	r1, r3
 8000684:	0030      	movs	r0, r6
 8000686:	f001 f880 	bl	800178a <pushStr>
			for(int i = 0; i < 7; i++)
 800068a:	2388      	movs	r3, #136	; 0x88
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	2288      	movs	r2, #136	; 0x88
 8000694:	18ba      	adds	r2, r7, r2
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	2388      	movs	r3, #136	; 0x88
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	ddcc      	ble.n	800063c <comHandler+0x224>
			}
			push(USB_Tx_Buffer, 0x0A);
 80006a2:	4b36      	ldr	r3, [pc, #216]	; (800077c <comHandler+0x364>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	210a      	movs	r1, #10
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f837 	bl	800171c <push>
		}

		testNum++;
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <comHandler+0x368>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <comHandler+0x368>)
 80006b6:	601a      	str	r2, [r3, #0]
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <comHandler+0x364>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	7d1b      	ldrb	r3, [r3, #20]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d112      	bne.n	80006e8 <comHandler+0x2d0>
	{
		char msg[] = {"Buffer full\n"};
 80006c2:	2320      	movs	r3, #32
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	4a32      	ldr	r2, [pc, #200]	; (8000790 <comHandler+0x378>)
 80006c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ca:	c313      	stmia	r3!, {r0, r1, r4}
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80006d0:	2320      	movs	r3, #32
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fd17 	bl	8000108 <strlen>
 80006da:	0002      	movs	r2, r0
 80006dc:	2320      	movs	r3, #32
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f00b fbda 	bl	800be9c <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <comHandler+0x364>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d072      	beq.n	80007d8 <comHandler+0x3c0>
	{
 80006f2:	466b      	mov	r3, sp
 80006f4:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <comHandler+0x364>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	18ba      	adds	r2, r7, r2
 8000700:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1e5a      	subs	r2, r3, #1
 800070a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800070c:	001a      	movs	r2, r3
 800070e:	60ba      	str	r2, [r7, #8]
 8000710:	2200      	movs	r2, #0
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	0002      	movs	r2, r0
 800071a:	0f52      	lsrs	r2, r2, #29
 800071c:	000c      	movs	r4, r1
 800071e:	00e4      	lsls	r4, r4, #3
 8000720:	61fc      	str	r4, [r7, #28]
 8000722:	69fc      	ldr	r4, [r7, #28]
 8000724:	4314      	orrs	r4, r2
 8000726:	61fc      	str	r4, [r7, #28]
 8000728:	0002      	movs	r2, r0
 800072a:	00d2      	lsls	r2, r2, #3
 800072c:	61ba      	str	r2, [r7, #24]
 800072e:	001a      	movs	r2, r3
 8000730:	603a      	str	r2, [r7, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	0002      	movs	r2, r0
 800073c:	0f52      	lsrs	r2, r2, #29
 800073e:	000c      	movs	r4, r1
 8000740:	00e4      	lsls	r4, r4, #3
 8000742:	617c      	str	r4, [r7, #20]
 8000744:	697c      	ldr	r4, [r7, #20]
 8000746:	4314      	orrs	r4, r2
 8000748:	617c      	str	r4, [r7, #20]
 800074a:	0002      	movs	r2, r0
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	613a      	str	r2, [r7, #16]
 8000750:	3307      	adds	r3, #7
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	466a      	mov	r2, sp
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	469d      	mov	sp, r3
 800075c:	466b      	mov	r3, sp
 800075e:	3300      	adds	r3, #0
 8000760:	67bb      	str	r3, [r7, #120]	; 0x78
		for(int i = 0; i < size; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	228c      	movs	r2, #140	; 0x8c
 8000766:	18ba      	adds	r2, r7, r2
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	e024      	b.n	80007b6 <comHandler+0x39e>
 800076c:	20000620 	.word	0x20000620
 8000770:	2000116c 	.word	0x2000116c
 8000774:	0800d1c4 	.word	0x0800d1c4
 8000778:	0800d104 	.word	0x0800d104
 800077c:	20000490 	.word	0x20000490
 8000780:	20000260 	.word	0x20000260
 8000784:	200001fc 	.word	0x200001fc
 8000788:	0800d118 	.word	0x0800d118
 800078c:	0800d120 	.word	0x0800d120
 8000790:	0800d124 	.word	0x0800d124
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <comHandler+0x3c8>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800079a:	238c      	movs	r3, #140	; 0x8c
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	0019      	movs	r1, r3
 80007a4:	f001 f819 	bl	80017da <pop>
		for(int i = 0; i < size; i++)
 80007a8:	238c      	movs	r3, #140	; 0x8c
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	228c      	movs	r2, #140	; 0x8c
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	238c      	movs	r3, #140	; 0x8c
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbe6      	blt.n	8000794 <comHandler+0x37c>
		}
		CDC_Transmit_FS(tmpStr, size);
 80007c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	18ba      	adds	r2, r7, r2
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f00b fb63 	bl	800be9c <CDC_Transmit_FS>
 80007d6:	46b5      	mov	sp, r6
	}

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b025      	add	sp, #148	; 0x94
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e0:	20000490 	.word	0x20000490

080007e4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dbb      	adds	r3, r7, #6
 80007ee:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d104      	bne.n	8000806 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_GPIO_EXTI_Callback+0x40>)
 80007fe:	791a      	ldrb	r2, [r3, #4]
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d104      	bne.n	800081c <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HAL_GPIO_EXTI_Callback+0x40>)
 8000814:	791a      	ldrb	r2, [r3, #4]
 8000816:	2104      	movs	r1, #4
 8000818:	430a      	orrs	r2, r1
 800081a:	711a      	strb	r2, [r3, #4]
	}
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000620 	.word	0x20000620

08000828 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000834:	429a      	cmp	r2, r3
 8000836:	d104      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
	}
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	200005d8 	.word	0x200005d8
 8000850:	20000620 	.word	0x20000620

08000854 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	flags.meas.measDataReady = 1;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <HAL_ADC_ConvCpltCallback+0x1c>)
 800085e:	7d1a      	ldrb	r2, [r3, #20]
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	751a      	strb	r2, [r3, #20]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000620 	.word	0x20000620

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f001 fd98 	bl	80023ac <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f000 ff18 	bl	80016b2 <createBuffer>
 8000882:	0002      	movs	r2, r0
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <main+0xc4>)
 8000886:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000888:	2064      	movs	r0, #100	; 0x64
 800088a:	f000 ff12 	bl	80016b2 <createBuffer>
 800088e:	0002      	movs	r2, r0
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <main+0xc8>)
 8000892:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8000894:	23fa      	movs	r3, #250	; 0xfa
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f000 ff0a 	bl	80016b2 <createBuffer>
 800089e:	0002      	movs	r2, r0
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <main+0xcc>)
 80008a2:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80008a4:	23fa      	movs	r3, #250	; 0xfa
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 ff02 	bl	80016b2 <createBuffer>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <main+0xd0>)
 80008b2:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f84e 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f000 fab6 	bl	8000e28 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008bc:	f00b fa44 	bl	800bd48 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80008c0:	f000 fa94 	bl	8000dec <MX_DMA_Init>
  MX_ADC_Init();
 80008c4:	f000 f8b2 	bl	8000a2c <MX_ADC_Init>
  MX_SPI1_Init();
 80008c8:	f000 f9ce 	bl	8000c68 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80008cc:	f000 fa5e 	bl	8000d8c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008d0:	f000 fa10 	bl	8000cf4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <main+0xd4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fe5f 	bl	800359e <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <main+0xd4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fe59 	bl	800359e <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80008ec:	f000 ffec 	bl	80018c8 <regInit>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d004      	beq.n	80008fe <main+0x8a>
  {
	  flags.conErr = 1;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <main+0xd8>)
 80008f6:	7e1a      	ldrb	r2, [r3, #24]
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <main+0xdc>)
 8000900:	0018      	movs	r0, r3
 8000902:	f006 f8bb 	bl	8006a7c <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <main+0xd8>)
 8000908:	7c1a      	ldrb	r2, [r3, #16]
 800090a:	2102      	movs	r1, #2
 800090c:	430a      	orrs	r2, r1
 800090e:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <main+0xd8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2201      	movs	r2, #1
 8000916:	4013      	ands	r3, r2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f8      	beq.n	8000910 <main+0x9c>
	  {
		  clkHandler();
 800091e:	f000 fb6f 	bl	8001000 <clkHandler>
		  buttonDebounce();
 8000922:	f000 fbeb 	bl	80010fc <buttonDebounce>
		  comHandler();
 8000926:	f7ff fd77 	bl	8000418 <comHandler>
		  UI_Handler();
 800092a:	f000 fc71 	bl	8001210 <UI_Handler>
		  testHandler();
 800092e:	f001 faa9 	bl	8001e84 <testHandler>
		  measHandler();
 8000932:	f000 fd83 	bl	800143c <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000936:	e7eb      	b.n	8000910 <main+0x9c>
 8000938:	20000494 	.word	0x20000494
 800093c:	200006c8 	.word	0x200006c8
 8000940:	2000116c 	.word	0x2000116c
 8000944:	20000490 	.word	0x20000490
 8000948:	48000800 	.word	0x48000800
 800094c:	20000620 	.word	0x20000620
 8000950:	200005d8 	.word	0x200005d8

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b099      	sub	sp, #100	; 0x64
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	242c      	movs	r4, #44	; 0x2c
 800095c:	193b      	adds	r3, r7, r4
 800095e:	0018      	movs	r0, r3
 8000960:	2334      	movs	r3, #52	; 0x34
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f00b ff93 	bl	800c890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	231c      	movs	r3, #28
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	2310      	movs	r3, #16
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f00b ff8b 	bl	800c890 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097a:	003b      	movs	r3, r7
 800097c:	0018      	movs	r0, r3
 800097e:	231c      	movs	r3, #28
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f00b ff84 	bl	800c890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000988:	0021      	movs	r1, r4
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2232      	movs	r2, #50	; 0x32
 800098e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2201      	movs	r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2210      	movs	r2, #16
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2210      	movs	r2, #16
 80009ac:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0212      	lsls	r2, r2, #8
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	0352      	lsls	r2, r2, #13
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f004 fcad 	bl	800532c <HAL_RCC_OscConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009d6:	f000 fe67 	bl	80016a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	211c      	movs	r1, #28
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2207      	movs	r2, #7
 80009e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2101      	movs	r1, #1
 80009f8:	0018      	movs	r0, r3
 80009fa:	f005 f81d 	bl	8005a38 <HAL_RCC_ClockConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a02:	f000 fe51 	bl	80016a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0292      	lsls	r2, r2, #10
 8000a0c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	003b      	movs	r3, r7
 8000a16:	0018      	movs	r0, r3
 8000a18:	f005 f98a 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a20:	f000 fe42 	bl	80016a8 <Error_Handler>
  }
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b019      	add	sp, #100	; 0x64
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	0018      	movs	r0, r3
 8000a36:	230c      	movs	r3, #12
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f00b ff28 	bl	800c890 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a40:	4b87      	ldr	r3, [pc, #540]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a42:	4a88      	ldr	r2, [pc, #544]	; (8000c64 <MX_ADC_Init+0x238>)
 8000a44:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a46:	4b86      	ldr	r3, [pc, #536]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a52:	4b83      	ldr	r3, [pc, #524]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a58:	4b81      	ldr	r3, [pc, #516]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a64:	4b7e      	ldr	r3, [pc, #504]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a6a:	4b7d      	ldr	r3, [pc, #500]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000a70:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a76:	4b7a      	ldr	r3, [pc, #488]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b78      	ldr	r3, [pc, #480]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a7e:	22c2      	movs	r2, #194	; 0xc2
 8000a80:	32ff      	adds	r2, #255	; 0xff
 8000a82:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a84:	4b76      	ldr	r3, [pc, #472]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a8a:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a8c:	2224      	movs	r2, #36	; 0x24
 8000a8e:	2100      	movs	r1, #0
 8000a90:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a92:	4b73      	ldr	r3, [pc, #460]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a98:	4b71      	ldr	r3, [pc, #452]	; (8000c60 <MX_ADC_Init+0x234>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fd0e 	bl	80024bc <HAL_ADC_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 fe00 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0152      	lsls	r2, r2, #5
 8000ab4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	0552      	lsls	r2, r2, #21
 8000abc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000abe:	1d3a      	adds	r2, r7, #4
 8000ac0:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <MX_ADC_Init+0x234>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fecb 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ace:	f000 fdeb 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad8:	1d3a      	adds	r2, r7, #4
 8000ada:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <MX_ADC_Init+0x234>)
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 febe 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000ae8:	f000 fdde 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000af2:	1d3a      	adds	r2, r7, #4
 8000af4:	4b5a      	ldr	r3, [pc, #360]	; (8000c60 <MX_ADC_Init+0x234>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 feb1 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000b02:	f000 fdd1 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2203      	movs	r2, #3
 8000b0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0c:	1d3a      	adds	r2, r7, #4
 8000b0e:	4b54      	ldr	r3, [pc, #336]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fea4 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000b1c:	f000 fdc4 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fe97 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000b36:	f000 fdb7 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b40:	1d3a      	adds	r2, r7, #4
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fe8a 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000b50:	f000 fdaa 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2206      	movs	r2, #6
 8000b58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 fe7d 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000b6a:	f000 fd9d 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fe70 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000b84:	f000 fd90 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b8e:	1d3a      	adds	r2, r7, #4
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_ADC_Init+0x234>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 fe63 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000b9e:	f000 fd83 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2209      	movs	r2, #9
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ba8:	1d3a      	adds	r2, r7, #4
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_ADC_Init+0x234>)
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fe56 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000bb8:	f000 fd76 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	220a      	movs	r2, #10
 8000bc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_ADC_Init+0x234>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fe49 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000bd2:	f000 fd69 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	220b      	movs	r2, #11
 8000bda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_ADC_Init+0x234>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 fe3c 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000bec:	f000 fd5c 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf6:	1d3a      	adds	r2, r7, #4
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_ADC_Init+0x234>)
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 fe2f 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000c06:	f000 fd4f 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	220d      	movs	r2, #13
 8000c0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_ADC_Init+0x234>)
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fe22 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000c20:	f000 fd42 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	220e      	movs	r2, #14
 8000c28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c2a:	1d3a      	adds	r2, r7, #4
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_ADC_Init+0x234>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fe15 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000c3a:	f000 fd35 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	220f      	movs	r2, #15
 8000c42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_ADC_Init+0x234>)
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fe08 	bl	8002860 <HAL_ADC_ConfigChannel>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000c54:	f000 fd28 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000680 	.word	0x20000680
 8000c64:	40012400 	.word	0x40012400

08000c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <MX_SPI1_Init+0x84>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c74:	2282      	movs	r2, #130	; 0x82
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c82:	22e0      	movs	r2, #224	; 0xe0
 8000c84:	00d2      	lsls	r2, r2, #3
 8000c86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000c9e:	2238      	movs	r2, #56	; 0x38
 8000ca0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_SPI1_Init+0x80>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f005 f92f 	bl	8005f2c <HAL_SPI_Init>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 fce9 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_SPI1_Init+0x88>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f002 fc5e 	bl	800359e <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000574 	.word	0x20000574
 8000cec:	40013000 	.word	0x40013000
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	231c      	movs	r3, #28
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f00b fdc4 	bl	800c890 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <MX_TIM14_Init+0x90>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d10:	222f      	movs	r2, #47	; 0x2f
 8000d12:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <MX_TIM14_Init+0x94>)
 8000d1e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f005 fe54 	bl	80069dc <HAL_TIM_Base_Init>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000d38:	f000 fcb6 	bl	80016a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f005 feee 	bl	8006b20 <HAL_TIM_OC_Init>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 fcae 	bl	80016a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	1d39      	adds	r1, r7, #4
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_TIM14_Init+0x8c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f006 f846 	bl	8006dfc <HAL_TIM_OC_ConfigChannel>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000d74:	f000 fc98 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b008      	add	sp, #32
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200005d8 	.word	0x200005d8
 8000d84:	40002000 	.word	0x40002000
 8000d88:	0000270f 	.word	0x0000270f

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART3_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d98:	2296      	movs	r2, #150	; 0x96
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f006 fb17 	bl	8007404 <HAL_UART_Init>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 fc65 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200004f0 	.word	0x200004f0
 8000de8:	40004800 	.word	0x40004800

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_DMA_Init+0x38>)
 8000df4:	695a      	ldr	r2, [r3, #20]
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_DMA_Init+0x38>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_DMA_Init+0x38>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2009      	movs	r0, #9
 8000e10:	f001 ffe8 	bl	8002de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e14:	2009      	movs	r0, #9
 8000e16:	f001 fffa 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40021000 	.word	0x40021000

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	2414      	movs	r4, #20
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	0018      	movs	r0, r3
 8000e34:	2314      	movs	r3, #20
 8000e36:	001a      	movs	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f00b fd29 	bl	800c890 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	4b6a      	ldr	r3, [pc, #424]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	03c9      	lsls	r1, r1, #15
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	4b67      	ldr	r3, [pc, #412]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	03db      	lsls	r3, r3, #15
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	4b63      	ldr	r3, [pc, #396]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0309      	lsls	r1, r1, #12
 8000e64:	430a      	orrs	r2, r1
 8000e66:	615a      	str	r2, [r3, #20]
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	031b      	lsls	r3, r3, #12
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b59      	ldr	r3, [pc, #356]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b56      	ldr	r3, [pc, #344]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	4b55      	ldr	r3, [pc, #340]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	02c9      	lsls	r1, r1, #11
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000ea2:	695a      	ldr	r2, [r3, #20]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0349      	lsls	r1, r1, #13
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	4b4b      	ldr	r3, [pc, #300]	; (8000fec <MX_GPIO_Init+0x1c4>)
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	035b      	lsls	r3, r3, #13
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000eca:	4949      	ldr	r1, [pc, #292]	; (8000ff0 <MX_GPIO_Init+0x1c8>)
 8000ecc:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <MX_GPIO_Init+0x1cc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 fb64 	bl	800359e <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ed6:	239e      	movs	r3, #158	; 0x9e
 8000ed8:	015b      	lsls	r3, r3, #5
 8000eda:	4847      	ldr	r0, [pc, #284]	; (8000ff8 <MX_GPIO_Init+0x1d0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	0019      	movs	r1, r3
 8000ee0:	f002 fb5d 	bl	800359e <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	0219      	lsls	r1, r3, #8
 8000ee8:	2390      	movs	r3, #144	; 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2200      	movs	r2, #0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f002 fb55 	bl	800359e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	4a3e      	ldr	r2, [pc, #248]	; (8000ff0 <MX_GPIO_Init+0x1c8>)
 8000ef8:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <MX_GPIO_Init+0x1cc>)
 8000f10:	0019      	movs	r1, r3
 8000f12:	0010      	movs	r0, r2
 8000f14:	f002 f9ae 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000f18:	0021      	movs	r1, r4
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	229e      	movs	r2, #158	; 0x9e
 8000f1e:	0152      	lsls	r2, r2, #5
 8000f20:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	000c      	movs	r4, r1
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2201      	movs	r2, #1
 8000f28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <MX_GPIO_Init+0x1d0>)
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	f002 f999 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	22c0      	movs	r2, #192	; 0xc0
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	2288      	movs	r2, #136	; 0x88
 8000f4e:	0352      	lsls	r2, r2, #13
 8000f50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2202      	movs	r2, #2
 8000f56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	193a      	adds	r2, r7, r4
 8000f5a:	2390      	movs	r3, #144	; 0x90
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f002 f987 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	00d2      	lsls	r2, r2, #3
 8000f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	193a      	adds	r2, r7, r4
 8000f7c:	2390      	movs	r3, #144	; 0x90
 8000f7e:	05db      	lsls	r3, r3, #23
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 f976 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000f88:	0021      	movs	r1, r4
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0212      	lsls	r2, r2, #8
 8000f90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	000c      	movs	r4, r1
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	2201      	movs	r2, #1
 8000f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	193a      	adds	r2, r7, r4
 8000fa8:	2390      	movs	r3, #144	; 0x90
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	0011      	movs	r1, r2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 f960 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <MX_GPIO_Init+0x1d4>)
 8000fca:	0019      	movs	r1, r3
 8000fcc:	0010      	movs	r0, r2
 8000fce:	f002 f951 	bl	8003274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f001 ff04 	bl	8002de4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f001 ff16 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b00b      	add	sp, #44	; 0x2c
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	0000f3c4 	.word	0x0000f3c4
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00

08001000 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8001004:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <clkHandler+0xf4>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	438a      	bics	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <clkHandler+0xf4>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	2102      	movs	r1, #2
 8001014:	438a      	bics	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <clkHandler+0xf4>)
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	2104      	movs	r1, #4
 800101e:	438a      	bics	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <clkHandler+0xf4>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	2108      	movs	r1, #8
 8001028:	438a      	bics	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <clkHandler+0xf8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <clkHandler+0xf8>)
 8001034:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <clkHandler+0xf8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2164      	movs	r1, #100	; 0x64
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f8fb 	bl	8000238 <__aeabi_uidivmod>
 8001042:	1e0b      	subs	r3, r1, #0
 8001044:	d109      	bne.n	800105a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <clkHandler+0xf8>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <clkHandler+0xf8>)
 800104e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <clkHandler+0xf4>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	2102      	movs	r1, #2
 8001056:	430a      	orrs	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <clkHandler+0xf4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d042      	beq.n	80010ee <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <clkHandler+0xf8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	213c      	movs	r1, #60	; 0x3c
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff f8e2 	bl	8000238 <__aeabi_uidivmod>
 8001074:	1e0b      	subs	r3, r1, #0
 8001076:	d110      	bne.n	800109a <clkHandler+0x9a>
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <clkHandler+0xf8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <clkHandler+0xf8>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <clkHandler+0xf8>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <clkHandler+0xf8>)
 800108e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <clkHandler+0xf4>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	2104      	movs	r1, #4
 8001096:	430a      	orrs	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <clkHandler+0xf4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d022      	beq.n	80010ee <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <clkHandler+0xf8>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	213c      	movs	r1, #60	; 0x3c
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff f8c2 	bl	8000238 <__aeabi_uidivmod>
 80010b4:	1e0b      	subs	r3, r1, #0
 80010b6:	d11a      	bne.n	80010ee <clkHandler+0xee>
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <clkHandler+0xf8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d016      	beq.n	80010ee <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <clkHandler+0xf8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <clkHandler+0xf8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <clkHandler+0xf8>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <clkHandler+0xf8>)
 80010d4:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <clkHandler+0xf4>)
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	2108      	movs	r1, #8
 80010dc:	430a      	orrs	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <clkHandler+0xf8>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b16      	cmp	r3, #22
 80010e6:	d902      	bls.n	80010ee <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <clkHandler+0xf8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000620 	.word	0x20000620
 80010f8:	2000023c 	.word	0x2000023c

080010fc <buttonDebounce>:

void buttonDebounce(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	flags.buttons.butt0_ver = 0;
 8001100:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <buttonDebounce+0x104>)
 8001102:	791a      	ldrb	r2, [r3, #4]
 8001104:	2102      	movs	r1, #2
 8001106:	438a      	bics	r2, r1
 8001108:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <buttonDebounce+0x104>)
 800110c:	791a      	ldrb	r2, [r3, #4]
 800110e:	2108      	movs	r1, #8
 8001110:	438a      	bics	r2, r1
 8001112:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <buttonDebounce+0x104>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	4013      	ands	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d031      	beq.n	8001186 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	009a      	lsls	r2, r3, #2
 8001126:	2390      	movs	r3, #144	; 0x90
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f002 fa19 	bl	8003564 <HAL_GPIO_ReadPin>
 8001132:	0003      	movs	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <buttonDebounce+0x4a>
		{
			button0_Debounce++;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <buttonDebounce+0x108>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <buttonDebounce+0x108>)
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <buttonDebounce+0x5a>
		}
		else
		{
			button0_Debounce = 0;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <buttonDebounce+0x108>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <buttonDebounce+0x104>)
 800114e:	791a      	ldrb	r2, [r3, #4]
 8001150:	2101      	movs	r1, #1
 8001152:	438a      	bics	r2, r1
 8001154:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <buttonDebounce+0x108>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d913      	bls.n	8001186 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <buttonDebounce+0x104>)
 8001160:	791a      	ldrb	r2, [r3, #4]
 8001162:	2102      	movs	r1, #2
 8001164:	430a      	orrs	r2, r1
 8001166:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <buttonDebounce+0x104>)
 800116a:	791a      	ldrb	r2, [r3, #4]
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <buttonDebounce+0x108>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <buttonDebounce+0x10c>)
 800117e:	0019      	movs	r1, r3
 8001180:	0010      	movs	r0, r2
 8001182:	f002 fa29 	bl	80035d8 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <buttonDebounce+0x104>)
 8001188:	791b      	ldrb	r3, [r3, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d032      	beq.n	80011fa <buttonDebounce+0xfe>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	005a      	lsls	r2, r3, #1
 8001198:	2390      	movs	r3, #144	; 0x90
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 f9e0 	bl	8003564 <HAL_GPIO_ReadPin>
 80011a4:	0003      	movs	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <buttonDebounce+0xbc>
		{
			button1_Debounce++;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <buttonDebounce+0x110>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <buttonDebounce+0x110>)
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e007      	b.n	80011c8 <buttonDebounce+0xcc>
		}
		else
		{
			button1_Debounce = 0;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <buttonDebounce+0x110>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <buttonDebounce+0x104>)
 80011c0:	791a      	ldrb	r2, [r3, #4]
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <buttonDebounce+0x110>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d914      	bls.n	80011fa <buttonDebounce+0xfe>
		{
			flags.buttons.butt1_ver = 1;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <buttonDebounce+0x104>)
 80011d2:	791a      	ldrb	r2, [r3, #4]
 80011d4:	2108      	movs	r1, #8
 80011d6:	430a      	orrs	r2, r1
 80011d8:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <buttonDebounce+0x104>)
 80011dc:	791a      	ldrb	r2, [r3, #4]
 80011de:	2104      	movs	r1, #4
 80011e0:	438a      	bics	r2, r1
 80011e2:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <buttonDebounce+0x110>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	021a      	lsls	r2, r3, #8
 80011ee:	2390      	movs	r3, #144	; 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f002 f9ef 	bl	80035d8 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000620 	.word	0x20000620
 8001204:	2000024c 	.word	0x2000024c
 8001208:	48000400 	.word	0x48000400
 800120c:	2000024d 	.word	0x2000024d

08001210 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001214:	4b82      	ldr	r3, [pc, #520]	; (8001420 <UI_Handler+0x210>)
 8001216:	7c1b      	ldrb	r3, [r3, #16]
 8001218:	2204      	movs	r2, #4
 800121a:	4013      	ands	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <UI_Handler+0x2a>
 8001222:	4b80      	ldr	r3, [pc, #512]	; (8001424 <UI_Handler+0x214>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d007      	beq.n	800123a <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800122a:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <UI_Handler+0x214>)
 800122c:	2203      	movs	r2, #3
 800122e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <UI_Handler+0x218>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b7d      	ldr	r3, [pc, #500]	; (800142c <UI_Handler+0x21c>)
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e05e      	b.n	80012f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800123a:	4b79      	ldr	r3, [pc, #484]	; (8001420 <UI_Handler+0x210>)
 800123c:	7c1b      	ldrb	r3, [r3, #16]
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d010      	beq.n	800126a <UI_Handler+0x5a>
 8001248:	4b76      	ldr	r3, [pc, #472]	; (8001424 <UI_Handler+0x214>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10c      	bne.n	800126a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001250:	4b74      	ldr	r3, [pc, #464]	; (8001424 <UI_Handler+0x214>)
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <UI_Handler+0x218>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b74      	ldr	r3, [pc, #464]	; (800142c <UI_Handler+0x21c>)
 800125c:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 800125e:	4b70      	ldr	r3, [pc, #448]	; (8001420 <UI_Handler+0x210>)
 8001260:	7c1a      	ldrb	r2, [r3, #16]
 8001262:	2108      	movs	r1, #8
 8001264:	438a      	bics	r2, r1
 8001266:	741a      	strb	r2, [r3, #16]
 8001268:	e046      	b.n	80012f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <UI_Handler+0x210>)
 800126c:	7c1b      	ldrb	r3, [r3, #16]
 800126e:	2210      	movs	r2, #16
 8001270:	4013      	ands	r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d010      	beq.n	800129a <UI_Handler+0x8a>
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <UI_Handler+0x214>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001280:	4b68      	ldr	r3, [pc, #416]	; (8001424 <UI_Handler+0x214>)
 8001282:	2205      	movs	r2, #5
 8001284:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001286:	4b68      	ldr	r3, [pc, #416]	; (8001428 <UI_Handler+0x218>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <UI_Handler+0x21c>)
 800128c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <UI_Handler+0x210>)
 8001290:	7c1a      	ldrb	r2, [r3, #16]
 8001292:	2110      	movs	r1, #16
 8001294:	438a      	bics	r2, r1
 8001296:	741a      	strb	r2, [r3, #16]
 8001298:	e02e      	b.n	80012f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <UI_Handler+0x210>)
 800129c:	7c1b      	ldrb	r3, [r3, #16]
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d010      	beq.n	80012ca <UI_Handler+0xba>
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <UI_Handler+0x214>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10c      	bne.n	80012ca <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <UI_Handler+0x214>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <UI_Handler+0x218>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <UI_Handler+0x21c>)
 80012bc:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <UI_Handler+0x210>)
 80012c0:	7c1a      	ldrb	r2, [r3, #16]
 80012c2:	2102      	movs	r1, #2
 80012c4:	438a      	bics	r2, r1
 80012c6:	741a      	strb	r2, [r3, #16]
 80012c8:	e016      	b.n	80012f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <UI_Handler+0x210>)
 80012cc:	7c1b      	ldrb	r3, [r3, #16]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00f      	beq.n	80012f8 <UI_Handler+0xe8>
 80012d8:	4b52      	ldr	r3, [pc, #328]	; (8001424 <UI_Handler+0x214>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10b      	bne.n	80012f8 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <UI_Handler+0x214>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012e6:	4b50      	ldr	r3, [pc, #320]	; (8001428 <UI_Handler+0x218>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <UI_Handler+0x21c>)
 80012ec:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 80012ee:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <UI_Handler+0x210>)
 80012f0:	7c1a      	ldrb	r2, [r3, #16]
 80012f2:	2101      	movs	r1, #1
 80012f4:	438a      	bics	r2, r1
 80012f6:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <UI_Handler+0x214>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d900      	bls.n	8001302 <UI_Handler+0xf2>
 8001300:	e07a      	b.n	80013f8 <UI_Handler+0x1e8>
 8001302:	009a      	lsls	r2, r3, #2
 8001304:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <UI_Handler+0x220>)
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <UI_Handler+0x218>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <UI_Handler+0x21c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b31      	cmp	r3, #49	; 0x31
 8001318:	d800      	bhi.n	800131c <UI_Handler+0x10c>
 800131a:	e075      	b.n	8001408 <UI_Handler+0x1f8>
		{
			UI_State = OFF;
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <UI_Handler+0x214>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	4843      	ldr	r0, [pc, #268]	; (8001434 <UI_Handler+0x224>)
 8001328:	2200      	movs	r2, #0
 800132a:	0019      	movs	r1, r3
 800132c:	f002 f937 	bl	800359e <HAL_GPIO_WritePin>
		}
		break;
 8001330:	e06a      	b.n	8001408 <UI_Handler+0x1f8>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <UI_Handler+0x218>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <UI_Handler+0x21c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b63      	cmp	r3, #99	; 0x63
 800133e:	d965      	bls.n	800140c <UI_Handler+0x1fc>
		{
			UI_State = OFF;
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <UI_Handler+0x214>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	483a      	ldr	r0, [pc, #232]	; (8001434 <UI_Handler+0x224>)
 800134c:	2200      	movs	r2, #0
 800134e:	0019      	movs	r1, r3
 8001350:	f002 f925 	bl	800359e <HAL_GPIO_WritePin>
		}
		break;
 8001354:	e05a      	b.n	800140c <UI_Handler+0x1fc>

	case ERROR:
		if(!flags.ui.error)
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <UI_Handler+0x210>)
 8001358:	7c1b      	ldrb	r3, [r3, #16]
 800135a:	2204      	movs	r2, #4
 800135c:	4013      	ands	r3, r2
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <UI_Handler+0x15a>
			UI_State = OFF;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <UI_Handler+0x214>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <UI_Handler+0x218>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <UI_Handler+0x21c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2132      	movs	r1, #50	; 0x32
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe ff5e 	bl	8000238 <__aeabi_uidivmod>
 800137c:	1e0b      	subs	r3, r1, #0
 800137e:	d147      	bne.n	8001410 <UI_Handler+0x200>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	2390      	movs	r3, #144	; 0x90
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f002 f924 	bl	80035d8 <HAL_GPIO_TogglePin>
		}
		break;
 8001390:	e03e      	b.n	8001410 <UI_Handler+0x200>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <UI_Handler+0x218>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <UI_Handler+0x21c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2123      	movs	r1, #35	; 0x23
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe ff4a 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <UI_Handler+0x218>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <UI_Handler+0x21c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2bd0      	cmp	r3, #208	; 0xd0
 80013b0:	d930      	bls.n	8001414 <UI_Handler+0x204>
			UI_State = OFF;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <UI_Handler+0x214>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
		break;
 80013b8:	e02c      	b.n	8001414 <UI_Handler+0x204>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <UI_Handler+0x218>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <UI_Handler+0x21c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2132      	movs	r1, #50	; 0x32
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7fe ff36 	bl	8000238 <__aeabi_uidivmod>
 80013cc:	1e0b      	subs	r3, r1, #0
 80013ce:	d106      	bne.n	80013de <UI_Handler+0x1ce>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <UI_Handler+0x228>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f002 f8fd 	bl	80035d8 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <UI_Handler+0x218>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <UI_Handler+0x21c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1ad2      	subs	r2, r2, r3
 80013e8:	2395      	movs	r3, #149	; 0x95
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d913      	bls.n	8001418 <UI_Handler+0x208>
			UI_State = OFF;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <UI_Handler+0x214>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		break;
 80013f6:	e00f      	b.n	8001418 <UI_Handler+0x208>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <UI_Handler+0x224>)
 80013fe:	2200      	movs	r2, #0
 8001400:	0019      	movs	r1, r3
 8001402:	f002 f8cc 	bl	800359e <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
#endif
		break;
 8001406:	e008      	b.n	800141a <UI_Handler+0x20a>
		break;
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	e006      	b.n	800141a <UI_Handler+0x20a>
		break;
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	e004      	b.n	800141a <UI_Handler+0x20a>
		break;
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	e002      	b.n	800141a <UI_Handler+0x20a>
		break;
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	e000      	b.n	800141a <UI_Handler+0x20a>
		break;
 8001418:	46c0      	nop			; (mov r8, r8)

	}
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000620 	.word	0x20000620
 8001424:	2000024e 	.word	0x2000024e
 8001428:	2000023c 	.word	0x2000023c
 800142c:	20000250 	.word	0x20000250
 8001430:	0800d1e0 	.word	0x0800d1e0
 8001434:	48000800 	.word	0x48000800
 8001438:	48000400 	.word	0x48000400

0800143c <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	af00      	add	r7, sp, #0
		U_BAT,					//kanál 6
		PAD9, PAD15,			//kanál 4, 13
		U48V_CURRENT			//kanál 3
	}ADC_State;

	flags.meas.measComplete = 0;
 8001440:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <measHandler+0x1bc>)
 8001442:	7d1a      	ldrb	r2, [r3, #20]
 8001444:	2102      	movs	r1, #2
 8001446:	438a      	bics	r2, r1
 8001448:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 800144a:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <measHandler+0x1bc>)
 800144c:	7d1a      	ldrb	r2, [r3, #20]
 800144e:	2110      	movs	r1, #16
 8001450:	438a      	bics	r2, r1
 8001452:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <measHandler+0x1bc>)
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03b      	beq.n	80014da <measHandler+0x9e>
	{
		if(ADC_State == WAITING)
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <measHandler+0x1c0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d12d      	bne.n	80014c6 <measHandler+0x8a>
		{
			flags.meas.measRunning = 1;
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <measHandler+0x1bc>)
 800146c:	7d1a      	ldrb	r2, [r3, #20]
 800146e:	2108      	movs	r1, #8
 8001470:	430a      	orrs	r2, r1
 8001472:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST)	//probíhá battery test
 8001474:	f000 fcfc 	bl	8001e70 <currentPhase>
 8001478:	0003      	movs	r3, r0
 800147a:	2b05      	cmp	r3, #5
 800147c:	d111      	bne.n	80014a2 <measHandler+0x66>
			{
				flags.meas.onlyBattery = 1;
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <measHandler+0x1bc>)
 8001480:	7d1a      	ldrb	r2, [r3, #20]
 8001482:	2120      	movs	r1, #32
 8001484:	430a      	orrs	r2, r1
 8001486:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001488:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <measHandler+0x1c0>)
 800148a:	220d      	movs	r2, #13
 800148c:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_6);
 800148e:	2006      	movs	r0, #6
 8001490:	f000 f8be 	bl	8001610 <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 8001494:	495a      	ldr	r1, [pc, #360]	; (8001600 <measHandler+0x1c4>)
 8001496:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <measHandler+0x1c8>)
 8001498:	2214      	movs	r2, #20
 800149a:	0018      	movs	r0, r3
 800149c:	f001 f94e 	bl	800273c <HAL_ADC_Start_DMA>
 80014a0:	e016      	b.n	80014d0 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <measHandler+0x1bc>)
 80014a4:	7d1a      	ldrb	r2, [r3, #20]
 80014a6:	2120      	movs	r1, #32
 80014a8:	438a      	bics	r2, r1
 80014aa:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <measHandler+0x1c0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_7);
 80014b2:	2007      	movs	r0, #7
 80014b4:	f000 f8ac 	bl	8001610 <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80014b8:	4951      	ldr	r1, [pc, #324]	; (8001600 <measHandler+0x1c4>)
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <measHandler+0x1c8>)
 80014bc:	2214      	movs	r2, #20
 80014be:	0018      	movs	r0, r3
 80014c0:	f001 f93c 	bl	800273c <HAL_ADC_Start_DMA>
 80014c4:	e004      	b.n	80014d0 <measHandler+0x94>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <measHandler+0x1bc>)
 80014c8:	7d1a      	ldrb	r2, [r3, #20]
 80014ca:	2110      	movs	r1, #16
 80014cc:	430a      	orrs	r2, r1
 80014ce:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <measHandler+0x1bc>)
 80014d2:	7d1a      	ldrb	r2, [r3, #20]
 80014d4:	2101      	movs	r1, #1
 80014d6:	438a      	bics	r2, r1
 80014d8:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != WAITING)
 80014da:	4b48      	ldr	r3, [pc, #288]	; (80015fc <measHandler+0x1c0>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <measHandler+0xa8>
 80014e2:	e086      	b.n	80015f2 <measHandler+0x1b6>
	{
		if(flags.meas.measDataReady)
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <measHandler+0x1bc>)
 80014e6:	7d1b      	ldrb	r3, [r3, #20]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d100      	bne.n	80014f4 <measHandler+0xb8>
 80014f2:	e07e      	b.n	80015f2 <measHandler+0x1b6>
		{
			flags.meas.measDataReady = 0;
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <measHandler+0x1bc>)
 80014f6:	7d1a      	ldrb	r2, [r3, #20]
 80014f8:	2104      	movs	r1, #4
 80014fa:	438a      	bics	r2, r1
 80014fc:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <measHandler+0x1c0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0d      	cmp	r3, #13
 8001504:	d116      	bne.n	8001534 <measHandler+0xf8>
			{
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <measHandler+0x1c0>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	1e5c      	subs	r4, r3, #1
 800150c:	f000 f8a8 	bl	8001660 <ADC_dataProcessing>
 8001510:	0001      	movs	r1, r0
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <measHandler+0x1cc>)
 8001514:	00a2      	lsls	r2, r4, #2
 8001516:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <measHandler+0x1bc>)
 800151a:	7d1a      	ldrb	r2, [r3, #20]
 800151c:	2102      	movs	r1, #2
 800151e:	430a      	orrs	r2, r1
 8001520:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <measHandler+0x1bc>)
 8001524:	7d1a      	ldrb	r2, [r3, #20]
 8001526:	2108      	movs	r1, #8
 8001528:	438a      	bics	r2, r1
 800152a:	751a      	strb	r2, [r3, #20]
				ADC_State = WAITING;
 800152c:	4b33      	ldr	r3, [pc, #204]	; (80015fc <measHandler+0x1c0>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
			}
		}
	}
}
 8001532:	e05e      	b.n	80015f2 <measHandler+0x1b6>
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <measHandler+0x1c0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	1e5c      	subs	r4, r3, #1
 800153a:	f000 f891 	bl	8001660 <ADC_dataProcessing>
 800153e:	0001      	movs	r1, r0
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <measHandler+0x1cc>)
 8001542:	00a2      	lsls	r2, r4, #2
 8001544:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <measHandler+0x1c0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <measHandler+0x1c0>)
 8001550:	701a      	strb	r2, [r3, #0]
				switch(ADC_State)
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <measHandler+0x1c0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d844      	bhi.n	80015e4 <measHandler+0x1a8>
 800155a:	009a      	lsls	r2, r3, #2
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <measHandler+0x1d0>)
 800155e:	18d3      	adds	r3, r2, r3
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	469f      	mov	pc, r3
					changeChannel(ADC_CHANNEL_7);
 8001564:	2007      	movs	r0, #7
 8001566:	f000 f853 	bl	8001610 <changeChannel>
					break;
 800156a:	e03c      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_10);
 800156c:	200a      	movs	r0, #10
 800156e:	f000 f84f 	bl	8001610 <changeChannel>
					break;
 8001572:	e038      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_14);
 8001574:	200e      	movs	r0, #14
 8001576:	f000 f84b 	bl	8001610 <changeChannel>
					break;
 800157a:	e034      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_12);
 800157c:	200c      	movs	r0, #12
 800157e:	f000 f847 	bl	8001610 <changeChannel>
					break;
 8001582:	e030      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_5);
 8001584:	2005      	movs	r0, #5
 8001586:	f000 f843 	bl	8001610 <changeChannel>
					break;
 800158a:	e02c      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_11);
 800158c:	200b      	movs	r0, #11
 800158e:	f000 f83f 	bl	8001610 <changeChannel>
					break;
 8001592:	e028      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_9);
 8001594:	2009      	movs	r0, #9
 8001596:	f000 f83b 	bl	8001610 <changeChannel>
					break;
 800159a:	e024      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_2);
 800159c:	2002      	movs	r0, #2
 800159e:	f000 f837 	bl	8001610 <changeChannel>
					break;
 80015a2:	e020      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_15);
 80015a4:	200f      	movs	r0, #15
 80015a6:	f000 f833 	bl	8001610 <changeChannel>
					break;
 80015aa:	e01c      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_0);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 f82f 	bl	8001610 <changeChannel>
					break;
 80015b2:	e018      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_8);
 80015b4:	2008      	movs	r0, #8
 80015b6:	f000 f82b 	bl	8001610 <changeChannel>
					break;
 80015ba:	e014      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 f827 	bl	8001610 <changeChannel>
					break;
 80015c2:	e010      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_6);
 80015c4:	2006      	movs	r0, #6
 80015c6:	f000 f823 	bl	8001610 <changeChannel>
					break;
 80015ca:	e00c      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_4);
 80015cc:	2004      	movs	r0, #4
 80015ce:	f000 f81f 	bl	8001610 <changeChannel>
					break;
 80015d2:	e008      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_13);
 80015d4:	200d      	movs	r0, #13
 80015d6:	f000 f81b 	bl	8001610 <changeChannel>
					break;
 80015da:	e004      	b.n	80015e6 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_3);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f817 	bl	8001610 <changeChannel>
					break;
 80015e2:	e000      	b.n	80015e6 <measHandler+0x1aa>
					break;
 80015e4:	46c0      	nop			; (mov r8, r8)
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80015e6:	4906      	ldr	r1, [pc, #24]	; (8001600 <measHandler+0x1c4>)
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <measHandler+0x1c8>)
 80015ea:	2214      	movs	r2, #20
 80015ec:	0018      	movs	r0, r3
 80015ee:	f001 f8a5 	bl	800273c <HAL_ADC_Start_DMA>
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	20000620 	.word	0x20000620
 80015fc:	20000254 	.word	0x20000254
 8001600:	200004a0 	.word	0x200004a0
 8001604:	20000680 	.word	0x20000680
 8001608:	200001fc 	.word	0x200001fc
 800160c:	0800d1f8 	.word	0x0800d1f8

08001610 <changeChannel>:

//_____Změna lanálu ADC_____//
static void changeChannel(unsigned int channel)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001618:	240c      	movs	r4, #12
 800161a:	193b      	adds	r3, r7, r4
 800161c:	0018      	movs	r0, r3
 800161e:	230c      	movs	r3, #12
 8001620:	001a      	movs	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f00b f934 	bl	800c890 <memset>
	sConfig.Channel = channel;
 8001628:	0021      	movs	r1, r4
 800162a:	187b      	adds	r3, r7, r1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0152      	lsls	r2, r2, #5
 8001636:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0552      	lsls	r2, r2, #21
 800163e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001640:	187a      	adds	r2, r7, r1
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <changeChannel+0x4c>)
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f001 f90a 	bl	8002860 <HAL_ADC_ConfigChannel>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <changeChannel+0x44>
	{
		Error_Handler();
 8001650:	f000 f82a 	bl	80016a8 <Error_Handler>
	}
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b007      	add	sp, #28
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	20000680 	.word	0x20000680

08001660 <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static uint32_t ADC_dataProcessing()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	uint32_t mean = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	e009      	b.n	8001684 <ADC_dataProcessing+0x24>
	{
		mean += ADC_Buffer[i];
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <ADC_dataProcessing+0x44>)
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	58d3      	ldr	r3, [r2, r3]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b13      	cmp	r3, #19
 8001688:	ddf2      	ble.n	8001670 <ADC_dataProcessing+0x10>
	}
	mean = mean/20;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2114      	movs	r1, #20
 800168e:	0018      	movs	r0, r3
 8001690:	f7fe fd4c 	bl	800012c <__udivsi3>
 8001694:	0003      	movs	r3, r0
 8001696:	607b      	str	r3, [r7, #4]

	return mean;
 8001698:	687b      	ldr	r3, [r7, #4]
	//return ADC_Buffer[10];
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	200004a0 	.word	0x200004a0

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>

080016b2 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80016ba:	2018      	movs	r0, #24
 80016bc:	f00b f8d4 	bl	800c868 <malloc>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <createBuffer+0x1c>
	{
		return NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e022      	b.n	8001714 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f00b f8c9 	bl	800c868 <malloc>
 80016d6:	0003      	movs	r3, r0
 80016d8:	001a      	movs	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <createBuffer+0x40>
	{
		free(buffer);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f00b f8c7 	bl	800c87c <free>
		return NULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e010      	b.n	8001714 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}

0800171c <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	000a      	movs	r2, r1
 8001726:	1cfb      	adds	r3, r7, #3
 8001728:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7d1b      	ldrb	r3, [r3, #20]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d101      	bne.n	8001736 <push+0x1a>
		return BUFFER_FULL;
 8001732:	2302      	movs	r3, #2
 8001734:	e025      	b.n	8001782 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0019      	movs	r1, r3
 8001742:	0010      	movs	r0, r2
 8001744:	f7fe fe62 	bl	800040c <__aeabi_idivmod>
 8001748:	000b      	movs	r3, r1
 800174a:	001a      	movs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	1cfa      	adds	r2, r7, #3
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	db01      	blt.n	800177a <push+0x5e>
 8001776:	2202      	movs	r2, #2
 8001778:	e000      	b.n	800177c <push+0x60>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}

0800178a <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	18cb      	adds	r3, r1, r3
 80017a2:	429a      	cmp	r2, r3
 80017a4:	da01      	bge.n	80017aa <pushStr+0x20>
		return BUFFER_FULL;
 80017a6:	2302      	movs	r3, #2
 80017a8:	e013      	b.n	80017d2 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00b      	b.n	80017c8 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff ffad 	bl	800171c <push>
	for(int i = 0; i < len; i++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbef      	blt.n	80017b0 <pushStr+0x26>
	}

	return BUFFER_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b006      	add	sp, #24
 80017d8:	bd80      	pop	{r7, pc}

080017da <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d1b      	ldrb	r3, [r3, #20]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <pop+0x16>
		return BUFFER_EMPTY;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e023      	b.n	8001838 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	0019      	movs	r1, r3
 800180c:	0010      	movs	r0, r2
 800180e:	f7fe fdfd 	bl	800040c <__aeabi_idivmod>
 8001812:	000b      	movs	r3, r1
 8001814:	001a      	movs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	1e5a      	subs	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	4313      	orrs	r3, r2
 800182c:	0fdb      	lsrs	r3, r3, #31
 800182e:	b2db      	uxtb	r3, r3
 8001830:	001a      	movs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <getCount+0x7c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	222a      	movs	r2, #42	; 0x2a
 8001850:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8001852:	1dbb      	adds	r3, r7, #6
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001858:	1dba      	adds	r2, r7, #6
 800185a:	1df9      	adds	r1, r7, #7
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <getCount+0x80>)
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	f004 fd72 	bl	800634c <HAL_SPI_TransmitReceive>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d001      	beq.n	8001870 <getCount+0x30>
			return 0;
 800186c:	2300      	movs	r3, #0
 800186e:	e021      	b.n	80018b4 <getCount+0x74>
		regCount++;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <getCount+0x7c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <getCount+0x7c>)
 800187a:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 800187c:	2001      	movs	r0, #1
 800187e:	f000 fdf9 	bl	8002474 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <getCount+0x7c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b63      	cmp	r3, #99	; 0x63
 8001888:	d906      	bls.n	8001898 <getCount+0x58>
		{
			flags.conErr = 1;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <getCount+0x84>)
 800188c:	7e1a      	ldrb	r2, [r3, #24]
 800188e:	2104      	movs	r1, #4
 8001890:	430a      	orrs	r2, r1
 8001892:	761a      	strb	r2, [r3, #24]
			return 0;
 8001894:	2300      	movs	r3, #0
 8001896:	e00d      	b.n	80018b4 <getCount+0x74>
		}
	}
	while(answer != question);
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1d3      	bne.n	800184c <getCount+0xc>

	regCount--;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <getCount+0x7c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <getCount+0x7c>)
 80018ae:	701a      	strb	r2, [r3, #0]

	return regCount;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <getCount+0x7c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200006c5 	.word	0x200006c5
 80018c0:	20000574 	.word	0x20000574
 80018c4:	20000620 	.word	0x20000620

080018c8 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	482f      	ldr	r0, [pc, #188]	; (8001990 <regInit+0xc8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	0019      	movs	r1, r3
 80018d8:	f001 fe61 	bl	800359e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80018dc:	2005      	movs	r0, #5
 80018de:	f000 fdc9 	bl	8002474 <HAL_Delay>
	REG_CLR_INACTIVE;
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	482a      	ldr	r0, [pc, #168]	; (8001990 <regInit+0xc8>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	0019      	movs	r1, r3
 80018ec:	f001 fe57 	bl	800359e <HAL_GPIO_WritePin>

	REG_DISABLE;
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4826      	ldr	r0, [pc, #152]	; (8001990 <regInit+0xc8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	0019      	movs	r1, r3
 80018fa:	f001 fe50 	bl	800359e <HAL_GPIO_WritePin>

	if(getCount() == 0)
 80018fe:	f7ff ff9f 	bl	8001840 <getCount>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d101      	bne.n	800190a <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 8001906:	2301      	movs	r3, #1
 8001908:	e03e      	b.n	8001988 <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <regInit+0xcc>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	f00a ffaa 	bl	800c868 <malloc>
 8001914:	0003      	movs	r3, r0
 8001916:	001a      	movs	r2, r3
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <regInit+0xd0>)
 800191a:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <regInit+0xd0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <regInit+0x66>
	{
		regState = REG_ERR;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <regInit+0xd4>)
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 800192a:	2302      	movs	r3, #2
 800192c:	e02c      	b.n	8001988 <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e008      	b.n	8001946 <regInit+0x7e>
	{
		regValues[i] = 0;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <regInit+0xd0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	18d3      	adds	r3, r2, r3
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <regInit+0xcc>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	001a      	movs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4293      	cmp	r3, r2
 8001950:	dbf0      	blt.n	8001934 <regInit+0x6c>
	}

	sendData();
 8001952:	f000 f827 	bl	80019a4 <sendData>

	REG_ENABLE;
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <regInit+0xc8>)
 800195c:	2200      	movs	r2, #0
 800195e:	0019      	movs	r1, r3
 8001960:	f001 fe1d 	bl	800359e <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <regInit+0xd0>)
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <regInit+0xcc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	480c      	ldr	r0, [pc, #48]	; (80019a0 <regInit+0xd8>)
 8001970:	2364      	movs	r3, #100	; 0x64
 8001972:	f004 fb93 	bl	800609c <HAL_SPI_Transmit>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d101      	bne.n	800197e <regInit+0xb6>
 800197a:	2200      	movs	r2, #0
 800197c:	e000      	b.n	8001980 <regInit+0xb8>
 800197e:	2202      	movs	r2, #2
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <regInit+0xd4>)
 8001982:	701a      	strb	r2, [r3, #0]
	return regState;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <regInit+0xd4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}
 8001990:	48000400 	.word	0x48000400
 8001994:	200006c5 	.word	0x200006c5
 8001998:	200006c0 	.word	0x200006c0
 800199c:	200006c4 	.word	0x200006c4
 80019a0:	20000574 	.word	0x20000574

080019a4 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <sendData+0x54>)
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <sendData+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <sendData+0x5c>)
 80019b4:	2364      	movs	r3, #100	; 0x64
 80019b6:	f004 fb71 	bl	800609c <HAL_SPI_Transmit>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d114      	bne.n	80019e8 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	01db      	lsls	r3, r3, #7
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <sendData+0x60>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	0019      	movs	r1, r3
 80019c8:	f001 fde9 	bl	800359e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 fd51 	bl	8002474 <HAL_Delay>
		REG_RCLK_LOW;
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	01db      	lsls	r3, r3, #7
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <sendData+0x60>)
 80019d8:	2200      	movs	r2, #0
 80019da:	0019      	movs	r1, r3
 80019dc:	f001 fddf 	bl	800359e <HAL_GPIO_WritePin>

		regState = REG_OK;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <sendData+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e002      	b.n	80019ee <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <sendData+0x64>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <sendData+0x64>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200006c0 	.word	0x200006c0
 80019fc:	200006c5 	.word	0x200006c5
 8001a00:	20000574 	.word	0x20000574
 8001a04:	48000400 	.word	0x48000400
 8001a08:	200006c4 	.word	0x200006c4

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x44>)
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_MspInit+0x44>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	619a      	str	r2, [r3, #24]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_MspInit+0x44>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x44>)
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_MspInit+0x44>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0549      	lsls	r1, r1, #21
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_MspInit+0x44>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4013      	ands	r3, r2
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b08d      	sub	sp, #52	; 0x34
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	241c      	movs	r4, #28
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	0018      	movs	r0, r3
 8001a62:	2314      	movs	r3, #20
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f00a ff12 	bl	800c890 <memset>
  if(hadc->Instance==ADC1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <HAL_ADC_MspInit+0x148>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_MspInit+0x24>
 8001a76:	e08d      	b.n	8001b94 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0089      	lsls	r1, r1, #2
 8001a82:	430a      	orrs	r2, r1
 8001a84:	619a      	str	r2, [r3, #24]
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	0309      	lsls	r1, r1, #12
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	031b      	lsls	r3, r3, #12
 8001aaa:	4013      	ands	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0289      	lsls	r1, r1, #10
 8001aba:	430a      	orrs	r2, r1
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	029b      	lsls	r3, r3, #10
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	02c9      	lsls	r1, r1, #11
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_ADC_MspInit+0x14c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	02db      	lsls	r3, r3, #11
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	223f      	movs	r2, #63	; 0x3f
 8001aec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	2203      	movs	r2, #3
 8001af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_ADC_MspInit+0x150>)
 8001afe:	0019      	movs	r1, r3
 8001b00:	0010      	movs	r0, r2
 8001b02:	f001 fbb7 	bl	8003274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	2203      	movs	r2, #3
 8001b10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	193a      	adds	r2, r7, r4
 8001b1a:	2390      	movs	r3, #144	; 0x90
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 fba7 	bl	8003274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	2203      	movs	r2, #3
 8001b2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	2203      	movs	r2, #3
 8001b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_ADC_MspInit+0x154>)
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	0010      	movs	r0, r2
 8001b40:	f001 fb98 	bl	8003274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_ADC_MspInit+0x15c>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	0052      	lsls	r2, r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	00d2      	lsls	r2, r2, #3
 8001b6a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f001 f964 	bl	8002e48 <HAL_DMA_Init>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001b84:	f7ff fd90 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_ADC_MspInit+0x158>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b00d      	add	sp, #52	; 0x34
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	40012400 	.word	0x40012400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000800 	.word	0x48000800
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	2000063c 	.word	0x2000063c
 8001bb0:	40020008 	.word	0x40020008

08001bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	2414      	movs	r4, #20
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f00a fe62 	bl	800c890 <memset>
  if(hspi->Instance==SPI1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_SPI_MspInit+0x90>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d131      	bne.n	8001c3a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0149      	lsls	r1, r1, #5
 8001be0:	430a      	orrs	r2, r1
 8001be2:	619a      	str	r2, [r3, #24]
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	02c9      	lsls	r1, r1, #11
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_SPI_MspInit+0x94>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	02db      	lsls	r3, r3, #11
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c0e:	0021      	movs	r1, r4
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2238      	movs	r2, #56	; 0x38
 8001c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2202      	movs	r2, #2
 8001c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2203      	movs	r2, #3
 8001c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_SPI_MspInit+0x98>)
 8001c32:	0019      	movs	r1, r3
 8001c34:	0010      	movs	r0, r2
 8001c36:	f001 fb1d 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b00b      	add	sp, #44	; 0x2c
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40013000 	.word	0x40013000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000400 	.word	0x48000400

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_TIM_Base_MspInit+0x48>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d115      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0049      	lsls	r1, r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	61da      	str	r2, [r3, #28]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspInit+0x4c>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2013      	movs	r0, #19
 8001c84:	f001 f8ae 	bl	8002de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001c88:	2013      	movs	r0, #19
 8001c8a:	f001 f8c0 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b004      	add	sp, #16
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40002000 	.word	0x40002000
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	2414      	movs	r4, #20
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	0018      	movs	r0, r3
 8001cae:	2314      	movs	r3, #20
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f00a fdec 	bl	800c890 <memset>
  if(huart->Instance==USART3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_UART_MspInit+0xa0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d13a      	bne.n	8001d38 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	02c9      	lsls	r1, r1, #11
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	61da      	str	r2, [r3, #28]
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	02db      	lsls	r3, r3, #11
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0309      	lsls	r1, r1, #12
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspInit+0xa4>)
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	22c0      	movs	r2, #192	; 0xc0
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	0021      	movs	r1, r4
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2202      	movs	r2, #2
 8001d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2203      	movs	r2, #3
 8001d14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2201      	movs	r2, #1
 8001d1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_UART_MspInit+0xa8>)
 8001d20:	0019      	movs	r1, r3
 8001d22:	0010      	movs	r0, r2
 8001d24:	f001 faa6 	bl	8003274 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	201d      	movs	r0, #29
 8001d2e:	f001 f859 	bl	8002de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001d32:	201d      	movs	r0, #29
 8001d34:	f001 f86b 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b00b      	add	sp, #44	; 0x2c
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	40004800 	.word	0x40004800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000800 	.word	0x48000800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 fb64 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	0018      	movs	r0, r3
 8001d84:	f001 fc44 	bl	8003610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 fc3f 	bl	8003610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <DMA1_Channel1_IRQHandler+0x14>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f001 f97d 	bl	800309e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	2000063c 	.word	0x2000063c

08001db0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <TIM14_IRQHandler+0x14>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f004 ff0a 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200005d8 	.word	0x200005d8

08001dc8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <USART3_4_IRQHandler+0x14>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f005 fb6c 	bl	80074ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	200004f0 	.word	0x200004f0

08001de0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <USB_IRQHandler+0x14>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f001 fd64 	bl	80038b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20001370 	.word	0x20001370

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	18d3      	adds	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f00a fcf4 	bl	800c814 <__errno>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	425b      	negs	r3, r3
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	18d2      	adds	r2, r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b006      	add	sp, #24
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20004000 	.word	0x20004000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000258 	.word	0x20000258
 8001e60:	20001678 	.word	0x20001678

08001e64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	return testPhase;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <currentPhase+0x10>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	2000025c 	.word	0x2000025c

08001e84 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b092      	sub	sp, #72	; 0x48
 8001e88:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001e8a:	4bdb      	ldr	r3, [pc, #876]	; (80021f8 <testHandler+0x374>)
 8001e8c:	7e1a      	ldrb	r2, [r3, #24]
 8001e8e:	2102      	movs	r1, #2
 8001e90:	438a      	bics	r2, r1
 8001e92:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001e94:	4bd8      	ldr	r3, [pc, #864]	; (80021f8 <testHandler+0x374>)
 8001e96:	7b1b      	ldrb	r3, [r3, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02f      	beq.n	8001f02 <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8001ea2:	4bd6      	ldr	r3, [pc, #856]	; (80021fc <testHandler+0x378>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d126      	bne.n	8001ef8 <testHandler+0x74>
		{
			if(flags.conErr)
 8001eaa:	4bd3      	ldr	r3, [pc, #844]	; (80021f8 <testHandler+0x374>)
 8001eac:	7e1b      	ldrb	r3, [r3, #24]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01c      	beq.n	8001ef2 <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8001eb8:	211c      	movs	r1, #28
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	4ad0      	ldr	r2, [pc, #832]	; (8002200 <testHandler+0x37c>)
 8001ebe:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ec0:	c331      	stmia	r3!, {r0, r4, r5}
 8001ec2:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ec4:	c331      	stmia	r3!, {r0, r4, r5}
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001eca:	4bce      	ldr	r3, [pc, #824]	; (8002204 <testHandler+0x380>)
 8001ecc:	681c      	ldr	r4, [r3, #0]
 8001ece:	000d      	movs	r5, r1
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe f918 	bl	8000108 <strlen>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	001a      	movs	r2, r3
 8001edc:	197b      	adds	r3, r7, r5
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	f7ff fc52 	bl	800178a <pushStr>
				flags.instructions.startRequest = 0;
 8001ee6:	4bc4      	ldr	r3, [pc, #784]	; (80021f8 <testHandler+0x374>)
 8001ee8:	7b1a      	ldrb	r2, [r3, #12]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	731a      	strb	r2, [r3, #12]
 8001ef0:	e007      	b.n	8001f02 <testHandler+0x7e>
			}
			else
			{
				startTest();
 8001ef2:	f000 f999 	bl	8002228 <startTest>
 8001ef6:	e004      	b.n	8001f02 <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001ef8:	4bbf      	ldr	r3, [pc, #764]	; (80021f8 <testHandler+0x374>)
 8001efa:	7e1a      	ldrb	r2, [r3, #24]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001f02:	4bbd      	ldr	r3, [pc, #756]	; (80021f8 <testHandler+0x374>)
 8001f04:	7b1b      	ldrb	r3, [r3, #12]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <testHandler+0x90>
	{
		stopTest();
 8001f10:	f000 f9ec 	bl	80022ec <stopTest>
	}

	switch(testPhase)
 8001f14:	4bb9      	ldr	r3, [pc, #740]	; (80021fc <testHandler+0x378>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d900      	bls.n	8001f1e <testHandler+0x9a>
 8001f1c:	e17f      	b.n	800221e <testHandler+0x39a>
 8001f1e:	009a      	lsls	r2, r3, #2
 8001f20:	4bb9      	ldr	r3, [pc, #740]	; (8002208 <testHandler+0x384>)
 8001f22:	18d3      	adds	r3, r2, r3
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001f28:	4bb3      	ldr	r3, [pc, #716]	; (80021f8 <testHandler+0x374>)
 8001f2a:	7e1a      	ldrb	r2, [r3, #24]
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	438a      	bics	r2, r1
 8001f30:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001f32:	4bb1      	ldr	r3, [pc, #708]	; (80021f8 <testHandler+0x374>)
 8001f34:	7d1a      	ldrb	r2, [r3, #20]
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	751a      	strb	r2, [r3, #20]
		break;
 8001f3c:	e16f      	b.n	800221e <testHandler+0x39a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001f3e:	4bae      	ldr	r3, [pc, #696]	; (80021f8 <testHandler+0x374>)
 8001f40:	7d1b      	ldrb	r3, [r3, #20]
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <testHandler+0xd6>
		{
			testPhase++;
 8001f4c:	4bab      	ldr	r3, [pc, #684]	; (80021fc <testHandler+0x378>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4ba9      	ldr	r3, [pc, #676]	; (80021fc <testHandler+0x378>)
 8001f56:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8001f58:	e146      	b.n	80021e8 <testHandler+0x364>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8001f5a:	4bac      	ldr	r3, [pc, #688]	; (800220c <testHandler+0x388>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d000      	beq.n	8001f64 <testHandler+0xe0>
 8001f62:	e141      	b.n	80021e8 <testHandler+0x364>
			flags.meas.measRequest = 1;
 8001f64:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <testHandler+0x374>)
 8001f66:	7d1a      	ldrb	r2, [r3, #20]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	751a      	strb	r2, [r3, #20]
		break;
 8001f6e:	e13b      	b.n	80021e8 <testHandler+0x364>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001f70:	4ba7      	ldr	r3, [pc, #668]	; (8002210 <testHandler+0x38c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0018      	movs	r0, r3
 8001f78:	f001 fb11 	bl	800359e <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001f7c:	4ba4      	ldr	r3, [pc, #656]	; (8002210 <testHandler+0x38c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 fb0b 	bl	800359e <HAL_GPIO_WritePin>

		testPhase++;
 8001f88:	4b9c      	ldr	r3, [pc, #624]	; (80021fc <testHandler+0x378>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <testHandler+0x378>)
 8001f92:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001f94:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <testHandler+0x374>)
 8001f96:	7e1a      	ldrb	r2, [r3, #24]
 8001f98:	2102      	movs	r1, #2
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8001f9e:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <testHandler+0x390>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b9b      	ldr	r3, [pc, #620]	; (8002214 <testHandler+0x390>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2120      	movs	r1, #32
 8001faa:	430a      	orrs	r2, r1
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]
		sendData();
 8001fb0:	f7ff fcf8 	bl	80019a4 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb8:	e007      	b.n	8001fca <testHandler+0x146>
		{
			sysTime[i] = 0;
 8001fba:	4b94      	ldr	r3, [pc, #592]	; (800220c <testHandler+0x388>)
 8001fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	ddf4      	ble.n	8001fba <testHandler+0x136>
		}
		break;
 8001fd0:	e125      	b.n	800221e <testHandler+0x39a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001fd2:	4b89      	ldr	r3, [pc, #548]	; (80021f8 <testHandler+0x374>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d026      	beq.n	800202e <testHandler+0x1aa>
		{
			char time[9] = {0};
 8001fe0:	2510      	movs	r5, #16
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2205      	movs	r2, #5
 8001fec:	2100      	movs	r1, #0
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f00a fc4e 	bl	800c890 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001ff4:	4b85      	ldr	r3, [pc, #532]	; (800220c <testHandler+0x388>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	223c      	movs	r2, #60	; 0x3c
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	4b83      	ldr	r3, [pc, #524]	; (800220c <testHandler+0x388>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	213c      	movs	r1, #60	; 0x3c
 8002002:	1acc      	subs	r4, r1, r3
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <testHandler+0x388>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2103      	movs	r1, #3
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	4982      	ldr	r1, [pc, #520]	; (8002218 <testHandler+0x394>)
 800200e:	1978      	adds	r0, r7, r5
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	0023      	movs	r3, r4
 8002014:	f00a fcfe 	bl	800ca14 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <testHandler+0x390>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	4b7d      	ldr	r3, [pc, #500]	; (8002214 <testHandler+0x390>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2110      	movs	r1, #16
 8002024:	404a      	eors	r2, r1
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
			sendData();
 800202a:	f7ff fcbb 	bl	80019a4 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800202e:	4b77      	ldr	r3, [pc, #476]	; (800220c <testHandler+0x388>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <testHandler+0x1ca>
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <testHandler+0x374>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2204      	movs	r2, #4
 800203c:	4013      	ands	r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <testHandler+0x1ca>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002044:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <testHandler+0x374>)
 8002046:	7d1a      	ldrb	r2, [r3, #20]
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 800204e:	4b6f      	ldr	r3, [pc, #444]	; (800220c <testHandler+0x388>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b09      	cmp	r3, #9
 8002054:	dc00      	bgt.n	8002058 <testHandler+0x1d4>
 8002056:	e0c9      	b.n	80021ec <testHandler+0x368>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <testHandler+0x378>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <testHandler+0x378>)
 8002062:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002064:	e0c2      	b.n	80021ec <testHandler+0x368>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <testHandler+0x374>)
 8002068:	7d1b      	ldrb	r3, [r3, #20]
 800206a:	2208      	movs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d000      	beq.n	8002076 <testHandler+0x1f2>
 8002074:	e0bc      	b.n	80021f0 <testHandler+0x36c>
		{
			flags.ui.notice = 1;
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <testHandler+0x374>)
 8002078:	7c1a      	ldrb	r2, [r3, #16]
 800207a:	2108      	movs	r1, #8
 800207c:	430a      	orrs	r2, r1
 800207e:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <testHandler+0x374>)
 8002082:	7e1a      	ldrb	r2, [r3, #24]
 8002084:	2102      	movs	r1, #2
 8002086:	430a      	orrs	r2, r1
 8002088:	761a      	strb	r2, [r3, #24]

			testPhase++;
 800208a:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <testHandler+0x378>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <testHandler+0x378>)
 8002094:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <testHandler+0x38c>)
 8002098:	2200      	movs	r2, #0
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0018      	movs	r0, r3
 800209e:	f001 fa7e 	bl	800359e <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 80020a2:	4b5b      	ldr	r3, [pc, #364]	; (8002210 <testHandler+0x38c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	2140      	movs	r1, #64	; 0x40
 80020a8:	0018      	movs	r0, r3
 80020aa:	f001 fa78 	bl	800359e <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 80020ae:	4b59      	ldr	r3, [pc, #356]	; (8002214 <testHandler+0x390>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <testHandler+0x390>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2110      	movs	r1, #16
 80020ba:	430a      	orrs	r2, r1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 80020c0:	4b54      	ldr	r3, [pc, #336]	; (8002214 <testHandler+0x390>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <testHandler+0x390>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
			sendData();
 80020d2:	f7ff fc67 	bl	80019a4 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 80020d6:	2301      	movs	r3, #1
 80020d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020da:	e007      	b.n	80020ec <testHandler+0x268>
			{
				sysTime[i] = 0;
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <testHandler+0x388>)
 80020de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	2100      	movs	r1, #0
 80020e4:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	3301      	adds	r3, #1
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	ddf4      	ble.n	80020dc <testHandler+0x258>
			}
		}
		break;
 80020f2:	e07d      	b.n	80021f0 <testHandler+0x36c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 80020f4:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <testHandler+0x374>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d025      	beq.n	800214e <testHandler+0x2ca>
		{
			char time[9] = {0};
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	3304      	adds	r3, #4
 800210a:	2205      	movs	r2, #5
 800210c:	2100      	movs	r1, #0
 800210e:	0018      	movs	r0, r3
 8002110:	f00a fbbe 	bl	800c890 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <testHandler+0x388>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	223c      	movs	r2, #60	; 0x3c
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <testHandler+0x388>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	213c      	movs	r1, #60	; 0x3c
 8002122:	1acc      	subs	r4, r1, r3
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <testHandler+0x388>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2103      	movs	r1, #3
 800212a:	1acb      	subs	r3, r1, r3
 800212c:	493a      	ldr	r1, [pc, #232]	; (8002218 <testHandler+0x394>)
 800212e:	1d38      	adds	r0, r7, #4
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	0023      	movs	r3, r4
 8002134:	f00a fc6e 	bl	800ca14 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <testHandler+0x390>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <testHandler+0x390>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2108      	movs	r1, #8
 8002144:	404a      	eors	r2, r1
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
			sendData();
 800214a:	f7ff fc2b 	bl	80019a4 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <testHandler+0x388>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <testHandler+0x2ea>
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <testHandler+0x374>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2204      	movs	r2, #4
 800215c:	4013      	ands	r3, r2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <testHandler+0x2ea>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <testHandler+0x374>)
 8002166:	7d1a      	ldrb	r2, [r3, #20]
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <testHandler+0x388>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	dd3e      	ble.n	80021f4 <testHandler+0x370>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <testHandler+0x378>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <testHandler+0x378>)
 8002180:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002182:	e037      	b.n	80021f4 <testHandler+0x370>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <testHandler+0x374>)
 8002186:	7d1b      	ldrb	r3, [r3, #20]
 8002188:	2208      	movs	r2, #8
 800218a:	4013      	ands	r3, r2
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d144      	bne.n	800221c <testHandler+0x398>
		{
			flags.ui.done = 1;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <testHandler+0x374>)
 8002194:	7c1a      	ldrb	r2, [r3, #16]
 8002196:	2110      	movs	r1, #16
 8002198:	430a      	orrs	r2, r1
 800219a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <testHandler+0x374>)
 800219e:	7e1a      	ldrb	r2, [r3, #24]
 80021a0:	2102      	movs	r1, #2
 80021a2:	430a      	orrs	r2, r1
 80021a4:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <testHandler+0x390>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <testHandler+0x390>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2108      	movs	r1, #8
 80021b2:	430a      	orrs	r2, r1
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <testHandler+0x390>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <testHandler+0x390>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2102      	movs	r1, #2
 80021c4:	438a      	bics	r2, r1
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <testHandler+0x390>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <testHandler+0x390>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
			sendData();
 80021dc:	f7ff fbe2 	bl	80019a4 <sendData>

			testPhase = WAITING;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <testHandler+0x378>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021e6:	e019      	b.n	800221c <testHandler+0x398>
		break;
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	e018      	b.n	800221e <testHandler+0x39a>
		break;
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	e016      	b.n	800221e <testHandler+0x39a>
		break;
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	e014      	b.n	800221e <testHandler+0x39a>
		break;
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	e012      	b.n	800221e <testHandler+0x39a>
 80021f8:	20000620 	.word	0x20000620
 80021fc:	2000025c 	.word	0x2000025c
 8002200:	0800d140 	.word	0x0800d140
 8002204:	20000490 	.word	0x20000490
 8002208:	0800d254 	.word	0x0800d254
 800220c:	2000023c 	.word	0x2000023c
 8002210:	48000800 	.word	0x48000800
 8002214:	200006d0 	.word	0x200006d0
 8002218:	0800d134 	.word	0x0800d134
		break;
 800221c:	46c0      	nop			; (mov r8, r8)

	}
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b010      	add	sp, #64	; 0x40
 8002224:	bdb0      	pop	{r4, r5, r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)

08002228 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <startTest+0xa8>)
 8002230:	7c1a      	ldrb	r2, [r3, #16]
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <startTest+0xac>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <startTest+0xb0>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <startTest+0xa8>)
 8002246:	7e1a      	ldrb	r2, [r3, #24]
 8002248:	2102      	movs	r1, #2
 800224a:	430a      	orrs	r2, r1
 800224c:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 800224e:	4b23      	ldr	r3, [pc, #140]	; (80022dc <startTest+0xb4>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <startTest+0xb8>)
 8002254:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	e008      	b.n	800226e <startTest+0x46>
	{
		regValues[i] = 0;
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <startTest+0xb4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	18d3      	adds	r3, r2, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3301      	adds	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <startTest+0xbc>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	001a      	movs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4293      	cmp	r3, r2
 8002278:	dbf0      	blt.n	800225c <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <startTest+0xb8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <startTest+0xb8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2120      	movs	r1, #32
 8002286:	430a      	orrs	r2, r1
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <startTest+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <startTest+0xb8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	430a      	orrs	r2, r1
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 800229e:	f7ff fb81 	bl	80019a4 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 80022a2:	2301      	movs	r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	e007      	b.n	80022b8 <startTest+0x90>
	{
		sysTime[i] = 0;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <startTest+0xc0>)
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	2100      	movs	r1, #0
 80022b0:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	ddf4      	ble.n	80022a8 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <startTest+0xa8>)
 80022c0:	7b1a      	ldrb	r2, [r3, #12]
 80022c2:	2101      	movs	r1, #1
 80022c4:	438a      	bics	r2, r1
 80022c6:	731a      	strb	r2, [r3, #12]
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000620 	.word	0x20000620
 80022d4:	2000025c 	.word	0x2000025c
 80022d8:	20000260 	.word	0x20000260
 80022dc:	200006c0 	.word	0x200006c0
 80022e0:	200006d0 	.word	0x200006d0
 80022e4:	200006c5 	.word	0x200006c5
 80022e8:	2000023c 	.word	0x2000023c

080022ec <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <stopTest+0x5c>)
 80022f2:	7c1a      	ldrb	r2, [r3, #16]
 80022f4:	2102      	movs	r1, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <stopTest+0x60>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <stopTest+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0018      	movs	r0, r3
 8002308:	f001 f949 	bl	800359e <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <stopTest+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	0018      	movs	r0, r3
 8002314:	f001 f943 	bl	800359e <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <stopTest+0x68>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <stopTest+0x68>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <stopTest+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2104      	movs	r1, #4
 800232c:	430a      	orrs	r2, r1
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]
	sendData();
 8002332:	f7ff fb37 	bl	80019a4 <sendData>

	flags.instructions.stopRequest = 0;
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <stopTest+0x5c>)
 8002338:	7b1a      	ldrb	r2, [r3, #12]
 800233a:	2102      	movs	r1, #2
 800233c:	438a      	bics	r2, r1
 800233e:	731a      	strb	r2, [r3, #12]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	20000620 	.word	0x20000620
 800234c:	2000025c 	.word	0x2000025c
 8002350:	48000800 	.word	0x48000800
 8002354:	200006d0 	.word	0x200006d0

08002358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002364:	e002      	b.n	800236c <LoopCopyDataInit>

08002366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236a:	3304      	adds	r3, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800236c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002370:	d3f9      	bcc.n	8002366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002374:	4c0b      	ldr	r4, [pc, #44]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002378:	e001      	b.n	800237e <LoopFillZerobss>

0800237a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800237c:	3204      	adds	r2, #4

0800237e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002380:	d3fb      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002382:	f7ff fd6f 	bl	8001e64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002386:	f00a fa4b 	bl	800c820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800238a:	f7fe fa73 	bl	8000874 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   r0, =_estack
 8002390:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800239c:	0800d39c 	.word	0x0800d39c
  ldr r2, =_sbss
 80023a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023a4:	20001674 	.word	0x20001674

080023a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_COMP_IRQHandler>
	...

080023ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_Init+0x24>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_Init+0x24>)
 80023b6:	2110      	movs	r1, #16
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f809 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c2:	f7ff fb23 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40022000 	.word	0x40022000

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_InitTick+0x5c>)
 80023de:	681c      	ldr	r4, [r3, #0]
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_InitTick+0x60>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	0019      	movs	r1, r3
 80023e6:	23fa      	movs	r3, #250	; 0xfa
 80023e8:	0098      	lsls	r0, r3, #2
 80023ea:	f7fd fe9f 	bl	800012c <__udivsi3>
 80023ee:	0003      	movs	r3, r0
 80023f0:	0019      	movs	r1, r3
 80023f2:	0020      	movs	r0, r4
 80023f4:	f7fd fe9a 	bl	800012c <__udivsi3>
 80023f8:	0003      	movs	r3, r0
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fd17 	bl	8002e2e <HAL_SYSTICK_Config>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e00f      	b.n	8002428 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d80b      	bhi.n	8002426 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	2301      	movs	r3, #1
 8002412:	425b      	negs	r3, r3
 8002414:	2200      	movs	r2, #0
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fce4 	bl	8002de4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_InitTick+0x64>)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b003      	add	sp, #12
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000000 	.word	0x20000000
 8002434:	20000008 	.word	0x20000008
 8002438:	20000004 	.word	0x20000004

0800243c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_IncTick+0x1c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	001a      	movs	r2, r3
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_IncTick+0x20>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	18d2      	adds	r2, r2, r3
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_IncTick+0x20>)
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	20000008 	.word	0x20000008
 800245c:	200006d4 	.word	0x200006d4

08002460 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_GetTick+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	200006d4 	.word	0x200006d4

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff fff0 	bl	8002460 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	001a      	movs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	189b      	adds	r3, r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	f7ff ffe0 	bl	8002460 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b004      	add	sp, #16
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	230f      	movs	r3, #15
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e125      	b.n	8002726 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2234      	movs	r2, #52	; 0x34
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff faae 	bl	8001a54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	2210      	movs	r2, #16
 80024fe:	4013      	ands	r3, r2
 8002500:	d000      	beq.n	8002504 <HAL_ADC_Init+0x48>
 8002502:	e103      	b.n	800270c <HAL_ADC_Init+0x250>
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d000      	beq.n	8002510 <HAL_ADC_Init+0x54>
 800250e:	e0fd      	b.n	800270c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800251a:	d000      	beq.n	800251e <HAL_ADC_Init+0x62>
 800251c:	e0f6      	b.n	800270c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	4a83      	ldr	r2, [pc, #524]	; (8002730 <HAL_ADC_Init+0x274>)
 8002524:	4013      	ands	r3, r2
 8002526:	2202      	movs	r2, #2
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2203      	movs	r2, #3
 8002536:	4013      	ands	r3, r2
 8002538:	2b01      	cmp	r3, #1
 800253a:	d112      	bne.n	8002562 <HAL_ADC_Init+0xa6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2201      	movs	r2, #1
 8002544:	4013      	ands	r3, r2
 8002546:	2b01      	cmp	r3, #1
 8002548:	d009      	beq.n	800255e <HAL_ADC_Init+0xa2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	401a      	ands	r2, r3
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	429a      	cmp	r2, r3
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Init+0xa6>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_ADC_Init+0xa8>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2218      	movs	r2, #24
 8002570:	4393      	bics	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	0899      	lsrs	r1, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4964      	ldr	r1, [pc, #400]	; (8002734 <HAL_ADC_Init+0x278>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7e1b      	ldrb	r3, [r3, #24]
 80025aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e5b      	ldrb	r3, [r3, #25]
 80025b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e9b      	ldrb	r3, [r3, #26]
 80025b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80025ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_Init+0x10e>
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	015b      	lsls	r3, r3, #5
 80025c8:	e000      	b.n	80025cc <HAL_ADC_Init+0x110>
 80025ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80025cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80025d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_Init+0x124>
 80025dc:	2304      	movs	r3, #4
 80025de:	e000      	b.n	80025e2 <HAL_ADC_Init+0x126>
 80025e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80025e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2124      	movs	r1, #36	; 0x24
 80025e8:	5c5b      	ldrb	r3, [r3, r1]
 80025ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80025ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7edb      	ldrb	r3, [r3, #27]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d115      	bne.n	8002628 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e9b      	ldrb	r3, [r3, #26]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	0252      	lsls	r2, r2, #9
 800260a:	4313      	orrs	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	e00b      	b.n	8002628 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	2220      	movs	r2, #32
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	2201      	movs	r2, #1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	23c2      	movs	r3, #194	; 0xc2
 800262e:	33ff      	adds	r3, #255	; 0xff
 8002630:	429a      	cmp	r2, r3
 8002632:	d007      	beq.n	8002644 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800263c:	4313      	orrs	r3, r2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	429a      	cmp	r2, r3
 800265e:	d01b      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d017      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2b02      	cmp	r3, #2
 800266e:	d013      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b03      	cmp	r3, #3
 8002676:	d00f      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00b      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	2b05      	cmp	r3, #5
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2b06      	cmp	r3, #6
 800268e:	d003      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	2b07      	cmp	r3, #7
 8002696:	d112      	bne.n	80026be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2107      	movs	r1, #7
 80026a4:	438a      	bics	r2, r1
 80026a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6959      	ldr	r1, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	2207      	movs	r2, #7
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_ADC_Init+0x27c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10b      	bne.n	80026e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	2203      	movs	r2, #3
 80026da:	4393      	bics	r3, r2
 80026dc:	2201      	movs	r2, #1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026e4:	e01c      	b.n	8002720 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	2212      	movs	r2, #18
 80026ec:	4393      	bics	r3, r2
 80026ee:	2210      	movs	r2, #16
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	2201      	movs	r2, #1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002702:	230f      	movs	r3, #15
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800270a:	e009      	b.n	8002720 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	2210      	movs	r2, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002718:	230f      	movs	r3, #15
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002720:	230f      	movs	r3, #15
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b004      	add	sp, #16
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	fffffefd 	.word	0xfffffefd
 8002734:	fffe0219 	.word	0xfffe0219
 8002738:	833fffe7 	.word	0x833fffe7

0800273c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2317      	movs	r3, #23
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	d15e      	bne.n	800281a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2234      	movs	r2, #52	; 0x34
 8002760:	5c9b      	ldrb	r3, [r3, r2]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Start_DMA+0x2e>
 8002766:	2302      	movs	r3, #2
 8002768:	e05e      	b.n	8002828 <HAL_ADC_Start_DMA+0xec>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2234      	movs	r2, #52	; 0x34
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	7e5b      	ldrb	r3, [r3, #25]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d007      	beq.n	800278a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800277a:	2317      	movs	r3, #23
 800277c:	18fc      	adds	r4, r7, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 f97b 	bl	8002a7c <ADC_Enable>
 8002786:	0003      	movs	r3, r0
 8002788:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d146      	bne.n	8002822 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_ADC_Start_DMA+0xf4>)
 800279a:	4013      	ands	r3, r2
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2234      	movs	r2, #52	; 0x34
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_ADC_Start_DMA+0xf8>)
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_ADC_Start_DMA+0xfc>)
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_ADC_Start_DMA+0x100>)
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	221c      	movs	r2, #28
 80027d2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2110      	movs	r1, #16
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3340      	adds	r3, #64	; 0x40
 80027fe:	0019      	movs	r1, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f000 fb68 	bl	8002ed8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2104      	movs	r1, #4
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e003      	b.n	8002822 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800281a:	2317      	movs	r3, #23
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002822:	2317      	movs	r3, #23
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b007      	add	sp, #28
 800282e:	bd90      	pop	{r4, r7, pc}
 8002830:	fffff0fe 	.word	0xfffff0fe
 8002834:	08002b85 	.word	0x08002b85
 8002838:	08002c39 	.word	0x08002c39
 800283c:	08002c57 	.word	0x08002c57

08002840 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	230f      	movs	r3, #15
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	055b      	lsls	r3, r3, #21
 800287e:	429a      	cmp	r2, r3
 8002880:	d011      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x46>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d00d      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x46>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2b02      	cmp	r3, #2
 8002890:	d009      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x46>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	2b03      	cmp	r3, #3
 8002898:	d005      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x46>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d001      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x46>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2234      	movs	r2, #52	; 0x34
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x54>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0d0      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1f6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2234      	movs	r2, #52	; 0x34
 80028b8:	2101      	movs	r1, #1
 80028ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2204      	movs	r2, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d000      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x6a>
 80028c8:	e0b4      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a64      	ldr	r2, [pc, #400]	; (8002a60 <HAL_ADC_ConfigChannel+0x200>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d100      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x76>
 80028d4:	e082      	b.n	80029dc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d037      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d033      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b02      	cmp	r3, #2
 8002906:	d02f      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	2b03      	cmp	r3, #3
 800290e:	d02b      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2b04      	cmp	r3, #4
 8002916:	d027      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	2b05      	cmp	r3, #5
 800291e:	d023      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b06      	cmp	r3, #6
 8002926:	d01f      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b07      	cmp	r3, #7
 800292e:	d01b      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2107      	movs	r1, #7
 800293c:	400b      	ands	r3, r1
 800293e:	429a      	cmp	r2, r3
 8002940:	d012      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2107      	movs	r1, #7
 800294e:	438a      	bics	r2, r1
 8002950:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6959      	ldr	r1, [r3, #20]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2207      	movs	r2, #7
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b10      	cmp	r3, #16
 800296e:	d007      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x120>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b11      	cmp	r3, #17
 8002976:	d003      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x120>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d163      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_ADC_ConfigChannel+0x204>)
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d009      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x140>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b11      	cmp	r3, #17
 8002992:	d102      	bne.n	800299a <HAL_ADC_ConfigChannel+0x13a>
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	03db      	lsls	r3, r3, #15
 8002998:	e004      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x144>
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	045b      	lsls	r3, r3, #17
 800299e:	e001      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x144>
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <HAL_ADC_ConfigChannel+0x204>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d14a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_ADC_ConfigChannel+0x208>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	492d      	ldr	r1, [pc, #180]	; (8002a6c <HAL_ADC_ConfigChannel+0x20c>)
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7fd fbb7 	bl	800012c <__udivsi3>
 80029be:	0003      	movs	r3, r0
 80029c0:	001a      	movs	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029cc:	e002      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f9      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x16e>
 80029da:	e035      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2101      	movs	r1, #1
 80029e8:	4099      	lsls	r1, r3
 80029ea:	000b      	movs	r3, r1
 80029ec:	43d9      	mvns	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	400a      	ands	r2, r1
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d007      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x1ae>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b11      	cmp	r3, #17
 8002a04:	d003      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x1ae>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d11c      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_ADC_ConfigChannel+0x204>)
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d007      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x1ca>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b11      	cmp	r3, #17
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x1c6>
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_ADC_ConfigChannel+0x210>)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x1cc>
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_ADC_ConfigChannel+0x214>)
 8002a28:	e000      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x1cc>
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_ADC_ConfigChannel+0x218>)
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_ADC_ConfigChannel+0x204>)
 8002a2e:	400b      	ands	r3, r1
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e009      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	2220      	movs	r2, #32
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002a40:	230f      	movs	r3, #15
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2234      	movs	r2, #52	; 0x34
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a50:	230f      	movs	r3, #15
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	781b      	ldrb	r3, [r3, #0]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	00001001 	.word	0x00001001
 8002a64:	40012708 	.word	0x40012708
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	000f4240 	.word	0x000f4240
 8002a70:	ffbfffff 	.word	0xffbfffff
 8002a74:	feffffff 	.word	0xfeffffff
 8002a78:	ff7fffff 	.word	0xff7fffff

08002a7c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2203      	movs	r2, #3
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d112      	bne.n	8002ac0 <ADC_Enable+0x44>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d009      	beq.n	8002abc <ADC_Enable+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d101      	bne.n	8002ac0 <ADC_Enable+0x44>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <ADC_Enable+0x46>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d152      	bne.n	8002b6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <ADC_Enable+0xfc>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d00d      	beq.n	8002aee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e03f      	b.n	8002b6e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <ADC_Enable+0x100>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	491f      	ldr	r1, [pc, #124]	; (8002b80 <ADC_Enable+0x104>)
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fd fb11 	bl	800012c <__udivsi3>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b0e:	e002      	b.n	8002b16 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f9      	bne.n	8002b10 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b1c:	f7ff fca0 	bl	8002460 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b24:	e01b      	b.n	8002b5e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b26:	f7ff fc9b 	bl	8002460 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d914      	bls.n	8002b5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d00d      	beq.n	8002b5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	2210      	movs	r2, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2201      	movs	r2, #1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e007      	b.n	8002b6e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1dc      	bne.n	8002b26 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	80000017 	.word	0x80000017
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	000f4240 	.word	0x000f4240

08002b84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	2250      	movs	r2, #80	; 0x50
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d140      	bne.n	8002c1e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	23c0      	movs	r3, #192	; 0xc0
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d12d      	bne.n	8002c14 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d129      	bne.n	8002c14 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d122      	bne.n	8002c14 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d110      	bne.n	8002bfc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	210c      	movs	r1, #12
 8002be6:	438a      	bics	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <ADC_DMAConvCplt+0xb0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfa:	e00b      	b.n	8002c14 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	2220      	movs	r2, #32
 8002c02:	431a      	orrs	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7fd fe1c 	bl	8000854 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002c1c:	e005      	b.n	8002c2a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	0010      	movs	r0, r2
 8002c28:	4798      	blx	r3
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	fffffefe 	.word	0xfffffefe

08002c38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fdf9 	bl	8002840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2204      	movs	r2, #4
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff fde6 	bl	8002850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	0002      	movs	r2, r0
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	1dfb      	adds	r3, r7, #7
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c9e:	d809      	bhi.n	8002cb4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	401a      	ands	r2, r3
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_EnableIRQ+0x30>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	4091      	lsls	r1, r2
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
  }
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	1dfb      	adds	r3, r7, #7
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd4:	d828      	bhi.n	8002d28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <__NVIC_SetPriority+0xd4>)
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	33c0      	adds	r3, #192	; 0xc0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	589b      	ldr	r3, [r3, r2]
 8002ce6:	1dfa      	adds	r2, r7, #7
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	0011      	movs	r1, r2
 8002cec:	2203      	movs	r2, #3
 8002cee:	400a      	ands	r2, r1
 8002cf0:	00d2      	lsls	r2, r2, #3
 8002cf2:	21ff      	movs	r1, #255	; 0xff
 8002cf4:	4091      	lsls	r1, r2
 8002cf6:	000a      	movs	r2, r1
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	22ff      	movs	r2, #255	; 0xff
 8002d04:	401a      	ands	r2, r3
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	4003      	ands	r3, r0
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d14:	481f      	ldr	r0, [pc, #124]	; (8002d94 <__NVIC_SetPriority+0xd4>)
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	33c0      	adds	r3, #192	; 0xc0
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d26:	e031      	b.n	8002d8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <__NVIC_SetPriority+0xd8>)
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	230f      	movs	r3, #15
 8002d32:	400b      	ands	r3, r1
 8002d34:	3b08      	subs	r3, #8
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3306      	adds	r3, #6
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	3304      	adds	r3, #4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1dfa      	adds	r2, r7, #7
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	0011      	movs	r1, r2
 8002d48:	2203      	movs	r2, #3
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	00d2      	lsls	r2, r2, #3
 8002d4e:	21ff      	movs	r1, #255	; 0xff
 8002d50:	4091      	lsls	r1, r2
 8002d52:	000a      	movs	r2, r1
 8002d54:	43d2      	mvns	r2, r2
 8002d56:	401a      	ands	r2, r3
 8002d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	22ff      	movs	r2, #255	; 0xff
 8002d60:	401a      	ands	r2, r3
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	0018      	movs	r0, r3
 8002d68:	2303      	movs	r3, #3
 8002d6a:	4003      	ands	r3, r0
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d70:	4809      	ldr	r0, [pc, #36]	; (8002d98 <__NVIC_SetPriority+0xd8>)
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	001c      	movs	r4, r3
 8002d78:	230f      	movs	r3, #15
 8002d7a:	4023      	ands	r3, r4
 8002d7c:	3b08      	subs	r3, #8
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	430a      	orrs	r2, r1
 8002d82:	3306      	adds	r3, #6
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	18c3      	adds	r3, r0, r3
 8002d88:	3304      	adds	r3, #4
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b003      	add	sp, #12
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	045b      	lsls	r3, r3, #17
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d301      	bcc.n	8002db4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db0:	2301      	movs	r3, #1
 8002db2:	e010      	b.n	8002dd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <SysTick_Config+0x44>)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	3a01      	subs	r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	425b      	negs	r3, r3
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff ff7c 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <SysTick_Config+0x44>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <SysTick_Config+0x44>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	210f      	movs	r1, #15
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	1c02      	adds	r2, r0, #0
 8002df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	0002      	movs	r2, r0
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff ff33 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff ffaf 	bl	8002d9c <SysTick_Config>
 8002e3e:	0003      	movs	r3, r0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e036      	b.n	8002ecc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2221      	movs	r2, #33	; 0x21
 8002e62:	2102      	movs	r1, #2
 8002e64:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_DMA_Init+0x8c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f9c4 	bl	800323c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}  
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	ffffc00f 	.word	0xffffc00f

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2317      	movs	r3, #23
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_DMA_Start_IT+0x24>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e04f      	b.n	8002f9c <HAL_DMA_Start_IT+0xc4>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	2101      	movs	r1, #1
 8002f02:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d13a      	bne.n	8002f86 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2221      	movs	r2, #33	; 0x21
 8002f14:	2102      	movs	r1, #2
 8002f16:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f954 	bl	80031e2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	210e      	movs	r1, #14
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00f      	b.n	8002f74 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	210a      	movs	r1, #10
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2104      	movs	r1, #4
 8002f70:	438a      	bics	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f8e:	2317      	movs	r3, #23
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2202      	movs	r2, #2
 8002f94:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002f96:	2317      	movs	r3, #23
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	781b      	ldrb	r3, [r3, #0]
} 
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2221      	movs	r2, #33	; 0x21
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e020      	b.n	800300c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	210e      	movs	r1, #14
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4091      	lsls	r1, r2
 8002ff6:	000a      	movs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	2100      	movs	r1, #0
 8003008:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	210f      	movs	r1, #15
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d006      	beq.n	800303e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e028      	b.n	8003090 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	210e      	movs	r1, #14
 800304a:	438a      	bics	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2101      	movs	r1, #1
 800305a:	438a      	bics	r2, r1
 800305c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2101      	movs	r1, #1
 8003068:	4091      	lsls	r1, r2
 800306a:	000a      	movs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	0010      	movs	r0, r2
 800308e:	4798      	blx	r3
    } 
  }
  return status;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2204      	movs	r2, #4
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	d024      	beq.n	8003110 <HAL_DMA_IRQHandler+0x72>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2204      	movs	r2, #4
 80030ca:	4013      	ands	r3, r2
 80030cc:	d020      	beq.n	8003110 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2220      	movs	r2, #32
 80030d6:	4013      	ands	r3, r2
 80030d8:	d107      	bne.n	80030ea <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2104      	movs	r1, #4
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	2104      	movs	r1, #4
 80030f4:	4091      	lsls	r1, r2
 80030f6:	000a      	movs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d100      	bne.n	8003104 <HAL_DMA_IRQHandler+0x66>
 8003102:	e06a      	b.n	80031da <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	0010      	movs	r0, r2
 800310c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800310e:	e064      	b.n	80031da <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2202      	movs	r2, #2
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	d02b      	beq.n	8003178 <HAL_DMA_IRQHandler+0xda>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2202      	movs	r2, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d027      	beq.n	8003178 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	4013      	ands	r3, r2
 8003132:	d10b      	bne.n	800314c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	210a      	movs	r1, #10
 8003140:	438a      	bics	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	2102      	movs	r1, #2
 8003156:	4091      	lsls	r1, r2
 8003158:	000a      	movs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	2100      	movs	r1, #0
 8003162:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d036      	beq.n	80031da <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	0010      	movs	r0, r2
 8003174:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003176:	e030      	b.n	80031da <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2208      	movs	r2, #8
 800317e:	409a      	lsls	r2, r3
 8003180:	0013      	movs	r3, r2
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	d028      	beq.n	80031da <HAL_DMA_IRQHandler+0x13c>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2208      	movs	r2, #8
 800318c:	4013      	ands	r3, r2
 800318e:	d024      	beq.n	80031da <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	210e      	movs	r1, #14
 800319c:	438a      	bics	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2101      	movs	r1, #1
 80031aa:	4091      	lsls	r1, r2
 80031ac:	000a      	movs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	0010      	movs	r0, r2
 80031d6:	4798      	blx	r3
    }
   }
}  
 80031d8:	e7ff      	b.n	80031da <HAL_DMA_IRQHandler+0x13c>
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b004      	add	sp, #16
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	2101      	movs	r1, #1
 80031fa:	4091      	lsls	r1, r2
 80031fc:	000a      	movs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b10      	cmp	r3, #16
 800320e:	d108      	bne.n	8003222 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003220:	e007      	b.n	8003232 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <DMA_CalcBaseAndBitshift+0x30>)
 800324a:	4694      	mov	ip, r2
 800324c:	4463      	add	r3, ip
 800324e:	2114      	movs	r1, #20
 8003250:	0018      	movs	r0, r3
 8003252:	f7fc ff6b 	bl	800012c <__udivsi3>
 8003256:	0003      	movs	r3, r0
 8003258:	009a      	lsls	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a03      	ldr	r2, [pc, #12]	; (8003270 <DMA_CalcBaseAndBitshift+0x34>)
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	bffdfff8 	.word	0xbffdfff8
 8003270:	40020000 	.word	0x40020000

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003282:	e155      	b.n	8003530 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4091      	lsls	r1, r2
 800328e:	000a      	movs	r2, r1
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <HAL_GPIO_Init+0x28>
 800329a:	e146      	b.n	800352a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d005      	beq.n	80032b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	43da      	mvns	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	0013      	movs	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	43da      	mvns	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	2201      	movs	r2, #1
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	4013      	ands	r3, r2
 800331e:	2b03      	cmp	r3, #3
 8003320:	d017      	beq.n	8003352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	43da      	mvns	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d123      	bne.n	80033a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	58d3      	ldr	r3, [r2, r3]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2207      	movs	r2, #7
 8003370:	4013      	ands	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	409a      	lsls	r2, r3
 8003378:	0013      	movs	r3, r2
 800337a:	43da      	mvns	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2107      	movs	r1, #7
 800338a:	400b      	ands	r3, r1
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0013      	movs	r3, r2
 80033b6:	43da      	mvns	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2203      	movs	r2, #3
 80033c4:	401a      	ands	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	0013      	movs	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	23c0      	movs	r3, #192	; 0xc0
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	4013      	ands	r3, r2
 80033e4:	d100      	bne.n	80033e8 <HAL_GPIO_Init+0x174>
 80033e6:	e0a0      	b.n	800352a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_GPIO_Init+0x2d4>)
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_GPIO_Init+0x2d4>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]
 80033f4:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_GPIO_Init+0x2d4>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_GPIO_Init+0x2d8>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	589b      	ldr	r3, [r3, r2]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2203      	movs	r2, #3
 8003412:	4013      	ands	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	409a      	lsls	r2, r3
 800341a:	0013      	movs	r3, r2
 800341c:	43da      	mvns	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	2390      	movs	r3, #144	; 0x90
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	429a      	cmp	r2, r3
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_Init+0x1ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_GPIO_Init+0x2dc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0x1ea>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a46      	ldr	r2, [pc, #280]	; (8003554 <HAL_GPIO_Init+0x2e0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_Init+0x1e6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a45      	ldr	r2, [pc, #276]	; (8003558 <HAL_GPIO_Init+0x2e4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x1e2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_GPIO_Init+0x2e8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_Init+0x1de>
 800344e:	2304      	movs	r3, #4
 8003450:	e008      	b.n	8003464 <HAL_GPIO_Init+0x1f0>
 8003452:	2305      	movs	r3, #5
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x1f0>
 8003456:	2303      	movs	r3, #3
 8003458:	e004      	b.n	8003464 <HAL_GPIO_Init+0x1f0>
 800345a:	2302      	movs	r3, #2
 800345c:	e002      	b.n	8003464 <HAL_GPIO_Init+0x1f0>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_GPIO_Init+0x1f0>
 8003462:	2300      	movs	r3, #0
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	2103      	movs	r1, #3
 8003468:	400a      	ands	r2, r1
 800346a:	0092      	lsls	r2, r2, #2
 800346c:	4093      	lsls	r3, r2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003474:	4935      	ldr	r1, [pc, #212]	; (800354c <HAL_GPIO_Init+0x2d8>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43da      	mvns	r2, r3
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	025b      	lsls	r3, r3, #9
 800349a:	4013      	ands	r3, r2
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	4013      	ands	r3, r2
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43da      	mvns	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	035b      	lsls	r3, r3, #13
 80034ee:	4013      	ands	r3, r2
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43da      	mvns	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	039b      	lsls	r3, r3, #14
 8003518:	4013      	ands	r3, r2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	40da      	lsrs	r2, r3
 8003538:	1e13      	subs	r3, r2, #0
 800353a:	d000      	beq.n	800353e <HAL_GPIO_Init+0x2ca>
 800353c:	e6a2      	b.n	8003284 <HAL_GPIO_Init+0x10>
  } 
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b006      	add	sp, #24
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000
 8003550:	48000400 	.word	0x48000400
 8003554:	48000800 	.word	0x48000800
 8003558:	48000c00 	.word	0x48000c00
 800355c:	48001000 	.word	0x48001000
 8003560:	40010400 	.word	0x40010400

08003564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	000a      	movs	r2, r1
 800356e:	1cbb      	adds	r3, r7, #2
 8003570:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	1cba      	adds	r2, r7, #2
 8003578:	8812      	ldrh	r2, [r2, #0]
 800357a:	4013      	ands	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800357e:	230f      	movs	r3, #15
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e003      	b.n	8003590 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003588:	230f      	movs	r3, #15
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003590:	230f      	movs	r3, #15
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	781b      	ldrb	r3, [r3, #0]
  }
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	0008      	movs	r0, r1
 80035a8:	0011      	movs	r1, r2
 80035aa:	1cbb      	adds	r3, r7, #2
 80035ac:	1c02      	adds	r2, r0, #0
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	1c7b      	adds	r3, r7, #1
 80035b2:	1c0a      	adds	r2, r1, #0
 80035b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035b6:	1c7b      	adds	r3, r7, #1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035be:	1cbb      	adds	r3, r7, #2
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035c6:	e003      	b.n	80035d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035c8:	1cbb      	adds	r3, r7, #2
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	000a      	movs	r2, r1
 80035e2:	1cbb      	adds	r3, r7, #2
 80035e4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035ec:	1cbb      	adds	r3, r7, #2
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	041a      	lsls	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	1cb9      	adds	r1, r7, #2
 80035fc:	8809      	ldrh	r1, [r1, #0]
 80035fe:	400b      	ands	r3, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	0002      	movs	r2, r0
 8003618:	1dbb      	adds	r3, r7, #6
 800361a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	1dba      	adds	r2, r7, #6
 8003622:	8812      	ldrh	r2, [r2, #0]
 8003624:	4013      	ands	r3, r2
 8003626:	d008      	beq.n	800363a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800362a:	1dba      	adds	r2, r7, #6
 800362c:	8812      	ldrh	r2, [r2, #0]
 800362e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd f8d5 	bl	80007e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	40010400 	.word	0x40010400

08003648 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af06      	add	r7, sp, #24
 800364e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0ff      	b.n	800385a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a81      	ldr	r2, [pc, #516]	; (8003864 <HAL_PCD_Init+0x21c>)
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	23aa      	movs	r3, #170	; 0xaa
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	2100      	movs	r1, #0
 800366e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0018      	movs	r0, r3
 8003674:	f008 fd70 	bl	800c158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a7a      	ldr	r2, [pc, #488]	; (8003864 <HAL_PCD_Init+0x21c>)
 800367c:	2103      	movs	r1, #3
 800367e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0018      	movs	r0, r3
 8003686:	f004 fe0f 	bl	80082a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e058      	b.n	8003746 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003694:	200f      	movs	r0, #15
 8003696:	183b      	adds	r3, r7, r0
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	0013      	movs	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	18cb      	adds	r3, r1, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	0013      	movs	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	183a      	adds	r2, r7, r0
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c4:	0004      	movs	r4, r0
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b298      	uxth	r0, r3
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	0013      	movs	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	18cb      	adds	r3, r1, r3
 80036dc:	3336      	adds	r3, #54	; 0x36
 80036de:	1c02      	adds	r2, r0, #0
 80036e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	0013      	movs	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	18cb      	adds	r3, r1, r3
 80036f4:	3303      	adds	r3, #3
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	0013      	movs	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	189b      	adds	r3, r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	18cb      	adds	r3, r1, r3
 800370a:	3338      	adds	r3, #56	; 0x38
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003710:	193b      	adds	r3, r7, r4
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	0013      	movs	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	189b      	adds	r3, r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	18cb      	adds	r3, r1, r3
 8003720:	333c      	adds	r3, #60	; 0x3c
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	0013      	movs	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	189b      	adds	r3, r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	18cb      	adds	r3, r1, r3
 8003736:	3340      	adds	r3, #64	; 0x40
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	193b      	adds	r3, r7, r4
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	193b      	adds	r3, r7, r4
 8003742:	3201      	adds	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	210f      	movs	r1, #15
 8003748:	187b      	adds	r3, r7, r1
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d39f      	bcc.n	8003694 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e056      	b.n	800380a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800375c:	240f      	movs	r4, #15
 800375e:	193b      	adds	r3, r7, r4
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	236a      	movs	r3, #106	; 0x6a
 8003766:	33ff      	adds	r3, #255	; 0xff
 8003768:	0019      	movs	r1, r3
 800376a:	0013      	movs	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	189b      	adds	r3, r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	18c3      	adds	r3, r0, r3
 8003774:	185b      	adds	r3, r3, r1
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800377a:	193b      	adds	r3, r7, r4
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	23b4      	movs	r3, #180	; 0xb4
 8003782:	0059      	lsls	r1, r3, #1
 8003784:	0013      	movs	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	189b      	adds	r3, r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	18c3      	adds	r3, r0, r3
 800378e:	185b      	adds	r3, r3, r1
 8003790:	193a      	adds	r2, r7, r4
 8003792:	7812      	ldrb	r2, [r2, #0]
 8003794:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003796:	193b      	adds	r3, r7, r4
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	236c      	movs	r3, #108	; 0x6c
 800379e:	33ff      	adds	r3, #255	; 0xff
 80037a0:	0019      	movs	r1, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	18c3      	adds	r3, r0, r3
 80037ac:	185b      	adds	r3, r3, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	23bc      	movs	r3, #188	; 0xbc
 80037ba:	0059      	lsls	r1, r3, #1
 80037bc:	0013      	movs	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	18c3      	adds	r3, r0, r3
 80037c6:	185b      	adds	r3, r3, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	23be      	movs	r3, #190	; 0xbe
 80037d4:	0059      	lsls	r1, r3, #1
 80037d6:	0013      	movs	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	18c3      	adds	r3, r0, r3
 80037e0:	185b      	adds	r3, r3, r1
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037e6:	193b      	adds	r3, r7, r4
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	23c0      	movs	r3, #192	; 0xc0
 80037ee:	0059      	lsls	r1, r3, #1
 80037f0:	0013      	movs	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	18c3      	adds	r3, r0, r3
 80037fa:	185b      	adds	r3, r3, r1
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003800:	193b      	adds	r3, r7, r4
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	193b      	adds	r3, r7, r4
 8003806:	3201      	adds	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	230f      	movs	r3, #15
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d3a1      	bcc.n	800375c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	466a      	mov	r2, sp
 8003820:	0011      	movs	r1, r2
 8003822:	001a      	movs	r2, r3
 8003824:	3210      	adds	r2, #16
 8003826:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003828:	c170      	stmia	r1!, {r4, r5, r6}
 800382a:	ca30      	ldmia	r2!, {r4, r5}
 800382c:	c130      	stmia	r1!, {r4, r5}
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f004 fd52 	bl	80082dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <HAL_PCD_Init+0x21c>)
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d103      	bne.n	8003858 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f001 fd34 	bl	80052c0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b005      	add	sp, #20
 8003860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	000002a9 	.word	0x000002a9

08003868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	23aa      	movs	r3, #170	; 0xaa
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_PCD_Start+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e014      	b.n	80038aa <HAL_PCD_Start+0x42>
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	23aa      	movs	r3, #170	; 0xaa
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	2101      	movs	r1, #1
 8003888:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	f004 fcf4 	bl	800827c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0018      	movs	r0, r3
 800389a:	f006 fc4f 	bl	800a13c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	23aa      	movs	r3, #170	; 0xaa
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	2100      	movs	r1, #0
 80038a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f006 fc51 	bl	800a168 <USB_ReadInterrupts>
 80038c6:	0002      	movs	r2, r0
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	401a      	ands	r2, r3
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d103      	bne.n	80038de <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 fbbb 	bl	8004054 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f006 fc40 	bl	800a168 <USB_ReadInterrupts>
 80038e8:	0002      	movs	r2, r0
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	401a      	ands	r2, r3
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d114      	bne.n	8003922 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2244      	movs	r2, #68	; 0x44
 80038fe:	5a9b      	ldrh	r3, [r3, r2]
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	49a2      	ldr	r1, [pc, #648]	; (8003b90 <HAL_PCD_IRQHandler+0x2dc>)
 8003908:	400a      	ands	r2, r1
 800390a:	b291      	uxth	r1, r2
 800390c:	2244      	movs	r2, #68	; 0x44
 800390e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f008 fcab 	bl	800c26e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2100      	movs	r1, #0
 800391c:	0018      	movs	r0, r3
 800391e:	f000 f945 	bl	8003bac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0018      	movs	r0, r3
 8003928:	f006 fc1e 	bl	800a168 <USB_ReadInterrupts>
 800392c:	0002      	movs	r2, r0
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	01db      	lsls	r3, r3, #7
 8003932:	401a      	ands	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	01db      	lsls	r3, r3, #7
 8003938:	429a      	cmp	r2, r3
 800393a:	d10b      	bne.n	8003954 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2244      	movs	r2, #68	; 0x44
 8003942:	5a9b      	ldrh	r3, [r3, r2]
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4992      	ldr	r1, [pc, #584]	; (8003b94 <HAL_PCD_IRQHandler+0x2e0>)
 800394c:	400a      	ands	r2, r1
 800394e:	b291      	uxth	r1, r2
 8003950:	2244      	movs	r2, #68	; 0x44
 8003952:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0018      	movs	r0, r3
 800395a:	f006 fc05 	bl	800a168 <USB_ReadInterrupts>
 800395e:	0002      	movs	r2, r0
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	019b      	lsls	r3, r3, #6
 8003964:	401a      	ands	r2, r3
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	429a      	cmp	r2, r3
 800396c:	d10b      	bne.n	8003986 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2244      	movs	r2, #68	; 0x44
 8003974:	5a9b      	ldrh	r3, [r3, r2]
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4986      	ldr	r1, [pc, #536]	; (8003b98 <HAL_PCD_IRQHandler+0x2e4>)
 800397e:	400a      	ands	r2, r1
 8003980:	b291      	uxth	r1, r2
 8003982:	2244      	movs	r2, #68	; 0x44
 8003984:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0018      	movs	r0, r3
 800398c:	f006 fbec 	bl	800a168 <USB_ReadInterrupts>
 8003990:	0002      	movs	r2, r0
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	015b      	lsls	r3, r3, #5
 8003996:	401a      	ands	r2, r3
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	429a      	cmp	r2, r3
 800399e:	d137      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2104      	movs	r1, #4
 80039b0:	438a      	bics	r2, r1
 80039b2:	b291      	uxth	r1, r2
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	5a9b      	ldrh	r3, [r3, r2]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2108      	movs	r1, #8
 80039c8:	438a      	bics	r2, r1
 80039ca:	b291      	uxth	r1, r2
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	23b8      	movs	r3, #184	; 0xb8
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d109      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	23b8      	movs	r3, #184	; 0xb8
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	2100      	movs	r1, #0
 80039e4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2100      	movs	r1, #0
 80039ea:	0018      	movs	r0, r3
 80039ec:	f001 fc92 	bl	8005314 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f008 fc7c 	bl	800c2f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2244      	movs	r2, #68	; 0x44
 80039fe:	5a9b      	ldrh	r3, [r3, r2]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4965      	ldr	r1, [pc, #404]	; (8003b9c <HAL_PCD_IRQHandler+0x2e8>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	b291      	uxth	r1, r2
 8003a0c:	2244      	movs	r2, #68	; 0x44
 8003a0e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f006 fba7 	bl	800a168 <USB_ReadInterrupts>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	401a      	ands	r2, r3
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d127      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2108      	movs	r1, #8
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	b291      	uxth	r1, r2
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2244      	movs	r2, #68	; 0x44
 8003a48:	5a9b      	ldrh	r3, [r3, r2]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4953      	ldr	r1, [pc, #332]	; (8003ba0 <HAL_PCD_IRQHandler+0x2ec>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	b291      	uxth	r1, r2
 8003a56:	2244      	movs	r2, #68	; 0x44
 8003a58:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	5a9b      	ldrh	r3, [r3, r2]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2104      	movs	r1, #4
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	b291      	uxth	r1, r2
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f008 fc1f 	bl	800c2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f006 fb72 	bl	800a168 <USB_ReadInterrupts>
 8003a84:	0003      	movs	r3, r0
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d145      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2244      	movs	r2, #68	; 0x44
 8003a94:	5a9b      	ldrh	r3, [r3, r2]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	b291      	uxth	r1, r2
 8003aa2:	2244      	movs	r2, #68	; 0x44
 8003aa4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	23b8      	movs	r3, #184	; 0xb8
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12f      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	5a9b      	ldrh	r3, [r3, r2]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	b291      	uxth	r1, r2
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	5a9b      	ldrh	r3, [r3, r2]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2108      	movs	r1, #8
 8003ada:	430a      	orrs	r2, r1
 8003adc:	b291      	uxth	r1, r2
 8003ade:	2240      	movs	r2, #64	; 0x40
 8003ae0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	23b8      	movs	r3, #184	; 0xb8
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	2101      	movs	r1, #1
 8003aea:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2254      	movs	r2, #84	; 0x54
 8003af2:	5a9b      	ldrh	r3, [r3, r2]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	223c      	movs	r2, #60	; 0x3c
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	23b9      	movs	r3, #185	; 0xb9
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f001 fc02 	bl	8005314 <HAL_PCDEx_LPM_Callback>
 8003b10:	e003      	b.n	8003b1a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f008 fbcf 	bl	800c2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f006 fb22 	bl	800a168 <USB_ReadInterrupts>
 8003b24:	0002      	movs	r2, r0
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d10f      	bne.n	8003b54 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2244      	movs	r2, #68	; 0x44
 8003b3a:	5a9b      	ldrh	r3, [r3, r2]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4918      	ldr	r1, [pc, #96]	; (8003ba4 <HAL_PCD_IRQHandler+0x2f0>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	b291      	uxth	r1, r2
 8003b48:	2244      	movs	r2, #68	; 0x44
 8003b4a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f008 fb7e 	bl	800c250 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f006 fb05 	bl	800a168 <USB_ReadInterrupts>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	401a      	ands	r2, r3
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d10b      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2244      	movs	r2, #68	; 0x44
 8003b74:	5a9b      	ldrh	r3, [r3, r2]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_PCD_IRQHandler+0x2f4>)
 8003b7e:	400a      	ands	r2, r1
 8003b80:	b291      	uxth	r1, r2
 8003b82:	2244      	movs	r2, #68	; 0x44
 8003b84:	5299      	strh	r1, [r3, r2]
  }
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	fffffbff 	.word	0xfffffbff
 8003b94:	ffffbfff 	.word	0xffffbfff
 8003b98:	ffffdfff 	.word	0xffffdfff
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	fffff7ff 	.word	0xfffff7ff
 8003ba4:	fffffdff 	.word	0xfffffdff
 8003ba8:	fffffeff 	.word	0xfffffeff

08003bac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	000a      	movs	r2, r1
 8003bb6:	1cfb      	adds	r3, r7, #3
 8003bb8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	23aa      	movs	r3, #170	; 0xaa
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_PCD_SetAddress+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e017      	b.n	8003bfa <HAL_PCD_SetAddress+0x4e>
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	23aa      	movs	r3, #170	; 0xaa
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1cfa      	adds	r2, r7, #3
 8003bd8:	2124      	movs	r1, #36	; 0x24
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	1cfb      	adds	r3, r7, #3
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	0019      	movs	r1, r3
 8003be8:	0010      	movs	r0, r2
 8003bea:	f006 fa93 	bl	800a114 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	23aa      	movs	r3, #170	; 0xaa
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	000c      	movs	r4, r1
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	1cfb      	adds	r3, r7, #3
 8003c12:	1c22      	adds	r2, r4, #0
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	003b      	movs	r3, r7
 8003c18:	1c02      	adds	r2, r0, #0
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	1cbb      	adds	r3, r7, #2
 8003c1e:	1c0a      	adds	r2, r1, #0
 8003c20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c22:	230b      	movs	r3, #11
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2a:	1cfb      	adds	r3, r7, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0f      	bge.n	8003c54 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	1cfb      	adds	r3, r7, #3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2207      	movs	r2, #7
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	0013      	movs	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	705a      	strb	r2, [r3, #1]
 8003c52:	e00f      	b.n	8003c74 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c54:	1cfb      	adds	r3, r7, #3
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2207      	movs	r2, #7
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3369      	adds	r3, #105	; 0x69
 8003c66:	33ff      	adds	r3, #255	; 0xff
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	18d3      	adds	r3, r2, r3
 8003c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	1cfb      	adds	r3, r7, #3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2207      	movs	r2, #7
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c82:	003b      	movs	r3, r7
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1cba      	adds	r2, r7, #2
 8003c8e:	7812      	ldrb	r2, [r2, #0]
 8003c90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca4:	1cbb      	adds	r3, r7, #2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d102      	bne.n	8003cb2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	23aa      	movs	r3, #170	; 0xaa
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	5cd3      	ldrb	r3, [r2, r3]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_PCD_EP_Open+0xc0>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e013      	b.n	8003cea <HAL_PCD_EP_Open+0xe8>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	23aa      	movs	r3, #170	; 0xaa
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	2101      	movs	r1, #1
 8003cca:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	0011      	movs	r1, r2
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f004 fb2d 	bl	8008334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	23aa      	movs	r3, #170	; 0xaa
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003ce4:	230b      	movs	r3, #11
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b005      	add	sp, #20
 8003cf0:	bd90      	pop	{r4, r7, pc}

08003cf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	1cfb      	adds	r3, r7, #3
 8003cfe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d00:	1cfb      	adds	r3, r7, #3
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da0f      	bge.n	8003d2a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	1cfb      	adds	r3, r7, #3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2207      	movs	r2, #7
 8003d10:	4013      	ands	r3, r2
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	0013      	movs	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	18d3      	adds	r3, r2, r3
 8003d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e00f      	b.n	8003d4a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	1cfb      	adds	r3, r7, #3
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2207      	movs	r2, #7
 8003d30:	401a      	ands	r2, r3
 8003d32:	0013      	movs	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	3369      	adds	r3, #105	; 0x69
 8003d3c:	33ff      	adds	r3, #255	; 0xff
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d4a:	1cfb      	adds	r3, r7, #3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2207      	movs	r2, #7
 8003d50:	4013      	ands	r3, r2
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	23aa      	movs	r3, #170	; 0xaa
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_PCD_EP_Close+0x76>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e011      	b.n	8003d8c <HAL_PCD_EP_Close+0x9a>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	23aa      	movs	r3, #170	; 0xaa
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	2101      	movs	r1, #1
 8003d70:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f004 fe4e 	bl	8008a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	23aa      	movs	r3, #170	; 0xaa
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	2100      	movs	r1, #0
 8003d88:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	200b      	movs	r0, #11
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	1c0a      	adds	r2, r1, #0
 8003da6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	0001      	movs	r1, r0
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2207      	movs	r2, #7
 8003db0:	401a      	ands	r2, r3
 8003db2:	0013      	movs	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	3369      	adds	r3, #105	; 0x69
 8003dbc:	33ff      	adds	r3, #255	; 0xff
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2207      	movs	r2, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2207      	movs	r2, #7
 8003df0:	4013      	ands	r3, r2
 8003df2:	d107      	bne.n	8003e04 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f004 ffcd 	bl	8008d9c <USB_EPStartXfer>
 8003e02:	e006      	b.n	8003e12 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f004 ffc5 	bl	8008d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	000a      	movs	r2, r1
 8003e26:	1cfb      	adds	r3, r7, #3
 8003e28:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e2a:	1cfb      	adds	r3, r7, #3
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2207      	movs	r2, #7
 8003e30:	401a      	ands	r2, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	23c2      	movs	r3, #194	; 0xc2
 8003e36:	0059      	lsls	r1, r3, #1
 8003e38:	0013      	movs	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	18c3      	adds	r3, r0, r3
 8003e42:	185b      	adds	r3, r3, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	200b      	movs	r0, #11
 8003e5c:	183b      	adds	r3, r7, r0
 8003e5e:	1c0a      	adds	r2, r1, #0
 8003e60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	183b      	adds	r3, r7, r0
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2207      	movs	r2, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2224      	movs	r2, #36	; 0x24
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea0:	183b      	adds	r3, r7, r0
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eae:	183b      	adds	r3, r7, r0
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f004 ff6b 	bl	8008d9c <USB_EPStartXfer>
 8003ec6:	e006      	b.n	8003ed6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f004 ff63 	bl	8008d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	0018      	movs	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	000a      	movs	r2, r1
 8003eea:	1cfb      	adds	r3, r7, #3
 8003eec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eee:	1cfb      	adds	r3, r7, #3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d901      	bls.n	8003f02 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e046      	b.n	8003f90 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f02:	1cfb      	adds	r3, r7, #3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da0f      	bge.n	8003f2c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0c:	1cfb      	adds	r3, r7, #3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2207      	movs	r2, #7
 8003f12:	4013      	ands	r3, r2
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	0013      	movs	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	705a      	strb	r2, [r3, #1]
 8003f2a:	e00d      	b.n	8003f48 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f2c:	1cfb      	adds	r3, r7, #3
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	0013      	movs	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	189b      	adds	r3, r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3369      	adds	r3, #105	; 0x69
 8003f3a:	33ff      	adds	r3, #255	; 0xff
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	18d3      	adds	r3, r2, r3
 8003f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4e:	1cfb      	adds	r3, r7, #3
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2207      	movs	r2, #7
 8003f54:	4013      	ands	r3, r2
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	23aa      	movs	r3, #170	; 0xaa
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_PCD_EP_SetStall+0x8c>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e011      	b.n	8003f90 <HAL_PCD_EP_SetStall+0xb0>
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	23aa      	movs	r3, #170	; 0xaa
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	2101      	movs	r1, #1
 8003f74:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f005 ffc6 	bl	8009f10 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	23aa      	movs	r3, #170	; 0xaa
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	000a      	movs	r2, r1
 8003fa2:	1cfb      	adds	r3, r7, #3
 8003fa4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa6:	1cfb      	adds	r3, r7, #3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	220f      	movs	r2, #15
 8003fac:	401a      	ands	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d901      	bls.n	8003fba <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e048      	b.n	800404c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fba:	1cfb      	adds	r3, r7, #3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da0f      	bge.n	8003fe4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc4:	1cfb      	adds	r3, r7, #3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2207      	movs	r2, #7
 8003fca:	4013      	ands	r3, r2
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	0013      	movs	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	705a      	strb	r2, [r3, #1]
 8003fe2:	e00f      	b.n	8004004 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe4:	1cfb      	adds	r3, r7, #3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2207      	movs	r2, #7
 8003fea:	401a      	ands	r2, r3
 8003fec:	0013      	movs	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3369      	adds	r3, #105	; 0x69
 8003ff6:	33ff      	adds	r3, #255	; 0xff
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	18d3      	adds	r3, r2, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800400a:	1cfb      	adds	r3, r7, #3
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2207      	movs	r2, #7
 8004010:	4013      	ands	r3, r2
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	23aa      	movs	r3, #170	; 0xaa
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_PCD_EP_ClrStall+0x90>
 8004024:	2302      	movs	r3, #2
 8004026:	e011      	b.n	800404c <HAL_PCD_EP_ClrStall+0xb4>
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	23aa      	movs	r3, #170	; 0xaa
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	2101      	movs	r1, #1
 8004030:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f005 ffb8 	bl	8009fb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	23aa      	movs	r3, #170	; 0xaa
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	2100      	movs	r1, #0
 8004048:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}

08004054 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b096      	sub	sp, #88	; 0x58
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800405c:	f000 fbd8 	bl	8004810 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2056      	movs	r0, #86	; 0x56
 8004066:	183b      	adds	r3, r7, r0
 8004068:	2144      	movs	r1, #68	; 0x44
 800406a:	5a52      	ldrh	r2, [r2, r1]
 800406c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800406e:	183b      	adds	r3, r7, r0
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	2455      	movs	r4, #85	; 0x55
 8004076:	193b      	adds	r3, r7, r4
 8004078:	210f      	movs	r1, #15
 800407a:	400a      	ands	r2, r1
 800407c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800407e:	193b      	adds	r3, r7, r4
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d000      	beq.n	8004088 <PCD_EP_ISR_Handler+0x34>
 8004086:	e179      	b.n	800437c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004088:	183b      	adds	r3, r7, r0
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	2210      	movs	r2, #16
 800408e:	4013      	ands	r3, r2
 8004090:	d154      	bne.n	800413c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29a      	uxth	r2, r3
 800409a:	200e      	movs	r0, #14
 800409c:	183b      	adds	r3, r7, r0
 800409e:	49af      	ldr	r1, [pc, #700]	; (800435c <PCD_EP_ISR_Handler+0x308>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	183a      	adds	r2, r7, r0
 80040aa:	8812      	ldrh	r2, [r2, #0]
 80040ac:	49ac      	ldr	r1, [pc, #688]	; (8004360 <PCD_EP_ISR_Handler+0x30c>)
 80040ae:	430a      	orrs	r2, r1
 80040b0:	b292      	uxth	r2, r2
 80040b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3328      	adds	r3, #40	; 0x28
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2250      	movs	r2, #80	; 0x50
 80040c0:	5a9b      	ldrh	r3, [r3, r2]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	001a      	movs	r2, r3
 80040c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	18d2      	adds	r2, r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	18d3      	adds	r3, r2, r3
 80040d4:	4aa3      	ldr	r2, [pc, #652]	; (8004364 <PCD_EP_ISR_Handler+0x310>)
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	0d9a      	lsrs	r2, r3, #22
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80040e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	18d2      	adds	r2, r2, r3
 80040ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2100      	movs	r1, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f008 f88c 	bl	800c214 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	5c9b      	ldrb	r3, [r3, r2]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <PCD_EP_ISR_Handler+0xb8>
 8004108:	f000 fb82 	bl	8004810 <PCD_EP_ISR_Handler+0x7bc>
 800410c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <PCD_EP_ISR_Handler+0xc4>
 8004114:	f000 fb7c 	bl	8004810 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	4252      	negs	r2, r2
 8004124:	4313      	orrs	r3, r2
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b291      	uxth	r1, r2
 800412e:	224c      	movs	r2, #76	; 0x4c
 8004130:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2224      	movs	r2, #36	; 0x24
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]
 800413a:	e369      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3369      	adds	r3, #105	; 0x69
 8004140:	33ff      	adds	r3, #255	; 0xff
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2152      	movs	r1, #82	; 0x52
 800414a:	187b      	adds	r3, r7, r1
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004150:	187b      	adds	r3, r7, r1
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	4013      	ands	r3, r2
 800415a:	d037      	beq.n	80041cc <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2250      	movs	r2, #80	; 0x50
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	001a      	movs	r2, r3
 8004168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	18d2      	adds	r2, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	18d3      	adds	r3, r2, r3
 8004176:	4a7c      	ldr	r2, [pc, #496]	; (8004368 <PCD_EP_ISR_Handler+0x314>)
 8004178:	4694      	mov	ip, r2
 800417a:	4463      	add	r3, ip
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	059b      	lsls	r3, r3, #22
 8004180:	0d9a      	lsrs	r2, r3, #22
 8004182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004184:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	22ac      	movs	r2, #172	; 0xac
 800418e:	0092      	lsls	r2, r2, #2
 8004190:	1899      	adds	r1, r3, r2
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800419a:	b29b      	uxth	r3, r3
 800419c:	f006 f836 	bl	800a20c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	2010      	movs	r0, #16
 80041aa:	183b      	adds	r3, r7, r0
 80041ac:	496f      	ldr	r1, [pc, #444]	; (800436c <PCD_EP_ISR_Handler+0x318>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	183a      	adds	r2, r7, r0
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	430a      	orrs	r2, r1
 80041be:	b292      	uxth	r2, r2
 80041c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f007 ffef 	bl	800c1a8 <HAL_PCD_SetupStageCallback>
 80041ca:	e321      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80041cc:	2352      	movs	r3, #82	; 0x52
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2200      	movs	r2, #0
 80041d2:	5e9b      	ldrsh	r3, [r3, r2]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db00      	blt.n	80041da <PCD_EP_ISR_Handler+0x186>
 80041d8:	e31a      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	201e      	movs	r0, #30
 80041e4:	183b      	adds	r3, r7, r0
 80041e6:	4961      	ldr	r1, [pc, #388]	; (800436c <PCD_EP_ISR_Handler+0x318>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	183a      	adds	r2, r7, r0
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	430a      	orrs	r2, r1
 80041f8:	b292      	uxth	r2, r2
 80041fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2250      	movs	r2, #80	; 0x50
 8004202:	5a9b      	ldrh	r3, [r3, r2]
 8004204:	b29b      	uxth	r3, r3
 8004206:	001a      	movs	r2, r3
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	18d2      	adds	r2, r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	4a54      	ldr	r2, [pc, #336]	; (8004368 <PCD_EP_ISR_Handler+0x314>)
 8004218:	4694      	mov	ip, r2
 800421a:	4463      	add	r3, ip
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	059b      	lsls	r3, r3, #22
 8004220:	0d9a      	lsrs	r2, r3, #22
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <PCD_EP_ISR_Handler+0x210>
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004244:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004246:	b29b      	uxth	r3, r3
 8004248:	f005 ffe0 	bl	800a20c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	18d2      	adds	r2, r2, r3
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2100      	movs	r1, #0
 800425e:	0018      	movs	r0, r3
 8004260:	f007 ffb7 	bl	800c1d2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	001a      	movs	r2, r3
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	4013      	ands	r3, r2
 8004274:	d000      	beq.n	8004278 <PCD_EP_ISR_Handler+0x224>
 8004276:	e2cb      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2250      	movs	r2, #80	; 0x50
 8004284:	5a9b      	ldrh	r3, [r3, r2]
 8004286:	b29b      	uxth	r3, r3
 8004288:	001a      	movs	r2, r3
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	189b      	adds	r3, r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4a35      	ldr	r2, [pc, #212]	; (8004368 <PCD_EP_ISR_Handler+0x314>)
 8004294:	4694      	mov	ip, r2
 8004296:	4463      	add	r3, ip
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <PCD_EP_ISR_Handler+0x270>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <PCD_EP_ISR_Handler+0x31c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <PCD_EP_ISR_Handler+0x30c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b29a      	uxth	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e02b      	b.n	800431c <PCD_EP_ISR_Handler+0x2c8>
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b3e      	cmp	r3, #62	; 0x3e
 80042ca:	d812      	bhi.n	80042f2 <PCD_EP_ISR_Handler+0x29e>
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	647b      	str	r3, [r7, #68]	; 0x44
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2201      	movs	r2, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	d002      	beq.n	80042e4 <PCD_EP_ISR_Handler+0x290>
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	3301      	adds	r3, #1
 80042e2:	647b      	str	r3, [r7, #68]	; 0x44
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	e014      	b.n	800431c <PCD_EP_ISR_Handler+0x2c8>
 80042f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	221f      	movs	r2, #31
 8004300:	4013      	ands	r3, r2
 8004302:	d102      	bne.n	800430a <PCD_EP_ISR_Handler+0x2b6>
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	3b01      	subs	r3, #1
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430c:	b29b      	uxth	r3, r3
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	b29b      	uxth	r3, r3
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <PCD_EP_ISR_Handler+0x30c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	b29a      	uxth	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29a      	uxth	r2, r3
 8004324:	2012      	movs	r0, #18
 8004326:	183b      	adds	r3, r7, r0
 8004328:	4912      	ldr	r1, [pc, #72]	; (8004374 <PCD_EP_ISR_Handler+0x320>)
 800432a:	400a      	ands	r2, r1
 800432c:	801a      	strh	r2, [r3, #0]
 800432e:	183b      	adds	r3, r7, r0
 8004330:	183a      	adds	r2, r7, r0
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0149      	lsls	r1, r1, #5
 8004338:	404a      	eors	r2, r1
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	183b      	adds	r3, r7, r0
 800433e:	183a      	adds	r2, r7, r0
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0189      	lsls	r1, r1, #6
 8004346:	404a      	eors	r2, r1
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	183a      	adds	r2, r7, r0
 8004350:	8812      	ldrh	r2, [r2, #0]
 8004352:	4909      	ldr	r1, [pc, #36]	; (8004378 <PCD_EP_ISR_Handler+0x324>)
 8004354:	430a      	orrs	r2, r1
 8004356:	b292      	uxth	r2, r2
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e259      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
 800435c:	ffff8f0f 	.word	0xffff8f0f
 8004360:	ffff8000 	.word	0xffff8000
 8004364:	00000402 	.word	0x00000402
 8004368:	00000406 	.word	0x00000406
 800436c:	00000f8f 	.word	0x00000f8f
 8004370:	ffff83ff 	.word	0xffff83ff
 8004374:	ffffbf8f 	.word	0xffffbf8f
 8004378:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	001a      	movs	r2, r3
 8004382:	2055      	movs	r0, #85	; 0x55
 8004384:	183b      	adds	r3, r7, r0
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	18d2      	adds	r2, r2, r3
 800438c:	2152      	movs	r1, #82	; 0x52
 800438e:	187b      	adds	r3, r7, r1
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004394:	187b      	adds	r3, r7, r1
 8004396:	2200      	movs	r2, #0
 8004398:	5e9b      	ldrsh	r3, [r3, r2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	db00      	blt.n	80043a0 <PCD_EP_ISR_Handler+0x34c>
 800439e:	e0fa      	b.n	8004596 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	001a      	movs	r2, r3
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	2450      	movs	r4, #80	; 0x50
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	49cf      	ldr	r1, [pc, #828]	; (80046f4 <PCD_EP_ISR_Handler+0x6a0>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	001a      	movs	r2, r3
 80043c2:	183b      	adds	r3, r7, r0
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	193a      	adds	r2, r7, r4
 80043cc:	8812      	ldrh	r2, [r2, #0]
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	430a      	orrs	r2, r1
 80043d2:	b292      	uxth	r2, r2
 80043d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	0013      	movs	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	3369      	adds	r3, #105	; 0x69
 80043e4:	33ff      	adds	r3, #255	; 0xff
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	7b1b      	ldrb	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d125      	bne.n	8004440 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2250      	movs	r2, #80	; 0x50
 80043fa:	5a9b      	ldrh	r3, [r3, r2]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	001a      	movs	r2, r3
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	18d2      	adds	r2, r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	4aba      	ldr	r2, [pc, #744]	; (80046f8 <PCD_EP_ISR_Handler+0x6a4>)
 8004410:	4694      	mov	ip, r2
 8004412:	4463      	add	r3, ip
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	2448      	movs	r4, #72	; 0x48
 8004418:	193b      	adds	r3, r7, r4
 800441a:	0592      	lsls	r2, r2, #22
 800441c:	0d92      	lsrs	r2, r2, #22
 800441e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004420:	193b      	adds	r3, r7, r4
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d100      	bne.n	800442a <PCD_EP_ISR_Handler+0x3d6>
 8004428:	e08d      	b.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	6959      	ldr	r1, [r3, #20]
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	88da      	ldrh	r2, [r3, #6]
 8004436:	193b      	adds	r3, r7, r4
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	f005 fee7 	bl	800a20c <USB_ReadPMA>
 800443e:	e082      	b.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004442:	78db      	ldrb	r3, [r3, #3]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d10c      	bne.n	8004462 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004448:	2348      	movs	r3, #72	; 0x48
 800444a:	18fc      	adds	r4, r7, r3
 800444c:	2352      	movs	r3, #82	; 0x52
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f9ee 	bl	8004838 <HAL_PCD_EP_DB_Receive>
 800445c:	0003      	movs	r3, r0
 800445e:	8023      	strh	r3, [r4, #0]
 8004460:	e071      	b.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	001a      	movs	r2, r3
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	18d3      	adds	r3, r2, r3
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29a      	uxth	r2, r3
 8004474:	204a      	movs	r0, #74	; 0x4a
 8004476:	183b      	adds	r3, r7, r0
 8004478:	49a0      	ldr	r1, [pc, #640]	; (80046fc <PCD_EP_ISR_Handler+0x6a8>)
 800447a:	400a      	ands	r2, r1
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	001a      	movs	r2, r3
 8004484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	183a      	adds	r2, r7, r0
 800448e:	8812      	ldrh	r2, [r2, #0]
 8004490:	499b      	ldr	r1, [pc, #620]	; (8004700 <PCD_EP_ISR_Handler+0x6ac>)
 8004492:	430a      	orrs	r2, r1
 8004494:	b292      	uxth	r2, r2
 8004496:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	001a      	movs	r2, r3
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	001a      	movs	r2, r3
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4013      	ands	r3, r2
 80044b2:	d024      	beq.n	80044fe <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2250      	movs	r2, #80	; 0x50
 80044ba:	5a9b      	ldrh	r3, [r3, r2]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	001a      	movs	r2, r3
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	18d2      	adds	r2, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	18d3      	adds	r3, r2, r3
 80044ce:	4a8d      	ldr	r2, [pc, #564]	; (8004704 <PCD_EP_ISR_Handler+0x6b0>)
 80044d0:	4694      	mov	ip, r2
 80044d2:	4463      	add	r3, ip
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	2448      	movs	r4, #72	; 0x48
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	0592      	lsls	r2, r2, #22
 80044dc:	0d92      	lsrs	r2, r2, #22
 80044de:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02e      	beq.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	6959      	ldr	r1, [r3, #20]
 80044f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f2:	891a      	ldrh	r2, [r3, #8]
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	f005 fe88 	bl	800a20c <USB_ReadPMA>
 80044fc:	e023      	b.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2250      	movs	r2, #80	; 0x50
 8004504:	5a9b      	ldrh	r3, [r3, r2]
 8004506:	b29b      	uxth	r3, r3
 8004508:	001a      	movs	r2, r3
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	18d2      	adds	r2, r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	4a77      	ldr	r2, [pc, #476]	; (80046f8 <PCD_EP_ISR_Handler+0x6a4>)
 800451a:	4694      	mov	ip, r2
 800451c:	4463      	add	r3, ip
 800451e:	881a      	ldrh	r2, [r3, #0]
 8004520:	2448      	movs	r4, #72	; 0x48
 8004522:	193b      	adds	r3, r7, r4
 8004524:	0592      	lsls	r2, r2, #22
 8004526:	0d92      	lsrs	r2, r2, #22
 8004528:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800452a:	193b      	adds	r3, r7, r4
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	6959      	ldr	r1, [r3, #20]
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453c:	895a      	ldrh	r2, [r3, #10]
 800453e:	193b      	adds	r3, r7, r4
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	f005 fe63 	bl	800a20c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	2148      	movs	r1, #72	; 0x48
 800454c:	187b      	adds	r3, r7, r1
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	18d2      	adds	r2, r2, r3
 8004552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004554:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	187b      	adds	r3, r7, r1
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	18d2      	adds	r2, r2, r3
 8004560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004562:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <PCD_EP_ISR_Handler+0x524>
 800456c:	187b      	adds	r3, r7, r1
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d207      	bcs.n	8004588 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f007 fe26 	bl	800c1d2 <HAL_PCD_DataOutStageCallback>
 8004586:	e006      	b.n	8004596 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800458e:	0011      	movs	r1, r2
 8004590:	0018      	movs	r0, r3
 8004592:	f004 fc03 	bl	8008d9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004596:	2452      	movs	r4, #82	; 0x52
 8004598:	193b      	adds	r3, r7, r4
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	4013      	ands	r3, r2
 80045a0:	d100      	bne.n	80045a4 <PCD_EP_ISR_Handler+0x550>
 80045a2:	e135      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80045a4:	2055      	movs	r0, #85	; 0x55
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	0013      	movs	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	18d3      	adds	r3, r2, r3
 80045b8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	001a      	movs	r2, r3
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	2542      	movs	r5, #66	; 0x42
 80045ce:	197b      	adds	r3, r7, r5
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <PCD_EP_ISR_Handler+0x6b4>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	001a      	movs	r2, r3
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	197a      	adds	r2, r7, r5
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	4948      	ldr	r1, [pc, #288]	; (800470c <PCD_EP_ISR_Handler+0x6b8>)
 80045ea:	430a      	orrs	r2, r1
 80045ec:	b292      	uxth	r2, r2
 80045ee:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80045f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d100      	bne.n	80045fa <PCD_EP_ISR_Handler+0x5a6>
 80045f8:	e0ad      	b.n	8004756 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004600:	193b      	adds	r3, r7, r4
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	4013      	ands	r3, r2
 8004608:	d046      	beq.n	8004698 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d125      	bne.n	800465e <PCD_EP_ISR_Handler+0x60a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2250      	movs	r2, #80	; 0x50
 800461e:	5a9b      	ldrh	r3, [r3, r2]
 8004620:	b29b      	uxth	r3, r3
 8004622:	001a      	movs	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	189b      	adds	r3, r3, r2
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	00da      	lsls	r2, r3, #3
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	4a33      	ldr	r2, [pc, #204]	; (8004704 <PCD_EP_ISR_Handler+0x6b0>)
 8004636:	4694      	mov	ip, r2
 8004638:	4463      	add	r3, ip
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	4a33      	ldr	r2, [pc, #204]	; (8004710 <PCD_EP_ISR_Handler+0x6bc>)
 8004644:	4013      	ands	r3, r2
 8004646:	b29a      	uxth	r2, r3
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	4a2e      	ldr	r2, [pc, #184]	; (800470c <PCD_EP_ISR_Handler+0x6b8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	b29a      	uxth	r2, r3
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	e073      	b.n	8004746 <PCD_EP_ISR_Handler+0x6f2>
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d16f      	bne.n	8004746 <PCD_EP_ISR_Handler+0x6f2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2250      	movs	r2, #80	; 0x50
 8004672:	5a9b      	ldrh	r3, [r3, r2]
 8004674:	b29b      	uxth	r3, r3
 8004676:	001a      	movs	r2, r3
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	189b      	adds	r3, r3, r2
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	00da      	lsls	r2, r3, #3
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	18d3      	adds	r3, r2, r3
 8004688:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <PCD_EP_ISR_Handler+0x6b0>)
 800468a:	4694      	mov	ip, r2
 800468c:	4463      	add	r3, ip
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	2200      	movs	r2, #0
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e056      	b.n	8004746 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d136      	bne.n	8004714 <PCD_EP_ISR_Handler+0x6c0>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2250      	movs	r2, #80	; 0x50
 80046b2:	5a9b      	ldrh	r3, [r3, r2]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	001a      	movs	r2, r3
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	00da      	lsls	r2, r3, #3
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <PCD_EP_ISR_Handler+0x6a4>)
 80046ca:	4694      	mov	ip, r2
 80046cc:	4463      	add	r3, ip
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <PCD_EP_ISR_Handler+0x6bc>)
 80046d8:	4013      	ands	r3, r2
 80046da:	b29a      	uxth	r2, r3
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <PCD_EP_ISR_Handler+0x6b8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e029      	b.n	8004746 <PCD_EP_ISR_Handler+0x6f2>
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	00000f8f 	.word	0x00000f8f
 80046f8:	00000406 	.word	0x00000406
 80046fc:	ffff8f8f 	.word	0xffff8f8f
 8004700:	ffff80c0 	.word	0xffff80c0
 8004704:	00000402 	.word	0x00000402
 8004708:	ffff8f0f 	.word	0xffff8f0f
 800470c:	ffff8000 	.word	0xffff8000
 8004710:	ffff83ff 	.word	0xffff83ff
 8004714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d114      	bne.n	8004746 <PCD_EP_ISR_Handler+0x6f2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2250      	movs	r2, #80	; 0x50
 8004722:	5a9b      	ldrh	r3, [r3, r2]
 8004724:	b29b      	uxth	r3, r3
 8004726:	001a      	movs	r2, r3
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	189b      	adds	r3, r3, r2
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	00da      	lsls	r2, r3, #3
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	18d3      	adds	r3, r2, r3
 8004738:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <PCD_EP_ISR_Handler+0x7dc>)
 800473a:	4694      	mov	ip, r2
 800473c:	4463      	add	r3, ip
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0011      	movs	r1, r2
 800474e:	0018      	movs	r0, r3
 8004750:	f007 fd60 	bl	800c214 <HAL_PCD_DataInStageCallback>
 8004754:	e05c      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d150      	bne.n	8004800 <PCD_EP_ISR_Handler+0x7ac>
 800475e:	2352      	movs	r3, #82	; 0x52
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4013      	ands	r3, r2
 800476a:	d149      	bne.n	8004800 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2250      	movs	r2, #80	; 0x50
 8004772:	5a9b      	ldrh	r3, [r3, r2]
 8004774:	b29b      	uxth	r3, r3
 8004776:	001a      	movs	r2, r3
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	18d2      	adds	r2, r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <PCD_EP_ISR_Handler+0x7e0>)
 8004788:	4694      	mov	ip, r2
 800478a:	4463      	add	r3, ip
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	2140      	movs	r1, #64	; 0x40
 8004790:	187b      	adds	r3, r7, r1
 8004792:	0592      	lsls	r2, r2, #22
 8004794:	0d92      	lsrs	r2, r2, #22
 8004796:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	187b      	adds	r3, r7, r1
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d907      	bls.n	80047b4 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80047a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	1ad2      	subs	r2, r2, r3
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	619a      	str	r2, [r3, #24]
 80047b2:	e002      	b.n	80047ba <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80047b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b6:	2200      	movs	r2, #0
 80047b8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80047ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f007 fd22 	bl	800c214 <HAL_PCD_DataInStageCallback>
 80047d0:	e01e      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	2140      	movs	r1, #64	; 0x40
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	18d2      	adds	r2, r2, r3
 80047de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	18d2      	adds	r2, r2, r3
 80047ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047f6:	0011      	movs	r1, r2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f004 facf 	bl	8008d9c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80047fe:	e007      	b.n	8004810 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004800:	2352      	movs	r3, #82	; 0x52
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0018      	movs	r0, r3
 800480c:	f000 f930 	bl	8004a70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2244      	movs	r2, #68	; 0x44
 8004816:	5a9b      	ldrh	r3, [r3, r2]
 8004818:	b29b      	uxth	r3, r3
 800481a:	b21b      	sxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	da01      	bge.n	8004824 <PCD_EP_ISR_Handler+0x7d0>
 8004820:	f7ff fc1e 	bl	8004060 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b016      	add	sp, #88	; 0x58
 800482c:	bdb0      	pop	{r4, r5, r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	00000406 	.word	0x00000406
 8004834:	00000402 	.word	0x00000402

08004838 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	1dbb      	adds	r3, r7, #6
 8004844:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004846:	1dbb      	adds	r3, r7, #6
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	01db      	lsls	r3, r3, #7
 800484e:	4013      	ands	r3, r2
 8004850:	d100      	bne.n	8004854 <HAL_PCD_EP_DB_Receive+0x1c>
 8004852:	e07d      	b.n	8004950 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2250      	movs	r2, #80	; 0x50
 800485a:	5a9b      	ldrh	r3, [r3, r2]
 800485c:	b29b      	uxth	r3, r3
 800485e:	001a      	movs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	18d2      	adds	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	4a7a      	ldr	r2, [pc, #488]	; (8004a58 <HAL_PCD_EP_DB_Receive+0x220>)
 8004870:	4694      	mov	ip, r2
 8004872:	4463      	add	r3, ip
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	211a      	movs	r1, #26
 8004878:	187b      	adds	r3, r7, r1
 800487a:	0592      	lsls	r2, r2, #22
 800487c:	0d92      	lsrs	r2, r2, #22
 800487e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	187b      	adds	r3, r7, r1
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d307      	bcc.n	800489c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	187b      	adds	r3, r7, r1
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	1ad2      	subs	r2, r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	619a      	str	r2, [r3, #24]
 800489a:	e002      	b.n	80048a2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d121      	bne.n	80048ee <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	001a      	movs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	2018      	movs	r0, #24
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	4966      	ldr	r1, [pc, #408]	; (8004a5c <HAL_PCD_EP_DB_Receive+0x224>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	183a      	adds	r2, r7, r0
 80048ca:	8812      	ldrh	r2, [r2, #0]
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	0189      	lsls	r1, r1, #6
 80048d0:	404a      	eors	r2, r1
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	001a      	movs	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	183a      	adds	r2, r7, r0
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	495e      	ldr	r1, [pc, #376]	; (8004a60 <HAL_PCD_EP_DB_Receive+0x228>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	b292      	uxth	r2, r2
 80048ec:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048ee:	1dbb      	adds	r3, r7, #6
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	4013      	ands	r3, r2
 80048f6:	d01a      	beq.n	800492e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	001a      	movs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	2016      	movs	r0, #22
 800490c:	183b      	adds	r3, r7, r0
 800490e:	4955      	ldr	r1, [pc, #340]	; (8004a64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004910:	400a      	ands	r2, r1
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	001a      	movs	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	18d3      	adds	r3, r2, r3
 8004922:	183a      	adds	r2, r7, r0
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	4950      	ldr	r1, [pc, #320]	; (8004a68 <HAL_PCD_EP_DB_Receive+0x230>)
 8004928:	430a      	orrs	r2, r1
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800492e:	241a      	movs	r4, #26
 8004930:	193b      	adds	r3, r7, r4
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d100      	bne.n	800493a <HAL_PCD_EP_DB_Receive+0x102>
 8004938:	e086      	b.n	8004a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6959      	ldr	r1, [r3, #20]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	891a      	ldrh	r2, [r3, #8]
 8004946:	193b      	adds	r3, r7, r4
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	f005 fc5f 	bl	800a20c <USB_ReadPMA>
 800494e:	e07b      	b.n	8004a48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2250      	movs	r2, #80	; 0x50
 8004956:	5a9b      	ldrh	r3, [r3, r2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	001a      	movs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	18d2      	adds	r2, r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	18d3      	adds	r3, r2, r3
 800496a:	4a40      	ldr	r2, [pc, #256]	; (8004a6c <HAL_PCD_EP_DB_Receive+0x234>)
 800496c:	4694      	mov	ip, r2
 800496e:	4463      	add	r3, ip
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	211a      	movs	r1, #26
 8004974:	187b      	adds	r3, r7, r1
 8004976:	0592      	lsls	r2, r2, #22
 8004978:	0d92      	lsrs	r2, r2, #22
 800497a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	187b      	adds	r3, r7, r1
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d307      	bcc.n	8004998 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	187b      	adds	r3, r7, r1
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	1ad2      	subs	r2, r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e002      	b.n	800499e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	001a      	movs	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	201e      	movs	r0, #30
 80049ba:	183b      	adds	r3, r7, r0
 80049bc:	4927      	ldr	r1, [pc, #156]	; (8004a5c <HAL_PCD_EP_DB_Receive+0x224>)
 80049be:	400a      	ands	r2, r1
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	183a      	adds	r2, r7, r0
 80049c6:	8812      	ldrh	r2, [r2, #0]
 80049c8:	2180      	movs	r1, #128	; 0x80
 80049ca:	0189      	lsls	r1, r1, #6
 80049cc:	404a      	eors	r2, r1
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	001a      	movs	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	18d3      	adds	r3, r2, r3
 80049de:	183a      	adds	r2, r7, r0
 80049e0:	8812      	ldrh	r2, [r2, #0]
 80049e2:	491f      	ldr	r1, [pc, #124]	; (8004a60 <HAL_PCD_EP_DB_Receive+0x228>)
 80049e4:	430a      	orrs	r2, r1
 80049e6:	b292      	uxth	r2, r2
 80049e8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80049ea:	1dbb      	adds	r3, r7, #6
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	4013      	ands	r3, r2
 80049f2:	d11a      	bne.n	8004a2a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	001a      	movs	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18d3      	adds	r3, r2, r3
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	201c      	movs	r0, #28
 8004a08:	183b      	adds	r3, r7, r0
 8004a0a:	4916      	ldr	r1, [pc, #88]	; (8004a64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	001a      	movs	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	183a      	adds	r2, r7, r0
 8004a20:	8812      	ldrh	r2, [r2, #0]
 8004a22:	4911      	ldr	r1, [pc, #68]	; (8004a68 <HAL_PCD_EP_DB_Receive+0x230>)
 8004a24:	430a      	orrs	r2, r1
 8004a26:	b292      	uxth	r2, r2
 8004a28:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004a2a:	241a      	movs	r4, #26
 8004a2c:	193b      	adds	r3, r7, r4
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6959      	ldr	r1, [r3, #20]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	895a      	ldrh	r2, [r3, #10]
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	f005 fbe2 	bl	800a20c <USB_ReadPMA>
    }
  }

  return count;
 8004a48:	231a      	movs	r3, #26
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	881b      	ldrh	r3, [r3, #0]
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b009      	add	sp, #36	; 0x24
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	00000402 	.word	0x00000402
 8004a5c:	ffffbf8f 	.word	0xffffbf8f
 8004a60:	ffff8080 	.word	0xffff8080
 8004a64:	ffff8f8f 	.word	0xffff8f8f
 8004a68:	ffff80c0 	.word	0xffff80c0
 8004a6c:	00000406 	.word	0x00000406

08004a70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b0a2      	sub	sp, #136	; 0x88
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	1dbb      	adds	r3, r7, #6
 8004a7c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a7e:	1dbb      	adds	r3, r7, #6
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	4013      	ands	r3, r2
 8004a86:	d100      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x1a>
 8004a88:	e1c8      	b.n	8004e1c <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2250      	movs	r2, #80	; 0x50
 8004a90:	5a9b      	ldrh	r3, [r3, r2]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	001a      	movs	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	18d2      	adds	r2, r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	4ad7      	ldr	r2, [pc, #860]	; (8004e04 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004aa6:	4694      	mov	ip, r2
 8004aa8:	4463      	add	r3, ip
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	214e      	movs	r1, #78	; 0x4e
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	0592      	lsls	r2, r2, #22
 8004ab2:	0d92      	lsrs	r2, r2, #22
 8004ab4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	187b      	adds	r3, r7, r1
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d907      	bls.n	8004ad2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	187b      	adds	r3, r7, r1
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	619a      	str	r2, [r3, #24]
 8004ad0:	e002      	b.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d000      	beq.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x72>
 8004ae0:	e0b5      	b.n	8004c4e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d125      	bne.n	8004b36 <HAL_PCD_EP_DB_Transmit+0xc6>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2250      	movs	r2, #80	; 0x50
 8004af6:	5a9b      	ldrh	r3, [r3, r2]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	001a      	movs	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	00da      	lsls	r2, r3, #3
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	4abd      	ldr	r2, [pc, #756]	; (8004e04 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004b0e:	4694      	mov	ip, r2
 8004b10:	4463      	add	r3, ip
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4abb      	ldr	r2, [pc, #748]	; (8004e08 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4ab8      	ldr	r2, [pc, #736]	; (8004e0c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e01b      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d117      	bne.n	8004b6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2250      	movs	r2, #80	; 0x50
 8004b4a:	5a9b      	ldrh	r3, [r3, r2]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	001a      	movs	r2, r3
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	00da      	lsls	r2, r3, #3
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	18d3      	adds	r3, r2, r3
 8004b60:	4aa8      	ldr	r2, [pc, #672]	; (8004e04 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004b62:	4694      	mov	ip, r2
 8004b64:	4463      	add	r3, ip
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d125      	bne.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x158>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2250      	movs	r2, #80	; 0x50
 8004b88:	5a9b      	ldrh	r3, [r3, r2]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00da      	lsls	r2, r3, #3
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	18d3      	adds	r3, r2, r3
 8004b9e:	4a9c      	ldr	r2, [pc, #624]	; (8004e10 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004ba0:	4694      	mov	ip, r2
 8004ba2:	4463      	add	r3, ip
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4a96      	ldr	r2, [pc, #600]	; (8004e08 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4a93      	ldr	r2, [pc, #588]	; (8004e0c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e018      	b.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d114      	bne.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2250      	movs	r2, #80	; 0x50
 8004bd6:	5a9b      	ldrh	r3, [r3, r2]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	001a      	movs	r2, r3
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	00da      	lsls	r2, r3, #3
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	4a88      	ldr	r2, [pc, #544]	; (8004e10 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004bee:	4694      	mov	ip, r2
 8004bf0:	4463      	add	r3, ip
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781a      	ldrb	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	0011      	movs	r1, r2
 8004c02:	0018      	movs	r0, r3
 8004c04:	f007 fb06 	bl	800c214 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c08:	1dbb      	adds	r3, r7, #6
 8004c0a:	881a      	ldrh	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	4013      	ands	r3, r2
 8004c12:	d100      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004c14:	e2d4      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	18d3      	adds	r3, r2, r3
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	2012      	movs	r0, #18
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	4979      	ldr	r1, [pc, #484]	; (8004e14 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004c2e:	400a      	ands	r2, r1
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	001a      	movs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	18d3      	adds	r3, r2, r3
 8004c40:	183a      	adds	r2, r7, r0
 8004c42:	8812      	ldrh	r2, [r2, #0]
 8004c44:	4974      	ldr	r1, [pc, #464]	; (8004e18 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004c46:	430a      	orrs	r2, r1
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	e2b8      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c4e:	1dbb      	adds	r3, r7, #6
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	4013      	ands	r3, r2
 8004c58:	d01a      	beq.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	001a      	movs	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	2044      	movs	r0, #68	; 0x44
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	4968      	ldr	r1, [pc, #416]	; (8004e14 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	18d3      	adds	r3, r2, r3
 8004c84:	183a      	adds	r2, r7, r0
 8004c86:	8812      	ldrh	r2, [r2, #0]
 8004c88:	4963      	ldr	r1, [pc, #396]	; (8004e18 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	5c9b      	ldrb	r3, [r3, r2]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d000      	beq.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x22c>
 8004c9a:	e291      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	214e      	movs	r1, #78	; 0x4e
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	18d2      	adds	r2, r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	18d2      	adds	r2, r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6a1a      	ldr	r2, [r3, #32]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d309      	bcc.n	8004cda <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	621a      	str	r2, [r3, #32]
 8004cd8:	e016      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d108      	bne.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004ce2:	234e      	movs	r3, #78	; 0x4e
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]
 8004cf2:	e009      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2224      	movs	r2, #36	; 0x24
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d150      	bne.n	8004db2 <HAL_PCD_EP_DB_Transmit+0x342>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2250      	movs	r2, #80	; 0x50
 8004d1c:	5a9b      	ldrh	r3, [r3, r2]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	001a      	movs	r2, r3
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	00da      	lsls	r2, r3, #3
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004d34:	4694      	mov	ip, r2
 8004d36:	4463      	add	r3, ip
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d110      	bne.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	4a30      	ldr	r2, [pc, #192]	; (8004e08 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4a2d      	ldr	r2, [pc, #180]	; (8004e0c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	e044      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x37c>
 8004d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d64:	2b3e      	cmp	r3, #62	; 0x3e
 8004d66:	d810      	bhi.n	8004d8a <HAL_PCD_EP_DB_Transmit+0x31a>
 8004d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	2201      	movs	r2, #1
 8004d72:	4013      	ands	r3, r2
 8004d74:	d002      	beq.n	8004d7c <HAL_PCD_EP_DB_Transmit+0x30c>
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	3301      	adds	r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e030      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x37c>
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d92:	221f      	movs	r2, #31
 8004d94:	4013      	ands	r3, r2
 8004d96:	d102      	bne.n	8004d9e <HAL_PCD_EP_DB_Transmit+0x32e>
 8004d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	e01c      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x37c>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d118      	bne.n	8004dec <HAL_PCD_EP_DB_Transmit+0x37c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2250      	movs	r2, #80	; 0x50
 8004dc6:	5a9b      	ldrh	r3, [r3, r2]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	001a      	movs	r2, r3
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	00da      	lsls	r2, r3, #3
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004dde:	4694      	mov	ip, r2
 8004de0:	4463      	add	r3, ip
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6959      	ldr	r1, [r3, #20]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	891a      	ldrh	r2, [r3, #8]
 8004df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f005 f9c2 	bl	800a184 <USB_WritePMA>
 8004e00:	e1de      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	00000402 	.word	0x00000402
 8004e08:	ffff83ff 	.word	0xffff83ff
 8004e0c:	ffff8000 	.word	0xffff8000
 8004e10:	00000406 	.word	0x00000406
 8004e14:	ffff8f8f 	.word	0xffff8f8f
 8004e18:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2250      	movs	r2, #80	; 0x50
 8004e22:	5a9b      	ldrh	r3, [r3, r2]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	001a      	movs	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	18d2      	adds	r2, r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	4aca      	ldr	r2, [pc, #808]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e38:	4694      	mov	ip, r2
 8004e3a:	4463      	add	r3, ip
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	214e      	movs	r1, #78	; 0x4e
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	0592      	lsls	r2, r2, #22
 8004e44:	0d92      	lsrs	r2, r2, #22
 8004e46:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d307      	bcc.n	8004e64 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	1ad2      	subs	r2, r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	619a      	str	r2, [r3, #24]
 8004e62:	e002      	b.n	8004e6a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d000      	beq.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x404>
 8004e72:	e0c0      	b.n	8004ff6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d125      	bne.n	8004ec8 <HAL_PCD_EP_DB_Transmit+0x458>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2250      	movs	r2, #80	; 0x50
 8004e88:	5a9b      	ldrh	r3, [r3, r2]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	00da      	lsls	r2, r3, #3
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	18d3      	adds	r3, r2, r3
 8004e9e:	4ab1      	ldr	r2, [pc, #708]	; (8005164 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004ea0:	4694      	mov	ip, r2
 8004ea2:	4463      	add	r3, ip
 8004ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4aae      	ldr	r2, [pc, #696]	; (8005168 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4aab      	ldr	r2, [pc, #684]	; (800516c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e01b      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x490>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d117      	bne.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x490>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2250      	movs	r2, #80	; 0x50
 8004edc:	5a9b      	ldrh	r3, [r3, r2]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	677b      	str	r3, [r7, #116]	; 0x74
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	00da      	lsls	r2, r3, #3
 8004eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef0:	18d3      	adds	r3, r2, r3
 8004ef2:	4a9c      	ldr	r2, [pc, #624]	; (8005164 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	4463      	add	r3, ip
 8004ef8:	673b      	str	r3, [r7, #112]	; 0x70
 8004efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004efc:	2200      	movs	r2, #0
 8004efe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d130      	bne.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x500>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	187a      	adds	r2, r7, r1
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2250      	movs	r2, #80	; 0x50
 8004f1e:	5a9b      	ldrh	r3, [r3, r2]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	001a      	movs	r2, r3
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	187a      	adds	r2, r7, r1
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	00da      	lsls	r2, r3, #3
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	4a89      	ldr	r2, [pc, #548]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004f3c:	4694      	mov	ip, r2
 8004f3e:	4463      	add	r3, ip
 8004f40:	2184      	movs	r1, #132	; 0x84
 8004f42:	187a      	adds	r2, r7, r1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4a86      	ldr	r2, [pc, #536]	; (8005168 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4a82      	ldr	r2, [pc, #520]	; (800516c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e018      	b.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x532>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d114      	bne.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x532>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2250      	movs	r2, #80	; 0x50
 8004f7e:	5a9b      	ldrh	r3, [r3, r2]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	001a      	movs	r2, r3
 8004f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	00da      	lsls	r2, r3, #3
 8004f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	4a72      	ldr	r2, [pc, #456]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004f96:	4694      	mov	ip, r2
 8004f98:	4463      	add	r3, ip
 8004f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	0011      	movs	r1, r2
 8004faa:	0018      	movs	r0, r3
 8004fac:	f007 f932 	bl	800c214 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fb0:	1dbb      	adds	r3, r7, #6
 8004fb2:	881a      	ldrh	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d000      	beq.n	8004fbe <HAL_PCD_EP_DB_Transmit+0x54e>
 8004fbc:	e100      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	001a      	movs	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	18d3      	adds	r3, r2, r3
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	2046      	movs	r0, #70	; 0x46
 8004fd2:	183b      	adds	r3, r7, r0
 8004fd4:	4966      	ldr	r1, [pc, #408]	; (8005170 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004fd6:	400a      	ands	r2, r1
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	001a      	movs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	18d3      	adds	r3, r2, r3
 8004fe8:	183a      	adds	r2, r7, r0
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	4961      	ldr	r1, [pc, #388]	; (8005174 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e0e4      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ff6:	1dbb      	adds	r3, r7, #6
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	01db      	lsls	r3, r3, #7
 8004ffe:	4013      	ands	r3, r2
 8005000:	d11a      	bne.n	8005038 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	001a      	movs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29a      	uxth	r2, r3
 8005014:	204c      	movs	r0, #76	; 0x4c
 8005016:	183b      	adds	r3, r7, r0
 8005018:	4955      	ldr	r1, [pc, #340]	; (8005170 <HAL_PCD_EP_DB_Transmit+0x700>)
 800501a:	400a      	ands	r2, r1
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	001a      	movs	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	18d3      	adds	r3, r2, r3
 800502c:	183a      	adds	r2, r7, r0
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	4950      	ldr	r1, [pc, #320]	; (8005174 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005032:	430a      	orrs	r2, r1
 8005034:	b292      	uxth	r2, r2
 8005036:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2224      	movs	r2, #36	; 0x24
 800503c:	5c9b      	ldrb	r3, [r3, r2]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d000      	beq.n	8005044 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005042:	e0bd      	b.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	214e      	movs	r1, #78	; 0x4e
 800504a:	187b      	adds	r3, r7, r1
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	18d2      	adds	r2, r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	187b      	adds	r3, r7, r1
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	18d2      	adds	r2, r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	d309      	bcc.n	8005082 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	621a      	str	r2, [r3, #32]
 8005080:	e016      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d108      	bne.n	800509c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800508a:	234e      	movs	r3, #78	; 0x4e
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2224      	movs	r2, #36	; 0x24
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	e009      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	2100      	movs	r1, #0
 80050ae:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	667b      	str	r3, [r7, #100]	; 0x64
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d15c      	bne.n	8005178 <HAL_PCD_EP_DB_Transmit+0x708>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2250      	movs	r2, #80	; 0x50
 80050ca:	5a9b      	ldrh	r3, [r3, r2]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	001a      	movs	r2, r3
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	00da      	lsls	r2, r3, #3
 80050dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80050e2:	4694      	mov	ip, r2
 80050e4:	4463      	add	r3, ip
 80050e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80050e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d110      	bne.n	8005110 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80050ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	b29a      	uxth	r2, r3
 800510a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e04d      	b.n	80051ac <HAL_PCD_EP_DB_Transmit+0x73c>
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d810      	bhi.n	8005138 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	657b      	str	r3, [r7, #84]	; 0x54
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	2201      	movs	r2, #1
 8005120:	4013      	ands	r3, r2
 8005122:	d002      	beq.n	800512a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005126:	3301      	adds	r3, #1
 8005128:	657b      	str	r3, [r7, #84]	; 0x54
 800512a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800512c:	b29b      	uxth	r3, r3
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	b29a      	uxth	r2, r3
 8005132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e039      	b.n	80051ac <HAL_PCD_EP_DB_Transmit+0x73c>
 8005138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	657b      	str	r3, [r7, #84]	; 0x54
 800513e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005140:	221f      	movs	r2, #31
 8005142:	4013      	ands	r3, r2
 8005144:	d102      	bne.n	800514c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	3b01      	subs	r3, #1
 800514a:	657b      	str	r3, [r7, #84]	; 0x54
 800514c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	b29a      	uxth	r2, r3
 800515a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e025      	b.n	80051ac <HAL_PCD_EP_DB_Transmit+0x73c>
 8005160:	00000406 	.word	0x00000406
 8005164:	00000402 	.word	0x00000402
 8005168:	ffff83ff 	.word	0xffff83ff
 800516c:	ffff8000 	.word	0xffff8000
 8005170:	ffff8f8f 	.word	0xffff8f8f
 8005174:	ffffc080 	.word	0xffffc080
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d115      	bne.n	80051ac <HAL_PCD_EP_DB_Transmit+0x73c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2250      	movs	r2, #80	; 0x50
 8005186:	5a9b      	ldrh	r3, [r3, r2]
 8005188:	b29b      	uxth	r3, r3
 800518a:	001a      	movs	r2, r3
 800518c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518e:	189b      	adds	r3, r3, r2
 8005190:	667b      	str	r3, [r7, #100]	; 0x64
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	00da      	lsls	r2, r3, #3
 8005198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800519e:	4694      	mov	ip, r2
 80051a0:	4463      	add	r3, ip
 80051a2:	663b      	str	r3, [r7, #96]	; 0x60
 80051a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6959      	ldr	r1, [r3, #20]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	895a      	ldrh	r2, [r3, #10]
 80051b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f004 ffe2 	bl	800a184 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	001a      	movs	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	2010      	movs	r0, #16
 80051d4:	183b      	adds	r3, r7, r0
 80051d6:	4911      	ldr	r1, [pc, #68]	; (800521c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80051d8:	400a      	ands	r2, r1
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	183b      	adds	r3, r7, r0
 80051de:	183a      	adds	r2, r7, r0
 80051e0:	8812      	ldrh	r2, [r2, #0]
 80051e2:	2110      	movs	r1, #16
 80051e4:	404a      	eors	r2, r1
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	183b      	adds	r3, r7, r0
 80051ea:	183a      	adds	r2, r7, r0
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	2120      	movs	r1, #32
 80051f0:	404a      	eors	r2, r1
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	001a      	movs	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	18d3      	adds	r3, r2, r3
 8005202:	183a      	adds	r2, r7, r0
 8005204:	8812      	ldrh	r2, [r2, #0]
 8005206:	4906      	ldr	r1, [pc, #24]	; (8005220 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8005208:	430a      	orrs	r2, r1
 800520a:	b292      	uxth	r2, r2
 800520c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b022      	add	sp, #136	; 0x88
 8005216:	bd80      	pop	{r7, pc}
 8005218:	00000406 	.word	0x00000406
 800521c:	ffff8fbf 	.word	0xffff8fbf
 8005220:	ffff8080 	.word	0xffff8080

08005224 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	0008      	movs	r0, r1
 800522e:	0011      	movs	r1, r2
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	240a      	movs	r4, #10
 8005234:	193b      	adds	r3, r7, r4
 8005236:	1c02      	adds	r2, r0, #0
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	2308      	movs	r3, #8
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1c0a      	adds	r2, r1, #0
 8005240:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005242:	0021      	movs	r1, r4
 8005244:	187b      	adds	r3, r7, r1
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	4013      	ands	r3, r2
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	187b      	adds	r3, r7, r1
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	2207      	movs	r2, #7
 8005258:	4013      	ands	r3, r2
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	0013      	movs	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	189b      	adds	r3, r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e00b      	b.n	8005284 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800526c:	230a      	movs	r3, #10
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	881a      	ldrh	r2, [r3, #0]
 8005272:	0013      	movs	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	189b      	adds	r3, r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	3369      	adds	r3, #105	; 0x69
 800527c:	33ff      	adds	r3, #255	; 0xff
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	18d3      	adds	r3, r2, r3
 8005282:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005284:	2308      	movs	r3, #8
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	b29a      	uxth	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	80da      	strh	r2, [r3, #6]
 800529c:	e00b      	b.n	80052b6 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2201      	movs	r2, #1
 80052a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b007      	add	sp, #28
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	23ba      	movs	r3, #186	; 0xba
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	2101      	movs	r1, #1
 80052d6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	23b8      	movs	r3, #184	; 0xb8
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	2100      	movs	r1, #0
 80052e0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2254      	movs	r2, #84	; 0x54
 80052e6:	5a9b      	ldrh	r3, [r3, r2]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2201      	movs	r2, #1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b299      	uxth	r1, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2254      	movs	r2, #84	; 0x54
 80052f4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2254      	movs	r2, #84	; 0x54
 80052fa:	5a9b      	ldrh	r3, [r3, r2]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2202      	movs	r2, #2
 8005300:	4313      	orrs	r3, r2
 8005302:	b299      	uxth	r1, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2254      	movs	r2, #84	; 0x54
 8005308:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	000a      	movs	r2, r1
 800531e:	1cfb      	adds	r3, r7, #3
 8005320:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b002      	add	sp, #8
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f000 fb76 	bl	8005a2c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	4013      	ands	r3, r2
 8005348:	d100      	bne.n	800534c <HAL_RCC_OscConfig+0x20>
 800534a:	e08e      	b.n	800546a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800534c:	4bc5      	ldr	r3, [pc, #788]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	220c      	movs	r2, #12
 8005352:	4013      	ands	r3, r2
 8005354:	2b04      	cmp	r3, #4
 8005356:	d00e      	beq.n	8005376 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005358:	4bc2      	ldr	r3, [pc, #776]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	220c      	movs	r2, #12
 800535e:	4013      	ands	r3, r2
 8005360:	2b08      	cmp	r3, #8
 8005362:	d117      	bne.n	8005394 <HAL_RCC_OscConfig+0x68>
 8005364:	4bbf      	ldr	r3, [pc, #764]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	23c0      	movs	r3, #192	; 0xc0
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	401a      	ands	r2, r3
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	429a      	cmp	r2, r3
 8005374:	d10e      	bne.n	8005394 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005376:	4bbb      	ldr	r3, [pc, #748]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	4013      	ands	r3, r2
 8005380:	d100      	bne.n	8005384 <HAL_RCC_OscConfig+0x58>
 8005382:	e071      	b.n	8005468 <HAL_RCC_OscConfig+0x13c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d000      	beq.n	800538e <HAL_RCC_OscConfig+0x62>
 800538c:	e06c      	b.n	8005468 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f000 fb4c 	bl	8005a2c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <HAL_RCC_OscConfig+0x80>
 800539c:	4bb1      	ldr	r3, [pc, #708]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4bb0      	ldr	r3, [pc, #704]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	0249      	lsls	r1, r1, #9
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e02f      	b.n	800540c <HAL_RCC_OscConfig+0xe0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0xa2>
 80053b4:	4bab      	ldr	r3, [pc, #684]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4baa      	ldr	r3, [pc, #680]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053ba:	49ab      	ldr	r1, [pc, #684]	; (8005668 <HAL_RCC_OscConfig+0x33c>)
 80053bc:	400a      	ands	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	4ba8      	ldr	r3, [pc, #672]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4ba7      	ldr	r3, [pc, #668]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053c6:	49a9      	ldr	r1, [pc, #676]	; (800566c <HAL_RCC_OscConfig+0x340>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e01e      	b.n	800540c <HAL_RCC_OscConfig+0xe0>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d10e      	bne.n	80053f4 <HAL_RCC_OscConfig+0xc8>
 80053d6:	4ba3      	ldr	r3, [pc, #652]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4ba2      	ldr	r3, [pc, #648]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	02c9      	lsls	r1, r1, #11
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b9e      	ldr	r3, [pc, #632]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	0249      	lsls	r1, r1, #9
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0xe0>
 80053f4:	4b9b      	ldr	r3, [pc, #620]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80053fa:	499b      	ldr	r1, [pc, #620]	; (8005668 <HAL_RCC_OscConfig+0x33c>)
 80053fc:	400a      	ands	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	4b98      	ldr	r3, [pc, #608]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4b97      	ldr	r3, [pc, #604]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005406:	4999      	ldr	r1, [pc, #612]	; (800566c <HAL_RCC_OscConfig+0x340>)
 8005408:	400a      	ands	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d014      	beq.n	800543e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd f824 	bl	8002460 <HAL_GetTick>
 8005418:	0003      	movs	r3, r0
 800541a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541e:	f7fd f81f 	bl	8002460 <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b64      	cmp	r3, #100	; 0x64
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e2fd      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005430:	4b8c      	ldr	r3, [pc, #560]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	4013      	ands	r3, r2
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0xf2>
 800543c:	e015      	b.n	800546a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd f80f 	bl	8002460 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd f80a 	bl	8002460 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e2e8      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b82      	ldr	r3, [pc, #520]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	029b      	lsls	r3, r3, #10
 8005462:	4013      	ands	r3, r2
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x11c>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2202      	movs	r2, #2
 8005470:	4013      	ands	r3, r2
 8005472:	d100      	bne.n	8005476 <HAL_RCC_OscConfig+0x14a>
 8005474:	e06c      	b.n	8005550 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005476:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	220c      	movs	r2, #12
 800547c:	4013      	ands	r3, r2
 800547e:	d00e      	beq.n	800549e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005480:	4b78      	ldr	r3, [pc, #480]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	220c      	movs	r2, #12
 8005486:	4013      	ands	r3, r2
 8005488:	2b08      	cmp	r3, #8
 800548a:	d11f      	bne.n	80054cc <HAL_RCC_OscConfig+0x1a0>
 800548c:	4b75      	ldr	r3, [pc, #468]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	23c0      	movs	r3, #192	; 0xc0
 8005492:	025b      	lsls	r3, r3, #9
 8005494:	401a      	ands	r2, r3
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	429a      	cmp	r2, r3
 800549c:	d116      	bne.n	80054cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	4b71      	ldr	r3, [pc, #452]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2202      	movs	r2, #2
 80054a4:	4013      	ands	r3, r2
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_OscConfig+0x188>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e2bb      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	4b6b      	ldr	r3, [pc, #428]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	22f8      	movs	r2, #248	; 0xf8
 80054ba:	4393      	bics	r3, r2
 80054bc:	0019      	movs	r1, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00da      	lsls	r2, r3, #3
 80054c4:	4b67      	ldr	r3, [pc, #412]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	e041      	b.n	8005550 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d024      	beq.n	800551e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d4:	4b63      	ldr	r3, [pc, #396]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b62      	ldr	r3, [pc, #392]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054da:	2101      	movs	r1, #1
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fc ffbe 	bl	8002460 <HAL_GetTick>
 80054e4:	0003      	movs	r3, r0
 80054e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ea:	f7fc ffb9 	bl	8002460 <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e297      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	4b59      	ldr	r3, [pc, #356]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2202      	movs	r2, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d0f1      	beq.n	80054ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b57      	ldr	r3, [pc, #348]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	22f8      	movs	r2, #248	; 0xf8
 800550c:	4393      	bics	r3, r2
 800550e:	0019      	movs	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	00da      	lsls	r2, r3, #3
 8005516:	4b53      	ldr	r3, [pc, #332]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e018      	b.n	8005550 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551e:	4b51      	ldr	r3, [pc, #324]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b50      	ldr	r3, [pc, #320]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005524:	2101      	movs	r1, #1
 8005526:	438a      	bics	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552a:	f7fc ff99 	bl	8002460 <HAL_GetTick>
 800552e:	0003      	movs	r3, r0
 8005530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005534:	f7fc ff94 	bl	8002460 <HAL_GetTick>
 8005538:	0002      	movs	r2, r0
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e272      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2202      	movs	r2, #2
 800554c:	4013      	ands	r3, r2
 800554e:	d1f1      	bne.n	8005534 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2208      	movs	r2, #8
 8005556:	4013      	ands	r3, r2
 8005558:	d036      	beq.n	80055c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d019      	beq.n	8005596 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b40      	ldr	r3, [pc, #256]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005566:	4b3f      	ldr	r3, [pc, #252]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005568:	2101      	movs	r1, #1
 800556a:	430a      	orrs	r2, r1
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556e:	f7fc ff77 	bl	8002460 <HAL_GetTick>
 8005572:	0003      	movs	r3, r0
 8005574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005578:	f7fc ff72 	bl	8002460 <HAL_GetTick>
 800557c:	0002      	movs	r2, r0
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e250      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	4b36      	ldr	r3, [pc, #216]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2202      	movs	r2, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d0f1      	beq.n	8005578 <HAL_RCC_OscConfig+0x24c>
 8005594:	e018      	b.n	80055c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005596:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800559c:	2101      	movs	r1, #1
 800559e:	438a      	bics	r2, r1
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a2:	f7fc ff5d 	bl	8002460 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fc ff58 	bl	8002460 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e236      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055be:	4b29      	ldr	r3, [pc, #164]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2202      	movs	r2, #2
 80055c4:	4013      	ands	r3, r2
 80055c6:	d1f1      	bne.n	80055ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2204      	movs	r2, #4
 80055ce:	4013      	ands	r3, r2
 80055d0:	d100      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2a8>
 80055d2:	e0b5      	b.n	8005740 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d4:	201f      	movs	r0, #31
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055dc:	4b21      	ldr	r3, [pc, #132]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	055b      	lsls	r3, r3, #21
 80055e4:	4013      	ands	r3, r2
 80055e6:	d110      	bne.n	800560a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	0549      	lsls	r1, r1, #21
 80055f2:	430a      	orrs	r2, r1
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	055b      	lsls	r3, r3, #21
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005604:	183b      	adds	r3, r7, r0
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	4b19      	ldr	r3, [pc, #100]	; (8005670 <HAL_RCC_OscConfig+0x344>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4013      	ands	r3, r2
 8005614:	d11a      	bne.n	800564c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <HAL_RCC_OscConfig+0x344>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_RCC_OscConfig+0x344>)
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	0049      	lsls	r1, r1, #1
 8005620:	430a      	orrs	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005624:	f7fc ff1c 	bl	8002460 <HAL_GetTick>
 8005628:	0003      	movs	r3, r0
 800562a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562e:	f7fc ff17 	bl	8002460 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b64      	cmp	r3, #100	; 0x64
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1f5      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_OscConfig+0x344>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4013      	ands	r3, r2
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10f      	bne.n	8005674 <HAL_RCC_OscConfig+0x348>
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 8005656:	6a1a      	ldr	r2, [r3, #32]
 8005658:	4b02      	ldr	r3, [pc, #8]	; (8005664 <HAL_RCC_OscConfig+0x338>)
 800565a:	2101      	movs	r1, #1
 800565c:	430a      	orrs	r2, r1
 800565e:	621a      	str	r2, [r3, #32]
 8005660:	e036      	b.n	80056d0 <HAL_RCC_OscConfig+0x3a4>
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	40021000 	.word	0x40021000
 8005668:	fffeffff 	.word	0xfffeffff
 800566c:	fffbffff 	.word	0xfffbffff
 8005670:	40007000 	.word	0x40007000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10c      	bne.n	8005696 <HAL_RCC_OscConfig+0x36a>
 800567c:	4bca      	ldr	r3, [pc, #808]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	4bc9      	ldr	r3, [pc, #804]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005682:	2101      	movs	r1, #1
 8005684:	438a      	bics	r2, r1
 8005686:	621a      	str	r2, [r3, #32]
 8005688:	4bc7      	ldr	r3, [pc, #796]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	4bc6      	ldr	r3, [pc, #792]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800568e:	2104      	movs	r1, #4
 8005690:	438a      	bics	r2, r1
 8005692:	621a      	str	r2, [r3, #32]
 8005694:	e01c      	b.n	80056d0 <HAL_RCC_OscConfig+0x3a4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x38c>
 800569e:	4bc2      	ldr	r3, [pc, #776]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	4bc1      	ldr	r3, [pc, #772]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056a4:	2104      	movs	r1, #4
 80056a6:	430a      	orrs	r2, r1
 80056a8:	621a      	str	r2, [r3, #32]
 80056aa:	4bbf      	ldr	r3, [pc, #764]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	4bbe      	ldr	r3, [pc, #760]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056b0:	2101      	movs	r1, #1
 80056b2:	430a      	orrs	r2, r1
 80056b4:	621a      	str	r2, [r3, #32]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0x3a4>
 80056b8:	4bbb      	ldr	r3, [pc, #748]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	4bba      	ldr	r3, [pc, #744]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056be:	2101      	movs	r1, #1
 80056c0:	438a      	bics	r2, r1
 80056c2:	621a      	str	r2, [r3, #32]
 80056c4:	4bb8      	ldr	r3, [pc, #736]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	4bb7      	ldr	r3, [pc, #732]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056ca:	2104      	movs	r1, #4
 80056cc:	438a      	bics	r2, r1
 80056ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d014      	beq.n	8005702 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fc fec2 	bl	8002460 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e009      	b.n	80056f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc febd 	bl	8002460 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4aaf      	ldr	r2, [pc, #700]	; (80059ac <HAL_RCC_OscConfig+0x680>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e19a      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	4bac      	ldr	r3, [pc, #688]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	2202      	movs	r2, #2
 80056fc:	4013      	ands	r3, r2
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x3b6>
 8005700:	e013      	b.n	800572a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fc fead 	bl	8002460 <HAL_GetTick>
 8005706:	0003      	movs	r3, r0
 8005708:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570a:	e009      	b.n	8005720 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570c:	f7fc fea8 	bl	8002460 <HAL_GetTick>
 8005710:	0002      	movs	r2, r0
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	4aa5      	ldr	r2, [pc, #660]	; (80059ac <HAL_RCC_OscConfig+0x680>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e185      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005720:	4ba1      	ldr	r3, [pc, #644]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	2202      	movs	r2, #2
 8005726:	4013      	ands	r3, r2
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800572a:	231f      	movs	r3, #31
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005734:	4b9c      	ldr	r3, [pc, #624]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	4b9b      	ldr	r3, [pc, #620]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800573a:	499d      	ldr	r1, [pc, #628]	; (80059b0 <HAL_RCC_OscConfig+0x684>)
 800573c:	400a      	ands	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2210      	movs	r2, #16
 8005746:	4013      	ands	r3, r2
 8005748:	d063      	beq.n	8005812 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d12a      	bne.n	80057a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005752:	4b95      	ldr	r3, [pc, #596]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005756:	4b94      	ldr	r3, [pc, #592]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005758:	2104      	movs	r1, #4
 800575a:	430a      	orrs	r2, r1
 800575c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800575e:	4b92      	ldr	r3, [pc, #584]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005762:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005764:	2101      	movs	r1, #1
 8005766:	430a      	orrs	r2, r1
 8005768:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576a:	f7fc fe79 	bl	8002460 <HAL_GetTick>
 800576e:	0003      	movs	r3, r0
 8005770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005774:	f7fc fe74 	bl	8002460 <HAL_GetTick>
 8005778:	0002      	movs	r2, r0
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e152      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005786:	4b88      	ldr	r3, [pc, #544]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	2202      	movs	r2, #2
 800578c:	4013      	ands	r3, r2
 800578e:	d0f1      	beq.n	8005774 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005790:	4b85      	ldr	r3, [pc, #532]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	22f8      	movs	r2, #248	; 0xf8
 8005796:	4393      	bics	r3, r2
 8005798:	0019      	movs	r1, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	00da      	lsls	r2, r3, #3
 80057a0:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057a2:	430a      	orrs	r2, r1
 80057a4:	635a      	str	r2, [r3, #52]	; 0x34
 80057a6:	e034      	b.n	8005812 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	3305      	adds	r3, #5
 80057ae:	d111      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80057b0:	4b7d      	ldr	r3, [pc, #500]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	4b7c      	ldr	r3, [pc, #496]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057b6:	2104      	movs	r1, #4
 80057b8:	438a      	bics	r2, r1
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80057bc:	4b7a      	ldr	r3, [pc, #488]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	22f8      	movs	r2, #248	; 0xf8
 80057c2:	4393      	bics	r3, r2
 80057c4:	0019      	movs	r1, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	00da      	lsls	r2, r3, #3
 80057cc:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057ce:	430a      	orrs	r2, r1
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34
 80057d2:	e01e      	b.n	8005812 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80057d4:	4b74      	ldr	r3, [pc, #464]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057da:	2104      	movs	r1, #4
 80057dc:	430a      	orrs	r2, r1
 80057de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80057e0:	4b71      	ldr	r3, [pc, #452]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	4b70      	ldr	r3, [pc, #448]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	438a      	bics	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ec:	f7fc fe38 	bl	8002460 <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80057f6:	f7fc fe33 	bl	8002460 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e111      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005808:	4b67      	ldr	r3, [pc, #412]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	2202      	movs	r2, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d1f1      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2220      	movs	r2, #32
 8005818:	4013      	ands	r3, r2
 800581a:	d05c      	beq.n	80058d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800581c:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	220c      	movs	r2, #12
 8005822:	4013      	ands	r3, r2
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d00e      	beq.n	8005846 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005828:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	220c      	movs	r2, #12
 800582e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005830:	2b08      	cmp	r3, #8
 8005832:	d114      	bne.n	800585e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005834:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	23c0      	movs	r3, #192	; 0xc0
 800583a:	025b      	lsls	r3, r3, #9
 800583c:	401a      	ands	r2, r3
 800583e:	23c0      	movs	r3, #192	; 0xc0
 8005840:	025b      	lsls	r3, r3, #9
 8005842:	429a      	cmp	r2, r3
 8005844:	d10b      	bne.n	800585e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005846:	4b58      	ldr	r3, [pc, #352]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	025b      	lsls	r3, r3, #9
 800584e:	4013      	ands	r3, r2
 8005850:	d040      	beq.n	80058d4 <HAL_RCC_OscConfig+0x5a8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d03c      	beq.n	80058d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0e6      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01b      	beq.n	800589e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005866:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586a:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0249      	lsls	r1, r1, #9
 8005870:	430a      	orrs	r2, r1
 8005872:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fc fdf4 	bl	8002460 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800587e:	f7fc fdef 	bl	8002460 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e0cd      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005890:	4b45      	ldr	r3, [pc, #276]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	025b      	lsls	r3, r3, #9
 8005898:	4013      	ands	r3, r2
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x552>
 800589c:	e01b      	b.n	80058d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058a4:	4943      	ldr	r1, [pc, #268]	; (80059b4 <HAL_RCC_OscConfig+0x688>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7fc fdd9 	bl	8002460 <HAL_GetTick>
 80058ae:	0003      	movs	r3, r0
 80058b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058b4:	f7fc fdd4 	bl	8002460 <HAL_GetTick>
 80058b8:	0002      	movs	r2, r0
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e0b2      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80058c6:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	4013      	ands	r3, r2
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x588>
 80058d2:	e000      	b.n	80058d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80058d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d100      	bne.n	80058e0 <HAL_RCC_OscConfig+0x5b4>
 80058de:	e0a4      	b.n	8005a2a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	220c      	movs	r2, #12
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d100      	bne.n	80058ee <HAL_RCC_OscConfig+0x5c2>
 80058ec:	e078      	b.n	80059e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d14c      	bne.n	8005990 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 80058fc:	492e      	ldr	r1, [pc, #184]	; (80059b8 <HAL_RCC_OscConfig+0x68c>)
 80058fe:	400a      	ands	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fc fdad 	bl	8002460 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590c:	f7fc fda8 	bl	8002460 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e086      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591e:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	049b      	lsls	r3, r3, #18
 8005926:	4013      	ands	r3, r2
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800592a:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	220f      	movs	r2, #15
 8005930:	4393      	bics	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800593a:	430a      	orrs	r2, r1
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_RCC_OscConfig+0x690>)
 8005944:	4013      	ands	r3, r2
 8005946:	0019      	movs	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	431a      	orrs	r2, r3
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	0449      	lsls	r1, r1, #17
 8005962:	430a      	orrs	r2, r1
 8005964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fc fd7b 	bl	8002460 <HAL_GetTick>
 800596a:	0003      	movs	r3, r0
 800596c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005970:	f7fc fd76 	bl	8002460 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e054      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	049b      	lsls	r3, r3, #18
 800598a:	4013      	ands	r3, r2
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0x644>
 800598e:	e04c      	b.n	8005a2a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <HAL_RCC_OscConfig+0x67c>)
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <HAL_RCC_OscConfig+0x68c>)
 8005998:	400a      	ands	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599c:	f7fc fd60 	bl	8002460 <HAL_GetTick>
 80059a0:	0003      	movs	r3, r0
 80059a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059a4:	e015      	b.n	80059d2 <HAL_RCC_OscConfig+0x6a6>
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	40021000 	.word	0x40021000
 80059ac:	00001388 	.word	0x00001388
 80059b0:	efffffff 	.word	0xefffffff
 80059b4:	fffeffff 	.word	0xfffeffff
 80059b8:	feffffff 	.word	0xfeffffff
 80059bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c0:	f7fc fd4e 	bl	8002460 <HAL_GetTick>
 80059c4:	0002      	movs	r2, r0
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e02c      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d2:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <HAL_RCC_OscConfig+0x708>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	049b      	lsls	r3, r3, #18
 80059da:	4013      	ands	r3, r2
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x694>
 80059de:	e024      	b.n	8005a2a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e01f      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCC_OscConfig+0x708>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <HAL_RCC_OscConfig+0x708>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	23c0      	movs	r3, #192	; 0xc0
 80059fc:	025b      	lsls	r3, r3, #9
 80059fe:	401a      	ands	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d10e      	bne.n	8005a26 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	23f0      	movs	r3, #240	; 0xf0
 8005a1a:	039b      	lsls	r3, r3, #14
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b008      	add	sp, #32
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000

08005a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0bf      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2201      	movs	r2, #1
 8005a52:	4013      	ands	r3, r2
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d911      	bls.n	8005a7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b5e      	ldr	r3, [pc, #376]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4393      	bics	r3, r2
 8005a62:	0019      	movs	r1, r3
 8005a64:	4b5b      	ldr	r3, [pc, #364]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6c:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2201      	movs	r2, #1
 8005a72:	4013      	ands	r3, r2
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0a6      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2202      	movs	r2, #2
 8005a84:	4013      	ands	r3, r2
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d006      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a92:	4b51      	ldr	r3, [pc, #324]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a98:	21e0      	movs	r1, #224	; 0xe0
 8005a9a:	00c9      	lsls	r1, r1, #3
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa0:	4b4d      	ldr	r3, [pc, #308]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	22f0      	movs	r2, #240	; 0xf0
 8005aa6:	4393      	bics	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	4b4a      	ldr	r3, [pc, #296]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	d04c      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac6:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	2380      	movs	r3, #128	; 0x80
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d120      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07a      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ade:	4b3e      	ldr	r3, [pc, #248]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	049b      	lsls	r3, r3, #18
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d114      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e06e      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afa:	2380      	movs	r3, #128	; 0x80
 8005afc:	025b      	lsls	r3, r3, #9
 8005afe:	4013      	ands	r3, r2
 8005b00:	d108      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e062      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e05b      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b14:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4393      	bics	r3, r2
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b28:	f7fc fc9a 	bl	8002460 <HAL_GetTick>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b30:	e009      	b.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b32:	f7fc fc95 	bl	8002460 <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <HAL_RCC_ClockConfig+0x1a4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e042      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	220c      	movs	r2, #12
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1ec      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d211      	bcs.n	8005b8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	0019      	movs	r1, r3
 8005b70:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_RCC_ClockConfig+0x19c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4013      	ands	r3, r2
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e020      	b.n	8005bcc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <HAL_RCC_ClockConfig+0x1a8>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ba8:	f000 f820 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005bac:	0001      	movs	r1, r0
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <HAL_RCC_ClockConfig+0x1ac>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	000a      	movs	r2, r1
 8005bbe:	40da      	lsrs	r2, r3
 8005bc0:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <HAL_RCC_ClockConfig+0x1b0>)
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f7fc fc05 	bl	80023d4 <HAL_InitTick>
  
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b004      	add	sp, #16
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40022000 	.word	0x40022000
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	00001388 	.word	0x00001388
 8005be0:	fffff8ff 	.word	0xfffff8ff
 8005be4:	0800d23c 	.word	0x0800d23c
 8005be8:	20000000 	.word	0x20000000

08005bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b08f      	sub	sp, #60	; 0x3c
 8005bf0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005bf2:	2314      	movs	r3, #20
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	4a38      	ldr	r2, [pc, #224]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8005bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005bfa:	c313      	stmia	r3!, {r0, r1, r4}
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	4a36      	ldr	r2, [pc, #216]	; (8005cdc <HAL_RCC_GetSysClockFreq+0xf0>)
 8005c04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005c06:	c313      	stmia	r3!, {r0, r1, r4}
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c10:	2300      	movs	r3, #0
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c14:	2300      	movs	r3, #0
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	2300      	movs	r3, #0
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005c20:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	220c      	movs	r2, #12
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d047      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xd4>
 8005c30:	d849      	bhi.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xda>
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x50>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d003      	beq.n	8005c42 <HAL_RCC_GetSysClockFreq+0x56>
 8005c3a:	e044      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c3c:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c40:	e044      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	0c9b      	lsrs	r3, r3, #18
 8005c46:	220f      	movs	r2, #15
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2214      	movs	r2, #20
 8005c4c:	18ba      	adds	r2, r7, r2
 8005c4e:	5cd3      	ldrb	r3, [r2, r3]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005c52:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	220f      	movs	r2, #15
 8005c58:	4013      	ands	r3, r2
 8005c5a:	1d3a      	adds	r2, r7, #4
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c62:	23c0      	movs	r3, #192	; 0xc0
 8005c64:	025b      	lsls	r3, r3, #9
 8005c66:	401a      	ands	r2, r3
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	025b      	lsls	r3, r3, #9
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c72:	481c      	ldr	r0, [pc, #112]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c74:	f7fa fa5a 	bl	800012c <__udivsi3>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	4353      	muls	r3, r2
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
 8005c82:	e01a      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c86:	23c0      	movs	r3, #192	; 0xc0
 8005c88:	025b      	lsls	r3, r3, #9
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	025b      	lsls	r3, r3, #9
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d109      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c96:	4814      	ldr	r0, [pc, #80]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c98:	f7fa fa48 	bl	800012c <__udivsi3>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	4353      	muls	r3, r2
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005caa:	4810      	ldr	r0, [pc, #64]	; (8005cec <HAL_RCC_GetSysClockFreq+0x100>)
 8005cac:	f7fa fa3e 	bl	800012c <__udivsi3>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	4353      	muls	r3, r2
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_GetSysClockFreq+0x100>)
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b00f      	add	sp, #60	; 0x3c
 8005cd4:	bd90      	pop	{r4, r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	0800d15c 	.word	0x0800d15c
 8005cdc:	0800d16c 	.word	0x0800d16c
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	00f42400 	.word	0x00f42400
 8005ce8:	02dc6c00 	.word	0x02dc6c00
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf4:	4b02      	ldr	r3, [pc, #8]	; (8005d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	20000000 	.word	0x20000000

08005d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005d08:	f7ff fff2 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d0c:	0001      	movs	r1, r0
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	2207      	movs	r2, #7
 8005d16:	4013      	ands	r3, r2
 8005d18:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d1a:	5cd3      	ldrb	r3, [r2, r3]
 8005d1c:	40d9      	lsrs	r1, r3
 8005d1e:	000b      	movs	r3, r1
}    
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	0800d24c 	.word	0x0800d24c

08005d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	025b      	lsls	r3, r3, #9
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005d4c:	e08e      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005d4e:	2017      	movs	r0, #23
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d56:	4b6e      	ldr	r3, [pc, #440]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	055b      	lsls	r3, r3, #21
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d110      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4b6b      	ldr	r3, [pc, #428]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	0549      	lsls	r1, r1, #21
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
 8005d70:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	055b      	lsls	r3, r3, #21
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7e:	183b      	adds	r3, r7, r0
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d84:	4b63      	ldr	r3, [pc, #396]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d11a      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d90:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	0049      	lsls	r1, r1, #1
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9e:	f7fc fb5f 	bl	8002460 <HAL_GetTick>
 8005da2:	0003      	movs	r3, r0
 8005da4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da6:	e008      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da8:	f7fc fb5a 	bl	8002460 <HAL_GetTick>
 8005dac:	0002      	movs	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e0a6      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dba:	4b56      	ldr	r3, [pc, #344]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc6:	4b52      	ldr	r3, [pc, #328]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d034      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	23c0      	movs	r3, #192	; 0xc0
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4013      	ands	r3, r2
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d02c      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de8:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	4a4a      	ldr	r2, [pc, #296]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df2:	4b47      	ldr	r3, [pc, #284]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0249      	lsls	r1, r1, #9
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e00:	4b43      	ldr	r3, [pc, #268]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	4b42      	ldr	r3, [pc, #264]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e06:	4945      	ldr	r1, [pc, #276]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005e08:	400a      	ands	r2, r1
 8005e0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e0c:	4b40      	ldr	r3, [pc, #256]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1a:	f7fc fb21 	bl	8002460 <HAL_GetTick>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e22:	e009      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fc fb1c 	bl	8002460 <HAL_GetTick>
 8005e28:	0002      	movs	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a3c      	ldr	r2, [pc, #240]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e067      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e38:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e42:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	4a34      	ldr	r2, [pc, #208]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	0019      	movs	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	4b2f      	ldr	r3, [pc, #188]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e52:	430a      	orrs	r2, r1
 8005e54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e56:	2317      	movs	r3, #23
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e60:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e66:	492f      	ldr	r1, [pc, #188]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005e68:	400a      	ands	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	4013      	ands	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e76:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	4393      	bics	r3, r2
 8005e7e:	0019      	movs	r1, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e86:	430a      	orrs	r2, r1
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	4013      	ands	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2220      	movs	r2, #32
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	4393      	bics	r3, r2
 8005eba:	0019      	movs	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	029b      	lsls	r3, r3, #10
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	4393      	bics	r3, r2
 8005eda:	0019      	movs	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	4393      	bics	r3, r2
 8005efa:	0019      	movs	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f02:	430a      	orrs	r2, r1
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b006      	add	sp, #24
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
 8005f18:	fffffcff 	.word	0xfffffcff
 8005f1c:	fffeffff 	.word	0xfffeffff
 8005f20:	00001388 	.word	0x00001388
 8005f24:	efffffff 	.word	0xefffffff
 8005f28:	fffcffff 	.word	0xfffcffff

08005f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e0a8      	b.n	8006090 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	2382      	movs	r3, #130	; 0x82
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d009      	beq.n	8005f66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	61da      	str	r2, [r3, #28]
 8005f58:	e005      	b.n	8005f66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	225d      	movs	r2, #93	; 0x5d
 8005f70:	5c9b      	ldrb	r3, [r3, r2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	225c      	movs	r2, #92	; 0x5c
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7fb fe16 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	225d      	movs	r2, #93	; 0x5d
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2140      	movs	r1, #64	; 0x40
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	23e0      	movs	r3, #224	; 0xe0
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d902      	bls.n	8005fb2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e002      	b.n	8005fb8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	015b      	lsls	r3, r3, #5
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	23f0      	movs	r3, #240	; 0xf0
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d008      	beq.n	8005fd6 <HAL_SPI_Init+0xaa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	23e0      	movs	r3, #224	; 0xe0
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	2382      	movs	r3, #130	; 0x82
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	401a      	ands	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	2384      	movs	r3, #132	; 0x84
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	400b      	ands	r3, r1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	400b      	ands	r3, r1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6999      	ldr	r1, [r3, #24]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	400b      	ands	r3, r1
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2138      	movs	r1, #56	; 0x38
 8006012:	400b      	ands	r3, r1
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	400b      	ands	r3, r1
 800601e:	431a      	orrs	r2, r3
 8006020:	0011      	movs	r1, r2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	2204      	movs	r2, #4
 800603c:	401a      	ands	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2110      	movs	r1, #16
 8006044:	400b      	ands	r3, r1
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	2108      	movs	r1, #8
 800604e:	400b      	ands	r3, r1
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68d9      	ldr	r1, [r3, #12]
 8006056:	23f0      	movs	r3, #240	; 0xf0
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	400b      	ands	r3, r1
 800605c:	431a      	orrs	r2, r3
 800605e:	0011      	movs	r1, r2
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	015b      	lsls	r3, r3, #5
 8006066:	401a      	ands	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4907      	ldr	r1, [pc, #28]	; (8006098 <HAL_SPI_Init+0x16c>)
 800607c:	400a      	ands	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	225d      	movs	r2, #93	; 0x5d
 800608a:	2101      	movs	r1, #1
 800608c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b004      	add	sp, #16
 8006096:	bd80      	pop	{r7, pc}
 8006098:	fffff7ff 	.word	0xfffff7ff

0800609c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	1dbb      	adds	r3, r7, #6
 80060aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ac:	231f      	movs	r3, #31
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	225c      	movs	r2, #92	; 0x5c
 80060b8:	5c9b      	ldrb	r3, [r3, r2]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_SPI_Transmit+0x26>
 80060be:	2302      	movs	r3, #2
 80060c0:	e140      	b.n	8006344 <HAL_SPI_Transmit+0x2a8>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	225c      	movs	r2, #92	; 0x5c
 80060c6:	2101      	movs	r1, #1
 80060c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ca:	f7fc f9c9 	bl	8002460 <HAL_GetTick>
 80060ce:	0003      	movs	r3, r0
 80060d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060d2:	2316      	movs	r3, #22
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	1dba      	adds	r2, r7, #6
 80060d8:	8812      	ldrh	r2, [r2, #0]
 80060da:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	225d      	movs	r2, #93	; 0x5d
 80060e0:	5c9b      	ldrb	r3, [r3, r2]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d004      	beq.n	80060f2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80060e8:	231f      	movs	r3, #31
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2202      	movs	r2, #2
 80060ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80060f0:	e11d      	b.n	800632e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_SPI_Transmit+0x64>
 80060f8:	1dbb      	adds	r3, r7, #6
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006100:	231f      	movs	r3, #31
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
    goto error;
 8006108:	e111      	b.n	800632e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	225d      	movs	r2, #93	; 0x5d
 800610e:	2103      	movs	r1, #3
 8006110:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1dba      	adds	r2, r7, #6
 8006122:	8812      	ldrh	r2, [r2, #0]
 8006124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1dba      	adds	r2, r7, #6
 800612a:	8812      	ldrh	r2, [r2, #0]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2244      	movs	r2, #68	; 0x44
 8006138:	2100      	movs	r1, #0
 800613a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2246      	movs	r2, #70	; 0x46
 8006140:	2100      	movs	r1, #0
 8006142:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	429a      	cmp	r2, r3
 800615a:	d110      	bne.n	800617e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2140      	movs	r1, #64	; 0x40
 8006168:	438a      	bics	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2180      	movs	r1, #128	; 0x80
 8006178:	01c9      	lsls	r1, r1, #7
 800617a:	430a      	orrs	r2, r1
 800617c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2240      	movs	r2, #64	; 0x40
 8006186:	4013      	ands	r3, r2
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d007      	beq.n	800619c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2140      	movs	r1, #64	; 0x40
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	23e0      	movs	r3, #224	; 0xe0
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d94e      	bls.n	8006246 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <HAL_SPI_Transmit+0x11e>
 80061b0:	2316      	movs	r3, #22
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d13f      	bne.n	800623a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	881a      	ldrh	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	1c9a      	adds	r2, r3, #2
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061de:	e02c      	b.n	800623a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2202      	movs	r2, #2
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d112      	bne.n	8006214 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	1c9a      	adds	r2, r3, #2
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006212:	e012      	b.n	800623a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006214:	f7fc f924 	bl	8002460 <HAL_GetTick>
 8006218:	0002      	movs	r2, r0
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d802      	bhi.n	800622a <HAL_SPI_Transmit+0x18e>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	d102      	bne.n	8006230 <HAL_SPI_Transmit+0x194>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006230:	231f      	movs	r3, #31
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	2203      	movs	r2, #3
 8006236:	701a      	strb	r2, [r3, #0]
          goto error;
 8006238:	e079      	b.n	800632e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1cd      	bne.n	80061e0 <HAL_SPI_Transmit+0x144>
 8006244:	e04f      	b.n	80062e6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <HAL_SPI_Transmit+0x1bc>
 800624e:	2316      	movs	r3, #22
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d141      	bne.n	80062dc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800627e:	e02d      	b.n	80062dc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2202      	movs	r2, #2
 8006288:	4013      	ands	r3, r2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d113      	bne.n	80062b6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	7812      	ldrb	r2, [r2, #0]
 800629a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062b4:	e012      	b.n	80062dc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b6:	f7fc f8d3 	bl	8002460 <HAL_GetTick>
 80062ba:	0002      	movs	r2, r0
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d802      	bhi.n	80062cc <HAL_SPI_Transmit+0x230>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d102      	bne.n	80062d2 <HAL_SPI_Transmit+0x236>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80062d2:	231f      	movs	r3, #31
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	2203      	movs	r2, #3
 80062d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80062da:	e028      	b.n	800632e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1cc      	bne.n	8006280 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 fb2f 	bl	8006950 <SPI_EndRxTxTransaction>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006322:	231f      	movs	r3, #31
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e000      	b.n	800632e <HAL_SPI_Transmit+0x292>
  }

error:
 800632c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	225d      	movs	r2, #93	; 0x5d
 8006332:	2101      	movs	r1, #1
 8006334:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	225c      	movs	r2, #92	; 0x5c
 800633a:	2100      	movs	r1, #0
 800633c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800633e:	231f      	movs	r3, #31
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	781b      	ldrb	r3, [r3, #0]
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b008      	add	sp, #32
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	001a      	movs	r2, r3
 800635a:	1cbb      	adds	r3, r7, #2
 800635c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800635e:	2301      	movs	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006362:	2323      	movs	r3, #35	; 0x23
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	225c      	movs	r2, #92	; 0x5c
 800636e:	5c9b      	ldrb	r3, [r3, r2]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x2c>
 8006374:	2302      	movs	r3, #2
 8006376:	e1b5      	b.n	80066e4 <HAL_SPI_TransmitReceive+0x398>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	225c      	movs	r2, #92	; 0x5c
 800637c:	2101      	movs	r1, #1
 800637e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006380:	f7fc f86e 	bl	8002460 <HAL_GetTick>
 8006384:	0003      	movs	r3, r0
 8006386:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006388:	201b      	movs	r0, #27
 800638a:	183b      	adds	r3, r7, r0
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	215d      	movs	r1, #93	; 0x5d
 8006390:	5c52      	ldrb	r2, [r2, r1]
 8006392:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800639a:	2312      	movs	r3, #18
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	1cba      	adds	r2, r7, #2
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d011      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x84>
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	2382      	movs	r3, #130	; 0x82
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d107      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x7a>
 80063be:	183b      	adds	r3, r7, r0
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d004      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80063c6:	2323      	movs	r3, #35	; 0x23
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ce:	e17e      	b.n	80066ce <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d006      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x98>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0x98>
 80063dc:	1cbb      	adds	r3, r7, #2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80063e4:	2323      	movs	r3, #35	; 0x23
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	2201      	movs	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80063ec:	e16f      	b.n	80066ce <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	225d      	movs	r2, #93	; 0x5d
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d003      	beq.n	8006402 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	225d      	movs	r2, #93	; 0x5d
 80063fe:	2105      	movs	r1, #5
 8006400:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1cba      	adds	r2, r7, #2
 8006412:	2146      	movs	r1, #70	; 0x46
 8006414:	8812      	ldrh	r2, [r2, #0]
 8006416:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1cba      	adds	r2, r7, #2
 800641c:	2144      	movs	r1, #68	; 0x44
 800641e:	8812      	ldrh	r2, [r2, #0]
 8006420:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1cba      	adds	r2, r7, #2
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1cba      	adds	r2, r7, #2
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	23e0      	movs	r3, #224	; 0xe0
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d908      	bls.n	8006462 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	49a4      	ldr	r1, [pc, #656]	; (80066ec <HAL_SPI_TransmitReceive+0x3a0>)
 800645c:	400a      	ands	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	e008      	b.n	8006474 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	0149      	lsls	r1, r1, #5
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	4013      	ands	r3, r2
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d007      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	430a      	orrs	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	23e0      	movs	r3, #224	; 0xe0
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	429a      	cmp	r2, r3
 800649c:	d800      	bhi.n	80064a0 <HAL_SPI_TransmitReceive+0x154>
 800649e:	e07f      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x168>
 80064a8:	2312      	movs	r3, #18
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d000      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x168>
 80064b2:	e069      	b.n	8006588 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d8:	e056      	b.n	8006588 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2202      	movs	r2, #2
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d11b      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d016      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d113      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	881a      	ldrh	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	1c9a      	adds	r2, r3, #2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	4013      	ands	r3, r2
 800652a:	2b01      	cmp	r3, #1
 800652c:	d11c      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x21c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2246      	movs	r2, #70	; 0x46
 8006532:	5a9b      	ldrh	r3, [r3, r2]
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	b292      	uxth	r2, r2
 8006546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2246      	movs	r2, #70	; 0x46
 8006556:	5a9b      	ldrh	r3, [r3, r2]
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b299      	uxth	r1, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2246      	movs	r2, #70	; 0x46
 8006562:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006564:	2301      	movs	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006568:	f7fb ff7a 	bl	8002460 <HAL_GetTick>
 800656c:	0002      	movs	r2, r0
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006574:	429a      	cmp	r2, r3
 8006576:	d807      	bhi.n	8006588 <HAL_SPI_TransmitReceive+0x23c>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	3301      	adds	r3, #1
 800657c:	d004      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800657e:	2323      	movs	r3, #35	; 0x23
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2203      	movs	r2, #3
 8006584:	701a      	strb	r2, [r3, #0]
        goto error;
 8006586:	e0a2      	b.n	80066ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1a3      	bne.n	80064da <HAL_SPI_TransmitReceive+0x18e>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2246      	movs	r2, #70	; 0x46
 8006596:	5a9b      	ldrh	r3, [r3, r2]
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d19d      	bne.n	80064da <HAL_SPI_TransmitReceive+0x18e>
 800659e:	e085      	b.n	80066ac <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x268>
 80065a8:	2312      	movs	r3, #18
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d000      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x268>
 80065b2:	e070      	b.n	8006696 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065da:	e05c      	b.n	8006696 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2202      	movs	r2, #2
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d11c      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2d8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d017      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x2d8>
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d114      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2201      	movs	r2, #1
 800662c:	4013      	ands	r3, r2
 800662e:	2b01      	cmp	r3, #1
 8006630:	d11e      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x324>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2246      	movs	r2, #70	; 0x46
 8006636:	5a9b      	ldrh	r3, [r3, r2]
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	001a      	movs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2246      	movs	r2, #70	; 0x46
 800665e:	5a9b      	ldrh	r3, [r3, r2]
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b299      	uxth	r1, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2246      	movs	r2, #70	; 0x46
 800666a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800666c:	2301      	movs	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006670:	f7fb fef6 	bl	8002460 <HAL_GetTick>
 8006674:	0002      	movs	r2, r0
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667c:	429a      	cmp	r2, r3
 800667e:	d802      	bhi.n	8006686 <HAL_SPI_TransmitReceive+0x33a>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3301      	adds	r3, #1
 8006684:	d102      	bne.n	800668c <HAL_SPI_TransmitReceive+0x340>
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d104      	bne.n	8006696 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800668c:	2323      	movs	r3, #35	; 0x23
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2203      	movs	r2, #3
 8006692:	701a      	strb	r2, [r3, #0]
        goto error;
 8006694:	e01b      	b.n	80066ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d19d      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x290>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2246      	movs	r2, #70	; 0x46
 80066a4:	5a9b      	ldrh	r3, [r3, r2]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d197      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 f94c 	bl	8006950 <SPI_EndRxTxTransaction>
 80066b8:	1e03      	subs	r3, r0, #0
 80066ba:	d007      	beq.n	80066cc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80066bc:	2323      	movs	r3, #35	; 0x23
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	2201      	movs	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60
 80066ca:	e000      	b.n	80066ce <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80066cc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	225d      	movs	r2, #93	; 0x5d
 80066d2:	2101      	movs	r1, #1
 80066d4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	225c      	movs	r2, #92	; 0x5c
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80066de:	2323      	movs	r3, #35	; 0x23
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	781b      	ldrb	r3, [r3, #0]
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b00a      	add	sp, #40	; 0x28
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	ffffefff 	.word	0xffffefff

080066f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	1dfb      	adds	r3, r7, #7
 80066fe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006700:	f7fb feae 	bl	8002460 <HAL_GetTick>
 8006704:	0002      	movs	r2, r0
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	18d3      	adds	r3, r2, r3
 800670e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006710:	f7fb fea6 	bl	8002460 <HAL_GetTick>
 8006714:	0003      	movs	r3, r0
 8006716:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006718:	4b3a      	ldr	r3, [pc, #232]	; (8006804 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	015b      	lsls	r3, r3, #5
 800671e:	0d1b      	lsrs	r3, r3, #20
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	4353      	muls	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006726:	e058      	b.n	80067da <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	3301      	adds	r3, #1
 800672c:	d055      	beq.n	80067da <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800672e:	f7fb fe97 	bl	8002460 <HAL_GetTick>
 8006732:	0002      	movs	r2, r0
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	429a      	cmp	r2, r3
 800673c:	d902      	bls.n	8006744 <SPI_WaitFlagStateUntilTimeout+0x54>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d142      	bne.n	80067ca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	21e0      	movs	r1, #224	; 0xe0
 8006750:	438a      	bics	r2, r1
 8006752:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	2382      	movs	r3, #130	; 0x82
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	429a      	cmp	r2, r3
 800675e:	d113      	bne.n	8006788 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	429a      	cmp	r2, r3
 800676a:	d005      	beq.n	8006778 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	429a      	cmp	r2, r3
 8006776:	d107      	bne.n	8006788 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2140      	movs	r1, #64	; 0x40
 8006784:	438a      	bics	r2, r1
 8006786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	019b      	lsls	r3, r3, #6
 8006790:	429a      	cmp	r2, r3
 8006792:	d110      	bne.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	491a      	ldr	r1, [pc, #104]	; (8006808 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80067a0:	400a      	ands	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2180      	movs	r1, #128	; 0x80
 80067b0:	0189      	lsls	r1, r1, #6
 80067b2:	430a      	orrs	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	225d      	movs	r2, #93	; 0x5d
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	225c      	movs	r2, #92	; 0x5c
 80067c2:	2100      	movs	r1, #0
 80067c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e017      	b.n	80067fa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	425a      	negs	r2, r3
 80067ea:	4153      	adcs	r3, r2
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	001a      	movs	r2, r3
 80067f0:	1dfb      	adds	r3, r7, #7
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d197      	bne.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b008      	add	sp, #32
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	20000000 	.word	0x20000000
 8006808:	ffffdfff 	.word	0xffffdfff

0800680c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800681a:	2317      	movs	r3, #23
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006822:	f7fb fe1d 	bl	8002460 <HAL_GetTick>
 8006826:	0002      	movs	r2, r0
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	18d3      	adds	r3, r2, r3
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006832:	f7fb fe15 	bl	8002460 <HAL_GetTick>
 8006836:	0003      	movs	r3, r0
 8006838:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	0013      	movs	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	189b      	adds	r3, r3, r2
 800684c:	00da      	lsls	r2, r3, #3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	0d1b      	lsrs	r3, r3, #20
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	4353      	muls	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006858:	e068      	b.n	800692c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	23c0      	movs	r3, #192	; 0xc0
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	429a      	cmp	r2, r3
 8006862:	d10a      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	2117      	movs	r1, #23
 8006872:	187b      	adds	r3, r7, r1
 8006874:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006876:	187b      	adds	r3, r7, r1
 8006878:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	d055      	beq.n	800692c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006880:	f7fb fdee 	bl	8002460 <HAL_GetTick>
 8006884:	0002      	movs	r2, r0
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	429a      	cmp	r2, r3
 800688e:	d902      	bls.n	8006896 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d142      	bne.n	800691c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	21e0      	movs	r1, #224	; 0xe0
 80068a2:	438a      	bics	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	2382      	movs	r3, #130	; 0x82
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d113      	bne.n	80068da <SPI_WaitFifoStateUntilTimeout+0xce>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d005      	beq.n	80068ca <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d107      	bne.n	80068da <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2140      	movs	r1, #64	; 0x40
 80068d6:	438a      	bics	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	019b      	lsls	r3, r3, #6
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d110      	bne.n	8006908 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4916      	ldr	r1, [pc, #88]	; (800694c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80068f2:	400a      	ands	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	0189      	lsls	r1, r1, #6
 8006904:	430a      	orrs	r2, r1
 8006906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	225d      	movs	r2, #93	; 0x5d
 800690c:	2101      	movs	r1, #1
 800690e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	225c      	movs	r2, #92	; 0x5c
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e010      	b.n	800693e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	3b01      	subs	r3, #1
 800692a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4013      	ands	r3, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	429a      	cmp	r2, r3
 800693a:	d18e      	bne.n	800685a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	0018      	movs	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	b00a      	add	sp, #40	; 0x28
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	20000000 	.word	0x20000000
 800694c:	ffffdfff 	.word	0xffffdfff

08006950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	23c0      	movs	r3, #192	; 0xc0
 8006960:	0159      	lsls	r1, r3, #5
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	0013      	movs	r3, r2
 800696a:	2200      	movs	r2, #0
 800696c:	f7ff ff4e 	bl	800680c <SPI_WaitFifoStateUntilTimeout>
 8006970:	1e03      	subs	r3, r0, #0
 8006972:	d007      	beq.n	8006984 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	2220      	movs	r2, #32
 800697a:	431a      	orrs	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e027      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	0013      	movs	r3, r2
 800698e:	2200      	movs	r2, #0
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	f7ff fead 	bl	80066f0 <SPI_WaitFlagStateUntilTimeout>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d007      	beq.n	80069aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699e:	2220      	movs	r2, #32
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e014      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	23c0      	movs	r3, #192	; 0xc0
 80069ae:	00d9      	lsls	r1, r3, #3
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	0013      	movs	r3, r2
 80069b8:	2200      	movs	r2, #0
 80069ba:	f7ff ff27 	bl	800680c <SPI_WaitFifoStateUntilTimeout>
 80069be:	1e03      	subs	r3, r0, #0
 80069c0:	d007      	beq.n	80069d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	2220      	movs	r2, #32
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e000      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	0018      	movs	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b004      	add	sp, #16
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e042      	b.n	8006a74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	223d      	movs	r2, #61	; 0x3d
 80069f2:	5c9b      	ldrb	r3, [r3, r2]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	223c      	movs	r2, #60	; 0x3c
 80069fe:	2100      	movs	r1, #0
 8006a00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	0018      	movs	r0, r3
 8006a06:	f7fb f923 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	223d      	movs	r2, #61	; 0x3d
 8006a0e:	2102      	movs	r1, #2
 8006a10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	f000 fa65 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2246      	movs	r2, #70	; 0x46
 8006a26:	2101      	movs	r1, #1
 8006a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	223e      	movs	r2, #62	; 0x3e
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5499      	strb	r1, [r3, r2]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	223f      	movs	r2, #63	; 0x3f
 8006a36:	2101      	movs	r1, #1
 8006a38:	5499      	strb	r1, [r3, r2]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2240      	movs	r2, #64	; 0x40
 8006a3e:	2101      	movs	r1, #1
 8006a40:	5499      	strb	r1, [r3, r2]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2241      	movs	r2, #65	; 0x41
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2242      	movs	r2, #66	; 0x42
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2243      	movs	r2, #67	; 0x43
 8006a56:	2101      	movs	r1, #1
 8006a58:	5499      	strb	r1, [r3, r2]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2244      	movs	r2, #68	; 0x44
 8006a5e:	2101      	movs	r1, #1
 8006a60:	5499      	strb	r1, [r3, r2]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2245      	movs	r2, #69	; 0x45
 8006a66:	2101      	movs	r1, #1
 8006a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	223d      	movs	r2, #61	; 0x3d
 8006a6e:	2101      	movs	r1, #1
 8006a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	223d      	movs	r2, #61	; 0x3d
 8006a88:	5c9b      	ldrb	r3, [r3, r2]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d001      	beq.n	8006a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e03b      	b.n	8006b0c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	223d      	movs	r2, #61	; 0x3d
 8006a98:	2102      	movs	r1, #2
 8006a9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <HAL_TIM_Base_Start_IT+0x98>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00f      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	2380      	movs	r3, #128	; 0x80
 8006abc:	05db      	lsls	r3, r3, #23
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d009      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a12      	ldr	r2, [pc, #72]	; (8006b1c <HAL_TIM_Base_Start_IT+0xa0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d111      	bne.n	8006afa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2207      	movs	r2, #7
 8006ade:	4013      	ands	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b06      	cmp	r3, #6
 8006ae6:	d010      	beq.n	8006b0a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2101      	movs	r1, #1
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af8:	e007      	b.n	8006b0a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2101      	movs	r1, #1
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b004      	add	sp, #16
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40014000 	.word	0x40014000

08006b20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e042      	b.n	8006bb8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	223d      	movs	r2, #61	; 0x3d
 8006b36:	5c9b      	ldrb	r3, [r3, r2]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	223c      	movs	r2, #60	; 0x3c
 8006b42:	2100      	movs	r1, #0
 8006b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 f839 	bl	8006bc0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	223d      	movs	r2, #61	; 0x3d
 8006b52:	2102      	movs	r1, #2
 8006b54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	0019      	movs	r1, r3
 8006b60:	0010      	movs	r0, r2
 8006b62:	f000 f9c3 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2246      	movs	r2, #70	; 0x46
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	223e      	movs	r2, #62	; 0x3e
 8006b72:	2101      	movs	r1, #1
 8006b74:	5499      	strb	r1, [r3, r2]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	223f      	movs	r2, #63	; 0x3f
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	5499      	strb	r1, [r3, r2]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2240      	movs	r2, #64	; 0x40
 8006b82:	2101      	movs	r1, #1
 8006b84:	5499      	strb	r1, [r3, r2]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2241      	movs	r2, #65	; 0x41
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2242      	movs	r2, #66	; 0x42
 8006b92:	2101      	movs	r1, #1
 8006b94:	5499      	strb	r1, [r3, r2]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2243      	movs	r2, #67	; 0x43
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	5499      	strb	r1, [r3, r2]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2244      	movs	r2, #68	; 0x44
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	5499      	strb	r1, [r3, r2]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2245      	movs	r2, #69	; 0x45
 8006baa:	2101      	movs	r1, #1
 8006bac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	223d      	movs	r2, #61	; 0x3d
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2202      	movs	r2, #2
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d124      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2202      	movs	r2, #2
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d11d      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	4252      	negs	r2, r2
 8006bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 f952 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006c18:	e007      	b.n	8006c2a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f000 f945 	bl	8006eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 f951 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2204      	movs	r2, #4
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d125      	bne.n	8006c8a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2204      	movs	r2, #4
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d11e      	bne.n	8006c8a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2205      	movs	r2, #5
 8006c52:	4252      	negs	r2, r2
 8006c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	23c0      	movs	r3, #192	; 0xc0
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4013      	ands	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 f925 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006c72:	e007      	b.n	8006c84 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 f918 	bl	8006eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 f924 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d124      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d11d      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2209      	movs	r2, #9
 8006cac:	4252      	negs	r2, r2
 8006cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f8f9 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006cca:	e007      	b.n	8006cdc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 f8ec 	bl	8006eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 f8f8 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2210      	movs	r2, #16
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d125      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d11e      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2211      	movs	r2, #17
 8006d04:	4252      	negs	r2, r2
 8006d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	23c0      	movs	r3, #192	; 0xc0
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 f8cc 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006d24:	e007      	b.n	8006d36 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 f8bf 	bl	8006eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f8cb 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2201      	movs	r2, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d10f      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d108      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4252      	negs	r2, r2
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7f9 fd5f 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d10f      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d108      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2281      	movs	r2, #129	; 0x81
 8006d8c:	4252      	negs	r2, r2
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f000 fb2e 	bl	80073f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2240      	movs	r2, #64	; 0x40
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d10f      	bne.n	8006dc6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2240      	movs	r2, #64	; 0x40
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d108      	bne.n	8006dc6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2241      	movs	r2, #65	; 0x41
 8006dba:	4252      	negs	r2, r2
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f000 f88b 	bl	8006edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b20      	cmp	r3, #32
 8006dd2:	d10f      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d108      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2221      	movs	r2, #33	; 0x21
 8006de8:	4252      	negs	r2, r2
 8006dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f000 faf8 	bl	80073e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2317      	movs	r3, #23
 8006e0a:	18fb      	adds	r3, r7, r3
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	223c      	movs	r2, #60	; 0x3c
 8006e14:	5c9b      	ldrb	r3, [r3, r2]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_OC_ConfigChannel+0x22>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e042      	b.n	8006ea4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	223c      	movs	r2, #60	; 0x3c
 8006e22:	2101      	movs	r1, #1
 8006e24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d027      	beq.n	8006e7c <HAL_TIM_OC_ConfigChannel+0x80>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d82c      	bhi.n	8006e8c <HAL_TIM_OC_ConfigChannel+0x90>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d019      	beq.n	8006e6c <HAL_TIM_OC_ConfigChannel+0x70>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d826      	bhi.n	8006e8c <HAL_TIM_OC_ConfigChannel+0x90>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_TIM_OC_ConfigChannel+0x50>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d008      	beq.n	8006e5c <HAL_TIM_OC_ConfigChannel+0x60>
 8006e4a:	e01f      	b.n	8006e8c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f000 f8c9 	bl	8006fec <TIM_OC1_SetConfig>
      break;
 8006e5a:	e01c      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0011      	movs	r1, r2
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 f949 	bl	80070fc <TIM_OC2_SetConfig>
      break;
 8006e6a:	e014      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	0011      	movs	r1, r2
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 f9c5 	bl	8007204 <TIM_OC3_SetConfig>
      break;
 8006e7a:	e00c      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	0011      	movs	r1, r2
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 fa43 	bl	8007310 <TIM_OC4_SetConfig>
      break;
 8006e8a:	e004      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006e8c:	2317      	movs	r3, #23
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	2201      	movs	r2, #1
 8006e92:	701a      	strb	r2, [r3, #0]
      break;
 8006e94:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	223c      	movs	r2, #60	; 0x3c
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	5499      	strb	r1, [r3, r2]

  return status;
 8006e9e:	2317      	movs	r3, #23
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	781b      	ldrb	r3, [r3, #0]
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b006      	add	sp, #24
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd80      	pop	{r7, pc}

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d008      	beq.n	8006f16 <TIM_Base_SetConfig+0x2a>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	05db      	lsls	r3, r3, #23
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d003      	beq.n	8006f16 <TIM_Base_SetConfig+0x2a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d108      	bne.n	8006f28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2270      	movs	r2, #112	; 0x70
 8006f1a:	4393      	bics	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d018      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	05db      	lsls	r3, r3, #23
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d013      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <TIM_Base_SetConfig+0xec>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <TIM_Base_SetConfig+0xf4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_Base_SetConfig+0x76>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <TIM_Base_SetConfig+0xf8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d108      	bne.n	8006f74 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a20      	ldr	r2, [pc, #128]	; (8006fe8 <TIM_Base_SetConfig+0xfc>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	4393      	bics	r3, r2
 8006f7a:	001a      	movs	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00b      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d007      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <TIM_Base_SetConfig+0xf4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d003      	beq.n	8006fba <TIM_Base_SetConfig+0xce>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <TIM_Base_SetConfig+0xf8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d103      	bne.n	8006fc2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	615a      	str	r2, [r3, #20]
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b004      	add	sp, #16
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40002000 	.word	0x40002000
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800
 8006fe8:	fffffcff 	.word	0xfffffcff

08006fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4393      	bics	r3, r2
 8006ffe:	001a      	movs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2270      	movs	r2, #112	; 0x70
 800701a:	4393      	bics	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2203      	movs	r2, #3
 8007022:	4393      	bics	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2202      	movs	r2, #2
 8007034:	4393      	bics	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a27      	ldr	r2, [pc, #156]	; (80070e4 <TIM_OC1_SetConfig+0xf8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a26      	ldr	r2, [pc, #152]	; (80070e8 <TIM_OC1_SetConfig+0xfc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <TIM_OC1_SetConfig+0x100>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC1_SetConfig+0x76>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_OC1_SetConfig+0x104>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10c      	bne.n	800707c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2208      	movs	r2, #8
 8007066:	4393      	bics	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2204      	movs	r2, #4
 8007078:	4393      	bics	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_OC1_SetConfig+0xf8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <TIM_OC1_SetConfig+0xfc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <TIM_OC1_SetConfig+0x100>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC1_SetConfig+0xb0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <TIM_OC1_SetConfig+0x104>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d111      	bne.n	80070c0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <TIM_OC1_SetConfig+0x108>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4a14      	ldr	r2, [pc, #80]	; (80070f8 <TIM_OC1_SetConfig+0x10c>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b006      	add	sp, #24
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800
 80070f4:	fffffeff 	.word	0xfffffeff
 80070f8:	fffffdff 	.word	0xfffffdff

080070fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	2210      	movs	r2, #16
 800710c:	4393      	bics	r3, r2
 800710e:	001a      	movs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a2e      	ldr	r2, [pc, #184]	; (80071e4 <TIM_OC2_SetConfig+0xe8>)
 800712a:	4013      	ands	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a2d      	ldr	r2, [pc, #180]	; (80071e8 <TIM_OC2_SetConfig+0xec>)
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2220      	movs	r2, #32
 8007146:	4393      	bics	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a24      	ldr	r2, [pc, #144]	; (80071ec <TIM_OC2_SetConfig+0xf0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10d      	bne.n	800717a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	4393      	bics	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	4393      	bics	r3, r2
 8007178:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <TIM_OC2_SetConfig+0xf0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00b      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <TIM_OC2_SetConfig+0xf4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d007      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <TIM_OC2_SetConfig+0xf8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d003      	beq.n	800719a <TIM_OC2_SetConfig+0x9e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <TIM_OC2_SetConfig+0xfc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d113      	bne.n	80071c2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <TIM_OC2_SetConfig+0x100>)
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC2_SetConfig+0x104>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b006      	add	sp, #24
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	ffff8fff 	.word	0xffff8fff
 80071e8:	fffffcff 	.word	0xfffffcff
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800
 80071fc:	fffffbff 	.word	0xfffffbff
 8007200:	fffff7ff 	.word	0xfffff7ff

08007204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	4a35      	ldr	r2, [pc, #212]	; (80072e8 <TIM_OC3_SetConfig+0xe4>)
 8007214:	401a      	ands	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2270      	movs	r2, #112	; 0x70
 8007230:	4393      	bics	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2203      	movs	r2, #3
 8007238:	4393      	bics	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4a28      	ldr	r2, [pc, #160]	; (80072ec <TIM_OC3_SetConfig+0xe8>)
 800724a:	4013      	ands	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <TIM_OC3_SetConfig+0xec>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d10d      	bne.n	800727e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_OC3_SetConfig+0xf0>)
 8007266:	4013      	ands	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <TIM_OC3_SetConfig+0xf4>)
 800727a:	4013      	ands	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a1b      	ldr	r2, [pc, #108]	; (80072f0 <TIM_OC3_SetConfig+0xec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00b      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <TIM_OC3_SetConfig+0xf8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d007      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <TIM_OC3_SetConfig+0xfc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <TIM_OC3_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <TIM_OC3_SetConfig+0x100>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d113      	bne.n	80072c6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4a19      	ldr	r2, [pc, #100]	; (8007308 <TIM_OC3_SetConfig+0x104>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <TIM_OC3_SetConfig+0x108>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b006      	add	sp, #24
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	fffffeff 	.word	0xfffffeff
 80072ec:	fffffdff 	.word	0xfffffdff
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	fffff7ff 	.word	0xfffff7ff
 80072f8:	fffffbff 	.word	0xfffffbff
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800
 8007308:	ffffefff 	.word	0xffffefff
 800730c:	ffffdfff 	.word	0xffffdfff

08007310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_OC4_SetConfig+0xb0>)
 8007320:	401a      	ands	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <TIM_OC4_SetConfig+0xb4>)
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <TIM_OC4_SetConfig+0xb8>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <TIM_OC4_SetConfig+0xbc>)
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a19      	ldr	r2, [pc, #100]	; (80073d0 <TIM_OC4_SetConfig+0xc0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00b      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <TIM_OC4_SetConfig+0xc4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <TIM_OC4_SetConfig+0xc8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC4_SetConfig+0x78>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a16      	ldr	r2, [pc, #88]	; (80073dc <TIM_OC4_SetConfig+0xcc>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d109      	bne.n	800739c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <TIM_OC4_SetConfig+0xd0>)
 800738c:	4013      	ands	r3, r2
 800738e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	019b      	lsls	r3, r3, #6
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b006      	add	sp, #24
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	ffffefff 	.word	0xffffefff
 80073c4:	ffff8fff 	.word	0xffff8fff
 80073c8:	fffffcff 	.word	0xfffffcff
 80073cc:	ffffdfff 	.word	0xffffdfff
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800
 80073e0:	ffffbfff 	.word	0xffffbfff

080073e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073ec:	46c0      	nop			; (mov r8, r8)
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b002      	add	sp, #8
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073fc:	46c0      	nop			; (mov r8, r8)
 80073fe:	46bd      	mov	sp, r7
 8007400:	b002      	add	sp, #8
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e044      	b.n	80074a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2274      	movs	r2, #116	; 0x74
 8007422:	2100      	movs	r1, #0
 8007424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0018      	movs	r0, r3
 800742a:	f7fa fc39 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2224      	movs	r2, #36	; 0x24
 8007432:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2101      	movs	r1, #1
 8007440:	438a      	bics	r2, r1
 8007442:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 fb24 	bl	8007a94 <UART_SetConfig>
 800744c:	0003      	movs	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e024      	b.n	80074a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0018      	movs	r0, r3
 8007462:	f000 fc9f 	bl	8007da4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	490d      	ldr	r1, [pc, #52]	; (80074a8 <HAL_UART_Init+0xa4>)
 8007472:	400a      	ands	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	212a      	movs	r1, #42	; 0x2a
 8007482:	438a      	bics	r2, r1
 8007484:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2101      	movs	r1, #1
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	0018      	movs	r0, r3
 800749a:	f000 fd37 	bl	8007f0c <UART_CheckIdleState>
 800749e:	0003      	movs	r3, r0
}
 80074a0:	0018      	movs	r0, r3
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b002      	add	sp, #8
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	ffffb7ff 	.word	0xffffb7ff

080074ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b0ab      	sub	sp, #172	; 0xac
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	22a4      	movs	r2, #164	; 0xa4
 80074bc:	18b9      	adds	r1, r7, r2
 80074be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	20a0      	movs	r0, #160	; 0xa0
 80074c8:	1839      	adds	r1, r7, r0
 80074ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	219c      	movs	r1, #156	; 0x9c
 80074d4:	1879      	adds	r1, r7, r1
 80074d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074d8:	0011      	movs	r1, r2
 80074da:	18bb      	adds	r3, r7, r2
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a99      	ldr	r2, [pc, #612]	; (8007744 <HAL_UART_IRQHandler+0x298>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	2298      	movs	r2, #152	; 0x98
 80074e4:	18bc      	adds	r4, r7, r2
 80074e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80074e8:	18bb      	adds	r3, r7, r2
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d114      	bne.n	800751a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2220      	movs	r2, #32
 80074f6:	4013      	ands	r3, r2
 80074f8:	d00f      	beq.n	800751a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074fa:	183b      	adds	r3, r7, r0
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2220      	movs	r2, #32
 8007500:	4013      	ands	r3, r2
 8007502:	d00a      	beq.n	800751a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007508:	2b00      	cmp	r3, #0
 800750a:	d100      	bne.n	800750e <HAL_UART_IRQHandler+0x62>
 800750c:	e296      	b.n	8007a3c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	0010      	movs	r0, r2
 8007516:	4798      	blx	r3
      }
      return;
 8007518:	e290      	b.n	8007a3c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800751a:	2398      	movs	r3, #152	; 0x98
 800751c:	18fb      	adds	r3, r7, r3
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d100      	bne.n	8007526 <HAL_UART_IRQHandler+0x7a>
 8007524:	e114      	b.n	8007750 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007526:	239c      	movs	r3, #156	; 0x9c
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	4013      	ands	r3, r2
 8007530:	d106      	bne.n	8007540 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007532:	23a0      	movs	r3, #160	; 0xa0
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a83      	ldr	r2, [pc, #524]	; (8007748 <HAL_UART_IRQHandler+0x29c>)
 800753a:	4013      	ands	r3, r2
 800753c:	d100      	bne.n	8007540 <HAL_UART_IRQHandler+0x94>
 800753e:	e107      	b.n	8007750 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007540:	23a4      	movs	r3, #164	; 0xa4
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2201      	movs	r2, #1
 8007548:	4013      	ands	r3, r2
 800754a:	d012      	beq.n	8007572 <HAL_UART_IRQHandler+0xc6>
 800754c:	23a0      	movs	r3, #160	; 0xa0
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4013      	ands	r3, r2
 8007558:	d00b      	beq.n	8007572 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2201      	movs	r2, #1
 8007560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2280      	movs	r2, #128	; 0x80
 8007566:	589b      	ldr	r3, [r3, r2]
 8007568:	2201      	movs	r2, #1
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007572:	23a4      	movs	r3, #164	; 0xa4
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2202      	movs	r2, #2
 800757a:	4013      	ands	r3, r2
 800757c:	d011      	beq.n	80075a2 <HAL_UART_IRQHandler+0xf6>
 800757e:	239c      	movs	r3, #156	; 0x9c
 8007580:	18fb      	adds	r3, r7, r3
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2201      	movs	r2, #1
 8007586:	4013      	ands	r3, r2
 8007588:	d00b      	beq.n	80075a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2202      	movs	r2, #2
 8007590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2280      	movs	r2, #128	; 0x80
 8007596:	589b      	ldr	r3, [r3, r2]
 8007598:	2204      	movs	r2, #4
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2180      	movs	r1, #128	; 0x80
 80075a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a2:	23a4      	movs	r3, #164	; 0xa4
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2204      	movs	r2, #4
 80075aa:	4013      	ands	r3, r2
 80075ac:	d011      	beq.n	80075d2 <HAL_UART_IRQHandler+0x126>
 80075ae:	239c      	movs	r3, #156	; 0x9c
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2201      	movs	r2, #1
 80075b6:	4013      	ands	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2204      	movs	r2, #4
 80075c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2280      	movs	r2, #128	; 0x80
 80075c6:	589b      	ldr	r3, [r3, r2]
 80075c8:	2202      	movs	r2, #2
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2180      	movs	r1, #128	; 0x80
 80075d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075d2:	23a4      	movs	r3, #164	; 0xa4
 80075d4:	18fb      	adds	r3, r7, r3
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2208      	movs	r2, #8
 80075da:	4013      	ands	r3, r2
 80075dc:	d017      	beq.n	800760e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075de:	23a0      	movs	r3, #160	; 0xa0
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2220      	movs	r2, #32
 80075e6:	4013      	ands	r3, r2
 80075e8:	d105      	bne.n	80075f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075ea:	239c      	movs	r3, #156	; 0x9c
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2201      	movs	r2, #1
 80075f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075f4:	d00b      	beq.n	800760e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2208      	movs	r2, #8
 80075fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2280      	movs	r2, #128	; 0x80
 8007602:	589b      	ldr	r3, [r3, r2]
 8007604:	2208      	movs	r2, #8
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2180      	movs	r1, #128	; 0x80
 800760c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800760e:	23a4      	movs	r3, #164	; 0xa4
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4013      	ands	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_UART_IRQHandler+0x198>
 800761c:	23a0      	movs	r3, #160	; 0xa0
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	2380      	movs	r3, #128	; 0x80
 8007624:	04db      	lsls	r3, r3, #19
 8007626:	4013      	ands	r3, r2
 8007628:	d00c      	beq.n	8007644 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2280      	movs	r2, #128	; 0x80
 8007630:	0112      	lsls	r2, r2, #4
 8007632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	589b      	ldr	r3, [r3, r2]
 800763a:	2220      	movs	r2, #32
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2180      	movs	r1, #128	; 0x80
 8007642:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2280      	movs	r2, #128	; 0x80
 8007648:	589b      	ldr	r3, [r3, r2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d100      	bne.n	8007650 <HAL_UART_IRQHandler+0x1a4>
 800764e:	e1f7      	b.n	8007a40 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007650:	23a4      	movs	r3, #164	; 0xa4
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2220      	movs	r2, #32
 8007658:	4013      	ands	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800765c:	23a0      	movs	r3, #160	; 0xa0
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2220      	movs	r2, #32
 8007664:	4013      	ands	r3, r2
 8007666:	d008      	beq.n	800767a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	0010      	movs	r0, r2
 8007678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2280      	movs	r2, #128	; 0x80
 800767e:	589b      	ldr	r3, [r3, r2]
 8007680:	2194      	movs	r1, #148	; 0x94
 8007682:	187a      	adds	r2, r7, r1
 8007684:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2240      	movs	r2, #64	; 0x40
 800768e:	4013      	ands	r3, r2
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d004      	beq.n	800769e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007694:	187b      	adds	r3, r7, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2228      	movs	r2, #40	; 0x28
 800769a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800769c:	d047      	beq.n	800772e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0018      	movs	r0, r3
 80076a2:	f000 fd3f 	bl	8008124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2240      	movs	r2, #64	; 0x40
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d137      	bne.n	8007724 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b4:	f3ef 8310 	mrs	r3, PRIMASK
 80076b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80076ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076bc:	2090      	movs	r0, #144	; 0x90
 80076be:	183a      	adds	r2, r7, r0
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	2301      	movs	r3, #1
 80076c4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c8:	f383 8810 	msr	PRIMASK, r3
}
 80076cc:	46c0      	nop			; (mov r8, r8)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2140      	movs	r1, #64	; 0x40
 80076da:	438a      	bics	r2, r1
 80076dc:	609a      	str	r2, [r3, #8]
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e6:	f383 8810 	msr	PRIMASK, r3
}
 80076ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f8:	4a14      	ldr	r2, [pc, #80]	; (800774c <HAL_UART_IRQHandler+0x2a0>)
 80076fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	0018      	movs	r0, r3
 8007702:	f7fb fc87 	bl	8003014 <HAL_DMA_Abort_IT>
 8007706:	1e03      	subs	r3, r0, #0
 8007708:	d01a      	beq.n	8007740 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007714:	0018      	movs	r0, r3
 8007716:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	e012      	b.n	8007740 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	0018      	movs	r0, r3
 800771e:	f000 f9a5 	bl	8007a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007722:	e00d      	b.n	8007740 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f000 f9a0 	bl	8007a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	e008      	b.n	8007740 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	0018      	movs	r0, r3
 8007732:	f000 f99b 	bl	8007a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	2100      	movs	r1, #0
 800773c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800773e:	e17f      	b.n	8007a40 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	46c0      	nop			; (mov r8, r8)
    return;
 8007742:	e17d      	b.n	8007a40 <HAL_UART_IRQHandler+0x594>
 8007744:	0000080f 	.word	0x0000080f
 8007748:	04000120 	.word	0x04000120
 800774c:	080081e9 	.word	0x080081e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2b01      	cmp	r3, #1
 8007756:	d000      	beq.n	800775a <HAL_UART_IRQHandler+0x2ae>
 8007758:	e131      	b.n	80079be <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800775a:	23a4      	movs	r3, #164	; 0xa4
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2210      	movs	r2, #16
 8007762:	4013      	ands	r3, r2
 8007764:	d100      	bne.n	8007768 <HAL_UART_IRQHandler+0x2bc>
 8007766:	e12a      	b.n	80079be <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007768:	23a0      	movs	r3, #160	; 0xa0
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2210      	movs	r2, #16
 8007770:	4013      	ands	r3, r2
 8007772:	d100      	bne.n	8007776 <HAL_UART_IRQHandler+0x2ca>
 8007774:	e123      	b.n	80079be <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2240      	movs	r2, #64	; 0x40
 8007786:	4013      	ands	r3, r2
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d000      	beq.n	800778e <HAL_UART_IRQHandler+0x2e2>
 800778c:	e09b      	b.n	80078c6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	217e      	movs	r1, #126	; 0x7e
 8007798:	187b      	adds	r3, r7, r1
 800779a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800779c:	187b      	adds	r3, r7, r1
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d100      	bne.n	80077a6 <HAL_UART_IRQHandler+0x2fa>
 80077a4:	e14e      	b.n	8007a44 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2258      	movs	r2, #88	; 0x58
 80077aa:	5a9b      	ldrh	r3, [r3, r2]
 80077ac:	187a      	adds	r2, r7, r1
 80077ae:	8812      	ldrh	r2, [r2, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d300      	bcc.n	80077b6 <HAL_UART_IRQHandler+0x30a>
 80077b4:	e146      	b.n	8007a44 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	187a      	adds	r2, r7, r1
 80077ba:	215a      	movs	r1, #90	; 0x5a
 80077bc:	8812      	ldrh	r2, [r2, #0]
 80077be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d06e      	beq.n	80078a8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ca:	f3ef 8310 	mrs	r3, PRIMASK
 80077ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077d4:	2301      	movs	r3, #1
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	f383 8810 	msr	PRIMASK, r3
}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	499a      	ldr	r1, [pc, #616]	; (8007a54 <HAL_UART_IRQHandler+0x5a8>)
 80077ec:	400a      	ands	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	677b      	str	r3, [r7, #116]	; 0x74
 8007806:	2301      	movs	r3, #1
 8007808:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780c:	f383 8810 	msr	PRIMASK, r3
}
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2101      	movs	r1, #1
 800781e:	438a      	bics	r2, r1
 8007820:	609a      	str	r2, [r3, #8]
 8007822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	f383 8810 	msr	PRIMASK, r3
}
 800782c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800782e:	f3ef 8310 	mrs	r3, PRIMASK
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007836:	673b      	str	r3, [r7, #112]	; 0x70
 8007838:	2301      	movs	r3, #1
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783e:	f383 8810 	msr	PRIMASK, r3
}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2140      	movs	r1, #64	; 0x40
 8007850:	438a      	bics	r2, r1
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007856:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785a:	f383 8810 	msr	PRIMASK, r3
}
 800785e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786c:	f3ef 8310 	mrs	r3, PRIMASK
 8007870:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007872:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007876:	2301      	movs	r3, #1
 8007878:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2110      	movs	r1, #16
 800788e:	438a      	bics	r2, r1
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007894:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007898:	f383 8810 	msr	PRIMASK, r3
}
 800789c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a2:	0018      	movs	r0, r3
 80078a4:	f7fb fb7e 	bl	8002fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2258      	movs	r2, #88	; 0x58
 80078ac:	5a9a      	ldrh	r2, [r3, r2]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	215a      	movs	r1, #90	; 0x5a
 80078b2:	5a5b      	ldrh	r3, [r3, r1]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	0011      	movs	r1, r2
 80078be:	0018      	movs	r0, r3
 80078c0:	f000 f8dc 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c4:	e0be      	b.n	8007a44 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2258      	movs	r2, #88	; 0x58
 80078ca:	5a99      	ldrh	r1, [r3, r2]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	225a      	movs	r2, #90	; 0x5a
 80078d0:	5a9b      	ldrh	r3, [r3, r2]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	208e      	movs	r0, #142	; 0x8e
 80078d6:	183b      	adds	r3, r7, r0
 80078d8:	1a8a      	subs	r2, r1, r2
 80078da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	225a      	movs	r2, #90	; 0x5a
 80078e0:	5a9b      	ldrh	r3, [r3, r2]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d100      	bne.n	80078ea <HAL_UART_IRQHandler+0x43e>
 80078e8:	e0ae      	b.n	8007a48 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80078ea:	183b      	adds	r3, r7, r0
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d100      	bne.n	80078f4 <HAL_UART_IRQHandler+0x448>
 80078f2:	e0a9      	b.n	8007a48 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f4:	f3ef 8310 	mrs	r3, PRIMASK
 80078f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80078fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fc:	2488      	movs	r4, #136	; 0x88
 80078fe:	193a      	adds	r2, r7, r4
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	2301      	movs	r3, #1
 8007904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f383 8810 	msr	PRIMASK, r3
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	494f      	ldr	r1, [pc, #316]	; (8007a58 <HAL_UART_IRQHandler+0x5ac>)
 800791a:	400a      	ands	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	193b      	adds	r3, r7, r4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f383 8810 	msr	PRIMASK, r3
}
 800792a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792c:	f3ef 8310 	mrs	r3, PRIMASK
 8007930:	61bb      	str	r3, [r7, #24]
  return(result);
 8007932:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007934:	2484      	movs	r4, #132	; 0x84
 8007936:	193a      	adds	r2, r7, r4
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	2301      	movs	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2101      	movs	r1, #1
 8007952:	438a      	bics	r2, r1
 8007954:	609a      	str	r2, [r3, #8]
 8007956:	193b      	adds	r3, r7, r4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	f383 8810 	msr	PRIMASK, r3
}
 8007962:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007976:	f3ef 8310 	mrs	r3, PRIMASK
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797e:	2480      	movs	r4, #128	; 0x80
 8007980:	193a      	adds	r2, r7, r4
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	2301      	movs	r3, #1
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	f383 8810 	msr	PRIMASK, r3
}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2110      	movs	r1, #16
 800799c:	438a      	bics	r2, r1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	193b      	adds	r3, r7, r4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	f383 8810 	msr	PRIMASK, r3
}
 80079ac:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079ae:	183b      	adds	r3, r7, r0
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	0011      	movs	r1, r2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f000 f860 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079bc:	e044      	b.n	8007a48 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079be:	23a4      	movs	r3, #164	; 0xa4
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	2380      	movs	r3, #128	; 0x80
 80079c6:	035b      	lsls	r3, r3, #13
 80079c8:	4013      	ands	r3, r2
 80079ca:	d010      	beq.n	80079ee <HAL_UART_IRQHandler+0x542>
 80079cc:	239c      	movs	r3, #156	; 0x9c
 80079ce:	18fb      	adds	r3, r7, r3
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	03db      	lsls	r3, r3, #15
 80079d6:	4013      	ands	r3, r2
 80079d8:	d009      	beq.n	80079ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2280      	movs	r2, #128	; 0x80
 80079e0:	0352      	lsls	r2, r2, #13
 80079e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f000 fc40 	bl	800826c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ec:	e02f      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079ee:	23a4      	movs	r3, #164	; 0xa4
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2280      	movs	r2, #128	; 0x80
 80079f6:	4013      	ands	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079fa:	23a0      	movs	r3, #160	; 0xa0
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	4013      	ands	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d01e      	beq.n	8007a4c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	0010      	movs	r0, r2
 8007a16:	4798      	blx	r3
    }
    return;
 8007a18:	e018      	b.n	8007a4c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a1a:	23a4      	movs	r3, #164	; 0xa4
 8007a1c:	18fb      	adds	r3, r7, r3
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2240      	movs	r2, #64	; 0x40
 8007a22:	4013      	ands	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
 8007a26:	23a0      	movs	r3, #160	; 0xa0
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2240      	movs	r2, #64	; 0x40
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d00d      	beq.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f000 fbee 	bl	8008216 <UART_EndTransmit_IT>
    return;
 8007a3a:	e008      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	e006      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
    return;
 8007a40:	46c0      	nop			; (mov r8, r8)
 8007a42:	e004      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007a44:	46c0      	nop			; (mov r8, r8)
 8007a46:	e002      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	e000      	b.n	8007a4e <HAL_UART_IRQHandler+0x5a2>
    return;
 8007a4c:	46c0      	nop			; (mov r8, r8)
  }

}
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b02b      	add	sp, #172	; 0xac
 8007a52:	bd90      	pop	{r4, r7, pc}
 8007a54:	fffffeff 	.word	0xfffffeff
 8007a58:	fffffedf 	.word	0xfffffedf

08007a5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a74:	46c0      	nop			; (mov r8, r8)
 8007a76:	46bd      	mov	sp, r7
 8007a78:	b002      	add	sp, #8
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	000a      	movs	r2, r1
 8007a86:	1cbb      	adds	r3, r7, #2
 8007a88:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b002      	add	sp, #8
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a9c:	231e      	movs	r3, #30
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4aaf      	ldr	r2, [pc, #700]	; (8007d80 <UART_SetConfig+0x2ec>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	0019      	movs	r1, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4aaa      	ldr	r2, [pc, #680]	; (8007d84 <UART_SetConfig+0x2f0>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	0019      	movs	r1, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	4aa1      	ldr	r2, [pc, #644]	; (8007d88 <UART_SetConfig+0x2f4>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	0019      	movs	r1, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a9d      	ldr	r2, [pc, #628]	; (8007d8c <UART_SetConfig+0x2f8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d127      	bne.n	8007b6a <UART_SetConfig+0xd6>
 8007b1a:	4b9d      	ldr	r3, [pc, #628]	; (8007d90 <UART_SetConfig+0x2fc>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	2203      	movs	r2, #3
 8007b20:	4013      	ands	r3, r2
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d00d      	beq.n	8007b42 <UART_SetConfig+0xae>
 8007b26:	d81b      	bhi.n	8007b60 <UART_SetConfig+0xcc>
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d014      	beq.n	8007b56 <UART_SetConfig+0xc2>
 8007b2c:	d818      	bhi.n	8007b60 <UART_SetConfig+0xcc>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <UART_SetConfig+0xa4>
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d00a      	beq.n	8007b4c <UART_SetConfig+0xb8>
 8007b36:	e013      	b.n	8007b60 <UART_SetConfig+0xcc>
 8007b38:	231f      	movs	r3, #31
 8007b3a:	18fb      	adds	r3, r7, r3
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e065      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007b42:	231f      	movs	r3, #31
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e060      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007b4c:	231f      	movs	r3, #31
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	2204      	movs	r2, #4
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e05b      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007b56:	231f      	movs	r3, #31
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e056      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007b60:	231f      	movs	r3, #31
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	2210      	movs	r2, #16
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e051      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a89      	ldr	r2, [pc, #548]	; (8007d94 <UART_SetConfig+0x300>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d134      	bne.n	8007bde <UART_SetConfig+0x14a>
 8007b74:	4b86      	ldr	r3, [pc, #536]	; (8007d90 <UART_SetConfig+0x2fc>)
 8007b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b78:	23c0      	movs	r3, #192	; 0xc0
 8007b7a:	029b      	lsls	r3, r3, #10
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	22c0      	movs	r2, #192	; 0xc0
 8007b80:	0292      	lsls	r2, r2, #10
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d017      	beq.n	8007bb6 <UART_SetConfig+0x122>
 8007b86:	22c0      	movs	r2, #192	; 0xc0
 8007b88:	0292      	lsls	r2, r2, #10
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d822      	bhi.n	8007bd4 <UART_SetConfig+0x140>
 8007b8e:	2280      	movs	r2, #128	; 0x80
 8007b90:	0292      	lsls	r2, r2, #10
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d019      	beq.n	8007bca <UART_SetConfig+0x136>
 8007b96:	2280      	movs	r2, #128	; 0x80
 8007b98:	0292      	lsls	r2, r2, #10
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d81a      	bhi.n	8007bd4 <UART_SetConfig+0x140>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d004      	beq.n	8007bac <UART_SetConfig+0x118>
 8007ba2:	2280      	movs	r2, #128	; 0x80
 8007ba4:	0252      	lsls	r2, r2, #9
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00a      	beq.n	8007bc0 <UART_SetConfig+0x12c>
 8007baa:	e013      	b.n	8007bd4 <UART_SetConfig+0x140>
 8007bac:	231f      	movs	r3, #31
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e02b      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bb6:	231f      	movs	r3, #31
 8007bb8:	18fb      	adds	r3, r7, r3
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e026      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bc0:	231f      	movs	r3, #31
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	e021      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bca:	231f      	movs	r3, #31
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2208      	movs	r2, #8
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e01c      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bd4:	231f      	movs	r3, #31
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	2210      	movs	r2, #16
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e017      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a6d      	ldr	r2, [pc, #436]	; (8007d98 <UART_SetConfig+0x304>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d104      	bne.n	8007bf2 <UART_SetConfig+0x15e>
 8007be8:	231f      	movs	r3, #31
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e00d      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a69      	ldr	r2, [pc, #420]	; (8007d9c <UART_SetConfig+0x308>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d104      	bne.n	8007c06 <UART_SetConfig+0x172>
 8007bfc:	231f      	movs	r3, #31
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e003      	b.n	8007c0e <UART_SetConfig+0x17a>
 8007c06:	231f      	movs	r3, #31
 8007c08:	18fb      	adds	r3, r7, r3
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69da      	ldr	r2, [r3, #28]
 8007c12:	2380      	movs	r3, #128	; 0x80
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d15d      	bne.n	8007cd6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007c1a:	231f      	movs	r3, #31
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d015      	beq.n	8007c50 <UART_SetConfig+0x1bc>
 8007c24:	dc18      	bgt.n	8007c58 <UART_SetConfig+0x1c4>
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d00d      	beq.n	8007c46 <UART_SetConfig+0x1b2>
 8007c2a:	dc15      	bgt.n	8007c58 <UART_SetConfig+0x1c4>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <UART_SetConfig+0x1a2>
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d005      	beq.n	8007c40 <UART_SetConfig+0x1ac>
 8007c34:	e010      	b.n	8007c58 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c36:	f7fe f865 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8007c3a:	0003      	movs	r3, r0
 8007c3c:	61bb      	str	r3, [r7, #24]
        break;
 8007c3e:	e012      	b.n	8007c66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c40:	4b57      	ldr	r3, [pc, #348]	; (8007da0 <UART_SetConfig+0x30c>)
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e00f      	b.n	8007c66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c46:	f7fd ffd1 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	61bb      	str	r3, [r7, #24]
        break;
 8007c4e:	e00a      	b.n	8007c66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	61bb      	str	r3, [r7, #24]
        break;
 8007c56:	e006      	b.n	8007c66 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c5c:	231e      	movs	r3, #30
 8007c5e:	18fb      	adds	r3, r7, r3
 8007c60:	2201      	movs	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
        break;
 8007c64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d100      	bne.n	8007c6e <UART_SetConfig+0x1da>
 8007c6c:	e07b      	b.n	8007d66 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	005a      	lsls	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	18d2      	adds	r2, r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	0019      	movs	r1, r3
 8007c80:	0010      	movs	r0, r2
 8007c82:	f7f8 fa53 	bl	800012c <__udivsi3>
 8007c86:	0003      	movs	r3, r0
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d91c      	bls.n	8007ccc <UART_SetConfig+0x238>
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	025b      	lsls	r3, r3, #9
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d217      	bcs.n	8007ccc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	200e      	movs	r0, #14
 8007ca2:	183b      	adds	r3, r7, r0
 8007ca4:	210f      	movs	r1, #15
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	085b      	lsrs	r3, r3, #1
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	b299      	uxth	r1, r3
 8007cb6:	183b      	adds	r3, r7, r0
 8007cb8:	183a      	adds	r2, r7, r0
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	183a      	adds	r2, r7, r0
 8007cc6:	8812      	ldrh	r2, [r2, #0]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e04c      	b.n	8007d66 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ccc:	231e      	movs	r3, #30
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e047      	b.n	8007d66 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cd6:	231f      	movs	r3, #31
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d015      	beq.n	8007d0c <UART_SetConfig+0x278>
 8007ce0:	dc18      	bgt.n	8007d14 <UART_SetConfig+0x280>
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d00d      	beq.n	8007d02 <UART_SetConfig+0x26e>
 8007ce6:	dc15      	bgt.n	8007d14 <UART_SetConfig+0x280>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <UART_SetConfig+0x25e>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d005      	beq.n	8007cfc <UART_SetConfig+0x268>
 8007cf0:	e010      	b.n	8007d14 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf2:	f7fe f807 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	61bb      	str	r3, [r7, #24]
        break;
 8007cfa:	e012      	b.n	8007d22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b28      	ldr	r3, [pc, #160]	; (8007da0 <UART_SetConfig+0x30c>)
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fd ff73 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007d06:	0003      	movs	r3, r0
 8007d08:	61bb      	str	r3, [r7, #24]
        break;
 8007d0a:	e00a      	b.n	8007d22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0c:	2380      	movs	r3, #128	; 0x80
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	61bb      	str	r3, [r7, #24]
        break;
 8007d12:	e006      	b.n	8007d22 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d18:	231e      	movs	r3, #30
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
        break;
 8007d20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01e      	beq.n	8007d66 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	085a      	lsrs	r2, r3, #1
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	18d2      	adds	r2, r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	0019      	movs	r1, r3
 8007d38:	0010      	movs	r0, r2
 8007d3a:	f7f8 f9f7 	bl	800012c <__udivsi3>
 8007d3e:	0003      	movs	r3, r0
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d909      	bls.n	8007d5e <UART_SetConfig+0x2ca>
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	025b      	lsls	r3, r3, #9
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d204      	bcs.n	8007d5e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	e003      	b.n	8007d66 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5e:	231e      	movs	r3, #30
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d72:	231e      	movs	r3, #30
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	781b      	ldrb	r3, [r3, #0]
}
 8007d78:	0018      	movs	r0, r3
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	b008      	add	sp, #32
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	efff69f3 	.word	0xefff69f3
 8007d84:	ffffcfff 	.word	0xffffcfff
 8007d88:	fffff4ff 	.word	0xfffff4ff
 8007d8c:	40013800 	.word	0x40013800
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40004400 	.word	0x40004400
 8007d98:	40004800 	.word	0x40004800
 8007d9c:	40004c00 	.word	0x40004c00
 8007da0:	007a1200 	.word	0x007a1200

08007da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2201      	movs	r2, #1
 8007db2:	4013      	ands	r3, r2
 8007db4:	d00b      	beq.n	8007dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4a4a      	ldr	r2, [pc, #296]	; (8007ee8 <UART_AdvFeatureConfig+0x144>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4a43      	ldr	r2, [pc, #268]	; (8007eec <UART_AdvFeatureConfig+0x148>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	0019      	movs	r1, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2204      	movs	r2, #4
 8007df6:	4013      	ands	r3, r2
 8007df8:	d00b      	beq.n	8007e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <UART_AdvFeatureConfig+0x14c>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	0019      	movs	r1, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2208      	movs	r2, #8
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d00b      	beq.n	8007e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4a34      	ldr	r2, [pc, #208]	; (8007ef4 <UART_AdvFeatureConfig+0x150>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	0019      	movs	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2210      	movs	r2, #16
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d00b      	beq.n	8007e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4a2c      	ldr	r2, [pc, #176]	; (8007ef8 <UART_AdvFeatureConfig+0x154>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	0019      	movs	r1, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	4a25      	ldr	r2, [pc, #148]	; (8007efc <UART_AdvFeatureConfig+0x158>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	2240      	movs	r2, #64	; 0x40
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d01d      	beq.n	8007ebe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <UART_AdvFeatureConfig+0x15c>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e9e:	2380      	movs	r3, #128	; 0x80
 8007ea0:	035b      	lsls	r3, r3, #13
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d10b      	bne.n	8007ebe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <UART_AdvFeatureConfig+0x160>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <UART_AdvFeatureConfig+0x164>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	0019      	movs	r1, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }
}
 8007ee0:	46c0      	nop			; (mov r8, r8)
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b002      	add	sp, #8
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	fffdffff 	.word	0xfffdffff
 8007eec:	fffeffff 	.word	0xfffeffff
 8007ef0:	fffbffff 	.word	0xfffbffff
 8007ef4:	ffff7fff 	.word	0xffff7fff
 8007ef8:	ffffefff 	.word	0xffffefff
 8007efc:	ffffdfff 	.word	0xffffdfff
 8007f00:	ffefffff 	.word	0xffefffff
 8007f04:	ff9fffff 	.word	0xff9fffff
 8007f08:	fff7ffff 	.word	0xfff7ffff

08007f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2280      	movs	r2, #128	; 0x80
 8007f18:	2100      	movs	r1, #0
 8007f1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f1c:	f7fa faa0 	bl	8002460 <HAL_GetTick>
 8007f20:	0003      	movs	r3, r0
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d10c      	bne.n	8007f4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2280      	movs	r2, #128	; 0x80
 8007f36:	0391      	lsls	r1, r2, #14
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <UART_CheckIdleState+0x8c>)
 8007f3c:	9200      	str	r2, [sp, #0]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f000 f82c 	bl	8007f9c <UART_WaitOnFlagUntilTimeout>
 8007f44:	1e03      	subs	r3, r0, #0
 8007f46:	d001      	beq.n	8007f4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e021      	b.n	8007f90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2204      	movs	r2, #4
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d10c      	bne.n	8007f74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	03d1      	lsls	r1, r2, #15
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4a0d      	ldr	r2, [pc, #52]	; (8007f98 <UART_CheckIdleState+0x8c>)
 8007f64:	9200      	str	r2, [sp, #0]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f000 f818 	bl	8007f9c <UART_WaitOnFlagUntilTimeout>
 8007f6c:	1e03      	subs	r3, r0, #0
 8007f6e:	d001      	beq.n	8007f74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e00d      	b.n	8007f90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2274      	movs	r2, #116	; 0x74
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	0018      	movs	r0, r3
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b004      	add	sp, #16
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	01ffffff 	.word	0x01ffffff

08007f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b094      	sub	sp, #80	; 0x50
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	1dfb      	adds	r3, r7, #7
 8007faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fac:	e0a3      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	d100      	bne.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007fb4:	e09f      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fb6:	f7fa fa53 	bl	8002460 <HAL_GetTick>
 8007fba:	0002      	movs	r2, r0
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d13d      	bne.n	8008048 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	f383 8810 	msr	PRIMASK, r3
}
 8007fe0:	46c0      	nop			; (mov r8, r8)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	494c      	ldr	r1, [pc, #304]	; (8008120 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007fee:	400a      	ands	r2, r1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	f383 8810 	msr	PRIMASK, r3
}
 8007ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
 8008008:	2301      	movs	r3, #1
 800800a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	f383 8810 	msr	PRIMASK, r3
}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2101      	movs	r1, #1
 8008020:	438a      	bics	r2, r1
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	f383 8810 	msr	PRIMASK, r3
}
 800802e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2220      	movs	r2, #32
 800803a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2274      	movs	r2, #116	; 0x74
 8008040:	2100      	movs	r1, #0
 8008042:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e067      	b.n	8008118 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2204      	movs	r2, #4
 8008050:	4013      	ands	r3, r2
 8008052:	d050      	beq.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	401a      	ands	r2, r3
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	429a      	cmp	r2, r3
 8008066:	d146      	bne.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2280      	movs	r2, #128	; 0x80
 800806e:	0112      	lsls	r2, r2, #4
 8008070:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008072:	f3ef 8310 	mrs	r3, PRIMASK
 8008076:	613b      	str	r3, [r7, #16]
  return(result);
 8008078:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f383 8810 	msr	PRIMASK, r3
}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4923      	ldr	r1, [pc, #140]	; (8008120 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008094:	400a      	ands	r2, r1
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f383 8810 	msr	PRIMASK, r3
}
 80080a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a4:	f3ef 8310 	mrs	r3, PRIMASK
 80080a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80080aa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ae:	2301      	movs	r3, #1
 80080b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2101      	movs	r1, #1
 80080c6:	438a      	bics	r2, r1
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	f383 8810 	msr	PRIMASK, r3
}
 80080d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2280      	movs	r2, #128	; 0x80
 80080e6:	2120      	movs	r1, #32
 80080e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2274      	movs	r2, #116	; 0x74
 80080ee:	2100      	movs	r1, #0
 80080f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e010      	b.n	8008118 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	425a      	negs	r2, r3
 8008106:	4153      	adcs	r3, r2
 8008108:	b2db      	uxtb	r3, r3
 800810a:	001a      	movs	r2, r3
 800810c:	1dfb      	adds	r3, r7, #7
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d100      	bne.n	8008116 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008114:	e74b      	b.n	8007fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	0018      	movs	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	b014      	add	sp, #80	; 0x50
 800811e:	bd80      	pop	{r7, pc}
 8008120:	fffffe5f 	.word	0xfffffe5f

08008124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	; 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800812c:	f3ef 8310 	mrs	r3, PRIMASK
 8008130:	617b      	str	r3, [r7, #20]
  return(result);
 8008132:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 8008136:	2301      	movs	r3, #1
 8008138:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f383 8810 	msr	PRIMASK, r3
}
 8008140:	46c0      	nop			; (mov r8, r8)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4925      	ldr	r1, [pc, #148]	; (80081e4 <UART_EndRxTransfer+0xc0>)
 800814e:	400a      	ands	r2, r1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	f383 8810 	msr	PRIMASK, r3
}
 800815c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815e:	f3ef 8310 	mrs	r3, PRIMASK
 8008162:	623b      	str	r3, [r7, #32]
  return(result);
 8008164:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008166:	633b      	str	r3, [r7, #48]	; 0x30
 8008168:	2301      	movs	r3, #1
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2101      	movs	r1, #1
 8008180:	438a      	bics	r2, r1
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	f383 8810 	msr	PRIMASK, r3
}
 800818e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008194:	2b01      	cmp	r3, #1
 8008196:	d118      	bne.n	80081ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008198:	f3ef 8310 	mrs	r3, PRIMASK
 800819c:	60bb      	str	r3, [r7, #8]
  return(result);
 800819e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081a2:	2301      	movs	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f383 8810 	msr	PRIMASK, r3
}
 80081ac:	46c0      	nop			; (mov r8, r8)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2110      	movs	r1, #16
 80081ba:	438a      	bics	r2, r1
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f383 8810 	msr	PRIMASK, r3
}
 80081c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	46bd      	mov	sp, r7
 80081e0:	b00e      	add	sp, #56	; 0x38
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	fffffedf 	.word	0xfffffedf

080081e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	225a      	movs	r2, #90	; 0x5a
 80081fa:	2100      	movs	r1, #0
 80081fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2252      	movs	r2, #82	; 0x52
 8008202:	2100      	movs	r1, #0
 8008204:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	0018      	movs	r0, r3
 800820a:	f7ff fc2f 	bl	8007a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	46bd      	mov	sp, r7
 8008212:	b004      	add	sp, #16
 8008214:	bd80      	pop	{r7, pc}

08008216 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b086      	sub	sp, #24
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800821e:	f3ef 8310 	mrs	r3, PRIMASK
 8008222:	60bb      	str	r3, [r7, #8]
  return(result);
 8008224:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2140      	movs	r1, #64	; 0x40
 8008240:	438a      	bics	r2, r1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f383 8810 	msr	PRIMASK, r3
}
 800824e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	0018      	movs	r0, r3
 8008260:	f7ff fbfc 	bl	8007a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008264:	46c0      	nop			; (mov r8, r8)
 8008266:	46bd      	mov	sp, r7
 8008268:	b006      	add	sp, #24
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	46bd      	mov	sp, r7
 8008278:	b002      	add	sp, #8
 800827a:	bd80      	pop	{r7, pc}

0800827c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2244      	movs	r2, #68	; 0x44
 8008288:	2100      	movs	r1, #0
 800828a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <USB_EnableGlobalInt+0x28>)
 800828e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	b299      	uxth	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b004      	add	sp, #16
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	0000bf80 	.word	0x0000bf80

080082a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <USB_DisableGlobalInt+0x30>)
 80082b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	5a9b      	ldrh	r3, [r3, r2]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	b292      	uxth	r2, r2
 80082c0:	43d2      	mvns	r2, r2
 80082c2:	b292      	uxth	r2, r2
 80082c4:	4013      	ands	r3, r2
 80082c6:	b299      	uxth	r1, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2240      	movs	r2, #64	; 0x40
 80082cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b004      	add	sp, #16
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	0000bf80 	.word	0x0000bf80

080082dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082dc:	b084      	sub	sp, #16
 80082de:	b590      	push	{r4, r7, lr}
 80082e0:	46c6      	mov	lr, r8
 80082e2:	b500      	push	{lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	2004      	movs	r0, #4
 80082ec:	2410      	movs	r4, #16
 80082ee:	46a4      	mov	ip, r4
 80082f0:	2408      	movs	r4, #8
 80082f2:	46a0      	mov	r8, r4
 80082f4:	44b8      	add	r8, r7
 80082f6:	44c4      	add	ip, r8
 80082f8:	4460      	add	r0, ip
 80082fa:	6001      	str	r1, [r0, #0]
 80082fc:	6042      	str	r2, [r0, #4]
 80082fe:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2240      	movs	r2, #64	; 0x40
 8008304:	2101      	movs	r1, #1
 8008306:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2240      	movs	r2, #64	; 0x40
 800830c:	2100      	movs	r1, #0
 800830e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2244      	movs	r2, #68	; 0x44
 8008314:	2100      	movs	r1, #0
 8008316:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2250      	movs	r2, #80	; 0x50
 800831c:	2100      	movs	r1, #0
 800831e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	0018      	movs	r0, r3
 8008324:	46bd      	mov	sp, r7
 8008326:	b002      	add	sp, #8
 8008328:	bc80      	pop	{r7}
 800832a:	46b8      	mov	r8, r7
 800832c:	bc90      	pop	{r4, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	b004      	add	sp, #16
 8008332:	4718      	bx	r3

08008334 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b09c      	sub	sp, #112	; 0x70
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800833e:	236f      	movs	r3, #111	; 0x6f
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	18d3      	adds	r3, r2, r3
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29a      	uxth	r2, r3
 8008354:	236c      	movs	r3, #108	; 0x6c
 8008356:	18fb      	adds	r3, r7, r3
 8008358:	49cf      	ldr	r1, [pc, #828]	; (8008698 <USB_ActivateEndpoint+0x364>)
 800835a:	400a      	ands	r2, r1
 800835c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	78db      	ldrb	r3, [r3, #3]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d017      	beq.n	8008396 <USB_ActivateEndpoint+0x62>
 8008366:	dc28      	bgt.n	80083ba <USB_ActivateEndpoint+0x86>
 8008368:	2b02      	cmp	r3, #2
 800836a:	d00e      	beq.n	800838a <USB_ActivateEndpoint+0x56>
 800836c:	dc25      	bgt.n	80083ba <USB_ActivateEndpoint+0x86>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <USB_ActivateEndpoint+0x44>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d018      	beq.n	80083a8 <USB_ActivateEndpoint+0x74>
 8008376:	e020      	b.n	80083ba <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008378:	226c      	movs	r2, #108	; 0x6c
 800837a:	18bb      	adds	r3, r7, r2
 800837c:	18ba      	adds	r2, r7, r2
 800837e:	8812      	ldrh	r2, [r2, #0]
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	0089      	lsls	r1, r1, #2
 8008384:	430a      	orrs	r2, r1
 8008386:	801a      	strh	r2, [r3, #0]
      break;
 8008388:	e01c      	b.n	80083c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800838a:	226c      	movs	r2, #108	; 0x6c
 800838c:	18bb      	adds	r3, r7, r2
 800838e:	18ba      	adds	r2, r7, r2
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	801a      	strh	r2, [r3, #0]
      break;
 8008394:	e016      	b.n	80083c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008396:	226c      	movs	r2, #108	; 0x6c
 8008398:	18bb      	adds	r3, r7, r2
 800839a:	18ba      	adds	r2, r7, r2
 800839c:	8812      	ldrh	r2, [r2, #0]
 800839e:	21c0      	movs	r1, #192	; 0xc0
 80083a0:	00c9      	lsls	r1, r1, #3
 80083a2:	430a      	orrs	r2, r1
 80083a4:	801a      	strh	r2, [r3, #0]
      break;
 80083a6:	e00d      	b.n	80083c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80083a8:	226c      	movs	r2, #108	; 0x6c
 80083aa:	18bb      	adds	r3, r7, r2
 80083ac:	18ba      	adds	r2, r7, r2
 80083ae:	8812      	ldrh	r2, [r2, #0]
 80083b0:	2180      	movs	r1, #128	; 0x80
 80083b2:	00c9      	lsls	r1, r1, #3
 80083b4:	430a      	orrs	r2, r1
 80083b6:	801a      	strh	r2, [r3, #0]
      break;
 80083b8:	e004      	b.n	80083c4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80083ba:	236f      	movs	r3, #111	; 0x6f
 80083bc:	18fb      	adds	r3, r7, r3
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]
      break;
 80083c2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	18d3      	adds	r3, r2, r3
 80083ce:	226c      	movs	r2, #108	; 0x6c
 80083d0:	18ba      	adds	r2, r7, r2
 80083d2:	8812      	ldrh	r2, [r2, #0]
 80083d4:	49b1      	ldr	r1, [pc, #708]	; (800869c <USB_ActivateEndpoint+0x368>)
 80083d6:	430a      	orrs	r2, r1
 80083d8:	b292      	uxth	r2, r2
 80083da:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	18d3      	adds	r3, r2, r3
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	4aac      	ldr	r2, [pc, #688]	; (80086a0 <USB_ActivateEndpoint+0x36c>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	b21a      	sxth	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b21a      	sxth	r2, r3
 80083fc:	2166      	movs	r1, #102	; 0x66
 80083fe:	187b      	adds	r3, r7, r1
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	18d3      	adds	r3, r2, r3
 800840c:	187a      	adds	r2, r7, r1
 800840e:	8812      	ldrh	r2, [r2, #0]
 8008410:	49a2      	ldr	r1, [pc, #648]	; (800869c <USB_ActivateEndpoint+0x368>)
 8008412:	430a      	orrs	r2, r1
 8008414:	b292      	uxth	r2, r2
 8008416:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	7b1b      	ldrb	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d000      	beq.n	8008422 <USB_ActivateEndpoint+0xee>
 8008420:	e150      	b.n	80086c4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d100      	bne.n	800842c <USB_ActivateEndpoint+0xf8>
 800842a:	e07a      	b.n	8008522 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2250      	movs	r2, #80	; 0x50
 8008434:	5a9b      	ldrh	r3, [r3, r2]
 8008436:	b29b      	uxth	r3, r3
 8008438:	001a      	movs	r2, r3
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	189b      	adds	r3, r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	00da      	lsls	r2, r3, #3
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	18d3      	adds	r3, r2, r3
 800844a:	2280      	movs	r2, #128	; 0x80
 800844c:	00d2      	lsls	r2, r2, #3
 800844e:	4694      	mov	ip, r2
 8008450:	4463      	add	r3, ip
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	88db      	ldrh	r3, [r3, #6]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	b29b      	uxth	r3, r3
 800845c:	18db      	adds	r3, r3, r3
 800845e:	b29a      	uxth	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	18d2      	adds	r2, r2, r3
 800846e:	2112      	movs	r1, #18
 8008470:	187b      	adds	r3, r7, r1
 8008472:	8812      	ldrh	r2, [r2, #0]
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	187b      	adds	r3, r7, r1
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	2240      	movs	r2, #64	; 0x40
 800847c:	4013      	ands	r3, r2
 800847e:	d016      	beq.n	80084ae <USB_ActivateEndpoint+0x17a>
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	18d3      	adds	r3, r2, r3
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b29a      	uxth	r2, r3
 800848e:	2010      	movs	r0, #16
 8008490:	183b      	adds	r3, r7, r0
 8008492:	4983      	ldr	r1, [pc, #524]	; (80086a0 <USB_ActivateEndpoint+0x36c>)
 8008494:	400a      	ands	r2, r1
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	18d3      	adds	r3, r2, r3
 80084a2:	183a      	adds	r2, r7, r0
 80084a4:	8812      	ldrh	r2, [r2, #0]
 80084a6:	497f      	ldr	r1, [pc, #508]	; (80086a4 <USB_ActivateEndpoint+0x370>)
 80084a8:	430a      	orrs	r2, r1
 80084aa:	b292      	uxth	r2, r2
 80084ac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	78db      	ldrb	r3, [r3, #3]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d01d      	beq.n	80084f2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	18d3      	adds	r3, r2, r3
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	200c      	movs	r0, #12
 80084c6:	183b      	adds	r3, r7, r0
 80084c8:	4977      	ldr	r1, [pc, #476]	; (80086a8 <USB_ActivateEndpoint+0x374>)
 80084ca:	400a      	ands	r2, r1
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	183a      	adds	r2, r7, r0
 80084d2:	8812      	ldrh	r2, [r2, #0]
 80084d4:	2120      	movs	r1, #32
 80084d6:	404a      	eors	r2, r1
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	18d3      	adds	r3, r2, r3
 80084e4:	183a      	adds	r2, r7, r0
 80084e6:	8812      	ldrh	r2, [r2, #0]
 80084e8:	496c      	ldr	r1, [pc, #432]	; (800869c <USB_ActivateEndpoint+0x368>)
 80084ea:	430a      	orrs	r2, r1
 80084ec:	b292      	uxth	r2, r2
 80084ee:	801a      	strh	r2, [r3, #0]
 80084f0:	e27a      	b.n	80089e8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	18d3      	adds	r3, r2, r3
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29a      	uxth	r2, r3
 8008500:	200e      	movs	r0, #14
 8008502:	183b      	adds	r3, r7, r0
 8008504:	4968      	ldr	r1, [pc, #416]	; (80086a8 <USB_ActivateEndpoint+0x374>)
 8008506:	400a      	ands	r2, r1
 8008508:	801a      	strh	r2, [r3, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	18d3      	adds	r3, r2, r3
 8008514:	183a      	adds	r2, r7, r0
 8008516:	8812      	ldrh	r2, [r2, #0]
 8008518:	4960      	ldr	r1, [pc, #384]	; (800869c <USB_ActivateEndpoint+0x368>)
 800851a:	430a      	orrs	r2, r1
 800851c:	b292      	uxth	r2, r2
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e262      	b.n	80089e8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	633b      	str	r3, [r7, #48]	; 0x30
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2250      	movs	r2, #80	; 0x50
 800852a:	5a9b      	ldrh	r3, [r3, r2]
 800852c:	b29b      	uxth	r3, r3
 800852e:	001a      	movs	r2, r3
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	189b      	adds	r3, r3, r2
 8008534:	633b      	str	r3, [r7, #48]	; 0x30
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	00da      	lsls	r2, r3, #3
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	4a5a      	ldr	r2, [pc, #360]	; (80086ac <USB_ActivateEndpoint+0x378>)
 8008542:	4694      	mov	ip, r2
 8008544:	4463      	add	r3, ip
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	88db      	ldrh	r3, [r3, #6]
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	b29b      	uxth	r3, r3
 8008550:	18db      	adds	r3, r3, r3
 8008552:	b29a      	uxth	r2, r3
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2250      	movs	r2, #80	; 0x50
 8008560:	5a9b      	ldrh	r3, [r3, r2]
 8008562:	b29b      	uxth	r3, r3
 8008564:	001a      	movs	r2, r3
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	189b      	adds	r3, r3, r2
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	00da      	lsls	r2, r3, #3
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	18d3      	adds	r3, r2, r3
 8008576:	4a4e      	ldr	r2, [pc, #312]	; (80086b0 <USB_ActivateEndpoint+0x37c>)
 8008578:	4694      	mov	ip, r2
 800857a:	4463      	add	r3, ip
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d110      	bne.n	80085a8 <USB_ActivateEndpoint+0x274>
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	4a49      	ldr	r2, [pc, #292]	; (80086b4 <USB_ActivateEndpoint+0x380>)
 800858e:	4013      	ands	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	4a46      	ldr	r2, [pc, #280]	; (80086b8 <USB_ActivateEndpoint+0x384>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	e02b      	b.n	8008600 <USB_ActivateEndpoint+0x2cc>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b3e      	cmp	r3, #62	; 0x3e
 80085ae:	d812      	bhi.n	80085d6 <USB_ActivateEndpoint+0x2a2>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	085b      	lsrs	r3, r3, #1
 80085b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2201      	movs	r2, #1
 80085be:	4013      	ands	r3, r2
 80085c0:	d002      	beq.n	80085c8 <USB_ActivateEndpoint+0x294>
 80085c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c4:	3301      	adds	r3, #1
 80085c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	029b      	lsls	r3, r3, #10
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e014      	b.n	8008600 <USB_ActivateEndpoint+0x2cc>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	221f      	movs	r2, #31
 80085e4:	4013      	ands	r3, r2
 80085e6:	d102      	bne.n	80085ee <USB_ActivateEndpoint+0x2ba>
 80085e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ea:	3b01      	subs	r3, #1
 80085ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	029b      	lsls	r3, r3, #10
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	4a30      	ldr	r2, [pc, #192]	; (80086b8 <USB_ActivateEndpoint+0x384>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	18d2      	adds	r2, r2, r3
 800860a:	2122      	movs	r1, #34	; 0x22
 800860c:	187b      	adds	r3, r7, r1
 800860e:	8812      	ldrh	r2, [r2, #0]
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	187b      	adds	r3, r7, r1
 8008614:	881a      	ldrh	r2, [r3, #0]
 8008616:	2380      	movs	r3, #128	; 0x80
 8008618:	01db      	lsls	r3, r3, #7
 800861a:	4013      	ands	r3, r2
 800861c:	d016      	beq.n	800864c <USB_ActivateEndpoint+0x318>
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	18d3      	adds	r3, r2, r3
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29a      	uxth	r2, r3
 800862c:	2020      	movs	r0, #32
 800862e:	183b      	adds	r3, r7, r0
 8008630:	491b      	ldr	r1, [pc, #108]	; (80086a0 <USB_ActivateEndpoint+0x36c>)
 8008632:	400a      	ands	r2, r1
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	18d3      	adds	r3, r2, r3
 8008640:	183a      	adds	r2, r7, r0
 8008642:	8812      	ldrh	r2, [r2, #0]
 8008644:	491d      	ldr	r1, [pc, #116]	; (80086bc <USB_ActivateEndpoint+0x388>)
 8008646:	430a      	orrs	r2, r1
 8008648:	b292      	uxth	r2, r2
 800864a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	18d3      	adds	r3, r2, r3
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29a      	uxth	r2, r3
 800865a:	201e      	movs	r0, #30
 800865c:	183b      	adds	r3, r7, r0
 800865e:	4918      	ldr	r1, [pc, #96]	; (80086c0 <USB_ActivateEndpoint+0x38c>)
 8008660:	400a      	ands	r2, r1
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	183b      	adds	r3, r7, r0
 8008666:	183a      	adds	r2, r7, r0
 8008668:	8812      	ldrh	r2, [r2, #0]
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	0149      	lsls	r1, r1, #5
 800866e:	404a      	eors	r2, r1
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	183b      	adds	r3, r7, r0
 8008674:	183a      	adds	r2, r7, r0
 8008676:	8812      	ldrh	r2, [r2, #0]
 8008678:	2180      	movs	r1, #128	; 0x80
 800867a:	0189      	lsls	r1, r1, #6
 800867c:	404a      	eors	r2, r1
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	183a      	adds	r2, r7, r0
 800868c:	8812      	ldrh	r2, [r2, #0]
 800868e:	4903      	ldr	r1, [pc, #12]	; (800869c <USB_ActivateEndpoint+0x368>)
 8008690:	430a      	orrs	r2, r1
 8008692:	b292      	uxth	r2, r2
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e1a7      	b.n	80089e8 <USB_ActivateEndpoint+0x6b4>
 8008698:	ffff898f 	.word	0xffff898f
 800869c:	ffff8080 	.word	0xffff8080
 80086a0:	ffff8f8f 	.word	0xffff8f8f
 80086a4:	ffff80c0 	.word	0xffff80c0
 80086a8:	ffff8fbf 	.word	0xffff8fbf
 80086ac:	00000404 	.word	0x00000404
 80086b0:	00000406 	.word	0x00000406
 80086b4:	ffff83ff 	.word	0xffff83ff
 80086b8:	ffff8000 	.word	0xffff8000
 80086bc:	ffffc080 	.word	0xffffc080
 80086c0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	78db      	ldrb	r3, [r3, #3]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d117      	bne.n	80086fc <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	18d3      	adds	r3, r2, r3
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	2062      	movs	r0, #98	; 0x62
 80086dc:	183b      	adds	r3, r7, r0
 80086de:	49c6      	ldr	r1, [pc, #792]	; (80089f8 <USB_ActivateEndpoint+0x6c4>)
 80086e0:	400a      	ands	r2, r1
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	18d3      	adds	r3, r2, r3
 80086ee:	183a      	adds	r2, r7, r0
 80086f0:	8812      	ldrh	r2, [r2, #0]
 80086f2:	49c2      	ldr	r1, [pc, #776]	; (80089fc <USB_ActivateEndpoint+0x6c8>)
 80086f4:	430a      	orrs	r2, r1
 80086f6:	b292      	uxth	r2, r2
 80086f8:	801a      	strh	r2, [r3, #0]
 80086fa:	e016      	b.n	800872a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	18d3      	adds	r3, r2, r3
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	b29a      	uxth	r2, r3
 800870a:	2064      	movs	r0, #100	; 0x64
 800870c:	183b      	adds	r3, r7, r0
 800870e:	49bc      	ldr	r1, [pc, #752]	; (8008a00 <USB_ActivateEndpoint+0x6cc>)
 8008710:	400a      	ands	r2, r1
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	18d3      	adds	r3, r2, r3
 800871e:	183a      	adds	r2, r7, r0
 8008720:	8812      	ldrh	r2, [r2, #0]
 8008722:	49b8      	ldr	r1, [pc, #736]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 8008724:	430a      	orrs	r2, r1
 8008726:	b292      	uxth	r2, r2
 8008728:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2250      	movs	r2, #80	; 0x50
 8008732:	5a9b      	ldrh	r3, [r3, r2]
 8008734:	b29b      	uxth	r3, r3
 8008736:	001a      	movs	r2, r3
 8008738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800873a:	189b      	adds	r3, r3, r2
 800873c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	00da      	lsls	r2, r3, #3
 8008744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	2280      	movs	r2, #128	; 0x80
 800874a:	00d2      	lsls	r2, r2, #3
 800874c:	4694      	mov	ip, r2
 800874e:	4463      	add	r3, ip
 8008750:	65bb      	str	r3, [r7, #88]	; 0x58
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	891b      	ldrh	r3, [r3, #8]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	b29b      	uxth	r3, r3
 800875a:	18db      	adds	r3, r3, r3
 800875c:	b29a      	uxth	r2, r3
 800875e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	657b      	str	r3, [r7, #84]	; 0x54
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2250      	movs	r2, #80	; 0x50
 800876a:	5a9b      	ldrh	r3, [r3, r2]
 800876c:	b29b      	uxth	r3, r3
 800876e:	001a      	movs	r2, r3
 8008770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008772:	189b      	adds	r3, r3, r2
 8008774:	657b      	str	r3, [r7, #84]	; 0x54
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	00da      	lsls	r2, r3, #3
 800877c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877e:	18d3      	adds	r3, r2, r3
 8008780:	4aa1      	ldr	r2, [pc, #644]	; (8008a08 <USB_ActivateEndpoint+0x6d4>)
 8008782:	4694      	mov	ip, r2
 8008784:	4463      	add	r3, ip
 8008786:	653b      	str	r3, [r7, #80]	; 0x50
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	895b      	ldrh	r3, [r3, #10]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	b29b      	uxth	r3, r3
 8008790:	18db      	adds	r3, r3, r3
 8008792:	b29a      	uxth	r2, r3
 8008794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008796:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d000      	beq.n	80087a2 <USB_ActivateEndpoint+0x46e>
 80087a0:	e087      	b.n	80088b2 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	18d2      	adds	r2, r2, r3
 80087ac:	2140      	movs	r1, #64	; 0x40
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	8812      	ldrh	r2, [r2, #0]
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	187b      	adds	r3, r7, r1
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	01db      	lsls	r3, r3, #7
 80087bc:	4013      	ands	r3, r2
 80087be:	d016      	beq.n	80087ee <USB_ActivateEndpoint+0x4ba>
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	18d3      	adds	r3, r2, r3
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	203e      	movs	r0, #62	; 0x3e
 80087d0:	183b      	adds	r3, r7, r0
 80087d2:	4989      	ldr	r1, [pc, #548]	; (80089f8 <USB_ActivateEndpoint+0x6c4>)
 80087d4:	400a      	ands	r2, r1
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	18d3      	adds	r3, r2, r3
 80087e2:	183a      	adds	r2, r7, r0
 80087e4:	8812      	ldrh	r2, [r2, #0]
 80087e6:	4989      	ldr	r1, [pc, #548]	; (8008a0c <USB_ActivateEndpoint+0x6d8>)
 80087e8:	430a      	orrs	r2, r1
 80087ea:	b292      	uxth	r2, r2
 80087ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	18d2      	adds	r2, r2, r3
 80087f8:	213c      	movs	r1, #60	; 0x3c
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	8812      	ldrh	r2, [r2, #0]
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	187b      	adds	r3, r7, r1
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	2240      	movs	r2, #64	; 0x40
 8008806:	4013      	ands	r3, r2
 8008808:	d016      	beq.n	8008838 <USB_ActivateEndpoint+0x504>
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	18d3      	adds	r3, r2, r3
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29a      	uxth	r2, r3
 8008818:	203a      	movs	r0, #58	; 0x3a
 800881a:	183b      	adds	r3, r7, r0
 800881c:	4976      	ldr	r1, [pc, #472]	; (80089f8 <USB_ActivateEndpoint+0x6c4>)
 800881e:	400a      	ands	r2, r1
 8008820:	801a      	strh	r2, [r3, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	183a      	adds	r2, r7, r0
 800882e:	8812      	ldrh	r2, [r2, #0]
 8008830:	4977      	ldr	r1, [pc, #476]	; (8008a10 <USB_ActivateEndpoint+0x6dc>)
 8008832:	430a      	orrs	r2, r1
 8008834:	b292      	uxth	r2, r2
 8008836:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	18d3      	adds	r3, r2, r3
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	2038      	movs	r0, #56	; 0x38
 8008848:	183b      	adds	r3, r7, r0
 800884a:	4972      	ldr	r1, [pc, #456]	; (8008a14 <USB_ActivateEndpoint+0x6e0>)
 800884c:	400a      	ands	r2, r1
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	183b      	adds	r3, r7, r0
 8008852:	183a      	adds	r2, r7, r0
 8008854:	8812      	ldrh	r2, [r2, #0]
 8008856:	2180      	movs	r1, #128	; 0x80
 8008858:	0149      	lsls	r1, r1, #5
 800885a:	404a      	eors	r2, r1
 800885c:	801a      	strh	r2, [r3, #0]
 800885e:	183b      	adds	r3, r7, r0
 8008860:	183a      	adds	r2, r7, r0
 8008862:	8812      	ldrh	r2, [r2, #0]
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	0189      	lsls	r1, r1, #6
 8008868:	404a      	eors	r2, r1
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	183a      	adds	r2, r7, r0
 8008878:	8812      	ldrh	r2, [r2, #0]
 800887a:	4962      	ldr	r1, [pc, #392]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 800887c:	430a      	orrs	r2, r1
 800887e:	b292      	uxth	r2, r2
 8008880:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	2036      	movs	r0, #54	; 0x36
 8008892:	183b      	adds	r3, r7, r0
 8008894:	4960      	ldr	r1, [pc, #384]	; (8008a18 <USB_ActivateEndpoint+0x6e4>)
 8008896:	400a      	ands	r2, r1
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	18d3      	adds	r3, r2, r3
 80088a4:	183a      	adds	r2, r7, r0
 80088a6:	8812      	ldrh	r2, [r2, #0]
 80088a8:	4956      	ldr	r1, [pc, #344]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 80088aa:	430a      	orrs	r2, r1
 80088ac:	b292      	uxth	r2, r2
 80088ae:	801a      	strh	r2, [r3, #0]
 80088b0:	e09a      	b.n	80089e8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	18d2      	adds	r2, r2, r3
 80088bc:	214e      	movs	r1, #78	; 0x4e
 80088be:	187b      	adds	r3, r7, r1
 80088c0:	8812      	ldrh	r2, [r2, #0]
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	187b      	adds	r3, r7, r1
 80088c6:	881a      	ldrh	r2, [r3, #0]
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	01db      	lsls	r3, r3, #7
 80088cc:	4013      	ands	r3, r2
 80088ce:	d016      	beq.n	80088fe <USB_ActivateEndpoint+0x5ca>
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	18d3      	adds	r3, r2, r3
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	204c      	movs	r0, #76	; 0x4c
 80088e0:	183b      	adds	r3, r7, r0
 80088e2:	4945      	ldr	r1, [pc, #276]	; (80089f8 <USB_ActivateEndpoint+0x6c4>)
 80088e4:	400a      	ands	r2, r1
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	18d3      	adds	r3, r2, r3
 80088f2:	183a      	adds	r2, r7, r0
 80088f4:	8812      	ldrh	r2, [r2, #0]
 80088f6:	4945      	ldr	r1, [pc, #276]	; (8008a0c <USB_ActivateEndpoint+0x6d8>)
 80088f8:	430a      	orrs	r2, r1
 80088fa:	b292      	uxth	r2, r2
 80088fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	18d2      	adds	r2, r2, r3
 8008908:	214a      	movs	r1, #74	; 0x4a
 800890a:	187b      	adds	r3, r7, r1
 800890c:	8812      	ldrh	r2, [r2, #0]
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	187b      	adds	r3, r7, r1
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	2240      	movs	r2, #64	; 0x40
 8008916:	4013      	ands	r3, r2
 8008918:	d016      	beq.n	8008948 <USB_ActivateEndpoint+0x614>
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	18d3      	adds	r3, r2, r3
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29a      	uxth	r2, r3
 8008928:	2048      	movs	r0, #72	; 0x48
 800892a:	183b      	adds	r3, r7, r0
 800892c:	4932      	ldr	r1, [pc, #200]	; (80089f8 <USB_ActivateEndpoint+0x6c4>)
 800892e:	400a      	ands	r2, r1
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	18d3      	adds	r3, r2, r3
 800893c:	183a      	adds	r2, r7, r0
 800893e:	8812      	ldrh	r2, [r2, #0]
 8008940:	4933      	ldr	r1, [pc, #204]	; (8008a10 <USB_ActivateEndpoint+0x6dc>)
 8008942:	430a      	orrs	r2, r1
 8008944:	b292      	uxth	r2, r2
 8008946:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	78db      	ldrb	r3, [r3, #3]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d01d      	beq.n	800898c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	18d3      	adds	r3, r2, r3
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29a      	uxth	r2, r3
 800895e:	2044      	movs	r0, #68	; 0x44
 8008960:	183b      	adds	r3, r7, r0
 8008962:	492d      	ldr	r1, [pc, #180]	; (8008a18 <USB_ActivateEndpoint+0x6e4>)
 8008964:	400a      	ands	r2, r1
 8008966:	801a      	strh	r2, [r3, #0]
 8008968:	183b      	adds	r3, r7, r0
 800896a:	183a      	adds	r2, r7, r0
 800896c:	8812      	ldrh	r2, [r2, #0]
 800896e:	2120      	movs	r1, #32
 8008970:	404a      	eors	r2, r1
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	18d3      	adds	r3, r2, r3
 800897e:	183a      	adds	r2, r7, r0
 8008980:	8812      	ldrh	r2, [r2, #0]
 8008982:	4920      	ldr	r1, [pc, #128]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 8008984:	430a      	orrs	r2, r1
 8008986:	b292      	uxth	r2, r2
 8008988:	801a      	strh	r2, [r3, #0]
 800898a:	e016      	b.n	80089ba <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29a      	uxth	r2, r3
 800899a:	2046      	movs	r0, #70	; 0x46
 800899c:	183b      	adds	r3, r7, r0
 800899e:	491e      	ldr	r1, [pc, #120]	; (8008a18 <USB_ActivateEndpoint+0x6e4>)
 80089a0:	400a      	ands	r2, r1
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	18d3      	adds	r3, r2, r3
 80089ae:	183a      	adds	r2, r7, r0
 80089b0:	8812      	ldrh	r2, [r2, #0]
 80089b2:	4914      	ldr	r1, [pc, #80]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 80089b4:	430a      	orrs	r2, r1
 80089b6:	b292      	uxth	r2, r2
 80089b8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	18d3      	adds	r3, r2, r3
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	2042      	movs	r0, #66	; 0x42
 80089ca:	183b      	adds	r3, r7, r0
 80089cc:	4911      	ldr	r1, [pc, #68]	; (8008a14 <USB_ActivateEndpoint+0x6e0>)
 80089ce:	400a      	ands	r2, r1
 80089d0:	801a      	strh	r2, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	18d3      	adds	r3, r2, r3
 80089dc:	183a      	adds	r2, r7, r0
 80089de:	8812      	ldrh	r2, [r2, #0]
 80089e0:	4908      	ldr	r1, [pc, #32]	; (8008a04 <USB_ActivateEndpoint+0x6d0>)
 80089e2:	430a      	orrs	r2, r1
 80089e4:	b292      	uxth	r2, r2
 80089e6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80089e8:	236f      	movs	r3, #111	; 0x6f
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	781b      	ldrb	r3, [r3, #0]
}
 80089ee:	0018      	movs	r0, r3
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b01c      	add	sp, #112	; 0x70
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	ffff8f8f 	.word	0xffff8f8f
 80089fc:	ffff8180 	.word	0xffff8180
 8008a00:	ffff8e8f 	.word	0xffff8e8f
 8008a04:	ffff8080 	.word	0xffff8080
 8008a08:	00000404 	.word	0x00000404
 8008a0c:	ffffc080 	.word	0xffffc080
 8008a10:	ffff80c0 	.word	0xffff80c0
 8008a14:	ffffbf8f 	.word	0xffffbf8f
 8008a18:	ffff8fbf 	.word	0xffff8fbf

08008a1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08c      	sub	sp, #48	; 0x30
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	7b1b      	ldrb	r3, [r3, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d000      	beq.n	8008a30 <USB_DeactivateEndpoint+0x14>
 8008a2e:	e07e      	b.n	8008b2e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d03c      	beq.n	8008ab2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	18d2      	adds	r2, r2, r3
 8008a42:	210c      	movs	r1, #12
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	8812      	ldrh	r2, [r2, #0]
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	4013      	ands	r3, r2
 8008a52:	d016      	beq.n	8008a82 <USB_DeactivateEndpoint+0x66>
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	18d3      	adds	r3, r2, r3
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	200a      	movs	r0, #10
 8008a64:	183b      	adds	r3, r7, r0
 8008a66:	49c7      	ldr	r1, [pc, #796]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008a68:	400a      	ands	r2, r1
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	18d3      	adds	r3, r2, r3
 8008a76:	183a      	adds	r2, r7, r0
 8008a78:	8812      	ldrh	r2, [r2, #0]
 8008a7a:	49c3      	ldr	r1, [pc, #780]	; (8008d88 <USB_DeactivateEndpoint+0x36c>)
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	b292      	uxth	r2, r2
 8008a80:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	18d3      	adds	r3, r2, r3
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	2008      	movs	r0, #8
 8008a92:	183b      	adds	r3, r7, r0
 8008a94:	49bd      	ldr	r1, [pc, #756]	; (8008d8c <USB_DeactivateEndpoint+0x370>)
 8008a96:	400a      	ands	r2, r1
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	18d3      	adds	r3, r2, r3
 8008aa4:	183a      	adds	r2, r7, r0
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	49b9      	ldr	r1, [pc, #740]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	b292      	uxth	r2, r2
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	e163      	b.n	8008d7a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	18d2      	adds	r2, r2, r3
 8008abc:	2112      	movs	r1, #18
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	8812      	ldrh	r2, [r2, #0]
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	187b      	adds	r3, r7, r1
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	01db      	lsls	r3, r3, #7
 8008acc:	4013      	ands	r3, r2
 8008ace:	d016      	beq.n	8008afe <USB_DeactivateEndpoint+0xe2>
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	18d3      	adds	r3, r2, r3
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	2010      	movs	r0, #16
 8008ae0:	183b      	adds	r3, r7, r0
 8008ae2:	49a8      	ldr	r1, [pc, #672]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008ae4:	400a      	ands	r2, r1
 8008ae6:	801a      	strh	r2, [r3, #0]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	183a      	adds	r2, r7, r0
 8008af4:	8812      	ldrh	r2, [r2, #0]
 8008af6:	49a7      	ldr	r1, [pc, #668]	; (8008d94 <USB_DeactivateEndpoint+0x378>)
 8008af8:	430a      	orrs	r2, r1
 8008afa:	b292      	uxth	r2, r2
 8008afc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	18d3      	adds	r3, r2, r3
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	200e      	movs	r0, #14
 8008b0e:	183b      	adds	r3, r7, r0
 8008b10:	49a1      	ldr	r1, [pc, #644]	; (8008d98 <USB_DeactivateEndpoint+0x37c>)
 8008b12:	400a      	ands	r2, r1
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	18d3      	adds	r3, r2, r3
 8008b20:	183a      	adds	r2, r7, r0
 8008b22:	8812      	ldrh	r2, [r2, #0]
 8008b24:	499a      	ldr	r1, [pc, #616]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008b26:	430a      	orrs	r2, r1
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	e125      	b.n	8008d7a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d000      	beq.n	8008b38 <USB_DeactivateEndpoint+0x11c>
 8008b36:	e090      	b.n	8008c5a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	18d2      	adds	r2, r2, r3
 8008b42:	2120      	movs	r1, #32
 8008b44:	187b      	adds	r3, r7, r1
 8008b46:	8812      	ldrh	r2, [r2, #0]
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	881a      	ldrh	r2, [r3, #0]
 8008b4e:	2380      	movs	r3, #128	; 0x80
 8008b50:	01db      	lsls	r3, r3, #7
 8008b52:	4013      	ands	r3, r2
 8008b54:	d016      	beq.n	8008b84 <USB_DeactivateEndpoint+0x168>
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	201e      	movs	r0, #30
 8008b66:	183b      	adds	r3, r7, r0
 8008b68:	4986      	ldr	r1, [pc, #536]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008b6a:	400a      	ands	r2, r1
 8008b6c:	801a      	strh	r2, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	183a      	adds	r2, r7, r0
 8008b7a:	8812      	ldrh	r2, [r2, #0]
 8008b7c:	4985      	ldr	r1, [pc, #532]	; (8008d94 <USB_DeactivateEndpoint+0x378>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	b292      	uxth	r2, r2
 8008b82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	18d2      	adds	r2, r2, r3
 8008b8e:	211c      	movs	r1, #28
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	8812      	ldrh	r2, [r2, #0]
 8008b94:	801a      	strh	r2, [r3, #0]
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	2240      	movs	r2, #64	; 0x40
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	d016      	beq.n	8008bce <USB_DeactivateEndpoint+0x1b2>
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	18d3      	adds	r3, r2, r3
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	201a      	movs	r0, #26
 8008bb0:	183b      	adds	r3, r7, r0
 8008bb2:	4974      	ldr	r1, [pc, #464]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008bb4:	400a      	ands	r2, r1
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	183a      	adds	r2, r7, r0
 8008bc4:	8812      	ldrh	r2, [r2, #0]
 8008bc6:	4970      	ldr	r1, [pc, #448]	; (8008d88 <USB_DeactivateEndpoint+0x36c>)
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	b292      	uxth	r2, r2
 8008bcc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	2018      	movs	r0, #24
 8008bde:	183b      	adds	r3, r7, r0
 8008be0:	4968      	ldr	r1, [pc, #416]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008be2:	400a      	ands	r2, r1
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	183a      	adds	r2, r7, r0
 8008bf2:	8812      	ldrh	r2, [r2, #0]
 8008bf4:	4964      	ldr	r1, [pc, #400]	; (8008d88 <USB_DeactivateEndpoint+0x36c>)
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	18d3      	adds	r3, r2, r3
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	2016      	movs	r0, #22
 8008c0c:	183b      	adds	r3, r7, r0
 8008c0e:	4962      	ldr	r1, [pc, #392]	; (8008d98 <USB_DeactivateEndpoint+0x37c>)
 8008c10:	400a      	ands	r2, r1
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	183a      	adds	r2, r7, r0
 8008c20:	8812      	ldrh	r2, [r2, #0]
 8008c22:	495b      	ldr	r1, [pc, #364]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008c24:	430a      	orrs	r2, r1
 8008c26:	b292      	uxth	r2, r2
 8008c28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	18d3      	adds	r3, r2, r3
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	2014      	movs	r0, #20
 8008c3a:	183b      	adds	r3, r7, r0
 8008c3c:	4953      	ldr	r1, [pc, #332]	; (8008d8c <USB_DeactivateEndpoint+0x370>)
 8008c3e:	400a      	ands	r2, r1
 8008c40:	801a      	strh	r2, [r3, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	18d3      	adds	r3, r2, r3
 8008c4c:	183a      	adds	r2, r7, r0
 8008c4e:	8812      	ldrh	r2, [r2, #0]
 8008c50:	494f      	ldr	r1, [pc, #316]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008c52:	430a      	orrs	r2, r1
 8008c54:	b292      	uxth	r2, r2
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	e08f      	b.n	8008d7a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	18d2      	adds	r2, r2, r3
 8008c64:	212e      	movs	r1, #46	; 0x2e
 8008c66:	187b      	adds	r3, r7, r1
 8008c68:	8812      	ldrh	r2, [r2, #0]
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	187b      	adds	r3, r7, r1
 8008c6e:	881a      	ldrh	r2, [r3, #0]
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	01db      	lsls	r3, r3, #7
 8008c74:	4013      	ands	r3, r2
 8008c76:	d016      	beq.n	8008ca6 <USB_DeactivateEndpoint+0x28a>
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	18d3      	adds	r3, r2, r3
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	202c      	movs	r0, #44	; 0x2c
 8008c88:	183b      	adds	r3, r7, r0
 8008c8a:	493e      	ldr	r1, [pc, #248]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008c8c:	400a      	ands	r2, r1
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	18d3      	adds	r3, r2, r3
 8008c9a:	183a      	adds	r2, r7, r0
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	493d      	ldr	r1, [pc, #244]	; (8008d94 <USB_DeactivateEndpoint+0x378>)
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	b292      	uxth	r2, r2
 8008ca4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	18d2      	adds	r2, r2, r3
 8008cb0:	212a      	movs	r1, #42	; 0x2a
 8008cb2:	187b      	adds	r3, r7, r1
 8008cb4:	8812      	ldrh	r2, [r2, #0]
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2240      	movs	r2, #64	; 0x40
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	d016      	beq.n	8008cf0 <USB_DeactivateEndpoint+0x2d4>
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	18d3      	adds	r3, r2, r3
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	2028      	movs	r0, #40	; 0x28
 8008cd2:	183b      	adds	r3, r7, r0
 8008cd4:	492b      	ldr	r1, [pc, #172]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008cd6:	400a      	ands	r2, r1
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	18d3      	adds	r3, r2, r3
 8008ce4:	183a      	adds	r2, r7, r0
 8008ce6:	8812      	ldrh	r2, [r2, #0]
 8008ce8:	4927      	ldr	r1, [pc, #156]	; (8008d88 <USB_DeactivateEndpoint+0x36c>)
 8008cea:	430a      	orrs	r2, r1
 8008cec:	b292      	uxth	r2, r2
 8008cee:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	18d3      	adds	r3, r2, r3
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	2026      	movs	r0, #38	; 0x26
 8008d00:	183b      	adds	r3, r7, r0
 8008d02:	4920      	ldr	r1, [pc, #128]	; (8008d84 <USB_DeactivateEndpoint+0x368>)
 8008d04:	400a      	ands	r2, r1
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	183a      	adds	r2, r7, r0
 8008d14:	8812      	ldrh	r2, [r2, #0]
 8008d16:	491f      	ldr	r1, [pc, #124]	; (8008d94 <USB_DeactivateEndpoint+0x378>)
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	18d3      	adds	r3, r2, r3
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	2024      	movs	r0, #36	; 0x24
 8008d2e:	183b      	adds	r3, r7, r0
 8008d30:	4916      	ldr	r1, [pc, #88]	; (8008d8c <USB_DeactivateEndpoint+0x370>)
 8008d32:	400a      	ands	r2, r1
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	18d3      	adds	r3, r2, r3
 8008d40:	183a      	adds	r2, r7, r0
 8008d42:	8812      	ldrh	r2, [r2, #0]
 8008d44:	4912      	ldr	r1, [pc, #72]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008d46:	430a      	orrs	r2, r1
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	18d3      	adds	r3, r2, r3
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	2022      	movs	r0, #34	; 0x22
 8008d5c:	183b      	adds	r3, r7, r0
 8008d5e:	490e      	ldr	r1, [pc, #56]	; (8008d98 <USB_DeactivateEndpoint+0x37c>)
 8008d60:	400a      	ands	r2, r1
 8008d62:	801a      	strh	r2, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	18d3      	adds	r3, r2, r3
 8008d6e:	183a      	adds	r2, r7, r0
 8008d70:	8812      	ldrh	r2, [r2, #0]
 8008d72:	4907      	ldr	r1, [pc, #28]	; (8008d90 <USB_DeactivateEndpoint+0x374>)
 8008d74:	430a      	orrs	r2, r1
 8008d76:	b292      	uxth	r2, r2
 8008d78:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b00c      	add	sp, #48	; 0x30
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	ffff8f8f 	.word	0xffff8f8f
 8008d88:	ffff80c0 	.word	0xffff80c0
 8008d8c:	ffff8fbf 	.word	0xffff8fbf
 8008d90:	ffff8080 	.word	0xffff8080
 8008d94:	ffffc080 	.word	0xffffc080
 8008d98:	ffffbf8f 	.word	0xffffbf8f

08008d9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b0c3      	sub	sp, #268	; 0x10c
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d001      	beq.n	8008db2 <USB_EPStartXfer+0x16>
 8008dae:	f000 fcef 	bl	8009790 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d905      	bls.n	8008dca <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	1d7a      	adds	r2, r7, #5
 8008dc4:	32ff      	adds	r2, #255	; 0xff
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e004      	b.n	8008dd4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	1d7a      	adds	r2, r7, #5
 8008dd0:	32ff      	adds	r2, #255	; 0xff
 8008dd2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	7b1b      	ldrb	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d125      	bne.n	8008e28 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6959      	ldr	r1, [r3, #20]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	88da      	ldrh	r2, [r3, #6]
 8008de4:	1d7b      	adds	r3, r7, #5
 8008de6:	33ff      	adds	r3, #255	; 0xff
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f9c9 	bl	800a184 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2250      	movs	r2, #80	; 0x50
 8008dfa:	5a9b      	ldrh	r3, [r3, r2]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	001a      	movs	r2, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	00da      	lsls	r2, r3, #3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	18d3      	adds	r3, r2, r3
 8008e10:	4acc      	ldr	r2, [pc, #816]	; (8009144 <USB_EPStartXfer+0x3a8>)
 8008e12:	4694      	mov	ip, r2
 8008e14:	4463      	add	r3, ip
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	1d7b      	adds	r3, r7, #5
 8008e1a:	33ff      	adds	r3, #255	; 0xff
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	f000 fc8f 	bl	8009746 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	78db      	ldrb	r3, [r3, #3]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d000      	beq.n	8008e32 <USB_EPStartXfer+0x96>
 8008e30:	e33a      	b.n	80094a8 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	6a1a      	ldr	r2, [r3, #32]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d800      	bhi.n	8008e40 <USB_EPStartXfer+0xa4>
 8008e3e:	e2df      	b.n	8009400 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	18d3      	adds	r3, r2, r3
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	2056      	movs	r0, #86	; 0x56
 8008e50:	183b      	adds	r3, r7, r0
 8008e52:	49bd      	ldr	r1, [pc, #756]	; (8009148 <USB_EPStartXfer+0x3ac>)
 8008e54:	400a      	ands	r2, r1
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	18d3      	adds	r3, r2, r3
 8008e62:	183a      	adds	r2, r7, r0
 8008e64:	8812      	ldrh	r2, [r2, #0]
 8008e66:	49b9      	ldr	r1, [pc, #740]	; (800914c <USB_EPStartXfer+0x3b0>)
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	b292      	uxth	r2, r2
 8008e6c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6a1a      	ldr	r2, [r3, #32]
 8008e72:	1d7b      	adds	r3, r7, #5
 8008e74:	33ff      	adds	r3, #255	; 0xff
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	1ad2      	subs	r2, r2, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	18d3      	adds	r3, r2, r3
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	4013      	ands	r3, r2
 8008e92:	d100      	bne.n	8008e96 <USB_EPStartXfer+0xfa>
 8008e94:	e162      	b.n	800915c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d16a      	bne.n	8008f78 <USB_EPStartXfer+0x1dc>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2250      	movs	r2, #80	; 0x50
 8008eaa:	5a9b      	ldrh	r3, [r3, r2]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	001a      	movs	r2, r3
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	189b      	adds	r3, r3, r2
 8008eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	00da      	lsls	r2, r3, #3
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	18d3      	adds	r3, r2, r3
 8008ec0:	4aa3      	ldr	r2, [pc, #652]	; (8009150 <USB_EPStartXfer+0x3b4>)
 8008ec2:	4694      	mov	ip, r2
 8008ec4:	4463      	add	r3, ip
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec8:	1d7b      	adds	r3, r7, #5
 8008eca:	33ff      	adds	r3, #255	; 0xff
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d110      	bne.n	8008ef4 <USB_EPStartXfer+0x158>
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4a9e      	ldr	r2, [pc, #632]	; (8009154 <USB_EPStartXfer+0x3b8>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	801a      	strh	r2, [r3, #0]
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	4a9b      	ldr	r2, [pc, #620]	; (8009158 <USB_EPStartXfer+0x3bc>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e05c      	b.n	8008fae <USB_EPStartXfer+0x212>
 8008ef4:	1d7b      	adds	r3, r7, #5
 8008ef6:	33ff      	adds	r3, #255	; 0xff
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b3e      	cmp	r3, #62	; 0x3e
 8008efc:	d81c      	bhi.n	8008f38 <USB_EPStartXfer+0x19c>
 8008efe:	1d7b      	adds	r3, r7, #5
 8008f00:	33ff      	adds	r3, #255	; 0xff
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	1c7a      	adds	r2, r7, #1
 8008f08:	32ff      	adds	r2, #255	; 0xff
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	1d7b      	adds	r3, r7, #5
 8008f0e:	33ff      	adds	r3, #255	; 0xff
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2201      	movs	r2, #1
 8008f14:	4013      	ands	r3, r2
 8008f16:	d006      	beq.n	8008f26 <USB_EPStartXfer+0x18a>
 8008f18:	1c7b      	adds	r3, r7, #1
 8008f1a:	33ff      	adds	r3, #255	; 0xff
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	1c7a      	adds	r2, r7, #1
 8008f22:	32ff      	adds	r2, #255	; 0xff
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	1c7b      	adds	r3, r7, #1
 8008f28:	33ff      	adds	r3, #255	; 0xff
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	029b      	lsls	r3, r3, #10
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e03a      	b.n	8008fae <USB_EPStartXfer+0x212>
 8008f38:	1d7b      	adds	r3, r7, #5
 8008f3a:	33ff      	adds	r3, #255	; 0xff
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	1c7a      	adds	r2, r7, #1
 8008f42:	32ff      	adds	r2, #255	; 0xff
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	1d7b      	adds	r3, r7, #5
 8008f48:	33ff      	adds	r3, #255	; 0xff
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	221f      	movs	r2, #31
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d106      	bne.n	8008f60 <USB_EPStartXfer+0x1c4>
 8008f52:	1c7b      	adds	r3, r7, #1
 8008f54:	33ff      	adds	r3, #255	; 0xff
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	1c7a      	adds	r2, r7, #1
 8008f5c:	32ff      	adds	r2, #255	; 0xff
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	1c7b      	adds	r3, r7, #1
 8008f62:	33ff      	adds	r3, #255	; 0xff
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	029b      	lsls	r3, r3, #10
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4a7a      	ldr	r2, [pc, #488]	; (8009158 <USB_EPStartXfer+0x3bc>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	e01a      	b.n	8008fae <USB_EPStartXfer+0x212>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	785b      	ldrb	r3, [r3, #1]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d116      	bne.n	8008fae <USB_EPStartXfer+0x212>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2250      	movs	r2, #80	; 0x50
 8008f84:	5a9b      	ldrh	r3, [r3, r2]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	001a      	movs	r2, r3
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	189b      	adds	r3, r3, r2
 8008f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	00da      	lsls	r2, r3, #3
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	18d3      	adds	r3, r2, r3
 8008f9a:	4a6d      	ldr	r2, [pc, #436]	; (8009150 <USB_EPStartXfer+0x3b4>)
 8008f9c:	4694      	mov	ip, r2
 8008f9e:	4463      	add	r3, ip
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa2:	1d7b      	adds	r3, r7, #5
 8008fa4:	33ff      	adds	r3, #255	; 0xff
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008fae:	2076      	movs	r0, #118	; 0x76
 8008fb0:	183b      	adds	r3, r7, r0
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	8952      	ldrh	r2, [r2, #10]
 8008fb6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6959      	ldr	r1, [r3, #20]
 8008fbc:	1d7b      	adds	r3, r7, #5
 8008fbe:	33ff      	adds	r3, #255	; 0xff
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	b29c      	uxth	r4, r3
 8008fc4:	183b      	adds	r3, r7, r0
 8008fc6:	881a      	ldrh	r2, [r3, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	0023      	movs	r3, r4
 8008fcc:	f001 f8da 	bl	800a184 <USB_WritePMA>
            ep->xfer_buff += len;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	1d7b      	adds	r3, r7, #5
 8008fd6:	33ff      	adds	r3, #255	; 0xff
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	18d2      	adds	r2, r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	6a1a      	ldr	r2, [r3, #32]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d908      	bls.n	8008ffe <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	1d7b      	adds	r3, r7, #5
 8008ff2:	33ff      	adds	r3, #255	; 0xff
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	1ad2      	subs	r2, r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	621a      	str	r2, [r3, #32]
 8008ffc:	e007      	b.n	800900e <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	1d7a      	adds	r2, r7, #5
 8009004:	32ff      	adds	r2, #255	; 0xff
 8009006:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d166      	bne.n	80090e4 <USB_EPStartXfer+0x348>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2250      	movs	r2, #80	; 0x50
 800901e:	5a9b      	ldrh	r3, [r3, r2]
 8009020:	b29b      	uxth	r3, r3
 8009022:	001a      	movs	r2, r3
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	189b      	adds	r3, r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	00da      	lsls	r2, r3, #3
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	18d3      	adds	r3, r2, r3
 8009034:	4a43      	ldr	r2, [pc, #268]	; (8009144 <USB_EPStartXfer+0x3a8>)
 8009036:	4694      	mov	ip, r2
 8009038:	4463      	add	r3, ip
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	1d7b      	adds	r3, r7, #5
 800903e:	33ff      	adds	r3, #255	; 0xff
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d110      	bne.n	8009068 <USB_EPStartXfer+0x2cc>
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	4a41      	ldr	r2, [pc, #260]	; (8009154 <USB_EPStartXfer+0x3b8>)
 800904e:	4013      	ands	r3, r2
 8009050:	b29a      	uxth	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	4a3e      	ldr	r2, [pc, #248]	; (8009158 <USB_EPStartXfer+0x3bc>)
 800905e:	4313      	orrs	r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	e05a      	b.n	800911e <USB_EPStartXfer+0x382>
 8009068:	1d7b      	adds	r3, r7, #5
 800906a:	33ff      	adds	r3, #255	; 0xff
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b3e      	cmp	r3, #62	; 0x3e
 8009070:	d81a      	bhi.n	80090a8 <USB_EPStartXfer+0x30c>
 8009072:	1d7b      	adds	r3, r7, #5
 8009074:	33ff      	adds	r3, #255	; 0xff
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	21fc      	movs	r1, #252	; 0xfc
 800907c:	187a      	adds	r2, r7, r1
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	1d7b      	adds	r3, r7, #5
 8009082:	33ff      	adds	r3, #255	; 0xff
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	4013      	ands	r3, r2
 800908a:	d004      	beq.n	8009096 <USB_EPStartXfer+0x2fa>
 800908c:	187b      	adds	r3, r7, r1
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	187a      	adds	r2, r7, r1
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	23fc      	movs	r3, #252	; 0xfc
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	029b      	lsls	r3, r3, #10
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	e03a      	b.n	800911e <USB_EPStartXfer+0x382>
 80090a8:	1d7b      	adds	r3, r7, #5
 80090aa:	33ff      	adds	r3, #255	; 0xff
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	21fc      	movs	r1, #252	; 0xfc
 80090b2:	187a      	adds	r2, r7, r1
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	1d7b      	adds	r3, r7, #5
 80090b8:	33ff      	adds	r3, #255	; 0xff
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	221f      	movs	r2, #31
 80090be:	4013      	ands	r3, r2
 80090c0:	d104      	bne.n	80090cc <USB_EPStartXfer+0x330>
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	187a      	adds	r2, r7, r1
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	23fc      	movs	r3, #252	; 0xfc
 80090ce:	18fb      	adds	r3, r7, r3
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	029b      	lsls	r3, r3, #10
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <USB_EPStartXfer+0x3bc>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	b29a      	uxth	r2, r3
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	e01c      	b.n	800911e <USB_EPStartXfer+0x382>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d118      	bne.n	800911e <USB_EPStartXfer+0x382>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	623b      	str	r3, [r7, #32]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2250      	movs	r2, #80	; 0x50
 80090f4:	5a9b      	ldrh	r3, [r3, r2]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	001a      	movs	r2, r3
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	189b      	adds	r3, r3, r2
 80090fe:	623b      	str	r3, [r7, #32]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	00da      	lsls	r2, r3, #3
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	18d3      	adds	r3, r2, r3
 800910a:	4a0e      	ldr	r2, [pc, #56]	; (8009144 <USB_EPStartXfer+0x3a8>)
 800910c:	4694      	mov	ip, r2
 800910e:	4463      	add	r3, ip
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	1d7b      	adds	r3, r7, #5
 8009114:	33ff      	adds	r3, #255	; 0xff
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800911e:	2076      	movs	r0, #118	; 0x76
 8009120:	183b      	adds	r3, r7, r0
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	8912      	ldrh	r2, [r2, #8]
 8009126:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	6959      	ldr	r1, [r3, #20]
 800912c:	1d7b      	adds	r3, r7, #5
 800912e:	33ff      	adds	r3, #255	; 0xff
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	b29c      	uxth	r4, r3
 8009134:	183b      	adds	r3, r7, r0
 8009136:	881a      	ldrh	r2, [r3, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	0023      	movs	r3, r4
 800913c:	f001 f822 	bl	800a184 <USB_WritePMA>
 8009140:	e301      	b.n	8009746 <USB_EPStartXfer+0x9aa>
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	00000402 	.word	0x00000402
 8009148:	ffff8f8f 	.word	0xffff8f8f
 800914c:	ffff8180 	.word	0xffff8180
 8009150:	00000406 	.word	0x00000406
 8009154:	ffff83ff 	.word	0xffff83ff
 8009158:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d166      	bne.n	8009232 <USB_EPStartXfer+0x496>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	64bb      	str	r3, [r7, #72]	; 0x48
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2250      	movs	r2, #80	; 0x50
 800916c:	5a9b      	ldrh	r3, [r3, r2]
 800916e:	b29b      	uxth	r3, r3
 8009170:	001a      	movs	r2, r3
 8009172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009174:	189b      	adds	r3, r3, r2
 8009176:	64bb      	str	r3, [r7, #72]	; 0x48
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	00da      	lsls	r2, r3, #3
 800917e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009180:	18d3      	adds	r3, r2, r3
 8009182:	4ac3      	ldr	r2, [pc, #780]	; (8009490 <USB_EPStartXfer+0x6f4>)
 8009184:	4694      	mov	ip, r2
 8009186:	4463      	add	r3, ip
 8009188:	647b      	str	r3, [r7, #68]	; 0x44
 800918a:	1d7b      	adds	r3, r7, #5
 800918c:	33ff      	adds	r3, #255	; 0xff
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d110      	bne.n	80091b6 <USB_EPStartXfer+0x41a>
 8009194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	b29b      	uxth	r3, r3
 800919a:	4abe      	ldr	r2, [pc, #760]	; (8009494 <USB_EPStartXfer+0x6f8>)
 800919c:	4013      	ands	r3, r2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a2:	801a      	strh	r2, [r3, #0]
 80091a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4abb      	ldr	r2, [pc, #748]	; (8009498 <USB_EPStartXfer+0x6fc>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e05a      	b.n	800926c <USB_EPStartXfer+0x4d0>
 80091b6:	1d7b      	adds	r3, r7, #5
 80091b8:	33ff      	adds	r3, #255	; 0xff
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b3e      	cmp	r3, #62	; 0x3e
 80091be:	d81a      	bhi.n	80091f6 <USB_EPStartXfer+0x45a>
 80091c0:	1d7b      	adds	r3, r7, #5
 80091c2:	33ff      	adds	r3, #255	; 0xff
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	21f8      	movs	r1, #248	; 0xf8
 80091ca:	187a      	adds	r2, r7, r1
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	1d7b      	adds	r3, r7, #5
 80091d0:	33ff      	adds	r3, #255	; 0xff
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2201      	movs	r2, #1
 80091d6:	4013      	ands	r3, r2
 80091d8:	d004      	beq.n	80091e4 <USB_EPStartXfer+0x448>
 80091da:	187b      	adds	r3, r7, r1
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	187a      	adds	r2, r7, r1
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	23f8      	movs	r3, #248	; 0xf8
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	e03a      	b.n	800926c <USB_EPStartXfer+0x4d0>
 80091f6:	1d7b      	adds	r3, r7, #5
 80091f8:	33ff      	adds	r3, #255	; 0xff
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	095b      	lsrs	r3, r3, #5
 80091fe:	21f8      	movs	r1, #248	; 0xf8
 8009200:	187a      	adds	r2, r7, r1
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	1d7b      	adds	r3, r7, #5
 8009206:	33ff      	adds	r3, #255	; 0xff
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	221f      	movs	r2, #31
 800920c:	4013      	ands	r3, r2
 800920e:	d104      	bne.n	800921a <USB_EPStartXfer+0x47e>
 8009210:	187b      	adds	r3, r7, r1
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3b01      	subs	r3, #1
 8009216:	187a      	adds	r2, r7, r1
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	23f8      	movs	r3, #248	; 0xf8
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	029b      	lsls	r3, r3, #10
 8009224:	b29b      	uxth	r3, r3
 8009226:	4a9c      	ldr	r2, [pc, #624]	; (8009498 <USB_EPStartXfer+0x6fc>)
 8009228:	4313      	orrs	r3, r2
 800922a:	b29a      	uxth	r2, r3
 800922c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	e01c      	b.n	800926c <USB_EPStartXfer+0x4d0>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d118      	bne.n	800926c <USB_EPStartXfer+0x4d0>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	653b      	str	r3, [r7, #80]	; 0x50
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2250      	movs	r2, #80	; 0x50
 8009242:	5a9b      	ldrh	r3, [r3, r2]
 8009244:	b29b      	uxth	r3, r3
 8009246:	001a      	movs	r2, r3
 8009248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924a:	189b      	adds	r3, r3, r2
 800924c:	653b      	str	r3, [r7, #80]	; 0x50
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	00da      	lsls	r2, r3, #3
 8009254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	4a8d      	ldr	r2, [pc, #564]	; (8009490 <USB_EPStartXfer+0x6f4>)
 800925a:	4694      	mov	ip, r2
 800925c:	4463      	add	r3, ip
 800925e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009260:	1d7b      	adds	r3, r7, #5
 8009262:	33ff      	adds	r3, #255	; 0xff
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	b29a      	uxth	r2, r3
 8009268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800926c:	2076      	movs	r0, #118	; 0x76
 800926e:	183b      	adds	r3, r7, r0
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	8912      	ldrh	r2, [r2, #8]
 8009274:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6959      	ldr	r1, [r3, #20]
 800927a:	1d7b      	adds	r3, r7, #5
 800927c:	33ff      	adds	r3, #255	; 0xff
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	b29c      	uxth	r4, r3
 8009282:	183b      	adds	r3, r7, r0
 8009284:	881a      	ldrh	r2, [r3, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	0023      	movs	r3, r4
 800928a:	f000 ff7b 	bl	800a184 <USB_WritePMA>
            ep->xfer_buff += len;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	695a      	ldr	r2, [r3, #20]
 8009292:	1d7b      	adds	r3, r7, #5
 8009294:	33ff      	adds	r3, #255	; 0xff
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	18d2      	adds	r2, r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6a1a      	ldr	r2, [r3, #32]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d908      	bls.n	80092bc <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6a1a      	ldr	r2, [r3, #32]
 80092ae:	1d7b      	adds	r3, r7, #5
 80092b0:	33ff      	adds	r3, #255	; 0xff
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	1ad2      	subs	r2, r2, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	621a      	str	r2, [r3, #32]
 80092ba:	e007      	b.n	80092cc <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	1d7a      	adds	r2, r7, #5
 80092c2:	32ff      	adds	r2, #255	; 0xff
 80092c4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2200      	movs	r2, #0
 80092ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	643b      	str	r3, [r7, #64]	; 0x40
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d166      	bne.n	80093a6 <USB_EPStartXfer+0x60a>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2250      	movs	r2, #80	; 0x50
 80092e0:	5a9b      	ldrh	r3, [r3, r2]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	001a      	movs	r2, r3
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	189b      	adds	r3, r3, r2
 80092ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00da      	lsls	r2, r3, #3
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	4a69      	ldr	r2, [pc, #420]	; (800949c <USB_EPStartXfer+0x700>)
 80092f8:	4694      	mov	ip, r2
 80092fa:	4463      	add	r3, ip
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
 80092fe:	1d7b      	adds	r3, r7, #5
 8009300:	33ff      	adds	r3, #255	; 0xff
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <USB_EPStartXfer+0x58e>
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	4a61      	ldr	r2, [pc, #388]	; (8009494 <USB_EPStartXfer+0x6f8>)
 8009310:	4013      	ands	r3, r2
 8009312:	b29a      	uxth	r2, r3
 8009314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	4a5e      	ldr	r2, [pc, #376]	; (8009498 <USB_EPStartXfer+0x6fc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	e058      	b.n	80093dc <USB_EPStartXfer+0x640>
 800932a:	1d7b      	adds	r3, r7, #5
 800932c:	33ff      	adds	r3, #255	; 0xff
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b3e      	cmp	r3, #62	; 0x3e
 8009332:	d81a      	bhi.n	800936a <USB_EPStartXfer+0x5ce>
 8009334:	1d7b      	adds	r3, r7, #5
 8009336:	33ff      	adds	r3, #255	; 0xff
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	21f4      	movs	r1, #244	; 0xf4
 800933e:	187a      	adds	r2, r7, r1
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	1d7b      	adds	r3, r7, #5
 8009344:	33ff      	adds	r3, #255	; 0xff
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2201      	movs	r2, #1
 800934a:	4013      	ands	r3, r2
 800934c:	d004      	beq.n	8009358 <USB_EPStartXfer+0x5bc>
 800934e:	187b      	adds	r3, r7, r1
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	187a      	adds	r2, r7, r1
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	23f4      	movs	r3, #244	; 0xf4
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29a      	uxth	r2, r3
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	e038      	b.n	80093dc <USB_EPStartXfer+0x640>
 800936a:	1d7b      	adds	r3, r7, #5
 800936c:	33ff      	adds	r3, #255	; 0xff
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	095b      	lsrs	r3, r3, #5
 8009372:	21f4      	movs	r1, #244	; 0xf4
 8009374:	187a      	adds	r2, r7, r1
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	1d7b      	adds	r3, r7, #5
 800937a:	33ff      	adds	r3, #255	; 0xff
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	221f      	movs	r2, #31
 8009380:	4013      	ands	r3, r2
 8009382:	d104      	bne.n	800938e <USB_EPStartXfer+0x5f2>
 8009384:	187b      	adds	r3, r7, r1
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3b01      	subs	r3, #1
 800938a:	187a      	adds	r2, r7, r1
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	23f4      	movs	r3, #244	; 0xf4
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	029b      	lsls	r3, r3, #10
 8009398:	b29b      	uxth	r3, r3
 800939a:	4a3f      	ldr	r2, [pc, #252]	; (8009498 <USB_EPStartXfer+0x6fc>)
 800939c:	4313      	orrs	r3, r2
 800939e:	b29a      	uxth	r2, r3
 80093a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	e01a      	b.n	80093dc <USB_EPStartXfer+0x640>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d116      	bne.n	80093dc <USB_EPStartXfer+0x640>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2250      	movs	r2, #80	; 0x50
 80093b2:	5a9b      	ldrh	r3, [r3, r2]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	001a      	movs	r2, r3
 80093b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ba:	189b      	adds	r3, r3, r2
 80093bc:	643b      	str	r3, [r7, #64]	; 0x40
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	00da      	lsls	r2, r3, #3
 80093c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	4a34      	ldr	r2, [pc, #208]	; (800949c <USB_EPStartXfer+0x700>)
 80093ca:	4694      	mov	ip, r2
 80093cc:	4463      	add	r3, ip
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d0:	1d7b      	adds	r3, r7, #5
 80093d2:	33ff      	adds	r3, #255	; 0xff
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093dc:	2076      	movs	r0, #118	; 0x76
 80093de:	183b      	adds	r3, r7, r0
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	8952      	ldrh	r2, [r2, #10]
 80093e4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	6959      	ldr	r1, [r3, #20]
 80093ea:	1d7b      	adds	r3, r7, #5
 80093ec:	33ff      	adds	r3, #255	; 0xff
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b29c      	uxth	r4, r3
 80093f2:	183b      	adds	r3, r7, r0
 80093f4:	881a      	ldrh	r2, [r3, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	0023      	movs	r3, r4
 80093fa:	f000 fec3 	bl	800a184 <USB_WritePMA>
 80093fe:	e1a2      	b.n	8009746 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	1d7a      	adds	r2, r7, #5
 8009406:	32ff      	adds	r2, #255	; 0xff
 8009408:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	18d3      	adds	r3, r2, r3
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29a      	uxth	r2, r3
 8009418:	2062      	movs	r0, #98	; 0x62
 800941a:	183b      	adds	r3, r7, r0
 800941c:	4920      	ldr	r1, [pc, #128]	; (80094a0 <USB_EPStartXfer+0x704>)
 800941e:	400a      	ands	r2, r1
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	183a      	adds	r2, r7, r0
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	491c      	ldr	r1, [pc, #112]	; (80094a4 <USB_EPStartXfer+0x708>)
 8009432:	430a      	orrs	r2, r1
 8009434:	b292      	uxth	r2, r2
 8009436:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2250      	movs	r2, #80	; 0x50
 8009440:	5a9b      	ldrh	r3, [r3, r2]
 8009442:	b29b      	uxth	r3, r3
 8009444:	001a      	movs	r2, r3
 8009446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009448:	189b      	adds	r3, r3, r2
 800944a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	00da      	lsls	r2, r3, #3
 8009452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009454:	18d3      	adds	r3, r2, r3
 8009456:	4a0e      	ldr	r2, [pc, #56]	; (8009490 <USB_EPStartXfer+0x6f4>)
 8009458:	4694      	mov	ip, r2
 800945a:	4463      	add	r3, ip
 800945c:	65bb      	str	r3, [r7, #88]	; 0x58
 800945e:	1d7b      	adds	r3, r7, #5
 8009460:	33ff      	adds	r3, #255	; 0xff
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	b29a      	uxth	r2, r3
 8009466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009468:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800946a:	2076      	movs	r0, #118	; 0x76
 800946c:	183b      	adds	r3, r7, r0
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	8912      	ldrh	r2, [r2, #8]
 8009472:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	6959      	ldr	r1, [r3, #20]
 8009478:	1d7b      	adds	r3, r7, #5
 800947a:	33ff      	adds	r3, #255	; 0xff
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	b29c      	uxth	r4, r3
 8009480:	183b      	adds	r3, r7, r0
 8009482:	881a      	ldrh	r2, [r3, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	0023      	movs	r3, r4
 8009488:	f000 fe7c 	bl	800a184 <USB_WritePMA>
 800948c:	e15b      	b.n	8009746 <USB_EPStartXfer+0x9aa>
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	00000402 	.word	0x00000402
 8009494:	ffff83ff 	.word	0xffff83ff
 8009498:	ffff8000 	.word	0xffff8000
 800949c:	00000406 	.word	0x00000406
 80094a0:	ffff8e8f 	.word	0xffff8e8f
 80094a4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	1d7b      	adds	r3, r7, #5
 80094ae:	33ff      	adds	r3, #255	; 0xff
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	18d3      	adds	r3, r2, r3
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	001a      	movs	r2, r3
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	4013      	ands	r3, r2
 80094cc:	d100      	bne.n	80094d0 <USB_EPStartXfer+0x734>
 80094ce:	e099      	b.n	8009604 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	673b      	str	r3, [r7, #112]	; 0x70
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d166      	bne.n	80095aa <USB_EPStartXfer+0x80e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	66bb      	str	r3, [r7, #104]	; 0x68
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2250      	movs	r2, #80	; 0x50
 80094e4:	5a9b      	ldrh	r3, [r3, r2]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	001a      	movs	r2, r3
 80094ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	00da      	lsls	r2, r3, #3
 80094f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094f8:	18d3      	adds	r3, r2, r3
 80094fa:	4ad0      	ldr	r2, [pc, #832]	; (800983c <USB_EPStartXfer+0xaa0>)
 80094fc:	4694      	mov	ip, r2
 80094fe:	4463      	add	r3, ip
 8009500:	667b      	str	r3, [r7, #100]	; 0x64
 8009502:	1d7b      	adds	r3, r7, #5
 8009504:	33ff      	adds	r3, #255	; 0xff
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d110      	bne.n	800952e <USB_EPStartXfer+0x792>
 800950c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4acb      	ldr	r2, [pc, #812]	; (8009840 <USB_EPStartXfer+0xaa4>)
 8009514:	4013      	ands	r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	4ac8      	ldr	r2, [pc, #800]	; (8009844 <USB_EPStartXfer+0xaa8>)
 8009524:	4313      	orrs	r3, r2
 8009526:	b29a      	uxth	r2, r3
 8009528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	e058      	b.n	80095e0 <USB_EPStartXfer+0x844>
 800952e:	1d7b      	adds	r3, r7, #5
 8009530:	33ff      	adds	r3, #255	; 0xff
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b3e      	cmp	r3, #62	; 0x3e
 8009536:	d81a      	bhi.n	800956e <USB_EPStartXfer+0x7d2>
 8009538:	1d7b      	adds	r3, r7, #5
 800953a:	33ff      	adds	r3, #255	; 0xff
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	21f0      	movs	r1, #240	; 0xf0
 8009542:	187a      	adds	r2, r7, r1
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	1d7b      	adds	r3, r7, #5
 8009548:	33ff      	adds	r3, #255	; 0xff
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	4013      	ands	r3, r2
 8009550:	d004      	beq.n	800955c <USB_EPStartXfer+0x7c0>
 8009552:	187b      	adds	r3, r7, r1
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	187a      	adds	r2, r7, r1
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	23f0      	movs	r3, #240	; 0xf0
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29a      	uxth	r2, r3
 8009568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	e038      	b.n	80095e0 <USB_EPStartXfer+0x844>
 800956e:	1d7b      	adds	r3, r7, #5
 8009570:	33ff      	adds	r3, #255	; 0xff
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	21f0      	movs	r1, #240	; 0xf0
 8009578:	187a      	adds	r2, r7, r1
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	1d7b      	adds	r3, r7, #5
 800957e:	33ff      	adds	r3, #255	; 0xff
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	221f      	movs	r2, #31
 8009584:	4013      	ands	r3, r2
 8009586:	d104      	bne.n	8009592 <USB_EPStartXfer+0x7f6>
 8009588:	187b      	adds	r3, r7, r1
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	187a      	adds	r2, r7, r1
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	23f0      	movs	r3, #240	; 0xf0
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4aa9      	ldr	r2, [pc, #676]	; (8009844 <USB_EPStartXfer+0xaa8>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e01a      	b.n	80095e0 <USB_EPStartXfer+0x844>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	785b      	ldrb	r3, [r3, #1]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d116      	bne.n	80095e0 <USB_EPStartXfer+0x844>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2250      	movs	r2, #80	; 0x50
 80095b6:	5a9b      	ldrh	r3, [r3, r2]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	001a      	movs	r2, r3
 80095bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095be:	189b      	adds	r3, r3, r2
 80095c0:	673b      	str	r3, [r7, #112]	; 0x70
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	00da      	lsls	r2, r3, #3
 80095c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095ca:	18d3      	adds	r3, r2, r3
 80095cc:	4a9b      	ldr	r2, [pc, #620]	; (800983c <USB_EPStartXfer+0xaa0>)
 80095ce:	4694      	mov	ip, r2
 80095d0:	4463      	add	r3, ip
 80095d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095d4:	1d7b      	adds	r3, r7, #5
 80095d6:	33ff      	adds	r3, #255	; 0xff
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80095e0:	2076      	movs	r0, #118	; 0x76
 80095e2:	183b      	adds	r3, r7, r0
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	8952      	ldrh	r2, [r2, #10]
 80095e8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	6959      	ldr	r1, [r3, #20]
 80095ee:	1d7b      	adds	r3, r7, #5
 80095f0:	33ff      	adds	r3, #255	; 0xff
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	b29c      	uxth	r4, r3
 80095f6:	183b      	adds	r3, r7, r0
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	0023      	movs	r3, r4
 80095fe:	f000 fdc1 	bl	800a184 <USB_WritePMA>
 8009602:	e0a0      	b.n	8009746 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d166      	bne.n	80096da <USB_EPStartXfer+0x93e>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2250      	movs	r2, #80	; 0x50
 8009614:	5a9b      	ldrh	r3, [r3, r2]
 8009616:	b29b      	uxth	r3, r3
 8009618:	001a      	movs	r2, r3
 800961a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800961c:	189b      	adds	r3, r3, r2
 800961e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	00da      	lsls	r2, r3, #3
 8009626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009628:	18d3      	adds	r3, r2, r3
 800962a:	4a87      	ldr	r2, [pc, #540]	; (8009848 <USB_EPStartXfer+0xaac>)
 800962c:	4694      	mov	ip, r2
 800962e:	4463      	add	r3, ip
 8009630:	67bb      	str	r3, [r7, #120]	; 0x78
 8009632:	1d7b      	adds	r3, r7, #5
 8009634:	33ff      	adds	r3, #255	; 0xff
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d110      	bne.n	800965e <USB_EPStartXfer+0x8c2>
 800963c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	4a7f      	ldr	r2, [pc, #508]	; (8009840 <USB_EPStartXfer+0xaa4>)
 8009644:	4013      	ands	r3, r2
 8009646:	b29a      	uxth	r2, r3
 8009648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800964a:	801a      	strh	r2, [r3, #0]
 800964c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	4a7c      	ldr	r2, [pc, #496]	; (8009844 <USB_EPStartXfer+0xaa8>)
 8009654:	4313      	orrs	r3, r2
 8009656:	b29a      	uxth	r2, r3
 8009658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	e062      	b.n	8009724 <USB_EPStartXfer+0x988>
 800965e:	1d7b      	adds	r3, r7, #5
 8009660:	33ff      	adds	r3, #255	; 0xff
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b3e      	cmp	r3, #62	; 0x3e
 8009666:	d81a      	bhi.n	800969e <USB_EPStartXfer+0x902>
 8009668:	1d7b      	adds	r3, r7, #5
 800966a:	33ff      	adds	r3, #255	; 0xff
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	21ec      	movs	r1, #236	; 0xec
 8009672:	187a      	adds	r2, r7, r1
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	1d7b      	adds	r3, r7, #5
 8009678:	33ff      	adds	r3, #255	; 0xff
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2201      	movs	r2, #1
 800967e:	4013      	ands	r3, r2
 8009680:	d004      	beq.n	800968c <USB_EPStartXfer+0x8f0>
 8009682:	187b      	adds	r3, r7, r1
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	187a      	adds	r2, r7, r1
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	23ec      	movs	r3, #236	; 0xec
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	029b      	lsls	r3, r3, #10
 8009696:	b29a      	uxth	r2, r3
 8009698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e042      	b.n	8009724 <USB_EPStartXfer+0x988>
 800969e:	1d7b      	adds	r3, r7, #5
 80096a0:	33ff      	adds	r3, #255	; 0xff
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	21ec      	movs	r1, #236	; 0xec
 80096a8:	187a      	adds	r2, r7, r1
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	1d7b      	adds	r3, r7, #5
 80096ae:	33ff      	adds	r3, #255	; 0xff
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	221f      	movs	r2, #31
 80096b4:	4013      	ands	r3, r2
 80096b6:	d104      	bne.n	80096c2 <USB_EPStartXfer+0x926>
 80096b8:	187b      	adds	r3, r7, r1
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3b01      	subs	r3, #1
 80096be:	187a      	adds	r2, r7, r1
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	23ec      	movs	r3, #236	; 0xec
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	029b      	lsls	r3, r3, #10
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4a5d      	ldr	r2, [pc, #372]	; (8009844 <USB_EPStartXfer+0xaa8>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d6:	801a      	strh	r2, [r3, #0]
 80096d8:	e024      	b.n	8009724 <USB_EPStartXfer+0x988>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	785b      	ldrb	r3, [r3, #1]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d120      	bne.n	8009724 <USB_EPStartXfer+0x988>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2184      	movs	r1, #132	; 0x84
 80096e6:	187a      	adds	r2, r7, r1
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2250      	movs	r2, #80	; 0x50
 80096ee:	5a9b      	ldrh	r3, [r3, r2]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	001a      	movs	r2, r3
 80096f4:	187b      	adds	r3, r7, r1
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	189b      	adds	r3, r3, r2
 80096fa:	187a      	adds	r2, r7, r1
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	00da      	lsls	r2, r3, #3
 8009704:	187b      	adds	r3, r7, r1
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	18d3      	adds	r3, r2, r3
 800970a:	4a4f      	ldr	r2, [pc, #316]	; (8009848 <USB_EPStartXfer+0xaac>)
 800970c:	4694      	mov	ip, r2
 800970e:	4463      	add	r3, ip
 8009710:	2180      	movs	r1, #128	; 0x80
 8009712:	187a      	adds	r2, r7, r1
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	1d7b      	adds	r3, r7, #5
 8009718:	33ff      	adds	r3, #255	; 0xff
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	b29a      	uxth	r2, r3
 800971e:	187b      	adds	r3, r7, r1
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009724:	2076      	movs	r0, #118	; 0x76
 8009726:	183b      	adds	r3, r7, r0
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	8912      	ldrh	r2, [r2, #8]
 800972c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6959      	ldr	r1, [r3, #20]
 8009732:	1d7b      	adds	r3, r7, #5
 8009734:	33ff      	adds	r3, #255	; 0xff
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	b29c      	uxth	r4, r3
 800973a:	183b      	adds	r3, r7, r0
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	0023      	movs	r3, r4
 8009742:	f000 fd1f 	bl	800a184 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18d3      	adds	r3, r2, r3
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29a      	uxth	r2, r3
 8009754:	200a      	movs	r0, #10
 8009756:	183b      	adds	r3, r7, r0
 8009758:	493c      	ldr	r1, [pc, #240]	; (800984c <USB_EPStartXfer+0xab0>)
 800975a:	400a      	ands	r2, r1
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	183b      	adds	r3, r7, r0
 8009760:	183a      	adds	r2, r7, r0
 8009762:	8812      	ldrh	r2, [r2, #0]
 8009764:	2110      	movs	r1, #16
 8009766:	404a      	eors	r2, r1
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	183b      	adds	r3, r7, r0
 800976c:	183a      	adds	r2, r7, r0
 800976e:	8812      	ldrh	r2, [r2, #0]
 8009770:	2120      	movs	r1, #32
 8009772:	404a      	eors	r2, r1
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	183a      	adds	r2, r7, r0
 8009782:	8812      	ldrh	r2, [r2, #0]
 8009784:	4932      	ldr	r1, [pc, #200]	; (8009850 <USB_EPStartXfer+0xab4>)
 8009786:	430a      	orrs	r2, r1
 8009788:	b292      	uxth	r2, r2
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	f000 fbaf 	bl	8009eee <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	7b1b      	ldrb	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d000      	beq.n	800979a <USB_EPStartXfer+0x9fe>
 8009798:	e09e      	b.n	80098d8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d90d      	bls.n	80097c2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	1d7a      	adds	r2, r7, #5
 80097ac:	32ff      	adds	r2, #255	; 0xff
 80097ae:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	1d7b      	adds	r3, r7, #5
 80097b6:	33ff      	adds	r3, #255	; 0xff
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	619a      	str	r2, [r3, #24]
 80097c0:	e007      	b.n	80097d2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	1d7a      	adds	r2, r7, #5
 80097c8:	32ff      	adds	r2, #255	; 0xff
 80097ca:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2190      	movs	r1, #144	; 0x90
 80097d6:	187a      	adds	r2, r7, r1
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2250      	movs	r2, #80	; 0x50
 80097de:	5a9b      	ldrh	r3, [r3, r2]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	001a      	movs	r2, r3
 80097e4:	187b      	adds	r3, r7, r1
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	189b      	adds	r3, r3, r2
 80097ea:	187a      	adds	r2, r7, r1
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	00da      	lsls	r2, r3, #3
 80097f4:	187b      	adds	r3, r7, r1
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	18d3      	adds	r3, r2, r3
 80097fa:	4a10      	ldr	r2, [pc, #64]	; (800983c <USB_EPStartXfer+0xaa0>)
 80097fc:	4694      	mov	ip, r2
 80097fe:	4463      	add	r3, ip
 8009800:	218c      	movs	r1, #140	; 0x8c
 8009802:	187a      	adds	r2, r7, r1
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	1d7b      	adds	r3, r7, #5
 8009808:	33ff      	adds	r3, #255	; 0xff
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d121      	bne.n	8009854 <USB_EPStartXfer+0xab8>
 8009810:	187b      	adds	r3, r7, r1
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	4a09      	ldr	r2, [pc, #36]	; (8009840 <USB_EPStartXfer+0xaa4>)
 800981a:	4013      	ands	r3, r2
 800981c:	b29a      	uxth	r2, r3
 800981e:	187b      	adds	r3, r7, r1
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	187b      	adds	r3, r7, r1
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <USB_EPStartXfer+0xaa8>)
 800982e:	4313      	orrs	r3, r2
 8009830:	b29a      	uxth	r2, r3
 8009832:	187b      	adds	r3, r7, r1
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e334      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	00000406 	.word	0x00000406
 8009840:	ffff83ff 	.word	0xffff83ff
 8009844:	ffff8000 	.word	0xffff8000
 8009848:	00000402 	.word	0x00000402
 800984c:	ffff8fbf 	.word	0xffff8fbf
 8009850:	ffff8080 	.word	0xffff8080
 8009854:	1d7b      	adds	r3, r7, #5
 8009856:	33ff      	adds	r3, #255	; 0xff
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b3e      	cmp	r3, #62	; 0x3e
 800985c:	d81c      	bhi.n	8009898 <USB_EPStartXfer+0xafc>
 800985e:	1d7b      	adds	r3, r7, #5
 8009860:	33ff      	adds	r3, #255	; 0xff
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	085b      	lsrs	r3, r3, #1
 8009866:	21e8      	movs	r1, #232	; 0xe8
 8009868:	187a      	adds	r2, r7, r1
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	1d7b      	adds	r3, r7, #5
 800986e:	33ff      	adds	r3, #255	; 0xff
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2201      	movs	r2, #1
 8009874:	4013      	ands	r3, r2
 8009876:	d004      	beq.n	8009882 <USB_EPStartXfer+0xae6>
 8009878:	187b      	adds	r3, r7, r1
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	187a      	adds	r2, r7, r1
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	23e8      	movs	r3, #232	; 0xe8
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	b29a      	uxth	r2, r3
 800988e:	238c      	movs	r3, #140	; 0x8c
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	e305      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
 8009898:	1d7b      	adds	r3, r7, #5
 800989a:	33ff      	adds	r3, #255	; 0xff
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	095b      	lsrs	r3, r3, #5
 80098a0:	21e8      	movs	r1, #232	; 0xe8
 80098a2:	187a      	adds	r2, r7, r1
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	1d7b      	adds	r3, r7, #5
 80098a8:	33ff      	adds	r3, #255	; 0xff
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	221f      	movs	r2, #31
 80098ae:	4013      	ands	r3, r2
 80098b0:	d104      	bne.n	80098bc <USB_EPStartXfer+0xb20>
 80098b2:	187b      	adds	r3, r7, r1
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	187a      	adds	r2, r7, r1
 80098ba:	6013      	str	r3, [r2, #0]
 80098bc:	23e8      	movs	r3, #232	; 0xe8
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	029b      	lsls	r3, r3, #10
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4aca      	ldr	r2, [pc, #808]	; (8009bf4 <USB_EPStartXfer+0xe58>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	238c      	movs	r3, #140	; 0x8c
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	801a      	strh	r2, [r3, #0]
 80098d6:	e2e5      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	78db      	ldrb	r3, [r3, #3]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d000      	beq.n	80098e2 <USB_EPStartXfer+0xb46>
 80098e0:	e16f      	b.n	8009bc2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	785b      	ldrb	r3, [r3, #1]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d16f      	bne.n	80099ca <USB_EPStartXfer+0xc2e>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	21ac      	movs	r1, #172	; 0xac
 80098ee:	187a      	adds	r2, r7, r1
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2250      	movs	r2, #80	; 0x50
 80098f6:	5a9b      	ldrh	r3, [r3, r2]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	001a      	movs	r2, r3
 80098fc:	187b      	adds	r3, r7, r1
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	189b      	adds	r3, r3, r2
 8009902:	187a      	adds	r2, r7, r1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	00da      	lsls	r2, r3, #3
 800990c:	187b      	adds	r3, r7, r1
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	18d3      	adds	r3, r2, r3
 8009912:	4ab9      	ldr	r2, [pc, #740]	; (8009bf8 <USB_EPStartXfer+0xe5c>)
 8009914:	4694      	mov	ip, r2
 8009916:	4463      	add	r3, ip
 8009918:	21a8      	movs	r1, #168	; 0xa8
 800991a:	187a      	adds	r2, r7, r1
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d114      	bne.n	8009950 <USB_EPStartXfer+0xbb4>
 8009926:	187b      	adds	r3, r7, r1
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	4ab3      	ldr	r2, [pc, #716]	; (8009bfc <USB_EPStartXfer+0xe60>)
 8009930:	4013      	ands	r3, r2
 8009932:	b29a      	uxth	r2, r3
 8009934:	187b      	adds	r3, r7, r1
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	187b      	adds	r3, r7, r1
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	4aac      	ldr	r2, [pc, #688]	; (8009bf4 <USB_EPStartXfer+0xe58>)
 8009944:	4313      	orrs	r3, r2
 8009946:	b29a      	uxth	r2, r3
 8009948:	187b      	adds	r3, r7, r1
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	e060      	b.n	8009a12 <USB_EPStartXfer+0xc76>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	2b3e      	cmp	r3, #62	; 0x3e
 8009956:	d81a      	bhi.n	800998e <USB_EPStartXfer+0xbf2>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	085b      	lsrs	r3, r3, #1
 800995e:	21e4      	movs	r1, #228	; 0xe4
 8009960:	187a      	adds	r2, r7, r1
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2201      	movs	r2, #1
 800996a:	4013      	ands	r3, r2
 800996c:	d004      	beq.n	8009978 <USB_EPStartXfer+0xbdc>
 800996e:	187b      	adds	r3, r7, r1
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	187a      	adds	r2, r7, r1
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	23e4      	movs	r3, #228	; 0xe4
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29a      	uxth	r2, r3
 8009984:	23a8      	movs	r3, #168	; 0xa8
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e041      	b.n	8009a12 <USB_EPStartXfer+0xc76>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	21e4      	movs	r1, #228	; 0xe4
 8009996:	187a      	adds	r2, r7, r1
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	221f      	movs	r2, #31
 80099a0:	4013      	ands	r3, r2
 80099a2:	d104      	bne.n	80099ae <USB_EPStartXfer+0xc12>
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	187a      	adds	r2, r7, r1
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	23e4      	movs	r3, #228	; 0xe4
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	4a8e      	ldr	r2, [pc, #568]	; (8009bf4 <USB_EPStartXfer+0xe58>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	b29a      	uxth	r2, r3
 80099c0:	23a8      	movs	r3, #168	; 0xa8
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	801a      	strh	r2, [r3, #0]
 80099c8:	e023      	b.n	8009a12 <USB_EPStartXfer+0xc76>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d11f      	bne.n	8009a12 <USB_EPStartXfer+0xc76>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	21b4      	movs	r1, #180	; 0xb4
 80099d6:	187a      	adds	r2, r7, r1
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2250      	movs	r2, #80	; 0x50
 80099de:	5a9b      	ldrh	r3, [r3, r2]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	001a      	movs	r2, r3
 80099e4:	187b      	adds	r3, r7, r1
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	189b      	adds	r3, r3, r2
 80099ea:	187a      	adds	r2, r7, r1
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	00da      	lsls	r2, r3, #3
 80099f4:	187b      	adds	r3, r7, r1
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	4a7f      	ldr	r2, [pc, #508]	; (8009bf8 <USB_EPStartXfer+0xe5c>)
 80099fc:	4694      	mov	ip, r2
 80099fe:	4463      	add	r3, ip
 8009a00:	21b0      	movs	r1, #176	; 0xb0
 8009a02:	187a      	adds	r2, r7, r1
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	22a4      	movs	r2, #164	; 0xa4
 8009a16:	18ba      	adds	r2, r7, r2
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d16f      	bne.n	8009b02 <USB_EPStartXfer+0xd66>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	219c      	movs	r1, #156	; 0x9c
 8009a26:	187a      	adds	r2, r7, r1
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2250      	movs	r2, #80	; 0x50
 8009a2e:	5a9b      	ldrh	r3, [r3, r2]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	001a      	movs	r2, r3
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	189b      	adds	r3, r3, r2
 8009a3a:	187a      	adds	r2, r7, r1
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	00da      	lsls	r2, r3, #3
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	18d3      	adds	r3, r2, r3
 8009a4a:	4a6d      	ldr	r2, [pc, #436]	; (8009c00 <USB_EPStartXfer+0xe64>)
 8009a4c:	4694      	mov	ip, r2
 8009a4e:	4463      	add	r3, ip
 8009a50:	2198      	movs	r1, #152	; 0x98
 8009a52:	187a      	adds	r2, r7, r1
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d114      	bne.n	8009a88 <USB_EPStartXfer+0xcec>
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	4a65      	ldr	r2, [pc, #404]	; (8009bfc <USB_EPStartXfer+0xe60>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	187b      	adds	r3, r7, r1
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	187b      	adds	r3, r7, r1
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4a5e      	ldr	r2, [pc, #376]	; (8009bf4 <USB_EPStartXfer+0xe58>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	187b      	adds	r3, r7, r1
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	e05d      	b.n	8009b44 <USB_EPStartXfer+0xda8>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a8e:	d81a      	bhi.n	8009ac6 <USB_EPStartXfer+0xd2a>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	085b      	lsrs	r3, r3, #1
 8009a96:	21e0      	movs	r1, #224	; 0xe0
 8009a98:	187a      	adds	r2, r7, r1
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <USB_EPStartXfer+0xd14>
 8009aa6:	187b      	adds	r3, r7, r1
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	187a      	adds	r2, r7, r1
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	23e0      	movs	r3, #224	; 0xe0
 8009ab2:	18fb      	adds	r3, r7, r3
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	029b      	lsls	r3, r3, #10
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	2398      	movs	r3, #152	; 0x98
 8009abe:	18fb      	adds	r3, r7, r3
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e03e      	b.n	8009b44 <USB_EPStartXfer+0xda8>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	21e0      	movs	r1, #224	; 0xe0
 8009ace:	187a      	adds	r2, r7, r1
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	221f      	movs	r2, #31
 8009ad8:	4013      	ands	r3, r2
 8009ada:	d104      	bne.n	8009ae6 <USB_EPStartXfer+0xd4a>
 8009adc:	187b      	adds	r3, r7, r1
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	187a      	adds	r2, r7, r1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	23e0      	movs	r3, #224	; 0xe0
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	029b      	lsls	r3, r3, #10
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	4a40      	ldr	r2, [pc, #256]	; (8009bf4 <USB_EPStartXfer+0xe58>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	2398      	movs	r3, #152	; 0x98
 8009afa:	18fb      	adds	r3, r7, r3
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	e020      	b.n	8009b44 <USB_EPStartXfer+0xda8>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d11c      	bne.n	8009b44 <USB_EPStartXfer+0xda8>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2250      	movs	r2, #80	; 0x50
 8009b0e:	5a9b      	ldrh	r3, [r3, r2]
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	001a      	movs	r2, r3
 8009b14:	21a4      	movs	r1, #164	; 0xa4
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	189b      	adds	r3, r3, r2
 8009b1c:	187a      	adds	r2, r7, r1
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	00da      	lsls	r2, r3, #3
 8009b26:	187b      	adds	r3, r7, r1
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	18d3      	adds	r3, r2, r3
 8009b2c:	4a34      	ldr	r2, [pc, #208]	; (8009c00 <USB_EPStartXfer+0xe64>)
 8009b2e:	4694      	mov	ip, r2
 8009b30:	4463      	add	r3, ip
 8009b32:	21a0      	movs	r1, #160	; 0xa0
 8009b34:	187a      	adds	r2, r7, r1
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	187b      	adds	r3, r7, r1
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d100      	bne.n	8009b4e <USB_EPStartXfer+0xdb2>
 8009b4c:	e1aa      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	18d2      	adds	r2, r2, r3
 8009b58:	2196      	movs	r1, #150	; 0x96
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	8812      	ldrh	r2, [r2, #0]
 8009b5e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	881a      	ldrh	r2, [r3, #0]
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	01db      	lsls	r3, r3, #7
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d004      	beq.n	8009b76 <USB_EPStartXfer+0xdda>
 8009b6c:	187b      	adds	r3, r7, r1
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	2240      	movs	r2, #64	; 0x40
 8009b72:	4013      	ands	r3, r2
 8009b74:	d10d      	bne.n	8009b92 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b76:	2196      	movs	r1, #150	; 0x96
 8009b78:	187b      	adds	r3, r7, r1
 8009b7a:	881a      	ldrh	r2, [r3, #0]
 8009b7c:	2380      	movs	r3, #128	; 0x80
 8009b7e:	01db      	lsls	r3, r3, #7
 8009b80:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b82:	d000      	beq.n	8009b86 <USB_EPStartXfer+0xdea>
 8009b84:	e18e      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b86:	187b      	adds	r3, r7, r1
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	2240      	movs	r2, #64	; 0x40
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d000      	beq.n	8009b92 <USB_EPStartXfer+0xdf6>
 8009b90:	e188      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	18d3      	adds	r3, r2, r3
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	2094      	movs	r0, #148	; 0x94
 8009ba2:	183b      	adds	r3, r7, r0
 8009ba4:	4917      	ldr	r1, [pc, #92]	; (8009c04 <USB_EPStartXfer+0xe68>)
 8009ba6:	400a      	ands	r2, r1
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	183a      	adds	r2, r7, r0
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	4913      	ldr	r1, [pc, #76]	; (8009c08 <USB_EPStartXfer+0xe6c>)
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e170      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d000      	beq.n	8009bcc <USB_EPStartXfer+0xe30>
 8009bca:	e169      	b.n	8009ea0 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	699a      	ldr	r2, [r3, #24]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d919      	bls.n	8009c0c <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	1d7a      	adds	r2, r7, #5
 8009bde:	32ff      	adds	r2, #255	; 0xff
 8009be0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	1d7b      	adds	r3, r7, #5
 8009be8:	33ff      	adds	r3, #255	; 0xff
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	1ad2      	subs	r2, r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	619a      	str	r2, [r3, #24]
 8009bf2:	e013      	b.n	8009c1c <USB_EPStartXfer+0xe80>
 8009bf4:	ffff8000 	.word	0xffff8000
 8009bf8:	00000402 	.word	0x00000402
 8009bfc:	ffff83ff 	.word	0xffff83ff
 8009c00:	00000406 	.word	0x00000406
 8009c04:	ffff8f8f 	.word	0xffff8f8f
 8009c08:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	1d7a      	adds	r2, r7, #5
 8009c12:	32ff      	adds	r2, #255	; 0xff
 8009c14:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	785b      	ldrb	r3, [r3, #1]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d000      	beq.n	8009c26 <USB_EPStartXfer+0xe8a>
 8009c24:	e075      	b.n	8009d12 <USB_EPStartXfer+0xf76>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	21cc      	movs	r1, #204	; 0xcc
 8009c2a:	187a      	adds	r2, r7, r1
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2250      	movs	r2, #80	; 0x50
 8009c32:	5a9b      	ldrh	r3, [r3, r2]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	001a      	movs	r2, r3
 8009c38:	187b      	adds	r3, r7, r1
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	189b      	adds	r3, r3, r2
 8009c3e:	187a      	adds	r2, r7, r1
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	00da      	lsls	r2, r3, #3
 8009c48:	187b      	adds	r3, r7, r1
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	18d3      	adds	r3, r2, r3
 8009c4e:	4aaa      	ldr	r2, [pc, #680]	; (8009ef8 <USB_EPStartXfer+0x115c>)
 8009c50:	4694      	mov	ip, r2
 8009c52:	4463      	add	r3, ip
 8009c54:	21c8      	movs	r1, #200	; 0xc8
 8009c56:	187a      	adds	r2, r7, r1
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	1d7b      	adds	r3, r7, #5
 8009c5c:	33ff      	adds	r3, #255	; 0xff
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d114      	bne.n	8009c8e <USB_EPStartXfer+0xef2>
 8009c64:	187b      	adds	r3, r7, r1
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4aa3      	ldr	r2, [pc, #652]	; (8009efc <USB_EPStartXfer+0x1160>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	187b      	adds	r3, r7, r1
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	187b      	adds	r3, r7, r1
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4a9f      	ldr	r2, [pc, #636]	; (8009f00 <USB_EPStartXfer+0x1164>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	187b      	adds	r3, r7, r1
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	801a      	strh	r2, [r3, #0]
 8009c8c:	e066      	b.n	8009d5c <USB_EPStartXfer+0xfc0>
 8009c8e:	1d7b      	adds	r3, r7, #5
 8009c90:	33ff      	adds	r3, #255	; 0xff
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b3e      	cmp	r3, #62	; 0x3e
 8009c96:	d81c      	bhi.n	8009cd2 <USB_EPStartXfer+0xf36>
 8009c98:	1d7b      	adds	r3, r7, #5
 8009c9a:	33ff      	adds	r3, #255	; 0xff
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	21dc      	movs	r1, #220	; 0xdc
 8009ca2:	187a      	adds	r2, r7, r1
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	1d7b      	adds	r3, r7, #5
 8009ca8:	33ff      	adds	r3, #255	; 0xff
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2201      	movs	r2, #1
 8009cae:	4013      	ands	r3, r2
 8009cb0:	d004      	beq.n	8009cbc <USB_EPStartXfer+0xf20>
 8009cb2:	187b      	adds	r3, r7, r1
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	187a      	adds	r2, r7, r1
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	23dc      	movs	r3, #220	; 0xdc
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	029b      	lsls	r3, r3, #10
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	23c8      	movs	r3, #200	; 0xc8
 8009cca:	18fb      	adds	r3, r7, r3
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e044      	b.n	8009d5c <USB_EPStartXfer+0xfc0>
 8009cd2:	1d7b      	adds	r3, r7, #5
 8009cd4:	33ff      	adds	r3, #255	; 0xff
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	21dc      	movs	r1, #220	; 0xdc
 8009cdc:	187a      	adds	r2, r7, r1
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	1d7b      	adds	r3, r7, #5
 8009ce2:	33ff      	adds	r3, #255	; 0xff
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	221f      	movs	r2, #31
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d104      	bne.n	8009cf6 <USB_EPStartXfer+0xf5a>
 8009cec:	187b      	adds	r3, r7, r1
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	187a      	adds	r2, r7, r1
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	23dc      	movs	r3, #220	; 0xdc
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	029b      	lsls	r3, r3, #10
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	4a7f      	ldr	r2, [pc, #508]	; (8009f00 <USB_EPStartXfer+0x1164>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	23c8      	movs	r3, #200	; 0xc8
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e024      	b.n	8009d5c <USB_EPStartXfer+0xfc0>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d120      	bne.n	8009d5c <USB_EPStartXfer+0xfc0>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	21d4      	movs	r1, #212	; 0xd4
 8009d1e:	187a      	adds	r2, r7, r1
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2250      	movs	r2, #80	; 0x50
 8009d26:	5a9b      	ldrh	r3, [r3, r2]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	001a      	movs	r2, r3
 8009d2c:	187b      	adds	r3, r7, r1
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	187a      	adds	r2, r7, r1
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	00da      	lsls	r2, r3, #3
 8009d3c:	187b      	adds	r3, r7, r1
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	18d3      	adds	r3, r2, r3
 8009d42:	4a6d      	ldr	r2, [pc, #436]	; (8009ef8 <USB_EPStartXfer+0x115c>)
 8009d44:	4694      	mov	ip, r2
 8009d46:	4463      	add	r3, ip
 8009d48:	21d0      	movs	r1, #208	; 0xd0
 8009d4a:	187a      	adds	r2, r7, r1
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	1d7b      	adds	r3, r7, #5
 8009d50:	33ff      	adds	r3, #255	; 0xff
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	187b      	adds	r3, r7, r1
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	22c4      	movs	r2, #196	; 0xc4
 8009d60:	18ba      	adds	r2, r7, r2
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d000      	beq.n	8009d6e <USB_EPStartXfer+0xfd2>
 8009d6c:	e075      	b.n	8009e5a <USB_EPStartXfer+0x10be>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	21bc      	movs	r1, #188	; 0xbc
 8009d72:	187a      	adds	r2, r7, r1
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2250      	movs	r2, #80	; 0x50
 8009d7a:	5a9b      	ldrh	r3, [r3, r2]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	001a      	movs	r2, r3
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	189b      	adds	r3, r3, r2
 8009d86:	187a      	adds	r2, r7, r1
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	00da      	lsls	r2, r3, #3
 8009d90:	187b      	adds	r3, r7, r1
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	18d3      	adds	r3, r2, r3
 8009d96:	4a5b      	ldr	r2, [pc, #364]	; (8009f04 <USB_EPStartXfer+0x1168>)
 8009d98:	4694      	mov	ip, r2
 8009d9a:	4463      	add	r3, ip
 8009d9c:	21b8      	movs	r1, #184	; 0xb8
 8009d9e:	187a      	adds	r2, r7, r1
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	1d7b      	adds	r3, r7, #5
 8009da4:	33ff      	adds	r3, #255	; 0xff
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d114      	bne.n	8009dd6 <USB_EPStartXfer+0x103a>
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	4a51      	ldr	r2, [pc, #324]	; (8009efc <USB_EPStartXfer+0x1160>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	187b      	adds	r3, r7, r1
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4a4d      	ldr	r2, [pc, #308]	; (8009f00 <USB_EPStartXfer+0x1164>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	187b      	adds	r3, r7, r1
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	801a      	strh	r2, [r3, #0]
 8009dd4:	e066      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
 8009dd6:	1d7b      	adds	r3, r7, #5
 8009dd8:	33ff      	adds	r3, #255	; 0xff
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b3e      	cmp	r3, #62	; 0x3e
 8009dde:	d81c      	bhi.n	8009e1a <USB_EPStartXfer+0x107e>
 8009de0:	1d7b      	adds	r3, r7, #5
 8009de2:	33ff      	adds	r3, #255	; 0xff
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	21d8      	movs	r1, #216	; 0xd8
 8009dea:	187a      	adds	r2, r7, r1
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	1d7b      	adds	r3, r7, #5
 8009df0:	33ff      	adds	r3, #255	; 0xff
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	4013      	ands	r3, r2
 8009df8:	d004      	beq.n	8009e04 <USB_EPStartXfer+0x1068>
 8009dfa:	187b      	adds	r3, r7, r1
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	187a      	adds	r2, r7, r1
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	23d8      	movs	r3, #216	; 0xd8
 8009e06:	18fb      	adds	r3, r7, r3
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	23b8      	movs	r3, #184	; 0xb8
 8009e12:	18fb      	adds	r3, r7, r3
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	e044      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
 8009e1a:	1d7b      	adds	r3, r7, #5
 8009e1c:	33ff      	adds	r3, #255	; 0xff
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	21d8      	movs	r1, #216	; 0xd8
 8009e24:	187a      	adds	r2, r7, r1
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	1d7b      	adds	r3, r7, #5
 8009e2a:	33ff      	adds	r3, #255	; 0xff
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	221f      	movs	r2, #31
 8009e30:	4013      	ands	r3, r2
 8009e32:	d104      	bne.n	8009e3e <USB_EPStartXfer+0x10a2>
 8009e34:	187b      	adds	r3, r7, r1
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	187a      	adds	r2, r7, r1
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	23d8      	movs	r3, #216	; 0xd8
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	029b      	lsls	r3, r3, #10
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	4a2d      	ldr	r2, [pc, #180]	; (8009f00 <USB_EPStartXfer+0x1164>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	23b8      	movs	r3, #184	; 0xb8
 8009e52:	18fb      	adds	r3, r7, r3
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	801a      	strh	r2, [r3, #0]
 8009e58:	e024      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d120      	bne.n	8009ea4 <USB_EPStartXfer+0x1108>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2250      	movs	r2, #80	; 0x50
 8009e66:	5a9b      	ldrh	r3, [r3, r2]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	001a      	movs	r2, r3
 8009e6c:	21c4      	movs	r1, #196	; 0xc4
 8009e6e:	187b      	adds	r3, r7, r1
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	189b      	adds	r3, r3, r2
 8009e74:	187a      	adds	r2, r7, r1
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	00da      	lsls	r2, r3, #3
 8009e7e:	187b      	adds	r3, r7, r1
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	18d3      	adds	r3, r2, r3
 8009e84:	4a1f      	ldr	r2, [pc, #124]	; (8009f04 <USB_EPStartXfer+0x1168>)
 8009e86:	4694      	mov	ip, r2
 8009e88:	4463      	add	r3, ip
 8009e8a:	21c0      	movs	r1, #192	; 0xc0
 8009e8c:	187a      	adds	r2, r7, r1
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	1d7b      	adds	r3, r7, #5
 8009e92:	33ff      	adds	r3, #255	; 0xff
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	801a      	strh	r2, [r3, #0]
 8009e9e:	e001      	b.n	8009ea4 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e025      	b.n	8009ef0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	18d3      	adds	r3, r2, r3
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	208a      	movs	r0, #138	; 0x8a
 8009eb4:	183b      	adds	r3, r7, r0
 8009eb6:	4914      	ldr	r1, [pc, #80]	; (8009f08 <USB_EPStartXfer+0x116c>)
 8009eb8:	400a      	ands	r2, r1
 8009eba:	801a      	strh	r2, [r3, #0]
 8009ebc:	183b      	adds	r3, r7, r0
 8009ebe:	183a      	adds	r2, r7, r0
 8009ec0:	8812      	ldrh	r2, [r2, #0]
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	0149      	lsls	r1, r1, #5
 8009ec6:	404a      	eors	r2, r1
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	183b      	adds	r3, r7, r0
 8009ecc:	183a      	adds	r2, r7, r0
 8009ece:	8812      	ldrh	r2, [r2, #0]
 8009ed0:	2180      	movs	r1, #128	; 0x80
 8009ed2:	0189      	lsls	r1, r1, #6
 8009ed4:	404a      	eors	r2, r1
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	18d3      	adds	r3, r2, r3
 8009ee2:	183a      	adds	r2, r7, r0
 8009ee4:	8812      	ldrh	r2, [r2, #0]
 8009ee6:	4909      	ldr	r1, [pc, #36]	; (8009f0c <USB_EPStartXfer+0x1170>)
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	b292      	uxth	r2, r2
 8009eec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b043      	add	sp, #268	; 0x10c
 8009ef6:	bd90      	pop	{r4, r7, pc}
 8009ef8:	00000402 	.word	0x00000402
 8009efc:	ffff83ff 	.word	0xffff83ff
 8009f00:	ffff8000 	.word	0xffff8000
 8009f04:	00000406 	.word	0x00000406
 8009f08:	ffffbf8f 	.word	0xffffbf8f
 8009f0c:	ffff8080 	.word	0xffff8080

08009f10 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	785b      	ldrb	r3, [r3, #1]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d01d      	beq.n	8009f5e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	200c      	movs	r0, #12
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	491b      	ldr	r1, [pc, #108]	; (8009fa4 <USB_EPSetStall+0x94>)
 8009f36:	400a      	ands	r2, r1
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	183b      	adds	r3, r7, r0
 8009f3c:	183a      	adds	r2, r7, r0
 8009f3e:	8812      	ldrh	r2, [r2, #0]
 8009f40:	2110      	movs	r1, #16
 8009f42:	404a      	eors	r2, r1
 8009f44:	801a      	strh	r2, [r3, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	18d3      	adds	r3, r2, r3
 8009f50:	183a      	adds	r2, r7, r0
 8009f52:	8812      	ldrh	r2, [r2, #0]
 8009f54:	4914      	ldr	r1, [pc, #80]	; (8009fa8 <USB_EPSetStall+0x98>)
 8009f56:	430a      	orrs	r2, r1
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	e01d      	b.n	8009f9a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	18d3      	adds	r3, r2, r3
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	200e      	movs	r0, #14
 8009f6e:	183b      	adds	r3, r7, r0
 8009f70:	490e      	ldr	r1, [pc, #56]	; (8009fac <USB_EPSetStall+0x9c>)
 8009f72:	400a      	ands	r2, r1
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	183b      	adds	r3, r7, r0
 8009f78:	183a      	adds	r2, r7, r0
 8009f7a:	8812      	ldrh	r2, [r2, #0]
 8009f7c:	2180      	movs	r1, #128	; 0x80
 8009f7e:	0149      	lsls	r1, r1, #5
 8009f80:	404a      	eors	r2, r1
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	18d3      	adds	r3, r2, r3
 8009f8e:	183a      	adds	r2, r7, r0
 8009f90:	8812      	ldrh	r2, [r2, #0]
 8009f92:	4905      	ldr	r1, [pc, #20]	; (8009fa8 <USB_EPSetStall+0x98>)
 8009f94:	430a      	orrs	r2, r1
 8009f96:	b292      	uxth	r2, r2
 8009f98:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	b004      	add	sp, #16
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	ffff8fbf 	.word	0xffff8fbf
 8009fa8:	ffff8080 	.word	0xffff8080
 8009fac:	ffffbf8f 	.word	0xffffbf8f

08009fb0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	7b1b      	ldrb	r3, [r3, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d000      	beq.n	8009fc4 <USB_EPClearStall+0x14>
 8009fc2:	e095      	b.n	800a0f0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d046      	beq.n	800a05a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	18d2      	adds	r2, r2, r3
 8009fd6:	2110      	movs	r1, #16
 8009fd8:	187b      	adds	r3, r7, r1
 8009fda:	8812      	ldrh	r2, [r2, #0]
 8009fdc:	801a      	strh	r2, [r3, #0]
 8009fde:	187b      	adds	r3, r7, r1
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	2240      	movs	r2, #64	; 0x40
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d016      	beq.n	800a016 <USB_EPClearStall+0x66>
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	18d3      	adds	r3, r2, r3
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	200e      	movs	r0, #14
 8009ff8:	183b      	adds	r3, r7, r0
 8009ffa:	4940      	ldr	r1, [pc, #256]	; (800a0fc <USB_EPClearStall+0x14c>)
 8009ffc:	400a      	ands	r2, r1
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	18d3      	adds	r3, r2, r3
 800a00a:	183a      	adds	r2, r7, r0
 800a00c:	8812      	ldrh	r2, [r2, #0]
 800a00e:	493c      	ldr	r1, [pc, #240]	; (800a100 <USB_EPClearStall+0x150>)
 800a010:	430a      	orrs	r2, r1
 800a012:	b292      	uxth	r2, r2
 800a014:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d068      	beq.n	800a0f0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	18d3      	adds	r3, r2, r3
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	200c      	movs	r0, #12
 800a02e:	183b      	adds	r3, r7, r0
 800a030:	4934      	ldr	r1, [pc, #208]	; (800a104 <USB_EPClearStall+0x154>)
 800a032:	400a      	ands	r2, r1
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	183b      	adds	r3, r7, r0
 800a038:	183a      	adds	r2, r7, r0
 800a03a:	8812      	ldrh	r2, [r2, #0]
 800a03c:	2120      	movs	r1, #32
 800a03e:	404a      	eors	r2, r1
 800a040:	801a      	strh	r2, [r3, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	18d3      	adds	r3, r2, r3
 800a04c:	183a      	adds	r2, r7, r0
 800a04e:	8812      	ldrh	r2, [r2, #0]
 800a050:	492d      	ldr	r1, [pc, #180]	; (800a108 <USB_EPClearStall+0x158>)
 800a052:	430a      	orrs	r2, r1
 800a054:	b292      	uxth	r2, r2
 800a056:	801a      	strh	r2, [r3, #0]
 800a058:	e04a      	b.n	800a0f0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	18d2      	adds	r2, r2, r3
 800a064:	2116      	movs	r1, #22
 800a066:	187b      	adds	r3, r7, r1
 800a068:	8812      	ldrh	r2, [r2, #0]
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	187b      	adds	r3, r7, r1
 800a06e:	881a      	ldrh	r2, [r3, #0]
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	01db      	lsls	r3, r3, #7
 800a074:	4013      	ands	r3, r2
 800a076:	d016      	beq.n	800a0a6 <USB_EPClearStall+0xf6>
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29a      	uxth	r2, r3
 800a086:	2014      	movs	r0, #20
 800a088:	183b      	adds	r3, r7, r0
 800a08a:	491c      	ldr	r1, [pc, #112]	; (800a0fc <USB_EPClearStall+0x14c>)
 800a08c:	400a      	ands	r2, r1
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	18d3      	adds	r3, r2, r3
 800a09a:	183a      	adds	r2, r7, r0
 800a09c:	8812      	ldrh	r2, [r2, #0]
 800a09e:	491b      	ldr	r1, [pc, #108]	; (800a10c <USB_EPClearStall+0x15c>)
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	b292      	uxth	r2, r2
 800a0a4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	18d3      	adds	r3, r2, r3
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	2012      	movs	r0, #18
 800a0b6:	183b      	adds	r3, r7, r0
 800a0b8:	4915      	ldr	r1, [pc, #84]	; (800a110 <USB_EPClearStall+0x160>)
 800a0ba:	400a      	ands	r2, r1
 800a0bc:	801a      	strh	r2, [r3, #0]
 800a0be:	183b      	adds	r3, r7, r0
 800a0c0:	183a      	adds	r2, r7, r0
 800a0c2:	8812      	ldrh	r2, [r2, #0]
 800a0c4:	2180      	movs	r1, #128	; 0x80
 800a0c6:	0149      	lsls	r1, r1, #5
 800a0c8:	404a      	eors	r2, r1
 800a0ca:	801a      	strh	r2, [r3, #0]
 800a0cc:	183b      	adds	r3, r7, r0
 800a0ce:	183a      	adds	r2, r7, r0
 800a0d0:	8812      	ldrh	r2, [r2, #0]
 800a0d2:	2180      	movs	r1, #128	; 0x80
 800a0d4:	0189      	lsls	r1, r1, #6
 800a0d6:	404a      	eors	r2, r1
 800a0d8:	801a      	strh	r2, [r3, #0]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	18d3      	adds	r3, r2, r3
 800a0e4:	183a      	adds	r2, r7, r0
 800a0e6:	8812      	ldrh	r2, [r2, #0]
 800a0e8:	4907      	ldr	r1, [pc, #28]	; (800a108 <USB_EPClearStall+0x158>)
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	b292      	uxth	r2, r2
 800a0ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	b006      	add	sp, #24
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	ffff8f8f 	.word	0xffff8f8f
 800a100:	ffff80c0 	.word	0xffff80c0
 800a104:	ffff8fbf 	.word	0xffff8fbf
 800a108:	ffff8080 	.word	0xffff8080
 800a10c:	ffffc080 	.word	0xffffc080
 800a110:	ffffbf8f 	.word	0xffffbf8f

0800a114 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	000a      	movs	r2, r1
 800a11e:	1cfb      	adds	r3, r7, #3
 800a120:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a122:	1cfb      	adds	r3, r7, #3
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d103      	bne.n	800a132 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	224c      	movs	r2, #76	; 0x4c
 800a12e:	2180      	movs	r1, #128	; 0x80
 800a130:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	0018      	movs	r0, r3
 800a136:	46bd      	mov	sp, r7
 800a138:	b002      	add	sp, #8
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2258      	movs	r2, #88	; 0x58
 800a148:	5a9b      	ldrh	r3, [r3, r2]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4a05      	ldr	r2, [pc, #20]	; (800a164 <USB_DevConnect+0x28>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	b299      	uxth	r1, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2258      	movs	r2, #88	; 0x58
 800a156:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b002      	add	sp, #8
 800a160:	bd80      	pop	{r7, pc}
 800a162:	46c0      	nop			; (mov r8, r8)
 800a164:	ffff8000 	.word	0xffff8000

0800a168 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2244      	movs	r2, #68	; 0x44
 800a174:	5a9b      	ldrh	r3, [r3, r2]
 800a176:	b29b      	uxth	r3, r3
 800a178:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b004      	add	sp, #16
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08c      	sub	sp, #48	; 0x30
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	0019      	movs	r1, r3
 800a190:	1dbb      	adds	r3, r7, #6
 800a192:	801a      	strh	r2, [r3, #0]
 800a194:	1d3b      	adds	r3, r7, #4
 800a196:	1c0a      	adds	r2, r1, #0
 800a198:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a19a:	1d3b      	adds	r3, r7, #4
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1ac:	1dbb      	adds	r3, r7, #6
 800a1ae:	881a      	ldrh	r2, [r3, #0]
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	18d3      	adds	r3, r2, r3
 800a1b4:	2280      	movs	r2, #128	; 0x80
 800a1b6:	00d2      	lsls	r2, r2, #3
 800a1b8:	4694      	mov	ip, r2
 800a1ba:	4463      	add	r3, ip
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1c2:	e01b      	b.n	800a1fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	001a      	movs	r2, r3
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e0      	bne.n	800a1c4 <USB_WritePMA+0x40>
  }
}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	46c0      	nop			; (mov r8, r8)
 800a206:	46bd      	mov	sp, r7
 800a208:	b00c      	add	sp, #48	; 0x30
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	; 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	0019      	movs	r1, r3
 800a218:	1dbb      	adds	r3, r7, #6
 800a21a:	801a      	strh	r2, [r3, #0]
 800a21c:	1d3b      	adds	r3, r7, #4
 800a21e:	1c0a      	adds	r2, r1, #0
 800a220:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	085b      	lsrs	r3, r3, #1
 800a228:	b29b      	uxth	r3, r3
 800a22a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a234:	1dbb      	adds	r3, r7, #6
 800a236:	881a      	ldrh	r2, [r3, #0]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	18d3      	adds	r3, r2, r3
 800a23c:	2280      	movs	r2, #128	; 0x80
 800a23e:	00d2      	lsls	r2, r2, #3
 800a240:	4694      	mov	ip, r2
 800a242:	4463      	add	r3, ip
 800a244:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
 800a24a:	e018      	b.n	800a27e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	3302      	adds	r3, #2
 800a258:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	3301      	adds	r3, #1
 800a266:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	0a1b      	lsrs	r3, r3, #8
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	3301      	adds	r3, #1
 800a276:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	3b01      	subs	r3, #1
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e3      	bne.n	800a24c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	2201      	movs	r2, #1
 800a28a:	4013      	ands	r3, r2
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b00a      	add	sp, #40	; 0x28
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	000a      	movs	r2, r1
 800a2b4:	1cfb      	adds	r3, r7, #3
 800a2b6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a2b8:	230f      	movs	r3, #15
 800a2ba:	18fb      	adds	r3, r7, r3
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7c1b      	ldrb	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d116      	bne.n	800a2f6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	2181      	movs	r1, #129	; 0x81
 800a2d2:	f002 f8b4 	bl	800c43e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	f002 f8aa 	bl	800c43e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	23b6      	movs	r3, #182	; 0xb6
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	50d1      	str	r1, [r2, r3]
 800a2f4:	e013      	b.n	800a31e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	2340      	movs	r3, #64	; 0x40
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	2181      	movs	r1, #129	; 0x81
 800a2fe:	f002 f89e 	bl	800c43e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	2202      	movs	r2, #2
 800a30e:	2101      	movs	r1, #1
 800a310:	f002 f895 	bl	800c43e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	23b6      	movs	r3, #182	; 0xb6
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	2101      	movs	r1, #1
 800a31c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	2308      	movs	r3, #8
 800a322:	2203      	movs	r2, #3
 800a324:	2182      	movs	r1, #130	; 0x82
 800a326:	f002 f88a 	bl	800c43e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a330:	2387      	movs	r3, #135	; 0x87
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	0018      	movs	r0, r3
 800a336:	f002 fa1b 	bl	800c770 <USBD_static_malloc>
 800a33a:	0001      	movs	r1, r0
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	23ae      	movs	r3, #174	; 0xae
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	23ae      	movs	r3, #174	; 0xae
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	58d3      	ldr	r3, [r2, r3]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a350:	230f      	movs	r3, #15
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	2201      	movs	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	e02c      	b.n	800a3b4 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	23ae      	movs	r3, #174	; 0xae
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	58d3      	ldr	r3, [r2, r3]
 800a362:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	23af      	movs	r3, #175	; 0xaf
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	58d3      	ldr	r3, [r2, r3]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	2385      	movs	r3, #133	; 0x85
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	2100      	movs	r1, #0
 800a378:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	2386      	movs	r3, #134	; 0x86
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	2100      	movs	r1, #0
 800a382:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7c1b      	ldrb	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	2381      	movs	r3, #129	; 0x81
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	58d2      	ldr	r2, [r2, r3]
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	2101      	movs	r1, #1
 800a39c:	f002 f99a 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800a3a0:	e008      	b.n	800a3b4 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	2381      	movs	r3, #129	; 0x81
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	58d2      	ldr	r2, [r2, r3]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	2340      	movs	r3, #64	; 0x40
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	f002 f990 	bl	800c6d4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a3b4:	230f      	movs	r3, #15
 800a3b6:	18fb      	adds	r3, r7, r3
 800a3b8:	781b      	ldrb	r3, [r3, #0]
}
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	b004      	add	sp, #16
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	000a      	movs	r2, r1
 800a3cc:	1cfb      	adds	r3, r7, #3
 800a3ce:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a3d0:	230f      	movs	r3, #15
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2181      	movs	r1, #129	; 0x81
 800a3dc:	0018      	movs	r0, r3
 800a3de:	f002 f865 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f002 f85d 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	23b6      	movs	r3, #182	; 0xb6
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2182      	movs	r1, #130	; 0x82
 800a400:	0018      	movs	r0, r3
 800a402:	f002 f853 	bl	800c4ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	23ae      	movs	r3, #174	; 0xae
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	58d3      	ldr	r3, [r2, r3]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d011      	beq.n	800a43c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	23af      	movs	r3, #175	; 0xaf
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	58d3      	ldr	r3, [r2, r3]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	23ae      	movs	r3, #174	; 0xae
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	58d3      	ldr	r3, [r2, r3]
 800a42c:	0018      	movs	r0, r3
 800a42e:	f002 f9ab 	bl	800c788 <USBD_static_free>
    pdev->pClassData = NULL;
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	23ae      	movs	r3, #174	; 0xae
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	2100      	movs	r1, #0
 800a43a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a43c:	230f      	movs	r3, #15
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	781b      	ldrb	r3, [r3, #0]
}
 800a442:	0018      	movs	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	b004      	add	sp, #16
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	23ae      	movs	r3, #174	; 0xae
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	58d3      	ldr	r3, [r2, r3]
 800a45e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a460:	230f      	movs	r3, #15
 800a462:	18fb      	adds	r3, r7, r3
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a468:	230c      	movs	r3, #12
 800a46a:	18fb      	adds	r3, r7, r3
 800a46c:	2200      	movs	r2, #0
 800a46e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a470:	2317      	movs	r3, #23
 800a472:	18fb      	adds	r3, r7, r3
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	001a      	movs	r2, r3
 800a47e:	2360      	movs	r3, #96	; 0x60
 800a480:	4013      	ands	r3, r2
 800a482:	d03d      	beq.n	800a500 <USBD_CDC_Setup+0xb4>
 800a484:	2b20      	cmp	r3, #32
 800a486:	d000      	beq.n	800a48a <USBD_CDC_Setup+0x3e>
 800a488:	e094      	b.n	800a5b4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	88db      	ldrh	r3, [r3, #6]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d02b      	beq.n	800a4ea <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b25b      	sxtb	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	da12      	bge.n	800a4c2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	23af      	movs	r3, #175	; 0xaf
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	58d3      	ldr	r3, [r2, r3]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a4aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	88d2      	ldrh	r2, [r2, #6]
 800a4b0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a4b2:	6939      	ldr	r1, [r7, #16]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	88da      	ldrh	r2, [r3, #6]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f001 fbb2 	bl	800bc24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a4c0:	e083      	b.n	800a5ca <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	7859      	ldrb	r1, [r3, #1]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	88db      	ldrh	r3, [r3, #6]
 800a4d2:	b2d9      	uxtb	r1, r3
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4a40      	ldr	r2, [pc, #256]	; (800a5d8 <USBD_CDC_Setup+0x18c>)
 800a4d8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a4da:	6939      	ldr	r1, [r7, #16]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	88da      	ldrh	r2, [r3, #6]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	f001 fbd1 	bl	800bc8a <USBD_CtlPrepareRx>
      break;
 800a4e8:	e06f      	b.n	800a5ca <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	23af      	movs	r3, #175	; 0xaf
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	58d3      	ldr	r3, [r2, r3]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	7850      	ldrb	r0, [r2, #1]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4798      	blx	r3
      break;
 800a4fe:	e064      	b.n	800a5ca <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	2b0b      	cmp	r3, #11
 800a506:	d037      	beq.n	800a578 <USBD_CDC_Setup+0x12c>
 800a508:	dc47      	bgt.n	800a59a <USBD_CDC_Setup+0x14e>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <USBD_CDC_Setup+0xc8>
 800a50e:	2b0a      	cmp	r3, #10
 800a510:	d019      	beq.n	800a546 <USBD_CDC_Setup+0xfa>
 800a512:	e042      	b.n	800a59a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	23a7      	movs	r3, #167	; 0xa7
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	5cd3      	ldrb	r3, [r2, r3]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d107      	bne.n	800a530 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a520:	230c      	movs	r3, #12
 800a522:	18f9      	adds	r1, r7, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	0018      	movs	r0, r3
 800a52a:	f001 fb7b 	bl	800bc24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a52e:	e040      	b.n	800a5b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	0011      	movs	r1, r2
 800a536:	0018      	movs	r0, r3
 800a538:	f001 faf6 	bl	800bb28 <USBD_CtlError>
            ret = USBD_FAIL;
 800a53c:	2317      	movs	r3, #23
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	2202      	movs	r2, #2
 800a542:	701a      	strb	r2, [r3, #0]
          break;
 800a544:	e035      	b.n	800a5b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	23a7      	movs	r3, #167	; 0xa7
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	5cd3      	ldrb	r3, [r2, r3]
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d107      	bne.n	800a562 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a552:	230f      	movs	r3, #15
 800a554:	18f9      	adds	r1, r7, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	0018      	movs	r0, r3
 800a55c:	f001 fb62 	bl	800bc24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a560:	e027      	b.n	800a5b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	0011      	movs	r1, r2
 800a568:	0018      	movs	r0, r3
 800a56a:	f001 fadd 	bl	800bb28 <USBD_CtlError>
            ret = USBD_FAIL;
 800a56e:	2317      	movs	r3, #23
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
          break;
 800a576:	e01c      	b.n	800a5b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	23a7      	movs	r3, #167	; 0xa7
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	5cd3      	ldrb	r3, [r2, r3]
 800a580:	2b03      	cmp	r3, #3
 800a582:	d015      	beq.n	800a5b0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	0011      	movs	r1, r2
 800a58a:	0018      	movs	r0, r3
 800a58c:	f001 facc 	bl	800bb28 <USBD_CtlError>
            ret = USBD_FAIL;
 800a590:	2317      	movs	r3, #23
 800a592:	18fb      	adds	r3, r7, r3
 800a594:	2202      	movs	r2, #2
 800a596:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a598:	e00a      	b.n	800a5b0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	0011      	movs	r1, r2
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f001 fac1 	bl	800bb28 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5a6:	2317      	movs	r3, #23
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	701a      	strb	r2, [r3, #0]
          break;
 800a5ae:	e000      	b.n	800a5b2 <USBD_CDC_Setup+0x166>
          break;
 800a5b0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a5b2:	e00a      	b.n	800a5ca <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	0011      	movs	r1, r2
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f001 fab4 	bl	800bb28 <USBD_CtlError>
      ret = USBD_FAIL;
 800a5c0:	2317      	movs	r3, #23
 800a5c2:	18fb      	adds	r3, r7, r3
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	701a      	strb	r2, [r3, #0]
      break;
 800a5c8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a5ca:	2317      	movs	r3, #23
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	781b      	ldrb	r3, [r3, #0]
}
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b006      	add	sp, #24
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	00000201 	.word	0x00000201

0800a5dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	000a      	movs	r2, r1
 800a5e6:	1cfb      	adds	r3, r7, #3
 800a5e8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	23ae      	movs	r3, #174	; 0xae
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	58d3      	ldr	r3, [r2, r3]
 800a5f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	23b0      	movs	r3, #176	; 0xb0
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	58d3      	ldr	r3, [r2, r3]
 800a5fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	23ae      	movs	r3, #174	; 0xae
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	58d3      	ldr	r3, [r2, r3]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d03e      	beq.n	800a688 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a60a:	1cfb      	adds	r3, r7, #3
 800a60c:	781a      	ldrb	r2, [r3, #0]
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	0013      	movs	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	189b      	adds	r3, r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	18cb      	adds	r3, r1, r3
 800a61a:	331c      	adds	r3, #28
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02b      	beq.n	800a67a <USBD_CDC_DataIn+0x9e>
 800a622:	1cfb      	adds	r3, r7, #3
 800a624:	781a      	ldrb	r2, [r3, #0]
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	0013      	movs	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	189b      	adds	r3, r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	18cb      	adds	r3, r1, r3
 800a632:	331c      	adds	r3, #28
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	1cfb      	adds	r3, r7, #3
 800a638:	781a      	ldrb	r2, [r3, #0]
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	0013      	movs	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	189b      	adds	r3, r3, r2
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	18cb      	adds	r3, r1, r3
 800a646:	3338      	adds	r3, #56	; 0x38
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	0019      	movs	r1, r3
 800a64c:	f7f5 fdf4 	bl	8000238 <__aeabi_uidivmod>
 800a650:	1e0b      	subs	r3, r1, #0
 800a652:	d112      	bne.n	800a67a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a654:	1cfb      	adds	r3, r7, #3
 800a656:	781a      	ldrb	r2, [r3, #0]
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	0013      	movs	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	189b      	adds	r3, r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	18cb      	adds	r3, r1, r3
 800a664:	331c      	adds	r3, #28
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a66a:	1cfb      	adds	r3, r7, #3
 800a66c:	7819      	ldrb	r1, [r3, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	2300      	movs	r3, #0
 800a672:	2200      	movs	r2, #0
 800a674:	f001 fff7 	bl	800c666 <USBD_LL_Transmit>
 800a678:	e004      	b.n	800a684 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	2385      	movs	r3, #133	; 0x85
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	2100      	movs	r1, #0
 800a682:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	0018      	movs	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b004      	add	sp, #16
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	000a      	movs	r2, r1
 800a69c:	1cfb      	adds	r3, r7, #3
 800a69e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	23ae      	movs	r3, #174	; 0xae
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	58d3      	ldr	r3, [r2, r3]
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6aa:	1cfb      	adds	r3, r7, #3
 800a6ac:	781a      	ldrb	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	0011      	movs	r1, r2
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f002 f845 	bl	800c742 <USBD_LL_GetRxDataSize>
 800a6b8:	0001      	movs	r1, r0
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	2383      	movs	r3, #131	; 0x83
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	23ae      	movs	r3, #174	; 0xae
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	58d3      	ldr	r3, [r2, r3]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d011      	beq.n	800a6f2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	23af      	movs	r3, #175	; 0xaf
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	58d3      	ldr	r3, [r2, r3]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	68f9      	ldr	r1, [r7, #12]
 800a6da:	2381      	movs	r3, #129	; 0x81
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	58c8      	ldr	r0, [r1, r3]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2183      	movs	r1, #131	; 0x83
 800a6e4:	0089      	lsls	r1, r1, #2
 800a6e6:	468c      	mov	ip, r1
 800a6e8:	4463      	add	r3, ip
 800a6ea:	0019      	movs	r1, r3
 800a6ec:	4790      	blx	r2

    return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e000      	b.n	800a6f4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a6f2:	2302      	movs	r3, #2
  }
}
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	b004      	add	sp, #16
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	23ae      	movs	r3, #174	; 0xae
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	58d3      	ldr	r3, [r2, r3]
 800a70c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	23af      	movs	r3, #175	; 0xaf
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	58d3      	ldr	r3, [r2, r3]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d019      	beq.n	800a74e <USBD_CDC_EP0_RxReady+0x52>
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	5cd3      	ldrb	r3, [r2, r3]
 800a722:	2bff      	cmp	r3, #255	; 0xff
 800a724:	d013      	beq.n	800a74e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	23af      	movs	r3, #175	; 0xaf
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	58d3      	ldr	r3, [r2, r3]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	2280      	movs	r2, #128	; 0x80
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a738:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4c06      	ldr	r4, [pc, #24]	; (800a758 <USBD_CDC_EP0_RxReady+0x5c>)
 800a73e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a740:	b292      	uxth	r2, r2
 800a742:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	2380      	movs	r3, #128	; 0x80
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	21ff      	movs	r1, #255	; 0xff
 800a74c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	0018      	movs	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	b005      	add	sp, #20
 800a756:	bd90      	pop	{r4, r7, pc}
 800a758:	00000201 	.word	0x00000201

0800a75c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2243      	movs	r2, #67	; 0x43
 800a768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a76a:	4b02      	ldr	r3, [pc, #8]	; (800a774 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a76c:	0018      	movs	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	b002      	add	sp, #8
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000094 	.word	0x20000094

0800a778 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2243      	movs	r2, #67	; 0x43
 800a784:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a786:	4b02      	ldr	r3, [pc, #8]	; (800a790 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a788:	0018      	movs	r0, r3
 800a78a:	46bd      	mov	sp, r7
 800a78c:	b002      	add	sp, #8
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20000050 	.word	0x20000050

0800a794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2243      	movs	r2, #67	; 0x43
 800a7a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a7a2:	4b02      	ldr	r3, [pc, #8]	; (800a7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	b002      	add	sp, #8
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	200000d8 	.word	0x200000d8

0800a7b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a7be:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	b002      	add	sp, #8
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	2000000c 	.word	0x2000000c

0800a7cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a7d6:	200f      	movs	r0, #15
 800a7d8:	183b      	adds	r3, r7, r0
 800a7da:	2202      	movs	r2, #2
 800a7dc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d007      	beq.n	800a7f4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	23af      	movs	r3, #175	; 0xaf
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a7ee:	183b      	adds	r3, r7, r0
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a7f4:	230f      	movs	r3, #15
 800a7f6:	18fb      	adds	r3, r7, r3
 800a7f8:	781b      	ldrb	r3, [r3, #0]
}
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	b004      	add	sp, #16
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	1dbb      	adds	r3, r7, #6
 800a80e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	23ae      	movs	r3, #174	; 0xae
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	58d3      	ldr	r3, [r2, r3]
 800a818:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	2382      	movs	r3, #130	; 0x82
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	68b9      	ldr	r1, [r7, #8]
 800a822:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a824:	1dbb      	adds	r3, r7, #6
 800a826:	8819      	ldrh	r1, [r3, #0]
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	2384      	movs	r3, #132	; 0x84
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	0018      	movs	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	b006      	add	sp, #24
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	23ae      	movs	r3, #174	; 0xae
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	58d3      	ldr	r3, [r2, r3]
 800a84c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	2381      	movs	r3, #129	; 0x81
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	0018      	movs	r0, r3
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b004      	add	sp, #16
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	23ae      	movs	r3, #174	; 0xae
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	58d3      	ldr	r3, [r2, r3]
 800a872:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	23ae      	movs	r3, #174	; 0xae
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	58d3      	ldr	r3, [r2, r3]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d022      	beq.n	800a8c6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	2385      	movs	r3, #133	; 0x85
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	58d3      	ldr	r3, [r2, r3]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d11a      	bne.n	800a8c2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	2385      	movs	r3, #133	; 0x85
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	2101      	movs	r1, #1
 800a894:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	2384      	movs	r3, #132	; 0x84
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	58d2      	ldr	r2, [r2, r3]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	2382      	movs	r3, #130	; 0x82
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	2384      	movs	r3, #132	; 0x84
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	000a      	movs	r2, r1
 800a8b8:	2181      	movs	r1, #129	; 0x81
 800a8ba:	f001 fed4 	bl	800c666 <USBD_LL_Transmit>

      return USBD_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e002      	b.n	800a8c8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e000      	b.n	800a8c8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	b004      	add	sp, #16
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	23ae      	movs	r3, #174	; 0xae
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	58d3      	ldr	r3, [r2, r3]
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	23ae      	movs	r3, #174	; 0xae
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	58d3      	ldr	r3, [r2, r3]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d019      	beq.n	800a922 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	7c1b      	ldrb	r3, [r3, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	2381      	movs	r3, #129	; 0x81
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	58d2      	ldr	r2, [r2, r3]
 800a8fe:	2380      	movs	r3, #128	; 0x80
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	2101      	movs	r1, #1
 800a906:	f001 fee5 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800a90a:	e008      	b.n	800a91e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	2381      	movs	r3, #129	; 0x81
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	58d2      	ldr	r2, [r2, r3]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	2340      	movs	r3, #64	; 0x40
 800a918:	2101      	movs	r1, #1
 800a91a:	f001 fedb 	bl	800c6d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	e000      	b.n	800a924 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a922:	2302      	movs	r3, #2
  }
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b004      	add	sp, #16
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	1dfb      	adds	r3, r7, #7
 800a938:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a940:	2302      	movs	r3, #2
 800a942:	e020      	b.n	800a986 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	23ad      	movs	r3, #173	; 0xad
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	58d3      	ldr	r3, [r2, r3]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	23ad      	movs	r3, #173	; 0xad
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	2100      	movs	r1, #0
 800a958:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	23ac      	movs	r3, #172	; 0xac
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	23a7      	movs	r3, #167	; 0xa7
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	2101      	movs	r1, #1
 800a972:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	1dfa      	adds	r2, r7, #7
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	0018      	movs	r0, r3
 800a980:	f001 fcd4 	bl	800c32c <USBD_LL_Init>

  return USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	0018      	movs	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	b004      	add	sp, #16
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a998:	200f      	movs	r0, #15
 800a99a:	183b      	adds	r3, r7, r0
 800a99c:	2200      	movs	r2, #0
 800a99e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d008      	beq.n	800a9b8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	23ad      	movs	r3, #173	; 0xad
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a9b0:	183b      	adds	r3, r7, r0
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e003      	b.n	800a9c0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a9b8:	230f      	movs	r3, #15
 800a9ba:	18fb      	adds	r3, r7, r3
 800a9bc:	2202      	movs	r2, #2
 800a9be:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a9c0:	230f      	movs	r3, #15
 800a9c2:	18fb      	adds	r3, r7, r3
 800a9c4:	781b      	ldrb	r3, [r3, #0]
}
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b004      	add	sp, #16
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f001 fd0b 	bl	800c3f4 <USBD_LL_Start>

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b002      	add	sp, #8
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b002      	add	sp, #8
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9fa:	b590      	push	{r4, r7, lr}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	000a      	movs	r2, r1
 800aa04:	1cfb      	adds	r3, r7, #3
 800aa06:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa08:	240f      	movs	r4, #15
 800aa0a:	193b      	adds	r3, r7, r4
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	23ad      	movs	r3, #173	; 0xad
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	58d3      	ldr	r3, [r2, r3]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00e      	beq.n	800aa3a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	23ad      	movs	r3, #173	; 0xad
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	58d3      	ldr	r3, [r2, r3]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	1cfa      	adds	r2, r7, #3
 800aa28:	7811      	ldrb	r1, [r2, #0]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	0010      	movs	r0, r2
 800aa2e:	4798      	blx	r3
 800aa30:	1e03      	subs	r3, r0, #0
 800aa32:	d102      	bne.n	800aa3a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800aa34:	193b      	adds	r3, r7, r4
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800aa3a:	230f      	movs	r3, #15
 800aa3c:	18fb      	adds	r3, r7, r3
 800aa3e:	781b      	ldrb	r3, [r3, #0]
}
 800aa40:	0018      	movs	r0, r3
 800aa42:	46bd      	mov	sp, r7
 800aa44:	b005      	add	sp, #20
 800aa46:	bd90      	pop	{r4, r7, pc}

0800aa48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	000a      	movs	r2, r1
 800aa52:	1cfb      	adds	r3, r7, #3
 800aa54:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	23ad      	movs	r3, #173	; 0xad
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	58d3      	ldr	r3, [r2, r3]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	1cfa      	adds	r2, r7, #3
 800aa62:	7811      	ldrb	r1, [r2, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	0010      	movs	r0, r2
 800aa68:	4798      	blx	r3

  return USBD_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	b002      	add	sp, #8
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	22aa      	movs	r2, #170	; 0xaa
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	4694      	mov	ip, r2
 800aa86:	4463      	add	r3, ip
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	0011      	movs	r1, r2
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f001 f810 	bl	800bab2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	23a5      	movs	r3, #165	; 0xa5
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	2101      	movs	r1, #1
 800aa9a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a23      	ldr	r2, [pc, #140]	; (800ab2c <USBD_LL_SetupStage+0xb8>)
 800aaa0:	5a9b      	ldrh	r3, [r3, r2]
 800aaa2:	0019      	movs	r1, r3
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	23a6      	movs	r3, #166	; 0xa6
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	23aa      	movs	r3, #170	; 0xaa
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	5cd3      	ldrb	r3, [r2, r3]
 800aab4:	001a      	movs	r2, r3
 800aab6:	231f      	movs	r3, #31
 800aab8:	4013      	ands	r3, r2
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d019      	beq.n	800aaf2 <USBD_LL_SetupStage+0x7e>
 800aabe:	d822      	bhi.n	800ab06 <USBD_LL_SetupStage+0x92>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <USBD_LL_SetupStage+0x56>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d00a      	beq.n	800aade <USBD_LL_SetupStage+0x6a>
 800aac8:	e01d      	b.n	800ab06 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	22aa      	movs	r2, #170	; 0xaa
 800aace:	0092      	lsls	r2, r2, #2
 800aad0:	189a      	adds	r2, r3, r2
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	0011      	movs	r1, r2
 800aad6:	0018      	movs	r0, r3
 800aad8:	f000 fa10 	bl	800aefc <USBD_StdDevReq>
      break;
 800aadc:	e020      	b.n	800ab20 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	22aa      	movs	r2, #170	; 0xaa
 800aae2:	0092      	lsls	r2, r2, #2
 800aae4:	189a      	adds	r2, r3, r2
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	0011      	movs	r1, r2
 800aaea:	0018      	movs	r0, r3
 800aaec:	f000 fa78 	bl	800afe0 <USBD_StdItfReq>
      break;
 800aaf0:	e016      	b.n	800ab20 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	22aa      	movs	r2, #170	; 0xaa
 800aaf6:	0092      	lsls	r2, r2, #2
 800aaf8:	189a      	adds	r2, r3, r2
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0011      	movs	r1, r2
 800aafe:	0018      	movs	r0, r3
 800ab00:	f000 fac5 	bl	800b08e <USBD_StdEPReq>
      break;
 800ab04:	e00c      	b.n	800ab20 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	23aa      	movs	r3, #170	; 0xaa
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	5cd3      	ldrb	r3, [r2, r3]
 800ab0e:	227f      	movs	r2, #127	; 0x7f
 800ab10:	4393      	bics	r3, r2
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	0011      	movs	r1, r2
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f001 fcf2 	bl	800c502 <USBD_LL_StallEP>
      break;
 800ab1e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	0018      	movs	r0, r3
 800ab24:	46bd      	mov	sp, r7
 800ab26:	b002      	add	sp, #8
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	000002ae 	.word	0x000002ae

0800ab30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	607a      	str	r2, [r7, #4]
 800ab3a:	200b      	movs	r0, #11
 800ab3c:	183b      	adds	r3, r7, r0
 800ab3e:	1c0a      	adds	r2, r1, #0
 800ab40:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab42:	183b      	adds	r3, r7, r0
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d154      	bne.n	800abf4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3355      	adds	r3, #85	; 0x55
 800ab4e:	33ff      	adds	r3, #255	; 0xff
 800ab50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	23a5      	movs	r3, #165	; 0xa5
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	58d3      	ldr	r3, [r2, r3]
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d139      	bne.n	800abd2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d919      	bls.n	800ab9e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d203      	bcs.n	800ab8c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	e002      	b.n	800ab92 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	001a      	movs	r2, r3
 800ab98:	f001 f89b 	bl	800bcd2 <USBD_CtlContinueRx>
 800ab9c:	e045      	b.n	800ac2a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	23ad      	movs	r3, #173	; 0xad
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	58d3      	ldr	r3, [r2, r3]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00d      	beq.n	800abc8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	23a7      	movs	r3, #167	; 0xa7
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d107      	bne.n	800abc8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	23ad      	movs	r3, #173	; 0xad
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	58d3      	ldr	r3, [r2, r3]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	0010      	movs	r0, r2
 800abc6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	0018      	movs	r0, r3
 800abcc:	f001 f894 	bl	800bcf8 <USBD_CtlSendStatus>
 800abd0:	e02b      	b.n	800ac2a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	23a5      	movs	r3, #165	; 0xa5
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	58d3      	ldr	r3, [r2, r3]
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d125      	bne.n	800ac2a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	23a5      	movs	r3, #165	; 0xa5
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	2100      	movs	r1, #0
 800abe6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2100      	movs	r1, #0
 800abec:	0018      	movs	r0, r3
 800abee:	f001 fc88 	bl	800c502 <USBD_LL_StallEP>
 800abf2:	e01a      	b.n	800ac2a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	23ad      	movs	r3, #173	; 0xad
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	58d3      	ldr	r3, [r2, r3]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d011      	beq.n	800ac26 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	23a7      	movs	r3, #167	; 0xa7
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d10b      	bne.n	800ac26 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	23ad      	movs	r3, #173	; 0xad
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	58d3      	ldr	r3, [r2, r3]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	220b      	movs	r2, #11
 800ac1a:	18ba      	adds	r2, r7, r2
 800ac1c:	7811      	ldrb	r1, [r2, #0]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	0010      	movs	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	e001      	b.n	800ac2a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac26:	2302      	movs	r3, #2
 800ac28:	e000      	b.n	800ac2c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	b006      	add	sp, #24
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	607a      	str	r2, [r7, #4]
 800ac3e:	200b      	movs	r0, #11
 800ac40:	183b      	adds	r3, r7, r0
 800ac42:	1c0a      	adds	r2, r1, #0
 800ac44:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac46:	183b      	adds	r3, r7, r0
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d000      	beq.n	800ac50 <USBD_LL_DataInStage+0x1c>
 800ac4e:	e08e      	b.n	800ad6e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3314      	adds	r3, #20
 800ac54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	23a5      	movs	r3, #165	; 0xa5
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	58d3      	ldr	r3, [r2, r3]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d164      	bne.n	800ad2c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d915      	bls.n	800ac9a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	1ad2      	subs	r2, r2, r3
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 ffec 	bl	800bc64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	2200      	movs	r2, #0
 800ac92:	2100      	movs	r1, #0
 800ac94:	f001 fd1e 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800ac98:	e059      	b.n	800ad4e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	0019      	movs	r1, r3
 800aca4:	0010      	movs	r0, r2
 800aca6:	f7f5 fac7 	bl	8000238 <__aeabi_uidivmod>
 800acaa:	1e0b      	subs	r3, r1, #0
 800acac:	d11f      	bne.n	800acee <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d319      	bcc.n	800acee <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	23a6      	movs	r3, #166	; 0xa6
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d211      	bcs.n	800acee <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	2100      	movs	r1, #0
 800acd0:	0018      	movs	r0, r3
 800acd2:	f000 ffc7 	bl	800bc64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	23a6      	movs	r3, #166	; 0xa6
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	2100      	movs	r1, #0
 800acde:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	2300      	movs	r3, #0
 800ace4:	2200      	movs	r2, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	f001 fcf4 	bl	800c6d4 <USBD_LL_PrepareReceive>
 800acec:	e02f      	b.n	800ad4e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	23ad      	movs	r3, #173	; 0xad
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	58d3      	ldr	r3, [r2, r3]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00d      	beq.n	800ad18 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	23a7      	movs	r3, #167	; 0xa7
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d107      	bne.n	800ad18 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	23ad      	movs	r3, #173	; 0xad
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	58d3      	ldr	r3, [r2, r3]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	0010      	movs	r0, r2
 800ad16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f001 fbf0 	bl	800c502 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f000 fffb 	bl	800bd20 <USBD_CtlReceiveStatus>
 800ad2a:	e010      	b.n	800ad4e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	23a5      	movs	r3, #165	; 0xa5
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	58d3      	ldr	r3, [r2, r3]
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d005      	beq.n	800ad44 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	23a5      	movs	r3, #165	; 0xa5
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d104      	bne.n	800ad4e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2180      	movs	r1, #128	; 0x80
 800ad48:	0018      	movs	r0, r3
 800ad4a:	f001 fbda 	bl	800c502 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	23a8      	movs	r3, #168	; 0xa8
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	5cd3      	ldrb	r3, [r2, r3]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d124      	bne.n	800ada4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f7ff fe43 	bl	800a9e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	23a8      	movs	r3, #168	; 0xa8
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	2100      	movs	r1, #0
 800ad6a:	54d1      	strb	r1, [r2, r3]
 800ad6c:	e01a      	b.n	800ada4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	23ad      	movs	r3, #173	; 0xad
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	58d3      	ldr	r3, [r2, r3]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d011      	beq.n	800ada0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	23a7      	movs	r3, #167	; 0xa7
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d10b      	bne.n	800ada0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	23ad      	movs	r3, #173	; 0xad
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	58d3      	ldr	r3, [r2, r3]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	220b      	movs	r2, #11
 800ad94:	18ba      	adds	r2, r7, r2
 800ad96:	7811      	ldrb	r1, [r2, #0]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	0010      	movs	r0, r2
 800ad9c:	4798      	blx	r3
 800ad9e:	e001      	b.n	800ada4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ada0:	2302      	movs	r3, #2
 800ada2:	e000      	b.n	800ada6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	0018      	movs	r0, r3
 800ada8:	46bd      	mov	sp, r7
 800adaa:	b006      	add	sp, #24
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	2340      	movs	r3, #64	; 0x40
 800adba:	2200      	movs	r2, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	f001 fb3e 	bl	800c43e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	23ac      	movs	r3, #172	; 0xac
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	2101      	movs	r1, #1
 800adca:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	23b2      	movs	r3, #178	; 0xb2
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	2140      	movs	r1, #64	; 0x40
 800add4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	2340      	movs	r3, #64	; 0x40
 800adda:	2200      	movs	r2, #0
 800addc:	2180      	movs	r1, #128	; 0x80
 800adde:	f001 fb2e 	bl	800c43e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2240      	movs	r2, #64	; 0x40
 800adec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	23a7      	movs	r3, #167	; 0xa7
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	2101      	movs	r1, #1
 800adf6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	23a5      	movs	r3, #165	; 0xa5
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	2100      	movs	r1, #0
 800ae00:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	23a9      	movs	r3, #169	; 0xa9
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	2100      	movs	r1, #0
 800ae10:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	23ae      	movs	r3, #174	; 0xae
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	58d3      	ldr	r3, [r2, r3]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	23ad      	movs	r3, #173	; 0xad
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	58d3      	ldr	r3, [r2, r3]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	b2d9      	uxtb	r1, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	0018      	movs	r0, r3
 800ae32:	4790      	blx	r2
  }

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b002      	add	sp, #8
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	000a      	movs	r2, r1
 800ae48:	1cfb      	adds	r3, r7, #3
 800ae4a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	1cfa      	adds	r2, r7, #3
 800ae50:	7812      	ldrb	r2, [r2, #0]
 800ae52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	0018      	movs	r0, r3
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	b002      	add	sp, #8
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	23a7      	movs	r3, #167	; 0xa7
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	5cd1      	ldrb	r1, [r2, r3]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <USBD_LL_Suspend+0x2c>)
 800ae74:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	23a7      	movs	r3, #167	; 0xa7
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	0018      	movs	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b002      	add	sp, #8
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	46c0      	nop			; (mov r8, r8)
 800ae8c:	0000029d 	.word	0x0000029d

0800ae90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	23a7      	movs	r3, #167	; 0xa7
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	5cd3      	ldrb	r3, [r2, r3]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d106      	bne.n	800aeb2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a05      	ldr	r2, [pc, #20]	; (800aebc <USBD_LL_Resume+0x2c>)
 800aea8:	5c99      	ldrb	r1, [r3, r2]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	23a7      	movs	r3, #167	; 0xa7
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	0000029d 	.word	0x0000029d

0800aec0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	23a7      	movs	r3, #167	; 0xa7
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	5cd3      	ldrb	r3, [r2, r3]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d10e      	bne.n	800aef2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	23ad      	movs	r3, #173	; 0xad
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	58d3      	ldr	r3, [r2, r3]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	23ad      	movs	r3, #173	; 0xad
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	58d3      	ldr	r3, [r2, r3]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	0010      	movs	r0, r2
 800aef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	0018      	movs	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	b002      	add	sp, #8
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af06:	230f      	movs	r3, #15
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	001a      	movs	r2, r3
 800af14:	2360      	movs	r3, #96	; 0x60
 800af16:	4013      	ands	r3, r2
 800af18:	2b40      	cmp	r3, #64	; 0x40
 800af1a:	d004      	beq.n	800af26 <USBD_StdDevReq+0x2a>
 800af1c:	d84f      	bhi.n	800afbe <USBD_StdDevReq+0xc2>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <USBD_StdDevReq+0x3e>
 800af22:	2b20      	cmp	r3, #32
 800af24:	d14b      	bne.n	800afbe <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	23ad      	movs	r3, #173	; 0xad
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	58d3      	ldr	r3, [r2, r3]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	0010      	movs	r0, r2
 800af36:	4798      	blx	r3
      break;
 800af38:	e048      	b.n	800afcc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	2b09      	cmp	r3, #9
 800af40:	d835      	bhi.n	800afae <USBD_StdDevReq+0xb2>
 800af42:	009a      	lsls	r2, r3, #2
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <USBD_StdDevReq+0xe0>)
 800af46:	18d3      	adds	r3, r2, r3
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0011      	movs	r1, r2
 800af52:	0018      	movs	r0, r3
 800af54:	f000 fa52 	bl	800b3fc <USBD_GetDescriptor>
          break;
 800af58:	e030      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	0011      	movs	r1, r2
 800af60:	0018      	movs	r0, r3
 800af62:	f000 fbfd 	bl	800b760 <USBD_SetAddress>
          break;
 800af66:	e029      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0011      	movs	r1, r2
 800af6e:	0018      	movs	r0, r3
 800af70:	f000 fc4a 	bl	800b808 <USBD_SetConfig>
          break;
 800af74:	e022      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	0011      	movs	r1, r2
 800af7c:	0018      	movs	r0, r3
 800af7e:	f000 fce7 	bl	800b950 <USBD_GetConfig>
          break;
 800af82:	e01b      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	0011      	movs	r1, r2
 800af8a:	0018      	movs	r0, r3
 800af8c:	f000 fd1b 	bl	800b9c6 <USBD_GetStatus>
          break;
 800af90:	e014      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	0011      	movs	r1, r2
 800af98:	0018      	movs	r0, r3
 800af9a:	f000 fd4e 	bl	800ba3a <USBD_SetFeature>
          break;
 800af9e:	e00d      	b.n	800afbc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	0011      	movs	r1, r2
 800afa6:	0018      	movs	r0, r3
 800afa8:	f000 fd5d 	bl	800ba66 <USBD_ClrFeature>
          break;
 800afac:	e006      	b.n	800afbc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0011      	movs	r1, r2
 800afb4:	0018      	movs	r0, r3
 800afb6:	f000 fdb7 	bl	800bb28 <USBD_CtlError>
          break;
 800afba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800afbc:	e006      	b.n	800afcc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	0011      	movs	r1, r2
 800afc4:	0018      	movs	r0, r3
 800afc6:	f000 fdaf 	bl	800bb28 <USBD_CtlError>
      break;
 800afca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800afcc:	230f      	movs	r3, #15
 800afce:	18fb      	adds	r3, r7, r3
 800afd0:	781b      	ldrb	r3, [r3, #0]
}
 800afd2:	0018      	movs	r0, r3
 800afd4:	46bd      	mov	sp, r7
 800afd6:	b004      	add	sp, #16
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	46c0      	nop			; (mov r8, r8)
 800afdc:	0800d270 	.word	0x0800d270

0800afe0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afea:	230f      	movs	r3, #15
 800afec:	18fb      	adds	r3, r7, r3
 800afee:	2200      	movs	r2, #0
 800aff0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	001a      	movs	r2, r3
 800aff8:	2360      	movs	r3, #96	; 0x60
 800affa:	4013      	ands	r3, r2
 800affc:	2b40      	cmp	r3, #64	; 0x40
 800affe:	d004      	beq.n	800b00a <USBD_StdItfReq+0x2a>
 800b000:	d839      	bhi.n	800b076 <USBD_StdItfReq+0x96>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <USBD_StdItfReq+0x2a>
 800b006:	2b20      	cmp	r3, #32
 800b008:	d135      	bne.n	800b076 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	23a7      	movs	r3, #167	; 0xa7
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	5cd3      	ldrb	r3, [r2, r3]
 800b012:	3b01      	subs	r3, #1
 800b014:	2b02      	cmp	r3, #2
 800b016:	d825      	bhi.n	800b064 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	889b      	ldrh	r3, [r3, #4]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d819      	bhi.n	800b056 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	23ad      	movs	r3, #173	; 0xad
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	58d3      	ldr	r3, [r2, r3]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	250f      	movs	r5, #15
 800b02e:	197c      	adds	r4, r7, r5
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	0010      	movs	r0, r2
 800b036:	4798      	blx	r3
 800b038:	0003      	movs	r3, r0
 800b03a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	88db      	ldrh	r3, [r3, #6]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d116      	bne.n	800b072 <USBD_StdItfReq+0x92>
 800b044:	197b      	adds	r3, r7, r5
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d112      	bne.n	800b072 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	0018      	movs	r0, r3
 800b050:	f000 fe52 	bl	800bcf8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b054:	e00d      	b.n	800b072 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f000 fd63 	bl	800bb28 <USBD_CtlError>
          break;
 800b062:	e006      	b.n	800b072 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	0011      	movs	r1, r2
 800b06a:	0018      	movs	r0, r3
 800b06c:	f000 fd5c 	bl	800bb28 <USBD_CtlError>
          break;
 800b070:	e000      	b.n	800b074 <USBD_StdItfReq+0x94>
          break;
 800b072:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b074:	e006      	b.n	800b084 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	0011      	movs	r1, r2
 800b07c:	0018      	movs	r0, r3
 800b07e:	f000 fd53 	bl	800bb28 <USBD_CtlError>
      break;
 800b082:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	0018      	movs	r0, r3
 800b088:	46bd      	mov	sp, r7
 800b08a:	b004      	add	sp, #16
 800b08c:	bdb0      	pop	{r4, r5, r7, pc}

0800b08e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b08e:	b5b0      	push	{r4, r5, r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b098:	230f      	movs	r3, #15
 800b09a:	18fb      	adds	r3, r7, r3
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	889a      	ldrh	r2, [r3, #4]
 800b0a4:	230e      	movs	r3, #14
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	001a      	movs	r2, r3
 800b0b0:	2360      	movs	r3, #96	; 0x60
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d006      	beq.n	800b0c6 <USBD_StdEPReq+0x38>
 800b0b8:	d900      	bls.n	800b0bc <USBD_StdEPReq+0x2e>
 800b0ba:	e190      	b.n	800b3de <USBD_StdEPReq+0x350>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00c      	beq.n	800b0da <USBD_StdEPReq+0x4c>
 800b0c0:	2b20      	cmp	r3, #32
 800b0c2:	d000      	beq.n	800b0c6 <USBD_StdEPReq+0x38>
 800b0c4:	e18b      	b.n	800b3de <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	23ad      	movs	r3, #173	; 0xad
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	58d3      	ldr	r3, [r2, r3]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	0010      	movs	r0, r2
 800b0d6:	4798      	blx	r3
      break;
 800b0d8:	e188      	b.n	800b3ec <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	001a      	movs	r2, r3
 800b0e0:	2360      	movs	r3, #96	; 0x60
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d10f      	bne.n	800b108 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	23ad      	movs	r3, #173	; 0xad
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	58d3      	ldr	r3, [r2, r3]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	250f      	movs	r5, #15
 800b0f4:	197c      	adds	r4, r7, r5
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	0010      	movs	r0, r2
 800b0fc:	4798      	blx	r3
 800b0fe:	0003      	movs	r3, r0
 800b100:	7023      	strb	r3, [r4, #0]

        return ret;
 800b102:	197b      	adds	r3, r7, r5
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	e174      	b.n	800b3f2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	785b      	ldrb	r3, [r3, #1]
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d007      	beq.n	800b120 <USBD_StdEPReq+0x92>
 800b110:	dd00      	ble.n	800b114 <USBD_StdEPReq+0x86>
 800b112:	e15c      	b.n	800b3ce <USBD_StdEPReq+0x340>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d100      	bne.n	800b11a <USBD_StdEPReq+0x8c>
 800b118:	e092      	b.n	800b240 <USBD_StdEPReq+0x1b2>
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d04b      	beq.n	800b1b6 <USBD_StdEPReq+0x128>
 800b11e:	e156      	b.n	800b3ce <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	23a7      	movs	r3, #167	; 0xa7
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	5cd3      	ldrb	r3, [r2, r3]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d002      	beq.n	800b132 <USBD_StdEPReq+0xa4>
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d01d      	beq.n	800b16c <USBD_StdEPReq+0xde>
 800b130:	e039      	b.n	800b1a6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b132:	220e      	movs	r2, #14
 800b134:	18bb      	adds	r3, r7, r2
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d010      	beq.n	800b15e <USBD_StdEPReq+0xd0>
 800b13c:	18bb      	adds	r3, r7, r2
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b80      	cmp	r3, #128	; 0x80
 800b142:	d00c      	beq.n	800b15e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b144:	18bb      	adds	r3, r7, r2
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	0011      	movs	r1, r2
 800b14c:	0018      	movs	r0, r3
 800b14e:	f001 f9d8 	bl	800c502 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2180      	movs	r1, #128	; 0x80
 800b156:	0018      	movs	r0, r3
 800b158:	f001 f9d3 	bl	800c502 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b15c:	e02a      	b.n	800b1b4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	0011      	movs	r1, r2
 800b164:	0018      	movs	r0, r3
 800b166:	f000 fcdf 	bl	800bb28 <USBD_CtlError>
              break;
 800b16a:	e023      	b.n	800b1b4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	885b      	ldrh	r3, [r3, #2]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d113      	bne.n	800b19c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b174:	220e      	movs	r2, #14
 800b176:	18bb      	adds	r3, r7, r2
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00e      	beq.n	800b19c <USBD_StdEPReq+0x10e>
 800b17e:	18bb      	adds	r3, r7, r2
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b80      	cmp	r3, #128	; 0x80
 800b184:	d00a      	beq.n	800b19c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b18e:	18bb      	adds	r3, r7, r2
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	0011      	movs	r1, r2
 800b196:	0018      	movs	r0, r3
 800b198:	f001 f9b3 	bl	800c502 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	0018      	movs	r0, r3
 800b1a0:	f000 fdaa 	bl	800bcf8 <USBD_CtlSendStatus>

              break;
 800b1a4:	e006      	b.n	800b1b4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	0011      	movs	r1, r2
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f000 fcbb 	bl	800bb28 <USBD_CtlError>
              break;
 800b1b2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b1b4:	e112      	b.n	800b3dc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	23a7      	movs	r3, #167	; 0xa7
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	5cd3      	ldrb	r3, [r2, r3]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d002      	beq.n	800b1c8 <USBD_StdEPReq+0x13a>
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d01d      	beq.n	800b202 <USBD_StdEPReq+0x174>
 800b1c6:	e032      	b.n	800b22e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1c8:	220e      	movs	r2, #14
 800b1ca:	18bb      	adds	r3, r7, r2
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d010      	beq.n	800b1f4 <USBD_StdEPReq+0x166>
 800b1d2:	18bb      	adds	r3, r7, r2
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b80      	cmp	r3, #128	; 0x80
 800b1d8:	d00c      	beq.n	800b1f4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1da:	18bb      	adds	r3, r7, r2
 800b1dc:	781a      	ldrb	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	0011      	movs	r1, r2
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f001 f98d 	bl	800c502 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2180      	movs	r1, #128	; 0x80
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	f001 f988 	bl	800c502 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1f2:	e024      	b.n	800b23e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	0011      	movs	r1, r2
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f000 fc94 	bl	800bb28 <USBD_CtlError>
              break;
 800b200:	e01d      	b.n	800b23e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d118      	bne.n	800b23c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b20a:	210e      	movs	r1, #14
 800b20c:	187b      	adds	r3, r7, r1
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	227f      	movs	r2, #127	; 0x7f
 800b212:	4013      	ands	r3, r2
 800b214:	d006      	beq.n	800b224 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b216:	187b      	adds	r3, r7, r1
 800b218:	781a      	ldrb	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	0011      	movs	r1, r2
 800b21e:	0018      	movs	r0, r3
 800b220:	f001 f99a 	bl	800c558 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	0018      	movs	r0, r3
 800b228:	f000 fd66 	bl	800bcf8 <USBD_CtlSendStatus>
              }
              break;
 800b22c:	e006      	b.n	800b23c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	0011      	movs	r1, r2
 800b234:	0018      	movs	r0, r3
 800b236:	f000 fc77 	bl	800bb28 <USBD_CtlError>
              break;
 800b23a:	e000      	b.n	800b23e <USBD_StdEPReq+0x1b0>
              break;
 800b23c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b23e:	e0cd      	b.n	800b3dc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	23a7      	movs	r3, #167	; 0xa7
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	5cd3      	ldrb	r3, [r2, r3]
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d002      	beq.n	800b252 <USBD_StdEPReq+0x1c4>
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d03c      	beq.n	800b2ca <USBD_StdEPReq+0x23c>
 800b250:	e0b5      	b.n	800b3be <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b252:	220e      	movs	r2, #14
 800b254:	18bb      	adds	r3, r7, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <USBD_StdEPReq+0x1e4>
 800b25c:	18bb      	adds	r3, r7, r2
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b80      	cmp	r3, #128	; 0x80
 800b262:	d006      	beq.n	800b272 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	0011      	movs	r1, r2
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 fc5c 	bl	800bb28 <USBD_CtlError>
                break;
 800b270:	e0ac      	b.n	800b3cc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b272:	220e      	movs	r2, #14
 800b274:	18bb      	adds	r3, r7, r2
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	b25b      	sxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	da0c      	bge.n	800b298 <USBD_StdEPReq+0x20a>
 800b27e:	18bb      	adds	r3, r7, r2
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	227f      	movs	r2, #127	; 0x7f
 800b284:	401a      	ands	r2, r3
 800b286:	0013      	movs	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	189b      	adds	r3, r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	3310      	adds	r3, #16
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	18d3      	adds	r3, r2, r3
 800b294:	3304      	adds	r3, #4
 800b296:	e00d      	b.n	800b2b4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b298:	230e      	movs	r3, #14
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	227f      	movs	r2, #127	; 0x7f
 800b2a0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a2:	0013      	movs	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	3351      	adds	r3, #81	; 0x51
 800b2ac:	33ff      	adds	r3, #255	; 0xff
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	18d3      	adds	r3, r2, r3
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f000 fcae 	bl	800bc24 <USBD_CtlSendData>
              break;
 800b2c8:	e080      	b.n	800b3cc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2ca:	220e      	movs	r2, #14
 800b2cc:	18bb      	adds	r3, r7, r2
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	b25b      	sxtb	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da14      	bge.n	800b300 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2d6:	18bb      	adds	r3, r7, r2
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	220f      	movs	r2, #15
 800b2dc:	401a      	ands	r2, r3
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	0013      	movs	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	189b      	adds	r3, r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	18cb      	adds	r3, r1, r3
 800b2ea:	3318      	adds	r3, #24
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d11e      	bne.n	800b330 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	0011      	movs	r1, r2
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f000 fc15 	bl	800bb28 <USBD_CtlError>
                  break;
 800b2fe:	e065      	b.n	800b3cc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b300:	230e      	movs	r3, #14
 800b302:	18fb      	adds	r3, r7, r3
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	220f      	movs	r2, #15
 800b308:	401a      	ands	r2, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	23ac      	movs	r3, #172	; 0xac
 800b30e:	0059      	lsls	r1, r3, #1
 800b310:	0013      	movs	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	189b      	adds	r3, r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	18c3      	adds	r3, r0, r3
 800b31a:	185b      	adds	r3, r3, r1
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	0011      	movs	r1, r2
 800b328:	0018      	movs	r0, r3
 800b32a:	f000 fbfd 	bl	800bb28 <USBD_CtlError>
                  break;
 800b32e:	e04d      	b.n	800b3cc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b330:	220e      	movs	r2, #14
 800b332:	18bb      	adds	r3, r7, r2
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b25b      	sxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	da0c      	bge.n	800b356 <USBD_StdEPReq+0x2c8>
 800b33c:	18bb      	adds	r3, r7, r2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	227f      	movs	r2, #127	; 0x7f
 800b342:	401a      	ands	r2, r3
 800b344:	0013      	movs	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	189b      	adds	r3, r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	3310      	adds	r3, #16
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	18d3      	adds	r3, r2, r3
 800b352:	3304      	adds	r3, #4
 800b354:	e00d      	b.n	800b372 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b356:	230e      	movs	r3, #14
 800b358:	18fb      	adds	r3, r7, r3
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	227f      	movs	r2, #127	; 0x7f
 800b35e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b360:	0013      	movs	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	189b      	adds	r3, r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	3351      	adds	r3, #81	; 0x51
 800b36a:	33ff      	adds	r3, #255	; 0xff
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	18d3      	adds	r3, r2, r3
 800b370:	3304      	adds	r3, #4
 800b372:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b374:	220e      	movs	r2, #14
 800b376:	18bb      	adds	r3, r7, r2
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <USBD_StdEPReq+0x2f8>
 800b37e:	18bb      	adds	r3, r7, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d103      	bne.n	800b38e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	e010      	b.n	800b3b0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b38e:	230e      	movs	r3, #14
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	0011      	movs	r1, r2
 800b398:	0018      	movs	r0, r3
 800b39a:	f001 f908 	bl	800c5ae <USBD_LL_IsStallEP>
 800b39e:	1e03      	subs	r3, r0, #0
 800b3a0:	d003      	beq.n	800b3aa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e002      	b.n	800b3b0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	f000 fc34 	bl	800bc24 <USBD_CtlSendData>
              break;
 800b3bc:	e006      	b.n	800b3cc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	0011      	movs	r1, r2
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	f000 fbaf 	bl	800bb28 <USBD_CtlError>
              break;
 800b3ca:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b3cc:	e006      	b.n	800b3dc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	0011      	movs	r1, r2
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	f000 fba7 	bl	800bb28 <USBD_CtlError>
          break;
 800b3da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b3dc:	e006      	b.n	800b3ec <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	0011      	movs	r1, r2
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	f000 fb9f 	bl	800bb28 <USBD_CtlError>
      break;
 800b3ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b3ec:	230f      	movs	r3, #15
 800b3ee:	18fb      	adds	r3, r7, r3
 800b3f0:	781b      	ldrb	r3, [r3, #0]
}
 800b3f2:	0018      	movs	r0, r3
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	b004      	add	sp, #16
 800b3f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b3fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b406:	2308      	movs	r3, #8
 800b408:	18fb      	adds	r3, r7, r3
 800b40a:	2200      	movs	r2, #0
 800b40c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b412:	230b      	movs	r3, #11
 800b414:	18fb      	adds	r3, r7, r3
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	0a1b      	lsrs	r3, r3, #8
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b07      	cmp	r3, #7
 800b424:	d900      	bls.n	800b428 <USBD_GetDescriptor+0x2c>
 800b426:	e159      	b.n	800b6dc <USBD_GetDescriptor+0x2e0>
 800b428:	009a      	lsls	r2, r3, #2
 800b42a:	4bcb      	ldr	r3, [pc, #812]	; (800b758 <USBD_GetDescriptor+0x35c>)
 800b42c:	18d3      	adds	r3, r2, r3
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	23ac      	movs	r3, #172	; 0xac
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	58d3      	ldr	r3, [r2, r3]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	2108      	movs	r1, #8
 800b442:	1879      	adds	r1, r7, r1
 800b444:	0010      	movs	r0, r2
 800b446:	4798      	blx	r3
 800b448:	0003      	movs	r3, r0
 800b44a:	60fb      	str	r3, [r7, #12]
      break;
 800b44c:	e153      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	7c1b      	ldrb	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10f      	bne.n	800b476 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	23ad      	movs	r3, #173	; 0xad
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	58d3      	ldr	r3, [r2, r3]
 800b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b460:	2208      	movs	r2, #8
 800b462:	18ba      	adds	r2, r7, r2
 800b464:	0010      	movs	r0, r2
 800b466:	4798      	blx	r3
 800b468:	0003      	movs	r3, r0
 800b46a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3301      	adds	r3, #1
 800b470:	2202      	movs	r2, #2
 800b472:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b474:	e13f      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	23ad      	movs	r3, #173	; 0xad
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	58d3      	ldr	r3, [r2, r3]
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	2208      	movs	r2, #8
 800b482:	18ba      	adds	r2, r7, r2
 800b484:	0010      	movs	r0, r2
 800b486:	4798      	blx	r3
 800b488:	0003      	movs	r3, r0
 800b48a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3301      	adds	r3, #1
 800b490:	2202      	movs	r2, #2
 800b492:	701a      	strb	r2, [r3, #0]
      break;
 800b494:	e12f      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b05      	cmp	r3, #5
 800b49e:	d900      	bls.n	800b4a2 <USBD_GetDescriptor+0xa6>
 800b4a0:	e0d0      	b.n	800b644 <USBD_GetDescriptor+0x248>
 800b4a2:	009a      	lsls	r2, r3, #2
 800b4a4:	4bad      	ldr	r3, [pc, #692]	; (800b75c <USBD_GetDescriptor+0x360>)
 800b4a6:	18d3      	adds	r3, r2, r3
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	23ac      	movs	r3, #172	; 0xac
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	58d3      	ldr	r3, [r2, r3]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00d      	beq.n	800b4d6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	23ac      	movs	r3, #172	; 0xac
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	58d3      	ldr	r3, [r2, r3]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	7c12      	ldrb	r2, [r2, #16]
 800b4c8:	2108      	movs	r1, #8
 800b4ca:	1879      	adds	r1, r7, r1
 800b4cc:	0010      	movs	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d4:	e0c3      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	0011      	movs	r1, r2
 800b4dc:	0018      	movs	r0, r3
 800b4de:	f000 fb23 	bl	800bb28 <USBD_CtlError>
            err++;
 800b4e2:	210b      	movs	r1, #11
 800b4e4:	187b      	adds	r3, r7, r1
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	187b      	adds	r3, r7, r1
 800b4ea:	3201      	adds	r2, #1
 800b4ec:	701a      	strb	r2, [r3, #0]
          break;
 800b4ee:	e0b6      	b.n	800b65e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	23ac      	movs	r3, #172	; 0xac
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	58d3      	ldr	r3, [r2, r3]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	23ac      	movs	r3, #172	; 0xac
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	58d3      	ldr	r3, [r2, r3]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	7c12      	ldrb	r2, [r2, #16]
 800b50c:	2108      	movs	r1, #8
 800b50e:	1879      	adds	r1, r7, r1
 800b510:	0010      	movs	r0, r2
 800b512:	4798      	blx	r3
 800b514:	0003      	movs	r3, r0
 800b516:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b518:	e0a1      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	0011      	movs	r1, r2
 800b520:	0018      	movs	r0, r3
 800b522:	f000 fb01 	bl	800bb28 <USBD_CtlError>
            err++;
 800b526:	210b      	movs	r1, #11
 800b528:	187b      	adds	r3, r7, r1
 800b52a:	781a      	ldrb	r2, [r3, #0]
 800b52c:	187b      	adds	r3, r7, r1
 800b52e:	3201      	adds	r2, #1
 800b530:	701a      	strb	r2, [r3, #0]
          break;
 800b532:	e094      	b.n	800b65e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	23ac      	movs	r3, #172	; 0xac
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	58d3      	ldr	r3, [r2, r3]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00d      	beq.n	800b55e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	23ac      	movs	r3, #172	; 0xac
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	58d3      	ldr	r3, [r2, r3]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7c12      	ldrb	r2, [r2, #16]
 800b550:	2108      	movs	r1, #8
 800b552:	1879      	adds	r1, r7, r1
 800b554:	0010      	movs	r0, r2
 800b556:	4798      	blx	r3
 800b558:	0003      	movs	r3, r0
 800b55a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55c:	e07f      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	0011      	movs	r1, r2
 800b564:	0018      	movs	r0, r3
 800b566:	f000 fadf 	bl	800bb28 <USBD_CtlError>
            err++;
 800b56a:	210b      	movs	r1, #11
 800b56c:	187b      	adds	r3, r7, r1
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	187b      	adds	r3, r7, r1
 800b572:	3201      	adds	r2, #1
 800b574:	701a      	strb	r2, [r3, #0]
          break;
 800b576:	e072      	b.n	800b65e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	23ac      	movs	r3, #172	; 0xac
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	58d3      	ldr	r3, [r2, r3]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00d      	beq.n	800b5a2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	23ac      	movs	r3, #172	; 0xac
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	58d3      	ldr	r3, [r2, r3]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	7c12      	ldrb	r2, [r2, #16]
 800b594:	2108      	movs	r1, #8
 800b596:	1879      	adds	r1, r7, r1
 800b598:	0010      	movs	r0, r2
 800b59a:	4798      	blx	r3
 800b59c:	0003      	movs	r3, r0
 800b59e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a0:	e05d      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	0011      	movs	r1, r2
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f000 fabd 	bl	800bb28 <USBD_CtlError>
            err++;
 800b5ae:	210b      	movs	r1, #11
 800b5b0:	187b      	adds	r3, r7, r1
 800b5b2:	781a      	ldrb	r2, [r3, #0]
 800b5b4:	187b      	adds	r3, r7, r1
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
          break;
 800b5ba:	e050      	b.n	800b65e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	23ac      	movs	r3, #172	; 0xac
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	58d3      	ldr	r3, [r2, r3]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00d      	beq.n	800b5e6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	23ac      	movs	r3, #172	; 0xac
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	58d3      	ldr	r3, [r2, r3]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	7c12      	ldrb	r2, [r2, #16]
 800b5d8:	2108      	movs	r1, #8
 800b5da:	1879      	adds	r1, r7, r1
 800b5dc:	0010      	movs	r0, r2
 800b5de:	4798      	blx	r3
 800b5e0:	0003      	movs	r3, r0
 800b5e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e4:	e03b      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	0011      	movs	r1, r2
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	f000 fa9b 	bl	800bb28 <USBD_CtlError>
            err++;
 800b5f2:	210b      	movs	r1, #11
 800b5f4:	187b      	adds	r3, r7, r1
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	187b      	adds	r3, r7, r1
 800b5fa:	3201      	adds	r2, #1
 800b5fc:	701a      	strb	r2, [r3, #0]
          break;
 800b5fe:	e02e      	b.n	800b65e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	23ac      	movs	r3, #172	; 0xac
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	58d3      	ldr	r3, [r2, r3]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00d      	beq.n	800b62a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	23ac      	movs	r3, #172	; 0xac
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	58d3      	ldr	r3, [r2, r3]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	7c12      	ldrb	r2, [r2, #16]
 800b61c:	2108      	movs	r1, #8
 800b61e:	1879      	adds	r1, r7, r1
 800b620:	0010      	movs	r0, r2
 800b622:	4798      	blx	r3
 800b624:	0003      	movs	r3, r0
 800b626:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b628:	e019      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	0011      	movs	r1, r2
 800b630:	0018      	movs	r0, r3
 800b632:	f000 fa79 	bl	800bb28 <USBD_CtlError>
            err++;
 800b636:	210b      	movs	r1, #11
 800b638:	187b      	adds	r3, r7, r1
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	187b      	adds	r3, r7, r1
 800b63e:	3201      	adds	r2, #1
 800b640:	701a      	strb	r2, [r3, #0]
          break;
 800b642:	e00c      	b.n	800b65e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	0011      	movs	r1, r2
 800b64a:	0018      	movs	r0, r3
 800b64c:	f000 fa6c 	bl	800bb28 <USBD_CtlError>
          err++;
 800b650:	210b      	movs	r1, #11
 800b652:	187b      	adds	r3, r7, r1
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	187b      	adds	r3, r7, r1
 800b658:	3201      	adds	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b65c:	e04b      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>
 800b65e:	e04a      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7c1b      	ldrb	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10b      	bne.n	800b680 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	23ad      	movs	r3, #173	; 0xad
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	58d3      	ldr	r3, [r2, r3]
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	2208      	movs	r2, #8
 800b674:	18ba      	adds	r2, r7, r2
 800b676:	0010      	movs	r0, r2
 800b678:	4798      	blx	r3
 800b67a:	0003      	movs	r3, r0
 800b67c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b67e:	e03a      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	0011      	movs	r1, r2
 800b686:	0018      	movs	r0, r3
 800b688:	f000 fa4e 	bl	800bb28 <USBD_CtlError>
        err++;
 800b68c:	210b      	movs	r1, #11
 800b68e:	187b      	adds	r3, r7, r1
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	187b      	adds	r3, r7, r1
 800b694:	3201      	adds	r2, #1
 800b696:	701a      	strb	r2, [r3, #0]
      break;
 800b698:	e02d      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	7c1b      	ldrb	r3, [r3, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10f      	bne.n	800b6c2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	23ad      	movs	r3, #173	; 0xad
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	58d3      	ldr	r3, [r2, r3]
 800b6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	18ba      	adds	r2, r7, r2
 800b6b0:	0010      	movs	r0, r2
 800b6b2:	4798      	blx	r3
 800b6b4:	0003      	movs	r3, r0
 800b6b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	2207      	movs	r2, #7
 800b6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6c0:	e019      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	0011      	movs	r1, r2
 800b6c8:	0018      	movs	r0, r3
 800b6ca:	f000 fa2d 	bl	800bb28 <USBD_CtlError>
        err++;
 800b6ce:	210b      	movs	r1, #11
 800b6d0:	187b      	adds	r3, r7, r1
 800b6d2:	781a      	ldrb	r2, [r3, #0]
 800b6d4:	187b      	adds	r3, r7, r1
 800b6d6:	3201      	adds	r2, #1
 800b6d8:	701a      	strb	r2, [r3, #0]
      break;
 800b6da:	e00c      	b.n	800b6f6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	0011      	movs	r1, r2
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f000 fa20 	bl	800bb28 <USBD_CtlError>
      err++;
 800b6e8:	210b      	movs	r1, #11
 800b6ea:	187b      	adds	r3, r7, r1
 800b6ec:	781a      	ldrb	r2, [r3, #0]
 800b6ee:	187b      	adds	r3, r7, r1
 800b6f0:	3201      	adds	r2, #1
 800b6f2:	701a      	strb	r2, [r3, #0]
      break;
 800b6f4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b6f6:	230b      	movs	r3, #11
 800b6f8:	18fb      	adds	r3, r7, r3
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d127      	bne.n	800b750 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b700:	2108      	movs	r1, #8
 800b702:	187b      	adds	r3, r7, r1
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d019      	beq.n	800b73e <USBD_GetDescriptor+0x342>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	88db      	ldrh	r3, [r3, #6]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d015      	beq.n	800b73e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	88da      	ldrh	r2, [r3, #6]
 800b716:	187b      	adds	r3, r7, r1
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	1c18      	adds	r0, r3, #0
 800b71c:	1c11      	adds	r1, r2, #0
 800b71e:	b28a      	uxth	r2, r1
 800b720:	b283      	uxth	r3, r0
 800b722:	429a      	cmp	r2, r3
 800b724:	d900      	bls.n	800b728 <USBD_GetDescriptor+0x32c>
 800b726:	1c01      	adds	r1, r0, #0
 800b728:	b28a      	uxth	r2, r1
 800b72a:	2108      	movs	r1, #8
 800b72c:	187b      	adds	r3, r7, r1
 800b72e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b730:	187b      	adds	r3, r7, r1
 800b732:	881a      	ldrh	r2, [r3, #0]
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	0018      	movs	r0, r3
 800b73a:	f000 fa73 	bl	800bc24 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	88db      	ldrh	r3, [r3, #6]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d105      	bne.n	800b752 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	0018      	movs	r0, r3
 800b74a:	f000 fad5 	bl	800bcf8 <USBD_CtlSendStatus>
 800b74e:	e000      	b.n	800b752 <USBD_GetDescriptor+0x356>
    return;
 800b750:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b752:	46bd      	mov	sp, r7
 800b754:	b004      	add	sp, #16
 800b756:	bd80      	pop	{r7, pc}
 800b758:	0800d298 	.word	0x0800d298
 800b75c:	0800d2b8 	.word	0x0800d2b8

0800b760 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	889b      	ldrh	r3, [r3, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d13d      	bne.n	800b7ee <USBD_SetAddress+0x8e>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	88db      	ldrh	r3, [r3, #6]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d139      	bne.n	800b7ee <USBD_SetAddress+0x8e>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	2b7f      	cmp	r3, #127	; 0x7f
 800b780:	d835      	bhi.n	800b7ee <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	b2da      	uxtb	r2, r3
 800b788:	230f      	movs	r3, #15
 800b78a:	18fb      	adds	r3, r7, r3
 800b78c:	217f      	movs	r1, #127	; 0x7f
 800b78e:	400a      	ands	r2, r1
 800b790:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	23a7      	movs	r3, #167	; 0xa7
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	5cd3      	ldrb	r3, [r2, r3]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d106      	bne.n	800b7ac <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	0011      	movs	r1, r2
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f000 f9bf 	bl	800bb28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7aa:	e027      	b.n	800b7fc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	240f      	movs	r4, #15
 800b7b0:	193a      	adds	r2, r7, r4
 800b7b2:	4914      	ldr	r1, [pc, #80]	; (800b804 <USBD_SetAddress+0xa4>)
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7b8:	193b      	adds	r3, r7, r4
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	0011      	movs	r1, r2
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f000 ff25 	bl	800c610 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	f000 fa95 	bl	800bcf8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7ce:	193b      	adds	r3, r7, r4
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	23a7      	movs	r3, #167	; 0xa7
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	2102      	movs	r1, #2
 800b7de:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e0:	e00c      	b.n	800b7fc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	23a7      	movs	r3, #167	; 0xa7
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ec:	e006      	b.n	800b7fc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	0011      	movs	r1, r2
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f000 f997 	bl	800bb28 <USBD_CtlError>
  }
}
 800b7fa:	46c0      	nop			; (mov r8, r8)
 800b7fc:	46c0      	nop			; (mov r8, r8)
 800b7fe:	46bd      	mov	sp, r7
 800b800:	b005      	add	sp, #20
 800b802:	bd90      	pop	{r4, r7, pc}
 800b804:	0000029e 	.word	0x0000029e

0800b808 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	885b      	ldrh	r3, [r3, #2]
 800b816:	b2da      	uxtb	r2, r3
 800b818:	4b4c      	ldr	r3, [pc, #304]	; (800b94c <USBD_SetConfig+0x144>)
 800b81a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b81c:	4b4b      	ldr	r3, [pc, #300]	; (800b94c <USBD_SetConfig+0x144>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d906      	bls.n	800b832 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	0011      	movs	r1, r2
 800b82a:	0018      	movs	r0, r3
 800b82c:	f000 f97c 	bl	800bb28 <USBD_CtlError>
 800b830:	e088      	b.n	800b944 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	23a7      	movs	r3, #167	; 0xa7
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	5cd3      	ldrb	r3, [r2, r3]
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d002      	beq.n	800b844 <USBD_SetConfig+0x3c>
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d029      	beq.n	800b896 <USBD_SetConfig+0x8e>
 800b842:	e071      	b.n	800b928 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b844:	4b41      	ldr	r3, [pc, #260]	; (800b94c <USBD_SetConfig+0x144>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01f      	beq.n	800b88c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b84c:	4b3f      	ldr	r3, [pc, #252]	; (800b94c <USBD_SetConfig+0x144>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	001a      	movs	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	23a7      	movs	r3, #167	; 0xa7
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	2103      	movs	r1, #3
 800b85e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b860:	4b3a      	ldr	r3, [pc, #232]	; (800b94c <USBD_SetConfig+0x144>)
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	0011      	movs	r1, r2
 800b868:	0018      	movs	r0, r3
 800b86a:	f7ff f8c6 	bl	800a9fa <USBD_SetClassConfig>
 800b86e:	0003      	movs	r3, r0
 800b870:	2b02      	cmp	r3, #2
 800b872:	d106      	bne.n	800b882 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	0011      	movs	r1, r2
 800b87a:	0018      	movs	r0, r3
 800b87c:	f000 f954 	bl	800bb28 <USBD_CtlError>
            return;
 800b880:	e060      	b.n	800b944 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	0018      	movs	r0, r3
 800b886:	f000 fa37 	bl	800bcf8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b88a:	e05b      	b.n	800b944 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	0018      	movs	r0, r3
 800b890:	f000 fa32 	bl	800bcf8 <USBD_CtlSendStatus>
        break;
 800b894:	e056      	b.n	800b944 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b896:	4b2d      	ldr	r3, [pc, #180]	; (800b94c <USBD_SetConfig+0x144>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d115      	bne.n	800b8ca <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	23a7      	movs	r3, #167	; 0xa7
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b8a8:	4b28      	ldr	r3, [pc, #160]	; (800b94c <USBD_SetConfig+0x144>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	001a      	movs	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b8b2:	4b26      	ldr	r3, [pc, #152]	; (800b94c <USBD_SetConfig+0x144>)
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	0011      	movs	r1, r2
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7ff f8c4 	bl	800aa48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f000 fa18 	bl	800bcf8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b8c8:	e03c      	b.n	800b944 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b8ca:	4b20      	ldr	r3, [pc, #128]	; (800b94c <USBD_SetConfig+0x144>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	001a      	movs	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d022      	beq.n	800b91e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	0011      	movs	r1, r2
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f7ff f8b0 	bl	800aa48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b8e8:	4b18      	ldr	r3, [pc, #96]	; (800b94c <USBD_SetConfig+0x144>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b8f2:	4b16      	ldr	r3, [pc, #88]	; (800b94c <USBD_SetConfig+0x144>)
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	0011      	movs	r1, r2
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	f7ff f87d 	bl	800a9fa <USBD_SetClassConfig>
 800b900:	0003      	movs	r3, r0
 800b902:	2b02      	cmp	r3, #2
 800b904:	d106      	bne.n	800b914 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	0011      	movs	r1, r2
 800b90c:	0018      	movs	r0, r3
 800b90e:	f000 f90b 	bl	800bb28 <USBD_CtlError>
            return;
 800b912:	e017      	b.n	800b944 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	0018      	movs	r0, r3
 800b918:	f000 f9ee 	bl	800bcf8 <USBD_CtlSendStatus>
        break;
 800b91c:	e012      	b.n	800b944 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	0018      	movs	r0, r3
 800b922:	f000 f9e9 	bl	800bcf8 <USBD_CtlSendStatus>
        break;
 800b926:	e00d      	b.n	800b944 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0011      	movs	r1, r2
 800b92e:	0018      	movs	r0, r3
 800b930:	f000 f8fa 	bl	800bb28 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <USBD_SetConfig+0x144>)
 800b936:	781a      	ldrb	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	0011      	movs	r1, r2
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7ff f883 	bl	800aa48 <USBD_ClrClassConfig>
        break;
 800b942:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b944:	46bd      	mov	sp, r7
 800b946:	b002      	add	sp, #8
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	46c0      	nop			; (mov r8, r8)
 800b94c:	20000264 	.word	0x20000264

0800b950 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	88db      	ldrh	r3, [r3, #6]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d006      	beq.n	800b970 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0011      	movs	r1, r2
 800b968:	0018      	movs	r0, r3
 800b96a:	f000 f8dd 	bl	800bb28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b96e:	e026      	b.n	800b9be <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	23a7      	movs	r3, #167	; 0xa7
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	5cd3      	ldrb	r3, [r2, r3]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	dc02      	bgt.n	800b982 <USBD_GetConfig+0x32>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dc03      	bgt.n	800b988 <USBD_GetConfig+0x38>
 800b980:	e016      	b.n	800b9b0 <USBD_GetConfig+0x60>
 800b982:	2b03      	cmp	r3, #3
 800b984:	d00c      	beq.n	800b9a0 <USBD_GetConfig+0x50>
 800b986:	e013      	b.n	800b9b0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	3308      	adds	r3, #8
 800b992:	0019      	movs	r1, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	0018      	movs	r0, r3
 800b99a:	f000 f943 	bl	800bc24 <USBD_CtlSendData>
        break;
 800b99e:	e00e      	b.n	800b9be <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	1d19      	adds	r1, r3, #4
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f000 f93b 	bl	800bc24 <USBD_CtlSendData>
        break;
 800b9ae:	e006      	b.n	800b9be <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	0011      	movs	r1, r2
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	f000 f8b6 	bl	800bb28 <USBD_CtlError>
        break;
 800b9bc:	46c0      	nop			; (mov r8, r8)
}
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	b002      	add	sp, #8
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	23a7      	movs	r3, #167	; 0xa7
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	5cd3      	ldrb	r3, [r2, r3]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d822      	bhi.n	800ba24 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	88db      	ldrh	r3, [r3, #6]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d006      	beq.n	800b9f4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	0011      	movs	r1, r2
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f000 f89b 	bl	800bb28 <USBD_CtlError>
        break;
 800b9f2:	e01e      	b.n	800ba32 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	23a9      	movs	r3, #169	; 0xa9
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	58d3      	ldr	r3, [r2, r3]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	330c      	adds	r3, #12
 800ba16:	0019      	movs	r1, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	f000 f901 	bl	800bc24 <USBD_CtlSendData>
      break;
 800ba22:	e006      	b.n	800ba32 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0011      	movs	r1, r2
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f000 f87c 	bl	800bb28 <USBD_CtlError>
      break;
 800ba30:	46c0      	nop			; (mov r8, r8)
  }
}
 800ba32:	46c0      	nop			; (mov r8, r8)
 800ba34:	46bd      	mov	sp, r7
 800ba36:	b002      	add	sp, #8
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	885b      	ldrh	r3, [r3, #2]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d108      	bne.n	800ba5e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	23a9      	movs	r3, #169	; 0xa9
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	2101      	movs	r1, #1
 800ba54:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f000 f94d 	bl	800bcf8 <USBD_CtlSendStatus>
  }
}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	46bd      	mov	sp, r7
 800ba62:	b002      	add	sp, #8
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	23a7      	movs	r3, #167	; 0xa7
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	5cd3      	ldrb	r3, [r2, r3]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d80d      	bhi.n	800ba9a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	885b      	ldrh	r3, [r3, #2]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d110      	bne.n	800baa8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	23a9      	movs	r3, #169	; 0xa9
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	0018      	movs	r0, r3
 800ba94:	f000 f930 	bl	800bcf8 <USBD_CtlSendStatus>
      }
      break;
 800ba98:	e006      	b.n	800baa8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	0011      	movs	r1, r2
 800baa0:	0018      	movs	r0, r3
 800baa2:	f000 f841 	bl	800bb28 <USBD_CtlError>
      break;
 800baa6:	e000      	b.n	800baaa <USBD_ClrFeature+0x44>
      break;
 800baa8:	46c0      	nop			; (mov r8, r8)
  }
}
 800baaa:	46c0      	nop			; (mov r8, r8)
 800baac:	46bd      	mov	sp, r7
 800baae:	b002      	add	sp, #8
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b082      	sub	sp, #8
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	785a      	ldrb	r2, [r3, #1]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	3302      	adds	r3, #2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	3303      	adds	r3, #3
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b29b      	uxth	r3, r3
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	b29b      	uxth	r3, r3
 800bae0:	18d3      	adds	r3, r2, r3
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	3304      	adds	r3, #4
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b29a      	uxth	r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	3305      	adds	r3, #5
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	021b      	lsls	r3, r3, #8
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	18d3      	adds	r3, r2, r3
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	3306      	adds	r3, #6
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	3307      	adds	r3, #7
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	021b      	lsls	r3, r3, #8
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	18d3      	adds	r3, r2, r3
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	80da      	strh	r2, [r3, #6]

}
 800bb20:	46c0      	nop			; (mov r8, r8)
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b002      	add	sp, #8
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2180      	movs	r1, #128	; 0x80
 800bb36:	0018      	movs	r0, r3
 800bb38:	f000 fce3 	bl	800c502 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2100      	movs	r1, #0
 800bb40:	0018      	movs	r0, r3
 800bb42:	f000 fcde 	bl	800c502 <USBD_LL_StallEP>
}
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	b002      	add	sp, #8
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb4e:	b590      	push	{r4, r7, lr}
 800bb50:	b087      	sub	sp, #28
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb5a:	2417      	movs	r4, #23
 800bb5c:	193b      	adds	r3, r7, r4
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d03c      	beq.n	800bbe2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f000 f83d 	bl	800bbea <USBD_GetLen>
 800bb70:	0003      	movs	r3, r0
 800bb72:	3301      	adds	r3, #1
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	18db      	adds	r3, r3, r3
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bb7e:	193b      	adds	r3, r7, r4
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	193a      	adds	r2, r7, r4
 800bb84:	1c59      	adds	r1, r3, #1
 800bb86:	7011      	strb	r1, [r2, #0]
 800bb88:	001a      	movs	r2, r3
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	189b      	adds	r3, r3, r2
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	7812      	ldrb	r2, [r2, #0]
 800bb92:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bb94:	193b      	adds	r3, r7, r4
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	193a      	adds	r2, r7, r4
 800bb9a:	1c59      	adds	r1, r3, #1
 800bb9c:	7011      	strb	r1, [r2, #0]
 800bb9e:	001a      	movs	r2, r3
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	189b      	adds	r3, r3, r2
 800bba4:	2203      	movs	r2, #3
 800bba6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bba8:	e017      	b.n	800bbda <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	60fa      	str	r2, [r7, #12]
 800bbb0:	2417      	movs	r4, #23
 800bbb2:	193a      	adds	r2, r7, r4
 800bbb4:	7812      	ldrb	r2, [r2, #0]
 800bbb6:	1939      	adds	r1, r7, r4
 800bbb8:	1c50      	adds	r0, r2, #1
 800bbba:	7008      	strb	r0, [r1, #0]
 800bbbc:	0011      	movs	r1, r2
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	1852      	adds	r2, r2, r1
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bbc6:	193b      	adds	r3, r7, r4
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	193a      	adds	r2, r7, r4
 800bbcc:	1c59      	adds	r1, r3, #1
 800bbce:	7011      	strb	r1, [r2, #0]
 800bbd0:	001a      	movs	r2, r3
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	189b      	adds	r3, r3, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e3      	bne.n	800bbaa <USBD_GetString+0x5c>
    }
  }
}
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	b007      	add	sp, #28
 800bbe8:	bd90      	pop	{r4, r7, pc}

0800bbea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bbf2:	230f      	movs	r3, #15
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bbfa:	e008      	b.n	800bc0e <USBD_GetLen+0x24>
  {
    len++;
 800bbfc:	210f      	movs	r1, #15
 800bbfe:	187b      	adds	r3, r7, r1
 800bc00:	781a      	ldrb	r2, [r3, #0]
 800bc02:	187b      	adds	r3, r7, r1
 800bc04:	3201      	adds	r2, #1
 800bc06:	701a      	strb	r2, [r3, #0]
    buf++;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1f2      	bne.n	800bbfc <USBD_GetLen+0x12>
  }

  return len;
 800bc16:	230f      	movs	r3, #15
 800bc18:	18fb      	adds	r3, r7, r3
 800bc1a:	781b      	ldrb	r3, [r3, #0]
}
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b004      	add	sp, #16
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	1dbb      	adds	r3, r7, #6
 800bc30:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	23a5      	movs	r3, #165	; 0xa5
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	2102      	movs	r1, #2
 800bc3a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bc3c:	1dbb      	adds	r3, r7, #6
 800bc3e:	881a      	ldrh	r2, [r3, #0]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bc44:	1dbb      	adds	r3, r7, #6
 800bc46:	881a      	ldrh	r2, [r3, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc4c:	1dbb      	adds	r3, r7, #6
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	2100      	movs	r1, #0
 800bc56:	f000 fd06 	bl	800c666 <USBD_LL_Transmit>

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b004      	add	sp, #16
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	1dbb      	adds	r3, r7, #6
 800bc70:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc72:	1dbb      	adds	r3, r7, #6
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	f000 fcf3 	bl	800c666 <USBD_LL_Transmit>

  return USBD_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	0018      	movs	r0, r3
 800bc84:	46bd      	mov	sp, r7
 800bc86:	b004      	add	sp, #16
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	1dbb      	adds	r3, r7, #6
 800bc96:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	23a5      	movs	r3, #165	; 0xa5
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	2103      	movs	r1, #3
 800bca0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bca2:	1dbb      	adds	r3, r7, #6
 800bca4:	8819      	ldrh	r1, [r3, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	23ae      	movs	r3, #174	; 0xae
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bcae:	1dbb      	adds	r3, r7, #6
 800bcb0:	8819      	ldrh	r1, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	23b0      	movs	r3, #176	; 0xb0
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcba:	1dbb      	adds	r3, r7, #6
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	f000 fd06 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	0018      	movs	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b004      	add	sp, #16
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	60f8      	str	r0, [r7, #12]
 800bcda:	60b9      	str	r1, [r7, #8]
 800bcdc:	1dbb      	adds	r3, r7, #6
 800bcde:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bce0:	1dbb      	adds	r3, r7, #6
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	2100      	movs	r1, #0
 800bcea:	f000 fcf3 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	b004      	add	sp, #16
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	23a5      	movs	r3, #165	; 0xa5
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	2104      	movs	r1, #4
 800bd08:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2100      	movs	r1, #0
 800bd12:	f000 fca8 	bl	800c666 <USBD_LL_Transmit>

  return USBD_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	0018      	movs	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b002      	add	sp, #8
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	23a5      	movs	r3, #165	; 0xa5
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	2105      	movs	r1, #5
 800bd30:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	2300      	movs	r3, #0
 800bd36:	2200      	movs	r2, #0
 800bd38:	2100      	movs	r1, #0
 800bd3a:	f000 fccb 	bl	800c6d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	0018      	movs	r0, r3
 800bd42:	46bd      	mov	sp, r7
 800bd44:	b002      	add	sp, #8
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd4c:	4914      	ldr	r1, [pc, #80]	; (800bda0 <MX_USB_DEVICE_Init+0x58>)
 800bd4e:	4b15      	ldr	r3, [pc, #84]	; (800bda4 <MX_USB_DEVICE_Init+0x5c>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	0018      	movs	r0, r3
 800bd54:	f7fe fdea 	bl	800a92c <USBD_Init>
 800bd58:	1e03      	subs	r3, r0, #0
 800bd5a:	d001      	beq.n	800bd60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bd5c:	f7f5 fca4 	bl	80016a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bd60:	4a11      	ldr	r2, [pc, #68]	; (800bda8 <MX_USB_DEVICE_Init+0x60>)
 800bd62:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <MX_USB_DEVICE_Init+0x5c>)
 800bd64:	0011      	movs	r1, r2
 800bd66:	0018      	movs	r0, r3
 800bd68:	f7fe fe11 	bl	800a98e <USBD_RegisterClass>
 800bd6c:	1e03      	subs	r3, r0, #0
 800bd6e:	d001      	beq.n	800bd74 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bd70:	f7f5 fc9a 	bl	80016a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bd74:	4a0d      	ldr	r2, [pc, #52]	; (800bdac <MX_USB_DEVICE_Init+0x64>)
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <MX_USB_DEVICE_Init+0x5c>)
 800bd78:	0011      	movs	r1, r2
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f7fe fd26 	bl	800a7cc <USBD_CDC_RegisterInterface>
 800bd80:	1e03      	subs	r3, r0, #0
 800bd82:	d001      	beq.n	800bd88 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bd84:	f7f5 fc90 	bl	80016a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bd88:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <MX_USB_DEVICE_Init+0x5c>)
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f7fe fe1f 	bl	800a9ce <USBD_Start>
 800bd90:	1e03      	subs	r3, r0, #0
 800bd92:	d001      	beq.n	800bd98 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bd94:	f7f5 fc88 	bl	80016a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd98:	46c0      	nop			; (mov r8, r8)
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	2000012c 	.word	0x2000012c
 800bda4:	200006d8 	.word	0x200006d8
 800bda8:	20000018 	.word	0x20000018
 800bdac:	2000011c 	.word	0x2000011c

0800bdb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bdb4:	4907      	ldr	r1, [pc, #28]	; (800bdd4 <CDC_Init_FS+0x24>)
 800bdb6:	4b08      	ldr	r3, [pc, #32]	; (800bdd8 <CDC_Init_FS+0x28>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	0018      	movs	r0, r3
 800bdbc:	f7fe fd21 	bl	800a802 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bdc0:	4a06      	ldr	r2, [pc, #24]	; (800bddc <CDC_Init_FS+0x2c>)
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <CDC_Init_FS+0x28>)
 800bdc4:	0011      	movs	r1, r2
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	f7fe fd37 	bl	800a83a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bdcc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bdce:	0018      	movs	r0, r3
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20000d84 	.word	0x20000d84
 800bdd8:	200006d8 	.word	0x200006d8
 800bddc:	2000099c 	.word	0x2000099c

0800bde0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bde4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bde6:	0018      	movs	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6039      	str	r1, [r7, #0]
 800bdf4:	0011      	movs	r1, r2
 800bdf6:	1dfb      	adds	r3, r7, #7
 800bdf8:	1c02      	adds	r2, r0, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
 800bdfc:	1d3b      	adds	r3, r7, #4
 800bdfe:	1c0a      	adds	r2, r1, #0
 800be00:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800be02:	1dfb      	adds	r3, r7, #7
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b23      	cmp	r3, #35	; 0x23
 800be08:	d804      	bhi.n	800be14 <CDC_Control_FS+0x28>
 800be0a:	009a      	lsls	r2, r3, #2
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <CDC_Control_FS+0x34>)
 800be0e:	18d3      	adds	r3, r2, r3
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800be14:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800be16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be18:	0018      	movs	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	b002      	add	sp, #8
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	0800d2d0 	.word	0x0800d2d0

0800be24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800be2e:	4b18      	ldr	r3, [pc, #96]	; (800be90 <CDC_Receive_FS+0x6c>)
 800be30:	7a1a      	ldrb	r2, [r3, #8]
 800be32:	2101      	movs	r1, #1
 800be34:	430a      	orrs	r2, r1
 800be36:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800be38:	230f      	movs	r3, #15
 800be3a:	18fb      	adds	r3, r7, r3
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e00f      	b.n	800be62 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <CDC_Receive_FS+0x70>)
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	240f      	movs	r4, #15
 800be48:	193b      	adds	r3, r7, r4
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	18d3      	adds	r3, r2, r3
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	0019      	movs	r1, r3
 800be54:	f7f5 fc62 	bl	800171c <push>
  for(uint8_t i = 0; i < *Len; i++)
 800be58:	193b      	adds	r3, r7, r4
 800be5a:	781a      	ldrb	r2, [r3, #0]
 800be5c:	193b      	adds	r3, r7, r4
 800be5e:	3201      	adds	r2, #1
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	230f      	movs	r3, #15
 800be64:	18fb      	adds	r3, r7, r3
 800be66:	781a      	ldrb	r2, [r3, #0]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3e8      	bcc.n	800be42 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <CDC_Receive_FS+0x74>)
 800be74:	0011      	movs	r1, r2
 800be76:	0018      	movs	r0, r3
 800be78:	f7fe fcdf 	bl	800a83a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <CDC_Receive_FS+0x74>)
 800be7e:	0018      	movs	r0, r3
 800be80:	f7fe fd26 	bl	800a8d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be86:	0018      	movs	r0, r3
 800be88:	46bd      	mov	sp, r7
 800be8a:	b005      	add	sp, #20
 800be8c:	bd90      	pop	{r4, r7, pc}
 800be8e:	46c0      	nop			; (mov r8, r8)
 800be90:	20000620 	.word	0x20000620
 800be94:	2000116c 	.word	0x2000116c
 800be98:	200006d8 	.word	0x200006d8

0800be9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be9c:	b5b0      	push	{r4, r5, r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	000a      	movs	r2, r1
 800bea6:	1cbb      	adds	r3, r7, #2
 800bea8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800beaa:	230f      	movs	r3, #15
 800beac:	18fb      	adds	r3, r7, r3
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800beb2:	4a11      	ldr	r2, [pc, #68]	; (800bef8 <CDC_Transmit_FS+0x5c>)
 800beb4:	23ae      	movs	r3, #174	; 0xae
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	58d3      	ldr	r3, [r2, r3]
 800beba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	2385      	movs	r3, #133	; 0x85
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	58d3      	ldr	r3, [r2, r3]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bec8:	2301      	movs	r3, #1
 800beca:	e010      	b.n	800beee <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800becc:	1cbb      	adds	r3, r7, #2
 800bece:	881a      	ldrh	r2, [r3, #0]
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <CDC_Transmit_FS+0x5c>)
 800bed4:	0018      	movs	r0, r3
 800bed6:	f7fe fc94 	bl	800a802 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800beda:	250f      	movs	r5, #15
 800bedc:	197c      	adds	r4, r7, r5
 800bede:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <CDC_Transmit_FS+0x5c>)
 800bee0:	0018      	movs	r0, r3
 800bee2:	f7fe fcbe 	bl	800a862 <USBD_CDC_TransmitPacket>
 800bee6:	0003      	movs	r3, r0
 800bee8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800beea:	197b      	adds	r3, r7, r5
 800beec:	781b      	ldrb	r3, [r3, #0]
}
 800beee:	0018      	movs	r0, r3
 800bef0:	46bd      	mov	sp, r7
 800bef2:	b004      	add	sp, #16
 800bef4:	bdb0      	pop	{r4, r5, r7, pc}
 800bef6:	46c0      	nop			; (mov r8, r8)
 800bef8:	200006d8 	.word	0x200006d8

0800befc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	0002      	movs	r2, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	1dfb      	adds	r3, r7, #7
 800bf08:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2212      	movs	r2, #18
 800bf0e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bf10:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bf12:	0018      	movs	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b002      	add	sp, #8
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	20000148 	.word	0x20000148

0800bf20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	0002      	movs	r2, r0
 800bf28:	6039      	str	r1, [r7, #0]
 800bf2a:	1dfb      	adds	r3, r7, #7
 800bf2c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2204      	movs	r2, #4
 800bf32:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf36:	0018      	movs	r0, r3
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	b002      	add	sp, #8
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	2000015c 	.word	0x2000015c

0800bf44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	0002      	movs	r2, r0
 800bf4c:	6039      	str	r1, [r7, #0]
 800bf4e:	1dfb      	adds	r3, r7, #7
 800bf50:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bf52:	1dfb      	adds	r3, r7, #7
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	4908      	ldr	r1, [pc, #32]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bf5e:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x40>)
 800bf60:	0018      	movs	r0, r3
 800bf62:	f7ff fdf4 	bl	800bb4e <USBD_GetString>
 800bf66:	e005      	b.n	800bf74 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	4905      	ldr	r1, [pc, #20]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x40>)
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f7ff fded 	bl	800bb4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf74:	4b02      	ldr	r3, [pc, #8]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800bf76:	0018      	movs	r0, r3
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	b002      	add	sp, #8
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	20001170 	.word	0x20001170
 800bf84:	0800d17c 	.word	0x0800d17c

0800bf88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	0002      	movs	r2, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	1dfb      	adds	r3, r7, #7
 800bf94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f7ff fdd6 	bl	800bb4e <USBD_GetString>
  return USBD_StrDesc;
 800bfa2:	4b02      	ldr	r3, [pc, #8]	; (800bfac <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	b002      	add	sp, #8
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20001170 	.word	0x20001170
 800bfb0:	0800d194 	.word	0x0800d194

0800bfb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	0002      	movs	r2, r0
 800bfbc:	6039      	str	r1, [r7, #0]
 800bfbe:	1dfb      	adds	r3, r7, #7
 800bfc0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	221a      	movs	r2, #26
 800bfc6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bfc8:	f000 f84c 	bl	800c064 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bfcc:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800bfce:	0018      	movs	r0, r3
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b002      	add	sp, #8
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	46c0      	nop			; (mov r8, r8)
 800bfd8:	20000160 	.word	0x20000160

0800bfdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	0002      	movs	r2, r0
 800bfe4:	6039      	str	r1, [r7, #0]
 800bfe6:	1dfb      	adds	r3, r7, #7
 800bfe8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800bfea:	1dfb      	adds	r3, r7, #7
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	4908      	ldr	r1, [pc, #32]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <USBD_FS_ConfigStrDescriptor+0x40>)
 800bff8:	0018      	movs	r0, r3
 800bffa:	f7ff fda8 	bl	800bb4e <USBD_GetString>
 800bffe:	e005      	b.n	800c00c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	4905      	ldr	r1, [pc, #20]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <USBD_FS_ConfigStrDescriptor+0x40>)
 800c006:	0018      	movs	r0, r3
 800c008:	f7ff fda1 	bl	800bb4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c00c:	4b02      	ldr	r3, [pc, #8]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c00e:	0018      	movs	r0, r3
 800c010:	46bd      	mov	sp, r7
 800c012:	b002      	add	sp, #8
 800c014:	bd80      	pop	{r7, pc}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	20001170 	.word	0x20001170
 800c01c:	0800d1a8 	.word	0x0800d1a8

0800c020 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	0002      	movs	r2, r0
 800c028:	6039      	str	r1, [r7, #0]
 800c02a:	1dfb      	adds	r3, r7, #7
 800c02c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c02e:	1dfb      	adds	r3, r7, #7
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	4908      	ldr	r1, [pc, #32]	; (800c05c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c03a:	4b09      	ldr	r3, [pc, #36]	; (800c060 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c03c:	0018      	movs	r0, r3
 800c03e:	f7ff fd86 	bl	800bb4e <USBD_GetString>
 800c042:	e005      	b.n	800c050 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	4905      	ldr	r1, [pc, #20]	; (800c05c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c048:	4b05      	ldr	r3, [pc, #20]	; (800c060 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c04a:	0018      	movs	r0, r3
 800c04c:	f7ff fd7f 	bl	800bb4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c052:	0018      	movs	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	b002      	add	sp, #8
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	46c0      	nop			; (mov r8, r8)
 800c05c:	20001170 	.word	0x20001170
 800c060:	0800d1b4 	.word	0x0800d1b4

0800c064 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c06a:	4b10      	ldr	r3, [pc, #64]	; (800c0ac <Get_SerialNum+0x48>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c070:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <Get_SerialNum+0x4c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c076:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <Get_SerialNum+0x50>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	18d3      	adds	r3, r2, r3
 800c082:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c08a:	490b      	ldr	r1, [pc, #44]	; (800c0b8 <Get_SerialNum+0x54>)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2208      	movs	r2, #8
 800c090:	0018      	movs	r0, r3
 800c092:	f000 f815 	bl	800c0c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c096:	4909      	ldr	r1, [pc, #36]	; (800c0bc <Get_SerialNum+0x58>)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2204      	movs	r2, #4
 800c09c:	0018      	movs	r0, r3
 800c09e:	f000 f80f 	bl	800c0c0 <IntToUnicode>
  }
}
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	b004      	add	sp, #16
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	46c0      	nop			; (mov r8, r8)
 800c0ac:	1ffff7ac 	.word	0x1ffff7ac
 800c0b0:	1ffff7b0 	.word	0x1ffff7b0
 800c0b4:	1ffff7b4 	.word	0x1ffff7b4
 800c0b8:	20000162 	.word	0x20000162
 800c0bc:	20000172 	.word	0x20000172

0800c0c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	1dfb      	adds	r3, r7, #7
 800c0cc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c0ce:	2117      	movs	r1, #23
 800c0d0:	187b      	adds	r3, r7, r1
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c0d6:	187b      	adds	r3, r7, r1
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e02f      	b.n	800c13e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	0f1b      	lsrs	r3, r3, #28
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	d80d      	bhi.n	800c102 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	0f1b      	lsrs	r3, r3, #28
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	2317      	movs	r3, #23
 800c0ee:	18fb      	adds	r3, r7, r3
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	0019      	movs	r1, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	185b      	adds	r3, r3, r1
 800c0fa:	3230      	adds	r2, #48	; 0x30
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	e00c      	b.n	800c11c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	0f1b      	lsrs	r3, r3, #28
 800c106:	b2da      	uxtb	r2, r3
 800c108:	2317      	movs	r3, #23
 800c10a:	18fb      	adds	r3, r7, r3
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	0019      	movs	r1, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	185b      	adds	r3, r3, r1
 800c116:	3237      	adds	r2, #55	; 0x37
 800c118:	b2d2      	uxtb	r2, r2
 800c11a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c122:	2117      	movs	r1, #23
 800c124:	187b      	adds	r3, r7, r1
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	3301      	adds	r3, #1
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	18d3      	adds	r3, r2, r3
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c134:	187b      	adds	r3, r7, r1
 800c136:	781a      	ldrb	r2, [r3, #0]
 800c138:	187b      	adds	r3, r7, r1
 800c13a:	3201      	adds	r2, #1
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	2317      	movs	r3, #23
 800c140:	18fa      	adds	r2, r7, r3
 800c142:	1dfb      	adds	r3, r7, #7
 800c144:	7812      	ldrb	r2, [r2, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d3c8      	bcc.n	800c0de <IntToUnicode+0x1e>
  }
}
 800c14c:	46c0      	nop			; (mov r8, r8)
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	46bd      	mov	sp, r7
 800c152:	b006      	add	sp, #24
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a0e      	ldr	r2, [pc, #56]	; (800c1a0 <HAL_PCD_MspInit+0x48>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d115      	bne.n	800c196 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c16a:	4b0e      	ldr	r3, [pc, #56]	; (800c1a4 <HAL_PCD_MspInit+0x4c>)
 800c16c:	69da      	ldr	r2, [r3, #28]
 800c16e:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <HAL_PCD_MspInit+0x4c>)
 800c170:	2180      	movs	r1, #128	; 0x80
 800c172:	0409      	lsls	r1, r1, #16
 800c174:	430a      	orrs	r2, r1
 800c176:	61da      	str	r2, [r3, #28]
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <HAL_PCD_MspInit+0x4c>)
 800c17a:	69da      	ldr	r2, [r3, #28]
 800c17c:	2380      	movs	r3, #128	; 0x80
 800c17e:	041b      	lsls	r3, r3, #16
 800c180:	4013      	ands	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c186:	2200      	movs	r2, #0
 800c188:	2100      	movs	r1, #0
 800c18a:	201f      	movs	r0, #31
 800c18c:	f7f6 fe2a 	bl	8002de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c190:	201f      	movs	r0, #31
 800c192:	f7f6 fe3c 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	46bd      	mov	sp, r7
 800c19a:	b004      	add	sp, #16
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	46c0      	nop			; (mov r8, r8)
 800c1a0:	40005c00 	.word	0x40005c00
 800c1a4:	40021000 	.word	0x40021000

0800c1a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	23bc      	movs	r3, #188	; 0xbc
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	58d2      	ldr	r2, [r2, r3]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	21ac      	movs	r1, #172	; 0xac
 800c1bc:	0089      	lsls	r1, r1, #2
 800c1be:	468c      	mov	ip, r1
 800c1c0:	4463      	add	r3, ip
 800c1c2:	0019      	movs	r1, r3
 800c1c4:	0010      	movs	r0, r2
 800c1c6:	f7fe fc55 	bl	800aa74 <USBD_LL_SetupStage>
}
 800c1ca:	46c0      	nop			; (mov r8, r8)
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	b002      	add	sp, #8
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d2:	b590      	push	{r4, r7, lr}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	000a      	movs	r2, r1
 800c1dc:	1cfb      	adds	r3, r7, #3
 800c1de:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	23bc      	movs	r3, #188	; 0xbc
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	58d4      	ldr	r4, [r2, r3]
 800c1e8:	1cfb      	adds	r3, r7, #3
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	23be      	movs	r3, #190	; 0xbe
 800c1f0:	0059      	lsls	r1, r3, #1
 800c1f2:	0013      	movs	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	189b      	adds	r3, r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	18c3      	adds	r3, r0, r3
 800c1fc:	185b      	adds	r3, r3, r1
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	1cfb      	adds	r3, r7, #3
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	0019      	movs	r1, r3
 800c206:	0020      	movs	r0, r4
 800c208:	f7fe fc92 	bl	800ab30 <USBD_LL_DataOutStage>
}
 800c20c:	46c0      	nop			; (mov r8, r8)
 800c20e:	46bd      	mov	sp, r7
 800c210:	b003      	add	sp, #12
 800c212:	bd90      	pop	{r4, r7, pc}

0800c214 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	000a      	movs	r2, r1
 800c21e:	1cfb      	adds	r3, r7, #3
 800c220:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	23bc      	movs	r3, #188	; 0xbc
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	58d0      	ldr	r0, [r2, r3]
 800c22a:	1cfb      	adds	r3, r7, #3
 800c22c:	781a      	ldrb	r2, [r3, #0]
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	0013      	movs	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	189b      	adds	r3, r3, r2
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	18cb      	adds	r3, r1, r3
 800c23a:	333c      	adds	r3, #60	; 0x3c
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	1cfb      	adds	r3, r7, #3
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	0019      	movs	r1, r3
 800c244:	f7fe fcf6 	bl	800ac34 <USBD_LL_DataInStage>
}
 800c248:	46c0      	nop			; (mov r8, r8)
 800c24a:	46bd      	mov	sp, r7
 800c24c:	b002      	add	sp, #8
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	23bc      	movs	r3, #188	; 0xbc
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	58d3      	ldr	r3, [r2, r3]
 800c260:	0018      	movs	r0, r3
 800c262:	f7fe fe2d 	bl	800aec0 <USBD_LL_SOF>
}
 800c266:	46c0      	nop			; (mov r8, r8)
 800c268:	46bd      	mov	sp, r7
 800c26a:	b002      	add	sp, #8
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c276:	230f      	movs	r3, #15
 800c278:	18fb      	adds	r3, r7, r3
 800c27a:	2201      	movs	r2, #1
 800c27c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	2b02      	cmp	r3, #2
 800c284:	d001      	beq.n	800c28a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c286:	f7f5 fa0f 	bl	80016a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	23bc      	movs	r3, #188	; 0xbc
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	58d2      	ldr	r2, [r2, r3]
 800c292:	230f      	movs	r3, #15
 800c294:	18fb      	adds	r3, r7, r3
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	0019      	movs	r1, r3
 800c29a:	0010      	movs	r0, r2
 800c29c:	f7fe fdcf 	bl	800ae3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	23bc      	movs	r3, #188	; 0xbc
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	58d3      	ldr	r3, [r2, r3]
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	f7fe fd80 	bl	800adae <USBD_LL_Reset>
}
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	b004      	add	sp, #16
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	23bc      	movs	r3, #188	; 0xbc
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	58d3      	ldr	r3, [r2, r3]
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7fe fdc9 	bl	800ae60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d005      	beq.n	800c2e2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2d6:	4b05      	ldr	r3, [pc, #20]	; (800c2ec <HAL_PCD_SuspendCallback+0x34>)
 800c2d8:	691a      	ldr	r2, [r3, #16]
 800c2da:	4b04      	ldr	r3, [pc, #16]	; (800c2ec <HAL_PCD_SuspendCallback+0x34>)
 800c2dc:	2106      	movs	r1, #6
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c2e2:	46c0      	nop			; (mov r8, r8)
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	b002      	add	sp, #8
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	46c0      	nop			; (mov r8, r8)
 800c2ec:	e000ed00 	.word	0xe000ed00

0800c2f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c300:	4b09      	ldr	r3, [pc, #36]	; (800c328 <HAL_PCD_ResumeCallback+0x38>)
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	4b08      	ldr	r3, [pc, #32]	; (800c328 <HAL_PCD_ResumeCallback+0x38>)
 800c306:	2106      	movs	r1, #6
 800c308:	438a      	bics	r2, r1
 800c30a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c30c:	f000 fa44 	bl	800c798 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	23bc      	movs	r3, #188	; 0xbc
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	58d3      	ldr	r3, [r2, r3]
 800c318:	0018      	movs	r0, r3
 800c31a:	f7fe fdb9 	bl	800ae90 <USBD_LL_Resume>
}
 800c31e:	46c0      	nop			; (mov r8, r8)
 800c320:	46bd      	mov	sp, r7
 800c322:	b002      	add	sp, #8
 800c324:	bd80      	pop	{r7, pc}
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	e000ed00 	.word	0xe000ed00

0800c32c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c334:	4a2d      	ldr	r2, [pc, #180]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c336:	23bc      	movs	r3, #188	; 0xbc
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	23b0      	movs	r3, #176	; 0xb0
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4929      	ldr	r1, [pc, #164]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c346:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c34a:	4a29      	ldr	r2, [pc, #164]	; (800c3f0 <USBD_LL_Init+0xc4>)
 800c34c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c34e:	4b27      	ldr	r3, [pc, #156]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c350:	2208      	movs	r2, #8
 800c352:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c354:	4b25      	ldr	r3, [pc, #148]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c356:	2202      	movs	r2, #2
 800c358:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c35a:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c35c:	2202      	movs	r2, #2
 800c35e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c360:	4b22      	ldr	r3, [pc, #136]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c362:	2200      	movs	r2, #0
 800c364:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c366:	4b21      	ldr	r3, [pc, #132]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c368:	2200      	movs	r2, #0
 800c36a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c36c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c36e:	2200      	movs	r2, #0
 800c370:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c372:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <USBD_LL_Init+0xc0>)
 800c374:	0018      	movs	r0, r3
 800c376:	f7f7 f967 	bl	8003648 <HAL_PCD_Init>
 800c37a:	1e03      	subs	r3, r0, #0
 800c37c:	d001      	beq.n	800c382 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c37e:	f7f5 f993 	bl	80016a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	23b0      	movs	r3, #176	; 0xb0
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	58d0      	ldr	r0, [r2, r3]
 800c38a:	2318      	movs	r3, #24
 800c38c:	2200      	movs	r2, #0
 800c38e:	2100      	movs	r1, #0
 800c390:	f7f8 ff48 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	23b0      	movs	r3, #176	; 0xb0
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	58d0      	ldr	r0, [r2, r3]
 800c39c:	2358      	movs	r3, #88	; 0x58
 800c39e:	2200      	movs	r2, #0
 800c3a0:	2180      	movs	r1, #128	; 0x80
 800c3a2:	f7f8 ff3f 	bl	8005224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	23b0      	movs	r3, #176	; 0xb0
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	58d0      	ldr	r0, [r2, r3]
 800c3ae:	23c0      	movs	r3, #192	; 0xc0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2181      	movs	r1, #129	; 0x81
 800c3b4:	f7f8 ff36 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	23b0      	movs	r3, #176	; 0xb0
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	58d0      	ldr	r0, [r2, r3]
 800c3c0:	2388      	movs	r3, #136	; 0x88
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2101      	movs	r1, #1
 800c3c8:	f7f8 ff2c 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	23b0      	movs	r3, #176	; 0xb0
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	58d0      	ldr	r0, [r2, r3]
 800c3d4:	2380      	movs	r3, #128	; 0x80
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2182      	movs	r1, #130	; 0x82
 800c3dc:	f7f8 ff22 	bl	8005224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	b002      	add	sp, #8
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	46c0      	nop			; (mov r8, r8)
 800c3ec:	20001370 	.word	0x20001370
 800c3f0:	40005c00 	.word	0x40005c00

0800c3f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fc:	210f      	movs	r1, #15
 800c3fe:	187b      	adds	r3, r7, r1
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c404:	260e      	movs	r6, #14
 800c406:	19bb      	adds	r3, r7, r6
 800c408:	2200      	movs	r2, #0
 800c40a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	23b0      	movs	r3, #176	; 0xb0
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	58d3      	ldr	r3, [r2, r3]
 800c414:	000d      	movs	r5, r1
 800c416:	187c      	adds	r4, r7, r1
 800c418:	0018      	movs	r0, r3
 800c41a:	f7f7 fa25 	bl	8003868 <HAL_PCD_Start>
 800c41e:	0003      	movs	r3, r0
 800c420:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c422:	19bc      	adds	r4, r7, r6
 800c424:	197b      	adds	r3, r7, r5
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 f9bc 	bl	800c7a6 <USBD_Get_USB_Status>
 800c42e:	0003      	movs	r3, r0
 800c430:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c432:	19bb      	adds	r3, r7, r6
 800c434:	781b      	ldrb	r3, [r3, #0]
}
 800c436:	0018      	movs	r0, r3
 800c438:	46bd      	mov	sp, r7
 800c43a:	b005      	add	sp, #20
 800c43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c43e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c43e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c440:	b085      	sub	sp, #20
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	000c      	movs	r4, r1
 800c448:	0010      	movs	r0, r2
 800c44a:	0019      	movs	r1, r3
 800c44c:	1cfb      	adds	r3, r7, #3
 800c44e:	1c22      	adds	r2, r4, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	1cbb      	adds	r3, r7, #2
 800c454:	1c02      	adds	r2, r0, #0
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	003b      	movs	r3, r7
 800c45a:	1c0a      	adds	r2, r1, #0
 800c45c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c45e:	260f      	movs	r6, #15
 800c460:	19bb      	adds	r3, r7, r6
 800c462:	2200      	movs	r2, #0
 800c464:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c466:	250e      	movs	r5, #14
 800c468:	197b      	adds	r3, r7, r5
 800c46a:	2200      	movs	r2, #0
 800c46c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	23b0      	movs	r3, #176	; 0xb0
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	58d0      	ldr	r0, [r2, r3]
 800c476:	19bc      	adds	r4, r7, r6
 800c478:	1cbb      	adds	r3, r7, #2
 800c47a:	781d      	ldrb	r5, [r3, #0]
 800c47c:	003b      	movs	r3, r7
 800c47e:	881a      	ldrh	r2, [r3, #0]
 800c480:	1cfb      	adds	r3, r7, #3
 800c482:	7819      	ldrb	r1, [r3, #0]
 800c484:	002b      	movs	r3, r5
 800c486:	f7f7 fbbc 	bl	8003c02 <HAL_PCD_EP_Open>
 800c48a:	0003      	movs	r3, r0
 800c48c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c48e:	250e      	movs	r5, #14
 800c490:	197c      	adds	r4, r7, r5
 800c492:	19bb      	adds	r3, r7, r6
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	0018      	movs	r0, r3
 800c498:	f000 f985 	bl	800c7a6 <USBD_Get_USB_Status>
 800c49c:	0003      	movs	r3, r0
 800c49e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4a0:	197b      	adds	r3, r7, r5
 800c4a2:	781b      	ldrb	r3, [r3, #0]
}
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	b005      	add	sp, #20
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	000a      	movs	r2, r1
 800c4b6:	1cfb      	adds	r3, r7, #3
 800c4b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ba:	210f      	movs	r1, #15
 800c4bc:	187b      	adds	r3, r7, r1
 800c4be:	2200      	movs	r2, #0
 800c4c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c2:	260e      	movs	r6, #14
 800c4c4:	19bb      	adds	r3, r7, r6
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	23b0      	movs	r3, #176	; 0xb0
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	58d2      	ldr	r2, [r2, r3]
 800c4d2:	000d      	movs	r5, r1
 800c4d4:	187c      	adds	r4, r7, r1
 800c4d6:	1cfb      	adds	r3, r7, #3
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	0019      	movs	r1, r3
 800c4dc:	0010      	movs	r0, r2
 800c4de:	f7f7 fc08 	bl	8003cf2 <HAL_PCD_EP_Close>
 800c4e2:	0003      	movs	r3, r0
 800c4e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e6:	19bc      	adds	r4, r7, r6
 800c4e8:	197b      	adds	r3, r7, r5
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f000 f95a 	bl	800c7a6 <USBD_Get_USB_Status>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4f6:	19bb      	adds	r3, r7, r6
 800c4f8:	781b      	ldrb	r3, [r3, #0]
}
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	b005      	add	sp, #20
 800c500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c502 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c502:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	000a      	movs	r2, r1
 800c50c:	1cfb      	adds	r3, r7, #3
 800c50e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c510:	210f      	movs	r1, #15
 800c512:	187b      	adds	r3, r7, r1
 800c514:	2200      	movs	r2, #0
 800c516:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c518:	260e      	movs	r6, #14
 800c51a:	19bb      	adds	r3, r7, r6
 800c51c:	2200      	movs	r2, #0
 800c51e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	23b0      	movs	r3, #176	; 0xb0
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	58d2      	ldr	r2, [r2, r3]
 800c528:	000d      	movs	r5, r1
 800c52a:	187c      	adds	r4, r7, r1
 800c52c:	1cfb      	adds	r3, r7, #3
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	0019      	movs	r1, r3
 800c532:	0010      	movs	r0, r2
 800c534:	f7f7 fcd4 	bl	8003ee0 <HAL_PCD_EP_SetStall>
 800c538:	0003      	movs	r3, r0
 800c53a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c53c:	19bc      	adds	r4, r7, r6
 800c53e:	197b      	adds	r3, r7, r5
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	0018      	movs	r0, r3
 800c544:	f000 f92f 	bl	800c7a6 <USBD_Get_USB_Status>
 800c548:	0003      	movs	r3, r0
 800c54a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c54c:	19bb      	adds	r3, r7, r6
 800c54e:	781b      	ldrb	r3, [r3, #0]
}
 800c550:	0018      	movs	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	b005      	add	sp, #20
 800c556:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c558 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	000a      	movs	r2, r1
 800c562:	1cfb      	adds	r3, r7, #3
 800c564:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c566:	210f      	movs	r1, #15
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	2200      	movs	r2, #0
 800c56c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56e:	260e      	movs	r6, #14
 800c570:	19bb      	adds	r3, r7, r6
 800c572:	2200      	movs	r2, #0
 800c574:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	23b0      	movs	r3, #176	; 0xb0
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	58d2      	ldr	r2, [r2, r3]
 800c57e:	000d      	movs	r5, r1
 800c580:	187c      	adds	r4, r7, r1
 800c582:	1cfb      	adds	r3, r7, #3
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	0019      	movs	r1, r3
 800c588:	0010      	movs	r0, r2
 800c58a:	f7f7 fd05 	bl	8003f98 <HAL_PCD_EP_ClrStall>
 800c58e:	0003      	movs	r3, r0
 800c590:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c592:	19bc      	adds	r4, r7, r6
 800c594:	197b      	adds	r3, r7, r5
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	0018      	movs	r0, r3
 800c59a:	f000 f904 	bl	800c7a6 <USBD_Get_USB_Status>
 800c59e:	0003      	movs	r3, r0
 800c5a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c5a2:	19bb      	adds	r3, r7, r6
 800c5a4:	781b      	ldrb	r3, [r3, #0]
}
 800c5a6:	0018      	movs	r0, r3
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	b005      	add	sp, #20
 800c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5ae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	000a      	movs	r2, r1
 800c5b8:	1cfb      	adds	r3, r7, #3
 800c5ba:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23b0      	movs	r3, #176	; 0xb0
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	58d3      	ldr	r3, [r2, r3]
 800c5c4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5c6:	1cfb      	adds	r3, r7, #3
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	b25b      	sxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	da0d      	bge.n	800c5ec <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5d0:	1cfb      	adds	r3, r7, #3
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	227f      	movs	r2, #127	; 0x7f
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	68f9      	ldr	r1, [r7, #12]
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	0013      	movs	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	189b      	adds	r3, r3, r2
 800c5e2:	00db      	lsls	r3, r3, #3
 800c5e4:	18cb      	adds	r3, r1, r3
 800c5e6:	3302      	adds	r3, #2
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	e00d      	b.n	800c608 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c5ec:	1cfb      	adds	r3, r7, #3
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	227f      	movs	r2, #127	; 0x7f
 800c5f2:	401a      	ands	r2, r3
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	23b5      	movs	r3, #181	; 0xb5
 800c5f8:	0059      	lsls	r1, r3, #1
 800c5fa:	0013      	movs	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	189b      	adds	r3, r3, r2
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	18c3      	adds	r3, r0, r3
 800c604:	185b      	adds	r3, r3, r1
 800c606:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b004      	add	sp, #16
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	000a      	movs	r2, r1
 800c61a:	1cfb      	adds	r3, r7, #3
 800c61c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c61e:	210f      	movs	r1, #15
 800c620:	187b      	adds	r3, r7, r1
 800c622:	2200      	movs	r2, #0
 800c624:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c626:	260e      	movs	r6, #14
 800c628:	19bb      	adds	r3, r7, r6
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	23b0      	movs	r3, #176	; 0xb0
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	58d2      	ldr	r2, [r2, r3]
 800c636:	000d      	movs	r5, r1
 800c638:	187c      	adds	r4, r7, r1
 800c63a:	1cfb      	adds	r3, r7, #3
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	0019      	movs	r1, r3
 800c640:	0010      	movs	r0, r2
 800c642:	f7f7 fab3 	bl	8003bac <HAL_PCD_SetAddress>
 800c646:	0003      	movs	r3, r0
 800c648:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c64a:	19bc      	adds	r4, r7, r6
 800c64c:	197b      	adds	r3, r7, r5
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	0018      	movs	r0, r3
 800c652:	f000 f8a8 	bl	800c7a6 <USBD_Get_USB_Status>
 800c656:	0003      	movs	r3, r0
 800c658:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c65a:	19bb      	adds	r3, r7, r6
 800c65c:	781b      	ldrb	r3, [r3, #0]
}
 800c65e:	0018      	movs	r0, r3
 800c660:	46bd      	mov	sp, r7
 800c662:	b005      	add	sp, #20
 800c664:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c666 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c666:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c668:	b087      	sub	sp, #28
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	0008      	movs	r0, r1
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	0019      	movs	r1, r3
 800c674:	230b      	movs	r3, #11
 800c676:	18fb      	adds	r3, r7, r3
 800c678:	1c02      	adds	r2, r0, #0
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	2408      	movs	r4, #8
 800c67e:	193b      	adds	r3, r7, r4
 800c680:	1c0a      	adds	r2, r1, #0
 800c682:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c684:	2117      	movs	r1, #23
 800c686:	187b      	adds	r3, r7, r1
 800c688:	2200      	movs	r2, #0
 800c68a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c68c:	2516      	movs	r5, #22
 800c68e:	197b      	adds	r3, r7, r5
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	23b0      	movs	r3, #176	; 0xb0
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	58d0      	ldr	r0, [r2, r3]
 800c69c:	193b      	adds	r3, r7, r4
 800c69e:	881d      	ldrh	r5, [r3, #0]
 800c6a0:	000e      	movs	r6, r1
 800c6a2:	187c      	adds	r4, r7, r1
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	230b      	movs	r3, #11
 800c6a8:	18fb      	adds	r3, r7, r3
 800c6aa:	7819      	ldrb	r1, [r3, #0]
 800c6ac:	002b      	movs	r3, r5
 800c6ae:	f7f7 fbce 	bl	8003e4e <HAL_PCD_EP_Transmit>
 800c6b2:	0003      	movs	r3, r0
 800c6b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b6:	2516      	movs	r5, #22
 800c6b8:	197c      	adds	r4, r7, r5
 800c6ba:	19bb      	adds	r3, r7, r6
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	0018      	movs	r0, r3
 800c6c0:	f000 f871 	bl	800c7a6 <USBD_Get_USB_Status>
 800c6c4:	0003      	movs	r3, r0
 800c6c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c6c8:	197b      	adds	r3, r7, r5
 800c6ca:	781b      	ldrb	r3, [r3, #0]
}
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	b007      	add	sp, #28
 800c6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	0008      	movs	r0, r1
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	0019      	movs	r1, r3
 800c6e2:	230b      	movs	r3, #11
 800c6e4:	18fb      	adds	r3, r7, r3
 800c6e6:	1c02      	adds	r2, r0, #0
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	2408      	movs	r4, #8
 800c6ec:	193b      	adds	r3, r7, r4
 800c6ee:	1c0a      	adds	r2, r1, #0
 800c6f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f2:	2117      	movs	r1, #23
 800c6f4:	187b      	adds	r3, r7, r1
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6fa:	2516      	movs	r5, #22
 800c6fc:	197b      	adds	r3, r7, r5
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	23b0      	movs	r3, #176	; 0xb0
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	58d0      	ldr	r0, [r2, r3]
 800c70a:	193b      	adds	r3, r7, r4
 800c70c:	881d      	ldrh	r5, [r3, #0]
 800c70e:	000e      	movs	r6, r1
 800c710:	187c      	adds	r4, r7, r1
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	230b      	movs	r3, #11
 800c716:	18fb      	adds	r3, r7, r3
 800c718:	7819      	ldrb	r1, [r3, #0]
 800c71a:	002b      	movs	r3, r5
 800c71c:	f7f7 fb3a 	bl	8003d94 <HAL_PCD_EP_Receive>
 800c720:	0003      	movs	r3, r0
 800c722:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c724:	2516      	movs	r5, #22
 800c726:	197c      	adds	r4, r7, r5
 800c728:	19bb      	adds	r3, r7, r6
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	0018      	movs	r0, r3
 800c72e:	f000 f83a 	bl	800c7a6 <USBD_Get_USB_Status>
 800c732:	0003      	movs	r3, r0
 800c734:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c736:	197b      	adds	r3, r7, r5
 800c738:	781b      	ldrb	r3, [r3, #0]
}
 800c73a:	0018      	movs	r0, r3
 800c73c:	46bd      	mov	sp, r7
 800c73e:	b007      	add	sp, #28
 800c740:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c742 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	000a      	movs	r2, r1
 800c74c:	1cfb      	adds	r3, r7, #3
 800c74e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	23b0      	movs	r3, #176	; 0xb0
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	58d2      	ldr	r2, [r2, r3]
 800c758:	1cfb      	adds	r3, r7, #3
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	0019      	movs	r1, r3
 800c75e:	0010      	movs	r0, r2
 800c760:	f7f7 fb5c 	bl	8003e1c <HAL_PCD_EP_GetRxCount>
 800c764:	0003      	movs	r3, r0
}
 800c766:	0018      	movs	r0, r3
 800c768:	46bd      	mov	sp, r7
 800c76a:	b002      	add	sp, #8
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <USBD_static_malloc+0x14>)
}
 800c77a:	0018      	movs	r0, r3
 800c77c:	46bd      	mov	sp, r7
 800c77e:	b002      	add	sp, #8
 800c780:	bd80      	pop	{r7, pc}
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	20000268 	.word	0x20000268

0800c788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]

}
 800c790:	46c0      	nop			; (mov r8, r8)
 800c792:	46bd      	mov	sp, r7
 800c794:	b002      	add	sp, #8
 800c796:	bd80      	pop	{r7, pc}

0800c798 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c79c:	f7f4 f8da 	bl	8000954 <SystemClock_Config>
}
 800c7a0:	46c0      	nop			; (mov r8, r8)
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	0002      	movs	r2, r0
 800c7ae:	1dfb      	adds	r3, r7, #7
 800c7b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b2:	230f      	movs	r3, #15
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c7ba:	1dfb      	adds	r3, r7, #7
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d017      	beq.n	800c7f2 <USBD_Get_USB_Status+0x4c>
 800c7c2:	dc1b      	bgt.n	800c7fc <USBD_Get_USB_Status+0x56>
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d00f      	beq.n	800c7e8 <USBD_Get_USB_Status+0x42>
 800c7c8:	dc18      	bgt.n	800c7fc <USBD_Get_USB_Status+0x56>
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <USBD_Get_USB_Status+0x2e>
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d005      	beq.n	800c7de <USBD_Get_USB_Status+0x38>
 800c7d2:	e013      	b.n	800c7fc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7d4:	230f      	movs	r3, #15
 800c7d6:	18fb      	adds	r3, r7, r3
 800c7d8:	2200      	movs	r2, #0
 800c7da:	701a      	strb	r2, [r3, #0]
    break;
 800c7dc:	e013      	b.n	800c806 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7de:	230f      	movs	r3, #15
 800c7e0:	18fb      	adds	r3, r7, r3
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	701a      	strb	r2, [r3, #0]
    break;
 800c7e6:	e00e      	b.n	800c806 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7e8:	230f      	movs	r3, #15
 800c7ea:	18fb      	adds	r3, r7, r3
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	701a      	strb	r2, [r3, #0]
    break;
 800c7f0:	e009      	b.n	800c806 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7f2:	230f      	movs	r3, #15
 800c7f4:	18fb      	adds	r3, r7, r3
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	701a      	strb	r2, [r3, #0]
    break;
 800c7fa:	e004      	b.n	800c806 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c7fc:	230f      	movs	r3, #15
 800c7fe:	18fb      	adds	r3, r7, r3
 800c800:	2202      	movs	r2, #2
 800c802:	701a      	strb	r2, [r3, #0]
    break;
 800c804:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c806:	230f      	movs	r3, #15
 800c808:	18fb      	adds	r3, r7, r3
 800c80a:	781b      	ldrb	r3, [r3, #0]
}
 800c80c:	0018      	movs	r0, r3
 800c80e:	46bd      	mov	sp, r7
 800c810:	b004      	add	sp, #16
 800c812:	bd80      	pop	{r7, pc}

0800c814 <__errno>:
 800c814:	4b01      	ldr	r3, [pc, #4]	; (800c81c <__errno+0x8>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	4770      	bx	lr
 800c81a:	46c0      	nop			; (mov r8, r8)
 800c81c:	2000017c 	.word	0x2000017c

0800c820 <__libc_init_array>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	2600      	movs	r6, #0
 800c824:	4d0c      	ldr	r5, [pc, #48]	; (800c858 <__libc_init_array+0x38>)
 800c826:	4c0d      	ldr	r4, [pc, #52]	; (800c85c <__libc_init_array+0x3c>)
 800c828:	1b64      	subs	r4, r4, r5
 800c82a:	10a4      	asrs	r4, r4, #2
 800c82c:	42a6      	cmp	r6, r4
 800c82e:	d109      	bne.n	800c844 <__libc_init_array+0x24>
 800c830:	2600      	movs	r6, #0
 800c832:	f000 fc5b 	bl	800d0ec <_init>
 800c836:	4d0a      	ldr	r5, [pc, #40]	; (800c860 <__libc_init_array+0x40>)
 800c838:	4c0a      	ldr	r4, [pc, #40]	; (800c864 <__libc_init_array+0x44>)
 800c83a:	1b64      	subs	r4, r4, r5
 800c83c:	10a4      	asrs	r4, r4, #2
 800c83e:	42a6      	cmp	r6, r4
 800c840:	d105      	bne.n	800c84e <__libc_init_array+0x2e>
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	00b3      	lsls	r3, r6, #2
 800c846:	58eb      	ldr	r3, [r5, r3]
 800c848:	4798      	blx	r3
 800c84a:	3601      	adds	r6, #1
 800c84c:	e7ee      	b.n	800c82c <__libc_init_array+0xc>
 800c84e:	00b3      	lsls	r3, r6, #2
 800c850:	58eb      	ldr	r3, [r5, r3]
 800c852:	4798      	blx	r3
 800c854:	3601      	adds	r6, #1
 800c856:	e7f2      	b.n	800c83e <__libc_init_array+0x1e>
 800c858:	0800d394 	.word	0x0800d394
 800c85c:	0800d394 	.word	0x0800d394
 800c860:	0800d394 	.word	0x0800d394
 800c864:	0800d398 	.word	0x0800d398

0800c868 <malloc>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	4b03      	ldr	r3, [pc, #12]	; (800c878 <malloc+0x10>)
 800c86c:	0001      	movs	r1, r0
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	f000 f860 	bl	800c934 <_malloc_r>
 800c874:	bd10      	pop	{r4, pc}
 800c876:	46c0      	nop			; (mov r8, r8)
 800c878:	2000017c 	.word	0x2000017c

0800c87c <free>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <free+0x10>)
 800c880:	0001      	movs	r1, r0
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	f000 f80c 	bl	800c8a0 <_free_r>
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	2000017c 	.word	0x2000017c

0800c890 <memset>:
 800c890:	0003      	movs	r3, r0
 800c892:	1882      	adds	r2, r0, r2
 800c894:	4293      	cmp	r3, r2
 800c896:	d100      	bne.n	800c89a <memset+0xa>
 800c898:	4770      	bx	lr
 800c89a:	7019      	strb	r1, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	e7f9      	b.n	800c894 <memset+0x4>

0800c8a0 <_free_r>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	0005      	movs	r5, r0
 800c8a4:	2900      	cmp	r1, #0
 800c8a6:	d010      	beq.n	800c8ca <_free_r+0x2a>
 800c8a8:	1f0c      	subs	r4, r1, #4
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	da00      	bge.n	800c8b2 <_free_r+0x12>
 800c8b0:	18e4      	adds	r4, r4, r3
 800c8b2:	0028      	movs	r0, r5
 800c8b4:	f000 f8ce 	bl	800ca54 <__malloc_lock>
 800c8b8:	4a1d      	ldr	r2, [pc, #116]	; (800c930 <_free_r+0x90>)
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d105      	bne.n	800c8cc <_free_r+0x2c>
 800c8c0:	6063      	str	r3, [r4, #4]
 800c8c2:	6014      	str	r4, [r2, #0]
 800c8c4:	0028      	movs	r0, r5
 800c8c6:	f000 f8cd 	bl	800ca64 <__malloc_unlock>
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	d908      	bls.n	800c8e2 <_free_r+0x42>
 800c8d0:	6821      	ldr	r1, [r4, #0]
 800c8d2:	1860      	adds	r0, r4, r1
 800c8d4:	4283      	cmp	r3, r0
 800c8d6:	d1f3      	bne.n	800c8c0 <_free_r+0x20>
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	1841      	adds	r1, r0, r1
 800c8de:	6021      	str	r1, [r4, #0]
 800c8e0:	e7ee      	b.n	800c8c0 <_free_r+0x20>
 800c8e2:	001a      	movs	r2, r3
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <_free_r+0x4e>
 800c8ea:	42a3      	cmp	r3, r4
 800c8ec:	d9f9      	bls.n	800c8e2 <_free_r+0x42>
 800c8ee:	6811      	ldr	r1, [r2, #0]
 800c8f0:	1850      	adds	r0, r2, r1
 800c8f2:	42a0      	cmp	r0, r4
 800c8f4:	d10b      	bne.n	800c90e <_free_r+0x6e>
 800c8f6:	6820      	ldr	r0, [r4, #0]
 800c8f8:	1809      	adds	r1, r1, r0
 800c8fa:	1850      	adds	r0, r2, r1
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	4283      	cmp	r3, r0
 800c900:	d1e0      	bne.n	800c8c4 <_free_r+0x24>
 800c902:	6818      	ldr	r0, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	1841      	adds	r1, r0, r1
 800c908:	6011      	str	r1, [r2, #0]
 800c90a:	6053      	str	r3, [r2, #4]
 800c90c:	e7da      	b.n	800c8c4 <_free_r+0x24>
 800c90e:	42a0      	cmp	r0, r4
 800c910:	d902      	bls.n	800c918 <_free_r+0x78>
 800c912:	230c      	movs	r3, #12
 800c914:	602b      	str	r3, [r5, #0]
 800c916:	e7d5      	b.n	800c8c4 <_free_r+0x24>
 800c918:	6821      	ldr	r1, [r4, #0]
 800c91a:	1860      	adds	r0, r4, r1
 800c91c:	4283      	cmp	r3, r0
 800c91e:	d103      	bne.n	800c928 <_free_r+0x88>
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	1841      	adds	r1, r0, r1
 800c926:	6021      	str	r1, [r4, #0]
 800c928:	6063      	str	r3, [r4, #4]
 800c92a:	6054      	str	r4, [r2, #4]
 800c92c:	e7ca      	b.n	800c8c4 <_free_r+0x24>
 800c92e:	46c0      	nop			; (mov r8, r8)
 800c930:	20000488 	.word	0x20000488

0800c934 <_malloc_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	2303      	movs	r3, #3
 800c938:	1ccd      	adds	r5, r1, #3
 800c93a:	439d      	bics	r5, r3
 800c93c:	3508      	adds	r5, #8
 800c93e:	0006      	movs	r6, r0
 800c940:	2d0c      	cmp	r5, #12
 800c942:	d21f      	bcs.n	800c984 <_malloc_r+0x50>
 800c944:	250c      	movs	r5, #12
 800c946:	42a9      	cmp	r1, r5
 800c948:	d81e      	bhi.n	800c988 <_malloc_r+0x54>
 800c94a:	0030      	movs	r0, r6
 800c94c:	f000 f882 	bl	800ca54 <__malloc_lock>
 800c950:	4925      	ldr	r1, [pc, #148]	; (800c9e8 <_malloc_r+0xb4>)
 800c952:	680a      	ldr	r2, [r1, #0]
 800c954:	0014      	movs	r4, r2
 800c956:	2c00      	cmp	r4, #0
 800c958:	d11a      	bne.n	800c990 <_malloc_r+0x5c>
 800c95a:	4f24      	ldr	r7, [pc, #144]	; (800c9ec <_malloc_r+0xb8>)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <_malloc_r+0x38>
 800c962:	0021      	movs	r1, r4
 800c964:	0030      	movs	r0, r6
 800c966:	f000 f843 	bl	800c9f0 <_sbrk_r>
 800c96a:	6038      	str	r0, [r7, #0]
 800c96c:	0029      	movs	r1, r5
 800c96e:	0030      	movs	r0, r6
 800c970:	f000 f83e 	bl	800c9f0 <_sbrk_r>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d12b      	bne.n	800c9d0 <_malloc_r+0x9c>
 800c978:	230c      	movs	r3, #12
 800c97a:	0030      	movs	r0, r6
 800c97c:	6033      	str	r3, [r6, #0]
 800c97e:	f000 f871 	bl	800ca64 <__malloc_unlock>
 800c982:	e003      	b.n	800c98c <_malloc_r+0x58>
 800c984:	2d00      	cmp	r5, #0
 800c986:	dade      	bge.n	800c946 <_malloc_r+0x12>
 800c988:	230c      	movs	r3, #12
 800c98a:	6033      	str	r3, [r6, #0]
 800c98c:	2000      	movs	r0, #0
 800c98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	1b5b      	subs	r3, r3, r5
 800c994:	d419      	bmi.n	800c9ca <_malloc_r+0x96>
 800c996:	2b0b      	cmp	r3, #11
 800c998:	d903      	bls.n	800c9a2 <_malloc_r+0x6e>
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	18e4      	adds	r4, r4, r3
 800c99e:	6025      	str	r5, [r4, #0]
 800c9a0:	e003      	b.n	800c9aa <_malloc_r+0x76>
 800c9a2:	6863      	ldr	r3, [r4, #4]
 800c9a4:	42a2      	cmp	r2, r4
 800c9a6:	d10e      	bne.n	800c9c6 <_malloc_r+0x92>
 800c9a8:	600b      	str	r3, [r1, #0]
 800c9aa:	0030      	movs	r0, r6
 800c9ac:	f000 f85a 	bl	800ca64 <__malloc_unlock>
 800c9b0:	0020      	movs	r0, r4
 800c9b2:	2207      	movs	r2, #7
 800c9b4:	300b      	adds	r0, #11
 800c9b6:	1d23      	adds	r3, r4, #4
 800c9b8:	4390      	bics	r0, r2
 800c9ba:	1ac2      	subs	r2, r0, r3
 800c9bc:	4298      	cmp	r0, r3
 800c9be:	d0e6      	beq.n	800c98e <_malloc_r+0x5a>
 800c9c0:	1a1b      	subs	r3, r3, r0
 800c9c2:	50a3      	str	r3, [r4, r2]
 800c9c4:	e7e3      	b.n	800c98e <_malloc_r+0x5a>
 800c9c6:	6053      	str	r3, [r2, #4]
 800c9c8:	e7ef      	b.n	800c9aa <_malloc_r+0x76>
 800c9ca:	0022      	movs	r2, r4
 800c9cc:	6864      	ldr	r4, [r4, #4]
 800c9ce:	e7c2      	b.n	800c956 <_malloc_r+0x22>
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	1cc4      	adds	r4, r0, #3
 800c9d4:	439c      	bics	r4, r3
 800c9d6:	42a0      	cmp	r0, r4
 800c9d8:	d0e1      	beq.n	800c99e <_malloc_r+0x6a>
 800c9da:	1a21      	subs	r1, r4, r0
 800c9dc:	0030      	movs	r0, r6
 800c9de:	f000 f807 	bl	800c9f0 <_sbrk_r>
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	d1db      	bne.n	800c99e <_malloc_r+0x6a>
 800c9e6:	e7c7      	b.n	800c978 <_malloc_r+0x44>
 800c9e8:	20000488 	.word	0x20000488
 800c9ec:	2000048c 	.word	0x2000048c

0800c9f0 <_sbrk_r>:
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_sbrk_r+0x20>)
 800c9f6:	0004      	movs	r4, r0
 800c9f8:	0008      	movs	r0, r1
 800c9fa:	602b      	str	r3, [r5, #0]
 800c9fc:	f7f5 f9fc 	bl	8001df8 <_sbrk>
 800ca00:	1c43      	adds	r3, r0, #1
 800ca02:	d103      	bne.n	800ca0c <_sbrk_r+0x1c>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d000      	beq.n	800ca0c <_sbrk_r+0x1c>
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
 800ca0e:	46c0      	nop			; (mov r8, r8)
 800ca10:	20001664 	.word	0x20001664

0800ca14 <siprintf>:
 800ca14:	b40e      	push	{r1, r2, r3}
 800ca16:	b500      	push	{lr}
 800ca18:	490b      	ldr	r1, [pc, #44]	; (800ca48 <siprintf+0x34>)
 800ca1a:	b09c      	sub	sp, #112	; 0x70
 800ca1c:	ab1d      	add	r3, sp, #116	; 0x74
 800ca1e:	9002      	str	r0, [sp, #8]
 800ca20:	9006      	str	r0, [sp, #24]
 800ca22:	9107      	str	r1, [sp, #28]
 800ca24:	9104      	str	r1, [sp, #16]
 800ca26:	4809      	ldr	r0, [pc, #36]	; (800ca4c <siprintf+0x38>)
 800ca28:	4909      	ldr	r1, [pc, #36]	; (800ca50 <siprintf+0x3c>)
 800ca2a:	cb04      	ldmia	r3!, {r2}
 800ca2c:	9105      	str	r1, [sp, #20]
 800ca2e:	6800      	ldr	r0, [r0, #0]
 800ca30:	a902      	add	r1, sp, #8
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	f000 f880 	bl	800cb38 <_svfiprintf_r>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9a02      	ldr	r2, [sp, #8]
 800ca3c:	7013      	strb	r3, [r2, #0]
 800ca3e:	b01c      	add	sp, #112	; 0x70
 800ca40:	bc08      	pop	{r3}
 800ca42:	b003      	add	sp, #12
 800ca44:	4718      	bx	r3
 800ca46:	46c0      	nop			; (mov r8, r8)
 800ca48:	7fffffff 	.word	0x7fffffff
 800ca4c:	2000017c 	.word	0x2000017c
 800ca50:	ffff0208 	.word	0xffff0208

0800ca54 <__malloc_lock>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	4802      	ldr	r0, [pc, #8]	; (800ca60 <__malloc_lock+0xc>)
 800ca58:	f000 faf0 	bl	800d03c <__retarget_lock_acquire_recursive>
 800ca5c:	bd10      	pop	{r4, pc}
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	2000166c 	.word	0x2000166c

0800ca64 <__malloc_unlock>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	4802      	ldr	r0, [pc, #8]	; (800ca70 <__malloc_unlock+0xc>)
 800ca68:	f000 fae9 	bl	800d03e <__retarget_lock_release_recursive>
 800ca6c:	bd10      	pop	{r4, pc}
 800ca6e:	46c0      	nop			; (mov r8, r8)
 800ca70:	2000166c 	.word	0x2000166c

0800ca74 <__ssputs_r>:
 800ca74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca76:	688e      	ldr	r6, [r1, #8]
 800ca78:	b085      	sub	sp, #20
 800ca7a:	0007      	movs	r7, r0
 800ca7c:	000c      	movs	r4, r1
 800ca7e:	9203      	str	r2, [sp, #12]
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	429e      	cmp	r6, r3
 800ca84:	d83c      	bhi.n	800cb00 <__ssputs_r+0x8c>
 800ca86:	2390      	movs	r3, #144	; 0x90
 800ca88:	898a      	ldrh	r2, [r1, #12]
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	421a      	tst	r2, r3
 800ca8e:	d034      	beq.n	800cafa <__ssputs_r+0x86>
 800ca90:	2503      	movs	r5, #3
 800ca92:	6909      	ldr	r1, [r1, #16]
 800ca94:	6823      	ldr	r3, [r4, #0]
 800ca96:	1a5b      	subs	r3, r3, r1
 800ca98:	9302      	str	r3, [sp, #8]
 800ca9a:	6963      	ldr	r3, [r4, #20]
 800ca9c:	9802      	ldr	r0, [sp, #8]
 800ca9e:	435d      	muls	r5, r3
 800caa0:	0feb      	lsrs	r3, r5, #31
 800caa2:	195d      	adds	r5, r3, r5
 800caa4:	9b01      	ldr	r3, [sp, #4]
 800caa6:	106d      	asrs	r5, r5, #1
 800caa8:	3301      	adds	r3, #1
 800caaa:	181b      	adds	r3, r3, r0
 800caac:	42ab      	cmp	r3, r5
 800caae:	d900      	bls.n	800cab2 <__ssputs_r+0x3e>
 800cab0:	001d      	movs	r5, r3
 800cab2:	0553      	lsls	r3, r2, #21
 800cab4:	d532      	bpl.n	800cb1c <__ssputs_r+0xa8>
 800cab6:	0029      	movs	r1, r5
 800cab8:	0038      	movs	r0, r7
 800caba:	f7ff ff3b 	bl	800c934 <_malloc_r>
 800cabe:	1e06      	subs	r6, r0, #0
 800cac0:	d109      	bne.n	800cad6 <__ssputs_r+0x62>
 800cac2:	230c      	movs	r3, #12
 800cac4:	603b      	str	r3, [r7, #0]
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	2001      	movs	r0, #1
 800caca:	89a2      	ldrh	r2, [r4, #12]
 800cacc:	4240      	negs	r0, r0
 800cace:	4313      	orrs	r3, r2
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	b005      	add	sp, #20
 800cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad6:	9a02      	ldr	r2, [sp, #8]
 800cad8:	6921      	ldr	r1, [r4, #16]
 800cada:	f000 fabc 	bl	800d056 <memcpy>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	4a14      	ldr	r2, [pc, #80]	; (800cb34 <__ssputs_r+0xc0>)
 800cae2:	401a      	ands	r2, r3
 800cae4:	2380      	movs	r3, #128	; 0x80
 800cae6:	4313      	orrs	r3, r2
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	9b02      	ldr	r3, [sp, #8]
 800caec:	6126      	str	r6, [r4, #16]
 800caee:	18f6      	adds	r6, r6, r3
 800caf0:	6026      	str	r6, [r4, #0]
 800caf2:	6165      	str	r5, [r4, #20]
 800caf4:	9e01      	ldr	r6, [sp, #4]
 800caf6:	1aed      	subs	r5, r5, r3
 800caf8:	60a5      	str	r5, [r4, #8]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	429e      	cmp	r6, r3
 800cafe:	d900      	bls.n	800cb02 <__ssputs_r+0x8e>
 800cb00:	9e01      	ldr	r6, [sp, #4]
 800cb02:	0032      	movs	r2, r6
 800cb04:	9903      	ldr	r1, [sp, #12]
 800cb06:	6820      	ldr	r0, [r4, #0]
 800cb08:	f000 faae 	bl	800d068 <memmove>
 800cb0c:	68a3      	ldr	r3, [r4, #8]
 800cb0e:	2000      	movs	r0, #0
 800cb10:	1b9b      	subs	r3, r3, r6
 800cb12:	60a3      	str	r3, [r4, #8]
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	199e      	adds	r6, r3, r6
 800cb18:	6026      	str	r6, [r4, #0]
 800cb1a:	e7da      	b.n	800cad2 <__ssputs_r+0x5e>
 800cb1c:	002a      	movs	r2, r5
 800cb1e:	0038      	movs	r0, r7
 800cb20:	f000 fab5 	bl	800d08e <_realloc_r>
 800cb24:	1e06      	subs	r6, r0, #0
 800cb26:	d1e0      	bne.n	800caea <__ssputs_r+0x76>
 800cb28:	0038      	movs	r0, r7
 800cb2a:	6921      	ldr	r1, [r4, #16]
 800cb2c:	f7ff feb8 	bl	800c8a0 <_free_r>
 800cb30:	e7c7      	b.n	800cac2 <__ssputs_r+0x4e>
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	fffffb7f 	.word	0xfffffb7f

0800cb38 <_svfiprintf_r>:
 800cb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb3a:	b0a1      	sub	sp, #132	; 0x84
 800cb3c:	9003      	str	r0, [sp, #12]
 800cb3e:	001d      	movs	r5, r3
 800cb40:	898b      	ldrh	r3, [r1, #12]
 800cb42:	000f      	movs	r7, r1
 800cb44:	0016      	movs	r6, r2
 800cb46:	061b      	lsls	r3, r3, #24
 800cb48:	d511      	bpl.n	800cb6e <_svfiprintf_r+0x36>
 800cb4a:	690b      	ldr	r3, [r1, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10e      	bne.n	800cb6e <_svfiprintf_r+0x36>
 800cb50:	2140      	movs	r1, #64	; 0x40
 800cb52:	f7ff feef 	bl	800c934 <_malloc_r>
 800cb56:	6038      	str	r0, [r7, #0]
 800cb58:	6138      	str	r0, [r7, #16]
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d105      	bne.n	800cb6a <_svfiprintf_r+0x32>
 800cb5e:	230c      	movs	r3, #12
 800cb60:	9a03      	ldr	r2, [sp, #12]
 800cb62:	3801      	subs	r0, #1
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	b021      	add	sp, #132	; 0x84
 800cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb6a:	2340      	movs	r3, #64	; 0x40
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	ac08      	add	r4, sp, #32
 800cb72:	6163      	str	r3, [r4, #20]
 800cb74:	3320      	adds	r3, #32
 800cb76:	7663      	strb	r3, [r4, #25]
 800cb78:	3310      	adds	r3, #16
 800cb7a:	76a3      	strb	r3, [r4, #26]
 800cb7c:	9507      	str	r5, [sp, #28]
 800cb7e:	0035      	movs	r5, r6
 800cb80:	782b      	ldrb	r3, [r5, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <_svfiprintf_r+0x52>
 800cb86:	2b25      	cmp	r3, #37	; 0x25
 800cb88:	d147      	bne.n	800cc1a <_svfiprintf_r+0xe2>
 800cb8a:	1bab      	subs	r3, r5, r6
 800cb8c:	9305      	str	r3, [sp, #20]
 800cb8e:	42b5      	cmp	r5, r6
 800cb90:	d00c      	beq.n	800cbac <_svfiprintf_r+0x74>
 800cb92:	0032      	movs	r2, r6
 800cb94:	0039      	movs	r1, r7
 800cb96:	9803      	ldr	r0, [sp, #12]
 800cb98:	f7ff ff6c 	bl	800ca74 <__ssputs_r>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	d100      	bne.n	800cba2 <_svfiprintf_r+0x6a>
 800cba0:	e0ae      	b.n	800cd00 <_svfiprintf_r+0x1c8>
 800cba2:	6962      	ldr	r2, [r4, #20]
 800cba4:	9b05      	ldr	r3, [sp, #20]
 800cba6:	4694      	mov	ip, r2
 800cba8:	4463      	add	r3, ip
 800cbaa:	6163      	str	r3, [r4, #20]
 800cbac:	782b      	ldrb	r3, [r5, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d100      	bne.n	800cbb4 <_svfiprintf_r+0x7c>
 800cbb2:	e0a5      	b.n	800cd00 <_svfiprintf_r+0x1c8>
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	4252      	negs	r2, r2
 800cbba:	6062      	str	r2, [r4, #4]
 800cbbc:	a904      	add	r1, sp, #16
 800cbbe:	3254      	adds	r2, #84	; 0x54
 800cbc0:	1852      	adds	r2, r2, r1
 800cbc2:	1c6e      	adds	r6, r5, #1
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	60e3      	str	r3, [r4, #12]
 800cbc8:	60a3      	str	r3, [r4, #8]
 800cbca:	7013      	strb	r3, [r2, #0]
 800cbcc:	65a3      	str	r3, [r4, #88]	; 0x58
 800cbce:	2205      	movs	r2, #5
 800cbd0:	7831      	ldrb	r1, [r6, #0]
 800cbd2:	4854      	ldr	r0, [pc, #336]	; (800cd24 <_svfiprintf_r+0x1ec>)
 800cbd4:	f000 fa34 	bl	800d040 <memchr>
 800cbd8:	1c75      	adds	r5, r6, #1
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d11f      	bne.n	800cc1e <_svfiprintf_r+0xe6>
 800cbde:	6822      	ldr	r2, [r4, #0]
 800cbe0:	06d3      	lsls	r3, r2, #27
 800cbe2:	d504      	bpl.n	800cbee <_svfiprintf_r+0xb6>
 800cbe4:	2353      	movs	r3, #83	; 0x53
 800cbe6:	a904      	add	r1, sp, #16
 800cbe8:	185b      	adds	r3, r3, r1
 800cbea:	2120      	movs	r1, #32
 800cbec:	7019      	strb	r1, [r3, #0]
 800cbee:	0713      	lsls	r3, r2, #28
 800cbf0:	d504      	bpl.n	800cbfc <_svfiprintf_r+0xc4>
 800cbf2:	2353      	movs	r3, #83	; 0x53
 800cbf4:	a904      	add	r1, sp, #16
 800cbf6:	185b      	adds	r3, r3, r1
 800cbf8:	212b      	movs	r1, #43	; 0x2b
 800cbfa:	7019      	strb	r1, [r3, #0]
 800cbfc:	7833      	ldrb	r3, [r6, #0]
 800cbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800cc00:	d016      	beq.n	800cc30 <_svfiprintf_r+0xf8>
 800cc02:	0035      	movs	r5, r6
 800cc04:	2100      	movs	r1, #0
 800cc06:	200a      	movs	r0, #10
 800cc08:	68e3      	ldr	r3, [r4, #12]
 800cc0a:	782a      	ldrb	r2, [r5, #0]
 800cc0c:	1c6e      	adds	r6, r5, #1
 800cc0e:	3a30      	subs	r2, #48	; 0x30
 800cc10:	2a09      	cmp	r2, #9
 800cc12:	d94e      	bls.n	800ccb2 <_svfiprintf_r+0x17a>
 800cc14:	2900      	cmp	r1, #0
 800cc16:	d111      	bne.n	800cc3c <_svfiprintf_r+0x104>
 800cc18:	e017      	b.n	800cc4a <_svfiprintf_r+0x112>
 800cc1a:	3501      	adds	r5, #1
 800cc1c:	e7b0      	b.n	800cb80 <_svfiprintf_r+0x48>
 800cc1e:	4b41      	ldr	r3, [pc, #260]	; (800cd24 <_svfiprintf_r+0x1ec>)
 800cc20:	6822      	ldr	r2, [r4, #0]
 800cc22:	1ac0      	subs	r0, r0, r3
 800cc24:	2301      	movs	r3, #1
 800cc26:	4083      	lsls	r3, r0
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	002e      	movs	r6, r5
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	e7ce      	b.n	800cbce <_svfiprintf_r+0x96>
 800cc30:	9b07      	ldr	r3, [sp, #28]
 800cc32:	1d19      	adds	r1, r3, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	9107      	str	r1, [sp, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	db01      	blt.n	800cc40 <_svfiprintf_r+0x108>
 800cc3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc3e:	e004      	b.n	800cc4a <_svfiprintf_r+0x112>
 800cc40:	425b      	negs	r3, r3
 800cc42:	60e3      	str	r3, [r4, #12]
 800cc44:	2302      	movs	r3, #2
 800cc46:	4313      	orrs	r3, r2
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	782b      	ldrb	r3, [r5, #0]
 800cc4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc4e:	d10a      	bne.n	800cc66 <_svfiprintf_r+0x12e>
 800cc50:	786b      	ldrb	r3, [r5, #1]
 800cc52:	2b2a      	cmp	r3, #42	; 0x2a
 800cc54:	d135      	bne.n	800ccc2 <_svfiprintf_r+0x18a>
 800cc56:	9b07      	ldr	r3, [sp, #28]
 800cc58:	3502      	adds	r5, #2
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9207      	str	r2, [sp, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	db2b      	blt.n	800ccbc <_svfiprintf_r+0x184>
 800cc64:	9309      	str	r3, [sp, #36]	; 0x24
 800cc66:	4e30      	ldr	r6, [pc, #192]	; (800cd28 <_svfiprintf_r+0x1f0>)
 800cc68:	2203      	movs	r2, #3
 800cc6a:	0030      	movs	r0, r6
 800cc6c:	7829      	ldrb	r1, [r5, #0]
 800cc6e:	f000 f9e7 	bl	800d040 <memchr>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d006      	beq.n	800cc84 <_svfiprintf_r+0x14c>
 800cc76:	2340      	movs	r3, #64	; 0x40
 800cc78:	1b80      	subs	r0, r0, r6
 800cc7a:	4083      	lsls	r3, r0
 800cc7c:	6822      	ldr	r2, [r4, #0]
 800cc7e:	3501      	adds	r5, #1
 800cc80:	4313      	orrs	r3, r2
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	7829      	ldrb	r1, [r5, #0]
 800cc86:	2206      	movs	r2, #6
 800cc88:	4828      	ldr	r0, [pc, #160]	; (800cd2c <_svfiprintf_r+0x1f4>)
 800cc8a:	1c6e      	adds	r6, r5, #1
 800cc8c:	7621      	strb	r1, [r4, #24]
 800cc8e:	f000 f9d7 	bl	800d040 <memchr>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d03c      	beq.n	800cd10 <_svfiprintf_r+0x1d8>
 800cc96:	4b26      	ldr	r3, [pc, #152]	; (800cd30 <_svfiprintf_r+0x1f8>)
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d125      	bne.n	800cce8 <_svfiprintf_r+0x1b0>
 800cc9c:	2207      	movs	r2, #7
 800cc9e:	9b07      	ldr	r3, [sp, #28]
 800cca0:	3307      	adds	r3, #7
 800cca2:	4393      	bics	r3, r2
 800cca4:	3308      	adds	r3, #8
 800cca6:	9307      	str	r3, [sp, #28]
 800cca8:	6963      	ldr	r3, [r4, #20]
 800ccaa:	9a04      	ldr	r2, [sp, #16]
 800ccac:	189b      	adds	r3, r3, r2
 800ccae:	6163      	str	r3, [r4, #20]
 800ccb0:	e765      	b.n	800cb7e <_svfiprintf_r+0x46>
 800ccb2:	4343      	muls	r3, r0
 800ccb4:	0035      	movs	r5, r6
 800ccb6:	2101      	movs	r1, #1
 800ccb8:	189b      	adds	r3, r3, r2
 800ccba:	e7a6      	b.n	800cc0a <_svfiprintf_r+0xd2>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	425b      	negs	r3, r3
 800ccc0:	e7d0      	b.n	800cc64 <_svfiprintf_r+0x12c>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	200a      	movs	r0, #10
 800ccc6:	001a      	movs	r2, r3
 800ccc8:	3501      	adds	r5, #1
 800ccca:	6063      	str	r3, [r4, #4]
 800cccc:	7829      	ldrb	r1, [r5, #0]
 800ccce:	1c6e      	adds	r6, r5, #1
 800ccd0:	3930      	subs	r1, #48	; 0x30
 800ccd2:	2909      	cmp	r1, #9
 800ccd4:	d903      	bls.n	800ccde <_svfiprintf_r+0x1a6>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0c5      	beq.n	800cc66 <_svfiprintf_r+0x12e>
 800ccda:	9209      	str	r2, [sp, #36]	; 0x24
 800ccdc:	e7c3      	b.n	800cc66 <_svfiprintf_r+0x12e>
 800ccde:	4342      	muls	r2, r0
 800cce0:	0035      	movs	r5, r6
 800cce2:	2301      	movs	r3, #1
 800cce4:	1852      	adds	r2, r2, r1
 800cce6:	e7f1      	b.n	800cccc <_svfiprintf_r+0x194>
 800cce8:	ab07      	add	r3, sp, #28
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	003a      	movs	r2, r7
 800ccee:	0021      	movs	r1, r4
 800ccf0:	4b10      	ldr	r3, [pc, #64]	; (800cd34 <_svfiprintf_r+0x1fc>)
 800ccf2:	9803      	ldr	r0, [sp, #12]
 800ccf4:	e000      	b.n	800ccf8 <_svfiprintf_r+0x1c0>
 800ccf6:	bf00      	nop
 800ccf8:	9004      	str	r0, [sp, #16]
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	d1d3      	bne.n	800cca8 <_svfiprintf_r+0x170>
 800cd00:	89bb      	ldrh	r3, [r7, #12]
 800cd02:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cd04:	065b      	lsls	r3, r3, #25
 800cd06:	d400      	bmi.n	800cd0a <_svfiprintf_r+0x1d2>
 800cd08:	e72d      	b.n	800cb66 <_svfiprintf_r+0x2e>
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	4240      	negs	r0, r0
 800cd0e:	e72a      	b.n	800cb66 <_svfiprintf_r+0x2e>
 800cd10:	ab07      	add	r3, sp, #28
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	003a      	movs	r2, r7
 800cd16:	0021      	movs	r1, r4
 800cd18:	4b06      	ldr	r3, [pc, #24]	; (800cd34 <_svfiprintf_r+0x1fc>)
 800cd1a:	9803      	ldr	r0, [sp, #12]
 800cd1c:	f000 f87c 	bl	800ce18 <_printf_i>
 800cd20:	e7ea      	b.n	800ccf8 <_svfiprintf_r+0x1c0>
 800cd22:	46c0      	nop			; (mov r8, r8)
 800cd24:	0800d360 	.word	0x0800d360
 800cd28:	0800d366 	.word	0x0800d366
 800cd2c:	0800d36a 	.word	0x0800d36a
 800cd30:	00000000 	.word	0x00000000
 800cd34:	0800ca75 	.word	0x0800ca75

0800cd38 <_printf_common>:
 800cd38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd3a:	0015      	movs	r5, r2
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	688a      	ldr	r2, [r1, #8]
 800cd40:	690b      	ldr	r3, [r1, #16]
 800cd42:	000c      	movs	r4, r1
 800cd44:	9000      	str	r0, [sp, #0]
 800cd46:	4293      	cmp	r3, r2
 800cd48:	da00      	bge.n	800cd4c <_printf_common+0x14>
 800cd4a:	0013      	movs	r3, r2
 800cd4c:	0022      	movs	r2, r4
 800cd4e:	602b      	str	r3, [r5, #0]
 800cd50:	3243      	adds	r2, #67	; 0x43
 800cd52:	7812      	ldrb	r2, [r2, #0]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	d001      	beq.n	800cd5c <_printf_common+0x24>
 800cd58:	3301      	adds	r3, #1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	069b      	lsls	r3, r3, #26
 800cd60:	d502      	bpl.n	800cd68 <_printf_common+0x30>
 800cd62:	682b      	ldr	r3, [r5, #0]
 800cd64:	3302      	adds	r3, #2
 800cd66:	602b      	str	r3, [r5, #0]
 800cd68:	6822      	ldr	r2, [r4, #0]
 800cd6a:	2306      	movs	r3, #6
 800cd6c:	0017      	movs	r7, r2
 800cd6e:	401f      	ands	r7, r3
 800cd70:	421a      	tst	r2, r3
 800cd72:	d027      	beq.n	800cdc4 <_printf_common+0x8c>
 800cd74:	0023      	movs	r3, r4
 800cd76:	3343      	adds	r3, #67	; 0x43
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	1e5a      	subs	r2, r3, #1
 800cd7c:	4193      	sbcs	r3, r2
 800cd7e:	6822      	ldr	r2, [r4, #0]
 800cd80:	0692      	lsls	r2, r2, #26
 800cd82:	d430      	bmi.n	800cde6 <_printf_common+0xae>
 800cd84:	0022      	movs	r2, r4
 800cd86:	9901      	ldr	r1, [sp, #4]
 800cd88:	9800      	ldr	r0, [sp, #0]
 800cd8a:	9e08      	ldr	r6, [sp, #32]
 800cd8c:	3243      	adds	r2, #67	; 0x43
 800cd8e:	47b0      	blx	r6
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d025      	beq.n	800cde0 <_printf_common+0xa8>
 800cd94:	2306      	movs	r3, #6
 800cd96:	6820      	ldr	r0, [r4, #0]
 800cd98:	682a      	ldr	r2, [r5, #0]
 800cd9a:	68e1      	ldr	r1, [r4, #12]
 800cd9c:	2500      	movs	r5, #0
 800cd9e:	4003      	ands	r3, r0
 800cda0:	2b04      	cmp	r3, #4
 800cda2:	d103      	bne.n	800cdac <_printf_common+0x74>
 800cda4:	1a8d      	subs	r5, r1, r2
 800cda6:	43eb      	mvns	r3, r5
 800cda8:	17db      	asrs	r3, r3, #31
 800cdaa:	401d      	ands	r5, r3
 800cdac:	68a3      	ldr	r3, [r4, #8]
 800cdae:	6922      	ldr	r2, [r4, #16]
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	dd01      	ble.n	800cdb8 <_printf_common+0x80>
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	18ed      	adds	r5, r5, r3
 800cdb8:	2700      	movs	r7, #0
 800cdba:	42bd      	cmp	r5, r7
 800cdbc:	d120      	bne.n	800ce00 <_printf_common+0xc8>
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	e010      	b.n	800cde4 <_printf_common+0xac>
 800cdc2:	3701      	adds	r7, #1
 800cdc4:	68e3      	ldr	r3, [r4, #12]
 800cdc6:	682a      	ldr	r2, [r5, #0]
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	42bb      	cmp	r3, r7
 800cdcc:	ddd2      	ble.n	800cd74 <_printf_common+0x3c>
 800cdce:	0022      	movs	r2, r4
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	9901      	ldr	r1, [sp, #4]
 800cdd4:	9800      	ldr	r0, [sp, #0]
 800cdd6:	9e08      	ldr	r6, [sp, #32]
 800cdd8:	3219      	adds	r2, #25
 800cdda:	47b0      	blx	r6
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d1f0      	bne.n	800cdc2 <_printf_common+0x8a>
 800cde0:	2001      	movs	r0, #1
 800cde2:	4240      	negs	r0, r0
 800cde4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cde6:	2030      	movs	r0, #48	; 0x30
 800cde8:	18e1      	adds	r1, r4, r3
 800cdea:	3143      	adds	r1, #67	; 0x43
 800cdec:	7008      	strb	r0, [r1, #0]
 800cdee:	0021      	movs	r1, r4
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	3145      	adds	r1, #69	; 0x45
 800cdf4:	7809      	ldrb	r1, [r1, #0]
 800cdf6:	18a2      	adds	r2, r4, r2
 800cdf8:	3243      	adds	r2, #67	; 0x43
 800cdfa:	3302      	adds	r3, #2
 800cdfc:	7011      	strb	r1, [r2, #0]
 800cdfe:	e7c1      	b.n	800cd84 <_printf_common+0x4c>
 800ce00:	0022      	movs	r2, r4
 800ce02:	2301      	movs	r3, #1
 800ce04:	9901      	ldr	r1, [sp, #4]
 800ce06:	9800      	ldr	r0, [sp, #0]
 800ce08:	9e08      	ldr	r6, [sp, #32]
 800ce0a:	321a      	adds	r2, #26
 800ce0c:	47b0      	blx	r6
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d0e6      	beq.n	800cde0 <_printf_common+0xa8>
 800ce12:	3701      	adds	r7, #1
 800ce14:	e7d1      	b.n	800cdba <_printf_common+0x82>
	...

0800ce18 <_printf_i>:
 800ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1a:	b08b      	sub	sp, #44	; 0x2c
 800ce1c:	9206      	str	r2, [sp, #24]
 800ce1e:	000a      	movs	r2, r1
 800ce20:	3243      	adds	r2, #67	; 0x43
 800ce22:	9307      	str	r3, [sp, #28]
 800ce24:	9005      	str	r0, [sp, #20]
 800ce26:	9204      	str	r2, [sp, #16]
 800ce28:	7e0a      	ldrb	r2, [r1, #24]
 800ce2a:	000c      	movs	r4, r1
 800ce2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce2e:	2a78      	cmp	r2, #120	; 0x78
 800ce30:	d806      	bhi.n	800ce40 <_printf_i+0x28>
 800ce32:	2a62      	cmp	r2, #98	; 0x62
 800ce34:	d808      	bhi.n	800ce48 <_printf_i+0x30>
 800ce36:	2a00      	cmp	r2, #0
 800ce38:	d100      	bne.n	800ce3c <_printf_i+0x24>
 800ce3a:	e0c0      	b.n	800cfbe <_printf_i+0x1a6>
 800ce3c:	2a58      	cmp	r2, #88	; 0x58
 800ce3e:	d052      	beq.n	800cee6 <_printf_i+0xce>
 800ce40:	0026      	movs	r6, r4
 800ce42:	3642      	adds	r6, #66	; 0x42
 800ce44:	7032      	strb	r2, [r6, #0]
 800ce46:	e022      	b.n	800ce8e <_printf_i+0x76>
 800ce48:	0010      	movs	r0, r2
 800ce4a:	3863      	subs	r0, #99	; 0x63
 800ce4c:	2815      	cmp	r0, #21
 800ce4e:	d8f7      	bhi.n	800ce40 <_printf_i+0x28>
 800ce50:	f7f3 f962 	bl	8000118 <__gnu_thumb1_case_shi>
 800ce54:	001f0016 	.word	0x001f0016
 800ce58:	fff6fff6 	.word	0xfff6fff6
 800ce5c:	fff6fff6 	.word	0xfff6fff6
 800ce60:	fff6001f 	.word	0xfff6001f
 800ce64:	fff6fff6 	.word	0xfff6fff6
 800ce68:	00a8fff6 	.word	0x00a8fff6
 800ce6c:	009a0036 	.word	0x009a0036
 800ce70:	fff6fff6 	.word	0xfff6fff6
 800ce74:	fff600b9 	.word	0xfff600b9
 800ce78:	fff60036 	.word	0xfff60036
 800ce7c:	009efff6 	.word	0x009efff6
 800ce80:	0026      	movs	r6, r4
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	3642      	adds	r6, #66	; 0x42
 800ce86:	1d11      	adds	r1, r2, #4
 800ce88:	6019      	str	r1, [r3, #0]
 800ce8a:	6813      	ldr	r3, [r2, #0]
 800ce8c:	7033      	strb	r3, [r6, #0]
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e0a7      	b.n	800cfe2 <_printf_i+0x1ca>
 800ce92:	6808      	ldr	r0, [r1, #0]
 800ce94:	6819      	ldr	r1, [r3, #0]
 800ce96:	1d0a      	adds	r2, r1, #4
 800ce98:	0605      	lsls	r5, r0, #24
 800ce9a:	d50b      	bpl.n	800ceb4 <_printf_i+0x9c>
 800ce9c:	680d      	ldr	r5, [r1, #0]
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	da03      	bge.n	800ceac <_printf_i+0x94>
 800cea4:	232d      	movs	r3, #45	; 0x2d
 800cea6:	9a04      	ldr	r2, [sp, #16]
 800cea8:	426d      	negs	r5, r5
 800ceaa:	7013      	strb	r3, [r2, #0]
 800ceac:	4b61      	ldr	r3, [pc, #388]	; (800d034 <_printf_i+0x21c>)
 800ceae:	270a      	movs	r7, #10
 800ceb0:	9303      	str	r3, [sp, #12]
 800ceb2:	e032      	b.n	800cf1a <_printf_i+0x102>
 800ceb4:	680d      	ldr	r5, [r1, #0]
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	0641      	lsls	r1, r0, #25
 800ceba:	d5f1      	bpl.n	800cea0 <_printf_i+0x88>
 800cebc:	b22d      	sxth	r5, r5
 800cebe:	e7ef      	b.n	800cea0 <_printf_i+0x88>
 800cec0:	680d      	ldr	r5, [r1, #0]
 800cec2:	6819      	ldr	r1, [r3, #0]
 800cec4:	1d08      	adds	r0, r1, #4
 800cec6:	6018      	str	r0, [r3, #0]
 800cec8:	062e      	lsls	r6, r5, #24
 800ceca:	d501      	bpl.n	800ced0 <_printf_i+0xb8>
 800cecc:	680d      	ldr	r5, [r1, #0]
 800cece:	e003      	b.n	800ced8 <_printf_i+0xc0>
 800ced0:	066d      	lsls	r5, r5, #25
 800ced2:	d5fb      	bpl.n	800cecc <_printf_i+0xb4>
 800ced4:	680d      	ldr	r5, [r1, #0]
 800ced6:	b2ad      	uxth	r5, r5
 800ced8:	4b56      	ldr	r3, [pc, #344]	; (800d034 <_printf_i+0x21c>)
 800ceda:	270a      	movs	r7, #10
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	2a6f      	cmp	r2, #111	; 0x6f
 800cee0:	d117      	bne.n	800cf12 <_printf_i+0xfa>
 800cee2:	2708      	movs	r7, #8
 800cee4:	e015      	b.n	800cf12 <_printf_i+0xfa>
 800cee6:	3145      	adds	r1, #69	; 0x45
 800cee8:	700a      	strb	r2, [r1, #0]
 800ceea:	4a52      	ldr	r2, [pc, #328]	; (800d034 <_printf_i+0x21c>)
 800ceec:	9203      	str	r2, [sp, #12]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	6821      	ldr	r1, [r4, #0]
 800cef2:	ca20      	ldmia	r2!, {r5}
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	0608      	lsls	r0, r1, #24
 800cef8:	d550      	bpl.n	800cf9c <_printf_i+0x184>
 800cefa:	07cb      	lsls	r3, r1, #31
 800cefc:	d502      	bpl.n	800cf04 <_printf_i+0xec>
 800cefe:	2320      	movs	r3, #32
 800cf00:	4319      	orrs	r1, r3
 800cf02:	6021      	str	r1, [r4, #0]
 800cf04:	2710      	movs	r7, #16
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	d103      	bne.n	800cf12 <_printf_i+0xfa>
 800cf0a:	2320      	movs	r3, #32
 800cf0c:	6822      	ldr	r2, [r4, #0]
 800cf0e:	439a      	bics	r2, r3
 800cf10:	6022      	str	r2, [r4, #0]
 800cf12:	0023      	movs	r3, r4
 800cf14:	2200      	movs	r2, #0
 800cf16:	3343      	adds	r3, #67	; 0x43
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	6863      	ldr	r3, [r4, #4]
 800cf1c:	60a3      	str	r3, [r4, #8]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	db03      	blt.n	800cf2a <_printf_i+0x112>
 800cf22:	2204      	movs	r2, #4
 800cf24:	6821      	ldr	r1, [r4, #0]
 800cf26:	4391      	bics	r1, r2
 800cf28:	6021      	str	r1, [r4, #0]
 800cf2a:	2d00      	cmp	r5, #0
 800cf2c:	d102      	bne.n	800cf34 <_printf_i+0x11c>
 800cf2e:	9e04      	ldr	r6, [sp, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00c      	beq.n	800cf4e <_printf_i+0x136>
 800cf34:	9e04      	ldr	r6, [sp, #16]
 800cf36:	0028      	movs	r0, r5
 800cf38:	0039      	movs	r1, r7
 800cf3a:	f7f3 f97d 	bl	8000238 <__aeabi_uidivmod>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	3e01      	subs	r6, #1
 800cf42:	5c5b      	ldrb	r3, [r3, r1]
 800cf44:	7033      	strb	r3, [r6, #0]
 800cf46:	002b      	movs	r3, r5
 800cf48:	0005      	movs	r5, r0
 800cf4a:	429f      	cmp	r7, r3
 800cf4c:	d9f3      	bls.n	800cf36 <_printf_i+0x11e>
 800cf4e:	2f08      	cmp	r7, #8
 800cf50:	d109      	bne.n	800cf66 <_printf_i+0x14e>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	07db      	lsls	r3, r3, #31
 800cf56:	d506      	bpl.n	800cf66 <_printf_i+0x14e>
 800cf58:	6863      	ldr	r3, [r4, #4]
 800cf5a:	6922      	ldr	r2, [r4, #16]
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	dc02      	bgt.n	800cf66 <_printf_i+0x14e>
 800cf60:	2330      	movs	r3, #48	; 0x30
 800cf62:	3e01      	subs	r6, #1
 800cf64:	7033      	strb	r3, [r6, #0]
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	1b9b      	subs	r3, r3, r6
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	9b07      	ldr	r3, [sp, #28]
 800cf6e:	0021      	movs	r1, r4
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	9805      	ldr	r0, [sp, #20]
 800cf74:	9b06      	ldr	r3, [sp, #24]
 800cf76:	aa09      	add	r2, sp, #36	; 0x24
 800cf78:	f7ff fede 	bl	800cd38 <_printf_common>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d135      	bne.n	800cfec <_printf_i+0x1d4>
 800cf80:	2001      	movs	r0, #1
 800cf82:	4240      	negs	r0, r0
 800cf84:	b00b      	add	sp, #44	; 0x2c
 800cf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf88:	2220      	movs	r2, #32
 800cf8a:	6809      	ldr	r1, [r1, #0]
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	6022      	str	r2, [r4, #0]
 800cf90:	0022      	movs	r2, r4
 800cf92:	2178      	movs	r1, #120	; 0x78
 800cf94:	3245      	adds	r2, #69	; 0x45
 800cf96:	7011      	strb	r1, [r2, #0]
 800cf98:	4a27      	ldr	r2, [pc, #156]	; (800d038 <_printf_i+0x220>)
 800cf9a:	e7a7      	b.n	800ceec <_printf_i+0xd4>
 800cf9c:	0648      	lsls	r0, r1, #25
 800cf9e:	d5ac      	bpl.n	800cefa <_printf_i+0xe2>
 800cfa0:	b2ad      	uxth	r5, r5
 800cfa2:	e7aa      	b.n	800cefa <_printf_i+0xe2>
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	680d      	ldr	r5, [r1, #0]
 800cfa8:	1d10      	adds	r0, r2, #4
 800cfaa:	6949      	ldr	r1, [r1, #20]
 800cfac:	6018      	str	r0, [r3, #0]
 800cfae:	6813      	ldr	r3, [r2, #0]
 800cfb0:	062e      	lsls	r6, r5, #24
 800cfb2:	d501      	bpl.n	800cfb8 <_printf_i+0x1a0>
 800cfb4:	6019      	str	r1, [r3, #0]
 800cfb6:	e002      	b.n	800cfbe <_printf_i+0x1a6>
 800cfb8:	066d      	lsls	r5, r5, #25
 800cfba:	d5fb      	bpl.n	800cfb4 <_printf_i+0x19c>
 800cfbc:	8019      	strh	r1, [r3, #0]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	9e04      	ldr	r6, [sp, #16]
 800cfc2:	6123      	str	r3, [r4, #16]
 800cfc4:	e7d2      	b.n	800cf6c <_printf_i+0x154>
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	1d11      	adds	r1, r2, #4
 800cfca:	6019      	str	r1, [r3, #0]
 800cfcc:	6816      	ldr	r6, [r2, #0]
 800cfce:	2100      	movs	r1, #0
 800cfd0:	0030      	movs	r0, r6
 800cfd2:	6862      	ldr	r2, [r4, #4]
 800cfd4:	f000 f834 	bl	800d040 <memchr>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d001      	beq.n	800cfe0 <_printf_i+0x1c8>
 800cfdc:	1b80      	subs	r0, r0, r6
 800cfde:	6060      	str	r0, [r4, #4]
 800cfe0:	6863      	ldr	r3, [r4, #4]
 800cfe2:	6123      	str	r3, [r4, #16]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	9a04      	ldr	r2, [sp, #16]
 800cfe8:	7013      	strb	r3, [r2, #0]
 800cfea:	e7bf      	b.n	800cf6c <_printf_i+0x154>
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	0032      	movs	r2, r6
 800cff0:	9906      	ldr	r1, [sp, #24]
 800cff2:	9805      	ldr	r0, [sp, #20]
 800cff4:	9d07      	ldr	r5, [sp, #28]
 800cff6:	47a8      	blx	r5
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d0c1      	beq.n	800cf80 <_printf_i+0x168>
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	079b      	lsls	r3, r3, #30
 800d000:	d415      	bmi.n	800d02e <_printf_i+0x216>
 800d002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d004:	68e0      	ldr	r0, [r4, #12]
 800d006:	4298      	cmp	r0, r3
 800d008:	dabc      	bge.n	800cf84 <_printf_i+0x16c>
 800d00a:	0018      	movs	r0, r3
 800d00c:	e7ba      	b.n	800cf84 <_printf_i+0x16c>
 800d00e:	0022      	movs	r2, r4
 800d010:	2301      	movs	r3, #1
 800d012:	9906      	ldr	r1, [sp, #24]
 800d014:	9805      	ldr	r0, [sp, #20]
 800d016:	9e07      	ldr	r6, [sp, #28]
 800d018:	3219      	adds	r2, #25
 800d01a:	47b0      	blx	r6
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d0af      	beq.n	800cf80 <_printf_i+0x168>
 800d020:	3501      	adds	r5, #1
 800d022:	68e3      	ldr	r3, [r4, #12]
 800d024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	42ab      	cmp	r3, r5
 800d02a:	dcf0      	bgt.n	800d00e <_printf_i+0x1f6>
 800d02c:	e7e9      	b.n	800d002 <_printf_i+0x1ea>
 800d02e:	2500      	movs	r5, #0
 800d030:	e7f7      	b.n	800d022 <_printf_i+0x20a>
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	0800d371 	.word	0x0800d371
 800d038:	0800d382 	.word	0x0800d382

0800d03c <__retarget_lock_acquire_recursive>:
 800d03c:	4770      	bx	lr

0800d03e <__retarget_lock_release_recursive>:
 800d03e:	4770      	bx	lr

0800d040 <memchr>:
 800d040:	b2c9      	uxtb	r1, r1
 800d042:	1882      	adds	r2, r0, r2
 800d044:	4290      	cmp	r0, r2
 800d046:	d101      	bne.n	800d04c <memchr+0xc>
 800d048:	2000      	movs	r0, #0
 800d04a:	4770      	bx	lr
 800d04c:	7803      	ldrb	r3, [r0, #0]
 800d04e:	428b      	cmp	r3, r1
 800d050:	d0fb      	beq.n	800d04a <memchr+0xa>
 800d052:	3001      	adds	r0, #1
 800d054:	e7f6      	b.n	800d044 <memchr+0x4>

0800d056 <memcpy>:
 800d056:	2300      	movs	r3, #0
 800d058:	b510      	push	{r4, lr}
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d100      	bne.n	800d060 <memcpy+0xa>
 800d05e:	bd10      	pop	{r4, pc}
 800d060:	5ccc      	ldrb	r4, [r1, r3]
 800d062:	54c4      	strb	r4, [r0, r3]
 800d064:	3301      	adds	r3, #1
 800d066:	e7f8      	b.n	800d05a <memcpy+0x4>

0800d068 <memmove>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	4288      	cmp	r0, r1
 800d06c:	d902      	bls.n	800d074 <memmove+0xc>
 800d06e:	188b      	adds	r3, r1, r2
 800d070:	4298      	cmp	r0, r3
 800d072:	d303      	bcc.n	800d07c <memmove+0x14>
 800d074:	2300      	movs	r3, #0
 800d076:	e007      	b.n	800d088 <memmove+0x20>
 800d078:	5c8b      	ldrb	r3, [r1, r2]
 800d07a:	5483      	strb	r3, [r0, r2]
 800d07c:	3a01      	subs	r2, #1
 800d07e:	d2fb      	bcs.n	800d078 <memmove+0x10>
 800d080:	bd10      	pop	{r4, pc}
 800d082:	5ccc      	ldrb	r4, [r1, r3]
 800d084:	54c4      	strb	r4, [r0, r3]
 800d086:	3301      	adds	r3, #1
 800d088:	429a      	cmp	r2, r3
 800d08a:	d1fa      	bne.n	800d082 <memmove+0x1a>
 800d08c:	e7f8      	b.n	800d080 <memmove+0x18>

0800d08e <_realloc_r>:
 800d08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d090:	0007      	movs	r7, r0
 800d092:	000d      	movs	r5, r1
 800d094:	0016      	movs	r6, r2
 800d096:	2900      	cmp	r1, #0
 800d098:	d105      	bne.n	800d0a6 <_realloc_r+0x18>
 800d09a:	0011      	movs	r1, r2
 800d09c:	f7ff fc4a 	bl	800c934 <_malloc_r>
 800d0a0:	0004      	movs	r4, r0
 800d0a2:	0020      	movs	r0, r4
 800d0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a6:	2a00      	cmp	r2, #0
 800d0a8:	d103      	bne.n	800d0b2 <_realloc_r+0x24>
 800d0aa:	f7ff fbf9 	bl	800c8a0 <_free_r>
 800d0ae:	0034      	movs	r4, r6
 800d0b0:	e7f7      	b.n	800d0a2 <_realloc_r+0x14>
 800d0b2:	f000 f812 	bl	800d0da <_malloc_usable_size_r>
 800d0b6:	002c      	movs	r4, r5
 800d0b8:	42b0      	cmp	r0, r6
 800d0ba:	d2f2      	bcs.n	800d0a2 <_realloc_r+0x14>
 800d0bc:	0031      	movs	r1, r6
 800d0be:	0038      	movs	r0, r7
 800d0c0:	f7ff fc38 	bl	800c934 <_malloc_r>
 800d0c4:	1e04      	subs	r4, r0, #0
 800d0c6:	d0ec      	beq.n	800d0a2 <_realloc_r+0x14>
 800d0c8:	0029      	movs	r1, r5
 800d0ca:	0032      	movs	r2, r6
 800d0cc:	f7ff ffc3 	bl	800d056 <memcpy>
 800d0d0:	0029      	movs	r1, r5
 800d0d2:	0038      	movs	r0, r7
 800d0d4:	f7ff fbe4 	bl	800c8a0 <_free_r>
 800d0d8:	e7e3      	b.n	800d0a2 <_realloc_r+0x14>

0800d0da <_malloc_usable_size_r>:
 800d0da:	1f0b      	subs	r3, r1, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	1f18      	subs	r0, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da01      	bge.n	800d0e8 <_malloc_usable_size_r+0xe>
 800d0e4:	580b      	ldr	r3, [r1, r0]
 800d0e6:	18c0      	adds	r0, r0, r3
 800d0e8:	4770      	bx	lr
	...

0800d0ec <_init>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	46c0      	nop			; (mov r8, r8)
 800d0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f2:	bc08      	pop	{r3}
 800d0f4:	469e      	mov	lr, r3
 800d0f6:	4770      	bx	lr

0800d0f8 <_fini>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	46c0      	nop			; (mov r8, r8)
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr
