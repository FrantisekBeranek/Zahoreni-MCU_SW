
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d008  0800d008  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d278  0800d278  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d278  0800d278  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d278  0800d278  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d278  0800d278  0001d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d27c  0800d27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200001e0  0800d460  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800d460  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3e6  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e66  00000000  00000000  0004a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0004f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00050b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffe4  00000000  00000000  00052100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd2e  00000000  00000000  000720e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a43cb  00000000  00000000  00091e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001361dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  00136230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cff0 	.word	0x0800cff0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cff0 	.word	0x0800cff0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	429a      	cmp	r2, r3
 800042e:	d104      	bne.n	800043a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000432:	791a      	ldrb	r2, [r3, #4]
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	429a      	cmp	r2, r3
 8000444:	d104      	bne.n	8000450 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000448:	791a      	ldrb	r2, [r3, #4]
 800044a:	2104      	movs	r1, #4
 800044c:	430a      	orrs	r2, r1
 800044e:	711a      	strb	r2, [r3, #4]
	}
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000618 	.word	0x20000618

0800045c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000468:	429a      	cmp	r2, r3
 800046a:	d104      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	}
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200005d0 	.word	0x200005d0
 8000484:	20000618 	.word	0x20000618

08000488 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	flags.meas.measDataReady = 1;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000492:	7d1a      	ldrb	r2, [r3, #20]
 8000494:	2104      	movs	r1, #4
 8000496:	430a      	orrs	r2, r1
 8000498:	751a      	strb	r2, [r3, #20]
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	20000618 	.word	0x20000618

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f001 ff00 	bl	80022b0 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f001 f874 	bl	800159e <createBuffer>
 80004b6:	0002      	movs	r2, r0
 80004b8:	4b2c      	ldr	r3, [pc, #176]	; (800056c <main+0xc4>)
 80004ba:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f001 f86e 	bl	800159e <createBuffer>
 80004c2:	0002      	movs	r2, r0
 80004c4:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <main+0xc8>)
 80004c6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f866 	bl	800159e <createBuffer>
 80004d2:	0002      	movs	r2, r0
 80004d4:	4b27      	ldr	r3, [pc, #156]	; (8000574 <main+0xcc>)
 80004d6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 f85e 	bl	800159e <createBuffer>
 80004e2:	0002      	movs	r2, r0
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0xd0>)
 80004e6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f84e 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 fab6 	bl	8000a5c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f00b fbac 	bl	800bc4c <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80004f4:	f000 fa94 	bl	8000a20 <MX_DMA_Init>
  MX_ADC_Init();
 80004f8:	f000 f8b2 	bl	8000660 <MX_ADC_Init>
  MX_SPI1_Init();
 80004fc:	f000 f9ce 	bl	800089c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000500:	f000 fa5e 	bl	80009c0 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000504:	f000 fa10 	bl	8000928 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <main+0xd4>)
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0018      	movs	r0, r3
 8000510:	f002 ffc7 	bl	80034a2 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0xd4>)
 8000516:	2200      	movs	r2, #0
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	0018      	movs	r0, r3
 800051c:	f002 ffc1 	bl	80034a2 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8000520:	f001 f948 	bl	80017b4 <regInit>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d004      	beq.n	8000532 <main+0x8a>
  {
	  flags.conErr = 1;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0xd8>)
 800052a:	7e1a      	ldrb	r2, [r3, #24]
 800052c:	2104      	movs	r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <main+0xdc>)
 8000534:	0018      	movs	r0, r3
 8000536:	f006 fa23 	bl	8006980 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0xd8>)
 800053c:	7c1a      	ldrb	r2, [r3, #16]
 800053e:	2102      	movs	r1, #2
 8000540:	430a      	orrs	r2, r1
 8000542:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <main+0xd8>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f8      	beq.n	8000544 <main+0x9c>
	  {
		  clkHandler();
 8000552:	f000 fb6f 	bl	8000c34 <clkHandler>
		  buttonDebounce();
 8000556:	f000 fbeb 	bl	8000d30 <buttonDebounce>
		  comHandler();
 800055a:	f000 fc69 	bl	8000e30 <comHandler>
		  UI_Handler();
 800055e:	f000 fda7 	bl	80010b0 <UI_Handler>
		  testHandler();
 8000562:	f001 fc05 	bl	8001d70 <testHandler>
		  measHandler();
 8000566:	f000 fedf 	bl	8001328 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800056a:	e7eb      	b.n	8000544 <main+0x9c>
 800056c:	20000488 	.word	0x20000488
 8000570:	200006c0 	.word	0x200006c0
 8000574:	20001164 	.word	0x20001164
 8000578:	20000568 	.word	0x20000568
 800057c:	48000800 	.word	0x48000800
 8000580:	20000618 	.word	0x20000618
 8000584:	200005d0 	.word	0x200005d0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b099      	sub	sp, #100	; 0x64
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	242c      	movs	r4, #44	; 0x2c
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2334      	movs	r3, #52	; 0x34
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f00c f8fb 	bl	800c794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	231c      	movs	r3, #28
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2310      	movs	r3, #16
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f00c f8f3 	bl	800c794 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	231c      	movs	r3, #28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f00c f8ec 	bl	800c794 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005bc:	0021      	movs	r1, r4
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2232      	movs	r2, #50	; 0x32
 80005c2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2210      	movs	r2, #16
 80005da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2210      	movs	r2, #16
 80005e0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	0212      	lsls	r2, r2, #8
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0352      	lsls	r2, r2, #13
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	0018      	movs	r0, r3
 8000602:	f004 fe15 	bl	8005230 <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800060a:	f000 ffc3 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	211c      	movs	r1, #28
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2207      	movs	r2, #7
 8000614:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2202      	movs	r2, #2
 800061a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f005 f985 	bl	800593c <HAL_RCC_ClockConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000636:	f000 ffad 	bl	8001594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800063a:	003b      	movs	r3, r7
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0292      	lsls	r2, r2, #10
 8000640:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	003b      	movs	r3, r7
 800064a:	0018      	movs	r0, r3
 800064c:	f005 faf2 	bl	8005c34 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000654:	f000 ff9e 	bl	8001594 <Error_Handler>
  }
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b019      	add	sp, #100	; 0x64
 800065e:	bd90      	pop	{r4, r7, pc}

08000660 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	230c      	movs	r3, #12
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f00c f890 	bl	800c794 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000674:	4b87      	ldr	r3, [pc, #540]	; (8000894 <MX_ADC_Init+0x234>)
 8000676:	4a88      	ldr	r2, [pc, #544]	; (8000898 <MX_ADC_Init+0x238>)
 8000678:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800067a:	4b86      	ldr	r3, [pc, #536]	; (8000894 <MX_ADC_Init+0x234>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b84      	ldr	r3, [pc, #528]	; (8000894 <MX_ADC_Init+0x234>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b83      	ldr	r3, [pc, #524]	; (8000894 <MX_ADC_Init+0x234>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800068c:	4b81      	ldr	r3, [pc, #516]	; (8000894 <MX_ADC_Init+0x234>)
 800068e:	2201      	movs	r2, #1
 8000690:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b80      	ldr	r3, [pc, #512]	; (8000894 <MX_ADC_Init+0x234>)
 8000694:	2204      	movs	r2, #4
 8000696:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000698:	4b7e      	ldr	r3, [pc, #504]	; (8000894 <MX_ADC_Init+0x234>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800069e:	4b7d      	ldr	r3, [pc, #500]	; (8000894 <MX_ADC_Init+0x234>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006a4:	4b7b      	ldr	r3, [pc, #492]	; (8000894 <MX_ADC_Init+0x234>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b7a      	ldr	r3, [pc, #488]	; (8000894 <MX_ADC_Init+0x234>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b0:	4b78      	ldr	r3, [pc, #480]	; (8000894 <MX_ADC_Init+0x234>)
 80006b2:	22c2      	movs	r2, #194	; 0xc2
 80006b4:	32ff      	adds	r2, #255	; 0xff
 80006b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b8:	4b76      	ldr	r3, [pc, #472]	; (8000894 <MX_ADC_Init+0x234>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b75      	ldr	r3, [pc, #468]	; (8000894 <MX_ADC_Init+0x234>)
 80006c0:	2224      	movs	r2, #36	; 0x24
 80006c2:	2100      	movs	r1, #0
 80006c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c6:	4b73      	ldr	r3, [pc, #460]	; (8000894 <MX_ADC_Init+0x234>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006cc:	4b71      	ldr	r3, [pc, #452]	; (8000894 <MX_ADC_Init+0x234>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fe76 	bl	80023c0 <HAL_ADC_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006d8:	f000 ff5c 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0152      	lsls	r2, r2, #5
 80006e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0552      	lsls	r2, r2, #21
 80006f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	4b67      	ldr	r3, [pc, #412]	; (8000894 <MX_ADC_Init+0x234>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f833 	bl	8002764 <HAL_ADC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000702:	f000 ff47 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800070c:	1d3a      	adds	r2, r7, #4
 800070e:	4b61      	ldr	r3, [pc, #388]	; (8000894 <MX_ADC_Init+0x234>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f826 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800071c:	f000 ff3a 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2202      	movs	r2, #2
 8000724:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b5a      	ldr	r3, [pc, #360]	; (8000894 <MX_ADC_Init+0x234>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f819 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000736:	f000 ff2d 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2203      	movs	r2, #3
 800073e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	4b54      	ldr	r3, [pc, #336]	; (8000894 <MX_ADC_Init+0x234>)
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f002 f80c 	bl	8002764 <HAL_ADC_ConfigChannel>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000750:	f000 ff20 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2204      	movs	r2, #4
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <MX_ADC_Init+0x234>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 ffff 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800076a:	f000 ff13 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2205      	movs	r2, #5
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_ADC_Init+0x234>)
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fff2 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000784:	f000 ff06 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2206      	movs	r2, #6
 800078c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	4b40      	ldr	r3, [pc, #256]	; (8000894 <MX_ADC_Init+0x234>)
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f001 ffe5 	bl	8002764 <HAL_ADC_ConfigChannel>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800079e:	f000 fef9 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <MX_ADC_Init+0x234>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 ffd8 	bl	8002764 <HAL_ADC_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80007b8:	f000 feec 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2208      	movs	r2, #8
 80007c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_ADC_Init+0x234>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 ffcb 	bl	8002764 <HAL_ADC_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80007d2:	f000 fedf 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2209      	movs	r2, #9
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007dc:	1d3a      	adds	r2, r7, #4
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_ADC_Init+0x234>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 ffbe 	bl	8002764 <HAL_ADC_ConfigChannel>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80007ec:	f000 fed2 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220a      	movs	r2, #10
 80007f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_ADC_Init+0x234>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 ffb1 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000806:	f000 fec5 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	220b      	movs	r2, #11
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_ADC_Init+0x234>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f001 ffa4 	bl	8002764 <HAL_ADC_ConfigChannel>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000820:	f000 feb8 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_ADC_Init+0x234>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 ff97 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800083a:	f000 feab 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	220d      	movs	r2, #13
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_ADC_Init+0x234>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 ff8a 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000854:	f000 fe9e 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	220e      	movs	r2, #14
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_ADC_Init+0x234>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 ff7d 	bl	8002764 <HAL_ADC_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800086e:	f000 fe91 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	220f      	movs	r2, #15
 8000876:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000878:	1d3a      	adds	r2, r7, #4
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_ADC_Init+0x234>)
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f001 ff70 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000888:	f000 fe84 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000678 	.word	0x20000678
 8000898:	40012400 	.word	0x40012400

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_SPI1_Init+0x80>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_SPI1_Init+0x84>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_SPI1_Init+0x80>)
 80008a8:	2282      	movs	r2, #130	; 0x82
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_SPI1_Init+0x80>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_SPI1_Init+0x80>)
 80008b6:	22e0      	movs	r2, #224	; 0xe0
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI1_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI1_Init+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI1_Init+0x80>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI1_Init+0x80>)
 80008d2:	2238      	movs	r2, #56	; 0x38
 80008d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI1_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI1_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI1_Init+0x80>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI1_Init+0x80>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI1_Init+0x80>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI1_Init+0x80>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI1_Init+0x80>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f005 fa97 	bl	8005e30 <HAL_SPI_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fe45 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x88>)
 800090c:	2201      	movs	r2, #1
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fdc6 	bl	80034a2 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000056c 	.word	0x2000056c
 8000920:	40013000 	.word	0x40013000
 8000924:	48000400 	.word	0x48000400

08000928 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	0018      	movs	r0, r3
 8000932:	231c      	movs	r3, #28
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f00b ff2c 	bl	800c794 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_TIM14_Init+0x90>)
 8000940:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000944:	222f      	movs	r2, #47	; 0x2f
 8000946:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <MX_TIM14_Init+0x94>)
 8000952:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000962:	0018      	movs	r0, r3
 8000964:	f005 ffbc 	bl	80068e0 <HAL_TIM_Base_Init>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800096c:	f000 fe12 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f006 f856 	bl	8006a24 <HAL_TIM_OC_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 fe0a 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f006 f9ae 	bl	8006d00 <HAL_TIM_OC_ConfigChannel>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80009a8:	f000 fdf4 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b008      	add	sp, #32
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200005d0 	.word	0x200005d0
 80009b8:	40002000 	.word	0x40002000
 80009bc:	0000270f 	.word	0x0000270f

080009c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART3_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009cc:	2296      	movs	r2, #150	; 0x96
 80009ce:	0212      	lsls	r2, r2, #8
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f006 fc7f 	bl	8007308 <HAL_UART_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fdc1 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200004e4 	.word	0x200004e4
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	615a      	str	r2, [r3, #20]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2009      	movs	r0, #9
 8000a44:	f002 f950 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a48:	2009      	movs	r0, #9
 8000a4a:	f002 f962 	bl	8002d12 <HAL_NVIC_EnableIRQ>

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2414      	movs	r4, #20
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00b fe91 	bl	800c794 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b6a      	ldr	r3, [pc, #424]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	03c9      	lsls	r1, r1, #15
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	03db      	lsls	r3, r3, #15
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0309      	lsls	r1, r1, #12
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	031b      	lsls	r3, r3, #12
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b59      	ldr	r3, [pc, #356]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	02c9      	lsls	r1, r1, #11
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	02db      	lsls	r3, r3, #11
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0349      	lsls	r1, r1, #13
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	035b      	lsls	r3, r3, #13
 8000af8:	4013      	ands	r3, r2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000afe:	4949      	ldr	r1, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000b00:	4b49      	ldr	r3, [pc, #292]	; (8000c28 <MX_GPIO_Init+0x1cc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 fccc 	bl	80034a2 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000b0a:	239e      	movs	r3, #158	; 0x9e
 8000b0c:	015b      	lsls	r3, r3, #5
 8000b0e:	4847      	ldr	r0, [pc, #284]	; (8000c2c <MX_GPIO_Init+0x1d0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	0019      	movs	r1, r3
 8000b14:	f002 fcc5 	bl	80034a2 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0219      	lsls	r1, r3, #8
 8000b1c:	2390      	movs	r3, #144	; 0x90
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fcbd 	bl	80034a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000b2c:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_GPIO_Init+0x1cc>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f002 fb16 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000b4c:	0021      	movs	r1, r4
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	229e      	movs	r2, #158	; 0x9e
 8000b52:	0152      	lsls	r2, r2, #5
 8000b54:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	000c      	movs	r4, r1
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <MX_GPIO_Init+0x1d0>)
 8000b6e:	0019      	movs	r1, r3
 8000b70:	0010      	movs	r0, r2
 8000b72:	f002 fb01 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	22c0      	movs	r2, #192	; 0xc0
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	0352      	lsls	r2, r2, #13
 8000b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	193a      	adds	r2, r7, r4
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 faef 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bae:	193a      	adds	r2, r7, r4
 8000bb0:	2390      	movs	r3, #144	; 0x90
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fade 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0212      	lsls	r2, r2, #8
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	2390      	movs	r3, #144	; 0x90
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fac8 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2204      	movs	r2, #4
 8000bec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f002 fab9 	bl	8003178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2007      	movs	r0, #7
 8000c0c:	f002 f86c 	bl	8002ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c10:	2007      	movs	r0, #7
 8000c12:	f002 f87e 	bl	8002d12 <HAL_NVIC_EnableIRQ>

}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b00b      	add	sp, #44	; 0x2c
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40021000 	.word	0x40021000
 8000c24:	0000f3c4 	.word	0x0000f3c4
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	48000800 	.word	0x48000800
 8000c30:	48000c00 	.word	0x48000c00

08000c34 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8000c38:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <clkHandler+0xf4>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	438a      	bics	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <clkHandler+0xf4>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	2102      	movs	r1, #2
 8000c48:	438a      	bics	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <clkHandler+0xf4>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	2104      	movs	r1, #4
 8000c52:	438a      	bics	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <clkHandler+0xf4>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <clkHandler+0xf8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <clkHandler+0xf8>)
 8000c68:	601a      	str	r2, [r3, #0]
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//1 s
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <clkHandler+0xf8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	210a      	movs	r1, #10
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fae1 	bl	8000238 <__aeabi_uidivmod>
 8000c76:	1e0b      	subs	r3, r1, #0
 8000c78:	d109      	bne.n	8000c8e <clkHandler+0x5a>
	{
		sysTime[SYSTIME_SEC]++;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <clkHandler+0xf8>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <clkHandler+0xf8>)
 8000c82:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <clkHandler+0xf4>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	2102      	movs	r1, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <clkHandler+0xf4>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d042      	beq.n	8000d22 <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <clkHandler+0xf8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	213c      	movs	r1, #60	; 0x3c
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fac8 	bl	8000238 <__aeabi_uidivmod>
 8000ca8:	1e0b      	subs	r3, r1, #0
 8000caa:	d110      	bne.n	8000cce <clkHandler+0x9a>
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <clkHandler+0xf8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00c      	beq.n	8000cce <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <clkHandler+0xf8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <clkHandler+0xf8>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <clkHandler+0xf8>)
 8000cc2:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <clkHandler+0xf4>)
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	2104      	movs	r1, #4
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <clkHandler+0xf4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d022      	beq.n	8000d22 <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <clkHandler+0xf8>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	213c      	movs	r1, #60	; 0x3c
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff faa8 	bl	8000238 <__aeabi_uidivmod>
 8000ce8:	1e0b      	subs	r3, r1, #0
 8000cea:	d11a      	bne.n	8000d22 <clkHandler+0xee>
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <clkHandler+0xf8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d016      	beq.n	8000d22 <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <clkHandler+0xf8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <clkHandler+0xf8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <clkHandler+0xf8>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <clkHandler+0xf8>)
 8000d08:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <clkHandler+0xf4>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2108      	movs	r1, #8
 8000d10:	430a      	orrs	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <clkHandler+0xf8>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b16      	cmp	r3, #22
 8000d1a:	d902      	bls.n	8000d22 <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <clkHandler+0xf8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000618 	.word	0x20000618
 8000d2c:	2000023c 	.word	0x2000023c

08000d30 <buttonDebounce>:

void buttonDebounce(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	if(flags.buttons.butt0_int)
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <buttonDebounce+0xf0>)
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d031      	beq.n	8000da6 <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009a      	lsls	r2, r3, #2
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 fb8b 	bl	8003468 <HAL_GPIO_ReadPin>
 8000d52:	0003      	movs	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d106      	bne.n	8000d66 <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <buttonDebounce+0xf4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <buttonDebounce+0xf4>)
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e007      	b.n	8000d76 <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <buttonDebounce+0xf4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <buttonDebounce+0xf0>)
 8000d6e:	791a      	ldrb	r2, [r3, #4]
 8000d70:	2101      	movs	r1, #1
 8000d72:	438a      	bics	r2, r1
 8000d74:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <buttonDebounce+0xf4>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d913      	bls.n	8000da6 <buttonDebounce+0x76>
		{
			flags.buttons.butt0_ver = 1;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <buttonDebounce+0xf0>)
 8000d80:	791a      	ldrb	r2, [r3, #4]
 8000d82:	2102      	movs	r1, #2
 8000d84:	430a      	orrs	r2, r1
 8000d86:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <buttonDebounce+0xf0>)
 8000d8a:	791a      	ldrb	r2, [r3, #4]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	438a      	bics	r2, r1
 8000d90:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <buttonDebounce+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <buttonDebounce+0xf8>)
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f002 fb9b 	bl	80034dc <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <buttonDebounce+0xf0>)
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d032      	beq.n	8000e1a <buttonDebounce+0xea>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	005a      	lsls	r2, r3, #1
 8000db8:	2390      	movs	r3, #144	; 0x90
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f002 fb52 	bl	8003468 <HAL_GPIO_ReadPin>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d106      	bne.n	8000dd8 <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <buttonDebounce+0xfc>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <buttonDebounce+0xfc>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e007      	b.n	8000de8 <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <buttonDebounce+0xfc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <buttonDebounce+0xf0>)
 8000de0:	791a      	ldrb	r2, [r3, #4]
 8000de2:	2104      	movs	r1, #4
 8000de4:	438a      	bics	r2, r1
 8000de6:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <buttonDebounce+0xfc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d914      	bls.n	8000e1a <buttonDebounce+0xea>
		{
			flags.buttons.butt1_ver = 1;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <buttonDebounce+0xf0>)
 8000df2:	791a      	ldrb	r2, [r3, #4]
 8000df4:	2108      	movs	r1, #8
 8000df6:	430a      	orrs	r2, r1
 8000df8:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <buttonDebounce+0xf0>)
 8000dfc:	791a      	ldrb	r2, [r3, #4]
 8000dfe:	2104      	movs	r1, #4
 8000e00:	438a      	bics	r2, r1
 8000e02:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <buttonDebounce+0xfc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	021a      	lsls	r2, r3, #8
 8000e0e:	2390      	movs	r3, #144	; 0x90
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f002 fb61 	bl	80034dc <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000618 	.word	0x20000618
 8000e24:	2000024c 	.word	0x2000024c
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	2000024d 	.word	0x2000024d

08000e30 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	b0a1      	sub	sp, #132	; 0x84
 8000e34:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000e36:	4b97      	ldr	r3, [pc, #604]	; (8001094 <comHandler+0x264>)
 8000e38:	7a1b      	ldrb	r3, [r3, #8]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d042      	beq.n	8000eca <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000e44:	e02e      	b.n	8000ea4 <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000e46:	234b      	movs	r3, #75	; 0x4b
 8000e48:	2220      	movs	r2, #32
 8000e4a:	4694      	mov	ip, r2
 8000e4c:	44bc      	add	ip, r7
 8000e4e:	4463      	add	r3, ip
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b73      	cmp	r3, #115	; 0x73
 8000e54:	d008      	beq.n	8000e68 <comHandler+0x38>
 8000e56:	dc1f      	bgt.n	8000e98 <comHandler+0x68>
 8000e58:	2b70      	cmp	r3, #112	; 0x70
 8000e5a:	d011      	beq.n	8000e80 <comHandler+0x50>
 8000e5c:	dc1c      	bgt.n	8000e98 <comHandler+0x68>
 8000e5e:	2b63      	cmp	r3, #99	; 0x63
 8000e60:	d008      	beq.n	8000e74 <comHandler+0x44>
 8000e62:	2b6b      	cmp	r3, #107	; 0x6b
 8000e64:	d012      	beq.n	8000e8c <comHandler+0x5c>
 8000e66:	e017      	b.n	8000e98 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000e68:	4b8a      	ldr	r3, [pc, #552]	; (8001094 <comHandler+0x264>)
 8000e6a:	7b1a      	ldrb	r2, [r3, #12]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e72:	e017      	b.n	8000ea4 <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000e74:	4b87      	ldr	r3, [pc, #540]	; (8001094 <comHandler+0x264>)
 8000e76:	7b1a      	ldrb	r2, [r3, #12]
 8000e78:	2102      	movs	r1, #2
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e7e:	e011      	b.n	8000ea4 <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000e80:	4b84      	ldr	r3, [pc, #528]	; (8001094 <comHandler+0x264>)
 8000e82:	7b1a      	ldrb	r2, [r3, #12]
 8000e84:	2104      	movs	r1, #4
 8000e86:	430a      	orrs	r2, r1
 8000e88:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e8a:	e00b      	b.n	8000ea4 <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000e8c:	4b81      	ldr	r3, [pc, #516]	; (8001094 <comHandler+0x264>)
 8000e8e:	7b1a      	ldrb	r2, [r3, #12]
 8000e90:	2108      	movs	r1, #8
 8000e92:	430a      	orrs	r2, r1
 8000e94:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e96:	e005      	b.n	8000ea4 <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000e98:	4b7e      	ldr	r3, [pc, #504]	; (8001094 <comHandler+0x264>)
 8000e9a:	7b1a      	ldrb	r2, [r3, #12]
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000ea2:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000ea4:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <comHandler+0x268>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	224b      	movs	r2, #75	; 0x4b
 8000eaa:	2120      	movs	r1, #32
 8000eac:	468c      	mov	ip, r1
 8000eae:	44bc      	add	ip, r7
 8000eb0:	4462      	add	r2, ip
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fc06 	bl	80016c6 <pop>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1c2      	bne.n	8000e46 <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 8000ec0:	4b74      	ldr	r3, [pc, #464]	; (8001094 <comHandler+0x264>)
 8000ec2:	7a1a      	ldrb	r2, [r3, #8]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000eca:	4b72      	ldr	r3, [pc, #456]	; (8001094 <comHandler+0x264>)
 8000ecc:	7e1b      	ldrb	r3, [r3, #24]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d01d      	beq.n	8000f14 <comHandler+0xe4>
	{
		char txt[] = {"Test progress\n"};
 8000ed8:	203c      	movs	r0, #60	; 0x3c
 8000eda:	2320      	movs	r3, #32
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	181b      	adds	r3, r3, r0
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <comHandler+0x26c>)
 8000ee2:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000ee4:	c332      	stmia	r3!, {r1, r4, r5}
 8000ee6:	8811      	ldrh	r1, [r2, #0]
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	7892      	ldrb	r2, [r2, #2]
 8000eec:	709a      	strb	r2, [r3, #2]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000eee:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <comHandler+0x270>)
 8000ef0:	681e      	ldr	r6, [r3, #0]
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	181b      	adds	r3, r3, r0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff f904 	bl	8000108 <strlen>
 8000f00:	0003      	movs	r3, r0
 8000f02:	001a      	movs	r2, r3
 8000f04:	0020      	movs	r0, r4
 8000f06:	2320      	movs	r3, #32
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0030      	movs	r0, r6
 8000f10:	f000 fbb1 	bl	8001676 <pushStr>
	}

	if(flags.meas.measComplete)
 8000f14:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <comHandler+0x264>)
 8000f16:	7d1b      	ldrb	r3, [r3, #20]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d042      	beq.n	8000fa8 <comHandler+0x178>
	{
		char txt[] = {"Measure\n"};
 8000f22:	2130      	movs	r1, #48	; 0x30
 8000f24:	2320      	movs	r3, #32
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	185b      	adds	r3, r3, r1
 8000f2a:	4a5e      	ldr	r2, [pc, #376]	; (80010a4 <comHandler+0x274>)
 8000f2c:	ca11      	ldmia	r2!, {r0, r4}
 8000f2e:	c311      	stmia	r3!, {r0, r4}
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	701a      	strb	r2, [r3, #0]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f34:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <comHandler+0x270>)
 8000f36:	681e      	ldr	r6, [r3, #0]
 8000f38:	000c      	movs	r4, r1
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	185b      	adds	r3, r3, r1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff f8e1 	bl	8000108 <strlen>
 8000f46:	0003      	movs	r3, r0
 8000f48:	001a      	movs	r2, r3
 8000f4a:	0021      	movs	r1, r4
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	185b      	adds	r3, r3, r1
 8000f52:	0019      	movs	r1, r3
 8000f54:	0030      	movs	r0, r6
 8000f56:	f000 fb8e 	bl	8001676 <pushStr>

		uint8_t measResult[32];
		for(int i = 0; i < 16; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f5e:	e018      	b.n	8000f92 <comHandler+0x162>
		{
			measResult[2*i] = ADC_Results[i] & 0x00FF;
 8000f60:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <comHandler+0x278>)
 8000f62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	58d2      	ldr	r2, [r2, r3]
 8000f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b2d1      	uxtb	r1, r2
 8000f6e:	2220      	movs	r2, #32
 8000f70:	18ba      	adds	r2, r7, r2
 8000f72:	54d1      	strb	r1, [r2, r3]
			measResult[2*i + 1] = (ADC_Results[i] & 0xFF00) >> 8;
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <comHandler+0x278>)
 8000f76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	0a1a      	lsrs	r2, r3, #8
 8000f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2d1      	uxtb	r1, r2
 8000f86:	2220      	movs	r2, #32
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 16; i++)
 8000f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f8e:	3301      	adds	r3, #1
 8000f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	dde3      	ble.n	8000f60 <comHandler+0x130>
		}
		pushStr(USB_Tx_Buffer, measResult, 32);
 8000f98:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <comHandler+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	18b9      	adds	r1, r7, r2
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fb67 	bl	8001676 <pushStr>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <comHandler+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	7d1b      	ldrb	r3, [r3, #20]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d118      	bne.n	8000fe4 <comHandler+0x1b4>
	{
		char msg[] = {"Buffer full\n"};
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	185b      	adds	r3, r3, r1
 8000fba:	4a3c      	ldr	r2, [pc, #240]	; (80010ac <comHandler+0x27c>)
 8000fbc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fbe:	c331      	stmia	r3!, {r0, r4, r5}
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000fc4:	000e      	movs	r6, r1
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff f89b 	bl	8000108 <strlen>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	199b      	adds	r3, r3, r6
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f00a fede 	bl	800bda0 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <comHandler+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d04e      	beq.n	800108c <comHandler+0x25c>
	{
 8000fee:	466b      	mov	r3, sp
 8000ff0:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <comHandler+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	677b      	str	r3, [r7, #116]	; 0x74
		char tmpStr[size+1];
 8000ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	673a      	str	r2, [r7, #112]	; 0x70
 8001002:	001a      	movs	r2, r3
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	2200      	movs	r2, #0
 8001008:	60fa      	str	r2, [r7, #12]
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	0002      	movs	r2, r0
 8001010:	0f52      	lsrs	r2, r2, #29
 8001012:	000c      	movs	r4, r1
 8001014:	00e4      	lsls	r4, r4, #3
 8001016:	61fc      	str	r4, [r7, #28]
 8001018:	69fc      	ldr	r4, [r7, #28]
 800101a:	4314      	orrs	r4, r2
 800101c:	61fc      	str	r4, [r7, #28]
 800101e:	0002      	movs	r2, r0
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	61ba      	str	r2, [r7, #24]
 8001024:	001a      	movs	r2, r3
 8001026:	603a      	str	r2, [r7, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	0002      	movs	r2, r0
 8001032:	0f52      	lsrs	r2, r2, #29
 8001034:	000c      	movs	r4, r1
 8001036:	00e4      	lsls	r4, r4, #3
 8001038:	617c      	str	r4, [r7, #20]
 800103a:	697c      	ldr	r4, [r7, #20]
 800103c:	4314      	orrs	r4, r2
 800103e:	617c      	str	r4, [r7, #20]
 8001040:	0002      	movs	r2, r0
 8001042:	00d2      	lsls	r2, r2, #3
 8001044:	613a      	str	r2, [r7, #16]
 8001046:	3307      	adds	r3, #7
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	466a      	mov	r2, sp
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	469d      	mov	sp, r3
 8001052:	466b      	mov	r3, sp
 8001054:	3300      	adds	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < size; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800105c:	e00a      	b.n	8001074 <comHandler+0x244>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <comHandler+0x270>)
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	0019      	movs	r1, r3
 800106a:	f000 fb2c 	bl	80016c6 <pop>
		for(int i = 0; i < size; i++)
 800106e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001070:	3301      	adds	r3, #1
 8001072:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001074:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <comHandler+0x22e>
		}
		CDC_Transmit_FS(tmpStr, size);
 800107c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800107e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001080:	b292      	uxth	r2, r2
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f00a fe8b 	bl	800bda0 <CDC_Transmit_FS>
 800108a:	46b5      	mov	sp, r6
	}

}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b021      	add	sp, #132	; 0x84
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	20000618 	.word	0x20000618
 8001098:	20001164 	.word	0x20001164
 800109c:	0800d008 	.word	0x0800d008
 80010a0:	20000568 	.word	0x20000568
 80010a4:	0800d018 	.word	0x0800d018
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	0800d024 	.word	0x0800d024

080010b0 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 80010b4:	4b95      	ldr	r3, [pc, #596]	; (800130c <UI_Handler+0x25c>)
 80010b6:	7c1b      	ldrb	r3, [r3, #16]
 80010b8:	2204      	movs	r2, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <UI_Handler+0x2a>
 80010c2:	4b93      	ldr	r3, [pc, #588]	; (8001310 <UI_Handler+0x260>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d007      	beq.n	80010da <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <UI_Handler+0x260>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <UI_Handler+0x264>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b90      	ldr	r3, [pc, #576]	; (8001318 <UI_Handler+0x268>)
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e05e      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <UI_Handler+0x25c>)
 80010dc:	7c1b      	ldrb	r3, [r3, #16]
 80010de:	2208      	movs	r2, #8
 80010e0:	4013      	ands	r3, r2
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d010      	beq.n	800110a <UI_Handler+0x5a>
 80010e8:	4b89      	ldr	r3, [pc, #548]	; (8001310 <UI_Handler+0x260>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10c      	bne.n	800110a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 80010f0:	4b87      	ldr	r3, [pc, #540]	; (8001310 <UI_Handler+0x260>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80010f6:	4b87      	ldr	r3, [pc, #540]	; (8001314 <UI_Handler+0x264>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b87      	ldr	r3, [pc, #540]	; (8001318 <UI_Handler+0x268>)
 80010fc:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <UI_Handler+0x25c>)
 8001100:	7c1a      	ldrb	r2, [r3, #16]
 8001102:	2108      	movs	r1, #8
 8001104:	438a      	bics	r2, r1
 8001106:	741a      	strb	r2, [r3, #16]
 8001108:	e046      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <UI_Handler+0x25c>)
 800110c:	7c1b      	ldrb	r3, [r3, #16]
 800110e:	2210      	movs	r2, #16
 8001110:	4013      	ands	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d010      	beq.n	800113a <UI_Handler+0x8a>
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <UI_Handler+0x260>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10c      	bne.n	800113a <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001120:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <UI_Handler+0x260>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <UI_Handler+0x264>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <UI_Handler+0x268>)
 800112c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <UI_Handler+0x25c>)
 8001130:	7c1a      	ldrb	r2, [r3, #16]
 8001132:	2110      	movs	r1, #16
 8001134:	438a      	bics	r2, r1
 8001136:	741a      	strb	r2, [r3, #16]
 8001138:	e02e      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <UI_Handler+0x25c>)
 800113c:	7c1b      	ldrb	r3, [r3, #16]
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d010      	beq.n	800116a <UI_Handler+0xba>
 8001148:	4b71      	ldr	r3, [pc, #452]	; (8001310 <UI_Handler+0x260>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001150:	4b6f      	ldr	r3, [pc, #444]	; (8001310 <UI_Handler+0x260>)
 8001152:	2202      	movs	r2, #2
 8001154:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <UI_Handler+0x264>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <UI_Handler+0x268>)
 800115c:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 800115e:	4b6b      	ldr	r3, [pc, #428]	; (800130c <UI_Handler+0x25c>)
 8001160:	7c1a      	ldrb	r2, [r3, #16]
 8001162:	2102      	movs	r1, #2
 8001164:	438a      	bics	r2, r1
 8001166:	741a      	strb	r2, [r3, #16]
 8001168:	e016      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <UI_Handler+0x25c>)
 800116c:	7c1b      	ldrb	r3, [r3, #16]
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00f      	beq.n	8001198 <UI_Handler+0xe8>
 8001178:	4b65      	ldr	r3, [pc, #404]	; (8001310 <UI_Handler+0x260>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <UI_Handler+0x260>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <UI_Handler+0x264>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <UI_Handler+0x268>)
 800118c:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <UI_Handler+0x25c>)
 8001190:	7c1a      	ldrb	r2, [r3, #16]
 8001192:	2101      	movs	r1, #1
 8001194:	438a      	bics	r2, r1
 8001196:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <UI_Handler+0x260>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d900      	bls.n	80011a2 <UI_Handler+0xf2>
 80011a0:	e0a0      	b.n	80012e4 <UI_Handler+0x234>
 80011a2:	009a      	lsls	r2, r3, #2
 80011a4:	4b5d      	ldr	r3, [pc, #372]	; (800131c <UI_Handler+0x26c>)
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	485b      	ldr	r0, [pc, #364]	; (8001320 <UI_Handler+0x270>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	0019      	movs	r1, r3
 80011b6:	f002 f974 	bl	80034a2 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 80011ba:	4b56      	ldr	r3, [pc, #344]	; (8001314 <UI_Handler+0x264>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b56      	ldr	r3, [pc, #344]	; (8001318 <UI_Handler+0x268>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b31      	cmp	r3, #49	; 0x31
 80011c6:	d800      	bhi.n	80011ca <UI_Handler+0x11a>
 80011c8:	e094      	b.n	80012f4 <UI_Handler+0x244>
		{
			UI_State = OFF;
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <UI_Handler+0x260>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4852      	ldr	r0, [pc, #328]	; (8001320 <UI_Handler+0x270>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	0019      	movs	r1, r3
 80011da:	f002 f962 	bl	80034a2 <HAL_GPIO_WritePin>
		}
		break;
 80011de:	e089      	b.n	80012f4 <UI_Handler+0x244>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	484e      	ldr	r0, [pc, #312]	; (8001320 <UI_Handler+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	0019      	movs	r1, r3
 80011ea:	f002 f95a 	bl	80034a2 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <UI_Handler+0x264>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <UI_Handler+0x268>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b63      	cmp	r3, #99	; 0x63
 80011fa:	d800      	bhi.n	80011fe <UI_Handler+0x14e>
 80011fc:	e07c      	b.n	80012f8 <UI_Handler+0x248>
		{
			UI_State = OFF;
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <UI_Handler+0x260>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <UI_Handler+0x270>)
 800120a:	2200      	movs	r2, #0
 800120c:	0019      	movs	r1, r3
 800120e:	f002 f948 	bl	80034a2 <HAL_GPIO_WritePin>
		}
		break;
 8001212:	e071      	b.n	80012f8 <UI_Handler+0x248>

	case ERROR:
		if(!flags.ui.error)
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <UI_Handler+0x25c>)
 8001216:	7c1b      	ldrb	r3, [r3, #16]
 8001218:	2204      	movs	r2, #4
 800121a:	4013      	ands	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <UI_Handler+0x178>
			UI_State = OFF;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <UI_Handler+0x260>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <UI_Handler+0x264>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <UI_Handler+0x268>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2132      	movs	r1, #50	; 0x32
 8001234:	0018      	movs	r0, r3
 8001236:	f7fe ffff 	bl	8000238 <__aeabi_uidivmod>
 800123a:	1e0b      	subs	r3, r1, #0
 800123c:	d15e      	bne.n	80012fc <UI_Handler+0x24c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	4a37      	ldr	r2, [pc, #220]	; (8001320 <UI_Handler+0x270>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f002 f948 	bl	80034dc <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	021a      	lsls	r2, r3, #8
 8001250:	2390      	movs	r3, #144	; 0x90
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f002 f940 	bl	80034dc <HAL_GPIO_TogglePin>
		}
		break;
 800125c:	e04e      	b.n	80012fc <UI_Handler+0x24c>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <UI_Handler+0x264>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <UI_Handler+0x268>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2123      	movs	r1, #35	; 0x23
 800126a:	0018      	movs	r0, r3
 800126c:	f7fe ffe4 	bl	8000238 <__aeabi_uidivmod>
 8001270:	1e0b      	subs	r3, r1, #0
 8001272:	d106      	bne.n	8001282 <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <UI_Handler+0x270>)
 800127a:	0019      	movs	r1, r3
 800127c:	0010      	movs	r0, r2
 800127e:	f002 f92d 	bl	80034dc <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <UI_Handler+0x264>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <UI_Handler+0x268>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2bd0      	cmp	r3, #208	; 0xd0
 800128e:	d937      	bls.n	8001300 <UI_Handler+0x250>
			UI_State = OFF;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <UI_Handler+0x260>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		break;
 8001296:	e033      	b.n	8001300 <UI_Handler+0x250>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <UI_Handler+0x264>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <UI_Handler+0x268>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2132      	movs	r1, #50	; 0x32
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7fe ffc7 	bl	8000238 <__aeabi_uidivmod>
 80012aa:	1e0b      	subs	r3, r1, #0
 80012ac:	d10d      	bne.n	80012ca <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <UI_Handler+0x270>)
 80012b4:	0019      	movs	r1, r3
 80012b6:	0010      	movs	r0, r2
 80012b8:	f002 f910 	bl	80034dc <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <UI_Handler+0x274>)
 80012c2:	0019      	movs	r1, r3
 80012c4:	0010      	movs	r0, r2
 80012c6:	f002 f909 	bl	80034dc <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <UI_Handler+0x264>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <UI_Handler+0x268>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad2      	subs	r2, r2, r3
 80012d4:	2395      	movs	r3, #149	; 0x95
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	429a      	cmp	r2, r3
 80012da:	d913      	bls.n	8001304 <UI_Handler+0x254>
			UI_State = OFF;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <UI_Handler+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		break;
 80012e2:	e00f      	b.n	8001304 <UI_Handler+0x254>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <UI_Handler+0x270>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	0019      	movs	r1, r3
 80012ee:	f002 f8d8 	bl	80034a2 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
#endif
		break;
 80012f2:	e008      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	e006      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	e004      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	e002      	b.n	8001306 <UI_Handler+0x256>
		break;
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	e000      	b.n	8001306 <UI_Handler+0x256>
		break;
 8001304:	46c0      	nop			; (mov r8, r8)

	}
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000618 	.word	0x20000618
 8001310:	2000024e 	.word	0x2000024e
 8001314:	2000023c 	.word	0x2000023c
 8001318:	20000250 	.word	0x20000250
 800131c:	0800d0c4 	.word	0x0800d0c4
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400

08001328 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	af00      	add	r7, sp, #0
		U_BAT,					//kanál 6
		PAD9, PAD15,			//kanál 4, 13
		U48V_CURRENT			//kanál 3
	}ADC_State;

	flags.meas.measComplete = 0;
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <measHandler+0x1bc>)
 800132e:	7d1a      	ldrb	r2, [r3, #20]
 8001330:	2102      	movs	r1, #2
 8001332:	438a      	bics	r2, r1
 8001334:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001336:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <measHandler+0x1bc>)
 8001338:	7d1a      	ldrb	r2, [r3, #20]
 800133a:	2110      	movs	r1, #16
 800133c:	438a      	bics	r2, r1
 800133e:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <measHandler+0x1bc>)
 8001342:	7d1b      	ldrb	r3, [r3, #20]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03b      	beq.n	80013c6 <measHandler+0x9e>
	{
		if(ADC_State == WAITING)
 800134e:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <measHandler+0x1c0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12d      	bne.n	80013b2 <measHandler+0x8a>
		{
			flags.meas.measRunning = 1;
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <measHandler+0x1bc>)
 8001358:	7d1a      	ldrb	r2, [r3, #20]
 800135a:	2108      	movs	r1, #8
 800135c:	430a      	orrs	r2, r1
 800135e:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST)	//probíhá battery test
 8001360:	f000 fcfc 	bl	8001d5c <currentPhase>
 8001364:	0003      	movs	r3, r0
 8001366:	2b05      	cmp	r3, #5
 8001368:	d111      	bne.n	800138e <measHandler+0x66>
			{
				flags.meas.onlyBattery = 1;
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <measHandler+0x1bc>)
 800136c:	7d1a      	ldrb	r2, [r3, #20]
 800136e:	2120      	movs	r1, #32
 8001370:	430a      	orrs	r2, r1
 8001372:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001374:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <measHandler+0x1c0>)
 8001376:	220d      	movs	r2, #13
 8001378:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_6);
 800137a:	2006      	movs	r0, #6
 800137c:	f000 f8be 	bl	80014fc <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 8001380:	495a      	ldr	r1, [pc, #360]	; (80014ec <measHandler+0x1c4>)
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <measHandler+0x1c8>)
 8001384:	2214      	movs	r2, #20
 8001386:	0018      	movs	r0, r3
 8001388:	f001 f95a 	bl	8002640 <HAL_ADC_Start_DMA>
 800138c:	e016      	b.n	80013bc <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 800138e:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <measHandler+0x1bc>)
 8001390:	7d1a      	ldrb	r2, [r3, #20]
 8001392:	2120      	movs	r1, #32
 8001394:	438a      	bics	r2, r1
 8001396:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <measHandler+0x1c0>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_7);
 800139e:	2007      	movs	r0, #7
 80013a0:	f000 f8ac 	bl	80014fc <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80013a4:	4951      	ldr	r1, [pc, #324]	; (80014ec <measHandler+0x1c4>)
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <measHandler+0x1c8>)
 80013a8:	2214      	movs	r2, #20
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 f948 	bl	8002640 <HAL_ADC_Start_DMA>
 80013b0:	e004      	b.n	80013bc <measHandler+0x94>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <measHandler+0x1bc>)
 80013b4:	7d1a      	ldrb	r2, [r3, #20]
 80013b6:	2110      	movs	r1, #16
 80013b8:	430a      	orrs	r2, r1
 80013ba:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <measHandler+0x1bc>)
 80013be:	7d1a      	ldrb	r2, [r3, #20]
 80013c0:	2101      	movs	r1, #1
 80013c2:	438a      	bics	r2, r1
 80013c4:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != WAITING)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <measHandler+0x1c0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <measHandler+0xa8>
 80013ce:	e086      	b.n	80014de <measHandler+0x1b6>
	{
		if(flags.meas.measDataReady)
 80013d0:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <measHandler+0x1bc>)
 80013d2:	7d1b      	ldrb	r3, [r3, #20]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d100      	bne.n	80013e0 <measHandler+0xb8>
 80013de:	e07e      	b.n	80014de <measHandler+0x1b6>
		{
			flags.meas.measDataReady = 0;
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <measHandler+0x1bc>)
 80013e2:	7d1a      	ldrb	r2, [r3, #20]
 80013e4:	2104      	movs	r1, #4
 80013e6:	438a      	bics	r2, r1
 80013e8:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <measHandler+0x1c0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b0d      	cmp	r3, #13
 80013f0:	d116      	bne.n	8001420 <measHandler+0xf8>
			{
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <measHandler+0x1c0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	1e5c      	subs	r4, r3, #1
 80013f8:	f000 f8a8 	bl	800154c <ADC_dataProcessing>
 80013fc:	0001      	movs	r1, r0
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <measHandler+0x1cc>)
 8001400:	00a2      	lsls	r2, r4, #2
 8001402:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <measHandler+0x1bc>)
 8001406:	7d1a      	ldrb	r2, [r3, #20]
 8001408:	2102      	movs	r1, #2
 800140a:	430a      	orrs	r2, r1
 800140c:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <measHandler+0x1bc>)
 8001410:	7d1a      	ldrb	r2, [r3, #20]
 8001412:	2108      	movs	r1, #8
 8001414:	438a      	bics	r2, r1
 8001416:	751a      	strb	r2, [r3, #20]
				ADC_State = WAITING;
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <measHandler+0x1c0>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
			}
		}
	}
}
 800141e:	e05e      	b.n	80014de <measHandler+0x1b6>
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <measHandler+0x1c0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	1e5c      	subs	r4, r3, #1
 8001426:	f000 f891 	bl	800154c <ADC_dataProcessing>
 800142a:	0001      	movs	r1, r0
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <measHandler+0x1cc>)
 800142e:	00a2      	lsls	r2, r4, #2
 8001430:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <measHandler+0x1c0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	3302      	adds	r3, #2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <measHandler+0x1c0>)
 800143c:	701a      	strb	r2, [r3, #0]
				switch(ADC_State)
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <measHandler+0x1c0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d844      	bhi.n	80014d0 <measHandler+0x1a8>
 8001446:	009a      	lsls	r2, r3, #2
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <measHandler+0x1d0>)
 800144a:	18d3      	adds	r3, r2, r3
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	469f      	mov	pc, r3
					changeChannel(ADC_CHANNEL_7);
 8001450:	2007      	movs	r0, #7
 8001452:	f000 f853 	bl	80014fc <changeChannel>
					break;
 8001456:	e03c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_10);
 8001458:	200a      	movs	r0, #10
 800145a:	f000 f84f 	bl	80014fc <changeChannel>
					break;
 800145e:	e038      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_14);
 8001460:	200e      	movs	r0, #14
 8001462:	f000 f84b 	bl	80014fc <changeChannel>
					break;
 8001466:	e034      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_12);
 8001468:	200c      	movs	r0, #12
 800146a:	f000 f847 	bl	80014fc <changeChannel>
					break;
 800146e:	e030      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_5);
 8001470:	2005      	movs	r0, #5
 8001472:	f000 f843 	bl	80014fc <changeChannel>
					break;
 8001476:	e02c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_11);
 8001478:	200b      	movs	r0, #11
 800147a:	f000 f83f 	bl	80014fc <changeChannel>
					break;
 800147e:	e028      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_9);
 8001480:	2009      	movs	r0, #9
 8001482:	f000 f83b 	bl	80014fc <changeChannel>
					break;
 8001486:	e024      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_2);
 8001488:	2002      	movs	r0, #2
 800148a:	f000 f837 	bl	80014fc <changeChannel>
					break;
 800148e:	e020      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_15);
 8001490:	200f      	movs	r0, #15
 8001492:	f000 f833 	bl	80014fc <changeChannel>
					break;
 8001496:	e01c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_0);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f82f 	bl	80014fc <changeChannel>
					break;
 800149e:	e018      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_8);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f000 f82b 	bl	80014fc <changeChannel>
					break;
 80014a6:	e014      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f827 	bl	80014fc <changeChannel>
					break;
 80014ae:	e010      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_6);
 80014b0:	2006      	movs	r0, #6
 80014b2:	f000 f823 	bl	80014fc <changeChannel>
					break;
 80014b6:	e00c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_4);
 80014b8:	2004      	movs	r0, #4
 80014ba:	f000 f81f 	bl	80014fc <changeChannel>
					break;
 80014be:	e008      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_13);
 80014c0:	200d      	movs	r0, #13
 80014c2:	f000 f81b 	bl	80014fc <changeChannel>
					break;
 80014c6:	e004      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_3);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f817 	bl	80014fc <changeChannel>
					break;
 80014ce:	e000      	b.n	80014d2 <measHandler+0x1aa>
					break;
 80014d0:	46c0      	nop			; (mov r8, r8)
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80014d2:	4906      	ldr	r1, [pc, #24]	; (80014ec <measHandler+0x1c4>)
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <measHandler+0x1c8>)
 80014d6:	2214      	movs	r2, #20
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 f8b1 	bl	8002640 <HAL_ADC_Start_DMA>
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	20000618 	.word	0x20000618
 80014e8:	20000254 	.word	0x20000254
 80014ec:	20000494 	.word	0x20000494
 80014f0:	20000678 	.word	0x20000678
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	0800d0dc 	.word	0x0800d0dc

080014fc <changeChannel>:

//_____Změna lanálu ADC_____//
static void changeChannel(unsigned int channel)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001504:	240c      	movs	r4, #12
 8001506:	193b      	adds	r3, r7, r4
 8001508:	0018      	movs	r0, r3
 800150a:	230c      	movs	r3, #12
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f00b f940 	bl	800c794 <memset>
	sConfig.Channel = channel;
 8001514:	0021      	movs	r1, r4
 8001516:	187b      	adds	r3, r7, r1
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	0152      	lsls	r2, r2, #5
 8001522:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0552      	lsls	r2, r2, #21
 800152a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800152c:	187a      	adds	r2, r7, r1
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <changeChannel+0x4c>)
 8001530:	0011      	movs	r1, r2
 8001532:	0018      	movs	r0, r3
 8001534:	f001 f916 	bl	8002764 <HAL_ADC_ConfigChannel>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <changeChannel+0x44>
	{
		Error_Handler();
 800153c:	f000 f82a 	bl	8001594 <Error_Handler>
	}
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b007      	add	sp, #28
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	20000678 	.word	0x20000678

0800154c <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static uint32_t ADC_dataProcessing()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint32_t mean = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	e009      	b.n	8001570 <ADC_dataProcessing+0x24>
	{
		mean += ADC_Buffer[i];
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <ADC_dataProcessing+0x44>)
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	58d3      	ldr	r3, [r2, r3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	18d3      	adds	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b13      	cmp	r3, #19
 8001574:	ddf2      	ble.n	800155c <ADC_dataProcessing+0x10>
	}
	mean = mean/20;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2114      	movs	r1, #20
 800157a:	0018      	movs	r0, r3
 800157c:	f7fe fdd6 	bl	800012c <__udivsi3>
 8001580:	0003      	movs	r3, r0
 8001582:	607b      	str	r3, [r7, #4]

	return mean;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000494 	.word	0x20000494

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>

0800159e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80015a6:	2018      	movs	r0, #24
 80015a8:	f00b f8e0 	bl	800c76c <malloc>
 80015ac:	0003      	movs	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <createBuffer+0x1c>
	{
		return NULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e022      	b.n	8001600 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0018      	movs	r0, r3
 80015be:	f00b f8d5 	bl	800c76c <malloc>
 80015c2:	0003      	movs	r3, r0
 80015c4:	001a      	movs	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <createBuffer+0x40>
	{
		free(buffer);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f00b f8d3 	bl	800c780 <free>
		return NULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	e010      	b.n	8001600 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	751a      	strb	r2, [r3, #20]

	return buffer;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}

08001608 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	000a      	movs	r2, r1
 8001612:	1cfb      	adds	r3, r7, #3
 8001614:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7d1b      	ldrb	r3, [r3, #20]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d101      	bne.n	8001622 <push+0x1a>
		return BUFFER_FULL;
 800161e:	2302      	movs	r3, #2
 8001620:	e025      	b.n	800166e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	0019      	movs	r1, r3
 800162e:	0010      	movs	r0, r2
 8001630:	f7fe feec 	bl	800040c <__aeabi_idivmod>
 8001634:	000b      	movs	r3, r1
 8001636:	001a      	movs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	1cfa      	adds	r2, r7, #3
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	db01      	blt.n	8001666 <push+0x5e>
 8001662:	2202      	movs	r2, #2
 8001664:	e000      	b.n	8001668 <push+0x60>
 8001666:	2200      	movs	r2, #0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}

08001676 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	18cb      	adds	r3, r1, r3
 800168e:	429a      	cmp	r2, r3
 8001690:	da01      	bge.n	8001696 <pushStr+0x20>
		return BUFFER_FULL;
 8001692:	2302      	movs	r3, #2
 8001694:	e013      	b.n	80016be <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00b      	b.n	80016b4 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	18d3      	adds	r3, r2, r3
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff ffad 	bl	8001608 <push>
	for(int i = 0; i < len; i++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbef      	blt.n	800169c <pushStr+0x26>
	}

	return BUFFER_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7d1b      	ldrb	r3, [r3, #20]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <pop+0x16>
		return BUFFER_EMPTY;
 80016d8:	2301      	movs	r3, #1
 80016da:	e023      	b.n	8001724 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f7fe fe87 	bl	800040c <__aeabi_idivmod>
 80016fe:	000b      	movs	r3, r1
 8001700:	001a      	movs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	4313      	orrs	r3, r2
 8001718:	0fdb      	lsrs	r3, r3, #31
 800171a:	b2db      	uxtb	r3, r3
 800171c:	001a      	movs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <getCount+0x7c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	222a      	movs	r2, #42	; 0x2a
 800173c:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800173e:	1dbb      	adds	r3, r7, #6
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001744:	1dba      	adds	r2, r7, #6
 8001746:	1df9      	adds	r1, r7, #7
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <getCount+0x80>)
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	f004 fd7e 	bl	8006250 <HAL_SPI_TransmitReceive>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <getCount+0x30>
			return 0;
 8001758:	2300      	movs	r3, #0
 800175a:	e021      	b.n	80017a0 <getCount+0x74>
		regCount++;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <getCount+0x7c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <getCount+0x7c>)
 8001766:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f000 fe05 	bl	8002378 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <getCount+0x7c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b63      	cmp	r3, #99	; 0x63
 8001774:	d906      	bls.n	8001784 <getCount+0x58>
		{
			flags.conErr = 1;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <getCount+0x84>)
 8001778:	7e1a      	ldrb	r2, [r3, #24]
 800177a:	2104      	movs	r1, #4
 800177c:	430a      	orrs	r2, r1
 800177e:	761a      	strb	r2, [r3, #24]
			return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e00d      	b.n	80017a0 <getCount+0x74>
		}
	}
	while(answer != question);
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d1d3      	bne.n	8001738 <getCount+0xc>

	regCount--;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <getCount+0x7c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <getCount+0x7c>)
 800179a:	701a      	strb	r2, [r3, #0]

	return regCount;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <getCount+0x7c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200006bd 	.word	0x200006bd
 80017ac:	2000056c 	.word	0x2000056c
 80017b0:	20000618 	.word	0x20000618

080017b4 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	482f      	ldr	r0, [pc, #188]	; (800187c <regInit+0xc8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	0019      	movs	r1, r3
 80017c4:	f001 fe6d 	bl	80034a2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f000 fdd5 	bl	8002378 <HAL_Delay>
	REG_CLR_INACTIVE;
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <regInit+0xc8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	0019      	movs	r1, r3
 80017d8:	f001 fe63 	bl	80034a2 <HAL_GPIO_WritePin>

	REG_DISABLE;
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <regInit+0xc8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	0019      	movs	r1, r3
 80017e6:	f001 fe5c 	bl	80034a2 <HAL_GPIO_WritePin>

	if(getCount() == 0)
 80017ea:	f7ff ff9f 	bl	800172c <getCount>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d101      	bne.n	80017f6 <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 80017f2:	2301      	movs	r3, #1
 80017f4:	e03e      	b.n	8001874 <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <regInit+0xcc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f00a ffb6 	bl	800c76c <malloc>
 8001800:	0003      	movs	r3, r0
 8001802:	001a      	movs	r2, r3
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <regInit+0xd0>)
 8001806:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <regInit+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <regInit+0x66>
	{
		regState = REG_ERR;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <regInit+0xd4>)
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001816:	2302      	movs	r3, #2
 8001818:	e02c      	b.n	8001874 <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e008      	b.n	8001832 <regInit+0x7e>
	{
		regValues[i] = 0;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <regInit+0xd0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	18d3      	adds	r3, r2, r3
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <regInit+0xcc>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	001a      	movs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4293      	cmp	r3, r2
 800183c:	dbf0      	blt.n	8001820 <regInit+0x6c>
	}

	sendData();
 800183e:	f000 f827 	bl	8001890 <sendData>

	REG_ENABLE;
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <regInit+0xc8>)
 8001848:	2200      	movs	r2, #0
 800184a:	0019      	movs	r1, r3
 800184c:	f001 fe29 	bl	80034a2 <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <regInit+0xd0>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <regInit+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <regInit+0xd8>)
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	f004 fb9f 	bl	8005fa0 <HAL_SPI_Transmit>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d101      	bne.n	800186a <regInit+0xb6>
 8001866:	2200      	movs	r2, #0
 8001868:	e000      	b.n	800186c <regInit+0xb8>
 800186a:	2202      	movs	r2, #2
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <regInit+0xd4>)
 800186e:	701a      	strb	r2, [r3, #0]
	return regState;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <regInit+0xd4>)
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	48000400 	.word	0x48000400
 8001880:	200006bd 	.word	0x200006bd
 8001884:	200006b8 	.word	0x200006b8
 8001888:	200006bc 	.word	0x200006bc
 800188c:	2000056c 	.word	0x2000056c

08001890 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <sendData+0x54>)
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <sendData+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <sendData+0x5c>)
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	f004 fb7d 	bl	8005fa0 <HAL_SPI_Transmit>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d114      	bne.n	80018d4 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <sendData+0x60>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	0019      	movs	r1, r3
 80018b4:	f001 fdf5 	bl	80034a2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f000 fd5d 	bl	8002378 <HAL_Delay>
		REG_RCLK_LOW;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <sendData+0x60>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	0019      	movs	r1, r3
 80018c8:	f001 fdeb 	bl	80034a2 <HAL_GPIO_WritePin>

		regState = REG_OK;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <sendData+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e002      	b.n	80018da <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <sendData+0x64>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <sendData+0x64>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200006b8 	.word	0x200006b8
 80018e8:	200006bd 	.word	0x200006bd
 80018ec:	2000056c 	.word	0x2000056c
 80018f0:	48000400 	.word	0x48000400
 80018f4:	200006bc 	.word	0x200006bc

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x44>)
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_MspInit+0x44>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	619a      	str	r2, [r3, #24]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x44>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2201      	movs	r2, #1
 8001910:	4013      	ands	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_MspInit+0x44>)
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_MspInit+0x44>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	61da      	str	r2, [r3, #28]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_MspInit+0x44>)
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	4013      	ands	r3, r2
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b08d      	sub	sp, #52	; 0x34
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	241c      	movs	r4, #28
 800194a:	193b      	adds	r3, r7, r4
 800194c:	0018      	movs	r0, r3
 800194e:	2314      	movs	r3, #20
 8001950:	001a      	movs	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	f00a ff1e 	bl	800c794 <memset>
  if(hadc->Instance==ADC1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_ADC_MspInit+0x148>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_MspInit+0x24>
 8001962:	e08d      	b.n	8001a80 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001964:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	0089      	lsls	r1, r1, #2
 800196e:	430a      	orrs	r2, r1
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0309      	lsls	r1, r1, #12
 800198a:	430a      	orrs	r2, r1
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	031b      	lsls	r3, r3, #12
 8001996:	4013      	ands	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0289      	lsls	r1, r1, #10
 80019a6:	430a      	orrs	r2, r1
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	02c9      	lsls	r1, r1, #11
 80019c2:	430a      	orrs	r2, r1
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	02db      	lsls	r3, r3, #11
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2203      	movs	r2, #3
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_ADC_MspInit+0x150>)
 80019ea:	0019      	movs	r1, r3
 80019ec:	0010      	movs	r0, r2
 80019ee:	f001 fbc3 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2203      	movs	r2, #3
 80019fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	193a      	adds	r2, r7, r4
 8001a06:	2390      	movs	r3, #144	; 0x90
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 fbb3 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2203      	movs	r2, #3
 8001a16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_ADC_MspInit+0x154>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f001 fba4 	bl	8003178 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_ADC_MspInit+0x15c>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0052      	lsls	r2, r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	00d2      	lsls	r2, r2, #3
 8001a56:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 f970 	bl	8002d4c <HAL_DMA_Init>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001a70:	f7ff fd90 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b00d      	add	sp, #52	; 0x34
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	40012400 	.word	0x40012400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000400 	.word	0x48000400
 8001a98:	20000634 	.word	0x20000634
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	2414      	movs	r4, #20
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	2314      	movs	r3, #20
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f00a fe6e 	bl	800c794 <memset>
  if(hspi->Instance==SPI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_SPI_MspInit+0x90>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d131      	bne.n	8001b26 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0149      	lsls	r1, r1, #5
 8001acc:	430a      	orrs	r2, r1
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	02c9      	lsls	r1, r1, #11
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	02db      	lsls	r3, r3, #11
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001afa:	0021      	movs	r1, r4
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2238      	movs	r2, #56	; 0x38
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2202      	movs	r2, #2
 8001b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2203      	movs	r2, #3
 8001b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_SPI_MspInit+0x98>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f001 fb29 	bl	8003178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b00b      	add	sp, #44	; 0x2c
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_Base_MspInit+0x48>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d115      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0049      	lsls	r1, r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2013      	movs	r0, #19
 8001b70:	f001 f8ba 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b74:	2013      	movs	r0, #19
 8001b76:	f001 f8cc 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40002000 	.word	0x40002000
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	; 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2414      	movs	r4, #20
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f00a fdf8 	bl	800c794 <memset>
  if(huart->Instance==USART3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_UART_MspInit+0xa0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d13a      	bne.n	8001c24 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	02c9      	lsls	r1, r1, #11
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	61da      	str	r2, [r3, #28]
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0309      	lsls	r1, r1, #12
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	031b      	lsls	r3, r3, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	22c0      	movs	r2, #192	; 0xc0
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	0021      	movs	r1, r4
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2201      	movs	r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_UART_MspInit+0xa8>)
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0010      	movs	r0, r2
 8001c10:	f001 fab2 	bl	8003178 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f001 f865 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c1e:	201d      	movs	r0, #29
 8001c20:	f001 f877 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b00b      	add	sp, #44	; 0x2c
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	40004800 	.word	0x40004800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000800 	.word	0x48000800

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 fb70 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 fc50 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 fc4b 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <DMA1_Channel1_IRQHandler+0x14>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f001 f989 	bl	8002fa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000634 	.word	0x20000634

08001c9c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <TIM14_IRQHandler+0x14>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f004 ff16 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200005d0 	.word	0x200005d0

08001cb4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <USART3_4_IRQHandler+0x14>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f005 fb78 	bl	80073b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	200004e4 	.word	0x200004e4

08001ccc <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <USB_IRQHandler+0x14>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 fd70 	bl	80037b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20001368 	.word	0x20001368

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	18d3      	adds	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f00a fd00 	bl	800c718 <__errno>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	425b      	negs	r3, r3
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	18d2      	adds	r2, r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20004000 	.word	0x20004000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000258 	.word	0x20000258
 8001d4c:	20001670 	.word	0x20001670

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	return testPhase;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <currentPhase+0x10>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	2000025c 	.word	0x2000025c

08001d70 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b092      	sub	sp, #72	; 0x48
 8001d74:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001d76:	4be2      	ldr	r3, [pc, #904]	; (8002100 <testHandler+0x390>)
 8001d78:	7e1a      	ldrb	r2, [r3, #24]
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001d80:	4bdf      	ldr	r3, [pc, #892]	; (8002100 <testHandler+0x390>)
 8001d82:	7b1b      	ldrb	r3, [r3, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02f      	beq.n	8001dee <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8001d8e:	4bdd      	ldr	r3, [pc, #884]	; (8002104 <testHandler+0x394>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <testHandler+0x74>
		{
			if(flags.conErr)
 8001d96:	4bda      	ldr	r3, [pc, #872]	; (8002100 <testHandler+0x390>)
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8001da4:	211c      	movs	r1, #28
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	4ad7      	ldr	r2, [pc, #860]	; (8002108 <testHandler+0x398>)
 8001daa:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001dac:	c331      	stmia	r3!, {r0, r4, r5}
 8001dae:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001db0:	c331      	stmia	r3!, {r0, r4, r5}
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001db6:	4bd5      	ldr	r3, [pc, #852]	; (800210c <testHandler+0x39c>)
 8001db8:	681c      	ldr	r4, [r3, #0]
 8001dba:	000d      	movs	r5, r1
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7fe f9a2 	bl	8000108 <strlen>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	197b      	adds	r3, r7, r5
 8001dca:	0019      	movs	r1, r3
 8001dcc:	0020      	movs	r0, r4
 8001dce:	f7ff fc52 	bl	8001676 <pushStr>
				flags.instructions.startRequest = 0;
 8001dd2:	4bcb      	ldr	r3, [pc, #812]	; (8002100 <testHandler+0x390>)
 8001dd4:	7b1a      	ldrb	r2, [r3, #12]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	731a      	strb	r2, [r3, #12]
 8001ddc:	e007      	b.n	8001dee <testHandler+0x7e>
			}
			else
			{
				startTest();
 8001dde:	f000 f9a9 	bl	8002134 <startTest>
 8001de2:	e004      	b.n	8001dee <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001de4:	4bc6      	ldr	r3, [pc, #792]	; (8002100 <testHandler+0x390>)
 8001de6:	7e1a      	ldrb	r2, [r3, #24]
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001dee:	4bc4      	ldr	r3, [pc, #784]	; (8002100 <testHandler+0x390>)
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <testHandler+0x90>
	{
		stopTest();
 8001dfc:	f000 f9f8 	bl	80021f0 <stopTest>
	}

	switch(testPhase)
 8001e00:	4bc0      	ldr	r3, [pc, #768]	; (8002104 <testHandler+0x394>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d900      	bls.n	8001e0a <testHandler+0x9a>
 8001e08:	e18f      	b.n	800212a <testHandler+0x3ba>
 8001e0a:	009a      	lsls	r2, r3, #2
 8001e0c:	4bc0      	ldr	r3, [pc, #768]	; (8002110 <testHandler+0x3a0>)
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001e14:	4bba      	ldr	r3, [pc, #744]	; (8002100 <testHandler+0x390>)
 8001e16:	7e1a      	ldrb	r2, [r3, #24]
 8001e18:	2102      	movs	r1, #2
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001e1e:	4bb8      	ldr	r3, [pc, #736]	; (8002100 <testHandler+0x390>)
 8001e20:	7d1a      	ldrb	r2, [r3, #20]
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	751a      	strb	r2, [r3, #20]
		break;
 8001e28:	e17f      	b.n	800212a <testHandler+0x3ba>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001e2a:	4bb5      	ldr	r3, [pc, #724]	; (8002100 <testHandler+0x390>)
 8001e2c:	7d1b      	ldrb	r3, [r3, #20]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <testHandler+0xd6>
		{
			testPhase++;
 8001e38:	4bb2      	ldr	r3, [pc, #712]	; (8002104 <testHandler+0x394>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4bb0      	ldr	r3, [pc, #704]	; (8002104 <testHandler+0x394>)
 8001e42:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8001e44:	e156      	b.n	80020f4 <testHandler+0x384>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8001e46:	4bb3      	ldr	r3, [pc, #716]	; (8002114 <testHandler+0x3a4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d000      	beq.n	8001e50 <testHandler+0xe0>
 8001e4e:	e151      	b.n	80020f4 <testHandler+0x384>
			flags.meas.measRequest = 1;
 8001e50:	4bab      	ldr	r3, [pc, #684]	; (8002100 <testHandler+0x390>)
 8001e52:	7d1a      	ldrb	r2, [r3, #20]
 8001e54:	2101      	movs	r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	751a      	strb	r2, [r3, #20]
		break;
 8001e5a:	e14b      	b.n	80020f4 <testHandler+0x384>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001e5c:	4bae      	ldr	r3, [pc, #696]	; (8002118 <testHandler+0x3a8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0018      	movs	r0, r3
 8001e64:	f001 fb1d 	bl	80034a2 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001e68:	4bab      	ldr	r3, [pc, #684]	; (8002118 <testHandler+0x3a8>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f001 fb17 	bl	80034a2 <HAL_GPIO_WritePin>

		testPhase++;
 8001e74:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <testHandler+0x394>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4ba1      	ldr	r3, [pc, #644]	; (8002104 <testHandler+0x394>)
 8001e7e:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001e80:	4b9f      	ldr	r3, [pc, #636]	; (8002100 <testHandler+0x390>)
 8001e82:	7e1a      	ldrb	r2, [r3, #24]
 8001e84:	2102      	movs	r1, #2
 8001e86:	430a      	orrs	r2, r1
 8001e88:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8001e8a:	4ba4      	ldr	r3, [pc, #656]	; (800211c <testHandler+0x3ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4ba2      	ldr	r3, [pc, #648]	; (800211c <testHandler+0x3ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2120      	movs	r1, #32
 8001e96:	430a      	orrs	r2, r1
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
		sendData();
 8001e9c:	f7ff fcf8 	bl	8001890 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea4:	e007      	b.n	8001eb6 <testHandler+0x146>
		{
			sysTime[i] = 0;
 8001ea6:	4b9b      	ldr	r3, [pc, #620]	; (8002114 <testHandler+0x3a4>)
 8001ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	2100      	movs	r1, #0
 8001eae:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	ddf4      	ble.n	8001ea6 <testHandler+0x136>
		}
		break;
 8001ebc:	e135      	b.n	800212a <testHandler+0x3ba>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001ebe:	4b90      	ldr	r3, [pc, #576]	; (8002100 <testHandler+0x390>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d026      	beq.n	8001f1a <testHandler+0x1aa>
		{
			char time[9] = {0};
 8001ecc:	2510      	movs	r5, #16
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	2100      	movs	r1, #0
 8001eda:	0018      	movs	r0, r3
 8001edc:	f00a fc5a 	bl	800c794 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001ee0:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <testHandler+0x3a4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	223c      	movs	r2, #60	; 0x3c
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <testHandler+0x3a4>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	213c      	movs	r1, #60	; 0x3c
 8001eee:	1acc      	subs	r4, r1, r3
 8001ef0:	4b88      	ldr	r3, [pc, #544]	; (8002114 <testHandler+0x3a4>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	1acb      	subs	r3, r1, r3
 8001ef8:	4989      	ldr	r1, [pc, #548]	; (8002120 <testHandler+0x3b0>)
 8001efa:	1978      	adds	r0, r7, r5
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	0023      	movs	r3, r4
 8001f00:	f00a fd0a 	bl	800c918 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001f04:	4b85      	ldr	r3, [pc, #532]	; (800211c <testHandler+0x3ac>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b84      	ldr	r3, [pc, #528]	; (800211c <testHandler+0x3ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2110      	movs	r1, #16
 8001f10:	404a      	eors	r2, r1
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
			sendData();
 8001f16:	f7ff fcbb 	bl	8001890 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
 8001f1a:	4b7e      	ldr	r3, [pc, #504]	; (8002114 <testHandler+0x3a4>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	210a      	movs	r1, #10
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7fe fa73 	bl	800040c <__aeabi_idivmod>
 8001f26:	1e0b      	subs	r3, r1, #0
 8001f28:	d10f      	bne.n	8001f4a <testHandler+0x1da>
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <testHandler+0x3a4>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <testHandler+0x1da>
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <testHandler+0x390>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <testHandler+0x1da>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <testHandler+0x390>)
 8001f42:	7d1a      	ldrb	r2, [r3, #20]
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 30)	//___Po jedné hodině je měření u konce___//
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <testHandler+0x3a4>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b1d      	cmp	r3, #29
 8001f50:	dc00      	bgt.n	8001f54 <testHandler+0x1e4>
 8001f52:	e0d1      	b.n	80020f8 <testHandler+0x388>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <testHandler+0x394>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b69      	ldr	r3, [pc, #420]	; (8002104 <testHandler+0x394>)
 8001f5e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f60:	e0ca      	b.n	80020f8 <testHandler+0x388>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <testHandler+0x390>)
 8001f64:	7d1b      	ldrb	r3, [r3, #20]
 8001f66:	2208      	movs	r2, #8
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d000      	beq.n	8001f72 <testHandler+0x202>
 8001f70:	e0c4      	b.n	80020fc <testHandler+0x38c>
		{
			flags.ui.notice = 1;
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <testHandler+0x390>)
 8001f74:	7c1a      	ldrb	r2, [r3, #16]
 8001f76:	2108      	movs	r1, #8
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <testHandler+0x390>)
 8001f7e:	7e1a      	ldrb	r2, [r3, #24]
 8001f80:	2102      	movs	r1, #2
 8001f82:	430a      	orrs	r2, r1
 8001f84:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <testHandler+0x394>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <testHandler+0x394>)
 8001f90:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <testHandler+0x3a8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f001 fa82 	bl	80034a2 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <testHandler+0x3a8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2140      	movs	r1, #64	; 0x40
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f001 fa7c 	bl	80034a2 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001faa:	4b5c      	ldr	r3, [pc, #368]	; (800211c <testHandler+0x3ac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	; (800211c <testHandler+0x3ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <testHandler+0x3ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b56      	ldr	r3, [pc, #344]	; (800211c <testHandler+0x3ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
			sendData();
 8001fce:	f7ff fc5f 	bl	8001890 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fd6:	e007      	b.n	8001fe8 <testHandler+0x278>
			{
				sysTime[i] = 0;
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <testHandler+0x3a4>)
 8001fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	2100      	movs	r1, #0
 8001fe0:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	ddf4      	ble.n	8001fd8 <testHandler+0x268>
			}
		}
		break;
 8001fee:	e085      	b.n	80020fc <testHandler+0x38c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <testHandler+0x390>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <testHandler+0x2da>
		{
			char time[9] = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	2205      	movs	r2, #5
 8002008:	2100      	movs	r1, #0
 800200a:	0018      	movs	r0, r3
 800200c:	f00a fbc2 	bl	800c794 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <testHandler+0x3a4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	223c      	movs	r2, #60	; 0x3c
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <testHandler+0x3a4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	213c      	movs	r1, #60	; 0x3c
 800201e:	1acc      	subs	r4, r1, r3
 8002020:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <testHandler+0x3a4>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2103      	movs	r1, #3
 8002026:	1acb      	subs	r3, r1, r3
 8002028:	493d      	ldr	r1, [pc, #244]	; (8002120 <testHandler+0x3b0>)
 800202a:	1d38      	adds	r0, r7, #4
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	0023      	movs	r3, r4
 8002030:	f00a fc72 	bl	800c918 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <testHandler+0x3ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <testHandler+0x3ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2108      	movs	r1, #8
 8002040:	404a      	eors	r2, r1
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
			sendData();
 8002046:	f7ff fc23 	bl	8001890 <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <testHandler+0x3a4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2105      	movs	r1, #5
 8002050:	0018      	movs	r0, r3
 8002052:	f7fe f9db 	bl	800040c <__aeabi_idivmod>
 8002056:	1e0b      	subs	r3, r1, #0
 8002058:	d10f      	bne.n	800207a <testHandler+0x30a>
 800205a:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <testHandler+0x3a4>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <testHandler+0x30a>
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <testHandler+0x390>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <testHandler+0x30a>
		{
			flags.meas.measRequest = 1;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <testHandler+0x390>)
 8002072:	7d1a      	ldrb	r2, [r3, #20]
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po třech hodinách je měření u konce___//
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <testHandler+0x3a4>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b0e      	cmp	r3, #14
 8002080:	dd50      	ble.n	8002124 <testHandler+0x3b4>
		{
			testPhase++;
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <testHandler+0x394>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <testHandler+0x394>)
 800208c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800208e:	e049      	b.n	8002124 <testHandler+0x3b4>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <testHandler+0x390>)
 8002092:	7d1b      	ldrb	r3, [r3, #20]
 8002094:	2208      	movs	r2, #8
 8002096:	4013      	ands	r3, r2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d144      	bne.n	8002128 <testHandler+0x3b8>
		{
			flags.ui.done = 1;
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <testHandler+0x390>)
 80020a0:	7c1a      	ldrb	r2, [r3, #16]
 80020a2:	2110      	movs	r1, #16
 80020a4:	430a      	orrs	r2, r1
 80020a6:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <testHandler+0x390>)
 80020aa:	7e1a      	ldrb	r2, [r3, #24]
 80020ac:	2102      	movs	r1, #2
 80020ae:	430a      	orrs	r2, r1
 80020b0:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <testHandler+0x3ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <testHandler+0x3ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2108      	movs	r1, #8
 80020be:	430a      	orrs	r2, r1
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <testHandler+0x3ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <testHandler+0x3ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2102      	movs	r1, #2
 80020d0:	438a      	bics	r2, r1
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <testHandler+0x3ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <testHandler+0x3ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	438a      	bics	r2, r1
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
			sendData();
 80020e8:	f7ff fbd2 	bl	8001890 <sendData>

			testPhase = WAITING;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <testHandler+0x394>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020f2:	e019      	b.n	8002128 <testHandler+0x3b8>
		break;
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	e018      	b.n	800212a <testHandler+0x3ba>
		break;
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	e016      	b.n	800212a <testHandler+0x3ba>
		break;
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	e014      	b.n	800212a <testHandler+0x3ba>
 8002100:	20000618 	.word	0x20000618
 8002104:	2000025c 	.word	0x2000025c
 8002108:	0800d040 	.word	0x0800d040
 800210c:	20000568 	.word	0x20000568
 8002110:	0800d138 	.word	0x0800d138
 8002114:	2000023c 	.word	0x2000023c
 8002118:	48000800 	.word	0x48000800
 800211c:	200006c8 	.word	0x200006c8
 8002120:	0800d034 	.word	0x0800d034
		break;
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	e000      	b.n	800212a <testHandler+0x3ba>
		break;
 8002128:	46c0      	nop			; (mov r8, r8)

	}
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b010      	add	sp, #64	; 0x40
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)

08002134 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <startTest+0xa4>)
 800213c:	7c1a      	ldrb	r2, [r3, #16]
 800213e:	2101      	movs	r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <startTest+0xa8>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
	flags.testProgress = 1;
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <startTest+0xa4>)
 800214c:	7e1a      	ldrb	r2, [r3, #24]
 800214e:	2102      	movs	r1, #2
 8002150:	430a      	orrs	r2, r1
 8002152:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <startTest+0xac>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <startTest+0xb0>)
 800215a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	e008      	b.n	8002174 <startTest+0x40>
	{
		regValues[i] = 0;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <startTest+0xac>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <startTest+0xb4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	001a      	movs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4293      	cmp	r3, r2
 800217e:	dbf0      	blt.n	8002162 <startTest+0x2e>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <startTest+0xb0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <startTest+0xb0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2120      	movs	r1, #32
 800218c:	430a      	orrs	r2, r1
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <startTest+0xb0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <startTest+0xb0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2102      	movs	r1, #2
 800219e:	430a      	orrs	r2, r1
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 80021a4:	f7ff fb74 	bl	8001890 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 80021a8:	2301      	movs	r3, #1
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	e007      	b.n	80021be <startTest+0x8a>
	{
		sysTime[i] = 0;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <startTest+0xb8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	2100      	movs	r1, #0
 80021b6:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	ddf4      	ble.n	80021ae <startTest+0x7a>
	}

	flags.instructions.startRequest = 0;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <startTest+0xa4>)
 80021c6:	7b1a      	ldrb	r2, [r3, #12]
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	731a      	strb	r2, [r3, #12]
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	20000618 	.word	0x20000618
 80021dc:	2000025c 	.word	0x2000025c
 80021e0:	200006b8 	.word	0x200006b8
 80021e4:	200006c8 	.word	0x200006c8
 80021e8:	200006bd 	.word	0x200006bd
 80021ec:	2000023c 	.word	0x2000023c

080021f0 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <stopTest+0x5c>)
 80021f6:	7c1a      	ldrb	r2, [r3, #16]
 80021f8:	2102      	movs	r1, #2
 80021fa:	430a      	orrs	r2, r1
 80021fc:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <stopTest+0x60>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <stopTest+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0018      	movs	r0, r3
 800220c:	f001 f949 	bl	80034a2 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <stopTest+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	0018      	movs	r0, r3
 8002218:	f001 f943 	bl	80034a2 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <stopTest+0x68>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <stopTest+0x68>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <stopTest+0x68>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2104      	movs	r1, #4
 8002230:	430a      	orrs	r2, r1
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
	sendData();
 8002236:	f7ff fb2b 	bl	8001890 <sendData>

	flags.instructions.stopRequest = 0;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <stopTest+0x5c>)
 800223c:	7b1a      	ldrb	r2, [r3, #12]
 800223e:	2102      	movs	r1, #2
 8002240:	438a      	bics	r2, r1
 8002242:	731a      	strb	r2, [r3, #12]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	20000618 	.word	0x20000618
 8002250:	2000025c 	.word	0x2000025c
 8002254:	48000800 	.word	0x48000800
 8002258:	200006c8 	.word	0x200006c8

0800225c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002278:	4c0b      	ldr	r4, [pc, #44]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002286:	f7ff fd63 	bl	8001d50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800228a:	f00a fa4b 	bl	800c724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7fe f90b 	bl	80004a8 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80022a0:	0800d280 	.word	0x0800d280
  ldr r2, =_sbss
 80022a4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022a8:	2000166c 	.word	0x2000166c

080022ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_COMP_IRQHandler>
	...

080022b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_Init+0x24>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_Init+0x24>)
 80022ba:	2110      	movs	r1, #16
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 f809 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c6:	f7ff fb17 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_InitTick+0x5c>)
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_InitTick+0x60>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	0019      	movs	r1, r3
 80022ea:	23fa      	movs	r3, #250	; 0xfa
 80022ec:	0098      	lsls	r0, r3, #2
 80022ee:	f7fd ff1d 	bl	800012c <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	0019      	movs	r1, r3
 80022f6:	0020      	movs	r0, r4
 80022f8:	f7fd ff18 	bl	800012c <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 fd17 	bl	8002d32 <HAL_SYSTICK_Config>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d001      	beq.n	800230c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00f      	b.n	800232c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d80b      	bhi.n	800232a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	2301      	movs	r3, #1
 8002316:	425b      	negs	r3, r3
 8002318:	2200      	movs	r2, #0
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fce4 	bl	8002ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_InitTick+0x64>)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b003      	add	sp, #12
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	20000000 	.word	0x20000000
 8002338:	20000008 	.word	0x20000008
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x1c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	001a      	movs	r2, r3
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_IncTick+0x20>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	18d2      	adds	r2, r2, r3
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_IncTick+0x20>)
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000008 	.word	0x20000008
 8002360:	200006cc 	.word	0x200006cc

08002364 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <HAL_GetTick+0x10>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	200006cc 	.word	0x200006cc

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fff0 	bl	8002364 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	001a      	movs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	189b      	adds	r3, r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	f7ff ffe0 	bl	8002364 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	20000008 	.word	0x20000008

080023c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c8:	230f      	movs	r3, #15
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e125      	b.n	800262a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2234      	movs	r2, #52	; 0x34
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff faa2 	bl	8001940 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	2210      	movs	r2, #16
 8002402:	4013      	ands	r3, r2
 8002404:	d000      	beq.n	8002408 <HAL_ADC_Init+0x48>
 8002406:	e103      	b.n	8002610 <HAL_ADC_Init+0x250>
 8002408:	230f      	movs	r3, #15
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d000      	beq.n	8002414 <HAL_ADC_Init+0x54>
 8002412:	e0fd      	b.n	8002610 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800241e:	d000      	beq.n	8002422 <HAL_ADC_Init+0x62>
 8002420:	e0f6      	b.n	8002610 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a83      	ldr	r2, [pc, #524]	; (8002634 <HAL_ADC_Init+0x274>)
 8002428:	4013      	ands	r3, r2
 800242a:	2202      	movs	r2, #2
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	2b01      	cmp	r3, #1
 800243e:	d112      	bne.n	8002466 <HAL_ADC_Init+0xa6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	2b01      	cmp	r3, #1
 800244c:	d009      	beq.n	8002462 <HAL_ADC_Init+0xa2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	401a      	ands	r2, r3
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	429a      	cmp	r2, r3
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Init+0xa6>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_ADC_Init+0xa8>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2218      	movs	r2, #24
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	0899      	lsrs	r1, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4964      	ldr	r1, [pc, #400]	; (8002638 <HAL_ADC_Init+0x278>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7e1b      	ldrb	r3, [r3, #24]
 80024ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e5b      	ldrb	r3, [r3, #25]
 80024b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e9b      	ldrb	r3, [r3, #26]
 80024bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80024be:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <HAL_ADC_Init+0x10e>
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	e000      	b.n	80024d0 <HAL_ADC_Init+0x110>
 80024ce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024d6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_Init+0x124>
 80024e0:	2304      	movs	r3, #4
 80024e2:	e000      	b.n	80024e6 <HAL_ADC_Init+0x126>
 80024e4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80024e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2124      	movs	r1, #36	; 0x24
 80024ec:	5c5b      	ldrb	r3, [r3, r1]
 80024ee:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7edb      	ldrb	r3, [r3, #27]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d115      	bne.n	800252c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e9b      	ldrb	r3, [r3, #26]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0252      	lsls	r2, r2, #9
 800250e:	4313      	orrs	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	e00b      	b.n	800252c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	2220      	movs	r2, #32
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	2201      	movs	r2, #1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	23c2      	movs	r3, #194	; 0xc2
 8002532:	33ff      	adds	r3, #255	; 0xff
 8002534:	429a      	cmp	r2, r3
 8002536:	d007      	beq.n	8002548 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002540:	4313      	orrs	r3, r2
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	055b      	lsls	r3, r3, #21
 8002560:	429a      	cmp	r2, r3
 8002562:	d01b      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d017      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	2b02      	cmp	r3, #2
 8002572:	d013      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	2b03      	cmp	r3, #3
 800257a:	d00f      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00b      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2b05      	cmp	r3, #5
 800258a:	d007      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b06      	cmp	r3, #6
 8002592:	d003      	beq.n	800259c <HAL_ADC_Init+0x1dc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b07      	cmp	r3, #7
 800259a:	d112      	bne.n	80025c2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2107      	movs	r1, #7
 80025a8:	438a      	bics	r2, r1
 80025aa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6959      	ldr	r1, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2207      	movs	r2, #7
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_ADC_Init+0x27c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	2203      	movs	r2, #3
 80025de:	4393      	bics	r3, r2
 80025e0:	2201      	movs	r2, #1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025e8:	e01c      	b.n	8002624 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	2212      	movs	r2, #18
 80025f0:	4393      	bics	r3, r2
 80025f2:	2210      	movs	r2, #16
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2201      	movs	r2, #1
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002606:	230f      	movs	r3, #15
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800260e:	e009      	b.n	8002624 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	2210      	movs	r2, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800261c:	230f      	movs	r3, #15
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	fffffefd 	.word	0xfffffefd
 8002638:	fffe0219 	.word	0xfffe0219
 800263c:	833fffe7 	.word	0x833fffe7

08002640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2317      	movs	r3, #23
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2204      	movs	r2, #4
 800265c:	4013      	ands	r3, r2
 800265e:	d15e      	bne.n	800271e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2234      	movs	r2, #52	; 0x34
 8002664:	5c9b      	ldrb	r3, [r3, r2]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Start_DMA+0x2e>
 800266a:	2302      	movs	r3, #2
 800266c:	e05e      	b.n	800272c <HAL_ADC_Start_DMA+0xec>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2234      	movs	r2, #52	; 0x34
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	7e5b      	ldrb	r3, [r3, #25]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d007      	beq.n	800268e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800267e:	2317      	movs	r3, #23
 8002680:	18fc      	adds	r4, r7, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f97b 	bl	8002980 <ADC_Enable>
 800268a:	0003      	movs	r3, r0
 800268c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800268e:	2317      	movs	r3, #23
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d146      	bne.n	8002726 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_ADC_Start_DMA+0xf4>)
 800269e:	4013      	ands	r3, r2
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	0052      	lsls	r2, r2, #1
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2234      	movs	r2, #52	; 0x34
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_ADC_Start_DMA+0xf8>)
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_ADC_Start_DMA+0xfc>)
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_ADC_Start_DMA+0x100>)
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	221c      	movs	r2, #28
 80026d6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2110      	movs	r1, #16
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3340      	adds	r3, #64	; 0x40
 8002702:	0019      	movs	r1, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f000 fb68 	bl	8002ddc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2104      	movs	r1, #4
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e003      	b.n	8002726 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002726:	2317      	movs	r3, #23
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b007      	add	sp, #28
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	fffff0fe 	.word	0xfffff0fe
 8002738:	08002a89 	.word	0x08002a89
 800273c:	08002b3d 	.word	0x08002b3d
 8002740:	08002b5b 	.word	0x08002b5b

08002744 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276e:	230f      	movs	r3, #15
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	429a      	cmp	r2, r3
 8002784:	d011      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x46>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d00d      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x46>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2b02      	cmp	r3, #2
 8002794:	d009      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x46>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2b03      	cmp	r3, #3
 800279c:	d005      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x46>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d001      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x46>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2234      	movs	r2, #52	; 0x34
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x54>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0d0      	b.n	800295a <HAL_ADC_ConfigChannel+0x1f6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2234      	movs	r2, #52	; 0x34
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d000      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x6a>
 80027cc:	e0b4      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a64      	ldr	r2, [pc, #400]	; (8002964 <HAL_ADC_ConfigChannel+0x200>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d100      	bne.n	80027da <HAL_ADC_ConfigChannel+0x76>
 80027d8:	e082      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d037      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d033      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b02      	cmp	r3, #2
 800280a:	d02f      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2b03      	cmp	r3, #3
 8002812:	d02b      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b04      	cmp	r3, #4
 800281a:	d027      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	2b05      	cmp	r3, #5
 8002822:	d023      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	2b06      	cmp	r3, #6
 800282a:	d01f      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	2b07      	cmp	r3, #7
 8002832:	d01b      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2107      	movs	r1, #7
 8002840:	400b      	ands	r3, r1
 8002842:	429a      	cmp	r2, r3
 8002844:	d012      	beq.n	800286c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2107      	movs	r1, #7
 8002852:	438a      	bics	r2, r1
 8002854:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6959      	ldr	r1, [r3, #20]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2207      	movs	r2, #7
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b10      	cmp	r3, #16
 8002872:	d007      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x120>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b11      	cmp	r3, #17
 800287a:	d003      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x120>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d163      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_ADC_ConfigChannel+0x204>)
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b10      	cmp	r3, #16
 800288e:	d009      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x140>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b11      	cmp	r3, #17
 8002896:	d102      	bne.n	800289e <HAL_ADC_ConfigChannel+0x13a>
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	03db      	lsls	r3, r3, #15
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x144>
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	045b      	lsls	r3, r3, #17
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x144>
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_ADC_ConfigChannel+0x204>)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d14a      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_ADC_ConfigChannel+0x208>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	492d      	ldr	r1, [pc, #180]	; (8002970 <HAL_ADC_ConfigChannel+0x20c>)
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fd fc35 	bl	800012c <__udivsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	001a      	movs	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x16e>
 80028de:	e035      	b.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2101      	movs	r1, #1
 80028ec:	4099      	lsls	r1, r3
 80028ee:	000b      	movs	r3, r1
 80028f0:	43d9      	mvns	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d007      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x1ae>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b11      	cmp	r3, #17
 8002908:	d003      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x1ae>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b12      	cmp	r3, #18
 8002910:	d11c      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_ADC_ConfigChannel+0x204>)
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b10      	cmp	r3, #16
 800291c:	d007      	beq.n	800292e <HAL_ADC_ConfigChannel+0x1ca>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b11      	cmp	r3, #17
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x1c6>
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_ADC_ConfigChannel+0x210>)
 8002928:	e002      	b.n	8002930 <HAL_ADC_ConfigChannel+0x1cc>
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_ADC_ConfigChannel+0x214>)
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x1cc>
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_ADC_ConfigChannel+0x218>)
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_ADC_ConfigChannel+0x204>)
 8002932:	400b      	ands	r3, r1
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e009      	b.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	2220      	movs	r2, #32
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2234      	movs	r2, #52	; 0x34
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002954:	230f      	movs	r3, #15
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	00001001 	.word	0x00001001
 8002968:	40012708 	.word	0x40012708
 800296c:	20000000 	.word	0x20000000
 8002970:	000f4240 	.word	0x000f4240
 8002974:	ffbfffff 	.word	0xffbfffff
 8002978:	feffffff 	.word	0xfeffffff
 800297c:	ff7fffff 	.word	0xff7fffff

08002980 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2203      	movs	r2, #3
 8002998:	4013      	ands	r3, r2
 800299a:	2b01      	cmp	r3, #1
 800299c:	d112      	bne.n	80029c4 <ADC_Enable+0x44>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d009      	beq.n	80029c0 <ADC_Enable+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	401a      	ands	r2, r3
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	429a      	cmp	r2, r3
 80029be:	d101      	bne.n	80029c4 <ADC_Enable+0x44>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <ADC_Enable+0x46>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d152      	bne.n	8002a70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <ADC_Enable+0xfc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	2210      	movs	r2, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2201      	movs	r2, #1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03f      	b.n	8002a72 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <ADC_Enable+0x100>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	491f      	ldr	r1, [pc, #124]	; (8002a84 <ADC_Enable+0x104>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fd fb8f 	bl	800012c <__udivsi3>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a12:	e002      	b.n	8002a1a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a20:	f7ff fca0 	bl	8002364 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a28:	e01b      	b.n	8002a62 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2a:	f7ff fc9b 	bl	8002364 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d914      	bls.n	8002a62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d00d      	beq.n	8002a62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	2201      	movs	r2, #1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d1dc      	bne.n	8002a2a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	80000017 	.word	0x80000017
 8002a80:	20000000 	.word	0x20000000
 8002a84:	000f4240 	.word	0x000f4240

08002a88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	2250      	movs	r2, #80	; 0x50
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d140      	bne.n	8002b22 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	23c0      	movs	r3, #192	; 0xc0
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d12d      	bne.n	8002b18 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d129      	bne.n	8002b18 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2208      	movs	r2, #8
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d122      	bne.n	8002b18 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4013      	ands	r3, r2
 8002adc:	d110      	bne.n	8002b00 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	210c      	movs	r1, #12
 8002aea:	438a      	bics	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <ADC_DMAConvCplt+0xb0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	2201      	movs	r2, #1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
 8002afe:	e00b      	b.n	8002b18 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	2220      	movs	r2, #32
 8002b06:	431a      	orrs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	2201      	movs	r2, #1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7fd fcb4 	bl	8000488 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002b20:	e005      	b.n	8002b2e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	4798      	blx	r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	fffffefe 	.word	0xfffffefe

08002b3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff fdf9 	bl	8002744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	2204      	movs	r2, #4
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7ff fde6 	bl	8002754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ba2:	d809      	bhi.n	8002bb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	231f      	movs	r3, #31
 8002bac:	401a      	ands	r2, r3
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_EnableIRQ+0x30>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4091      	lsls	r1, r2
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
  }
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	0002      	movs	r2, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd8:	d828      	bhi.n	8002c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <__NVIC_SetPriority+0xd4>)
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	33c0      	adds	r3, #192	; 0xc0
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	589b      	ldr	r3, [r3, r2]
 8002bea:	1dfa      	adds	r2, r7, #7
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	0011      	movs	r1, r2
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	00d2      	lsls	r2, r2, #3
 8002bf6:	21ff      	movs	r1, #255	; 0xff
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	401a      	ands	r2, r3
 8002c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	401a      	ands	r2, r3
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2303      	movs	r3, #3
 8002c12:	4003      	ands	r3, r0
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c18:	481f      	ldr	r0, [pc, #124]	; (8002c98 <__NVIC_SetPriority+0xd4>)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	430a      	orrs	r2, r1
 8002c24:	33c0      	adds	r3, #192	; 0xc0
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c2a:	e031      	b.n	8002c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0019      	movs	r1, r3
 8002c34:	230f      	movs	r3, #15
 8002c36:	400b      	ands	r3, r1
 8002c38:	3b08      	subs	r3, #8
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3306      	adds	r3, #6
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	400a      	ands	r2, r1
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	21ff      	movs	r1, #255	; 0xff
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	401a      	ands	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	4003      	ands	r3, r0
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001c      	movs	r4, r3
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4023      	ands	r3, r4
 8002c80:	3b08      	subs	r3, #8
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	430a      	orrs	r2, r1
 8002c86:	3306      	adds	r3, #6
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	18c3      	adds	r3, r0, r3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b003      	add	sp, #12
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	045b      	lsls	r3, r3, #17
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d301      	bcc.n	8002cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e010      	b.n	8002cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <SysTick_Config+0x44>)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff ff7c 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <SysTick_Config+0x44>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SysTick_Config+0x44>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	1c02      	adds	r2, r0, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	0002      	movs	r2, r0
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff ff33 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ffaf 	bl	8002ca0 <SysTick_Config>
 8002d42:	0003      	movs	r3, r0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e036      	b.n	8002dd0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	2102      	movs	r1, #2
 8002d68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <HAL_DMA_Init+0x8c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f9c4 	bl	8003140 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2221      	movs	r2, #33	; 0x21
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}  
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	ffffc00f 	.word	0xffffc00f

08002ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2317      	movs	r3, #23
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Start_IT+0x24>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e04f      	b.n	8002ea0 <HAL_DMA_Start_IT+0xc4>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	2101      	movs	r1, #1
 8002e06:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	5c9b      	ldrb	r3, [r3, r2]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d13a      	bne.n	8002e8a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2221      	movs	r2, #33	; 0x21
 8002e18:	2102      	movs	r1, #2
 8002e1a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	438a      	bics	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f954 	bl	80030e6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	210e      	movs	r1, #14
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e00f      	b.n	8002e78 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	210a      	movs	r1, #10
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2104      	movs	r1, #4
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e007      	b.n	8002e9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002e92:	2317      	movs	r3, #23
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002e9a:	2317      	movs	r3, #23
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
} 
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2221      	movs	r2, #33	; 0x21
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e020      	b.n	8002f10 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	210e      	movs	r1, #14
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	438a      	bics	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4091      	lsls	r1, r2
 8002efa:	000a      	movs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2221      	movs	r2, #33	; 0x21
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	210f      	movs	r1, #15
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2221      	movs	r2, #33	; 0x21
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d006      	beq.n	8002f42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e028      	b.n	8002f94 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	210e      	movs	r1, #14
 8002f4e:	438a      	bics	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	438a      	bics	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4091      	lsls	r1, r2
 8002f6e:	000a      	movs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2221      	movs	r2, #33	; 0x21
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	0010      	movs	r0, r2
 8002f92:	4798      	blx	r3
    } 
  }
  return status;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	781b      	ldrb	r3, [r3, #0]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	0013      	movs	r3, r2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d024      	beq.n	8003014 <HAL_DMA_IRQHandler+0x72>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d020      	beq.n	8003014 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d107      	bne.n	8002fee <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2104      	movs	r1, #4
 8002fea:	438a      	bics	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	4091      	lsls	r1, r2
 8002ffa:	000a      	movs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d100      	bne.n	8003008 <HAL_DMA_IRQHandler+0x66>
 8003006:	e06a      	b.n	80030de <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	0010      	movs	r0, r2
 8003010:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003012:	e064      	b.n	80030de <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2202      	movs	r2, #2
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	d02b      	beq.n	800307c <HAL_DMA_IRQHandler+0xda>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d027      	beq.n	800307c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2220      	movs	r2, #32
 8003034:	4013      	ands	r3, r2
 8003036:	d10b      	bne.n	8003050 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	210a      	movs	r1, #10
 8003044:	438a      	bics	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2102      	movs	r1, #2
 800305a:	4091      	lsls	r1, r2
 800305c:	000a      	movs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	d036      	beq.n	80030de <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	0010      	movs	r0, r2
 8003078:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800307a:	e030      	b.n	80030de <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2208      	movs	r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	0013      	movs	r3, r2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4013      	ands	r3, r2
 800308a:	d028      	beq.n	80030de <HAL_DMA_IRQHandler+0x13c>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2208      	movs	r2, #8
 8003090:	4013      	ands	r3, r2
 8003092:	d024      	beq.n	80030de <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	210e      	movs	r1, #14
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	2101      	movs	r1, #1
 80030ae:	4091      	lsls	r1, r2
 80030b0:	000a      	movs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	0010      	movs	r0, r2
 80030da:	4798      	blx	r3
    }
   }
}  
 80030dc:	e7ff      	b.n	80030de <HAL_DMA_IRQHandler+0x13c>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	2101      	movs	r1, #1
 80030fe:	4091      	lsls	r1, r2
 8003100:	000a      	movs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d108      	bne.n	8003126 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003124:	e007      	b.n	8003136 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	60da      	str	r2, [r3, #12]
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b004      	add	sp, #16
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a08      	ldr	r2, [pc, #32]	; (8003170 <DMA_CalcBaseAndBitshift+0x30>)
 800314e:	4694      	mov	ip, r2
 8003150:	4463      	add	r3, ip
 8003152:	2114      	movs	r1, #20
 8003154:	0018      	movs	r0, r3
 8003156:	f7fc ffe9 	bl	800012c <__udivsi3>
 800315a:	0003      	movs	r3, r0
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a03      	ldr	r2, [pc, #12]	; (8003174 <DMA_CalcBaseAndBitshift+0x34>)
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	bffdfff8 	.word	0xbffdfff8
 8003174:	40020000 	.word	0x40020000

08003178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003186:	e155      	b.n	8003434 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4091      	lsls	r1, r2
 8003192:	000a      	movs	r2, r1
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d100      	bne.n	80031a0 <HAL_GPIO_Init+0x28>
 800319e:	e146      	b.n	800342e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d005      	beq.n	80031b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d130      	bne.n	800321a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	409a      	lsls	r2, r3
 80031c6:	0013      	movs	r3, r2
 80031c8:	43da      	mvns	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	409a      	lsls	r2, r3
 80031da:	0013      	movs	r3, r2
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ee:	2201      	movs	r2, #1
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
 80031f4:	0013      	movs	r3, r2
 80031f6:	43da      	mvns	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	2201      	movs	r2, #1
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2203      	movs	r2, #3
 8003220:	4013      	ands	r3, r2
 8003222:	2b03      	cmp	r3, #3
 8003224:	d017      	beq.n	8003256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	43da      	mvns	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2203      	movs	r2, #3
 800325c:	4013      	ands	r3, r2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d123      	bne.n	80032aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	08da      	lsrs	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3208      	adds	r2, #8
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	58d3      	ldr	r3, [r2, r3]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2207      	movs	r2, #7
 8003274:	4013      	ands	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	43da      	mvns	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2107      	movs	r1, #7
 800328e:	400b      	ands	r3, r1
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	409a      	lsls	r2, r3
 8003294:	0013      	movs	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	6939      	ldr	r1, [r7, #16]
 80032a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	409a      	lsls	r2, r3
 80032b8:	0013      	movs	r3, r2
 80032ba:	43da      	mvns	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2203      	movs	r2, #3
 80032c8:	401a      	ands	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	0013      	movs	r3, r2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	d100      	bne.n	80032ec <HAL_GPIO_Init+0x174>
 80032ea:	e0a0      	b.n	800342e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ec:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_GPIO_Init+0x2d4>)
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4b56      	ldr	r3, [pc, #344]	; (800344c <HAL_GPIO_Init+0x2d4>)
 80032f2:	2101      	movs	r1, #1
 80032f4:	430a      	orrs	r2, r1
 80032f6:	619a      	str	r2, [r3, #24]
 80032f8:	4b54      	ldr	r3, [pc, #336]	; (800344c <HAL_GPIO_Init+0x2d4>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4013      	ands	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_GPIO_Init+0x2d8>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	589b      	ldr	r3, [r3, r2]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2203      	movs	r2, #3
 8003316:	4013      	ands	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	409a      	lsls	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	43da      	mvns	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	2390      	movs	r3, #144	; 0x90
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	429a      	cmp	r2, r3
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x1ee>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a47      	ldr	r2, [pc, #284]	; (8003454 <HAL_GPIO_Init+0x2dc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x1ea>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a46      	ldr	r2, [pc, #280]	; (8003458 <HAL_GPIO_Init+0x2e0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x1e6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a45      	ldr	r2, [pc, #276]	; (800345c <HAL_GPIO_Init+0x2e4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x1e2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HAL_GPIO_Init+0x2e8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x1de>
 8003352:	2304      	movs	r3, #4
 8003354:	e008      	b.n	8003368 <HAL_GPIO_Init+0x1f0>
 8003356:	2305      	movs	r3, #5
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x1f0>
 800335a:	2303      	movs	r3, #3
 800335c:	e004      	b.n	8003368 <HAL_GPIO_Init+0x1f0>
 800335e:	2302      	movs	r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_Init+0x1f0>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_GPIO_Init+0x1f0>
 8003366:	2300      	movs	r3, #0
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	2103      	movs	r1, #3
 800336c:	400a      	ands	r2, r1
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	4093      	lsls	r3, r2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003378:	4935      	ldr	r1, [pc, #212]	; (8003450 <HAL_GPIO_Init+0x2d8>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43da      	mvns	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	025b      	lsls	r3, r3, #9
 800339e:	4013      	ands	r3, r2
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43da      	mvns	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	4013      	ands	r3, r2
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	035b      	lsls	r3, r3, #13
 80033f2:	4013      	ands	r3, r2
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43da      	mvns	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	039b      	lsls	r3, r3, #14
 800341c:	4013      	ands	r3, r2
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_GPIO_Init+0x2ec>)
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	40da      	lsrs	r2, r3
 800343c:	1e13      	subs	r3, r2, #0
 800343e:	d000      	beq.n	8003442 <HAL_GPIO_Init+0x2ca>
 8003440:	e6a2      	b.n	8003188 <HAL_GPIO_Init+0x10>
  } 
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b006      	add	sp, #24
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	48000400 	.word	0x48000400
 8003458:	48000800 	.word	0x48000800
 800345c:	48000c00 	.word	0x48000c00
 8003460:	48001000 	.word	0x48001000
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	000a      	movs	r2, r1
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	1cba      	adds	r2, r7, #2
 800347c:	8812      	ldrh	r2, [r2, #0]
 800347e:	4013      	ands	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003482:	230f      	movs	r3, #15
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e003      	b.n	8003494 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800348c:	230f      	movs	r3, #15
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	781b      	ldrb	r3, [r3, #0]
  }
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	0008      	movs	r0, r1
 80034ac:	0011      	movs	r1, r2
 80034ae:	1cbb      	adds	r3, r7, #2
 80034b0:	1c02      	adds	r2, r0, #0
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	1c7b      	adds	r3, r7, #1
 80034b6:	1c0a      	adds	r2, r1, #0
 80034b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ba:	1c7b      	adds	r3, r7, #1
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c2:	1cbb      	adds	r3, r7, #2
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ca:	e003      	b.n	80034d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034cc:	1cbb      	adds	r3, r7, #2
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	000a      	movs	r2, r1
 80034e6:	1cbb      	adds	r3, r7, #2
 80034e8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f0:	1cbb      	adds	r3, r7, #2
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4013      	ands	r3, r2
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	1cb9      	adds	r1, r7, #2
 8003500:	8809      	ldrh	r1, [r1, #0]
 8003502:	400b      	ands	r3, r1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	0002      	movs	r2, r0
 800351c:	1dbb      	adds	r3, r7, #6
 800351e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	1dba      	adds	r2, r7, #6
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	4013      	ands	r3, r2
 800352a:	d008      	beq.n	800353e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800352e:	1dba      	adds	r2, r7, #6
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	0018      	movs	r0, r3
 800353a:	f7fc ff6d 	bl	8000418 <HAL_GPIO_EXTI_Callback>
  }
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b002      	add	sp, #8
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800354c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354e:	b08b      	sub	sp, #44	; 0x2c
 8003550:	af06      	add	r7, sp, #24
 8003552:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0ff      	b.n	800375e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a81      	ldr	r2, [pc, #516]	; (8003768 <HAL_PCD_Init+0x21c>)
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d108      	bne.n	800357c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	23aa      	movs	r3, #170	; 0xaa
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	2100      	movs	r1, #0
 8003572:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f008 fd70 	bl	800c05c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a7a      	ldr	r2, [pc, #488]	; (8003768 <HAL_PCD_Init+0x21c>)
 8003580:	2103      	movs	r1, #3
 8003582:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0018      	movs	r0, r3
 800358a:	f004 fe0f 	bl	80081ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358e:	230f      	movs	r3, #15
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e058      	b.n	800364a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003598:	200f      	movs	r0, #15
 800359a:	183b      	adds	r3, r7, r0
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	0013      	movs	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	18cb      	adds	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	0013      	movs	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	183a      	adds	r2, r7, r0
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035c8:	0004      	movs	r4, r0
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b298      	uxth	r0, r3
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	0013      	movs	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	18cb      	adds	r3, r1, r3
 80035e0:	3336      	adds	r3, #54	; 0x36
 80035e2:	1c02      	adds	r2, r0, #0
 80035e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	0013      	movs	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	18cb      	adds	r3, r1, r3
 80035f8:	3303      	adds	r3, #3
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	0013      	movs	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	189b      	adds	r3, r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	18cb      	adds	r3, r1, r3
 800360e:	3338      	adds	r3, #56	; 0x38
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003614:	193b      	adds	r3, r7, r4
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	0013      	movs	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	189b      	adds	r3, r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	18cb      	adds	r3, r1, r3
 8003624:	333c      	adds	r3, #60	; 0x3c
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800362a:	193b      	adds	r3, r7, r4
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	0013      	movs	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	189b      	adds	r3, r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	18cb      	adds	r3, r1, r3
 800363a:	3340      	adds	r3, #64	; 0x40
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	193b      	adds	r3, r7, r4
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	193b      	adds	r3, r7, r4
 8003646:	3201      	adds	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	210f      	movs	r1, #15
 800364c:	187b      	adds	r3, r7, r1
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d39f      	bcc.n	8003598 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e056      	b.n	800370e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003660:	240f      	movs	r4, #15
 8003662:	193b      	adds	r3, r7, r4
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	236a      	movs	r3, #106	; 0x6a
 800366a:	33ff      	adds	r3, #255	; 0xff
 800366c:	0019      	movs	r1, r3
 800366e:	0013      	movs	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	189b      	adds	r3, r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	18c3      	adds	r3, r0, r3
 8003678:	185b      	adds	r3, r3, r1
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367e:	193b      	adds	r3, r7, r4
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	23b4      	movs	r3, #180	; 0xb4
 8003686:	0059      	lsls	r1, r3, #1
 8003688:	0013      	movs	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	189b      	adds	r3, r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	18c3      	adds	r3, r0, r3
 8003692:	185b      	adds	r3, r3, r1
 8003694:	193a      	adds	r2, r7, r4
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	236c      	movs	r3, #108	; 0x6c
 80036a2:	33ff      	adds	r3, #255	; 0xff
 80036a4:	0019      	movs	r1, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	18c3      	adds	r3, r0, r3
 80036b0:	185b      	adds	r3, r3, r1
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	23bc      	movs	r3, #188	; 0xbc
 80036be:	0059      	lsls	r1, r3, #1
 80036c0:	0013      	movs	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	18c3      	adds	r3, r0, r3
 80036ca:	185b      	adds	r3, r3, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	23be      	movs	r3, #190	; 0xbe
 80036d8:	0059      	lsls	r1, r3, #1
 80036da:	0013      	movs	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	18c3      	adds	r3, r0, r3
 80036e4:	185b      	adds	r3, r3, r1
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	0059      	lsls	r1, r3, #1
 80036f4:	0013      	movs	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	18c3      	adds	r3, r0, r3
 80036fe:	185b      	adds	r3, r3, r1
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003704:	193b      	adds	r3, r7, r4
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	193b      	adds	r3, r7, r4
 800370a:	3201      	adds	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	230f      	movs	r3, #15
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d3a1      	bcc.n	8003660 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	466a      	mov	r2, sp
 8003724:	0011      	movs	r1, r2
 8003726:	001a      	movs	r2, r3
 8003728:	3210      	adds	r2, #16
 800372a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800372c:	c170      	stmia	r1!, {r4, r5, r6}
 800372e:	ca30      	ldmia	r2!, {r4, r5}
 8003730:	c130      	stmia	r1!, {r4, r5}
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f004 fd52 	bl	80081e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_PCD_Init+0x21c>)
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d103      	bne.n	800375c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f001 fd34 	bl	80051c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b005      	add	sp, #20
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	000002a9 	.word	0x000002a9

0800376c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	23aa      	movs	r3, #170	; 0xaa
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_Start+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e014      	b.n	80037ae <HAL_PCD_Start+0x42>
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	23aa      	movs	r3, #170	; 0xaa
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	2101      	movs	r1, #1
 800378c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0018      	movs	r0, r3
 8003794:	f004 fcf4 	bl	8008180 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f006 fc4f 	bl	800a040 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	23aa      	movs	r3, #170	; 0xaa
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	2100      	movs	r1, #0
 80037aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f006 fc51 	bl	800a06c <USB_ReadInterrupts>
 80037ca:	0002      	movs	r2, r0
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	401a      	ands	r2, r3
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d103      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fbbb 	bl	8003f58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f006 fc40 	bl	800a06c <USB_ReadInterrupts>
 80037ec:	0002      	movs	r2, r0
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	401a      	ands	r2, r3
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d114      	bne.n	8003826 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2244      	movs	r2, #68	; 0x44
 8003802:	5a9b      	ldrh	r3, [r3, r2]
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	49a2      	ldr	r1, [pc, #648]	; (8003a94 <HAL_PCD_IRQHandler+0x2dc>)
 800380c:	400a      	ands	r2, r1
 800380e:	b291      	uxth	r1, r2
 8003810:	2244      	movs	r2, #68	; 0x44
 8003812:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f008 fcab 	bl	800c172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2100      	movs	r1, #0
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f945 	bl	8003ab0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	0018      	movs	r0, r3
 800382c:	f006 fc1e 	bl	800a06c <USB_ReadInterrupts>
 8003830:	0002      	movs	r2, r0
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	401a      	ands	r2, r3
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	01db      	lsls	r3, r3, #7
 800383c:	429a      	cmp	r2, r3
 800383e:	d10b      	bne.n	8003858 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2244      	movs	r2, #68	; 0x44
 8003846:	5a9b      	ldrh	r3, [r3, r2]
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4992      	ldr	r1, [pc, #584]	; (8003a98 <HAL_PCD_IRQHandler+0x2e0>)
 8003850:	400a      	ands	r2, r1
 8003852:	b291      	uxth	r1, r2
 8003854:	2244      	movs	r2, #68	; 0x44
 8003856:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0018      	movs	r0, r3
 800385e:	f006 fc05 	bl	800a06c <USB_ReadInterrupts>
 8003862:	0002      	movs	r2, r0
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	019b      	lsls	r3, r3, #6
 8003868:	401a      	ands	r2, r3
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	429a      	cmp	r2, r3
 8003870:	d10b      	bne.n	800388a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2244      	movs	r2, #68	; 0x44
 8003878:	5a9b      	ldrh	r3, [r3, r2]
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4986      	ldr	r1, [pc, #536]	; (8003a9c <HAL_PCD_IRQHandler+0x2e4>)
 8003882:	400a      	ands	r2, r1
 8003884:	b291      	uxth	r1, r2
 8003886:	2244      	movs	r2, #68	; 0x44
 8003888:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0018      	movs	r0, r3
 8003890:	f006 fbec 	bl	800a06c <USB_ReadInterrupts>
 8003894:	0002      	movs	r2, r0
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	015b      	lsls	r3, r3, #5
 800389a:	401a      	ands	r2, r3
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d137      	bne.n	8003914 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2240      	movs	r2, #64	; 0x40
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2104      	movs	r1, #4
 80038b4:	438a      	bics	r2, r1
 80038b6:	b291      	uxth	r1, r2
 80038b8:	2240      	movs	r2, #64	; 0x40
 80038ba:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	5a9b      	ldrh	r3, [r3, r2]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2108      	movs	r1, #8
 80038cc:	438a      	bics	r2, r1
 80038ce:	b291      	uxth	r1, r2
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	23b8      	movs	r3, #184	; 0xb8
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d109      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	23b8      	movs	r3, #184	; 0xb8
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	2100      	movs	r1, #0
 80038e8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2100      	movs	r1, #0
 80038ee:	0018      	movs	r0, r3
 80038f0:	f001 fc92 	bl	8005218 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f008 fc7c 	bl	800c1f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2244      	movs	r2, #68	; 0x44
 8003902:	5a9b      	ldrh	r3, [r3, r2]
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_PCD_IRQHandler+0x2e8>)
 800390c:	400a      	ands	r2, r1
 800390e:	b291      	uxth	r1, r2
 8003910:	2244      	movs	r2, #68	; 0x44
 8003912:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f006 fba7 	bl	800a06c <USB_ReadInterrupts>
 800391e:	0002      	movs	r2, r0
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	401a      	ands	r2, r3
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	429a      	cmp	r2, r3
 800392c:	d127      	bne.n	800397e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	5a9b      	ldrh	r3, [r3, r2]
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2108      	movs	r1, #8
 800393e:	430a      	orrs	r2, r1
 8003940:	b291      	uxth	r1, r2
 8003942:	2240      	movs	r2, #64	; 0x40
 8003944:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2244      	movs	r2, #68	; 0x44
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4953      	ldr	r1, [pc, #332]	; (8003aa4 <HAL_PCD_IRQHandler+0x2ec>)
 8003956:	400a      	ands	r2, r1
 8003958:	b291      	uxth	r1, r2
 800395a:	2244      	movs	r2, #68	; 0x44
 800395c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	5a9b      	ldrh	r3, [r3, r2]
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2104      	movs	r1, #4
 800396e:	430a      	orrs	r2, r1
 8003970:	b291      	uxth	r1, r2
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f008 fc1f 	bl	800c1bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f006 fb72 	bl	800a06c <USB_ReadInterrupts>
 8003988:	0003      	movs	r3, r0
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	4013      	ands	r3, r2
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d145      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2244      	movs	r2, #68	; 0x44
 8003998:	5a9b      	ldrh	r3, [r3, r2]
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	438a      	bics	r2, r1
 80039a4:	b291      	uxth	r1, r2
 80039a6:	2244      	movs	r2, #68	; 0x44
 80039a8:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	23b8      	movs	r3, #184	; 0xb8
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	5cd3      	ldrb	r3, [r2, r3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d12f      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	5a9b      	ldrh	r3, [r3, r2]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2104      	movs	r1, #4
 80039c6:	430a      	orrs	r2, r1
 80039c8:	b291      	uxth	r1, r2
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	5a9b      	ldrh	r3, [r3, r2]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2108      	movs	r1, #8
 80039de:	430a      	orrs	r2, r1
 80039e0:	b291      	uxth	r1, r2
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	23b8      	movs	r3, #184	; 0xb8
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	2101      	movs	r1, #1
 80039ee:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2254      	movs	r2, #84	; 0x54
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	223c      	movs	r2, #60	; 0x3c
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	23b9      	movs	r3, #185	; 0xb9
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f001 fc02 	bl	8005218 <HAL_PCDEx_LPM_Callback>
 8003a14:	e003      	b.n	8003a1e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f008 fbcf 	bl	800c1bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f006 fb22 	bl	800a06c <USB_ReadInterrupts>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	401a      	ands	r2, r3
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d10f      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2244      	movs	r2, #68	; 0x44
 8003a3e:	5a9b      	ldrh	r3, [r3, r2]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <HAL_PCD_IRQHandler+0x2f0>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	b291      	uxth	r1, r2
 8003a4c:	2244      	movs	r2, #68	; 0x44
 8003a4e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f008 fb7e 	bl	800c154 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f006 fb05 	bl	800a06c <USB_ReadInterrupts>
 8003a62:	0002      	movs	r2, r0
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	401a      	ands	r2, r3
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10b      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2244      	movs	r2, #68	; 0x44
 8003a78:	5a9b      	ldrh	r3, [r3, r2]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	490a      	ldr	r1, [pc, #40]	; (8003aac <HAL_PCD_IRQHandler+0x2f4>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	b291      	uxth	r1, r2
 8003a86:	2244      	movs	r2, #68	; 0x44
 8003a88:	5299      	strh	r1, [r3, r2]
  }
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	fffffbff 	.word	0xfffffbff
 8003a98:	ffffbfff 	.word	0xffffbfff
 8003a9c:	ffffdfff 	.word	0xffffdfff
 8003aa0:	ffffefff 	.word	0xffffefff
 8003aa4:	fffff7ff 	.word	0xfffff7ff
 8003aa8:	fffffdff 	.word	0xfffffdff
 8003aac:	fffffeff 	.word	0xfffffeff

08003ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	000a      	movs	r2, r1
 8003aba:	1cfb      	adds	r3, r7, #3
 8003abc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	23aa      	movs	r3, #170	; 0xaa
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_PCD_SetAddress+0x1e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e017      	b.n	8003afe <HAL_PCD_SetAddress+0x4e>
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	23aa      	movs	r3, #170	; 0xaa
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1cfa      	adds	r2, r7, #3
 8003adc:	2124      	movs	r1, #36	; 0x24
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	1cfb      	adds	r3, r7, #3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	0019      	movs	r1, r3
 8003aec:	0010      	movs	r0, r2
 8003aee:	f006 fa93 	bl	800a018 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	23aa      	movs	r3, #170	; 0xaa
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	2100      	movs	r1, #0
 8003afa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b002      	add	sp, #8
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b06:	b590      	push	{r4, r7, lr}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	000c      	movs	r4, r1
 8003b10:	0010      	movs	r0, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	1cfb      	adds	r3, r7, #3
 8003b16:	1c22      	adds	r2, r4, #0
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	003b      	movs	r3, r7
 8003b1c:	1c02      	adds	r2, r0, #0
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	1cbb      	adds	r3, r7, #2
 8003b22:	1c0a      	adds	r2, r1, #0
 8003b24:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b26:	230b      	movs	r3, #11
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b2e:	1cfb      	adds	r3, r7, #3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	da0f      	bge.n	8003b58 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	1cfb      	adds	r3, r7, #3
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	4013      	ands	r3, r2
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	0013      	movs	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
 8003b56:	e00f      	b.n	8003b78 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	1cfb      	adds	r3, r7, #3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	401a      	ands	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	3369      	adds	r3, #105	; 0x69
 8003b6a:	33ff      	adds	r3, #255	; 0xff
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b78:	1cfb      	adds	r3, r7, #3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b86:	003b      	movs	r3, r7
 8003b88:	881a      	ldrh	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1cba      	adds	r2, r7, #2
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d102      	bne.n	8003bb6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	23aa      	movs	r3, #170	; 0xaa
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_EP_Open+0xc0>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e013      	b.n	8003bee <HAL_PCD_EP_Open+0xe8>
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	23aa      	movs	r3, #170	; 0xaa
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	2101      	movs	r1, #1
 8003bce:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f004 fb2d 	bl	8008238 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	23aa      	movs	r3, #170	; 0xaa
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	2100      	movs	r1, #0
 8003be6:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003be8:	230b      	movs	r3, #11
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b005      	add	sp, #20
 8003bf4:	bd90      	pop	{r4, r7, pc}

08003bf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	000a      	movs	r2, r1
 8003c00:	1cfb      	adds	r3, r7, #3
 8003c02:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c04:	1cfb      	adds	r3, r7, #3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da0f      	bge.n	8003c2e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0e:	1cfb      	adds	r3, r7, #3
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2207      	movs	r2, #7
 8003c14:	4013      	ands	r3, r2
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	0013      	movs	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	18d3      	adds	r3, r2, r3
 8003c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	705a      	strb	r2, [r3, #1]
 8003c2c:	e00f      	b.n	8003c4e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	1cfb      	adds	r3, r7, #3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2207      	movs	r2, #7
 8003c34:	401a      	ands	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	3369      	adds	r3, #105	; 0x69
 8003c40:	33ff      	adds	r3, #255	; 0xff
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	18d3      	adds	r3, r2, r3
 8003c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c4e:	1cfb      	adds	r3, r7, #3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2207      	movs	r2, #7
 8003c54:	4013      	ands	r3, r2
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	23aa      	movs	r3, #170	; 0xaa
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_PCD_EP_Close+0x76>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e011      	b.n	8003c90 <HAL_PCD_EP_Close+0x9a>
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	23aa      	movs	r3, #170	; 0xaa
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	2101      	movs	r1, #1
 8003c74:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	0011      	movs	r1, r2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f004 fe4e 	bl	8008920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	23aa      	movs	r3, #170	; 0xaa
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	200b      	movs	r0, #11
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	1c0a      	adds	r2, r1, #0
 8003caa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cac:	0001      	movs	r1, r0
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	3369      	adds	r3, #105	; 0x69
 8003cc0:	33ff      	adds	r3, #255	; 0xff
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	18d3      	adds	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2207      	movs	r2, #7
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d107      	bne.n	8003d08 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	0011      	movs	r1, r2
 8003d00:	0018      	movs	r0, r3
 8003d02:	f004 ffcd 	bl	8008ca0 <USB_EPStartXfer>
 8003d06:	e006      	b.n	8003d16 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	0011      	movs	r1, r2
 8003d10:	0018      	movs	r0, r3
 8003d12:	f004 ffc5 	bl	8008ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b006      	add	sp, #24
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	000a      	movs	r2, r1
 8003d2a:	1cfb      	adds	r3, r7, #3
 8003d2c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d2e:	1cfb      	adds	r3, r7, #3
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2207      	movs	r2, #7
 8003d34:	401a      	ands	r2, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	23c2      	movs	r3, #194	; 0xc2
 8003d3a:	0059      	lsls	r1, r3, #1
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	18c3      	adds	r3, r0, r3
 8003d46:	185b      	adds	r3, r3, r1
 8003d48:	681b      	ldr	r3, [r3, #0]
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	200b      	movs	r0, #11
 8003d60:	183b      	adds	r3, r7, r0
 8003d62:	1c0a      	adds	r2, r1, #0
 8003d64:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	0013      	movs	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	18d3      	adds	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2224      	movs	r2, #36	; 0x24
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2201      	movs	r2, #1
 8003da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2207      	movs	r2, #7
 8003daa:	4013      	ands	r3, r2
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db2:	183b      	adds	r3, r7, r0
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2207      	movs	r2, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	d107      	bne.n	8003dcc <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f004 ff6b 	bl	8008ca0 <USB_EPStartXfer>
 8003dca:	e006      	b.n	8003dda <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f004 ff63 	bl	8008ca0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b006      	add	sp, #24
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	000a      	movs	r2, r1
 8003dee:	1cfb      	adds	r3, r7, #3
 8003df0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003df2:	1cfb      	adds	r3, r7, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2207      	movs	r2, #7
 8003df8:	401a      	ands	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d901      	bls.n	8003e06 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e046      	b.n	8003e94 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e06:	1cfb      	adds	r3, r7, #3
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da0f      	bge.n	8003e30 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	1cfb      	adds	r3, r7, #3
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2207      	movs	r2, #7
 8003e16:	4013      	ands	r3, r2
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	18d3      	adds	r3, r2, r3
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	705a      	strb	r2, [r3, #1]
 8003e2e:	e00d      	b.n	8003e4c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e30:	1cfb      	adds	r3, r7, #3
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	0013      	movs	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	3369      	adds	r3, #105	; 0x69
 8003e3e:	33ff      	adds	r3, #255	; 0xff
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e52:	1cfb      	adds	r3, r7, #3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2207      	movs	r2, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	23aa      	movs	r3, #170	; 0xaa
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_PCD_EP_SetStall+0x8c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e011      	b.n	8003e94 <HAL_PCD_EP_SetStall+0xb0>
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	23aa      	movs	r3, #170	; 0xaa
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	2101      	movs	r1, #1
 8003e78:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	0011      	movs	r1, r2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f005 ffc6 	bl	8009e14 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	23aa      	movs	r3, #170	; 0xaa
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	2100      	movs	r1, #0
 8003e90:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	000a      	movs	r2, r1
 8003ea6:	1cfb      	adds	r3, r7, #3
 8003ea8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eaa:	1cfb      	adds	r3, r7, #3
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	220f      	movs	r2, #15
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d901      	bls.n	8003ebe <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e048      	b.n	8003f50 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ebe:	1cfb      	adds	r3, r7, #3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da0f      	bge.n	8003ee8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	1cfb      	adds	r3, r7, #3
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2207      	movs	r2, #7
 8003ece:	4013      	ands	r3, r2
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	0013      	movs	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	705a      	strb	r2, [r3, #1]
 8003ee6:	e00f      	b.n	8003f08 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee8:	1cfb      	adds	r3, r7, #3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2207      	movs	r2, #7
 8003eee:	401a      	ands	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	189b      	adds	r3, r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3369      	adds	r3, #105	; 0x69
 8003efa:	33ff      	adds	r3, #255	; 0xff
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0e:	1cfb      	adds	r3, r7, #3
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2207      	movs	r2, #7
 8003f14:	4013      	ands	r3, r2
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	23aa      	movs	r3, #170	; 0xaa
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_PCD_EP_ClrStall+0x90>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e011      	b.n	8003f50 <HAL_PCD_EP_ClrStall+0xb4>
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	23aa      	movs	r3, #170	; 0xaa
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	2101      	movs	r1, #1
 8003f34:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f005 ffb8 	bl	8009eb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	23aa      	movs	r3, #170	; 0xaa
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b004      	add	sp, #16
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	b096      	sub	sp, #88	; 0x58
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f60:	f000 fbd8 	bl	8004714 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2056      	movs	r0, #86	; 0x56
 8003f6a:	183b      	adds	r3, r7, r0
 8003f6c:	2144      	movs	r1, #68	; 0x44
 8003f6e:	5a52      	ldrh	r2, [r2, r1]
 8003f70:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f72:	183b      	adds	r3, r7, r0
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	2455      	movs	r4, #85	; 0x55
 8003f7a:	193b      	adds	r3, r7, r4
 8003f7c:	210f      	movs	r1, #15
 8003f7e:	400a      	ands	r2, r1
 8003f80:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d000      	beq.n	8003f8c <PCD_EP_ISR_Handler+0x34>
 8003f8a:	e179      	b.n	8004280 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f8c:	183b      	adds	r3, r7, r0
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d154      	bne.n	8004040 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	200e      	movs	r0, #14
 8003fa0:	183b      	adds	r3, r7, r0
 8003fa2:	49af      	ldr	r1, [pc, #700]	; (8004260 <PCD_EP_ISR_Handler+0x308>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	183a      	adds	r2, r7, r0
 8003fae:	8812      	ldrh	r2, [r2, #0]
 8003fb0:	49ac      	ldr	r1, [pc, #688]	; (8004264 <PCD_EP_ISR_Handler+0x30c>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3328      	adds	r3, #40	; 0x28
 8003fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2250      	movs	r2, #80	; 0x50
 8003fc4:	5a9b      	ldrh	r3, [r3, r2]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	001a      	movs	r2, r3
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	18d2      	adds	r2, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	18d3      	adds	r3, r2, r3
 8003fd8:	4aa3      	ldr	r2, [pc, #652]	; (8004268 <PCD_EP_ISR_Handler+0x310>)
 8003fda:	4694      	mov	ip, r2
 8003fdc:	4463      	add	r3, ip
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	059b      	lsls	r3, r3, #22
 8003fe2:	0d9a      	lsrs	r2, r3, #22
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	18d2      	adds	r2, r2, r3
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f008 f88c 	bl	800c118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	5c9b      	ldrb	r3, [r3, r2]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <PCD_EP_ISR_Handler+0xb8>
 800400c:	f000 fb82 	bl	8004714 <PCD_EP_ISR_Handler+0x7bc>
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <PCD_EP_ISR_Handler+0xc4>
 8004018:	f000 fb7c 	bl	8004714 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	5c9b      	ldrb	r3, [r3, r2]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	4252      	negs	r2, r2
 8004028:	4313      	orrs	r3, r2
 800402a:	b2da      	uxtb	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b291      	uxth	r1, r2
 8004032:	224c      	movs	r2, #76	; 0x4c
 8004034:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2224      	movs	r2, #36	; 0x24
 800403a:	2100      	movs	r1, #0
 800403c:	5499      	strb	r1, [r3, r2]
 800403e:	e369      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3369      	adds	r3, #105	; 0x69
 8004044:	33ff      	adds	r3, #255	; 0xff
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2152      	movs	r1, #82	; 0x52
 800404e:	187b      	adds	r3, r7, r1
 8004050:	8812      	ldrh	r2, [r2, #0]
 8004052:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004054:	187b      	adds	r3, r7, r1
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d037      	beq.n	80040d0 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2250      	movs	r2, #80	; 0x50
 8004066:	5a9b      	ldrh	r3, [r3, r2]
 8004068:	b29b      	uxth	r3, r3
 800406a:	001a      	movs	r2, r3
 800406c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	18d2      	adds	r2, r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	18d3      	adds	r3, r2, r3
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <PCD_EP_ISR_Handler+0x314>)
 800407c:	4694      	mov	ip, r2
 800407e:	4463      	add	r3, ip
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	059b      	lsls	r3, r3, #22
 8004084:	0d9a      	lsrs	r2, r3, #22
 8004086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004088:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	22ac      	movs	r2, #172	; 0xac
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	1899      	adds	r1, r3, r2
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800409a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f006 f836 	bl	800a110 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	2010      	movs	r0, #16
 80040ae:	183b      	adds	r3, r7, r0
 80040b0:	496f      	ldr	r1, [pc, #444]	; (8004270 <PCD_EP_ISR_Handler+0x318>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	183a      	adds	r2, r7, r0
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	430a      	orrs	r2, r1
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f007 ffef 	bl	800c0ac <HAL_PCD_SetupStageCallback>
 80040ce:	e321      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040d0:	2352      	movs	r3, #82	; 0x52
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2200      	movs	r2, #0
 80040d6:	5e9b      	ldrsh	r3, [r3, r2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db00      	blt.n	80040de <PCD_EP_ISR_Handler+0x186>
 80040dc:	e31a      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	201e      	movs	r0, #30
 80040e8:	183b      	adds	r3, r7, r0
 80040ea:	4961      	ldr	r1, [pc, #388]	; (8004270 <PCD_EP_ISR_Handler+0x318>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	183a      	adds	r2, r7, r0
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	430a      	orrs	r2, r1
 80040fc:	b292      	uxth	r2, r2
 80040fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2250      	movs	r2, #80	; 0x50
 8004106:	5a9b      	ldrh	r3, [r3, r2]
 8004108:	b29b      	uxth	r3, r3
 800410a:	001a      	movs	r2, r3
 800410c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	18d2      	adds	r2, r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	18d3      	adds	r3, r2, r3
 800411a:	4a54      	ldr	r2, [pc, #336]	; (800426c <PCD_EP_ISR_Handler+0x314>)
 800411c:	4694      	mov	ip, r2
 800411e:	4463      	add	r3, ip
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	059b      	lsls	r3, r3, #22
 8004124:	0d9a      	lsrs	r2, r3, #22
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01a      	beq.n	8004168 <PCD_EP_ISR_Handler+0x210>
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	6959      	ldr	r1, [r3, #20]
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800414a:	b29b      	uxth	r3, r3
 800414c:	f005 ffe0 	bl	800a110 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	18d2      	adds	r2, r2, r3
 800415a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2100      	movs	r1, #0
 8004162:	0018      	movs	r0, r3
 8004164:	f007 ffb7 	bl	800c0d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	001a      	movs	r2, r3
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	4013      	ands	r3, r2
 8004178:	d000      	beq.n	800417c <PCD_EP_ISR_Handler+0x224>
 800417a:	e2cb      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2250      	movs	r2, #80	; 0x50
 8004188:	5a9b      	ldrh	r3, [r3, r2]
 800418a:	b29b      	uxth	r3, r3
 800418c:	001a      	movs	r2, r3
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	189b      	adds	r3, r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4a35      	ldr	r2, [pc, #212]	; (800426c <PCD_EP_ISR_Handler+0x314>)
 8004198:	4694      	mov	ip, r2
 800419a:	4463      	add	r3, ip
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d110      	bne.n	80041c8 <PCD_EP_ISR_Handler+0x270>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <PCD_EP_ISR_Handler+0x31c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4a29      	ldr	r2, [pc, #164]	; (8004264 <PCD_EP_ISR_Handler+0x30c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e02b      	b.n	8004220 <PCD_EP_ISR_Handler+0x2c8>
 80041c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b3e      	cmp	r3, #62	; 0x3e
 80041ce:	d812      	bhi.n	80041f6 <PCD_EP_ISR_Handler+0x29e>
 80041d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	647b      	str	r3, [r7, #68]	; 0x44
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2201      	movs	r2, #1
 80041de:	4013      	ands	r3, r2
 80041e0:	d002      	beq.n	80041e8 <PCD_EP_ISR_Handler+0x290>
 80041e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e4:	3301      	adds	r3, #1
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	e014      	b.n	8004220 <PCD_EP_ISR_Handler+0x2c8>
 80041f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	221f      	movs	r2, #31
 8004204:	4013      	ands	r3, r2
 8004206:	d102      	bne.n	800420e <PCD_EP_ISR_Handler+0x2b6>
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	3b01      	subs	r3, #1
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
 800420e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004210:	b29b      	uxth	r3, r3
 8004212:	029b      	lsls	r3, r3, #10
 8004214:	b29b      	uxth	r3, r3
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <PCD_EP_ISR_Handler+0x30c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	b29a      	uxth	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29a      	uxth	r2, r3
 8004228:	2012      	movs	r0, #18
 800422a:	183b      	adds	r3, r7, r0
 800422c:	4912      	ldr	r1, [pc, #72]	; (8004278 <PCD_EP_ISR_Handler+0x320>)
 800422e:	400a      	ands	r2, r1
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	183b      	adds	r3, r7, r0
 8004234:	183a      	adds	r2, r7, r0
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	0149      	lsls	r1, r1, #5
 800423c:	404a      	eors	r2, r1
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	183b      	adds	r3, r7, r0
 8004242:	183a      	adds	r2, r7, r0
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0189      	lsls	r1, r1, #6
 800424a:	404a      	eors	r2, r1
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	183a      	adds	r2, r7, r0
 8004254:	8812      	ldrh	r2, [r2, #0]
 8004256:	4909      	ldr	r1, [pc, #36]	; (800427c <PCD_EP_ISR_Handler+0x324>)
 8004258:	430a      	orrs	r2, r1
 800425a:	b292      	uxth	r2, r2
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	e259      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
 8004260:	ffff8f0f 	.word	0xffff8f0f
 8004264:	ffff8000 	.word	0xffff8000
 8004268:	00000402 	.word	0x00000402
 800426c:	00000406 	.word	0x00000406
 8004270:	00000f8f 	.word	0x00000f8f
 8004274:	ffff83ff 	.word	0xffff83ff
 8004278:	ffffbf8f 	.word	0xffffbf8f
 800427c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	001a      	movs	r2, r3
 8004286:	2055      	movs	r0, #85	; 0x55
 8004288:	183b      	adds	r3, r7, r0
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	18d2      	adds	r2, r2, r3
 8004290:	2152      	movs	r1, #82	; 0x52
 8004292:	187b      	adds	r3, r7, r1
 8004294:	8812      	ldrh	r2, [r2, #0]
 8004296:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004298:	187b      	adds	r3, r7, r1
 800429a:	2200      	movs	r2, #0
 800429c:	5e9b      	ldrsh	r3, [r3, r2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db00      	blt.n	80042a4 <PCD_EP_ISR_Handler+0x34c>
 80042a2:	e0fa      	b.n	800449a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	001a      	movs	r2, r3
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	2450      	movs	r4, #80	; 0x50
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	49cf      	ldr	r1, [pc, #828]	; (80045f8 <PCD_EP_ISR_Handler+0x6a0>)
 80042bc:	400a      	ands	r2, r1
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	001a      	movs	r2, r3
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	193a      	adds	r2, r7, r4
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	430a      	orrs	r2, r1
 80042d6:	b292      	uxth	r2, r2
 80042d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	0013      	movs	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	3369      	adds	r3, #105	; 0x69
 80042e8:	33ff      	adds	r3, #255	; 0xff
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f2:	7b1b      	ldrb	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d125      	bne.n	8004344 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2250      	movs	r2, #80	; 0x50
 80042fe:	5a9b      	ldrh	r3, [r3, r2]
 8004300:	b29b      	uxth	r3, r3
 8004302:	001a      	movs	r2, r3
 8004304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	18d2      	adds	r2, r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	4aba      	ldr	r2, [pc, #744]	; (80045fc <PCD_EP_ISR_Handler+0x6a4>)
 8004314:	4694      	mov	ip, r2
 8004316:	4463      	add	r3, ip
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	2448      	movs	r4, #72	; 0x48
 800431c:	193b      	adds	r3, r7, r4
 800431e:	0592      	lsls	r2, r2, #22
 8004320:	0d92      	lsrs	r2, r2, #22
 8004322:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004324:	193b      	adds	r3, r7, r4
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d100      	bne.n	800432e <PCD_EP_ISR_Handler+0x3d6>
 800432c:	e08d      	b.n	800444a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	6959      	ldr	r1, [r3, #20]
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	88da      	ldrh	r2, [r3, #6]
 800433a:	193b      	adds	r3, r7, r4
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	f005 fee7 	bl	800a110 <USB_ReadPMA>
 8004342:	e082      	b.n	800444a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	78db      	ldrb	r3, [r3, #3]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d10c      	bne.n	8004366 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800434c:	2348      	movs	r3, #72	; 0x48
 800434e:	18fc      	adds	r4, r7, r3
 8004350:	2352      	movs	r3, #82	; 0x52
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f9ee 	bl	800473c <HAL_PCD_EP_DB_Receive>
 8004360:	0003      	movs	r3, r0
 8004362:	8023      	strh	r3, [r4, #0]
 8004364:	e071      	b.n	800444a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	001a      	movs	r2, r3
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29a      	uxth	r2, r3
 8004378:	204a      	movs	r0, #74	; 0x4a
 800437a:	183b      	adds	r3, r7, r0
 800437c:	49a0      	ldr	r1, [pc, #640]	; (8004600 <PCD_EP_ISR_Handler+0x6a8>)
 800437e:	400a      	ands	r2, r1
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	001a      	movs	r2, r3
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	183a      	adds	r2, r7, r0
 8004392:	8812      	ldrh	r2, [r2, #0]
 8004394:	499b      	ldr	r1, [pc, #620]	; (8004604 <PCD_EP_ISR_Handler+0x6ac>)
 8004396:	430a      	orrs	r2, r1
 8004398:	b292      	uxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	001a      	movs	r2, r3
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	18d3      	adds	r3, r2, r3
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	001a      	movs	r2, r3
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	01db      	lsls	r3, r3, #7
 80043b4:	4013      	ands	r3, r2
 80043b6:	d024      	beq.n	8004402 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2250      	movs	r2, #80	; 0x50
 80043be:	5a9b      	ldrh	r3, [r3, r2]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	001a      	movs	r2, r3
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	18d2      	adds	r2, r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	4a8d      	ldr	r2, [pc, #564]	; (8004608 <PCD_EP_ISR_Handler+0x6b0>)
 80043d4:	4694      	mov	ip, r2
 80043d6:	4463      	add	r3, ip
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	2448      	movs	r4, #72	; 0x48
 80043dc:	193b      	adds	r3, r7, r4
 80043de:	0592      	lsls	r2, r2, #22
 80043e0:	0d92      	lsrs	r2, r2, #22
 80043e2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02e      	beq.n	800444a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f2:	6959      	ldr	r1, [r3, #20]
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	891a      	ldrh	r2, [r3, #8]
 80043f8:	193b      	adds	r3, r7, r4
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	f005 fe88 	bl	800a110 <USB_ReadPMA>
 8004400:	e023      	b.n	800444a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2250      	movs	r2, #80	; 0x50
 8004408:	5a9b      	ldrh	r3, [r3, r2]
 800440a:	b29b      	uxth	r3, r3
 800440c:	001a      	movs	r2, r3
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	18d2      	adds	r2, r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	4a77      	ldr	r2, [pc, #476]	; (80045fc <PCD_EP_ISR_Handler+0x6a4>)
 800441e:	4694      	mov	ip, r2
 8004420:	4463      	add	r3, ip
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	2448      	movs	r4, #72	; 0x48
 8004426:	193b      	adds	r3, r7, r4
 8004428:	0592      	lsls	r2, r2, #22
 800442a:	0d92      	lsrs	r2, r2, #22
 800442c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800442e:	193b      	adds	r3, r7, r4
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	6959      	ldr	r1, [r3, #20]
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	895a      	ldrh	r2, [r3, #10]
 8004442:	193b      	adds	r3, r7, r4
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f005 fe63 	bl	800a110 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	2148      	movs	r1, #72	; 0x48
 8004450:	187b      	adds	r3, r7, r1
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	18d2      	adds	r2, r2, r3
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800445a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	187b      	adds	r3, r7, r1
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	18d2      	adds	r2, r2, r3
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <PCD_EP_ISR_Handler+0x524>
 8004470:	187b      	adds	r3, r7, r1
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d207      	bcs.n	800448c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f007 fe26 	bl	800c0d6 <HAL_PCD_DataOutStageCallback>
 800448a:	e006      	b.n	800449a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f004 fc03 	bl	8008ca0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800449a:	2452      	movs	r4, #82	; 0x52
 800449c:	193b      	adds	r3, r7, r4
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	4013      	ands	r3, r2
 80044a4:	d100      	bne.n	80044a8 <PCD_EP_ISR_Handler+0x550>
 80044a6:	e135      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80044a8:	2055      	movs	r0, #85	; 0x55
 80044aa:	183b      	adds	r3, r7, r0
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	0013      	movs	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	18d3      	adds	r3, r2, r3
 80044bc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	001a      	movs	r2, r3
 80044c4:	183b      	adds	r3, r7, r0
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	18d3      	adds	r3, r2, r3
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	2542      	movs	r5, #66	; 0x42
 80044d2:	197b      	adds	r3, r7, r5
 80044d4:	494d      	ldr	r1, [pc, #308]	; (800460c <PCD_EP_ISR_Handler+0x6b4>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	001a      	movs	r2, r3
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	18d3      	adds	r3, r2, r3
 80044e8:	197a      	adds	r2, r7, r5
 80044ea:	8812      	ldrh	r2, [r2, #0]
 80044ec:	4948      	ldr	r1, [pc, #288]	; (8004610 <PCD_EP_ISR_Handler+0x6b8>)
 80044ee:	430a      	orrs	r2, r1
 80044f0:	b292      	uxth	r2, r2
 80044f2:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	78db      	ldrb	r3, [r3, #3]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d100      	bne.n	80044fe <PCD_EP_ISR_Handler+0x5a6>
 80044fc:	e0ad      	b.n	800465a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80044fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004500:	2200      	movs	r2, #0
 8004502:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004504:	193b      	adds	r3, r7, r4
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	4013      	ands	r3, r2
 800450c:	d046      	beq.n	800459c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d125      	bne.n	8004562 <PCD_EP_ISR_Handler+0x60a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2250      	movs	r2, #80	; 0x50
 8004522:	5a9b      	ldrh	r3, [r3, r2]
 8004524:	b29b      	uxth	r3, r3
 8004526:	001a      	movs	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	189b      	adds	r3, r3, r2
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00da      	lsls	r2, r3, #3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	4a33      	ldr	r2, [pc, #204]	; (8004608 <PCD_EP_ISR_Handler+0x6b0>)
 800453a:	4694      	mov	ip, r2
 800453c:	4463      	add	r3, ip
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	4a33      	ldr	r2, [pc, #204]	; (8004614 <PCD_EP_ISR_Handler+0x6bc>)
 8004548:	4013      	ands	r3, r2
 800454a:	b29a      	uxth	r2, r3
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <PCD_EP_ISR_Handler+0x6b8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	b29a      	uxth	r2, r3
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	e073      	b.n	800464a <PCD_EP_ISR_Handler+0x6f2>
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d16f      	bne.n	800464a <PCD_EP_ISR_Handler+0x6f2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2250      	movs	r2, #80	; 0x50
 8004576:	5a9b      	ldrh	r3, [r3, r2]
 8004578:	b29b      	uxth	r3, r3
 800457a:	001a      	movs	r2, r3
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	189b      	adds	r3, r3, r2
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	00da      	lsls	r2, r3, #3
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <PCD_EP_ISR_Handler+0x6b0>)
 800458e:	4694      	mov	ip, r2
 8004590:	4463      	add	r3, ip
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	e056      	b.n	800464a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d136      	bne.n	8004618 <PCD_EP_ISR_Handler+0x6c0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2250      	movs	r2, #80	; 0x50
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	001a      	movs	r2, r3
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	00da      	lsls	r2, r3, #3
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <PCD_EP_ISR_Handler+0x6a4>)
 80045ce:	4694      	mov	ip, r2
 80045d0:	4463      	add	r3, ip
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <PCD_EP_ISR_Handler+0x6bc>)
 80045dc:	4013      	ands	r3, r2
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <PCD_EP_ISR_Handler+0x6b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	e029      	b.n	800464a <PCD_EP_ISR_Handler+0x6f2>
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	00000f8f 	.word	0x00000f8f
 80045fc:	00000406 	.word	0x00000406
 8004600:	ffff8f8f 	.word	0xffff8f8f
 8004604:	ffff80c0 	.word	0xffff80c0
 8004608:	00000402 	.word	0x00000402
 800460c:	ffff8f0f 	.word	0xffff8f0f
 8004610:	ffff8000 	.word	0xffff8000
 8004614:	ffff83ff 	.word	0xffff83ff
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d114      	bne.n	800464a <PCD_EP_ISR_Handler+0x6f2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2250      	movs	r2, #80	; 0x50
 8004626:	5a9b      	ldrh	r3, [r3, r2]
 8004628:	b29b      	uxth	r3, r3
 800462a:	001a      	movs	r2, r3
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462e:	189b      	adds	r3, r3, r2
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	00da      	lsls	r2, r3, #3
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	18d3      	adds	r3, r2, r3
 800463c:	4a3d      	ldr	r2, [pc, #244]	; (8004734 <PCD_EP_ISR_Handler+0x7dc>)
 800463e:	4694      	mov	ip, r2
 8004640:	4463      	add	r3, ip
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2200      	movs	r2, #0
 8004648:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0011      	movs	r1, r2
 8004652:	0018      	movs	r0, r3
 8004654:	f007 fd60 	bl	800c118 <HAL_PCD_DataInStageCallback>
 8004658:	e05c      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	78db      	ldrb	r3, [r3, #3]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d150      	bne.n	8004704 <PCD_EP_ISR_Handler+0x7ac>
 8004662:	2352      	movs	r3, #82	; 0x52
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4013      	ands	r3, r2
 800466e:	d149      	bne.n	8004704 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2250      	movs	r2, #80	; 0x50
 8004676:	5a9b      	ldrh	r3, [r3, r2]
 8004678:	b29b      	uxth	r3, r3
 800467a:	001a      	movs	r2, r3
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	18d2      	adds	r2, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <PCD_EP_ISR_Handler+0x7e0>)
 800468c:	4694      	mov	ip, r2
 800468e:	4463      	add	r3, ip
 8004690:	881a      	ldrh	r2, [r3, #0]
 8004692:	2140      	movs	r1, #64	; 0x40
 8004694:	187b      	adds	r3, r7, r1
 8004696:	0592      	lsls	r2, r2, #22
 8004698:	0d92      	lsrs	r2, r2, #22
 800469a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d907      	bls.n	80046b8 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	619a      	str	r2, [r3, #24]
 80046b6:	e002      	b.n	80046be <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80046b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0011      	movs	r1, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f007 fd22 	bl	800c118 <HAL_PCD_DataInStageCallback>
 80046d4:	e01e      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80046d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	18d2      	adds	r2, r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	187b      	adds	r3, r7, r1
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	18d2      	adds	r2, r2, r3
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046fa:	0011      	movs	r1, r2
 80046fc:	0018      	movs	r0, r3
 80046fe:	f004 facf 	bl	8008ca0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004702:	e007      	b.n	8004714 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004704:	2352      	movs	r3, #82	; 0x52
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f930 	bl	8004974 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2244      	movs	r2, #68	; 0x44
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	b21b      	sxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	da01      	bge.n	8004728 <PCD_EP_ISR_Handler+0x7d0>
 8004724:	f7ff fc1e 	bl	8003f64 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b016      	add	sp, #88	; 0x58
 8004730:	bdb0      	pop	{r4, r5, r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	00000406 	.word	0x00000406
 8004738:	00000402 	.word	0x00000402

0800473c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	1dbb      	adds	r3, r7, #6
 8004748:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800474a:	1dbb      	adds	r3, r7, #6
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	01db      	lsls	r3, r3, #7
 8004752:	4013      	ands	r3, r2
 8004754:	d100      	bne.n	8004758 <HAL_PCD_EP_DB_Receive+0x1c>
 8004756:	e07d      	b.n	8004854 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2250      	movs	r2, #80	; 0x50
 800475e:	5a9b      	ldrh	r3, [r3, r2]
 8004760:	b29b      	uxth	r3, r3
 8004762:	001a      	movs	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	18d2      	adds	r2, r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	4a7a      	ldr	r2, [pc, #488]	; (800495c <HAL_PCD_EP_DB_Receive+0x220>)
 8004774:	4694      	mov	ip, r2
 8004776:	4463      	add	r3, ip
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	211a      	movs	r1, #26
 800477c:	187b      	adds	r3, r7, r1
 800477e:	0592      	lsls	r2, r2, #22
 8004780:	0d92      	lsrs	r2, r2, #22
 8004782:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	187b      	adds	r3, r7, r1
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d307      	bcc.n	80047a0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	187b      	adds	r3, r7, r1
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	1ad2      	subs	r2, r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	619a      	str	r2, [r3, #24]
 800479e:	e002      	b.n	80047a6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d121      	bne.n	80047f2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	001a      	movs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	2018      	movs	r0, #24
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	4966      	ldr	r1, [pc, #408]	; (8004960 <HAL_PCD_EP_DB_Receive+0x224>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	183a      	adds	r2, r7, r0
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0189      	lsls	r1, r1, #6
 80047d4:	404a      	eors	r2, r1
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	001a      	movs	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	183a      	adds	r2, r7, r0
 80047e8:	8812      	ldrh	r2, [r2, #0]
 80047ea:	495e      	ldr	r1, [pc, #376]	; (8004964 <HAL_PCD_EP_DB_Receive+0x228>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	b292      	uxth	r2, r2
 80047f0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047f2:	1dbb      	adds	r3, r7, #6
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	4013      	ands	r3, r2
 80047fa:	d01a      	beq.n	8004832 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	001a      	movs	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	2016      	movs	r0, #22
 8004810:	183b      	adds	r3, r7, r0
 8004812:	4955      	ldr	r1, [pc, #340]	; (8004968 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004814:	400a      	ands	r2, r1
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	183a      	adds	r2, r7, r0
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	4950      	ldr	r1, [pc, #320]	; (800496c <HAL_PCD_EP_DB_Receive+0x230>)
 800482c:	430a      	orrs	r2, r1
 800482e:	b292      	uxth	r2, r2
 8004830:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004832:	241a      	movs	r4, #26
 8004834:	193b      	adds	r3, r7, r4
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d100      	bne.n	800483e <HAL_PCD_EP_DB_Receive+0x102>
 800483c:	e086      	b.n	800494c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6959      	ldr	r1, [r3, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	891a      	ldrh	r2, [r3, #8]
 800484a:	193b      	adds	r3, r7, r4
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f005 fc5f 	bl	800a110 <USB_ReadPMA>
 8004852:	e07b      	b.n	800494c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2250      	movs	r2, #80	; 0x50
 800485a:	5a9b      	ldrh	r3, [r3, r2]
 800485c:	b29b      	uxth	r3, r3
 800485e:	001a      	movs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	18d2      	adds	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	4a40      	ldr	r2, [pc, #256]	; (8004970 <HAL_PCD_EP_DB_Receive+0x234>)
 8004870:	4694      	mov	ip, r2
 8004872:	4463      	add	r3, ip
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	211a      	movs	r1, #26
 8004878:	187b      	adds	r3, r7, r1
 800487a:	0592      	lsls	r2, r2, #22
 800487c:	0d92      	lsrs	r2, r2, #22
 800487e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	187b      	adds	r3, r7, r1
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d307      	bcc.n	800489c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	187b      	adds	r3, r7, r1
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	1ad2      	subs	r2, r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	619a      	str	r2, [r3, #24]
 800489a:	e002      	b.n	80048a2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d121      	bne.n	80048ee <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	001a      	movs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	201e      	movs	r0, #30
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	4927      	ldr	r1, [pc, #156]	; (8004960 <HAL_PCD_EP_DB_Receive+0x224>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	183a      	adds	r2, r7, r0
 80048ca:	8812      	ldrh	r2, [r2, #0]
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	0189      	lsls	r1, r1, #6
 80048d0:	404a      	eors	r2, r1
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	001a      	movs	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	183a      	adds	r2, r7, r0
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	491f      	ldr	r1, [pc, #124]	; (8004964 <HAL_PCD_EP_DB_Receive+0x228>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	b292      	uxth	r2, r2
 80048ec:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80048ee:	1dbb      	adds	r3, r7, #6
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	4013      	ands	r3, r2
 80048f6:	d11a      	bne.n	800492e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	001a      	movs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	201c      	movs	r0, #28
 800490c:	183b      	adds	r3, r7, r0
 800490e:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004910:	400a      	ands	r2, r1
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	001a      	movs	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	18d3      	adds	r3, r2, r3
 8004922:	183a      	adds	r2, r7, r0
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	4911      	ldr	r1, [pc, #68]	; (800496c <HAL_PCD_EP_DB_Receive+0x230>)
 8004928:	430a      	orrs	r2, r1
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800492e:	241a      	movs	r4, #26
 8004930:	193b      	adds	r3, r7, r4
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6959      	ldr	r1, [r3, #20]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	895a      	ldrh	r2, [r3, #10]
 8004944:	193b      	adds	r3, r7, r4
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	f005 fbe2 	bl	800a110 <USB_ReadPMA>
    }
  }

  return count;
 800494c:	231a      	movs	r3, #26
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	881b      	ldrh	r3, [r3, #0]
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b009      	add	sp, #36	; 0x24
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	00000402 	.word	0x00000402
 8004960:	ffffbf8f 	.word	0xffffbf8f
 8004964:	ffff8080 	.word	0xffff8080
 8004968:	ffff8f8f 	.word	0xffff8f8f
 800496c:	ffff80c0 	.word	0xffff80c0
 8004970:	00000406 	.word	0x00000406

08004974 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b0a2      	sub	sp, #136	; 0x88
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	1dbb      	adds	r3, r7, #6
 8004980:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004982:	1dbb      	adds	r3, r7, #6
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	4013      	ands	r3, r2
 800498a:	d100      	bne.n	800498e <HAL_PCD_EP_DB_Transmit+0x1a>
 800498c:	e1c8      	b.n	8004d20 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2250      	movs	r2, #80	; 0x50
 8004994:	5a9b      	ldrh	r3, [r3, r2]
 8004996:	b29b      	uxth	r3, r3
 8004998:	001a      	movs	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	18d2      	adds	r2, r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	18d3      	adds	r3, r2, r3
 80049a8:	4ad7      	ldr	r2, [pc, #860]	; (8004d08 <HAL_PCD_EP_DB_Transmit+0x394>)
 80049aa:	4694      	mov	ip, r2
 80049ac:	4463      	add	r3, ip
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	214e      	movs	r1, #78	; 0x4e
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	0592      	lsls	r2, r2, #22
 80049b6:	0d92      	lsrs	r2, r2, #22
 80049b8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d907      	bls.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	187b      	adds	r3, r7, r1
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	619a      	str	r2, [r3, #24]
 80049d4:	e002      	b.n	80049dc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d000      	beq.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x72>
 80049e4:	e0b5      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d125      	bne.n	8004a3a <HAL_PCD_EP_DB_Transmit+0xc6>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2250      	movs	r2, #80	; 0x50
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	00da      	lsls	r2, r3, #3
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	18d3      	adds	r3, r2, r3
 8004a10:	4abd      	ldr	r2, [pc, #756]	; (8004d08 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004a12:	4694      	mov	ip, r2
 8004a14:	4463      	add	r3, ip
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4abb      	ldr	r2, [pc, #748]	; (8004d0c <HAL_PCD_EP_DB_Transmit+0x398>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4ab8      	ldr	r2, [pc, #736]	; (8004d10 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e01b      	b.n	8004a72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d117      	bne.n	8004a72 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2250      	movs	r2, #80	; 0x50
 8004a4e:	5a9b      	ldrh	r3, [r3, r2]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	001a      	movs	r2, r3
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	633b      	str	r3, [r7, #48]	; 0x30
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	00da      	lsls	r2, r3, #3
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	18d3      	adds	r3, r2, r3
 8004a64:	4aa8      	ldr	r2, [pc, #672]	; (8004d08 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004a66:	4694      	mov	ip, r2
 8004a68:	4463      	add	r3, ip
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	2200      	movs	r2, #0
 8004a70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d125      	bne.n	8004acc <HAL_PCD_EP_DB_Transmit+0x158>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2250      	movs	r2, #80	; 0x50
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	001a      	movs	r2, r3
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	00da      	lsls	r2, r3, #3
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	18d3      	adds	r3, r2, r3
 8004aa2:	4a9c      	ldr	r2, [pc, #624]	; (8004d14 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004aa4:	4694      	mov	ip, r2
 8004aa6:	4463      	add	r3, ip
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4a96      	ldr	r2, [pc, #600]	; (8004d0c <HAL_PCD_EP_DB_Transmit+0x398>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4a93      	ldr	r2, [pc, #588]	; (8004d10 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e018      	b.n	8004afe <HAL_PCD_EP_DB_Transmit+0x18a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d114      	bne.n	8004afe <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2250      	movs	r2, #80	; 0x50
 8004ada:	5a9b      	ldrh	r3, [r3, r2]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	001a      	movs	r2, r3
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	4a88      	ldr	r2, [pc, #544]	; (8004d14 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004af2:	4694      	mov	ip, r2
 8004af4:	4463      	add	r3, ip
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2200      	movs	r2, #0
 8004afc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781a      	ldrb	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0011      	movs	r1, r2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f007 fb06 	bl	800c118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b0c:	1dbb      	adds	r3, r7, #6
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	4013      	ands	r3, r2
 8004b16:	d100      	bne.n	8004b1a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004b18:	e2d4      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	001a      	movs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	2012      	movs	r0, #18
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	4979      	ldr	r1, [pc, #484]	; (8004d18 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	18d3      	adds	r3, r2, r3
 8004b44:	183a      	adds	r2, r7, r0
 8004b46:	8812      	ldrh	r2, [r2, #0]
 8004b48:	4974      	ldr	r1, [pc, #464]	; (8004d1c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	e2b8      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	01db      	lsls	r3, r3, #7
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d01a      	beq.n	8004b94 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	001a      	movs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	2044      	movs	r0, #68	; 0x44
 8004b72:	183b      	adds	r3, r7, r0
 8004b74:	4968      	ldr	r1, [pc, #416]	; (8004d18 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	001a      	movs	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18d3      	adds	r3, r2, r3
 8004b88:	183a      	adds	r2, r7, r0
 8004b8a:	8812      	ldrh	r2, [r2, #0]
 8004b8c:	4963      	ldr	r1, [pc, #396]	; (8004d1c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	b292      	uxth	r2, r2
 8004b92:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	5c9b      	ldrb	r3, [r3, r2]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d000      	beq.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004b9e:	e291      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	214e      	movs	r1, #78	; 0x4e
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	18d2      	adds	r2, r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d309      	bcc.n	8004bde <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	621a      	str	r2, [r3, #32]
 8004bdc:	e016      	b.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004be6:	234e      	movs	r3, #78	; 0x4e
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2224      	movs	r2, #36	; 0x24
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	e009      	b.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2224      	movs	r2, #36	; 0x24
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d150      	bne.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x342>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2250      	movs	r2, #80	; 0x50
 8004c20:	5a9b      	ldrh	r3, [r3, r2]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	001a      	movs	r2, r3
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	00da      	lsls	r2, r3, #3
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	4a34      	ldr	r2, [pc, #208]	; (8004d08 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004c38:	4694      	mov	ip, r2
 8004c3a:	4463      	add	r3, ip
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d110      	bne.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <HAL_PCD_EP_DB_Transmit+0x398>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	e044      	b.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c68:	2b3e      	cmp	r3, #62	; 0x3e
 8004c6a:	d810      	bhi.n	8004c8e <HAL_PCD_EP_DB_Transmit+0x31a>
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c74:	2201      	movs	r2, #1
 8004c76:	4013      	ands	r3, r2
 8004c78:	d002      	beq.n	8004c80 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	029b      	lsls	r3, r3, #10
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e030      	b.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c96:	221f      	movs	r2, #31
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	029b      	lsls	r3, r3, #10
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	e01c      	b.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d118      	bne.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2250      	movs	r2, #80	; 0x50
 8004cca:	5a9b      	ldrh	r3, [r3, r2]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	001a      	movs	r2, r3
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	00da      	lsls	r2, r3, #3
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cde:	18d3      	adds	r3, r2, r3
 8004ce0:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004ce2:	4694      	mov	ip, r2
 8004ce4:	4463      	add	r3, ip
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6959      	ldr	r1, [r3, #20]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	891a      	ldrh	r2, [r3, #8]
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f005 f9c2 	bl	800a088 <USB_WritePMA>
 8004d04:	e1de      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	00000402 	.word	0x00000402
 8004d0c:	ffff83ff 	.word	0xffff83ff
 8004d10:	ffff8000 	.word	0xffff8000
 8004d14:	00000406 	.word	0x00000406
 8004d18:	ffff8f8f 	.word	0xffff8f8f
 8004d1c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2250      	movs	r2, #80	; 0x50
 8004d26:	5a9b      	ldrh	r3, [r3, r2]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	18d2      	adds	r2, r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	18d3      	adds	r3, r2, r3
 8004d3a:	4aca      	ldr	r2, [pc, #808]	; (8005064 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004d3c:	4694      	mov	ip, r2
 8004d3e:	4463      	add	r3, ip
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	214e      	movs	r1, #78	; 0x4e
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	0592      	lsls	r2, r2, #22
 8004d48:	0d92      	lsrs	r2, r2, #22
 8004d4a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d307      	bcc.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	1ad2      	subs	r2, r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	619a      	str	r2, [r3, #24]
 8004d66:	e002      	b.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d000      	beq.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x404>
 8004d76:	e0c0      	b.n	8004efa <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d125      	bne.n	8004dcc <HAL_PCD_EP_DB_Transmit+0x458>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2250      	movs	r2, #80	; 0x50
 8004d8c:	5a9b      	ldrh	r3, [r3, r2]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	001a      	movs	r2, r3
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00da      	lsls	r2, r3, #3
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	18d3      	adds	r3, r2, r3
 8004da2:	4ab1      	ldr	r2, [pc, #708]	; (8005068 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004da4:	4694      	mov	ip, r2
 8004da6:	4463      	add	r3, ip
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4aae      	ldr	r2, [pc, #696]	; (800506c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4aab      	ldr	r2, [pc, #684]	; (8005070 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e01b      	b.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x490>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d117      	bne.n	8004e04 <HAL_PCD_EP_DB_Transmit+0x490>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	677b      	str	r3, [r7, #116]	; 0x74
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2250      	movs	r2, #80	; 0x50
 8004de0:	5a9b      	ldrh	r3, [r3, r2]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	001a      	movs	r2, r3
 8004de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de8:	189b      	adds	r3, r3, r2
 8004dea:	677b      	str	r3, [r7, #116]	; 0x74
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	00da      	lsls	r2, r3, #3
 8004df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	4a9c      	ldr	r2, [pc, #624]	; (8005068 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004df8:	4694      	mov	ip, r2
 8004dfa:	4463      	add	r3, ip
 8004dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e00:	2200      	movs	r2, #0
 8004e02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d130      	bne.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x500>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	187a      	adds	r2, r7, r1
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2250      	movs	r2, #80	; 0x50
 8004e22:	5a9b      	ldrh	r3, [r3, r2]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	001a      	movs	r2, r3
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	189b      	adds	r3, r3, r2
 8004e2e:	187a      	adds	r2, r7, r1
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	00da      	lsls	r2, r3, #3
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	18d3      	adds	r3, r2, r3
 8004e3e:	4a89      	ldr	r2, [pc, #548]	; (8005064 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e40:	4694      	mov	ip, r2
 8004e42:	4463      	add	r3, ip
 8004e44:	2184      	movs	r1, #132	; 0x84
 8004e46:	187a      	adds	r2, r7, r1
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4a86      	ldr	r2, [pc, #536]	; (800506c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	4a82      	ldr	r2, [pc, #520]	; (8005070 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e018      	b.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d114      	bne.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2250      	movs	r2, #80	; 0x50
 8004e82:	5a9b      	ldrh	r3, [r3, r2]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	001a      	movs	r2, r3
 8004e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	00da      	lsls	r2, r3, #3
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	4a72      	ldr	r2, [pc, #456]	; (8005064 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e9a:	4694      	mov	ip, r2
 8004e9c:	4463      	add	r3, ip
 8004e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f007 f932 	bl	800c118 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004eb4:	1dbb      	adds	r3, r7, #6
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d000      	beq.n	8004ec2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ec0:	e100      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	2046      	movs	r0, #70	; 0x46
 8004ed6:	183b      	adds	r3, r7, r0
 8004ed8:	4966      	ldr	r1, [pc, #408]	; (8005074 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	18d3      	adds	r3, r2, r3
 8004eec:	183a      	adds	r2, r7, r0
 8004eee:	8812      	ldrh	r2, [r2, #0]
 8004ef0:	4961      	ldr	r1, [pc, #388]	; (8005078 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e0e4      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004efa:	1dbb      	adds	r3, r7, #6
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	01db      	lsls	r3, r3, #7
 8004f02:	4013      	ands	r3, r2
 8004f04:	d11a      	bne.n	8004f3c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	204c      	movs	r0, #76	; 0x4c
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	4955      	ldr	r1, [pc, #340]	; (8005074 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	001a      	movs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	18d3      	adds	r3, r2, r3
 8004f30:	183a      	adds	r2, r7, r0
 8004f32:	8812      	ldrh	r2, [r2, #0]
 8004f34:	4950      	ldr	r1, [pc, #320]	; (8005078 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004f36:	430a      	orrs	r2, r1
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	5c9b      	ldrb	r3, [r3, r2]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d000      	beq.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004f46:	e0bd      	b.n	80050c4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	214e      	movs	r1, #78	; 0x4e
 8004f4e:	187b      	adds	r3, r7, r1
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	18d2      	adds	r2, r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	18d2      	adds	r2, r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d309      	bcc.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	621a      	str	r2, [r3, #32]
 8004f84:	e016      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004f8e:	234e      	movs	r3, #78	; 0x4e
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2224      	movs	r2, #36	; 0x24
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	5499      	strb	r1, [r3, r2]
 8004f9e:	e009      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2224      	movs	r2, #36	; 0x24
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d15c      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0x708>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2250      	movs	r2, #80	; 0x50
 8004fce:	5a9b      	ldrh	r3, [r3, r2]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe2:	18d3      	adds	r3, r2, r3
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004fe6:	4694      	mov	ip, r2
 8004fe8:	4463      	add	r3, ip
 8004fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d110      	bne.n	8005014 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	e04d      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005016:	2b3e      	cmp	r3, #62	; 0x3e
 8005018:	d810      	bhi.n	800503c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800501a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
 8005020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	d002      	beq.n	800502e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502a:	3301      	adds	r3, #1
 800502c:	657b      	str	r3, [r7, #84]	; 0x54
 800502e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005030:	b29b      	uxth	r3, r3
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	b29a      	uxth	r2, r3
 8005036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e039      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x73c>
 800503c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	657b      	str	r3, [r7, #84]	; 0x54
 8005042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005044:	221f      	movs	r2, #31
 8005046:	4013      	ands	r3, r2
 8005048:	d102      	bne.n	8005050 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800504a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800504c:	3b01      	subs	r3, #1
 800504e:	657b      	str	r3, [r7, #84]	; 0x54
 8005050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005052:	b29b      	uxth	r3, r3
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	b29b      	uxth	r3, r3
 8005058:	4a05      	ldr	r2, [pc, #20]	; (8005070 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	b29a      	uxth	r2, r3
 800505e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e025      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005064:	00000406 	.word	0x00000406
 8005068:	00000402 	.word	0x00000402
 800506c:	ffff83ff 	.word	0xffff83ff
 8005070:	ffff8000 	.word	0xffff8000
 8005074:	ffff8f8f 	.word	0xffff8f8f
 8005078:	ffffc080 	.word	0xffffc080
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d115      	bne.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2250      	movs	r2, #80	; 0x50
 800508a:	5a9b      	ldrh	r3, [r3, r2]
 800508c:	b29b      	uxth	r3, r3
 800508e:	001a      	movs	r2, r3
 8005090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005092:	189b      	adds	r3, r3, r2
 8005094:	667b      	str	r3, [r7, #100]	; 0x64
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	00da      	lsls	r2, r3, #3
 800509c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800509e:	18d3      	adds	r3, r2, r3
 80050a0:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80050a2:	4694      	mov	ip, r2
 80050a4:	4463      	add	r3, ip
 80050a6:	663b      	str	r3, [r7, #96]	; 0x60
 80050a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6959      	ldr	r1, [r3, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	895a      	ldrh	r2, [r3, #10]
 80050bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f004 ffe2 	bl	800a088 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	001a      	movs	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	2010      	movs	r0, #16
 80050d8:	183b      	adds	r3, r7, r0
 80050da:	4911      	ldr	r1, [pc, #68]	; (8005120 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80050dc:	400a      	ands	r2, r1
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	183b      	adds	r3, r7, r0
 80050e2:	183a      	adds	r2, r7, r0
 80050e4:	8812      	ldrh	r2, [r2, #0]
 80050e6:	2110      	movs	r1, #16
 80050e8:	404a      	eors	r2, r1
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	183a      	adds	r2, r7, r0
 80050f0:	8812      	ldrh	r2, [r2, #0]
 80050f2:	2120      	movs	r1, #32
 80050f4:	404a      	eors	r2, r1
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	001a      	movs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	18d3      	adds	r3, r2, r3
 8005106:	183a      	adds	r2, r7, r0
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	4906      	ldr	r1, [pc, #24]	; (8005124 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 800510c:	430a      	orrs	r2, r1
 800510e:	b292      	uxth	r2, r2
 8005110:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b022      	add	sp, #136	; 0x88
 800511a:	bd80      	pop	{r7, pc}
 800511c:	00000406 	.word	0x00000406
 8005120:	ffff8fbf 	.word	0xffff8fbf
 8005124:	ffff8080 	.word	0xffff8080

08005128 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	0008      	movs	r0, r1
 8005132:	0011      	movs	r1, r2
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	240a      	movs	r4, #10
 8005138:	193b      	adds	r3, r7, r4
 800513a:	1c02      	adds	r2, r0, #0
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	2308      	movs	r3, #8
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	1c0a      	adds	r2, r1, #0
 8005144:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005146:	0021      	movs	r1, r4
 8005148:	187b      	adds	r3, r7, r1
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	4013      	ands	r3, r2
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005156:	187b      	adds	r3, r7, r1
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	2207      	movs	r2, #7
 800515c:	4013      	ands	r3, r2
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	0013      	movs	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	189b      	adds	r3, r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	18d3      	adds	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	e00b      	b.n	8005188 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005170:	230a      	movs	r3, #10
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	0013      	movs	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	189b      	adds	r3, r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	3369      	adds	r3, #105	; 0x69
 8005180:	33ff      	adds	r3, #255	; 0xff
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005188:	2308      	movs	r3, #8
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2200      	movs	r2, #0
 8005196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	b29a      	uxth	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	80da      	strh	r2, [r3, #6]
 80051a0:	e00b      	b.n	80051ba <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2201      	movs	r2, #1
 80051a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b007      	add	sp, #28
 80051c2:	bd90      	pop	{r4, r7, pc}

080051c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	23ba      	movs	r3, #186	; 0xba
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	2101      	movs	r1, #1
 80051da:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	23b8      	movs	r3, #184	; 0xb8
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	2100      	movs	r1, #0
 80051e4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2254      	movs	r2, #84	; 0x54
 80051ea:	5a9b      	ldrh	r3, [r3, r2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2201      	movs	r2, #1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	b299      	uxth	r1, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2254      	movs	r2, #84	; 0x54
 80051f8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2254      	movs	r2, #84	; 0x54
 80051fe:	5a9b      	ldrh	r3, [r3, r2]
 8005200:	b29b      	uxth	r3, r3
 8005202:	2202      	movs	r2, #2
 8005204:	4313      	orrs	r3, r2
 8005206:	b299      	uxth	r1, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2254      	movs	r2, #84	; 0x54
 800520c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	000a      	movs	r2, r1
 8005222:	1cfb      	adds	r3, r7, #3
 8005224:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b002      	add	sp, #8
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f000 fb76 	bl	8005930 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2201      	movs	r2, #1
 800524a:	4013      	ands	r3, r2
 800524c:	d100      	bne.n	8005250 <HAL_RCC_OscConfig+0x20>
 800524e:	e08e      	b.n	800536e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005250:	4bc5      	ldr	r3, [pc, #788]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	220c      	movs	r2, #12
 8005256:	4013      	ands	r3, r2
 8005258:	2b04      	cmp	r3, #4
 800525a:	d00e      	beq.n	800527a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800525c:	4bc2      	ldr	r3, [pc, #776]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	220c      	movs	r2, #12
 8005262:	4013      	ands	r3, r2
 8005264:	2b08      	cmp	r3, #8
 8005266:	d117      	bne.n	8005298 <HAL_RCC_OscConfig+0x68>
 8005268:	4bbf      	ldr	r3, [pc, #764]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	23c0      	movs	r3, #192	; 0xc0
 800526e:	025b      	lsls	r3, r3, #9
 8005270:	401a      	ands	r2, r3
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	025b      	lsls	r3, r3, #9
 8005276:	429a      	cmp	r2, r3
 8005278:	d10e      	bne.n	8005298 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527a:	4bbb      	ldr	r3, [pc, #748]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	4013      	ands	r3, r2
 8005284:	d100      	bne.n	8005288 <HAL_RCC_OscConfig+0x58>
 8005286:	e071      	b.n	800536c <HAL_RCC_OscConfig+0x13c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d000      	beq.n	8005292 <HAL_RCC_OscConfig+0x62>
 8005290:	e06c      	b.n	800536c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f000 fb4c 	bl	8005930 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_OscConfig+0x80>
 80052a0:	4bb1      	ldr	r3, [pc, #708]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4bb0      	ldr	r3, [pc, #704]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0249      	lsls	r1, r1, #9
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e02f      	b.n	8005310 <HAL_RCC_OscConfig+0xe0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCC_OscConfig+0xa2>
 80052b8:	4bab      	ldr	r3, [pc, #684]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4baa      	ldr	r3, [pc, #680]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052be:	49ab      	ldr	r1, [pc, #684]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4ba8      	ldr	r3, [pc, #672]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4ba7      	ldr	r3, [pc, #668]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052ca:	49a9      	ldr	r1, [pc, #676]	; (8005570 <HAL_RCC_OscConfig+0x340>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e01e      	b.n	8005310 <HAL_RCC_OscConfig+0xe0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d10e      	bne.n	80052f8 <HAL_RCC_OscConfig+0xc8>
 80052da:	4ba3      	ldr	r3, [pc, #652]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4ba2      	ldr	r3, [pc, #648]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	02c9      	lsls	r1, r1, #11
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	4b9f      	ldr	r3, [pc, #636]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b9e      	ldr	r3, [pc, #632]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	0249      	lsls	r1, r1, #9
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0xe0>
 80052f8:	4b9b      	ldr	r3, [pc, #620]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b9a      	ldr	r3, [pc, #616]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80052fe:	499b      	ldr	r1, [pc, #620]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005300:	400a      	ands	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	4b98      	ldr	r3, [pc, #608]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b97      	ldr	r3, [pc, #604]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800530a:	4999      	ldr	r1, [pc, #612]	; (8005570 <HAL_RCC_OscConfig+0x340>)
 800530c:	400a      	ands	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d014      	beq.n	8005342 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fd f824 	bl	8002364 <HAL_GetTick>
 800531c:	0003      	movs	r3, r0
 800531e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005322:	f7fd f81f 	bl	8002364 <HAL_GetTick>
 8005326:	0002      	movs	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e2fd      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005334:	4b8c      	ldr	r3, [pc, #560]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	4013      	ands	r3, r2
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0xf2>
 8005340:	e015      	b.n	800536e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fd f80f 	bl	8002364 <HAL_GetTick>
 8005346:	0003      	movs	r3, r0
 8005348:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fd f80a 	bl	8002364 <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e2e8      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	4b82      	ldr	r3, [pc, #520]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	029b      	lsls	r3, r3, #10
 8005366:	4013      	ands	r3, r2
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x11c>
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d100      	bne.n	800537a <HAL_RCC_OscConfig+0x14a>
 8005378:	e06c      	b.n	8005454 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800537a:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	220c      	movs	r2, #12
 8005380:	4013      	ands	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	220c      	movs	r2, #12
 800538a:	4013      	ands	r3, r2
 800538c:	2b08      	cmp	r3, #8
 800538e:	d11f      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1a0>
 8005390:	4b75      	ldr	r3, [pc, #468]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	23c0      	movs	r3, #192	; 0xc0
 8005396:	025b      	lsls	r3, r3, #9
 8005398:	401a      	ands	r2, r3
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	429a      	cmp	r2, r3
 80053a0:	d116      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	4b71      	ldr	r3, [pc, #452]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_OscConfig+0x188>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e2bb      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b8:	4b6b      	ldr	r3, [pc, #428]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	22f8      	movs	r2, #248	; 0xf8
 80053be:	4393      	bics	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00da      	lsls	r2, r3, #3
 80053c8:	4b67      	ldr	r3, [pc, #412]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80053ca:	430a      	orrs	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	e041      	b.n	8005454 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d024      	beq.n	8005422 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d8:	4b63      	ldr	r3, [pc, #396]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b62      	ldr	r3, [pc, #392]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80053de:	2101      	movs	r1, #1
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fc ffbe 	bl	8002364 <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fc ffb9 	bl	8002364 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e297      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b59      	ldr	r3, [pc, #356]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2202      	movs	r2, #2
 8005406:	4013      	ands	r3, r2
 8005408:	d0f1      	beq.n	80053ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b57      	ldr	r3, [pc, #348]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	22f8      	movs	r2, #248	; 0xf8
 8005410:	4393      	bics	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00da      	lsls	r2, r3, #3
 800541a:	4b53      	ldr	r3, [pc, #332]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e018      	b.n	8005454 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b50      	ldr	r3, [pc, #320]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005428:	2101      	movs	r1, #1
 800542a:	438a      	bics	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fc ff99 	bl	8002364 <HAL_GetTick>
 8005432:	0003      	movs	r3, r0
 8005434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fc ff94 	bl	8002364 <HAL_GetTick>
 800543c:	0002      	movs	r2, r0
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e272      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2202      	movs	r2, #2
 8005450:	4013      	ands	r3, r2
 8005452:	d1f1      	bne.n	8005438 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2208      	movs	r2, #8
 800545a:	4013      	ands	r3, r2
 800545c:	d036      	beq.n	80054cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d019      	beq.n	800549a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b40      	ldr	r3, [pc, #256]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546a:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800546c:	2101      	movs	r1, #1
 800546e:	430a      	orrs	r2, r1
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005472:	f7fc ff77 	bl	8002364 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547c:	f7fc ff72 	bl	8002364 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e250      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	4b36      	ldr	r3, [pc, #216]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	d0f1      	beq.n	800547c <HAL_RCC_OscConfig+0x24c>
 8005498:	e018      	b.n	80054cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800549a:	4b33      	ldr	r3, [pc, #204]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800549c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054a0:	2101      	movs	r1, #1
 80054a2:	438a      	bics	r2, r1
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a6:	f7fc ff5d 	bl	8002364 <HAL_GetTick>
 80054aa:	0003      	movs	r3, r0
 80054ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fc ff58 	bl	8002364 <HAL_GetTick>
 80054b4:	0002      	movs	r2, r0
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e236      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2202      	movs	r2, #2
 80054c8:	4013      	ands	r3, r2
 80054ca:	d1f1      	bne.n	80054b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2204      	movs	r2, #4
 80054d2:	4013      	ands	r3, r2
 80054d4:	d100      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2a8>
 80054d6:	e0b5      	b.n	8005644 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d8:	201f      	movs	r0, #31
 80054da:	183b      	adds	r3, r7, r0
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	055b      	lsls	r3, r3, #21
 80054e8:	4013      	ands	r3, r2
 80054ea:	d110      	bne.n	800550e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	0549      	lsls	r1, r1, #21
 80054f6:	430a      	orrs	r2, r1
 80054f8:	61da      	str	r2, [r3, #28]
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	055b      	lsls	r3, r3, #21
 8005502:	4013      	ands	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005508:	183b      	adds	r3, r7, r0
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_RCC_OscConfig+0x344>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4013      	ands	r3, r2
 8005518:	d11a      	bne.n	8005550 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_RCC_OscConfig+0x344>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <HAL_RCC_OscConfig+0x344>)
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	0049      	lsls	r1, r1, #1
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005528:	f7fc ff1c 	bl	8002364 <HAL_GetTick>
 800552c:	0003      	movs	r3, r0
 800552e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fc ff17 	bl	8002364 <HAL_GetTick>
 8005536:	0002      	movs	r2, r0
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	; 0x64
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e1f5      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_RCC_OscConfig+0x344>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4013      	ands	r3, r2
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10f      	bne.n	8005578 <HAL_RCC_OscConfig+0x348>
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <HAL_RCC_OscConfig+0x338>)
 800555e:	2101      	movs	r1, #1
 8005560:	430a      	orrs	r2, r1
 8005562:	621a      	str	r2, [r3, #32]
 8005564:	e036      	b.n	80055d4 <HAL_RCC_OscConfig+0x3a4>
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	40021000 	.word	0x40021000
 800556c:	fffeffff 	.word	0xfffeffff
 8005570:	fffbffff 	.word	0xfffbffff
 8005574:	40007000 	.word	0x40007000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <HAL_RCC_OscConfig+0x36a>
 8005580:	4bca      	ldr	r3, [pc, #808]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	4bc9      	ldr	r3, [pc, #804]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005586:	2101      	movs	r1, #1
 8005588:	438a      	bics	r2, r1
 800558a:	621a      	str	r2, [r3, #32]
 800558c:	4bc7      	ldr	r3, [pc, #796]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	4bc6      	ldr	r3, [pc, #792]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005592:	2104      	movs	r1, #4
 8005594:	438a      	bics	r2, r1
 8005596:	621a      	str	r2, [r3, #32]
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x3a4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x38c>
 80055a2:	4bc2      	ldr	r3, [pc, #776]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	4bc1      	ldr	r3, [pc, #772]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055a8:	2104      	movs	r1, #4
 80055aa:	430a      	orrs	r2, r1
 80055ac:	621a      	str	r2, [r3, #32]
 80055ae:	4bbf      	ldr	r3, [pc, #764]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	4bbe      	ldr	r3, [pc, #760]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055b4:	2101      	movs	r1, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	621a      	str	r2, [r3, #32]
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0x3a4>
 80055bc:	4bbb      	ldr	r3, [pc, #748]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	4bba      	ldr	r3, [pc, #744]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055c2:	2101      	movs	r1, #1
 80055c4:	438a      	bics	r2, r1
 80055c6:	621a      	str	r2, [r3, #32]
 80055c8:	4bb8      	ldr	r3, [pc, #736]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	4bb7      	ldr	r3, [pc, #732]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055ce:	2104      	movs	r1, #4
 80055d0:	438a      	bics	r2, r1
 80055d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d014      	beq.n	8005606 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055dc:	f7fc fec2 	bl	8002364 <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e4:	e009      	b.n	80055fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fc febd 	bl	8002364 <HAL_GetTick>
 80055ea:	0002      	movs	r2, r0
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	4aaf      	ldr	r2, [pc, #700]	; (80058b0 <HAL_RCC_OscConfig+0x680>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e19a      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	4bac      	ldr	r3, [pc, #688]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	2202      	movs	r2, #2
 8005600:	4013      	ands	r3, r2
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x3b6>
 8005604:	e013      	b.n	800562e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005606:	f7fc fead 	bl	8002364 <HAL_GetTick>
 800560a:	0003      	movs	r3, r0
 800560c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	e009      	b.n	8005624 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fc fea8 	bl	8002364 <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	4aa5      	ldr	r2, [pc, #660]	; (80058b0 <HAL_RCC_OscConfig+0x680>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e185      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005624:	4ba1      	ldr	r3, [pc, #644]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	2202      	movs	r2, #2
 800562a:	4013      	ands	r3, r2
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800562e:	231f      	movs	r3, #31
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	4b9b      	ldr	r3, [pc, #620]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800563e:	499d      	ldr	r1, [pc, #628]	; (80058b4 <HAL_RCC_OscConfig+0x684>)
 8005640:	400a      	ands	r2, r1
 8005642:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2210      	movs	r2, #16
 800564a:	4013      	ands	r3, r2
 800564c:	d063      	beq.n	8005716 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d12a      	bne.n	80056ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005656:	4b95      	ldr	r3, [pc, #596]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565a:	4b94      	ldr	r3, [pc, #592]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800565c:	2104      	movs	r1, #4
 800565e:	430a      	orrs	r2, r1
 8005660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005662:	4b92      	ldr	r3, [pc, #584]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005666:	4b91      	ldr	r3, [pc, #580]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005668:	2101      	movs	r1, #1
 800566a:	430a      	orrs	r2, r1
 800566c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566e:	f7fc fe79 	bl	8002364 <HAL_GetTick>
 8005672:	0003      	movs	r3, r0
 8005674:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005678:	f7fc fe74 	bl	8002364 <HAL_GetTick>
 800567c:	0002      	movs	r2, r0
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e152      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	2202      	movs	r2, #2
 8005690:	4013      	ands	r3, r2
 8005692:	d0f1      	beq.n	8005678 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005694:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	22f8      	movs	r2, #248	; 0xf8
 800569a:	4393      	bics	r3, r2
 800569c:	0019      	movs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	00da      	lsls	r2, r3, #3
 80056a4:	4b81      	ldr	r3, [pc, #516]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056a6:	430a      	orrs	r2, r1
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
 80056aa:	e034      	b.n	8005716 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	3305      	adds	r3, #5
 80056b2:	d111      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80056b4:	4b7d      	ldr	r3, [pc, #500]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b8:	4b7c      	ldr	r3, [pc, #496]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056ba:	2104      	movs	r1, #4
 80056bc:	438a      	bics	r2, r1
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80056c0:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	22f8      	movs	r2, #248	; 0xf8
 80056c6:	4393      	bics	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	00da      	lsls	r2, r3, #3
 80056d0:	4b76      	ldr	r3, [pc, #472]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056d2:	430a      	orrs	r2, r1
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34
 80056d6:	e01e      	b.n	8005716 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056d8:	4b74      	ldr	r3, [pc, #464]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056dc:	4b73      	ldr	r3, [pc, #460]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056de:	2104      	movs	r1, #4
 80056e0:	430a      	orrs	r2, r1
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80056e4:	4b71      	ldr	r3, [pc, #452]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e8:	4b70      	ldr	r3, [pc, #448]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fc fe38 	bl	8002364 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056fa:	f7fc fe33 	bl	8002364 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e111      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800570c:	4b67      	ldr	r3, [pc, #412]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	2202      	movs	r2, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d1f1      	bne.n	80056fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2220      	movs	r2, #32
 800571c:	4013      	ands	r3, r2
 800571e:	d05c      	beq.n	80057da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005720:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	220c      	movs	r2, #12
 8005726:	4013      	ands	r3, r2
 8005728:	2b0c      	cmp	r3, #12
 800572a:	d00e      	beq.n	800574a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800572c:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	220c      	movs	r2, #12
 8005732:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005734:	2b08      	cmp	r3, #8
 8005736:	d114      	bne.n	8005762 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005738:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	23c0      	movs	r3, #192	; 0xc0
 800573e:	025b      	lsls	r3, r3, #9
 8005740:	401a      	ands	r2, r3
 8005742:	23c0      	movs	r3, #192	; 0xc0
 8005744:	025b      	lsls	r3, r3, #9
 8005746:	429a      	cmp	r2, r3
 8005748:	d10b      	bne.n	8005762 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800574a:	4b58      	ldr	r3, [pc, #352]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800574c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	025b      	lsls	r3, r3, #9
 8005752:	4013      	ands	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_RCC_OscConfig+0x5a8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d03c      	beq.n	80057d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0e6      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800576a:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	4b4f      	ldr	r3, [pc, #316]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	0249      	lsls	r1, r1, #9
 8005774:	430a      	orrs	r2, r1
 8005776:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fc fdf4 	bl	8002364 <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005782:	f7fc fdef 	bl	8002364 <HAL_GetTick>
 8005786:	0002      	movs	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e0cd      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	025b      	lsls	r3, r3, #9
 800579c:	4013      	ands	r3, r2
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x552>
 80057a0:	e01b      	b.n	80057da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80057a2:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80057a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80057a8:	4943      	ldr	r1, [pc, #268]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ae:	f7fc fdd9 	bl	8002364 <HAL_GetTick>
 80057b2:	0003      	movs	r3, r0
 80057b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b8:	f7fc fdd4 	bl	8002364 <HAL_GetTick>
 80057bc:	0002      	movs	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0b2      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80057cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	025b      	lsls	r3, r3, #9
 80057d2:	4013      	ands	r3, r2
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x588>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80057d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d100      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5b4>
 80057e2:	e0a4      	b.n	800592e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	220c      	movs	r2, #12
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d100      	bne.n	80057f2 <HAL_RCC_OscConfig+0x5c2>
 80057f0:	e078      	b.n	80058e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d14c      	bne.n	8005894 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b2c      	ldr	r3, [pc, #176]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005800:	492e      	ldr	r1, [pc, #184]	; (80058bc <HAL_RCC_OscConfig+0x68c>)
 8005802:	400a      	ands	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005806:	f7fc fdad 	bl	8002364 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fc fda8 	bl	8002364 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e086      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	049b      	lsls	r3, r3, #18
 800582a:	4013      	ands	r3, r2
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582e:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	220f      	movs	r2, #15
 8005834:	4393      	bics	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800583e:	430a      	orrs	r2, r1
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_RCC_OscConfig+0x690>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	431a      	orrs	r2, r3
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	0449      	lsls	r1, r1, #17
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586a:	f7fc fd7b 	bl	8002364 <HAL_GetTick>
 800586e:	0003      	movs	r3, r0
 8005870:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005874:	f7fc fd76 	bl	8002364 <HAL_GetTick>
 8005878:	0002      	movs	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e054      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	049b      	lsls	r3, r3, #18
 800588e:	4013      	ands	r3, r2
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x644>
 8005892:	e04c      	b.n	800592e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_RCC_OscConfig+0x67c>)
 800589a:	4908      	ldr	r1, [pc, #32]	; (80058bc <HAL_RCC_OscConfig+0x68c>)
 800589c:	400a      	ands	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fc fd60 	bl	8002364 <HAL_GetTick>
 80058a4:	0003      	movs	r3, r0
 80058a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a8:	e015      	b.n	80058d6 <HAL_RCC_OscConfig+0x6a6>
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	40021000 	.word	0x40021000
 80058b0:	00001388 	.word	0x00001388
 80058b4:	efffffff 	.word	0xefffffff
 80058b8:	fffeffff 	.word	0xfffeffff
 80058bc:	feffffff 	.word	0xfeffffff
 80058c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fc fd4e 	bl	8002364 <HAL_GetTick>
 80058c8:	0002      	movs	r2, r0
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e02c      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_RCC_OscConfig+0x708>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	049b      	lsls	r3, r3, #18
 80058de:	4013      	ands	r3, r2
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x694>
 80058e2:	e024      	b.n	800592e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e01f      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCC_OscConfig+0x708>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <HAL_RCC_OscConfig+0x708>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	23c0      	movs	r3, #192	; 0xc0
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	429a      	cmp	r2, r3
 800590a:	d10e      	bne.n	800592a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	220f      	movs	r2, #15
 8005910:	401a      	ands	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d107      	bne.n	800592a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	23f0      	movs	r3, #240	; 0xf0
 800591e:	039b      	lsls	r3, r3, #14
 8005920:	401a      	ands	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d001      	beq.n	800592e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b008      	add	sp, #32
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021000 	.word	0x40021000

0800593c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0bf      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	4013      	ands	r3, r2
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d911      	bls.n	8005982 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b5e      	ldr	r3, [pc, #376]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	4393      	bics	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	4b5b      	ldr	r3, [pc, #364]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	4013      	ands	r3, r2
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d001      	beq.n	8005982 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e0a6      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2202      	movs	r2, #2
 8005988:	4013      	ands	r3, r2
 800598a:	d015      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2204      	movs	r2, #4
 8005992:	4013      	ands	r3, r2
 8005994:	d006      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005996:	4b51      	ldr	r3, [pc, #324]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	4b50      	ldr	r3, [pc, #320]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 800599c:	21e0      	movs	r1, #224	; 0xe0
 800599e:	00c9      	lsls	r1, r1, #3
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b4d      	ldr	r3, [pc, #308]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	22f0      	movs	r2, #240	; 0xf0
 80059aa:	4393      	bics	r3, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	4b4a      	ldr	r3, [pc, #296]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	d04c      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b44      	ldr	r3, [pc, #272]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	4013      	ands	r3, r2
 80059d4:	d120      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07a      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d107      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e2:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	049b      	lsls	r3, r3, #18
 80059ea:	4013      	ands	r3, r2
 80059ec:	d114      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e06e      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80059fa:	4b38      	ldr	r3, [pc, #224]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	4013      	ands	r3, r2
 8005a04:	d108      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e062      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	4b34      	ldr	r3, [pc, #208]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e05b      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a18:	4b30      	ldr	r3, [pc, #192]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	4393      	bics	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fc fc9a 	bl	8002364 <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a34:	e009      	b.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a36:	f7fc fc95 	bl	8002364 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <HAL_RCC_ClockConfig+0x1a4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e042      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	220c      	movs	r2, #12
 8005a50:	401a      	ands	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1ec      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	4013      	ands	r3, r2
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d211      	bcs.n	8005a8e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4393      	bics	r3, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7c:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_RCC_ClockConfig+0x19c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d001      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e020      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2204      	movs	r2, #4
 8005a94:	4013      	ands	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <HAL_RCC_ClockConfig+0x1a8>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005aac:	f000 f820 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005ab0:	0001      	movs	r1, r0
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x1a0>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	220f      	movs	r2, #15
 8005aba:	4013      	ands	r3, r2
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <HAL_RCC_ClockConfig+0x1ac>)
 8005abe:	5cd3      	ldrb	r3, [r2, r3]
 8005ac0:	000a      	movs	r2, r1
 8005ac2:	40da      	lsrs	r2, r3
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x1b0>)
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f7fc fc05 	bl	80022d8 <HAL_InitTick>
  
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b004      	add	sp, #16
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	00001388 	.word	0x00001388
 8005ae4:	fffff8ff 	.word	0xfffff8ff
 8005ae8:	0800d120 	.word	0x0800d120
 8005aec:	20000000 	.word	0x20000000

08005af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b08f      	sub	sp, #60	; 0x3c
 8005af4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005af6:	2314      	movs	r3, #20
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xec>)
 8005afc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005afe:	c313      	stmia	r3!, {r0, r1, r4}
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	4a36      	ldr	r2, [pc, #216]	; (8005be0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005b08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005b0a:	c313      	stmia	r3!, {r0, r1, r4}
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b14:	2300      	movs	r3, #0
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	2300      	movs	r3, #0
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005b24:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	220c      	movs	r2, #12
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d047      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0xd4>
 8005b34:	d849      	bhi.n	8005bca <HAL_RCC_GetSysClockFreq+0xda>
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d002      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x50>
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCC_GetSysClockFreq+0x56>
 8005b3e:	e044      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b40:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b44:	e044      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	0c9b      	lsrs	r3, r3, #18
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2214      	movs	r2, #20
 8005b50:	18ba      	adds	r2, r7, r2
 8005b52:	5cd3      	ldrb	r3, [r2, r3]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b56:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	220f      	movs	r2, #15
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	5cd3      	ldrb	r3, [r2, r3]
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b66:	23c0      	movs	r3, #192	; 0xc0
 8005b68:	025b      	lsls	r3, r3, #9
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	025b      	lsls	r3, r3, #9
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d109      	bne.n	8005b88 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b76:	481c      	ldr	r0, [pc, #112]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b78:	f7fa fad8 	bl	800012c <__udivsi3>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	001a      	movs	r2, r3
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	4353      	muls	r3, r2
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	e01a      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8a:	23c0      	movs	r3, #192	; 0xc0
 8005b8c:	025b      	lsls	r3, r3, #9
 8005b8e:	401a      	ands	r2, r3
 8005b90:	23c0      	movs	r3, #192	; 0xc0
 8005b92:	025b      	lsls	r3, r3, #9
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d109      	bne.n	8005bac <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9a:	4814      	ldr	r0, [pc, #80]	; (8005bec <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b9c:	f7fa fac6 	bl	800012c <__udivsi3>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	4353      	muls	r3, r2
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bae:	4810      	ldr	r0, [pc, #64]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bb0:	f7fa fabc 	bl	800012c <__udivsi3>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	001a      	movs	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	4353      	muls	r3, r2
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bc2:	e005      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bc8:	e002      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b00f      	add	sp, #60	; 0x3c
 8005bd8:	bd90      	pop	{r4, r7, pc}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	0800d05c 	.word	0x0800d05c
 8005be0:	0800d06c 	.word	0x0800d06c
 8005be4:	40021000 	.word	0x40021000
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	02dc6c00 	.word	0x02dc6c00
 8005bf0:	007a1200 	.word	0x007a1200

08005bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	20000000 	.word	0x20000000

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005c0c:	f7ff fff2 	bl	8005bf4 <HAL_RCC_GetHCLKFreq>
 8005c10:	0001      	movs	r1, r0
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	2207      	movs	r2, #7
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	40d9      	lsrs	r1, r3
 8005c22:	000b      	movs	r3, r1
}    
 8005c24:	0018      	movs	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	0800d130 	.word	0x0800d130

08005c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	025b      	lsls	r3, r3, #9
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d100      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005c50:	e08e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005c52:	2017      	movs	r0, #23
 8005c54:	183b      	adds	r3, r7, r0
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c5a:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	055b      	lsls	r3, r3, #21
 8005c62:	4013      	ands	r3, r2
 8005c64:	d110      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c66:	4b6b      	ldr	r3, [pc, #428]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	0549      	lsls	r1, r1, #21
 8005c70:	430a      	orrs	r2, r1
 8005c72:	61da      	str	r2, [r3, #28]
 8005c74:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	055b      	lsls	r3, r3, #21
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c82:	183b      	adds	r3, r7, r0
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4013      	ands	r3, r2
 8005c92:	d11a      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c94:	4b60      	ldr	r3, [pc, #384]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	4b5f      	ldr	r3, [pc, #380]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c9a:	2180      	movs	r1, #128	; 0x80
 8005c9c:	0049      	lsls	r1, r1, #1
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca2:	f7fc fb5f 	bl	8002364 <HAL_GetTick>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	e008      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fc fb5a 	bl	8002364 <HAL_GetTick>
 8005cb0:	0002      	movs	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e0a6      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b56      	ldr	r3, [pc, #344]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cca:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	23c0      	movs	r3, #192	; 0xc0
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d034      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	23c0      	movs	r3, #192	; 0xc0
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d02c      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b47      	ldr	r3, [pc, #284]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	4b46      	ldr	r3, [pc, #280]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cfc:	2180      	movs	r1, #128	; 0x80
 8005cfe:	0249      	lsls	r1, r1, #9
 8005d00:	430a      	orrs	r2, r1
 8005d02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d0a:	4945      	ldr	r1, [pc, #276]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d10:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1e:	f7fc fb21 	bl	8002364 <HAL_GetTick>
 8005d22:	0003      	movs	r3, r0
 8005d24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d26:	e009      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d28:	f7fc fb1c 	bl	8002364 <HAL_GetTick>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	4a3c      	ldr	r2, [pc, #240]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e067      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	2202      	movs	r2, #2
 8005d42:	4013      	ands	r3, r2
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d46:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4a34      	ldr	r2, [pc, #208]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d56:	430a      	orrs	r2, r1
 8005d58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d5a:	2317      	movs	r3, #23
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d6a:	492f      	ldr	r1, [pc, #188]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2201      	movs	r2, #1
 8005d76:	4013      	ands	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	2203      	movs	r2, #3
 8005d80:	4393      	bics	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2202      	movs	r2, #2
 8005d94:	4013      	ands	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	0019      	movs	r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005da8:	430a      	orrs	r2, r1
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2220      	movs	r2, #32
 8005db2:	4013      	ands	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005db6:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	2210      	movs	r2, #16
 8005dbc:	4393      	bics	r3, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	4393      	bics	r3, r2
 8005dde:	0019      	movs	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005de6:	430a      	orrs	r2, r1
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4013      	ands	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	0019      	movs	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e06:	430a      	orrs	r2, r1
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b006      	add	sp, #24
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40007000 	.word	0x40007000
 8005e1c:	fffffcff 	.word	0xfffffcff
 8005e20:	fffeffff 	.word	0xfffeffff
 8005e24:	00001388 	.word	0x00001388
 8005e28:	efffffff 	.word	0xefffffff
 8005e2c:	fffcffff 	.word	0xfffcffff

08005e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0a8      	b.n	8005f94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	2382      	movs	r3, #130	; 0x82
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d009      	beq.n	8005e6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	61da      	str	r2, [r3, #28]
 8005e5c:	e005      	b.n	8005e6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	225d      	movs	r2, #93	; 0x5d
 8005e74:	5c9b      	ldrb	r3, [r3, r2]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d107      	bne.n	8005e8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	225c      	movs	r2, #92	; 0x5c
 8005e80:	2100      	movs	r1, #0
 8005e82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f7fb fe0a 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	225d      	movs	r2, #93	; 0x5d
 8005e90:	2102      	movs	r1, #2
 8005e92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2140      	movs	r1, #64	; 0x40
 8005ea0:	438a      	bics	r2, r1
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	23e0      	movs	r3, #224	; 0xe0
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eb6:	2380      	movs	r3, #128	; 0x80
 8005eb8:	015b      	lsls	r3, r3, #5
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	23f0      	movs	r3, #240	; 0xf0
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d008      	beq.n	8005eda <HAL_SPI_Init+0xaa>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	23e0      	movs	r3, #224	; 0xe0
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	2382      	movs	r3, #130	; 0x82
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6899      	ldr	r1, [r3, #8]
 8005ee8:	2384      	movs	r3, #132	; 0x84
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	400b      	ands	r3, r1
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	2101      	movs	r1, #1
 8005f00:	400b      	ands	r3, r1
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6999      	ldr	r1, [r3, #24]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	400b      	ands	r3, r1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	2138      	movs	r1, #56	; 0x38
 8005f16:	400b      	ands	r3, r1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	400b      	ands	r3, r1
 8005f22:	431a      	orrs	r2, r3
 8005f24:	0011      	movs	r1, r2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	401a      	ands	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	2204      	movs	r2, #4
 8005f40:	401a      	ands	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2110      	movs	r1, #16
 8005f48:	400b      	ands	r3, r1
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	2108      	movs	r1, #8
 8005f52:	400b      	ands	r3, r1
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68d9      	ldr	r1, [r3, #12]
 8005f5a:	23f0      	movs	r3, #240	; 0xf0
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	400b      	ands	r3, r1
 8005f60:	431a      	orrs	r2, r3
 8005f62:	0011      	movs	r1, r2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4907      	ldr	r1, [pc, #28]	; (8005f9c <HAL_SPI_Init+0x16c>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	225d      	movs	r2, #93	; 0x5d
 8005f8e:	2101      	movs	r1, #1
 8005f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b004      	add	sp, #16
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fffff7ff 	.word	0xfffff7ff

08005fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	1dbb      	adds	r3, r7, #6
 8005fae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fb0:	231f      	movs	r3, #31
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	225c      	movs	r2, #92	; 0x5c
 8005fbc:	5c9b      	ldrb	r3, [r3, r2]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_SPI_Transmit+0x26>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e140      	b.n	8006248 <HAL_SPI_Transmit+0x2a8>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	225c      	movs	r2, #92	; 0x5c
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fce:	f7fc f9c9 	bl	8002364 <HAL_GetTick>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fd6:	2316      	movs	r3, #22
 8005fd8:	18fb      	adds	r3, r7, r3
 8005fda:	1dba      	adds	r2, r7, #6
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	225d      	movs	r2, #93	; 0x5d
 8005fe4:	5c9b      	ldrb	r3, [r3, r2]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d004      	beq.n	8005ff6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005fec:	231f      	movs	r3, #31
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ff4:	e11d      	b.n	8006232 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_SPI_Transmit+0x64>
 8005ffc:	1dbb      	adds	r3, r7, #6
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006004:	231f      	movs	r3, #31
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
    goto error;
 800600c:	e111      	b.n	8006232 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	225d      	movs	r2, #93	; 0x5d
 8006012:	2103      	movs	r1, #3
 8006014:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1dba      	adds	r2, r7, #6
 8006026:	8812      	ldrh	r2, [r2, #0]
 8006028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1dba      	adds	r2, r7, #6
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2244      	movs	r2, #68	; 0x44
 800603c:	2100      	movs	r1, #0
 800603e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2246      	movs	r2, #70	; 0x46
 8006044:	2100      	movs	r1, #0
 8006046:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	429a      	cmp	r2, r3
 800605e:	d110      	bne.n	8006082 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	438a      	bics	r2, r1
 800606e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	01c9      	lsls	r1, r1, #7
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	4013      	ands	r3, r2
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d007      	beq.n	80060a0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2140      	movs	r1, #64	; 0x40
 800609c:	430a      	orrs	r2, r1
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	23e0      	movs	r3, #224	; 0xe0
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d94e      	bls.n	800614a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <HAL_SPI_Transmit+0x11e>
 80060b4:	2316      	movs	r3, #22
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d13f      	bne.n	800613e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060e2:	e02c      	b.n	800613e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2202      	movs	r2, #2
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d112      	bne.n	8006118 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	1c9a      	adds	r2, r3, #2
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006116:	e012      	b.n	800613e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006118:	f7fc f924 	bl	8002364 <HAL_GetTick>
 800611c:	0002      	movs	r2, r0
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d802      	bhi.n	800612e <HAL_SPI_Transmit+0x18e>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	d102      	bne.n	8006134 <HAL_SPI_Transmit+0x194>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006134:	231f      	movs	r3, #31
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2203      	movs	r2, #3
 800613a:	701a      	strb	r2, [r3, #0]
          goto error;
 800613c:	e079      	b.n	8006232 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1cd      	bne.n	80060e4 <HAL_SPI_Transmit+0x144>
 8006148:	e04f      	b.n	80061ea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <HAL_SPI_Transmit+0x1bc>
 8006152:	2316      	movs	r3, #22
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d141      	bne.n	80061e0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006182:	e02d      	b.n	80061e0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2202      	movs	r2, #2
 800618c:	4013      	ands	r3, r2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d113      	bne.n	80061ba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b8:	e012      	b.n	80061e0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ba:	f7fc f8d3 	bl	8002364 <HAL_GetTick>
 80061be:	0002      	movs	r2, r0
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d802      	bhi.n	80061d0 <HAL_SPI_Transmit+0x230>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x236>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80061d6:	231f      	movs	r3, #31
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2203      	movs	r2, #3
 80061dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80061de:	e028      	b.n	8006232 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1cc      	bne.n	8006184 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fb2f 	bl	8006854 <SPI_EndRxTxTransaction>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006226:	231f      	movs	r3, #31
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e000      	b.n	8006232 <HAL_SPI_Transmit+0x292>
  }

error:
 8006230:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	225d      	movs	r2, #93	; 0x5d
 8006236:	2101      	movs	r1, #1
 8006238:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	225c      	movs	r2, #92	; 0x5c
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006242:	231f      	movs	r3, #31
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	781b      	ldrb	r3, [r3, #0]
}
 8006248:	0018      	movs	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	b008      	add	sp, #32
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	001a      	movs	r2, r3
 800625e:	1cbb      	adds	r3, r7, #2
 8006260:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006262:	2301      	movs	r3, #1
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006266:	2323      	movs	r3, #35	; 0x23
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	225c      	movs	r2, #92	; 0x5c
 8006272:	5c9b      	ldrb	r3, [r3, r2]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_SPI_TransmitReceive+0x2c>
 8006278:	2302      	movs	r3, #2
 800627a:	e1b5      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x398>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	225c      	movs	r2, #92	; 0x5c
 8006280:	2101      	movs	r1, #1
 8006282:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006284:	f7fc f86e 	bl	8002364 <HAL_GetTick>
 8006288:	0003      	movs	r3, r0
 800628a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800628c:	201b      	movs	r0, #27
 800628e:	183b      	adds	r3, r7, r0
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	215d      	movs	r1, #93	; 0x5d
 8006294:	5c52      	ldrb	r2, [r2, r1]
 8006296:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800629e:	2312      	movs	r3, #18
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	1cba      	adds	r2, r7, #2
 80062a4:	8812      	ldrh	r2, [r2, #0]
 80062a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062a8:	183b      	adds	r3, r7, r0
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d011      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x84>
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	2382      	movs	r3, #130	; 0x82
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d107      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x7a>
 80062c2:	183b      	adds	r3, r7, r0
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d004      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80062ca:	2323      	movs	r3, #35	; 0x23
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2202      	movs	r2, #2
 80062d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80062d2:	e17e      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x98>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x98>
 80062e0:	1cbb      	adds	r3, r7, #2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80062e8:	2323      	movs	r3, #35	; 0x23
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80062f0:	e16f      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	225d      	movs	r2, #93	; 0x5d
 80062f6:	5c9b      	ldrb	r3, [r3, r2]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d003      	beq.n	8006306 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	225d      	movs	r2, #93	; 0x5d
 8006302:	2105      	movs	r1, #5
 8006304:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1cba      	adds	r2, r7, #2
 8006316:	2146      	movs	r1, #70	; 0x46
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1cba      	adds	r2, r7, #2
 8006320:	2144      	movs	r1, #68	; 0x44
 8006322:	8812      	ldrh	r2, [r2, #0]
 8006324:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1cba      	adds	r2, r7, #2
 8006330:	8812      	ldrh	r2, [r2, #0]
 8006332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1cba      	adds	r2, r7, #2
 8006338:	8812      	ldrh	r2, [r2, #0]
 800633a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	23e0      	movs	r3, #224	; 0xe0
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	429a      	cmp	r2, r3
 8006352:	d908      	bls.n	8006366 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	49a4      	ldr	r1, [pc, #656]	; (80065f0 <HAL_SPI_TransmitReceive+0x3a0>)
 8006360:	400a      	ands	r2, r1
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	e008      	b.n	8006378 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2180      	movs	r1, #128	; 0x80
 8006372:	0149      	lsls	r1, r1, #5
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	4013      	ands	r3, r2
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d007      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	430a      	orrs	r2, r1
 8006394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	23e0      	movs	r3, #224	; 0xe0
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	429a      	cmp	r2, r3
 80063a0:	d800      	bhi.n	80063a4 <HAL_SPI_TransmitReceive+0x154>
 80063a2:	e07f      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_SPI_TransmitReceive+0x168>
 80063ac:	2312      	movs	r3, #18
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d000      	beq.n	80063b8 <HAL_SPI_TransmitReceive+0x168>
 80063b6:	e069      	b.n	800648c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063dc:	e056      	b.n	800648c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2202      	movs	r2, #2
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d11b      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x1d4>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <HAL_SPI_TransmitReceive+0x1d4>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d113      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	881a      	ldrh	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	1c9a      	adds	r2, r3, #2
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2201      	movs	r2, #1
 800642c:	4013      	ands	r3, r2
 800642e:	2b01      	cmp	r3, #1
 8006430:	d11c      	bne.n	800646c <HAL_SPI_TransmitReceive+0x21c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2246      	movs	r2, #70	; 0x46
 8006436:	5a9b      	ldrh	r3, [r3, r2]
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	b292      	uxth	r2, r2
 800644a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2246      	movs	r2, #70	; 0x46
 800645a:	5a9b      	ldrh	r3, [r3, r2]
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b299      	uxth	r1, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2246      	movs	r2, #70	; 0x46
 8006466:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006468:	2301      	movs	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800646c:	f7fb ff7a 	bl	8002364 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006478:	429a      	cmp	r2, r3
 800647a:	d807      	bhi.n	800648c <HAL_SPI_TransmitReceive+0x23c>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	3301      	adds	r3, #1
 8006480:	d004      	beq.n	800648c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006482:	2323      	movs	r3, #35	; 0x23
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	2203      	movs	r2, #3
 8006488:	701a      	strb	r2, [r3, #0]
        goto error;
 800648a:	e0a2      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1a3      	bne.n	80063de <HAL_SPI_TransmitReceive+0x18e>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2246      	movs	r2, #70	; 0x46
 800649a:	5a9b      	ldrh	r3, [r3, r2]
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d19d      	bne.n	80063de <HAL_SPI_TransmitReceive+0x18e>
 80064a2:	e085      	b.n	80065b0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x268>
 80064ac:	2312      	movs	r3, #18
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d000      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x268>
 80064b6:	e070      	b.n	800659a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064de:	e05c      	b.n	800659a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2202      	movs	r2, #2
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d11c      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x2d8>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x2d8>
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d114      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2201      	movs	r2, #1
 8006530:	4013      	ands	r3, r2
 8006532:	2b01      	cmp	r3, #1
 8006534:	d11e      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x324>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2246      	movs	r2, #70	; 0x46
 800653a:	5a9b      	ldrh	r3, [r3, r2]
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	001a      	movs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	7812      	ldrb	r2, [r2, #0]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2246      	movs	r2, #70	; 0x46
 8006562:	5a9b      	ldrh	r3, [r3, r2]
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b299      	uxth	r1, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2246      	movs	r2, #70	; 0x46
 800656e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006570:	2301      	movs	r3, #1
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006574:	f7fb fef6 	bl	8002364 <HAL_GetTick>
 8006578:	0002      	movs	r2, r0
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006580:	429a      	cmp	r2, r3
 8006582:	d802      	bhi.n	800658a <HAL_SPI_TransmitReceive+0x33a>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	3301      	adds	r3, #1
 8006588:	d102      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x340>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006590:	2323      	movs	r3, #35	; 0x23
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2203      	movs	r2, #3
 8006596:	701a      	strb	r2, [r3, #0]
        goto error;
 8006598:	e01b      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d19d      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x290>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2246      	movs	r2, #70	; 0x46
 80065a8:	5a9b      	ldrh	r3, [r3, r2]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d197      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 f94c 	bl	8006854 <SPI_EndRxTxTransaction>
 80065bc:	1e03      	subs	r3, r0, #0
 80065be:	d007      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80065c0:	2323      	movs	r3, #35	; 0x23
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
 80065ce:	e000      	b.n	80065d2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80065d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	225d      	movs	r2, #93	; 0x5d
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	225c      	movs	r2, #92	; 0x5c
 80065de:	2100      	movs	r1, #0
 80065e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065e2:	2323      	movs	r3, #35	; 0x23
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	781b      	ldrb	r3, [r3, #0]
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b00a      	add	sp, #40	; 0x28
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	ffffefff 	.word	0xffffefff

080065f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006604:	f7fb feae 	bl	8002364 <HAL_GetTick>
 8006608:	0002      	movs	r2, r0
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	18d3      	adds	r3, r2, r3
 8006612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006614:	f7fb fea6 	bl	8002364 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	015b      	lsls	r3, r3, #5
 8006622:	0d1b      	lsrs	r3, r3, #20
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	4353      	muls	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662a:	e058      	b.n	80066de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	d055      	beq.n	80066de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006632:	f7fb fe97 	bl	8002364 <HAL_GetTick>
 8006636:	0002      	movs	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	429a      	cmp	r2, r3
 8006640:	d902      	bls.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d142      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	21e0      	movs	r1, #224	; 0xe0
 8006654:	438a      	bics	r2, r1
 8006656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	2382      	movs	r3, #130	; 0x82
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	429a      	cmp	r2, r3
 8006662:	d113      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	429a      	cmp	r2, r3
 800666e:	d005      	beq.n	800667c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	429a      	cmp	r2, r3
 800667a:	d107      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2140      	movs	r1, #64	; 0x40
 8006688:	438a      	bics	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	019b      	lsls	r3, r3, #6
 8006694:	429a      	cmp	r2, r3
 8006696:	d110      	bne.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	491a      	ldr	r1, [pc, #104]	; (800670c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	0189      	lsls	r1, r1, #6
 80066b6:	430a      	orrs	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	225d      	movs	r2, #93	; 0x5d
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	225c      	movs	r2, #92	; 0x5c
 80066c6:	2100      	movs	r1, #0
 80066c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e017      	b.n	80066fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3b01      	subs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	425a      	negs	r2, r3
 80066ee:	4153      	adcs	r3, r2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	001a      	movs	r2, r3
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d197      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b008      	add	sp, #32
 8006704:	bd80      	pop	{r7, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	20000000 	.word	0x20000000
 800670c:	ffffdfff 	.word	0xffffdfff

08006710 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	; 0x28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800671e:	2317      	movs	r3, #23
 8006720:	18fb      	adds	r3, r7, r3
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006726:	f7fb fe1d 	bl	8002364 <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	18d3      	adds	r3, r2, r3
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006736:	f7fb fe15 	bl	8002364 <HAL_GetTick>
 800673a:	0003      	movs	r3, r0
 800673c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	0013      	movs	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	189b      	adds	r3, r3, r2
 8006750:	00da      	lsls	r2, r3, #3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	0d1b      	lsrs	r3, r3, #20
 8006756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006758:	4353      	muls	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800675c:	e068      	b.n	8006830 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	23c0      	movs	r3, #192	; 0xc0
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	429a      	cmp	r2, r3
 8006766:	d10a      	bne.n	800677e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	2117      	movs	r1, #23
 8006776:	187b      	adds	r3, r7, r1
 8006778:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800677a:	187b      	adds	r3, r7, r1
 800677c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	d055      	beq.n	8006830 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006784:	f7fb fdee 	bl	8002364 <HAL_GetTick>
 8006788:	0002      	movs	r2, r0
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	429a      	cmp	r2, r3
 8006792:	d902      	bls.n	800679a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d142      	bne.n	8006820 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	21e0      	movs	r1, #224	; 0xe0
 80067a6:	438a      	bics	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	2382      	movs	r3, #130	; 0x82
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d113      	bne.n	80067de <SPI_WaitFifoStateUntilTimeout+0xce>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	429a      	cmp	r2, r3
 80067c0:	d005      	beq.n	80067ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d107      	bne.n	80067de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2140      	movs	r1, #64	; 0x40
 80067da:	438a      	bics	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	019b      	lsls	r3, r3, #6
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d110      	bne.n	800680c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4916      	ldr	r1, [pc, #88]	; (8006850 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067f6:	400a      	ands	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	0189      	lsls	r1, r1, #6
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	225d      	movs	r2, #93	; 0x5d
 8006810:	2101      	movs	r1, #1
 8006812:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	225c      	movs	r2, #92	; 0x5c
 8006818:	2100      	movs	r1, #0
 800681a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e010      	b.n	8006842 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3b01      	subs	r3, #1
 800682e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d18e      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b00a      	add	sp, #40	; 0x28
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	20000000 	.word	0x20000000
 8006850:	ffffdfff 	.word	0xffffdfff

08006854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	23c0      	movs	r3, #192	; 0xc0
 8006864:	0159      	lsls	r1, r3, #5
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	0013      	movs	r3, r2
 800686e:	2200      	movs	r2, #0
 8006870:	f7ff ff4e 	bl	8006710 <SPI_WaitFifoStateUntilTimeout>
 8006874:	1e03      	subs	r3, r0, #0
 8006876:	d007      	beq.n	8006888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687c:	2220      	movs	r2, #32
 800687e:	431a      	orrs	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e027      	b.n	80068d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	0013      	movs	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	f7ff fead 	bl	80065f4 <SPI_WaitFlagStateUntilTimeout>
 800689a:	1e03      	subs	r3, r0, #0
 800689c:	d007      	beq.n	80068ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	2220      	movs	r2, #32
 80068a4:	431a      	orrs	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e014      	b.n	80068d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	23c0      	movs	r3, #192	; 0xc0
 80068b2:	00d9      	lsls	r1, r3, #3
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	0013      	movs	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	f7ff ff27 	bl	8006710 <SPI_WaitFifoStateUntilTimeout>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d007      	beq.n	80068d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ca:	2220      	movs	r2, #32
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e000      	b.n	80068d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b004      	add	sp, #16
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e042      	b.n	8006978 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	223d      	movs	r2, #61	; 0x3d
 80068f6:	5c9b      	ldrb	r3, [r3, r2]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	223c      	movs	r2, #60	; 0x3c
 8006902:	2100      	movs	r1, #0
 8006904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0018      	movs	r0, r3
 800690a:	f7fb f917 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	223d      	movs	r2, #61	; 0x3d
 8006912:	2102      	movs	r1, #2
 8006914:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	0019      	movs	r1, r3
 8006920:	0010      	movs	r0, r2
 8006922:	f000 fa65 	bl	8006df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2246      	movs	r2, #70	; 0x46
 800692a:	2101      	movs	r1, #1
 800692c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	223e      	movs	r2, #62	; 0x3e
 8006932:	2101      	movs	r1, #1
 8006934:	5499      	strb	r1, [r3, r2]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	223f      	movs	r2, #63	; 0x3f
 800693a:	2101      	movs	r1, #1
 800693c:	5499      	strb	r1, [r3, r2]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2240      	movs	r2, #64	; 0x40
 8006942:	2101      	movs	r1, #1
 8006944:	5499      	strb	r1, [r3, r2]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2241      	movs	r2, #65	; 0x41
 800694a:	2101      	movs	r1, #1
 800694c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2242      	movs	r2, #66	; 0x42
 8006952:	2101      	movs	r1, #1
 8006954:	5499      	strb	r1, [r3, r2]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2243      	movs	r2, #67	; 0x43
 800695a:	2101      	movs	r1, #1
 800695c:	5499      	strb	r1, [r3, r2]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2244      	movs	r2, #68	; 0x44
 8006962:	2101      	movs	r1, #1
 8006964:	5499      	strb	r1, [r3, r2]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2245      	movs	r2, #69	; 0x45
 800696a:	2101      	movs	r1, #1
 800696c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	223d      	movs	r2, #61	; 0x3d
 8006972:	2101      	movs	r1, #1
 8006974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	b002      	add	sp, #8
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	223d      	movs	r2, #61	; 0x3d
 800698c:	5c9b      	ldrb	r3, [r3, r2]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d001      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e03b      	b.n	8006a10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	223d      	movs	r2, #61	; 0x3d
 800699c:	2102      	movs	r1, #2
 800699e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2101      	movs	r1, #1
 80069ac:	430a      	orrs	r2, r1
 80069ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_TIM_Base_Start_IT+0x98>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00f      	beq.n	80069da <HAL_TIM_Base_Start_IT+0x5a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	; 0x80
 80069c0:	05db      	lsls	r3, r3, #23
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d009      	beq.n	80069da <HAL_TIM_Base_Start_IT+0x5a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIM_Base_Start_IT+0x5a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d111      	bne.n	80069fe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2207      	movs	r2, #7
 80069e2:	4013      	ands	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	d010      	beq.n	8006a0e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2101      	movs	r1, #1
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	e007      	b.n	8006a0e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2101      	movs	r1, #1
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b004      	add	sp, #16
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40014000 	.word	0x40014000

08006a24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e042      	b.n	8006abc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	223d      	movs	r2, #61	; 0x3d
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d107      	bne.n	8006a52 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	223c      	movs	r2, #60	; 0x3c
 8006a46:	2100      	movs	r1, #0
 8006a48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f839 	bl	8006ac4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	223d      	movs	r2, #61	; 0x3d
 8006a56:	2102      	movs	r1, #2
 8006a58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	0019      	movs	r1, r3
 8006a64:	0010      	movs	r0, r2
 8006a66:	f000 f9c3 	bl	8006df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2246      	movs	r2, #70	; 0x46
 8006a6e:	2101      	movs	r1, #1
 8006a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	223e      	movs	r2, #62	; 0x3e
 8006a76:	2101      	movs	r1, #1
 8006a78:	5499      	strb	r1, [r3, r2]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	223f      	movs	r2, #63	; 0x3f
 8006a7e:	2101      	movs	r1, #1
 8006a80:	5499      	strb	r1, [r3, r2]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2240      	movs	r2, #64	; 0x40
 8006a86:	2101      	movs	r1, #1
 8006a88:	5499      	strb	r1, [r3, r2]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2241      	movs	r2, #65	; 0x41
 8006a8e:	2101      	movs	r1, #1
 8006a90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2242      	movs	r2, #66	; 0x42
 8006a96:	2101      	movs	r1, #1
 8006a98:	5499      	strb	r1, [r3, r2]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2243      	movs	r2, #67	; 0x43
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	5499      	strb	r1, [r3, r2]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2244      	movs	r2, #68	; 0x44
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	5499      	strb	r1, [r3, r2]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2245      	movs	r2, #69	; 0x45
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223d      	movs	r2, #61	; 0x3d
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006acc:	46c0      	nop			; (mov r8, r8)
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b002      	add	sp, #8
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d124      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2202      	movs	r2, #2
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d11d      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2203      	movs	r2, #3
 8006afe:	4252      	negs	r2, r2
 8006b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	4013      	ands	r3, r2
 8006b12:	d004      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	0018      	movs	r0, r3
 8006b18:	f000 f952 	bl	8006dc0 <HAL_TIM_IC_CaptureCallback>
 8006b1c:	e007      	b.n	8006b2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 f945 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 f951 	bl	8006dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d125      	bne.n	8006b8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d11e      	bne.n	8006b8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2205      	movs	r2, #5
 8006b56:	4252      	negs	r2, r2
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	23c0      	movs	r3, #192	; 0xc0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f000 f925 	bl	8006dc0 <HAL_TIM_IC_CaptureCallback>
 8006b76:	e007      	b.n	8006b88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 f918 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 f924 	bl	8006dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2208      	movs	r2, #8
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d124      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d11d      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2209      	movs	r2, #9
 8006bb0:	4252      	negs	r2, r2
 8006bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 f8f9 	bl	8006dc0 <HAL_TIM_IC_CaptureCallback>
 8006bce:	e007      	b.n	8006be0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 f8ec 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 f8f8 	bl	8006dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2210      	movs	r2, #16
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d125      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d11e      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2211      	movs	r2, #17
 8006c08:	4252      	negs	r2, r2
 8006c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	23c0      	movs	r3, #192	; 0xc0
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	0018      	movs	r0, r3
 8006c24:	f000 f8cc 	bl	8006dc0 <HAL_TIM_IC_CaptureCallback>
 8006c28:	e007      	b.n	8006c3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 f8bf 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f8cb 	bl	8006dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2201      	movs	r2, #1
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d10f      	bne.n	8006c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d108      	bne.n	8006c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2202      	movs	r2, #2
 8006c62:	4252      	negs	r2, r2
 8006c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7f9 fbf7 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2280      	movs	r2, #128	; 0x80
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d10f      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2280      	movs	r2, #128	; 0x80
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d108      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2281      	movs	r2, #129	; 0x81
 8006c90:	4252      	negs	r2, r2
 8006c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fb2e 	bl	80072f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d10f      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2240      	movs	r2, #64	; 0x40
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d108      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2241      	movs	r2, #65	; 0x41
 8006cbe:	4252      	negs	r2, r2
 8006cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f88b 	bl	8006de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d10f      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d108      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2221      	movs	r2, #33	; 0x21
 8006cec:	4252      	negs	r2, r2
 8006cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 faf8 	bl	80072e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	b002      	add	sp, #8
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2317      	movs	r3, #23
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	223c      	movs	r2, #60	; 0x3c
 8006d18:	5c9b      	ldrb	r3, [r3, r2]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_TIM_OC_ConfigChannel+0x22>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e042      	b.n	8006da8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	223c      	movs	r2, #60	; 0x3c
 8006d26:	2101      	movs	r1, #1
 8006d28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	d027      	beq.n	8006d80 <HAL_TIM_OC_ConfigChannel+0x80>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d82c      	bhi.n	8006d90 <HAL_TIM_OC_ConfigChannel+0x90>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d019      	beq.n	8006d70 <HAL_TIM_OC_ConfigChannel+0x70>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d826      	bhi.n	8006d90 <HAL_TIM_OC_ConfigChannel+0x90>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_TIM_OC_ConfigChannel+0x50>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d008      	beq.n	8006d60 <HAL_TIM_OC_ConfigChannel+0x60>
 8006d4e:	e01f      	b.n	8006d90 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	0011      	movs	r1, r2
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 f8c9 	bl	8006ef0 <TIM_OC1_SetConfig>
      break;
 8006d5e:	e01c      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	0011      	movs	r1, r2
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 f949 	bl	8007000 <TIM_OC2_SetConfig>
      break;
 8006d6e:	e014      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	0011      	movs	r1, r2
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f000 f9c5 	bl	8007108 <TIM_OC3_SetConfig>
      break;
 8006d7e:	e00c      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f000 fa43 	bl	8007214 <TIM_OC4_SetConfig>
      break;
 8006d8e:	e004      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006d90:	2317      	movs	r3, #23
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
      break;
 8006d98:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	223c      	movs	r2, #60	; 0x3c
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5499      	strb	r1, [r3, r2]

  return status;
 8006da2:	2317      	movs	r3, #23
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	781b      	ldrb	r3, [r3, #0]
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b006      	add	sp, #24
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a34      	ldr	r2, [pc, #208]	; (8006ed4 <TIM_Base_SetConfig+0xe4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d008      	beq.n	8006e1a <TIM_Base_SetConfig+0x2a>
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	05db      	lsls	r3, r3, #23
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0x2a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a30      	ldr	r2, [pc, #192]	; (8006ed8 <TIM_Base_SetConfig+0xe8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2270      	movs	r2, #112	; 0x70
 8006e1e:	4393      	bics	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <TIM_Base_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	05db      	lsls	r3, r3, #23
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d013      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a25      	ldr	r2, [pc, #148]	; (8006ed8 <TIM_Base_SetConfig+0xe8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00f      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a24      	ldr	r2, [pc, #144]	; (8006edc <TIM_Base_SetConfig+0xec>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00b      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a23      	ldr	r2, [pc, #140]	; (8006ee0 <TIM_Base_SetConfig+0xf0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_Base_SetConfig+0xf4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_Base_SetConfig+0x76>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_Base_SetConfig+0xf8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d108      	bne.n	8006e78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a20      	ldr	r2, [pc, #128]	; (8006eec <TIM_Base_SetConfig+0xfc>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2280      	movs	r2, #128	; 0x80
 8006e7c:	4393      	bics	r3, r2
 8006e7e:	001a      	movs	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <TIM_Base_SetConfig+0xe4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_Base_SetConfig+0xce>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <TIM_Base_SetConfig+0xf0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_Base_SetConfig+0xce>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <TIM_Base_SetConfig+0xf4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_Base_SetConfig+0xce>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <TIM_Base_SetConfig+0xf8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d103      	bne.n	8006ec6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	615a      	str	r2, [r3, #20]
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b004      	add	sp, #16
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40002000 	.word	0x40002000
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800
 8006eec:	fffffcff 	.word	0xfffffcff

08006ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	2201      	movs	r2, #1
 8006f00:	4393      	bics	r3, r2
 8006f02:	001a      	movs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2270      	movs	r2, #112	; 0x70
 8006f1e:	4393      	bics	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2203      	movs	r2, #3
 8006f26:	4393      	bics	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2202      	movs	r2, #2
 8006f38:	4393      	bics	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <TIM_OC1_SetConfig+0xf8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00b      	beq.n	8006f66 <TIM_OC1_SetConfig+0x76>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a26      	ldr	r2, [pc, #152]	; (8006fec <TIM_OC1_SetConfig+0xfc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_OC1_SetConfig+0x76>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a25      	ldr	r2, [pc, #148]	; (8006ff0 <TIM_OC1_SetConfig+0x100>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_OC1_SetConfig+0x76>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a24      	ldr	r2, [pc, #144]	; (8006ff4 <TIM_OC1_SetConfig+0x104>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10c      	bne.n	8006f80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	4393      	bics	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	4393      	bics	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <TIM_OC1_SetConfig+0xf8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <TIM_OC1_SetConfig+0xb0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	; (8006fec <TIM_OC1_SetConfig+0xfc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d007      	beq.n	8006fa0 <TIM_OC1_SetConfig+0xb0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <TIM_OC1_SetConfig+0x100>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_OC1_SetConfig+0xb0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <TIM_OC1_SetConfig+0x104>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d111      	bne.n	8006fc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4a15      	ldr	r2, [pc, #84]	; (8006ff8 <TIM_OC1_SetConfig+0x108>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <TIM_OC1_SetConfig+0x10c>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b006      	add	sp, #24
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800
 8006ff8:	fffffeff 	.word	0xfffffeff
 8006ffc:	fffffdff 	.word	0xfffffdff

08007000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	2210      	movs	r2, #16
 8007010:	4393      	bics	r3, r2
 8007012:	001a      	movs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4a2e      	ldr	r2, [pc, #184]	; (80070e8 <TIM_OC2_SetConfig+0xe8>)
 800702e:	4013      	ands	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <TIM_OC2_SetConfig+0xec>)
 8007036:	4013      	ands	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2220      	movs	r2, #32
 800704a:	4393      	bics	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a24      	ldr	r2, [pc, #144]	; (80070f0 <TIM_OC2_SetConfig+0xf0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10d      	bne.n	800707e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2280      	movs	r2, #128	; 0x80
 8007066:	4393      	bics	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2240      	movs	r2, #64	; 0x40
 800707a:	4393      	bics	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <TIM_OC2_SetConfig+0xf0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_OC2_SetConfig+0x9e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <TIM_OC2_SetConfig+0xf4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <TIM_OC2_SetConfig+0x9e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <TIM_OC2_SetConfig+0xf8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC2_SetConfig+0x9e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <TIM_OC2_SetConfig+0xfc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d113      	bne.n	80070c6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <TIM_OC2_SetConfig+0x100>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4a16      	ldr	r2, [pc, #88]	; (8007104 <TIM_OC2_SetConfig+0x104>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	621a      	str	r2, [r3, #32]
}
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b006      	add	sp, #24
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	ffff8fff 	.word	0xffff8fff
 80070ec:	fffffcff 	.word	0xfffffcff
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800
 8007100:	fffffbff 	.word	0xfffffbff
 8007104:	fffff7ff 	.word	0xfffff7ff

08007108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	4a35      	ldr	r2, [pc, #212]	; (80071ec <TIM_OC3_SetConfig+0xe4>)
 8007118:	401a      	ands	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2270      	movs	r2, #112	; 0x70
 8007134:	4393      	bics	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2203      	movs	r2, #3
 800713c:	4393      	bics	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	4a28      	ldr	r2, [pc, #160]	; (80071f0 <TIM_OC3_SetConfig+0xe8>)
 800714e:	4013      	ands	r3, r2
 8007150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <TIM_OC3_SetConfig+0xec>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d10d      	bne.n	8007182 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <TIM_OC3_SetConfig+0xf0>)
 800716a:	4013      	ands	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <TIM_OC3_SetConfig+0xf4>)
 800717e:	4013      	ands	r3, r2
 8007180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <TIM_OC3_SetConfig+0xec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00b      	beq.n	80071a2 <TIM_OC3_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1c      	ldr	r2, [pc, #112]	; (8007200 <TIM_OC3_SetConfig+0xf8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d007      	beq.n	80071a2 <TIM_OC3_SetConfig+0x9a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1b      	ldr	r2, [pc, #108]	; (8007204 <TIM_OC3_SetConfig+0xfc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC3_SetConfig+0x9a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <TIM_OC3_SetConfig+0x100>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d113      	bne.n	80071ca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4a19      	ldr	r2, [pc, #100]	; (800720c <TIM_OC3_SetConfig+0x104>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4a18      	ldr	r2, [pc, #96]	; (8007210 <TIM_OC3_SetConfig+0x108>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b006      	add	sp, #24
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	fffffeff 	.word	0xfffffeff
 80071f0:	fffffdff 	.word	0xfffffdff
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	fffff7ff 	.word	0xfffff7ff
 80071fc:	fffffbff 	.word	0xfffffbff
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800
 800720c:	ffffefff 	.word	0xffffefff
 8007210:	ffffdfff 	.word	0xffffdfff

08007214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	4a28      	ldr	r2, [pc, #160]	; (80072c4 <TIM_OC4_SetConfig+0xb0>)
 8007224:	401a      	ands	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <TIM_OC4_SetConfig+0xb4>)
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a21      	ldr	r2, [pc, #132]	; (80072cc <TIM_OC4_SetConfig+0xb8>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <TIM_OC4_SetConfig+0xbc>)
 800725c:	4013      	ands	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <TIM_OC4_SetConfig+0xc0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_OC4_SetConfig+0x78>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <TIM_OC4_SetConfig+0xc4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_OC4_SetConfig+0x78>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a17      	ldr	r2, [pc, #92]	; (80072dc <TIM_OC4_SetConfig+0xc8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC4_SetConfig+0x78>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <TIM_OC4_SetConfig+0xcc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d109      	bne.n	80072a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <TIM_OC4_SetConfig+0xd0>)
 8007290:	4013      	ands	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	019b      	lsls	r3, r3, #6
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b006      	add	sp, #24
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	ffffefff 	.word	0xffffefff
 80072c8:	ffff8fff 	.word	0xffff8fff
 80072cc:	fffffcff 	.word	0xfffffcff
 80072d0:	ffffdfff 	.word	0xffffdfff
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800
 80072e4:	ffffbfff 	.word	0xffffbfff

080072e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b002      	add	sp, #8
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e044      	b.n	80073a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2274      	movs	r2, #116	; 0x74
 8007326:	2100      	movs	r1, #0
 8007328:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0018      	movs	r0, r3
 800732e:	f7fa fc2d 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2224      	movs	r2, #36	; 0x24
 8007336:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2101      	movs	r1, #1
 8007344:	438a      	bics	r2, r1
 8007346:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0018      	movs	r0, r3
 800734c:	f000 fb24 	bl	8007998 <UART_SetConfig>
 8007350:	0003      	movs	r3, r0
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e024      	b.n	80073a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 fc9f 	bl	8007ca8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	490d      	ldr	r1, [pc, #52]	; (80073ac <HAL_UART_Init+0xa4>)
 8007376:	400a      	ands	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	212a      	movs	r1, #42	; 0x2a
 8007386:	438a      	bics	r2, r1
 8007388:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2101      	movs	r1, #1
 8007396:	430a      	orrs	r2, r1
 8007398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	0018      	movs	r0, r3
 800739e:	f000 fd37 	bl	8007e10 <UART_CheckIdleState>
 80073a2:	0003      	movs	r3, r0
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b002      	add	sp, #8
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	ffffb7ff 	.word	0xffffb7ff

080073b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b0ab      	sub	sp, #172	; 0xac
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	22a4      	movs	r2, #164	; 0xa4
 80073c0:	18b9      	adds	r1, r7, r2
 80073c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	20a0      	movs	r0, #160	; 0xa0
 80073cc:	1839      	adds	r1, r7, r0
 80073ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	219c      	movs	r1, #156	; 0x9c
 80073d8:	1879      	adds	r1, r7, r1
 80073da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073dc:	0011      	movs	r1, r2
 80073de:	18bb      	adds	r3, r7, r2
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a99      	ldr	r2, [pc, #612]	; (8007648 <HAL_UART_IRQHandler+0x298>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	2298      	movs	r2, #152	; 0x98
 80073e8:	18bc      	adds	r4, r7, r2
 80073ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80073ec:	18bb      	adds	r3, r7, r2
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d114      	bne.n	800741e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073f4:	187b      	adds	r3, r7, r1
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2220      	movs	r2, #32
 80073fa:	4013      	ands	r3, r2
 80073fc:	d00f      	beq.n	800741e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073fe:	183b      	adds	r3, r7, r0
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2220      	movs	r2, #32
 8007404:	4013      	ands	r3, r2
 8007406:	d00a      	beq.n	800741e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800740c:	2b00      	cmp	r3, #0
 800740e:	d100      	bne.n	8007412 <HAL_UART_IRQHandler+0x62>
 8007410:	e296      	b.n	8007940 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	0010      	movs	r0, r2
 800741a:	4798      	blx	r3
      }
      return;
 800741c:	e290      	b.n	8007940 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800741e:	2398      	movs	r3, #152	; 0x98
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d100      	bne.n	800742a <HAL_UART_IRQHandler+0x7a>
 8007428:	e114      	b.n	8007654 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800742a:	239c      	movs	r3, #156	; 0x9c
 800742c:	18fb      	adds	r3, r7, r3
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	4013      	ands	r3, r2
 8007434:	d106      	bne.n	8007444 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007436:	23a0      	movs	r3, #160	; 0xa0
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a83      	ldr	r2, [pc, #524]	; (800764c <HAL_UART_IRQHandler+0x29c>)
 800743e:	4013      	ands	r3, r2
 8007440:	d100      	bne.n	8007444 <HAL_UART_IRQHandler+0x94>
 8007442:	e107      	b.n	8007654 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007444:	23a4      	movs	r3, #164	; 0xa4
 8007446:	18fb      	adds	r3, r7, r3
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	4013      	ands	r3, r2
 800744e:	d012      	beq.n	8007476 <HAL_UART_IRQHandler+0xc6>
 8007450:	23a0      	movs	r3, #160	; 0xa0
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	2380      	movs	r3, #128	; 0x80
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4013      	ands	r3, r2
 800745c:	d00b      	beq.n	8007476 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2201      	movs	r2, #1
 8007464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	589b      	ldr	r3, [r3, r2]
 800746c:	2201      	movs	r2, #1
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007476:	23a4      	movs	r3, #164	; 0xa4
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2202      	movs	r2, #2
 800747e:	4013      	ands	r3, r2
 8007480:	d011      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
 8007482:	239c      	movs	r3, #156	; 0x9c
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	4013      	ands	r3, r2
 800748c:	d00b      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2202      	movs	r2, #2
 8007494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2280      	movs	r2, #128	; 0x80
 800749a:	589b      	ldr	r3, [r3, r2]
 800749c:	2204      	movs	r2, #4
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a6:	23a4      	movs	r3, #164	; 0xa4
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2204      	movs	r2, #4
 80074ae:	4013      	ands	r3, r2
 80074b0:	d011      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
 80074b2:	239c      	movs	r3, #156	; 0x9c
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	4013      	ands	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2204      	movs	r2, #4
 80074c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2280      	movs	r2, #128	; 0x80
 80074ca:	589b      	ldr	r3, [r3, r2]
 80074cc:	2202      	movs	r2, #2
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074d6:	23a4      	movs	r3, #164	; 0xa4
 80074d8:	18fb      	adds	r3, r7, r3
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2208      	movs	r2, #8
 80074de:	4013      	ands	r3, r2
 80074e0:	d017      	beq.n	8007512 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074e2:	23a0      	movs	r3, #160	; 0xa0
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2220      	movs	r2, #32
 80074ea:	4013      	ands	r3, r2
 80074ec:	d105      	bne.n	80074fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074ee:	239c      	movs	r3, #156	; 0x9c
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2201      	movs	r2, #1
 80074f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074f8:	d00b      	beq.n	8007512 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2208      	movs	r2, #8
 8007500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	589b      	ldr	r3, [r3, r2]
 8007508:	2208      	movs	r2, #8
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2180      	movs	r1, #128	; 0x80
 8007510:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007512:	23a4      	movs	r3, #164	; 0xa4
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	4013      	ands	r3, r2
 800751e:	d013      	beq.n	8007548 <HAL_UART_IRQHandler+0x198>
 8007520:	23a0      	movs	r3, #160	; 0xa0
 8007522:	18fb      	adds	r3, r7, r3
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	04db      	lsls	r3, r3, #19
 800752a:	4013      	ands	r3, r2
 800752c:	d00c      	beq.n	8007548 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2280      	movs	r2, #128	; 0x80
 8007534:	0112      	lsls	r2, r2, #4
 8007536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2280      	movs	r2, #128	; 0x80
 800753c:	589b      	ldr	r3, [r3, r2]
 800753e:	2220      	movs	r2, #32
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	589b      	ldr	r3, [r3, r2]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <HAL_UART_IRQHandler+0x1a4>
 8007552:	e1f7      	b.n	8007944 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007554:	23a4      	movs	r3, #164	; 0xa4
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2220      	movs	r2, #32
 800755c:	4013      	ands	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007560:	23a0      	movs	r3, #160	; 0xa0
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2220      	movs	r2, #32
 8007568:	4013      	ands	r3, r2
 800756a:	d008      	beq.n	800757e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	0010      	movs	r0, r2
 800757c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2280      	movs	r2, #128	; 0x80
 8007582:	589b      	ldr	r3, [r3, r2]
 8007584:	2194      	movs	r1, #148	; 0x94
 8007586:	187a      	adds	r2, r7, r1
 8007588:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2240      	movs	r2, #64	; 0x40
 8007592:	4013      	ands	r3, r2
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d004      	beq.n	80075a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007598:	187b      	adds	r3, r7, r1
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2228      	movs	r2, #40	; 0x28
 800759e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075a0:	d047      	beq.n	8007632 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	0018      	movs	r0, r3
 80075a6:	f000 fd3f 	bl	8008028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d137      	bne.n	8007628 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b8:	f3ef 8310 	mrs	r3, PRIMASK
 80075bc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80075be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c0:	2090      	movs	r0, #144	; 0x90
 80075c2:	183a      	adds	r2, r7, r0
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	2301      	movs	r3, #1
 80075c8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075cc:	f383 8810 	msr	PRIMASK, r3
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2140      	movs	r1, #64	; 0x40
 80075de:	438a      	bics	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]
 80075e2:	183b      	adds	r3, r7, r0
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d012      	beq.n	800761e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	4a14      	ldr	r2, [pc, #80]	; (8007650 <HAL_UART_IRQHandler+0x2a0>)
 80075fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	0018      	movs	r0, r3
 8007606:	f7fb fc87 	bl	8002f18 <HAL_DMA_Abort_IT>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d01a      	beq.n	8007644 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	0018      	movs	r0, r3
 800761a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	e012      	b.n	8007644 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	0018      	movs	r0, r3
 8007622:	f000 f9a5 	bl	8007970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	e00d      	b.n	8007644 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f9a0 	bl	8007970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	e008      	b.n	8007644 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f000 f99b 	bl	8007970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	2100      	movs	r1, #0
 8007640:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007642:	e17f      	b.n	8007944 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	46c0      	nop			; (mov r8, r8)
    return;
 8007646:	e17d      	b.n	8007944 <HAL_UART_IRQHandler+0x594>
 8007648:	0000080f 	.word	0x0000080f
 800764c:	04000120 	.word	0x04000120
 8007650:	080080ed 	.word	0x080080ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007658:	2b01      	cmp	r3, #1
 800765a:	d000      	beq.n	800765e <HAL_UART_IRQHandler+0x2ae>
 800765c:	e131      	b.n	80078c2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800765e:	23a4      	movs	r3, #164	; 0xa4
 8007660:	18fb      	adds	r3, r7, r3
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2210      	movs	r2, #16
 8007666:	4013      	ands	r3, r2
 8007668:	d100      	bne.n	800766c <HAL_UART_IRQHandler+0x2bc>
 800766a:	e12a      	b.n	80078c2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800766c:	23a0      	movs	r3, #160	; 0xa0
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2210      	movs	r2, #16
 8007674:	4013      	ands	r3, r2
 8007676:	d100      	bne.n	800767a <HAL_UART_IRQHandler+0x2ca>
 8007678:	e123      	b.n	80078c2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2210      	movs	r2, #16
 8007680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	4013      	ands	r3, r2
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d000      	beq.n	8007692 <HAL_UART_IRQHandler+0x2e2>
 8007690:	e09b      	b.n	80077ca <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	217e      	movs	r1, #126	; 0x7e
 800769c:	187b      	adds	r3, r7, r1
 800769e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80076a0:	187b      	adds	r3, r7, r1
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d100      	bne.n	80076aa <HAL_UART_IRQHandler+0x2fa>
 80076a8:	e14e      	b.n	8007948 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2258      	movs	r2, #88	; 0x58
 80076ae:	5a9b      	ldrh	r3, [r3, r2]
 80076b0:	187a      	adds	r2, r7, r1
 80076b2:	8812      	ldrh	r2, [r2, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d300      	bcc.n	80076ba <HAL_UART_IRQHandler+0x30a>
 80076b8:	e146      	b.n	8007948 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	187a      	adds	r2, r7, r1
 80076be:	215a      	movs	r1, #90	; 0x5a
 80076c0:	8812      	ldrh	r2, [r2, #0]
 80076c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d06e      	beq.n	80077ac <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ce:	f3ef 8310 	mrs	r3, PRIMASK
 80076d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80076d8:	2301      	movs	r3, #1
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	f383 8810 	msr	PRIMASK, r3
}
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	499a      	ldr	r1, [pc, #616]	; (8007958 <HAL_UART_IRQHandler+0x5a8>)
 80076f0:	400a      	ands	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	f383 8810 	msr	PRIMASK, r3
}
 80076fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007700:	f3ef 8310 	mrs	r3, PRIMASK
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007708:	677b      	str	r3, [r7, #116]	; 0x74
 800770a:	2301      	movs	r3, #1
 800770c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2101      	movs	r1, #1
 8007722:	438a      	bics	r2, r1
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007728:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772c:	f383 8810 	msr	PRIMASK, r3
}
 8007730:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	673b      	str	r3, [r7, #112]	; 0x70
 800773c:	2301      	movs	r3, #1
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	f383 8810 	msr	PRIMASK, r3
}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2140      	movs	r1, #64	; 0x40
 8007754:	438a      	bics	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800775a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775e:	f383 8810 	msr	PRIMASK, r3
}
 8007762:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007770:	f3ef 8310 	mrs	r3, PRIMASK
 8007774:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800777a:	2301      	movs	r3, #1
 800777c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800777e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007780:	f383 8810 	msr	PRIMASK, r3
}
 8007784:	46c0      	nop			; (mov r8, r8)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2110      	movs	r1, #16
 8007792:	438a      	bics	r2, r1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007798:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	f383 8810 	msr	PRIMASK, r3
}
 80077a0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	0018      	movs	r0, r3
 80077a8:	f7fb fb7e 	bl	8002ea8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2258      	movs	r2, #88	; 0x58
 80077b0:	5a9a      	ldrh	r2, [r3, r2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	215a      	movs	r1, #90	; 0x5a
 80077b6:	5a5b      	ldrh	r3, [r3, r1]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	b29a      	uxth	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0011      	movs	r1, r2
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 f8dc 	bl	8007980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077c8:	e0be      	b.n	8007948 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2258      	movs	r2, #88	; 0x58
 80077ce:	5a99      	ldrh	r1, [r3, r2]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	225a      	movs	r2, #90	; 0x5a
 80077d4:	5a9b      	ldrh	r3, [r3, r2]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	208e      	movs	r0, #142	; 0x8e
 80077da:	183b      	adds	r3, r7, r0
 80077dc:	1a8a      	subs	r2, r1, r2
 80077de:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	225a      	movs	r2, #90	; 0x5a
 80077e4:	5a9b      	ldrh	r3, [r3, r2]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d100      	bne.n	80077ee <HAL_UART_IRQHandler+0x43e>
 80077ec:	e0ae      	b.n	800794c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d100      	bne.n	80077f8 <HAL_UART_IRQHandler+0x448>
 80077f6:	e0a9      	b.n	800794c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f8:	f3ef 8310 	mrs	r3, PRIMASK
 80077fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80077fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007800:	2488      	movs	r4, #136	; 0x88
 8007802:	193a      	adds	r2, r7, r4
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	2301      	movs	r3, #1
 8007808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f383 8810 	msr	PRIMASK, r3
}
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	494f      	ldr	r1, [pc, #316]	; (800795c <HAL_UART_IRQHandler+0x5ac>)
 800781e:	400a      	ands	r2, r1
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	193b      	adds	r3, r7, r4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f383 8810 	msr	PRIMASK, r3
}
 800782e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007830:	f3ef 8310 	mrs	r3, PRIMASK
 8007834:	61bb      	str	r3, [r7, #24]
  return(result);
 8007836:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	2484      	movs	r4, #132	; 0x84
 800783a:	193a      	adds	r2, r7, r4
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f383 8810 	msr	PRIMASK, r3
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2101      	movs	r1, #1
 8007856:	438a      	bics	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
 800785a:	193b      	adds	r3, r7, r4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787a:	f3ef 8310 	mrs	r3, PRIMASK
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007882:	2480      	movs	r4, #128	; 0x80
 8007884:	193a      	adds	r2, r7, r4
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	2301      	movs	r3, #1
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f383 8810 	msr	PRIMASK, r3
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2110      	movs	r1, #16
 80078a0:	438a      	bics	r2, r1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	193b      	adds	r3, r7, r4
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	f383 8810 	msr	PRIMASK, r3
}
 80078b0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078b2:	183b      	adds	r3, r7, r0
 80078b4:	881a      	ldrh	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0011      	movs	r1, r2
 80078ba:	0018      	movs	r0, r3
 80078bc:	f000 f860 	bl	8007980 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c0:	e044      	b.n	800794c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078c2:	23a4      	movs	r3, #164	; 0xa4
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	035b      	lsls	r3, r3, #13
 80078cc:	4013      	ands	r3, r2
 80078ce:	d010      	beq.n	80078f2 <HAL_UART_IRQHandler+0x542>
 80078d0:	239c      	movs	r3, #156	; 0x9c
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	2380      	movs	r3, #128	; 0x80
 80078d8:	03db      	lsls	r3, r3, #15
 80078da:	4013      	ands	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	0352      	lsls	r2, r2, #13
 80078e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	0018      	movs	r0, r3
 80078ec:	f000 fc40 	bl	8008170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078f0:	e02f      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078f2:	23a4      	movs	r3, #164	; 0xa4
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	4013      	ands	r3, r2
 80078fc:	d00f      	beq.n	800791e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078fe:	23a0      	movs	r3, #160	; 0xa0
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2280      	movs	r2, #128	; 0x80
 8007906:	4013      	ands	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01e      	beq.n	8007950 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	0010      	movs	r0, r2
 800791a:	4798      	blx	r3
    }
    return;
 800791c:	e018      	b.n	8007950 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800791e:	23a4      	movs	r3, #164	; 0xa4
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2240      	movs	r2, #64	; 0x40
 8007926:	4013      	ands	r3, r2
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x5a2>
 800792a:	23a0      	movs	r3, #160	; 0xa0
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2240      	movs	r2, #64	; 0x40
 8007932:	4013      	ands	r3, r2
 8007934:	d00d      	beq.n	8007952 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0018      	movs	r0, r3
 800793a:	f000 fbee 	bl	800811a <UART_EndTransmit_IT>
    return;
 800793e:	e008      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	e006      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	e004      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	e002      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
      return;
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	e000      	b.n	8007952 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007950:	46c0      	nop			; (mov r8, r8)
  }

}
 8007952:	46bd      	mov	sp, r7
 8007954:	b02b      	add	sp, #172	; 0xac
 8007956:	bd90      	pop	{r4, r7, pc}
 8007958:	fffffeff 	.word	0xfffffeff
 800795c:	fffffedf 	.word	0xfffffedf

08007960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b002      	add	sp, #8
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	000a      	movs	r2, r1
 800798a:	1cbb      	adds	r3, r7, #2
 800798c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	46bd      	mov	sp, r7
 8007992:	b002      	add	sp, #8
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079a0:	231e      	movs	r3, #30
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4aaf      	ldr	r2, [pc, #700]	; (8007c84 <UART_SetConfig+0x2ec>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	0019      	movs	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4aaa      	ldr	r2, [pc, #680]	; (8007c88 <UART_SetConfig+0x2f0>)
 80079de:	4013      	ands	r3, r2
 80079e0:	0019      	movs	r1, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	4aa1      	ldr	r2, [pc, #644]	; (8007c8c <UART_SetConfig+0x2f4>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	0019      	movs	r1, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a9d      	ldr	r2, [pc, #628]	; (8007c90 <UART_SetConfig+0x2f8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d127      	bne.n	8007a6e <UART_SetConfig+0xd6>
 8007a1e:	4b9d      	ldr	r3, [pc, #628]	; (8007c94 <UART_SetConfig+0x2fc>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	2203      	movs	r2, #3
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d00d      	beq.n	8007a46 <UART_SetConfig+0xae>
 8007a2a:	d81b      	bhi.n	8007a64 <UART_SetConfig+0xcc>
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d014      	beq.n	8007a5a <UART_SetConfig+0xc2>
 8007a30:	d818      	bhi.n	8007a64 <UART_SetConfig+0xcc>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <UART_SetConfig+0xa4>
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d00a      	beq.n	8007a50 <UART_SetConfig+0xb8>
 8007a3a:	e013      	b.n	8007a64 <UART_SetConfig+0xcc>
 8007a3c:	231f      	movs	r3, #31
 8007a3e:	18fb      	adds	r3, r7, r3
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e065      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007a46:	231f      	movs	r3, #31
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e060      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007a50:	231f      	movs	r3, #31
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2204      	movs	r2, #4
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e05b      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007a5a:	231f      	movs	r3, #31
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	2208      	movs	r2, #8
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e056      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007a64:	231f      	movs	r3, #31
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2210      	movs	r2, #16
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e051      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a89      	ldr	r2, [pc, #548]	; (8007c98 <UART_SetConfig+0x300>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d134      	bne.n	8007ae2 <UART_SetConfig+0x14a>
 8007a78:	4b86      	ldr	r3, [pc, #536]	; (8007c94 <UART_SetConfig+0x2fc>)
 8007a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7c:	23c0      	movs	r3, #192	; 0xc0
 8007a7e:	029b      	lsls	r3, r3, #10
 8007a80:	4013      	ands	r3, r2
 8007a82:	22c0      	movs	r2, #192	; 0xc0
 8007a84:	0292      	lsls	r2, r2, #10
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d017      	beq.n	8007aba <UART_SetConfig+0x122>
 8007a8a:	22c0      	movs	r2, #192	; 0xc0
 8007a8c:	0292      	lsls	r2, r2, #10
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d822      	bhi.n	8007ad8 <UART_SetConfig+0x140>
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	0292      	lsls	r2, r2, #10
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d019      	beq.n	8007ace <UART_SetConfig+0x136>
 8007a9a:	2280      	movs	r2, #128	; 0x80
 8007a9c:	0292      	lsls	r2, r2, #10
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d81a      	bhi.n	8007ad8 <UART_SetConfig+0x140>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <UART_SetConfig+0x118>
 8007aa6:	2280      	movs	r2, #128	; 0x80
 8007aa8:	0252      	lsls	r2, r2, #9
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00a      	beq.n	8007ac4 <UART_SetConfig+0x12c>
 8007aae:	e013      	b.n	8007ad8 <UART_SetConfig+0x140>
 8007ab0:	231f      	movs	r3, #31
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e02b      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007aba:	231f      	movs	r3, #31
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e026      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007ac4:	231f      	movs	r3, #31
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2204      	movs	r2, #4
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e021      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007ace:	231f      	movs	r3, #31
 8007ad0:	18fb      	adds	r3, r7, r3
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e01c      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007ad8:	231f      	movs	r3, #31
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	2210      	movs	r2, #16
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	e017      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a6d      	ldr	r2, [pc, #436]	; (8007c9c <UART_SetConfig+0x304>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d104      	bne.n	8007af6 <UART_SetConfig+0x15e>
 8007aec:	231f      	movs	r3, #31
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	e00d      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a69      	ldr	r2, [pc, #420]	; (8007ca0 <UART_SetConfig+0x308>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d104      	bne.n	8007b0a <UART_SetConfig+0x172>
 8007b00:	231f      	movs	r3, #31
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	e003      	b.n	8007b12 <UART_SetConfig+0x17a>
 8007b0a:	231f      	movs	r3, #31
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	2210      	movs	r2, #16
 8007b10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69da      	ldr	r2, [r3, #28]
 8007b16:	2380      	movs	r3, #128	; 0x80
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d15d      	bne.n	8007bda <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007b1e:	231f      	movs	r3, #31
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d015      	beq.n	8007b54 <UART_SetConfig+0x1bc>
 8007b28:	dc18      	bgt.n	8007b5c <UART_SetConfig+0x1c4>
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d00d      	beq.n	8007b4a <UART_SetConfig+0x1b2>
 8007b2e:	dc15      	bgt.n	8007b5c <UART_SetConfig+0x1c4>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <UART_SetConfig+0x1a2>
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d005      	beq.n	8007b44 <UART_SetConfig+0x1ac>
 8007b38:	e010      	b.n	8007b5c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fe f865 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	0003      	movs	r3, r0
 8007b40:	61bb      	str	r3, [r7, #24]
        break;
 8007b42:	e012      	b.n	8007b6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b44:	4b57      	ldr	r3, [pc, #348]	; (8007ca4 <UART_SetConfig+0x30c>)
 8007b46:	61bb      	str	r3, [r7, #24]
        break;
 8007b48:	e00f      	b.n	8007b6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4a:	f7fd ffd1 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007b4e:	0003      	movs	r3, r0
 8007b50:	61bb      	str	r3, [r7, #24]
        break;
 8007b52:	e00a      	b.n	8007b6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	61bb      	str	r3, [r7, #24]
        break;
 8007b5a:	e006      	b.n	8007b6a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b60:	231e      	movs	r3, #30
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
        break;
 8007b68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d100      	bne.n	8007b72 <UART_SetConfig+0x1da>
 8007b70:	e07b      	b.n	8007c6a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	005a      	lsls	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	18d2      	adds	r2, r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	0019      	movs	r1, r3
 8007b84:	0010      	movs	r0, r2
 8007b86:	f7f8 fad1 	bl	800012c <__udivsi3>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	d91c      	bls.n	8007bd0 <UART_SetConfig+0x238>
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	025b      	lsls	r3, r3, #9
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d217      	bcs.n	8007bd0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	200e      	movs	r0, #14
 8007ba6:	183b      	adds	r3, r7, r0
 8007ba8:	210f      	movs	r1, #15
 8007baa:	438a      	bics	r2, r1
 8007bac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	b299      	uxth	r1, r3
 8007bba:	183b      	adds	r3, r7, r0
 8007bbc:	183a      	adds	r2, r7, r0
 8007bbe:	8812      	ldrh	r2, [r2, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	183a      	adds	r2, r7, r0
 8007bca:	8812      	ldrh	r2, [r2, #0]
 8007bcc:	60da      	str	r2, [r3, #12]
 8007bce:	e04c      	b.n	8007c6a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd0:	231e      	movs	r3, #30
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	e047      	b.n	8007c6a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bda:	231f      	movs	r3, #31
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d015      	beq.n	8007c10 <UART_SetConfig+0x278>
 8007be4:	dc18      	bgt.n	8007c18 <UART_SetConfig+0x280>
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d00d      	beq.n	8007c06 <UART_SetConfig+0x26e>
 8007bea:	dc15      	bgt.n	8007c18 <UART_SetConfig+0x280>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <UART_SetConfig+0x25e>
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d005      	beq.n	8007c00 <UART_SetConfig+0x268>
 8007bf4:	e010      	b.n	8007c18 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf6:	f7fe f807 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8007bfa:	0003      	movs	r3, r0
 8007bfc:	61bb      	str	r3, [r7, #24]
        break;
 8007bfe:	e012      	b.n	8007c26 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c00:	4b28      	ldr	r3, [pc, #160]	; (8007ca4 <UART_SetConfig+0x30c>)
 8007c02:	61bb      	str	r3, [r7, #24]
        break;
 8007c04:	e00f      	b.n	8007c26 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c06:	f7fd ff73 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	61bb      	str	r3, [r7, #24]
        break;
 8007c0e:	e00a      	b.n	8007c26 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c10:	2380      	movs	r3, #128	; 0x80
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	61bb      	str	r3, [r7, #24]
        break;
 8007c16:	e006      	b.n	8007c26 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c1c:	231e      	movs	r3, #30
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
        break;
 8007c24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	085a      	lsrs	r2, r3, #1
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	18d2      	adds	r2, r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	0019      	movs	r1, r3
 8007c3c:	0010      	movs	r0, r2
 8007c3e:	f7f8 fa75 	bl	800012c <__udivsi3>
 8007c42:	0003      	movs	r3, r0
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	d909      	bls.n	8007c62 <UART_SetConfig+0x2ca>
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	025b      	lsls	r3, r3, #9
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d204      	bcs.n	8007c62 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	60da      	str	r2, [r3, #12]
 8007c60:	e003      	b.n	8007c6a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c62:	231e      	movs	r3, #30
 8007c64:	18fb      	adds	r3, r7, r3
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c76:	231e      	movs	r3, #30
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	781b      	ldrb	r3, [r3, #0]
}
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b008      	add	sp, #32
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	efff69f3 	.word	0xefff69f3
 8007c88:	ffffcfff 	.word	0xffffcfff
 8007c8c:	fffff4ff 	.word	0xfffff4ff
 8007c90:	40013800 	.word	0x40013800
 8007c94:	40021000 	.word	0x40021000
 8007c98:	40004400 	.word	0x40004400
 8007c9c:	40004800 	.word	0x40004800
 8007ca0:	40004c00 	.word	0x40004c00
 8007ca4:	007a1200 	.word	0x007a1200

08007ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d00b      	beq.n	8007cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a4a      	ldr	r2, [pc, #296]	; (8007dec <UART_AdvFeatureConfig+0x144>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	0019      	movs	r1, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	4a43      	ldr	r2, [pc, #268]	; (8007df0 <UART_AdvFeatureConfig+0x148>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	d00b      	beq.n	8007d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4a3b      	ldr	r2, [pc, #236]	; (8007df4 <UART_AdvFeatureConfig+0x14c>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	0019      	movs	r1, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	4a34      	ldr	r2, [pc, #208]	; (8007df8 <UART_AdvFeatureConfig+0x150>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	0019      	movs	r1, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d00b      	beq.n	8007d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4a2c      	ldr	r2, [pc, #176]	; (8007dfc <UART_AdvFeatureConfig+0x154>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	0019      	movs	r1, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2220      	movs	r2, #32
 8007d60:	4013      	ands	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	4a25      	ldr	r2, [pc, #148]	; (8007e00 <UART_AdvFeatureConfig+0x158>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	0019      	movs	r1, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	2240      	movs	r2, #64	; 0x40
 8007d82:	4013      	ands	r3, r2
 8007d84:	d01d      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <UART_AdvFeatureConfig+0x15c>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	0019      	movs	r1, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da2:	2380      	movs	r3, #128	; 0x80
 8007da4:	035b      	lsls	r3, r3, #13
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d10b      	bne.n	8007dc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <UART_AdvFeatureConfig+0x160>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	0019      	movs	r1, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	4013      	ands	r3, r2
 8007dca:	d00b      	beq.n	8007de4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <UART_AdvFeatureConfig+0x164>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	0019      	movs	r1, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b002      	add	sp, #8
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	fffdffff 	.word	0xfffdffff
 8007df0:	fffeffff 	.word	0xfffeffff
 8007df4:	fffbffff 	.word	0xfffbffff
 8007df8:	ffff7fff 	.word	0xffff7fff
 8007dfc:	ffffefff 	.word	0xffffefff
 8007e00:	ffffdfff 	.word	0xffffdfff
 8007e04:	ffefffff 	.word	0xffefffff
 8007e08:	ff9fffff 	.word	0xff9fffff
 8007e0c:	fff7ffff 	.word	0xfff7ffff

08007e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e20:	f7fa faa0 	bl	8002364 <HAL_GetTick>
 8007e24:	0003      	movs	r3, r0
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2208      	movs	r2, #8
 8007e30:	4013      	ands	r3, r2
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d10c      	bne.n	8007e50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2280      	movs	r2, #128	; 0x80
 8007e3a:	0391      	lsls	r1, r2, #14
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <UART_CheckIdleState+0x8c>)
 8007e40:	9200      	str	r2, [sp, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f000 f82c 	bl	8007ea0 <UART_WaitOnFlagUntilTimeout>
 8007e48:	1e03      	subs	r3, r0, #0
 8007e4a:	d001      	beq.n	8007e50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e021      	b.n	8007e94 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2204      	movs	r2, #4
 8007e58:	4013      	ands	r3, r2
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d10c      	bne.n	8007e78 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2280      	movs	r2, #128	; 0x80
 8007e62:	03d1      	lsls	r1, r2, #15
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4a0d      	ldr	r2, [pc, #52]	; (8007e9c <UART_CheckIdleState+0x8c>)
 8007e68:	9200      	str	r2, [sp, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f000 f818 	bl	8007ea0 <UART_WaitOnFlagUntilTimeout>
 8007e70:	1e03      	subs	r3, r0, #0
 8007e72:	d001      	beq.n	8007e78 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e00d      	b.n	8007e94 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2274      	movs	r2, #116	; 0x74
 8007e8e:	2100      	movs	r1, #0
 8007e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	0018      	movs	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b004      	add	sp, #16
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	01ffffff 	.word	0x01ffffff

08007ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b094      	sub	sp, #80	; 0x50
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb0:	e0a3      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	d100      	bne.n	8007eba <UART_WaitOnFlagUntilTimeout+0x1a>
 8007eb8:	e09f      	b.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eba:	f7fa fa53 	bl	8002364 <HAL_GetTick>
 8007ebe:	0002      	movs	r2, r0
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d302      	bcc.n	8007ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d13d      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8007eda:	2301      	movs	r3, #1
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	f383 8810 	msr	PRIMASK, r3
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	494c      	ldr	r1, [pc, #304]	; (8008024 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007ef2:	400a      	ands	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	f383 8810 	msr	PRIMASK, r3
}
 8007f00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f02:	f3ef 8310 	mrs	r3, PRIMASK
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	f383 8810 	msr	PRIMASK, r3
}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2101      	movs	r1, #1
 8007f24:	438a      	bics	r2, r1
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	f383 8810 	msr	PRIMASK, r3
}
 8007f32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2274      	movs	r2, #116	; 0x74
 8007f44:	2100      	movs	r1, #0
 8007f46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e067      	b.n	800801c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2204      	movs	r2, #4
 8007f54:	4013      	ands	r3, r2
 8007f56:	d050      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69da      	ldr	r2, [r3, #28]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	401a      	ands	r2, r3
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d146      	bne.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2280      	movs	r2, #128	; 0x80
 8007f72:	0112      	lsls	r2, r2, #4
 8007f74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f76:	f3ef 8310 	mrs	r3, PRIMASK
 8007f7a:	613b      	str	r3, [r7, #16]
  return(result);
 8007f7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f383 8810 	msr	PRIMASK, r3
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4923      	ldr	r1, [pc, #140]	; (8008024 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007f98:	400a      	ands	r2, r1
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f383 8810 	msr	PRIMASK, r3
}
 8007fa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8007fae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	f383 8810 	msr	PRIMASK, r3
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2101      	movs	r1, #1
 8007fca:	438a      	bics	r2, r1
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	f383 8810 	msr	PRIMASK, r3
}
 8007fd8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2280      	movs	r2, #128	; 0x80
 8007fea:	2120      	movs	r1, #32
 8007fec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2274      	movs	r2, #116	; 0x74
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e010      	b.n	800801c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	4013      	ands	r3, r2
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	425a      	negs	r2, r3
 800800a:	4153      	adcs	r3, r2
 800800c:	b2db      	uxtb	r3, r3
 800800e:	001a      	movs	r2, r3
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d100      	bne.n	800801a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008018:	e74b      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	0018      	movs	r0, r3
 800801e:	46bd      	mov	sp, r7
 8008020:	b014      	add	sp, #80	; 0x50
 8008022:	bd80      	pop	{r7, pc}
 8008024:	fffffe5f 	.word	0xfffffe5f

08008028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008030:	f3ef 8310 	mrs	r3, PRIMASK
 8008034:	617b      	str	r3, [r7, #20]
  return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
 800803a:	2301      	movs	r3, #1
 800803c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	f383 8810 	msr	PRIMASK, r3
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4925      	ldr	r1, [pc, #148]	; (80080e8 <UART_EndRxTransfer+0xc0>)
 8008052:	400a      	ands	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	623b      	str	r3, [r7, #32]
  return(result);
 8008068:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	633b      	str	r3, [r7, #48]	; 0x30
 800806c:	2301      	movs	r3, #1
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	f383 8810 	msr	PRIMASK, r3
}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2101      	movs	r1, #1
 8008084:	438a      	bics	r2, r1
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	f383 8810 	msr	PRIMASK, r3
}
 8008092:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008098:	2b01      	cmp	r3, #1
 800809a:	d118      	bne.n	80080ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809c:	f3ef 8310 	mrs	r3, PRIMASK
 80080a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a6:	2301      	movs	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f383 8810 	msr	PRIMASK, r3
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2110      	movs	r1, #16
 80080be:	438a      	bics	r2, r1
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f383 8810 	msr	PRIMASK, r3
}
 80080cc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080e0:	46c0      	nop			; (mov r8, r8)
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b00e      	add	sp, #56	; 0x38
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	fffffedf 	.word	0xfffffedf

080080ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	225a      	movs	r2, #90	; 0x5a
 80080fe:	2100      	movs	r1, #0
 8008100:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2252      	movs	r2, #82	; 0x52
 8008106:	2100      	movs	r1, #0
 8008108:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	0018      	movs	r0, r3
 800810e:	f7ff fc2f 	bl	8007970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	46bd      	mov	sp, r7
 8008116:	b004      	add	sp, #16
 8008118:	bd80      	pop	{r7, pc}

0800811a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008122:	f3ef 8310 	mrs	r3, PRIMASK
 8008126:	60bb      	str	r3, [r7, #8]
  return(result);
 8008128:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2140      	movs	r1, #64	; 0x40
 8008144:	438a      	bics	r2, r1
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f383 8810 	msr	PRIMASK, r3
}
 8008152:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	0018      	movs	r0, r3
 8008164:	f7ff fbfc 	bl	8007960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b006      	add	sp, #24
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}

08008180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2244      	movs	r2, #68	; 0x44
 800818c:	2100      	movs	r1, #0
 800818e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <USB_EnableGlobalInt+0x28>)
 8008192:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	b299      	uxth	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	0018      	movs	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b004      	add	sp, #16
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	0000bf80 	.word	0x0000bf80

080081ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <USB_DisableGlobalInt+0x30>)
 80081b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2240      	movs	r2, #64	; 0x40
 80081bc:	5a9b      	ldrh	r3, [r3, r2]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	b292      	uxth	r2, r2
 80081c4:	43d2      	mvns	r2, r2
 80081c6:	b292      	uxth	r2, r2
 80081c8:	4013      	ands	r3, r2
 80081ca:	b299      	uxth	r1, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2240      	movs	r2, #64	; 0x40
 80081d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b004      	add	sp, #16
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0000bf80 	.word	0x0000bf80

080081e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081e0:	b084      	sub	sp, #16
 80081e2:	b590      	push	{r4, r7, lr}
 80081e4:	46c6      	mov	lr, r8
 80081e6:	b500      	push	{lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	2004      	movs	r0, #4
 80081f0:	2410      	movs	r4, #16
 80081f2:	46a4      	mov	ip, r4
 80081f4:	2408      	movs	r4, #8
 80081f6:	46a0      	mov	r8, r4
 80081f8:	44b8      	add	r8, r7
 80081fa:	44c4      	add	ip, r8
 80081fc:	4460      	add	r0, ip
 80081fe:	6001      	str	r1, [r0, #0]
 8008200:	6042      	str	r2, [r0, #4]
 8008202:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2240      	movs	r2, #64	; 0x40
 8008208:	2101      	movs	r1, #1
 800820a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2240      	movs	r2, #64	; 0x40
 8008210:	2100      	movs	r1, #0
 8008212:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2244      	movs	r2, #68	; 0x44
 8008218:	2100      	movs	r1, #0
 800821a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2250      	movs	r2, #80	; 0x50
 8008220:	2100      	movs	r1, #0
 8008222:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	0018      	movs	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	b002      	add	sp, #8
 800822c:	bc80      	pop	{r7}
 800822e:	46b8      	mov	r8, r7
 8008230:	bc90      	pop	{r4, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	b004      	add	sp, #16
 8008236:	4718      	bx	r3

08008238 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b09c      	sub	sp, #112	; 0x70
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008242:	236f      	movs	r3, #111	; 0x6f
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	18d3      	adds	r3, r2, r3
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	236c      	movs	r3, #108	; 0x6c
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	49cf      	ldr	r1, [pc, #828]	; (800859c <USB_ActivateEndpoint+0x364>)
 800825e:	400a      	ands	r2, r1
 8008260:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	2b03      	cmp	r3, #3
 8008268:	d017      	beq.n	800829a <USB_ActivateEndpoint+0x62>
 800826a:	dc28      	bgt.n	80082be <USB_ActivateEndpoint+0x86>
 800826c:	2b02      	cmp	r3, #2
 800826e:	d00e      	beq.n	800828e <USB_ActivateEndpoint+0x56>
 8008270:	dc25      	bgt.n	80082be <USB_ActivateEndpoint+0x86>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <USB_ActivateEndpoint+0x44>
 8008276:	2b01      	cmp	r3, #1
 8008278:	d018      	beq.n	80082ac <USB_ActivateEndpoint+0x74>
 800827a:	e020      	b.n	80082be <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800827c:	226c      	movs	r2, #108	; 0x6c
 800827e:	18bb      	adds	r3, r7, r2
 8008280:	18ba      	adds	r2, r7, r2
 8008282:	8812      	ldrh	r2, [r2, #0]
 8008284:	2180      	movs	r1, #128	; 0x80
 8008286:	0089      	lsls	r1, r1, #2
 8008288:	430a      	orrs	r2, r1
 800828a:	801a      	strh	r2, [r3, #0]
      break;
 800828c:	e01c      	b.n	80082c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800828e:	226c      	movs	r2, #108	; 0x6c
 8008290:	18bb      	adds	r3, r7, r2
 8008292:	18ba      	adds	r2, r7, r2
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	801a      	strh	r2, [r3, #0]
      break;
 8008298:	e016      	b.n	80082c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800829a:	226c      	movs	r2, #108	; 0x6c
 800829c:	18bb      	adds	r3, r7, r2
 800829e:	18ba      	adds	r2, r7, r2
 80082a0:	8812      	ldrh	r2, [r2, #0]
 80082a2:	21c0      	movs	r1, #192	; 0xc0
 80082a4:	00c9      	lsls	r1, r1, #3
 80082a6:	430a      	orrs	r2, r1
 80082a8:	801a      	strh	r2, [r3, #0]
      break;
 80082aa:	e00d      	b.n	80082c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082ac:	226c      	movs	r2, #108	; 0x6c
 80082ae:	18bb      	adds	r3, r7, r2
 80082b0:	18ba      	adds	r2, r7, r2
 80082b2:	8812      	ldrh	r2, [r2, #0]
 80082b4:	2180      	movs	r1, #128	; 0x80
 80082b6:	00c9      	lsls	r1, r1, #3
 80082b8:	430a      	orrs	r2, r1
 80082ba:	801a      	strh	r2, [r3, #0]
      break;
 80082bc:	e004      	b.n	80082c8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80082be:	236f      	movs	r3, #111	; 0x6f
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18d3      	adds	r3, r2, r3
 80082d2:	226c      	movs	r2, #108	; 0x6c
 80082d4:	18ba      	adds	r2, r7, r2
 80082d6:	8812      	ldrh	r2, [r2, #0]
 80082d8:	49b1      	ldr	r1, [pc, #708]	; (80085a0 <USB_ActivateEndpoint+0x368>)
 80082da:	430a      	orrs	r2, r1
 80082dc:	b292      	uxth	r2, r2
 80082de:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	18d3      	adds	r3, r2, r3
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	b21b      	sxth	r3, r3
 80082f0:	4aac      	ldr	r2, [pc, #688]	; (80085a4 <USB_ActivateEndpoint+0x36c>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	b21a      	sxth	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b21b      	sxth	r3, r3
 80082fc:	4313      	orrs	r3, r2
 80082fe:	b21a      	sxth	r2, r3
 8008300:	2166      	movs	r1, #102	; 0x66
 8008302:	187b      	adds	r3, r7, r1
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	18d3      	adds	r3, r2, r3
 8008310:	187a      	adds	r2, r7, r1
 8008312:	8812      	ldrh	r2, [r2, #0]
 8008314:	49a2      	ldr	r1, [pc, #648]	; (80085a0 <USB_ActivateEndpoint+0x368>)
 8008316:	430a      	orrs	r2, r1
 8008318:	b292      	uxth	r2, r2
 800831a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	7b1b      	ldrb	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d000      	beq.n	8008326 <USB_ActivateEndpoint+0xee>
 8008324:	e150      	b.n	80085c8 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d100      	bne.n	8008330 <USB_ActivateEndpoint+0xf8>
 800832e:	e07a      	b.n	8008426 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2250      	movs	r2, #80	; 0x50
 8008338:	5a9b      	ldrh	r3, [r3, r2]
 800833a:	b29b      	uxth	r3, r3
 800833c:	001a      	movs	r2, r3
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	189b      	adds	r3, r3, r2
 8008342:	61bb      	str	r3, [r7, #24]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	00da      	lsls	r2, r3, #3
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	18d3      	adds	r3, r2, r3
 800834e:	2280      	movs	r2, #128	; 0x80
 8008350:	00d2      	lsls	r2, r2, #3
 8008352:	4694      	mov	ip, r2
 8008354:	4463      	add	r3, ip
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	88db      	ldrh	r3, [r3, #6]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	b29b      	uxth	r3, r3
 8008360:	18db      	adds	r3, r3, r3
 8008362:	b29a      	uxth	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	18d2      	adds	r2, r2, r3
 8008372:	2112      	movs	r1, #18
 8008374:	187b      	adds	r3, r7, r1
 8008376:	8812      	ldrh	r2, [r2, #0]
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	187b      	adds	r3, r7, r1
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	4013      	ands	r3, r2
 8008382:	d016      	beq.n	80083b2 <USB_ActivateEndpoint+0x17a>
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	18d3      	adds	r3, r2, r3
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29a      	uxth	r2, r3
 8008392:	2010      	movs	r0, #16
 8008394:	183b      	adds	r3, r7, r0
 8008396:	4983      	ldr	r1, [pc, #524]	; (80085a4 <USB_ActivateEndpoint+0x36c>)
 8008398:	400a      	ands	r2, r1
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	18d3      	adds	r3, r2, r3
 80083a6:	183a      	adds	r2, r7, r0
 80083a8:	8812      	ldrh	r2, [r2, #0]
 80083aa:	497f      	ldr	r1, [pc, #508]	; (80085a8 <USB_ActivateEndpoint+0x370>)
 80083ac:	430a      	orrs	r2, r1
 80083ae:	b292      	uxth	r2, r2
 80083b0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	78db      	ldrb	r3, [r3, #3]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d01d      	beq.n	80083f6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	18d3      	adds	r3, r2, r3
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	200c      	movs	r0, #12
 80083ca:	183b      	adds	r3, r7, r0
 80083cc:	4977      	ldr	r1, [pc, #476]	; (80085ac <USB_ActivateEndpoint+0x374>)
 80083ce:	400a      	ands	r2, r1
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	183b      	adds	r3, r7, r0
 80083d4:	183a      	adds	r2, r7, r0
 80083d6:	8812      	ldrh	r2, [r2, #0]
 80083d8:	2120      	movs	r1, #32
 80083da:	404a      	eors	r2, r1
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	18d3      	adds	r3, r2, r3
 80083e8:	183a      	adds	r2, r7, r0
 80083ea:	8812      	ldrh	r2, [r2, #0]
 80083ec:	496c      	ldr	r1, [pc, #432]	; (80085a0 <USB_ActivateEndpoint+0x368>)
 80083ee:	430a      	orrs	r2, r1
 80083f0:	b292      	uxth	r2, r2
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e27a      	b.n	80088ec <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	18d3      	adds	r3, r2, r3
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29a      	uxth	r2, r3
 8008404:	200e      	movs	r0, #14
 8008406:	183b      	adds	r3, r7, r0
 8008408:	4968      	ldr	r1, [pc, #416]	; (80085ac <USB_ActivateEndpoint+0x374>)
 800840a:	400a      	ands	r2, r1
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	18d3      	adds	r3, r2, r3
 8008418:	183a      	adds	r2, r7, r0
 800841a:	8812      	ldrh	r2, [r2, #0]
 800841c:	4960      	ldr	r1, [pc, #384]	; (80085a0 <USB_ActivateEndpoint+0x368>)
 800841e:	430a      	orrs	r2, r1
 8008420:	b292      	uxth	r2, r2
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e262      	b.n	80088ec <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	633b      	str	r3, [r7, #48]	; 0x30
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2250      	movs	r2, #80	; 0x50
 800842e:	5a9b      	ldrh	r3, [r3, r2]
 8008430:	b29b      	uxth	r3, r3
 8008432:	001a      	movs	r2, r3
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	189b      	adds	r3, r3, r2
 8008438:	633b      	str	r3, [r7, #48]	; 0x30
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	00da      	lsls	r2, r3, #3
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	18d3      	adds	r3, r2, r3
 8008444:	4a5a      	ldr	r2, [pc, #360]	; (80085b0 <USB_ActivateEndpoint+0x378>)
 8008446:	4694      	mov	ip, r2
 8008448:	4463      	add	r3, ip
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	88db      	ldrh	r3, [r3, #6]
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	18db      	adds	r3, r3, r3
 8008456:	b29a      	uxth	r2, r3
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2250      	movs	r2, #80	; 0x50
 8008464:	5a9b      	ldrh	r3, [r3, r2]
 8008466:	b29b      	uxth	r3, r3
 8008468:	001a      	movs	r2, r3
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	189b      	adds	r3, r3, r2
 800846e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	00da      	lsls	r2, r3, #3
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	18d3      	adds	r3, r2, r3
 800847a:	4a4e      	ldr	r2, [pc, #312]	; (80085b4 <USB_ActivateEndpoint+0x37c>)
 800847c:	4694      	mov	ip, r2
 800847e:	4463      	add	r3, ip
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d110      	bne.n	80084ac <USB_ActivateEndpoint+0x274>
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	4a49      	ldr	r2, [pc, #292]	; (80085b8 <USB_ActivateEndpoint+0x380>)
 8008492:	4013      	ands	r3, r2
 8008494:	b29a      	uxth	r2, r3
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	4a46      	ldr	r2, [pc, #280]	; (80085bc <USB_ActivateEndpoint+0x384>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	e02b      	b.n	8008504 <USB_ActivateEndpoint+0x2cc>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b3e      	cmp	r3, #62	; 0x3e
 80084b2:	d812      	bhi.n	80084da <USB_ActivateEndpoint+0x2a2>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2201      	movs	r2, #1
 80084c2:	4013      	ands	r3, r2
 80084c4:	d002      	beq.n	80084cc <USB_ActivateEndpoint+0x294>
 80084c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c8:	3301      	adds	r3, #1
 80084ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80084cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	029b      	lsls	r3, r3, #10
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	e014      	b.n	8008504 <USB_ActivateEndpoint+0x2cc>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	221f      	movs	r2, #31
 80084e8:	4013      	ands	r3, r2
 80084ea:	d102      	bne.n	80084f2 <USB_ActivateEndpoint+0x2ba>
 80084ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ee:	3b01      	subs	r3, #1
 80084f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	029b      	lsls	r3, r3, #10
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4a30      	ldr	r2, [pc, #192]	; (80085bc <USB_ActivateEndpoint+0x384>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	18d2      	adds	r2, r2, r3
 800850e:	2122      	movs	r1, #34	; 0x22
 8008510:	187b      	adds	r3, r7, r1
 8008512:	8812      	ldrh	r2, [r2, #0]
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	187b      	adds	r3, r7, r1
 8008518:	881a      	ldrh	r2, [r3, #0]
 800851a:	2380      	movs	r3, #128	; 0x80
 800851c:	01db      	lsls	r3, r3, #7
 800851e:	4013      	ands	r3, r2
 8008520:	d016      	beq.n	8008550 <USB_ActivateEndpoint+0x318>
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	18d3      	adds	r3, r2, r3
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29a      	uxth	r2, r3
 8008530:	2020      	movs	r0, #32
 8008532:	183b      	adds	r3, r7, r0
 8008534:	491b      	ldr	r1, [pc, #108]	; (80085a4 <USB_ActivateEndpoint+0x36c>)
 8008536:	400a      	ands	r2, r1
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	18d3      	adds	r3, r2, r3
 8008544:	183a      	adds	r2, r7, r0
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	491d      	ldr	r1, [pc, #116]	; (80085c0 <USB_ActivateEndpoint+0x388>)
 800854a:	430a      	orrs	r2, r1
 800854c:	b292      	uxth	r2, r2
 800854e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	201e      	movs	r0, #30
 8008560:	183b      	adds	r3, r7, r0
 8008562:	4918      	ldr	r1, [pc, #96]	; (80085c4 <USB_ActivateEndpoint+0x38c>)
 8008564:	400a      	ands	r2, r1
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	183b      	adds	r3, r7, r0
 800856a:	183a      	adds	r2, r7, r0
 800856c:	8812      	ldrh	r2, [r2, #0]
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	0149      	lsls	r1, r1, #5
 8008572:	404a      	eors	r2, r1
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	183b      	adds	r3, r7, r0
 8008578:	183a      	adds	r2, r7, r0
 800857a:	8812      	ldrh	r2, [r2, #0]
 800857c:	2180      	movs	r1, #128	; 0x80
 800857e:	0189      	lsls	r1, r1, #6
 8008580:	404a      	eors	r2, r1
 8008582:	801a      	strh	r2, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	18d3      	adds	r3, r2, r3
 800858e:	183a      	adds	r2, r7, r0
 8008590:	8812      	ldrh	r2, [r2, #0]
 8008592:	4903      	ldr	r1, [pc, #12]	; (80085a0 <USB_ActivateEndpoint+0x368>)
 8008594:	430a      	orrs	r2, r1
 8008596:	b292      	uxth	r2, r2
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e1a7      	b.n	80088ec <USB_ActivateEndpoint+0x6b4>
 800859c:	ffff898f 	.word	0xffff898f
 80085a0:	ffff8080 	.word	0xffff8080
 80085a4:	ffff8f8f 	.word	0xffff8f8f
 80085a8:	ffff80c0 	.word	0xffff80c0
 80085ac:	ffff8fbf 	.word	0xffff8fbf
 80085b0:	00000404 	.word	0x00000404
 80085b4:	00000406 	.word	0x00000406
 80085b8:	ffff83ff 	.word	0xffff83ff
 80085bc:	ffff8000 	.word	0xffff8000
 80085c0:	ffffc080 	.word	0xffffc080
 80085c4:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	78db      	ldrb	r3, [r3, #3]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d117      	bne.n	8008600 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	18d3      	adds	r3, r2, r3
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	2062      	movs	r0, #98	; 0x62
 80085e0:	183b      	adds	r3, r7, r0
 80085e2:	49c6      	ldr	r1, [pc, #792]	; (80088fc <USB_ActivateEndpoint+0x6c4>)
 80085e4:	400a      	ands	r2, r1
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	18d3      	adds	r3, r2, r3
 80085f2:	183a      	adds	r2, r7, r0
 80085f4:	8812      	ldrh	r2, [r2, #0]
 80085f6:	49c2      	ldr	r1, [pc, #776]	; (8008900 <USB_ActivateEndpoint+0x6c8>)
 80085f8:	430a      	orrs	r2, r1
 80085fa:	b292      	uxth	r2, r2
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	e016      	b.n	800862e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	18d3      	adds	r3, r2, r3
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29a      	uxth	r2, r3
 800860e:	2064      	movs	r0, #100	; 0x64
 8008610:	183b      	adds	r3, r7, r0
 8008612:	49bc      	ldr	r1, [pc, #752]	; (8008904 <USB_ActivateEndpoint+0x6cc>)
 8008614:	400a      	ands	r2, r1
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	183a      	adds	r2, r7, r0
 8008624:	8812      	ldrh	r2, [r2, #0]
 8008626:	49b8      	ldr	r1, [pc, #736]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 8008628:	430a      	orrs	r2, r1
 800862a:	b292      	uxth	r2, r2
 800862c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2250      	movs	r2, #80	; 0x50
 8008636:	5a9b      	ldrh	r3, [r3, r2]
 8008638:	b29b      	uxth	r3, r3
 800863a:	001a      	movs	r2, r3
 800863c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800863e:	189b      	adds	r3, r3, r2
 8008640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	00da      	lsls	r2, r3, #3
 8008648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800864a:	18d3      	adds	r3, r2, r3
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	00d2      	lsls	r2, r2, #3
 8008650:	4694      	mov	ip, r2
 8008652:	4463      	add	r3, ip
 8008654:	65bb      	str	r3, [r7, #88]	; 0x58
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	891b      	ldrh	r3, [r3, #8]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	18db      	adds	r3, r3, r3
 8008660:	b29a      	uxth	r2, r3
 8008662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	657b      	str	r3, [r7, #84]	; 0x54
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2250      	movs	r2, #80	; 0x50
 800866e:	5a9b      	ldrh	r3, [r3, r2]
 8008670:	b29b      	uxth	r3, r3
 8008672:	001a      	movs	r2, r3
 8008674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008676:	189b      	adds	r3, r3, r2
 8008678:	657b      	str	r3, [r7, #84]	; 0x54
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	00da      	lsls	r2, r3, #3
 8008680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008682:	18d3      	adds	r3, r2, r3
 8008684:	4aa1      	ldr	r2, [pc, #644]	; (800890c <USB_ActivateEndpoint+0x6d4>)
 8008686:	4694      	mov	ip, r2
 8008688:	4463      	add	r3, ip
 800868a:	653b      	str	r3, [r7, #80]	; 0x50
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	895b      	ldrh	r3, [r3, #10]
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	b29b      	uxth	r3, r3
 8008694:	18db      	adds	r3, r3, r3
 8008696:	b29a      	uxth	r2, r3
 8008698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d000      	beq.n	80086a6 <USB_ActivateEndpoint+0x46e>
 80086a4:	e087      	b.n	80087b6 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	18d2      	adds	r2, r2, r3
 80086b0:	2140      	movs	r1, #64	; 0x40
 80086b2:	187b      	adds	r3, r7, r1
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	881a      	ldrh	r2, [r3, #0]
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	01db      	lsls	r3, r3, #7
 80086c0:	4013      	ands	r3, r2
 80086c2:	d016      	beq.n	80086f2 <USB_ActivateEndpoint+0x4ba>
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	18d3      	adds	r3, r2, r3
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	203e      	movs	r0, #62	; 0x3e
 80086d4:	183b      	adds	r3, r7, r0
 80086d6:	4989      	ldr	r1, [pc, #548]	; (80088fc <USB_ActivateEndpoint+0x6c4>)
 80086d8:	400a      	ands	r2, r1
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	18d3      	adds	r3, r2, r3
 80086e6:	183a      	adds	r2, r7, r0
 80086e8:	8812      	ldrh	r2, [r2, #0]
 80086ea:	4989      	ldr	r1, [pc, #548]	; (8008910 <USB_ActivateEndpoint+0x6d8>)
 80086ec:	430a      	orrs	r2, r1
 80086ee:	b292      	uxth	r2, r2
 80086f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	18d2      	adds	r2, r2, r3
 80086fc:	213c      	movs	r1, #60	; 0x3c
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	8812      	ldrh	r2, [r2, #0]
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	187b      	adds	r3, r7, r1
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	2240      	movs	r2, #64	; 0x40
 800870a:	4013      	ands	r3, r2
 800870c:	d016      	beq.n	800873c <USB_ActivateEndpoint+0x504>
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29a      	uxth	r2, r3
 800871c:	203a      	movs	r0, #58	; 0x3a
 800871e:	183b      	adds	r3, r7, r0
 8008720:	4976      	ldr	r1, [pc, #472]	; (80088fc <USB_ActivateEndpoint+0x6c4>)
 8008722:	400a      	ands	r2, r1
 8008724:	801a      	strh	r2, [r3, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	18d3      	adds	r3, r2, r3
 8008730:	183a      	adds	r2, r7, r0
 8008732:	8812      	ldrh	r2, [r2, #0]
 8008734:	4977      	ldr	r1, [pc, #476]	; (8008914 <USB_ActivateEndpoint+0x6dc>)
 8008736:	430a      	orrs	r2, r1
 8008738:	b292      	uxth	r2, r2
 800873a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	18d3      	adds	r3, r2, r3
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29a      	uxth	r2, r3
 800874a:	2038      	movs	r0, #56	; 0x38
 800874c:	183b      	adds	r3, r7, r0
 800874e:	4972      	ldr	r1, [pc, #456]	; (8008918 <USB_ActivateEndpoint+0x6e0>)
 8008750:	400a      	ands	r2, r1
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	183b      	adds	r3, r7, r0
 8008756:	183a      	adds	r2, r7, r0
 8008758:	8812      	ldrh	r2, [r2, #0]
 800875a:	2180      	movs	r1, #128	; 0x80
 800875c:	0149      	lsls	r1, r1, #5
 800875e:	404a      	eors	r2, r1
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	183b      	adds	r3, r7, r0
 8008764:	183a      	adds	r2, r7, r0
 8008766:	8812      	ldrh	r2, [r2, #0]
 8008768:	2180      	movs	r1, #128	; 0x80
 800876a:	0189      	lsls	r1, r1, #6
 800876c:	404a      	eors	r2, r1
 800876e:	801a      	strh	r2, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	18d3      	adds	r3, r2, r3
 800877a:	183a      	adds	r2, r7, r0
 800877c:	8812      	ldrh	r2, [r2, #0]
 800877e:	4962      	ldr	r1, [pc, #392]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 8008780:	430a      	orrs	r2, r1
 8008782:	b292      	uxth	r2, r2
 8008784:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	18d3      	adds	r3, r2, r3
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b29a      	uxth	r2, r3
 8008794:	2036      	movs	r0, #54	; 0x36
 8008796:	183b      	adds	r3, r7, r0
 8008798:	4960      	ldr	r1, [pc, #384]	; (800891c <USB_ActivateEndpoint+0x6e4>)
 800879a:	400a      	ands	r2, r1
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	18d3      	adds	r3, r2, r3
 80087a8:	183a      	adds	r2, r7, r0
 80087aa:	8812      	ldrh	r2, [r2, #0]
 80087ac:	4956      	ldr	r1, [pc, #344]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 80087ae:	430a      	orrs	r2, r1
 80087b0:	b292      	uxth	r2, r2
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e09a      	b.n	80088ec <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	18d2      	adds	r2, r2, r3
 80087c0:	214e      	movs	r1, #78	; 0x4e
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	8812      	ldrh	r2, [r2, #0]
 80087c6:	801a      	strh	r2, [r3, #0]
 80087c8:	187b      	adds	r3, r7, r1
 80087ca:	881a      	ldrh	r2, [r3, #0]
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	01db      	lsls	r3, r3, #7
 80087d0:	4013      	ands	r3, r2
 80087d2:	d016      	beq.n	8008802 <USB_ActivateEndpoint+0x5ca>
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	18d3      	adds	r3, r2, r3
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	204c      	movs	r0, #76	; 0x4c
 80087e4:	183b      	adds	r3, r7, r0
 80087e6:	4945      	ldr	r1, [pc, #276]	; (80088fc <USB_ActivateEndpoint+0x6c4>)
 80087e8:	400a      	ands	r2, r1
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	18d3      	adds	r3, r2, r3
 80087f6:	183a      	adds	r2, r7, r0
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	4945      	ldr	r1, [pc, #276]	; (8008910 <USB_ActivateEndpoint+0x6d8>)
 80087fc:	430a      	orrs	r2, r1
 80087fe:	b292      	uxth	r2, r2
 8008800:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	18d2      	adds	r2, r2, r3
 800880c:	214a      	movs	r1, #74	; 0x4a
 800880e:	187b      	adds	r3, r7, r1
 8008810:	8812      	ldrh	r2, [r2, #0]
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	187b      	adds	r3, r7, r1
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	2240      	movs	r2, #64	; 0x40
 800881a:	4013      	ands	r3, r2
 800881c:	d016      	beq.n	800884c <USB_ActivateEndpoint+0x614>
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	18d3      	adds	r3, r2, r3
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29a      	uxth	r2, r3
 800882c:	2048      	movs	r0, #72	; 0x48
 800882e:	183b      	adds	r3, r7, r0
 8008830:	4932      	ldr	r1, [pc, #200]	; (80088fc <USB_ActivateEndpoint+0x6c4>)
 8008832:	400a      	ands	r2, r1
 8008834:	801a      	strh	r2, [r3, #0]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	18d3      	adds	r3, r2, r3
 8008840:	183a      	adds	r2, r7, r0
 8008842:	8812      	ldrh	r2, [r2, #0]
 8008844:	4933      	ldr	r1, [pc, #204]	; (8008914 <USB_ActivateEndpoint+0x6dc>)
 8008846:	430a      	orrs	r2, r1
 8008848:	b292      	uxth	r2, r2
 800884a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	78db      	ldrb	r3, [r3, #3]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d01d      	beq.n	8008890 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	18d3      	adds	r3, r2, r3
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29a      	uxth	r2, r3
 8008862:	2044      	movs	r0, #68	; 0x44
 8008864:	183b      	adds	r3, r7, r0
 8008866:	492d      	ldr	r1, [pc, #180]	; (800891c <USB_ActivateEndpoint+0x6e4>)
 8008868:	400a      	ands	r2, r1
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	183b      	adds	r3, r7, r0
 800886e:	183a      	adds	r2, r7, r0
 8008870:	8812      	ldrh	r2, [r2, #0]
 8008872:	2120      	movs	r1, #32
 8008874:	404a      	eors	r2, r1
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	18d3      	adds	r3, r2, r3
 8008882:	183a      	adds	r2, r7, r0
 8008884:	8812      	ldrh	r2, [r2, #0]
 8008886:	4920      	ldr	r1, [pc, #128]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 8008888:	430a      	orrs	r2, r1
 800888a:	b292      	uxth	r2, r2
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	e016      	b.n	80088be <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	18d3      	adds	r3, r2, r3
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	b29a      	uxth	r2, r3
 800889e:	2046      	movs	r0, #70	; 0x46
 80088a0:	183b      	adds	r3, r7, r0
 80088a2:	491e      	ldr	r1, [pc, #120]	; (800891c <USB_ActivateEndpoint+0x6e4>)
 80088a4:	400a      	ands	r2, r1
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	18d3      	adds	r3, r2, r3
 80088b2:	183a      	adds	r2, r7, r0
 80088b4:	8812      	ldrh	r2, [r2, #0]
 80088b6:	4914      	ldr	r1, [pc, #80]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 80088b8:	430a      	orrs	r2, r1
 80088ba:	b292      	uxth	r2, r2
 80088bc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	18d3      	adds	r3, r2, r3
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	2042      	movs	r0, #66	; 0x42
 80088ce:	183b      	adds	r3, r7, r0
 80088d0:	4911      	ldr	r1, [pc, #68]	; (8008918 <USB_ActivateEndpoint+0x6e0>)
 80088d2:	400a      	ands	r2, r1
 80088d4:	801a      	strh	r2, [r3, #0]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	18d3      	adds	r3, r2, r3
 80088e0:	183a      	adds	r2, r7, r0
 80088e2:	8812      	ldrh	r2, [r2, #0]
 80088e4:	4908      	ldr	r1, [pc, #32]	; (8008908 <USB_ActivateEndpoint+0x6d0>)
 80088e6:	430a      	orrs	r2, r1
 80088e8:	b292      	uxth	r2, r2
 80088ea:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80088ec:	236f      	movs	r3, #111	; 0x6f
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	781b      	ldrb	r3, [r3, #0]
}
 80088f2:	0018      	movs	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b01c      	add	sp, #112	; 0x70
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	ffff8f8f 	.word	0xffff8f8f
 8008900:	ffff8180 	.word	0xffff8180
 8008904:	ffff8e8f 	.word	0xffff8e8f
 8008908:	ffff8080 	.word	0xffff8080
 800890c:	00000404 	.word	0x00000404
 8008910:	ffffc080 	.word	0xffffc080
 8008914:	ffff80c0 	.word	0xffff80c0
 8008918:	ffffbf8f 	.word	0xffffbf8f
 800891c:	ffff8fbf 	.word	0xffff8fbf

08008920 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08c      	sub	sp, #48	; 0x30
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	7b1b      	ldrb	r3, [r3, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d000      	beq.n	8008934 <USB_DeactivateEndpoint+0x14>
 8008932:	e07e      	b.n	8008a32 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d03c      	beq.n	80089b6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	18d2      	adds	r2, r2, r3
 8008946:	210c      	movs	r1, #12
 8008948:	187b      	adds	r3, r7, r1
 800894a:	8812      	ldrh	r2, [r2, #0]
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	187b      	adds	r3, r7, r1
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	4013      	ands	r3, r2
 8008956:	d016      	beq.n	8008986 <USB_DeactivateEndpoint+0x66>
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	18d3      	adds	r3, r2, r3
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b29a      	uxth	r2, r3
 8008966:	200a      	movs	r0, #10
 8008968:	183b      	adds	r3, r7, r0
 800896a:	49c7      	ldr	r1, [pc, #796]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 800896c:	400a      	ands	r2, r1
 800896e:	801a      	strh	r2, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	18d3      	adds	r3, r2, r3
 800897a:	183a      	adds	r2, r7, r0
 800897c:	8812      	ldrh	r2, [r2, #0]
 800897e:	49c3      	ldr	r1, [pc, #780]	; (8008c8c <USB_DeactivateEndpoint+0x36c>)
 8008980:	430a      	orrs	r2, r1
 8008982:	b292      	uxth	r2, r2
 8008984:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	18d3      	adds	r3, r2, r3
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29a      	uxth	r2, r3
 8008994:	2008      	movs	r0, #8
 8008996:	183b      	adds	r3, r7, r0
 8008998:	49bd      	ldr	r1, [pc, #756]	; (8008c90 <USB_DeactivateEndpoint+0x370>)
 800899a:	400a      	ands	r2, r1
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	18d3      	adds	r3, r2, r3
 80089a8:	183a      	adds	r2, r7, r0
 80089aa:	8812      	ldrh	r2, [r2, #0]
 80089ac:	49b9      	ldr	r1, [pc, #740]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 80089ae:	430a      	orrs	r2, r1
 80089b0:	b292      	uxth	r2, r2
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	e163      	b.n	8008c7e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	18d2      	adds	r2, r2, r3
 80089c0:	2112      	movs	r1, #18
 80089c2:	187b      	adds	r3, r7, r1
 80089c4:	8812      	ldrh	r2, [r2, #0]
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	187b      	adds	r3, r7, r1
 80089ca:	881a      	ldrh	r2, [r3, #0]
 80089cc:	2380      	movs	r3, #128	; 0x80
 80089ce:	01db      	lsls	r3, r3, #7
 80089d0:	4013      	ands	r3, r2
 80089d2:	d016      	beq.n	8008a02 <USB_DeactivateEndpoint+0xe2>
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	18d3      	adds	r3, r2, r3
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	2010      	movs	r0, #16
 80089e4:	183b      	adds	r3, r7, r0
 80089e6:	49a8      	ldr	r1, [pc, #672]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 80089e8:	400a      	ands	r2, r1
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	18d3      	adds	r3, r2, r3
 80089f6:	183a      	adds	r2, r7, r0
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	49a7      	ldr	r1, [pc, #668]	; (8008c98 <USB_DeactivateEndpoint+0x378>)
 80089fc:	430a      	orrs	r2, r1
 80089fe:	b292      	uxth	r2, r2
 8008a00:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	18d3      	adds	r3, r2, r3
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	200e      	movs	r0, #14
 8008a12:	183b      	adds	r3, r7, r0
 8008a14:	49a1      	ldr	r1, [pc, #644]	; (8008c9c <USB_DeactivateEndpoint+0x37c>)
 8008a16:	400a      	ands	r2, r1
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	18d3      	adds	r3, r2, r3
 8008a24:	183a      	adds	r2, r7, r0
 8008a26:	8812      	ldrh	r2, [r2, #0]
 8008a28:	499a      	ldr	r1, [pc, #616]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	b292      	uxth	r2, r2
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	e125      	b.n	8008c7e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d000      	beq.n	8008a3c <USB_DeactivateEndpoint+0x11c>
 8008a3a:	e090      	b.n	8008b5e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	18d2      	adds	r2, r2, r3
 8008a46:	2120      	movs	r1, #32
 8008a48:	187b      	adds	r3, r7, r1
 8008a4a:	8812      	ldrh	r2, [r2, #0]
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	881a      	ldrh	r2, [r3, #0]
 8008a52:	2380      	movs	r3, #128	; 0x80
 8008a54:	01db      	lsls	r3, r3, #7
 8008a56:	4013      	ands	r3, r2
 8008a58:	d016      	beq.n	8008a88 <USB_DeactivateEndpoint+0x168>
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	201e      	movs	r0, #30
 8008a6a:	183b      	adds	r3, r7, r0
 8008a6c:	4986      	ldr	r1, [pc, #536]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008a6e:	400a      	ands	r2, r1
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	18d3      	adds	r3, r2, r3
 8008a7c:	183a      	adds	r2, r7, r0
 8008a7e:	8812      	ldrh	r2, [r2, #0]
 8008a80:	4985      	ldr	r1, [pc, #532]	; (8008c98 <USB_DeactivateEndpoint+0x378>)
 8008a82:	430a      	orrs	r2, r1
 8008a84:	b292      	uxth	r2, r2
 8008a86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	18d2      	adds	r2, r2, r3
 8008a92:	211c      	movs	r1, #28
 8008a94:	187b      	adds	r3, r7, r1
 8008a96:	8812      	ldrh	r2, [r2, #0]
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	187b      	adds	r3, r7, r1
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	2240      	movs	r2, #64	; 0x40
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d016      	beq.n	8008ad2 <USB_DeactivateEndpoint+0x1b2>
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	18d3      	adds	r3, r2, r3
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	201a      	movs	r0, #26
 8008ab4:	183b      	adds	r3, r7, r0
 8008ab6:	4974      	ldr	r1, [pc, #464]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008ab8:	400a      	ands	r2, r1
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	18d3      	adds	r3, r2, r3
 8008ac6:	183a      	adds	r2, r7, r0
 8008ac8:	8812      	ldrh	r2, [r2, #0]
 8008aca:	4970      	ldr	r1, [pc, #448]	; (8008c8c <USB_DeactivateEndpoint+0x36c>)
 8008acc:	430a      	orrs	r2, r1
 8008ace:	b292      	uxth	r2, r2
 8008ad0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	18d3      	adds	r3, r2, r3
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	2018      	movs	r0, #24
 8008ae2:	183b      	adds	r3, r7, r0
 8008ae4:	4968      	ldr	r1, [pc, #416]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008ae6:	400a      	ands	r2, r1
 8008ae8:	801a      	strh	r2, [r3, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	18d3      	adds	r3, r2, r3
 8008af4:	183a      	adds	r2, r7, r0
 8008af6:	8812      	ldrh	r2, [r2, #0]
 8008af8:	4964      	ldr	r1, [pc, #400]	; (8008c8c <USB_DeactivateEndpoint+0x36c>)
 8008afa:	430a      	orrs	r2, r1
 8008afc:	b292      	uxth	r2, r2
 8008afe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	18d3      	adds	r3, r2, r3
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	2016      	movs	r0, #22
 8008b10:	183b      	adds	r3, r7, r0
 8008b12:	4962      	ldr	r1, [pc, #392]	; (8008c9c <USB_DeactivateEndpoint+0x37c>)
 8008b14:	400a      	ands	r2, r1
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	183a      	adds	r2, r7, r0
 8008b24:	8812      	ldrh	r2, [r2, #0]
 8008b26:	495b      	ldr	r1, [pc, #364]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	18d3      	adds	r3, r2, r3
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	2014      	movs	r0, #20
 8008b3e:	183b      	adds	r3, r7, r0
 8008b40:	4953      	ldr	r1, [pc, #332]	; (8008c90 <USB_DeactivateEndpoint+0x370>)
 8008b42:	400a      	ands	r2, r1
 8008b44:	801a      	strh	r2, [r3, #0]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	18d3      	adds	r3, r2, r3
 8008b50:	183a      	adds	r2, r7, r0
 8008b52:	8812      	ldrh	r2, [r2, #0]
 8008b54:	494f      	ldr	r1, [pc, #316]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 8008b56:	430a      	orrs	r2, r1
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	e08f      	b.n	8008c7e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	18d2      	adds	r2, r2, r3
 8008b68:	212e      	movs	r1, #46	; 0x2e
 8008b6a:	187b      	adds	r3, r7, r1
 8008b6c:	8812      	ldrh	r2, [r2, #0]
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	187b      	adds	r3, r7, r1
 8008b72:	881a      	ldrh	r2, [r3, #0]
 8008b74:	2380      	movs	r3, #128	; 0x80
 8008b76:	01db      	lsls	r3, r3, #7
 8008b78:	4013      	ands	r3, r2
 8008b7a:	d016      	beq.n	8008baa <USB_DeactivateEndpoint+0x28a>
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	18d3      	adds	r3, r2, r3
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	202c      	movs	r0, #44	; 0x2c
 8008b8c:	183b      	adds	r3, r7, r0
 8008b8e:	493e      	ldr	r1, [pc, #248]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008b90:	400a      	ands	r2, r1
 8008b92:	801a      	strh	r2, [r3, #0]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	18d3      	adds	r3, r2, r3
 8008b9e:	183a      	adds	r2, r7, r0
 8008ba0:	8812      	ldrh	r2, [r2, #0]
 8008ba2:	493d      	ldr	r1, [pc, #244]	; (8008c98 <USB_DeactivateEndpoint+0x378>)
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	18d2      	adds	r2, r2, r3
 8008bb4:	212a      	movs	r1, #42	; 0x2a
 8008bb6:	187b      	adds	r3, r7, r1
 8008bb8:	8812      	ldrh	r2, [r2, #0]
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	2240      	movs	r2, #64	; 0x40
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	d016      	beq.n	8008bf4 <USB_DeactivateEndpoint+0x2d4>
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	18d3      	adds	r3, r2, r3
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	2028      	movs	r0, #40	; 0x28
 8008bd6:	183b      	adds	r3, r7, r0
 8008bd8:	492b      	ldr	r1, [pc, #172]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008bda:	400a      	ands	r2, r1
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	18d3      	adds	r3, r2, r3
 8008be8:	183a      	adds	r2, r7, r0
 8008bea:	8812      	ldrh	r2, [r2, #0]
 8008bec:	4927      	ldr	r1, [pc, #156]	; (8008c8c <USB_DeactivateEndpoint+0x36c>)
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	18d3      	adds	r3, r2, r3
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	2026      	movs	r0, #38	; 0x26
 8008c04:	183b      	adds	r3, r7, r0
 8008c06:	4920      	ldr	r1, [pc, #128]	; (8008c88 <USB_DeactivateEndpoint+0x368>)
 8008c08:	400a      	ands	r2, r1
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	18d3      	adds	r3, r2, r3
 8008c16:	183a      	adds	r2, r7, r0
 8008c18:	8812      	ldrh	r2, [r2, #0]
 8008c1a:	491f      	ldr	r1, [pc, #124]	; (8008c98 <USB_DeactivateEndpoint+0x378>)
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	b292      	uxth	r2, r2
 8008c20:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	18d3      	adds	r3, r2, r3
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	2024      	movs	r0, #36	; 0x24
 8008c32:	183b      	adds	r3, r7, r0
 8008c34:	4916      	ldr	r1, [pc, #88]	; (8008c90 <USB_DeactivateEndpoint+0x370>)
 8008c36:	400a      	ands	r2, r1
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	18d3      	adds	r3, r2, r3
 8008c44:	183a      	adds	r2, r7, r0
 8008c46:	8812      	ldrh	r2, [r2, #0]
 8008c48:	4912      	ldr	r1, [pc, #72]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	b292      	uxth	r2, r2
 8008c4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	18d3      	adds	r3, r2, r3
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	2022      	movs	r0, #34	; 0x22
 8008c60:	183b      	adds	r3, r7, r0
 8008c62:	490e      	ldr	r1, [pc, #56]	; (8008c9c <USB_DeactivateEndpoint+0x37c>)
 8008c64:	400a      	ands	r2, r1
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	18d3      	adds	r3, r2, r3
 8008c72:	183a      	adds	r2, r7, r0
 8008c74:	8812      	ldrh	r2, [r2, #0]
 8008c76:	4907      	ldr	r1, [pc, #28]	; (8008c94 <USB_DeactivateEndpoint+0x374>)
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	b292      	uxth	r2, r2
 8008c7c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	0018      	movs	r0, r3
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b00c      	add	sp, #48	; 0x30
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	ffff8f8f 	.word	0xffff8f8f
 8008c8c:	ffff80c0 	.word	0xffff80c0
 8008c90:	ffff8fbf 	.word	0xffff8fbf
 8008c94:	ffff8080 	.word	0xffff8080
 8008c98:	ffffc080 	.word	0xffffc080
 8008c9c:	ffffbf8f 	.word	0xffffbf8f

08008ca0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ca0:	b590      	push	{r4, r7, lr}
 8008ca2:	b0c3      	sub	sp, #268	; 0x10c
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d001      	beq.n	8008cb6 <USB_EPStartXfer+0x16>
 8008cb2:	f000 fcef 	bl	8009694 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d905      	bls.n	8008cce <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	1d7a      	adds	r2, r7, #5
 8008cc8:	32ff      	adds	r2, #255	; 0xff
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	e004      	b.n	8008cd8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	1d7a      	adds	r2, r7, #5
 8008cd4:	32ff      	adds	r2, #255	; 0xff
 8008cd6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	7b1b      	ldrb	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d125      	bne.n	8008d2c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6959      	ldr	r1, [r3, #20]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	88da      	ldrh	r2, [r3, #6]
 8008ce8:	1d7b      	adds	r3, r7, #5
 8008cea:	33ff      	adds	r3, #255	; 0xff
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 f9c9 	bl	800a088 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2250      	movs	r2, #80	; 0x50
 8008cfe:	5a9b      	ldrh	r3, [r3, r2]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	001a      	movs	r2, r3
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	189b      	adds	r3, r3, r2
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	00da      	lsls	r2, r3, #3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	18d3      	adds	r3, r2, r3
 8008d14:	4acc      	ldr	r2, [pc, #816]	; (8009048 <USB_EPStartXfer+0x3a8>)
 8008d16:	4694      	mov	ip, r2
 8008d18:	4463      	add	r3, ip
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	1d7b      	adds	r3, r7, #5
 8008d1e:	33ff      	adds	r3, #255	; 0xff
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	f000 fc8f 	bl	800964a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	78db      	ldrb	r3, [r3, #3]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d000      	beq.n	8008d36 <USB_EPStartXfer+0x96>
 8008d34:	e33a      	b.n	80093ac <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d800      	bhi.n	8008d44 <USB_EPStartXfer+0xa4>
 8008d42:	e2df      	b.n	8009304 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	2056      	movs	r0, #86	; 0x56
 8008d54:	183b      	adds	r3, r7, r0
 8008d56:	49bd      	ldr	r1, [pc, #756]	; (800904c <USB_EPStartXfer+0x3ac>)
 8008d58:	400a      	ands	r2, r1
 8008d5a:	801a      	strh	r2, [r3, #0]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	183a      	adds	r2, r7, r0
 8008d68:	8812      	ldrh	r2, [r2, #0]
 8008d6a:	49b9      	ldr	r1, [pc, #740]	; (8009050 <USB_EPStartXfer+0x3b0>)
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6a1a      	ldr	r2, [r3, #32]
 8008d76:	1d7b      	adds	r3, r7, #5
 8008d78:	33ff      	adds	r3, #255	; 0xff
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	1ad2      	subs	r2, r2, r3
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	18d3      	adds	r3, r2, r3
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	001a      	movs	r2, r3
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	4013      	ands	r3, r2
 8008d96:	d100      	bne.n	8008d9a <USB_EPStartXfer+0xfa>
 8008d98:	e162      	b.n	8009060 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d16a      	bne.n	8008e7c <USB_EPStartXfer+0x1dc>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2250      	movs	r2, #80	; 0x50
 8008dae:	5a9b      	ldrh	r3, [r3, r2]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	001a      	movs	r2, r3
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	189b      	adds	r3, r3, r2
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	00da      	lsls	r2, r3, #3
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	18d3      	adds	r3, r2, r3
 8008dc4:	4aa3      	ldr	r2, [pc, #652]	; (8009054 <USB_EPStartXfer+0x3b4>)
 8008dc6:	4694      	mov	ip, r2
 8008dc8:	4463      	add	r3, ip
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
 8008dcc:	1d7b      	adds	r3, r7, #5
 8008dce:	33ff      	adds	r3, #255	; 0xff
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d110      	bne.n	8008df8 <USB_EPStartXfer+0x158>
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4a9e      	ldr	r2, [pc, #632]	; (8009058 <USB_EPStartXfer+0x3b8>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4a9b      	ldr	r2, [pc, #620]	; (800905c <USB_EPStartXfer+0x3bc>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	e05c      	b.n	8008eb2 <USB_EPStartXfer+0x212>
 8008df8:	1d7b      	adds	r3, r7, #5
 8008dfa:	33ff      	adds	r3, #255	; 0xff
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8008e00:	d81c      	bhi.n	8008e3c <USB_EPStartXfer+0x19c>
 8008e02:	1d7b      	adds	r3, r7, #5
 8008e04:	33ff      	adds	r3, #255	; 0xff
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	1c7a      	adds	r2, r7, #1
 8008e0c:	32ff      	adds	r2, #255	; 0xff
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	1d7b      	adds	r3, r7, #5
 8008e12:	33ff      	adds	r3, #255	; 0xff
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	4013      	ands	r3, r2
 8008e1a:	d006      	beq.n	8008e2a <USB_EPStartXfer+0x18a>
 8008e1c:	1c7b      	adds	r3, r7, #1
 8008e1e:	33ff      	adds	r3, #255	; 0xff
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	1c7a      	adds	r2, r7, #1
 8008e26:	32ff      	adds	r2, #255	; 0xff
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	1c7b      	adds	r3, r7, #1
 8008e2c:	33ff      	adds	r3, #255	; 0xff
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	029b      	lsls	r3, r3, #10
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	e03a      	b.n	8008eb2 <USB_EPStartXfer+0x212>
 8008e3c:	1d7b      	adds	r3, r7, #5
 8008e3e:	33ff      	adds	r3, #255	; 0xff
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	1c7a      	adds	r2, r7, #1
 8008e46:	32ff      	adds	r2, #255	; 0xff
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	1d7b      	adds	r3, r7, #5
 8008e4c:	33ff      	adds	r3, #255	; 0xff
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	221f      	movs	r2, #31
 8008e52:	4013      	ands	r3, r2
 8008e54:	d106      	bne.n	8008e64 <USB_EPStartXfer+0x1c4>
 8008e56:	1c7b      	adds	r3, r7, #1
 8008e58:	33ff      	adds	r3, #255	; 0xff
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	1c7a      	adds	r2, r7, #1
 8008e60:	32ff      	adds	r2, #255	; 0xff
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	1c7b      	adds	r3, r7, #1
 8008e66:	33ff      	adds	r3, #255	; 0xff
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	029b      	lsls	r3, r3, #10
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4a7a      	ldr	r2, [pc, #488]	; (800905c <USB_EPStartXfer+0x3bc>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	e01a      	b.n	8008eb2 <USB_EPStartXfer+0x212>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d116      	bne.n	8008eb2 <USB_EPStartXfer+0x212>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2250      	movs	r2, #80	; 0x50
 8008e88:	5a9b      	ldrh	r3, [r3, r2]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	189b      	adds	r3, r3, r2
 8008e92:	633b      	str	r3, [r7, #48]	; 0x30
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	00da      	lsls	r2, r3, #3
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	18d3      	adds	r3, r2, r3
 8008e9e:	4a6d      	ldr	r2, [pc, #436]	; (8009054 <USB_EPStartXfer+0x3b4>)
 8008ea0:	4694      	mov	ip, r2
 8008ea2:	4463      	add	r3, ip
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ea6:	1d7b      	adds	r3, r7, #5
 8008ea8:	33ff      	adds	r3, #255	; 0xff
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008eb2:	2076      	movs	r0, #118	; 0x76
 8008eb4:	183b      	adds	r3, r7, r0
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	8952      	ldrh	r2, [r2, #10]
 8008eba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	6959      	ldr	r1, [r3, #20]
 8008ec0:	1d7b      	adds	r3, r7, #5
 8008ec2:	33ff      	adds	r3, #255	; 0xff
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	b29c      	uxth	r4, r3
 8008ec8:	183b      	adds	r3, r7, r0
 8008eca:	881a      	ldrh	r2, [r3, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	0023      	movs	r3, r4
 8008ed0:	f001 f8da 	bl	800a088 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	695a      	ldr	r2, [r3, #20]
 8008ed8:	1d7b      	adds	r3, r7, #5
 8008eda:	33ff      	adds	r3, #255	; 0xff
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	18d2      	adds	r2, r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6a1a      	ldr	r2, [r3, #32]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d908      	bls.n	8008f02 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6a1a      	ldr	r2, [r3, #32]
 8008ef4:	1d7b      	adds	r3, r7, #5
 8008ef6:	33ff      	adds	r3, #255	; 0xff
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	621a      	str	r2, [r3, #32]
 8008f00:	e007      	b.n	8008f12 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	1d7a      	adds	r2, r7, #5
 8008f08:	32ff      	adds	r2, #255	; 0xff
 8008f0a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d166      	bne.n	8008fe8 <USB_EPStartXfer+0x348>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2250      	movs	r2, #80	; 0x50
 8008f22:	5a9b      	ldrh	r3, [r3, r2]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	001a      	movs	r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	189b      	adds	r3, r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	00da      	lsls	r2, r3, #3
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	18d3      	adds	r3, r2, r3
 8008f38:	4a43      	ldr	r2, [pc, #268]	; (8009048 <USB_EPStartXfer+0x3a8>)
 8008f3a:	4694      	mov	ip, r2
 8008f3c:	4463      	add	r3, ip
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	1d7b      	adds	r3, r7, #5
 8008f42:	33ff      	adds	r3, #255	; 0xff
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d110      	bne.n	8008f6c <USB_EPStartXfer+0x2cc>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4a41      	ldr	r2, [pc, #260]	; (8009058 <USB_EPStartXfer+0x3b8>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4a3e      	ldr	r2, [pc, #248]	; (800905c <USB_EPStartXfer+0x3bc>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	e05a      	b.n	8009022 <USB_EPStartXfer+0x382>
 8008f6c:	1d7b      	adds	r3, r7, #5
 8008f6e:	33ff      	adds	r3, #255	; 0xff
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b3e      	cmp	r3, #62	; 0x3e
 8008f74:	d81a      	bhi.n	8008fac <USB_EPStartXfer+0x30c>
 8008f76:	1d7b      	adds	r3, r7, #5
 8008f78:	33ff      	adds	r3, #255	; 0xff
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	21fc      	movs	r1, #252	; 0xfc
 8008f80:	187a      	adds	r2, r7, r1
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	1d7b      	adds	r3, r7, #5
 8008f86:	33ff      	adds	r3, #255	; 0xff
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	d004      	beq.n	8008f9a <USB_EPStartXfer+0x2fa>
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	187a      	adds	r2, r7, r1
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	23fc      	movs	r3, #252	; 0xfc
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	801a      	strh	r2, [r3, #0]
 8008faa:	e03a      	b.n	8009022 <USB_EPStartXfer+0x382>
 8008fac:	1d7b      	adds	r3, r7, #5
 8008fae:	33ff      	adds	r3, #255	; 0xff
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	21fc      	movs	r1, #252	; 0xfc
 8008fb6:	187a      	adds	r2, r7, r1
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	1d7b      	adds	r3, r7, #5
 8008fbc:	33ff      	adds	r3, #255	; 0xff
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	221f      	movs	r2, #31
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	d104      	bne.n	8008fd0 <USB_EPStartXfer+0x330>
 8008fc6:	187b      	adds	r3, r7, r1
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	187a      	adds	r2, r7, r1
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	23fc      	movs	r3, #252	; 0xfc
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	029b      	lsls	r3, r3, #10
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4a1f      	ldr	r2, [pc, #124]	; (800905c <USB_EPStartXfer+0x3bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	e01c      	b.n	8009022 <USB_EPStartXfer+0x382>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d118      	bne.n	8009022 <USB_EPStartXfer+0x382>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	623b      	str	r3, [r7, #32]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2250      	movs	r2, #80	; 0x50
 8008ff8:	5a9b      	ldrh	r3, [r3, r2]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	001a      	movs	r2, r3
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	189b      	adds	r3, r3, r2
 8009002:	623b      	str	r3, [r7, #32]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	00da      	lsls	r2, r3, #3
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	18d3      	adds	r3, r2, r3
 800900e:	4a0e      	ldr	r2, [pc, #56]	; (8009048 <USB_EPStartXfer+0x3a8>)
 8009010:	4694      	mov	ip, r2
 8009012:	4463      	add	r3, ip
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	1d7b      	adds	r3, r7, #5
 8009018:	33ff      	adds	r3, #255	; 0xff
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	b29a      	uxth	r2, r3
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009022:	2076      	movs	r0, #118	; 0x76
 8009024:	183b      	adds	r3, r7, r0
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	8912      	ldrh	r2, [r2, #8]
 800902a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6959      	ldr	r1, [r3, #20]
 8009030:	1d7b      	adds	r3, r7, #5
 8009032:	33ff      	adds	r3, #255	; 0xff
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	b29c      	uxth	r4, r3
 8009038:	183b      	adds	r3, r7, r0
 800903a:	881a      	ldrh	r2, [r3, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	0023      	movs	r3, r4
 8009040:	f001 f822 	bl	800a088 <USB_WritePMA>
 8009044:	e301      	b.n	800964a <USB_EPStartXfer+0x9aa>
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	00000402 	.word	0x00000402
 800904c:	ffff8f8f 	.word	0xffff8f8f
 8009050:	ffff8180 	.word	0xffff8180
 8009054:	00000406 	.word	0x00000406
 8009058:	ffff83ff 	.word	0xffff83ff
 800905c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d166      	bne.n	8009136 <USB_EPStartXfer+0x496>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	64bb      	str	r3, [r7, #72]	; 0x48
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2250      	movs	r2, #80	; 0x50
 8009070:	5a9b      	ldrh	r3, [r3, r2]
 8009072:	b29b      	uxth	r3, r3
 8009074:	001a      	movs	r2, r3
 8009076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009078:	189b      	adds	r3, r3, r2
 800907a:	64bb      	str	r3, [r7, #72]	; 0x48
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	00da      	lsls	r2, r3, #3
 8009082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	4ac3      	ldr	r2, [pc, #780]	; (8009394 <USB_EPStartXfer+0x6f4>)
 8009088:	4694      	mov	ip, r2
 800908a:	4463      	add	r3, ip
 800908c:	647b      	str	r3, [r7, #68]	; 0x44
 800908e:	1d7b      	adds	r3, r7, #5
 8009090:	33ff      	adds	r3, #255	; 0xff
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d110      	bne.n	80090ba <USB_EPStartXfer+0x41a>
 8009098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	4abe      	ldr	r2, [pc, #760]	; (8009398 <USB_EPStartXfer+0x6f8>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4abb      	ldr	r2, [pc, #748]	; (800939c <USB_EPStartXfer+0x6fc>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	e05a      	b.n	8009170 <USB_EPStartXfer+0x4d0>
 80090ba:	1d7b      	adds	r3, r7, #5
 80090bc:	33ff      	adds	r3, #255	; 0xff
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b3e      	cmp	r3, #62	; 0x3e
 80090c2:	d81a      	bhi.n	80090fa <USB_EPStartXfer+0x45a>
 80090c4:	1d7b      	adds	r3, r7, #5
 80090c6:	33ff      	adds	r3, #255	; 0xff
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	21f8      	movs	r1, #248	; 0xf8
 80090ce:	187a      	adds	r2, r7, r1
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	1d7b      	adds	r3, r7, #5
 80090d4:	33ff      	adds	r3, #255	; 0xff
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2201      	movs	r2, #1
 80090da:	4013      	ands	r3, r2
 80090dc:	d004      	beq.n	80090e8 <USB_EPStartXfer+0x448>
 80090de:	187b      	adds	r3, r7, r1
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	187a      	adds	r2, r7, r1
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	23f8      	movs	r3, #248	; 0xf8
 80090ea:	18fb      	adds	r3, r7, r3
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	029b      	lsls	r3, r3, #10
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	e03a      	b.n	8009170 <USB_EPStartXfer+0x4d0>
 80090fa:	1d7b      	adds	r3, r7, #5
 80090fc:	33ff      	adds	r3, #255	; 0xff
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	21f8      	movs	r1, #248	; 0xf8
 8009104:	187a      	adds	r2, r7, r1
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	1d7b      	adds	r3, r7, #5
 800910a:	33ff      	adds	r3, #255	; 0xff
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	221f      	movs	r2, #31
 8009110:	4013      	ands	r3, r2
 8009112:	d104      	bne.n	800911e <USB_EPStartXfer+0x47e>
 8009114:	187b      	adds	r3, r7, r1
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3b01      	subs	r3, #1
 800911a:	187a      	adds	r2, r7, r1
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	23f8      	movs	r3, #248	; 0xf8
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	b29b      	uxth	r3, r3
 800912a:	4a9c      	ldr	r2, [pc, #624]	; (800939c <USB_EPStartXfer+0x6fc>)
 800912c:	4313      	orrs	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	e01c      	b.n	8009170 <USB_EPStartXfer+0x4d0>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d118      	bne.n	8009170 <USB_EPStartXfer+0x4d0>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	653b      	str	r3, [r7, #80]	; 0x50
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2250      	movs	r2, #80	; 0x50
 8009146:	5a9b      	ldrh	r3, [r3, r2]
 8009148:	b29b      	uxth	r3, r3
 800914a:	001a      	movs	r2, r3
 800914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914e:	189b      	adds	r3, r3, r2
 8009150:	653b      	str	r3, [r7, #80]	; 0x50
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	00da      	lsls	r2, r3, #3
 8009158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915a:	18d3      	adds	r3, r2, r3
 800915c:	4a8d      	ldr	r2, [pc, #564]	; (8009394 <USB_EPStartXfer+0x6f4>)
 800915e:	4694      	mov	ip, r2
 8009160:	4463      	add	r3, ip
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009164:	1d7b      	adds	r3, r7, #5
 8009166:	33ff      	adds	r3, #255	; 0xff
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	b29a      	uxth	r2, r3
 800916c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009170:	2076      	movs	r0, #118	; 0x76
 8009172:	183b      	adds	r3, r7, r0
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	8912      	ldrh	r2, [r2, #8]
 8009178:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6959      	ldr	r1, [r3, #20]
 800917e:	1d7b      	adds	r3, r7, #5
 8009180:	33ff      	adds	r3, #255	; 0xff
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	b29c      	uxth	r4, r3
 8009186:	183b      	adds	r3, r7, r0
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	0023      	movs	r3, r4
 800918e:	f000 ff7b 	bl	800a088 <USB_WritePMA>
            ep->xfer_buff += len;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	695a      	ldr	r2, [r3, #20]
 8009196:	1d7b      	adds	r3, r7, #5
 8009198:	33ff      	adds	r3, #255	; 0xff
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	18d2      	adds	r2, r2, r3
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d908      	bls.n	80091c0 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	1d7b      	adds	r3, r7, #5
 80091b4:	33ff      	adds	r3, #255	; 0xff
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	1ad2      	subs	r2, r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	621a      	str	r2, [r3, #32]
 80091be:	e007      	b.n	80091d0 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	1d7a      	adds	r2, r7, #5
 80091c6:	32ff      	adds	r2, #255	; 0xff
 80091c8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	643b      	str	r3, [r7, #64]	; 0x40
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d166      	bne.n	80092aa <USB_EPStartXfer+0x60a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	63bb      	str	r3, [r7, #56]	; 0x38
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2250      	movs	r2, #80	; 0x50
 80091e4:	5a9b      	ldrh	r3, [r3, r2]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	001a      	movs	r2, r3
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	189b      	adds	r3, r3, r2
 80091ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	00da      	lsls	r2, r3, #3
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	18d3      	adds	r3, r2, r3
 80091fa:	4a69      	ldr	r2, [pc, #420]	; (80093a0 <USB_EPStartXfer+0x700>)
 80091fc:	4694      	mov	ip, r2
 80091fe:	4463      	add	r3, ip
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
 8009202:	1d7b      	adds	r3, r7, #5
 8009204:	33ff      	adds	r3, #255	; 0xff
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d110      	bne.n	800922e <USB_EPStartXfer+0x58e>
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	4a61      	ldr	r2, [pc, #388]	; (8009398 <USB_EPStartXfer+0x6f8>)
 8009214:	4013      	ands	r3, r2
 8009216:	b29a      	uxth	r2, r3
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	4a5e      	ldr	r2, [pc, #376]	; (800939c <USB_EPStartXfer+0x6fc>)
 8009224:	4313      	orrs	r3, r2
 8009226:	b29a      	uxth	r2, r3
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	e058      	b.n	80092e0 <USB_EPStartXfer+0x640>
 800922e:	1d7b      	adds	r3, r7, #5
 8009230:	33ff      	adds	r3, #255	; 0xff
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b3e      	cmp	r3, #62	; 0x3e
 8009236:	d81a      	bhi.n	800926e <USB_EPStartXfer+0x5ce>
 8009238:	1d7b      	adds	r3, r7, #5
 800923a:	33ff      	adds	r3, #255	; 0xff
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	21f4      	movs	r1, #244	; 0xf4
 8009242:	187a      	adds	r2, r7, r1
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	1d7b      	adds	r3, r7, #5
 8009248:	33ff      	adds	r3, #255	; 0xff
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2201      	movs	r2, #1
 800924e:	4013      	ands	r3, r2
 8009250:	d004      	beq.n	800925c <USB_EPStartXfer+0x5bc>
 8009252:	187b      	adds	r3, r7, r1
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	187a      	adds	r2, r7, r1
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	23f4      	movs	r3, #244	; 0xf4
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	029b      	lsls	r3, r3, #10
 8009266:	b29a      	uxth	r2, r3
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e038      	b.n	80092e0 <USB_EPStartXfer+0x640>
 800926e:	1d7b      	adds	r3, r7, #5
 8009270:	33ff      	adds	r3, #255	; 0xff
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	21f4      	movs	r1, #244	; 0xf4
 8009278:	187a      	adds	r2, r7, r1
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	1d7b      	adds	r3, r7, #5
 800927e:	33ff      	adds	r3, #255	; 0xff
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	221f      	movs	r2, #31
 8009284:	4013      	ands	r3, r2
 8009286:	d104      	bne.n	8009292 <USB_EPStartXfer+0x5f2>
 8009288:	187b      	adds	r3, r7, r1
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3b01      	subs	r3, #1
 800928e:	187a      	adds	r2, r7, r1
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	23f4      	movs	r3, #244	; 0xf4
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	b29b      	uxth	r3, r3
 800929a:	029b      	lsls	r3, r3, #10
 800929c:	b29b      	uxth	r3, r3
 800929e:	4a3f      	ldr	r2, [pc, #252]	; (800939c <USB_EPStartXfer+0x6fc>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	e01a      	b.n	80092e0 <USB_EPStartXfer+0x640>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d116      	bne.n	80092e0 <USB_EPStartXfer+0x640>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2250      	movs	r2, #80	; 0x50
 80092b6:	5a9b      	ldrh	r3, [r3, r2]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	001a      	movs	r2, r3
 80092bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	643b      	str	r3, [r7, #64]	; 0x40
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	00da      	lsls	r2, r3, #3
 80092c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ca:	18d3      	adds	r3, r2, r3
 80092cc:	4a34      	ldr	r2, [pc, #208]	; (80093a0 <USB_EPStartXfer+0x700>)
 80092ce:	4694      	mov	ip, r2
 80092d0:	4463      	add	r3, ip
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d4:	1d7b      	adds	r3, r7, #5
 80092d6:	33ff      	adds	r3, #255	; 0xff
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092e0:	2076      	movs	r0, #118	; 0x76
 80092e2:	183b      	adds	r3, r7, r0
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	8952      	ldrh	r2, [r2, #10]
 80092e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6959      	ldr	r1, [r3, #20]
 80092ee:	1d7b      	adds	r3, r7, #5
 80092f0:	33ff      	adds	r3, #255	; 0xff
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	b29c      	uxth	r4, r3
 80092f6:	183b      	adds	r3, r7, r0
 80092f8:	881a      	ldrh	r2, [r3, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	0023      	movs	r3, r4
 80092fe:	f000 fec3 	bl	800a088 <USB_WritePMA>
 8009302:	e1a2      	b.n	800964a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	1d7a      	adds	r2, r7, #5
 800930a:	32ff      	adds	r2, #255	; 0xff
 800930c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	18d3      	adds	r3, r2, r3
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29a      	uxth	r2, r3
 800931c:	2062      	movs	r0, #98	; 0x62
 800931e:	183b      	adds	r3, r7, r0
 8009320:	4920      	ldr	r1, [pc, #128]	; (80093a4 <USB_EPStartXfer+0x704>)
 8009322:	400a      	ands	r2, r1
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	18d3      	adds	r3, r2, r3
 8009330:	183a      	adds	r2, r7, r0
 8009332:	8812      	ldrh	r2, [r2, #0]
 8009334:	491c      	ldr	r1, [pc, #112]	; (80093a8 <USB_EPStartXfer+0x708>)
 8009336:	430a      	orrs	r2, r1
 8009338:	b292      	uxth	r2, r2
 800933a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2250      	movs	r2, #80	; 0x50
 8009344:	5a9b      	ldrh	r3, [r3, r2]
 8009346:	b29b      	uxth	r3, r3
 8009348:	001a      	movs	r2, r3
 800934a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934c:	189b      	adds	r3, r3, r2
 800934e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	00da      	lsls	r2, r3, #3
 8009356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009358:	18d3      	adds	r3, r2, r3
 800935a:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <USB_EPStartXfer+0x6f4>)
 800935c:	4694      	mov	ip, r2
 800935e:	4463      	add	r3, ip
 8009360:	65bb      	str	r3, [r7, #88]	; 0x58
 8009362:	1d7b      	adds	r3, r7, #5
 8009364:	33ff      	adds	r3, #255	; 0xff
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b29a      	uxth	r2, r3
 800936a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800936c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800936e:	2076      	movs	r0, #118	; 0x76
 8009370:	183b      	adds	r3, r7, r0
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	8912      	ldrh	r2, [r2, #8]
 8009376:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6959      	ldr	r1, [r3, #20]
 800937c:	1d7b      	adds	r3, r7, #5
 800937e:	33ff      	adds	r3, #255	; 0xff
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	b29c      	uxth	r4, r3
 8009384:	183b      	adds	r3, r7, r0
 8009386:	881a      	ldrh	r2, [r3, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	0023      	movs	r3, r4
 800938c:	f000 fe7c 	bl	800a088 <USB_WritePMA>
 8009390:	e15b      	b.n	800964a <USB_EPStartXfer+0x9aa>
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	00000402 	.word	0x00000402
 8009398:	ffff83ff 	.word	0xffff83ff
 800939c:	ffff8000 	.word	0xffff8000
 80093a0:	00000406 	.word	0x00000406
 80093a4:	ffff8e8f 	.word	0xffff8e8f
 80093a8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	6a1a      	ldr	r2, [r3, #32]
 80093b0:	1d7b      	adds	r3, r7, #5
 80093b2:	33ff      	adds	r3, #255	; 0xff
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	18d3      	adds	r3, r2, r3
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	001a      	movs	r2, r3
 80093cc:	2340      	movs	r3, #64	; 0x40
 80093ce:	4013      	ands	r3, r2
 80093d0:	d100      	bne.n	80093d4 <USB_EPStartXfer+0x734>
 80093d2:	e099      	b.n	8009508 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	673b      	str	r3, [r7, #112]	; 0x70
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d166      	bne.n	80094ae <USB_EPStartXfer+0x80e>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2250      	movs	r2, #80	; 0x50
 80093e8:	5a9b      	ldrh	r3, [r3, r2]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	001a      	movs	r2, r3
 80093ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093f0:	189b      	adds	r3, r3, r2
 80093f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	00da      	lsls	r2, r3, #3
 80093fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093fc:	18d3      	adds	r3, r2, r3
 80093fe:	4ad0      	ldr	r2, [pc, #832]	; (8009740 <USB_EPStartXfer+0xaa0>)
 8009400:	4694      	mov	ip, r2
 8009402:	4463      	add	r3, ip
 8009404:	667b      	str	r3, [r7, #100]	; 0x64
 8009406:	1d7b      	adds	r3, r7, #5
 8009408:	33ff      	adds	r3, #255	; 0xff
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d110      	bne.n	8009432 <USB_EPStartXfer+0x792>
 8009410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	4acb      	ldr	r2, [pc, #812]	; (8009744 <USB_EPStartXfer+0xaa4>)
 8009418:	4013      	ands	r3, r2
 800941a:	b29a      	uxth	r2, r3
 800941c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800941e:	801a      	strh	r2, [r3, #0]
 8009420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	4ac8      	ldr	r2, [pc, #800]	; (8009748 <USB_EPStartXfer+0xaa8>)
 8009428:	4313      	orrs	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e058      	b.n	80094e4 <USB_EPStartXfer+0x844>
 8009432:	1d7b      	adds	r3, r7, #5
 8009434:	33ff      	adds	r3, #255	; 0xff
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b3e      	cmp	r3, #62	; 0x3e
 800943a:	d81a      	bhi.n	8009472 <USB_EPStartXfer+0x7d2>
 800943c:	1d7b      	adds	r3, r7, #5
 800943e:	33ff      	adds	r3, #255	; 0xff
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	085b      	lsrs	r3, r3, #1
 8009444:	21f0      	movs	r1, #240	; 0xf0
 8009446:	187a      	adds	r2, r7, r1
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	1d7b      	adds	r3, r7, #5
 800944c:	33ff      	adds	r3, #255	; 0xff
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	4013      	ands	r3, r2
 8009454:	d004      	beq.n	8009460 <USB_EPStartXfer+0x7c0>
 8009456:	187b      	adds	r3, r7, r1
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	187a      	adds	r2, r7, r1
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	23f0      	movs	r3, #240	; 0xf0
 8009462:	18fb      	adds	r3, r7, r3
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	029b      	lsls	r3, r3, #10
 800946a:	b29a      	uxth	r2, r3
 800946c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e038      	b.n	80094e4 <USB_EPStartXfer+0x844>
 8009472:	1d7b      	adds	r3, r7, #5
 8009474:	33ff      	adds	r3, #255	; 0xff
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	21f0      	movs	r1, #240	; 0xf0
 800947c:	187a      	adds	r2, r7, r1
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	1d7b      	adds	r3, r7, #5
 8009482:	33ff      	adds	r3, #255	; 0xff
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	221f      	movs	r2, #31
 8009488:	4013      	ands	r3, r2
 800948a:	d104      	bne.n	8009496 <USB_EPStartXfer+0x7f6>
 800948c:	187b      	adds	r3, r7, r1
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3b01      	subs	r3, #1
 8009492:	187a      	adds	r2, r7, r1
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	23f0      	movs	r3, #240	; 0xf0
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	029b      	lsls	r3, r3, #10
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4aa9      	ldr	r2, [pc, #676]	; (8009748 <USB_EPStartXfer+0xaa8>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e01a      	b.n	80094e4 <USB_EPStartXfer+0x844>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d116      	bne.n	80094e4 <USB_EPStartXfer+0x844>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2250      	movs	r2, #80	; 0x50
 80094ba:	5a9b      	ldrh	r3, [r3, r2]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	001a      	movs	r2, r3
 80094c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094c2:	189b      	adds	r3, r3, r2
 80094c4:	673b      	str	r3, [r7, #112]	; 0x70
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	00da      	lsls	r2, r3, #3
 80094cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094ce:	18d3      	adds	r3, r2, r3
 80094d0:	4a9b      	ldr	r2, [pc, #620]	; (8009740 <USB_EPStartXfer+0xaa0>)
 80094d2:	4694      	mov	ip, r2
 80094d4:	4463      	add	r3, ip
 80094d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094d8:	1d7b      	adds	r3, r7, #5
 80094da:	33ff      	adds	r3, #255	; 0xff
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	b29a      	uxth	r2, r3
 80094e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094e4:	2076      	movs	r0, #118	; 0x76
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	8952      	ldrh	r2, [r2, #10]
 80094ec:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	6959      	ldr	r1, [r3, #20]
 80094f2:	1d7b      	adds	r3, r7, #5
 80094f4:	33ff      	adds	r3, #255	; 0xff
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	b29c      	uxth	r4, r3
 80094fa:	183b      	adds	r3, r7, r0
 80094fc:	881a      	ldrh	r2, [r3, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	0023      	movs	r3, r4
 8009502:	f000 fdc1 	bl	800a088 <USB_WritePMA>
 8009506:	e0a0      	b.n	800964a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d166      	bne.n	80095de <USB_EPStartXfer+0x93e>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2250      	movs	r2, #80	; 0x50
 8009518:	5a9b      	ldrh	r3, [r3, r2]
 800951a:	b29b      	uxth	r3, r3
 800951c:	001a      	movs	r2, r3
 800951e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009520:	189b      	adds	r3, r3, r2
 8009522:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	00da      	lsls	r2, r3, #3
 800952a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800952c:	18d3      	adds	r3, r2, r3
 800952e:	4a87      	ldr	r2, [pc, #540]	; (800974c <USB_EPStartXfer+0xaac>)
 8009530:	4694      	mov	ip, r2
 8009532:	4463      	add	r3, ip
 8009534:	67bb      	str	r3, [r7, #120]	; 0x78
 8009536:	1d7b      	adds	r3, r7, #5
 8009538:	33ff      	adds	r3, #255	; 0xff
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d110      	bne.n	8009562 <USB_EPStartXfer+0x8c2>
 8009540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4a7f      	ldr	r2, [pc, #508]	; (8009744 <USB_EPStartXfer+0xaa4>)
 8009548:	4013      	ands	r3, r2
 800954a:	b29a      	uxth	r2, r3
 800954c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800954e:	801a      	strh	r2, [r3, #0]
 8009550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	4a7c      	ldr	r2, [pc, #496]	; (8009748 <USB_EPStartXfer+0xaa8>)
 8009558:	4313      	orrs	r3, r2
 800955a:	b29a      	uxth	r2, r3
 800955c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e062      	b.n	8009628 <USB_EPStartXfer+0x988>
 8009562:	1d7b      	adds	r3, r7, #5
 8009564:	33ff      	adds	r3, #255	; 0xff
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b3e      	cmp	r3, #62	; 0x3e
 800956a:	d81a      	bhi.n	80095a2 <USB_EPStartXfer+0x902>
 800956c:	1d7b      	adds	r3, r7, #5
 800956e:	33ff      	adds	r3, #255	; 0xff
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	21ec      	movs	r1, #236	; 0xec
 8009576:	187a      	adds	r2, r7, r1
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	1d7b      	adds	r3, r7, #5
 800957c:	33ff      	adds	r3, #255	; 0xff
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2201      	movs	r2, #1
 8009582:	4013      	ands	r3, r2
 8009584:	d004      	beq.n	8009590 <USB_EPStartXfer+0x8f0>
 8009586:	187b      	adds	r3, r7, r1
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	187a      	adds	r2, r7, r1
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	23ec      	movs	r3, #236	; 0xec
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	b29b      	uxth	r3, r3
 8009598:	029b      	lsls	r3, r3, #10
 800959a:	b29a      	uxth	r2, r3
 800959c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	e042      	b.n	8009628 <USB_EPStartXfer+0x988>
 80095a2:	1d7b      	adds	r3, r7, #5
 80095a4:	33ff      	adds	r3, #255	; 0xff
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	21ec      	movs	r1, #236	; 0xec
 80095ac:	187a      	adds	r2, r7, r1
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	1d7b      	adds	r3, r7, #5
 80095b2:	33ff      	adds	r3, #255	; 0xff
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	221f      	movs	r2, #31
 80095b8:	4013      	ands	r3, r2
 80095ba:	d104      	bne.n	80095c6 <USB_EPStartXfer+0x926>
 80095bc:	187b      	adds	r3, r7, r1
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	187a      	adds	r2, r7, r1
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	23ec      	movs	r3, #236	; 0xec
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	029b      	lsls	r3, r3, #10
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4a5d      	ldr	r2, [pc, #372]	; (8009748 <USB_EPStartXfer+0xaa8>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e024      	b.n	8009628 <USB_EPStartXfer+0x988>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d120      	bne.n	8009628 <USB_EPStartXfer+0x988>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2184      	movs	r1, #132	; 0x84
 80095ea:	187a      	adds	r2, r7, r1
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2250      	movs	r2, #80	; 0x50
 80095f2:	5a9b      	ldrh	r3, [r3, r2]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	001a      	movs	r2, r3
 80095f8:	187b      	adds	r3, r7, r1
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	189b      	adds	r3, r3, r2
 80095fe:	187a      	adds	r2, r7, r1
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	00da      	lsls	r2, r3, #3
 8009608:	187b      	adds	r3, r7, r1
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	18d3      	adds	r3, r2, r3
 800960e:	4a4f      	ldr	r2, [pc, #316]	; (800974c <USB_EPStartXfer+0xaac>)
 8009610:	4694      	mov	ip, r2
 8009612:	4463      	add	r3, ip
 8009614:	2180      	movs	r1, #128	; 0x80
 8009616:	187a      	adds	r2, r7, r1
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	1d7b      	adds	r3, r7, #5
 800961c:	33ff      	adds	r3, #255	; 0xff
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	b29a      	uxth	r2, r3
 8009622:	187b      	adds	r3, r7, r1
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009628:	2076      	movs	r0, #118	; 0x76
 800962a:	183b      	adds	r3, r7, r0
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	8912      	ldrh	r2, [r2, #8]
 8009630:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6959      	ldr	r1, [r3, #20]
 8009636:	1d7b      	adds	r3, r7, #5
 8009638:	33ff      	adds	r3, #255	; 0xff
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	b29c      	uxth	r4, r3
 800963e:	183b      	adds	r3, r7, r0
 8009640:	881a      	ldrh	r2, [r3, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	0023      	movs	r3, r4
 8009646:	f000 fd1f 	bl	800a088 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	18d3      	adds	r3, r2, r3
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29a      	uxth	r2, r3
 8009658:	200a      	movs	r0, #10
 800965a:	183b      	adds	r3, r7, r0
 800965c:	493c      	ldr	r1, [pc, #240]	; (8009750 <USB_EPStartXfer+0xab0>)
 800965e:	400a      	ands	r2, r1
 8009660:	801a      	strh	r2, [r3, #0]
 8009662:	183b      	adds	r3, r7, r0
 8009664:	183a      	adds	r2, r7, r0
 8009666:	8812      	ldrh	r2, [r2, #0]
 8009668:	2110      	movs	r1, #16
 800966a:	404a      	eors	r2, r1
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	183b      	adds	r3, r7, r0
 8009670:	183a      	adds	r2, r7, r0
 8009672:	8812      	ldrh	r2, [r2, #0]
 8009674:	2120      	movs	r1, #32
 8009676:	404a      	eors	r2, r1
 8009678:	801a      	strh	r2, [r3, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	18d3      	adds	r3, r2, r3
 8009684:	183a      	adds	r2, r7, r0
 8009686:	8812      	ldrh	r2, [r2, #0]
 8009688:	4932      	ldr	r1, [pc, #200]	; (8009754 <USB_EPStartXfer+0xab4>)
 800968a:	430a      	orrs	r2, r1
 800968c:	b292      	uxth	r2, r2
 800968e:	801a      	strh	r2, [r3, #0]
 8009690:	f000 fbaf 	bl	8009df2 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	7b1b      	ldrb	r3, [r3, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d000      	beq.n	800969e <USB_EPStartXfer+0x9fe>
 800969c:	e09e      	b.n	80097dc <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d90d      	bls.n	80096c6 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	1d7a      	adds	r2, r7, #5
 80096b0:	32ff      	adds	r2, #255	; 0xff
 80096b2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	1d7b      	adds	r3, r7, #5
 80096ba:	33ff      	adds	r3, #255	; 0xff
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	1ad2      	subs	r2, r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	619a      	str	r2, [r3, #24]
 80096c4:	e007      	b.n	80096d6 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	1d7a      	adds	r2, r7, #5
 80096cc:	32ff      	adds	r2, #255	; 0xff
 80096ce:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2200      	movs	r2, #0
 80096d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2190      	movs	r1, #144	; 0x90
 80096da:	187a      	adds	r2, r7, r1
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2250      	movs	r2, #80	; 0x50
 80096e2:	5a9b      	ldrh	r3, [r3, r2]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	001a      	movs	r2, r3
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	189b      	adds	r3, r3, r2
 80096ee:	187a      	adds	r2, r7, r1
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	00da      	lsls	r2, r3, #3
 80096f8:	187b      	adds	r3, r7, r1
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	18d3      	adds	r3, r2, r3
 80096fe:	4a10      	ldr	r2, [pc, #64]	; (8009740 <USB_EPStartXfer+0xaa0>)
 8009700:	4694      	mov	ip, r2
 8009702:	4463      	add	r3, ip
 8009704:	218c      	movs	r1, #140	; 0x8c
 8009706:	187a      	adds	r2, r7, r1
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	1d7b      	adds	r3, r7, #5
 800970c:	33ff      	adds	r3, #255	; 0xff
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d121      	bne.n	8009758 <USB_EPStartXfer+0xab8>
 8009714:	187b      	adds	r3, r7, r1
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	4a09      	ldr	r2, [pc, #36]	; (8009744 <USB_EPStartXfer+0xaa4>)
 800971e:	4013      	ands	r3, r2
 8009720:	b29a      	uxth	r2, r3
 8009722:	187b      	adds	r3, r7, r1
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	187b      	adds	r3, r7, r1
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	4a05      	ldr	r2, [pc, #20]	; (8009748 <USB_EPStartXfer+0xaa8>)
 8009732:	4313      	orrs	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	187b      	adds	r3, r7, r1
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e334      	b.n	8009da8 <USB_EPStartXfer+0x1108>
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	00000406 	.word	0x00000406
 8009744:	ffff83ff 	.word	0xffff83ff
 8009748:	ffff8000 	.word	0xffff8000
 800974c:	00000402 	.word	0x00000402
 8009750:	ffff8fbf 	.word	0xffff8fbf
 8009754:	ffff8080 	.word	0xffff8080
 8009758:	1d7b      	adds	r3, r7, #5
 800975a:	33ff      	adds	r3, #255	; 0xff
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b3e      	cmp	r3, #62	; 0x3e
 8009760:	d81c      	bhi.n	800979c <USB_EPStartXfer+0xafc>
 8009762:	1d7b      	adds	r3, r7, #5
 8009764:	33ff      	adds	r3, #255	; 0xff
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	21e8      	movs	r1, #232	; 0xe8
 800976c:	187a      	adds	r2, r7, r1
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	1d7b      	adds	r3, r7, #5
 8009772:	33ff      	adds	r3, #255	; 0xff
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2201      	movs	r2, #1
 8009778:	4013      	ands	r3, r2
 800977a:	d004      	beq.n	8009786 <USB_EPStartXfer+0xae6>
 800977c:	187b      	adds	r3, r7, r1
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3301      	adds	r3, #1
 8009782:	187a      	adds	r2, r7, r1
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	23e8      	movs	r3, #232	; 0xe8
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	029b      	lsls	r3, r3, #10
 8009790:	b29a      	uxth	r2, r3
 8009792:	238c      	movs	r3, #140	; 0x8c
 8009794:	18fb      	adds	r3, r7, r3
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	801a      	strh	r2, [r3, #0]
 800979a:	e305      	b.n	8009da8 <USB_EPStartXfer+0x1108>
 800979c:	1d7b      	adds	r3, r7, #5
 800979e:	33ff      	adds	r3, #255	; 0xff
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	21e8      	movs	r1, #232	; 0xe8
 80097a6:	187a      	adds	r2, r7, r1
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	1d7b      	adds	r3, r7, #5
 80097ac:	33ff      	adds	r3, #255	; 0xff
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	221f      	movs	r2, #31
 80097b2:	4013      	ands	r3, r2
 80097b4:	d104      	bne.n	80097c0 <USB_EPStartXfer+0xb20>
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	187a      	adds	r2, r7, r1
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	23e8      	movs	r3, #232	; 0xe8
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	029b      	lsls	r3, r3, #10
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4aca      	ldr	r2, [pc, #808]	; (8009af8 <USB_EPStartXfer+0xe58>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	238c      	movs	r3, #140	; 0x8c
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	801a      	strh	r2, [r3, #0]
 80097da:	e2e5      	b.n	8009da8 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d000      	beq.n	80097e6 <USB_EPStartXfer+0xb46>
 80097e4:	e16f      	b.n	8009ac6 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d16f      	bne.n	80098ce <USB_EPStartXfer+0xc2e>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	21ac      	movs	r1, #172	; 0xac
 80097f2:	187a      	adds	r2, r7, r1
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2250      	movs	r2, #80	; 0x50
 80097fa:	5a9b      	ldrh	r3, [r3, r2]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	001a      	movs	r2, r3
 8009800:	187b      	adds	r3, r7, r1
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	189b      	adds	r3, r3, r2
 8009806:	187a      	adds	r2, r7, r1
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	00da      	lsls	r2, r3, #3
 8009810:	187b      	adds	r3, r7, r1
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	18d3      	adds	r3, r2, r3
 8009816:	4ab9      	ldr	r2, [pc, #740]	; (8009afc <USB_EPStartXfer+0xe5c>)
 8009818:	4694      	mov	ip, r2
 800981a:	4463      	add	r3, ip
 800981c:	21a8      	movs	r1, #168	; 0xa8
 800981e:	187a      	adds	r2, r7, r1
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d114      	bne.n	8009854 <USB_EPStartXfer+0xbb4>
 800982a:	187b      	adds	r3, r7, r1
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	b29b      	uxth	r3, r3
 8009832:	4ab3      	ldr	r2, [pc, #716]	; (8009b00 <USB_EPStartXfer+0xe60>)
 8009834:	4013      	ands	r3, r2
 8009836:	b29a      	uxth	r2, r3
 8009838:	187b      	adds	r3, r7, r1
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	187b      	adds	r3, r7, r1
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	4aac      	ldr	r2, [pc, #688]	; (8009af8 <USB_EPStartXfer+0xe58>)
 8009848:	4313      	orrs	r3, r2
 800984a:	b29a      	uxth	r2, r3
 800984c:	187b      	adds	r3, r7, r1
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e060      	b.n	8009916 <USB_EPStartXfer+0xc76>
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b3e      	cmp	r3, #62	; 0x3e
 800985a:	d81a      	bhi.n	8009892 <USB_EPStartXfer+0xbf2>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	21e4      	movs	r1, #228	; 0xe4
 8009864:	187a      	adds	r2, r7, r1
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2201      	movs	r2, #1
 800986e:	4013      	ands	r3, r2
 8009870:	d004      	beq.n	800987c <USB_EPStartXfer+0xbdc>
 8009872:	187b      	adds	r3, r7, r1
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	187a      	adds	r2, r7, r1
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	23e4      	movs	r3, #228	; 0xe4
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	029b      	lsls	r3, r3, #10
 8009886:	b29a      	uxth	r2, r3
 8009888:	23a8      	movs	r3, #168	; 0xa8
 800988a:	18fb      	adds	r3, r7, r3
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e041      	b.n	8009916 <USB_EPStartXfer+0xc76>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	21e4      	movs	r1, #228	; 0xe4
 800989a:	187a      	adds	r2, r7, r1
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	221f      	movs	r2, #31
 80098a4:	4013      	ands	r3, r2
 80098a6:	d104      	bne.n	80098b2 <USB_EPStartXfer+0xc12>
 80098a8:	187b      	adds	r3, r7, r1
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	187a      	adds	r2, r7, r1
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	23e4      	movs	r3, #228	; 0xe4
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4a8e      	ldr	r2, [pc, #568]	; (8009af8 <USB_EPStartXfer+0xe58>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	23a8      	movs	r3, #168	; 0xa8
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e023      	b.n	8009916 <USB_EPStartXfer+0xc76>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d11f      	bne.n	8009916 <USB_EPStartXfer+0xc76>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	21b4      	movs	r1, #180	; 0xb4
 80098da:	187a      	adds	r2, r7, r1
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2250      	movs	r2, #80	; 0x50
 80098e2:	5a9b      	ldrh	r3, [r3, r2]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	001a      	movs	r2, r3
 80098e8:	187b      	adds	r3, r7, r1
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	187a      	adds	r2, r7, r1
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	00da      	lsls	r2, r3, #3
 80098f8:	187b      	adds	r3, r7, r1
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	18d3      	adds	r3, r2, r3
 80098fe:	4a7f      	ldr	r2, [pc, #508]	; (8009afc <USB_EPStartXfer+0xe5c>)
 8009900:	4694      	mov	ip, r2
 8009902:	4463      	add	r3, ip
 8009904:	21b0      	movs	r1, #176	; 0xb0
 8009906:	187a      	adds	r2, r7, r1
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	b29a      	uxth	r2, r3
 8009910:	187b      	adds	r3, r7, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	22a4      	movs	r2, #164	; 0xa4
 800991a:	18ba      	adds	r2, r7, r2
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d16f      	bne.n	8009a06 <USB_EPStartXfer+0xd66>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	219c      	movs	r1, #156	; 0x9c
 800992a:	187a      	adds	r2, r7, r1
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2250      	movs	r2, #80	; 0x50
 8009932:	5a9b      	ldrh	r3, [r3, r2]
 8009934:	b29b      	uxth	r3, r3
 8009936:	001a      	movs	r2, r3
 8009938:	187b      	adds	r3, r7, r1
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	189b      	adds	r3, r3, r2
 800993e:	187a      	adds	r2, r7, r1
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	00da      	lsls	r2, r3, #3
 8009948:	187b      	adds	r3, r7, r1
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	18d3      	adds	r3, r2, r3
 800994e:	4a6d      	ldr	r2, [pc, #436]	; (8009b04 <USB_EPStartXfer+0xe64>)
 8009950:	4694      	mov	ip, r2
 8009952:	4463      	add	r3, ip
 8009954:	2198      	movs	r1, #152	; 0x98
 8009956:	187a      	adds	r2, r7, r1
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d114      	bne.n	800998c <USB_EPStartXfer+0xcec>
 8009962:	187b      	adds	r3, r7, r1
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	4a65      	ldr	r2, [pc, #404]	; (8009b00 <USB_EPStartXfer+0xe60>)
 800996c:	4013      	ands	r3, r2
 800996e:	b29a      	uxth	r2, r3
 8009970:	187b      	adds	r3, r7, r1
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	801a      	strh	r2, [r3, #0]
 8009976:	187b      	adds	r3, r7, r1
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	4a5e      	ldr	r2, [pc, #376]	; (8009af8 <USB_EPStartXfer+0xe58>)
 8009980:	4313      	orrs	r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	187b      	adds	r3, r7, r1
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e05d      	b.n	8009a48 <USB_EPStartXfer+0xda8>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b3e      	cmp	r3, #62	; 0x3e
 8009992:	d81a      	bhi.n	80099ca <USB_EPStartXfer+0xd2a>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	21e0      	movs	r1, #224	; 0xe0
 800999c:	187a      	adds	r2, r7, r1
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2201      	movs	r2, #1
 80099a6:	4013      	ands	r3, r2
 80099a8:	d004      	beq.n	80099b4 <USB_EPStartXfer+0xd14>
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	187a      	adds	r2, r7, r1
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	23e0      	movs	r3, #224	; 0xe0
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	b29a      	uxth	r2, r3
 80099c0:	2398      	movs	r3, #152	; 0x98
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	801a      	strh	r2, [r3, #0]
 80099c8:	e03e      	b.n	8009a48 <USB_EPStartXfer+0xda8>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	21e0      	movs	r1, #224	; 0xe0
 80099d2:	187a      	adds	r2, r7, r1
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	221f      	movs	r2, #31
 80099dc:	4013      	ands	r3, r2
 80099de:	d104      	bne.n	80099ea <USB_EPStartXfer+0xd4a>
 80099e0:	187b      	adds	r3, r7, r1
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	187a      	adds	r2, r7, r1
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	23e0      	movs	r3, #224	; 0xe0
 80099ec:	18fb      	adds	r3, r7, r3
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	029b      	lsls	r3, r3, #10
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <USB_EPStartXfer+0xe58>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	2398      	movs	r3, #152	; 0x98
 80099fe:	18fb      	adds	r3, r7, r3
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e020      	b.n	8009a48 <USB_EPStartXfer+0xda8>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d11c      	bne.n	8009a48 <USB_EPStartXfer+0xda8>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2250      	movs	r2, #80	; 0x50
 8009a12:	5a9b      	ldrh	r3, [r3, r2]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	001a      	movs	r2, r3
 8009a18:	21a4      	movs	r1, #164	; 0xa4
 8009a1a:	187b      	adds	r3, r7, r1
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	189b      	adds	r3, r3, r2
 8009a20:	187a      	adds	r2, r7, r1
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	00da      	lsls	r2, r3, #3
 8009a2a:	187b      	adds	r3, r7, r1
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	18d3      	adds	r3, r2, r3
 8009a30:	4a34      	ldr	r2, [pc, #208]	; (8009b04 <USB_EPStartXfer+0xe64>)
 8009a32:	4694      	mov	ip, r2
 8009a34:	4463      	add	r3, ip
 8009a36:	21a0      	movs	r1, #160	; 0xa0
 8009a38:	187a      	adds	r2, r7, r1
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	187b      	adds	r3, r7, r1
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d100      	bne.n	8009a52 <USB_EPStartXfer+0xdb2>
 8009a50:	e1aa      	b.n	8009da8 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	18d2      	adds	r2, r2, r3
 8009a5c:	2196      	movs	r1, #150	; 0x96
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	8812      	ldrh	r2, [r2, #0]
 8009a62:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	881a      	ldrh	r2, [r3, #0]
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	01db      	lsls	r3, r3, #7
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <USB_EPStartXfer+0xdda>
 8009a70:	187b      	adds	r3, r7, r1
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	2240      	movs	r2, #64	; 0x40
 8009a76:	4013      	ands	r3, r2
 8009a78:	d10d      	bne.n	8009a96 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a7a:	2196      	movs	r1, #150	; 0x96
 8009a7c:	187b      	adds	r3, r7, r1
 8009a7e:	881a      	ldrh	r2, [r3, #0]
 8009a80:	2380      	movs	r3, #128	; 0x80
 8009a82:	01db      	lsls	r3, r3, #7
 8009a84:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a86:	d000      	beq.n	8009a8a <USB_EPStartXfer+0xdea>
 8009a88:	e18e      	b.n	8009da8 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a8a:	187b      	adds	r3, r7, r1
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	2240      	movs	r2, #64	; 0x40
 8009a90:	4013      	ands	r3, r2
 8009a92:	d000      	beq.n	8009a96 <USB_EPStartXfer+0xdf6>
 8009a94:	e188      	b.n	8009da8 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	18d3      	adds	r3, r2, r3
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	2094      	movs	r0, #148	; 0x94
 8009aa6:	183b      	adds	r3, r7, r0
 8009aa8:	4917      	ldr	r1, [pc, #92]	; (8009b08 <USB_EPStartXfer+0xe68>)
 8009aaa:	400a      	ands	r2, r1
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	18d3      	adds	r3, r2, r3
 8009ab8:	183a      	adds	r2, r7, r0
 8009aba:	8812      	ldrh	r2, [r2, #0]
 8009abc:	4913      	ldr	r1, [pc, #76]	; (8009b0c <USB_EPStartXfer+0xe6c>)
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	b292      	uxth	r2, r2
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e170      	b.n	8009da8 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	78db      	ldrb	r3, [r3, #3]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d000      	beq.n	8009ad0 <USB_EPStartXfer+0xe30>
 8009ace:	e169      	b.n	8009da4 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699a      	ldr	r2, [r3, #24]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d919      	bls.n	8009b10 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	1d7a      	adds	r2, r7, #5
 8009ae2:	32ff      	adds	r2, #255	; 0xff
 8009ae4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	1d7b      	adds	r3, r7, #5
 8009aec:	33ff      	adds	r3, #255	; 0xff
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	619a      	str	r2, [r3, #24]
 8009af6:	e013      	b.n	8009b20 <USB_EPStartXfer+0xe80>
 8009af8:	ffff8000 	.word	0xffff8000
 8009afc:	00000402 	.word	0x00000402
 8009b00:	ffff83ff 	.word	0xffff83ff
 8009b04:	00000406 	.word	0x00000406
 8009b08:	ffff8f8f 	.word	0xffff8f8f
 8009b0c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	1d7a      	adds	r2, r7, #5
 8009b16:	32ff      	adds	r2, #255	; 0xff
 8009b18:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d000      	beq.n	8009b2a <USB_EPStartXfer+0xe8a>
 8009b28:	e075      	b.n	8009c16 <USB_EPStartXfer+0xf76>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	21cc      	movs	r1, #204	; 0xcc
 8009b2e:	187a      	adds	r2, r7, r1
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2250      	movs	r2, #80	; 0x50
 8009b36:	5a9b      	ldrh	r3, [r3, r2]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	001a      	movs	r2, r3
 8009b3c:	187b      	adds	r3, r7, r1
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	189b      	adds	r3, r3, r2
 8009b42:	187a      	adds	r2, r7, r1
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	00da      	lsls	r2, r3, #3
 8009b4c:	187b      	adds	r3, r7, r1
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	18d3      	adds	r3, r2, r3
 8009b52:	4aaa      	ldr	r2, [pc, #680]	; (8009dfc <USB_EPStartXfer+0x115c>)
 8009b54:	4694      	mov	ip, r2
 8009b56:	4463      	add	r3, ip
 8009b58:	21c8      	movs	r1, #200	; 0xc8
 8009b5a:	187a      	adds	r2, r7, r1
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	1d7b      	adds	r3, r7, #5
 8009b60:	33ff      	adds	r3, #255	; 0xff
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d114      	bne.n	8009b92 <USB_EPStartXfer+0xef2>
 8009b68:	187b      	adds	r3, r7, r1
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4aa3      	ldr	r2, [pc, #652]	; (8009e00 <USB_EPStartXfer+0x1160>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	187b      	adds	r3, r7, r1
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	187b      	adds	r3, r7, r1
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4a9f      	ldr	r2, [pc, #636]	; (8009e04 <USB_EPStartXfer+0x1164>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	187b      	adds	r3, r7, r1
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e066      	b.n	8009c60 <USB_EPStartXfer+0xfc0>
 8009b92:	1d7b      	adds	r3, r7, #5
 8009b94:	33ff      	adds	r3, #255	; 0xff
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b3e      	cmp	r3, #62	; 0x3e
 8009b9a:	d81c      	bhi.n	8009bd6 <USB_EPStartXfer+0xf36>
 8009b9c:	1d7b      	adds	r3, r7, #5
 8009b9e:	33ff      	adds	r3, #255	; 0xff
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	085b      	lsrs	r3, r3, #1
 8009ba4:	21dc      	movs	r1, #220	; 0xdc
 8009ba6:	187a      	adds	r2, r7, r1
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	1d7b      	adds	r3, r7, #5
 8009bac:	33ff      	adds	r3, #255	; 0xff
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <USB_EPStartXfer+0xf20>
 8009bb6:	187b      	adds	r3, r7, r1
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	187a      	adds	r2, r7, r1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	23dc      	movs	r3, #220	; 0xdc
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	029b      	lsls	r3, r3, #10
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	23c8      	movs	r3, #200	; 0xc8
 8009bce:	18fb      	adds	r3, r7, r3
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e044      	b.n	8009c60 <USB_EPStartXfer+0xfc0>
 8009bd6:	1d7b      	adds	r3, r7, #5
 8009bd8:	33ff      	adds	r3, #255	; 0xff
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	095b      	lsrs	r3, r3, #5
 8009bde:	21dc      	movs	r1, #220	; 0xdc
 8009be0:	187a      	adds	r2, r7, r1
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	1d7b      	adds	r3, r7, #5
 8009be6:	33ff      	adds	r3, #255	; 0xff
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	221f      	movs	r2, #31
 8009bec:	4013      	ands	r3, r2
 8009bee:	d104      	bne.n	8009bfa <USB_EPStartXfer+0xf5a>
 8009bf0:	187b      	adds	r3, r7, r1
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	187a      	adds	r2, r7, r1
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	23dc      	movs	r3, #220	; 0xdc
 8009bfc:	18fb      	adds	r3, r7, r3
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	029b      	lsls	r3, r3, #10
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4a7f      	ldr	r2, [pc, #508]	; (8009e04 <USB_EPStartXfer+0x1164>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	23c8      	movs	r3, #200	; 0xc8
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	801a      	strh	r2, [r3, #0]
 8009c14:	e024      	b.n	8009c60 <USB_EPStartXfer+0xfc0>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	785b      	ldrb	r3, [r3, #1]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d120      	bne.n	8009c60 <USB_EPStartXfer+0xfc0>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	21d4      	movs	r1, #212	; 0xd4
 8009c22:	187a      	adds	r2, r7, r1
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2250      	movs	r2, #80	; 0x50
 8009c2a:	5a9b      	ldrh	r3, [r3, r2]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	001a      	movs	r2, r3
 8009c30:	187b      	adds	r3, r7, r1
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	189b      	adds	r3, r3, r2
 8009c36:	187a      	adds	r2, r7, r1
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	00da      	lsls	r2, r3, #3
 8009c40:	187b      	adds	r3, r7, r1
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	18d3      	adds	r3, r2, r3
 8009c46:	4a6d      	ldr	r2, [pc, #436]	; (8009dfc <USB_EPStartXfer+0x115c>)
 8009c48:	4694      	mov	ip, r2
 8009c4a:	4463      	add	r3, ip
 8009c4c:	21d0      	movs	r1, #208	; 0xd0
 8009c4e:	187a      	adds	r2, r7, r1
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	1d7b      	adds	r3, r7, #5
 8009c54:	33ff      	adds	r3, #255	; 0xff
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	22c4      	movs	r2, #196	; 0xc4
 8009c64:	18ba      	adds	r2, r7, r2
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d000      	beq.n	8009c72 <USB_EPStartXfer+0xfd2>
 8009c70:	e075      	b.n	8009d5e <USB_EPStartXfer+0x10be>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	21bc      	movs	r1, #188	; 0xbc
 8009c76:	187a      	adds	r2, r7, r1
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2250      	movs	r2, #80	; 0x50
 8009c7e:	5a9b      	ldrh	r3, [r3, r2]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	001a      	movs	r2, r3
 8009c84:	187b      	adds	r3, r7, r1
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	189b      	adds	r3, r3, r2
 8009c8a:	187a      	adds	r2, r7, r1
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	00da      	lsls	r2, r3, #3
 8009c94:	187b      	adds	r3, r7, r1
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	18d3      	adds	r3, r2, r3
 8009c9a:	4a5b      	ldr	r2, [pc, #364]	; (8009e08 <USB_EPStartXfer+0x1168>)
 8009c9c:	4694      	mov	ip, r2
 8009c9e:	4463      	add	r3, ip
 8009ca0:	21b8      	movs	r1, #184	; 0xb8
 8009ca2:	187a      	adds	r2, r7, r1
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	1d7b      	adds	r3, r7, #5
 8009ca8:	33ff      	adds	r3, #255	; 0xff
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d114      	bne.n	8009cda <USB_EPStartXfer+0x103a>
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4a51      	ldr	r2, [pc, #324]	; (8009e00 <USB_EPStartXfer+0x1160>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4a4d      	ldr	r2, [pc, #308]	; (8009e04 <USB_EPStartXfer+0x1164>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	187b      	adds	r3, r7, r1
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	e066      	b.n	8009da8 <USB_EPStartXfer+0x1108>
 8009cda:	1d7b      	adds	r3, r7, #5
 8009cdc:	33ff      	adds	r3, #255	; 0xff
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce2:	d81c      	bhi.n	8009d1e <USB_EPStartXfer+0x107e>
 8009ce4:	1d7b      	adds	r3, r7, #5
 8009ce6:	33ff      	adds	r3, #255	; 0xff
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	21d8      	movs	r1, #216	; 0xd8
 8009cee:	187a      	adds	r2, r7, r1
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	1d7b      	adds	r3, r7, #5
 8009cf4:	33ff      	adds	r3, #255	; 0xff
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	d004      	beq.n	8009d08 <USB_EPStartXfer+0x1068>
 8009cfe:	187b      	adds	r3, r7, r1
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	187a      	adds	r2, r7, r1
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	23d8      	movs	r3, #216	; 0xd8
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	029b      	lsls	r3, r3, #10
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	23b8      	movs	r3, #184	; 0xb8
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e044      	b.n	8009da8 <USB_EPStartXfer+0x1108>
 8009d1e:	1d7b      	adds	r3, r7, #5
 8009d20:	33ff      	adds	r3, #255	; 0xff
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	095b      	lsrs	r3, r3, #5
 8009d26:	21d8      	movs	r1, #216	; 0xd8
 8009d28:	187a      	adds	r2, r7, r1
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	1d7b      	adds	r3, r7, #5
 8009d2e:	33ff      	adds	r3, #255	; 0xff
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	221f      	movs	r2, #31
 8009d34:	4013      	ands	r3, r2
 8009d36:	d104      	bne.n	8009d42 <USB_EPStartXfer+0x10a2>
 8009d38:	187b      	adds	r3, r7, r1
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	187a      	adds	r2, r7, r1
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	23d8      	movs	r3, #216	; 0xd8
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	029b      	lsls	r3, r3, #10
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4a2d      	ldr	r2, [pc, #180]	; (8009e04 <USB_EPStartXfer+0x1164>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	23b8      	movs	r3, #184	; 0xb8
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	e024      	b.n	8009da8 <USB_EPStartXfer+0x1108>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d120      	bne.n	8009da8 <USB_EPStartXfer+0x1108>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2250      	movs	r2, #80	; 0x50
 8009d6a:	5a9b      	ldrh	r3, [r3, r2]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	001a      	movs	r2, r3
 8009d70:	21c4      	movs	r1, #196	; 0xc4
 8009d72:	187b      	adds	r3, r7, r1
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	187a      	adds	r2, r7, r1
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	00da      	lsls	r2, r3, #3
 8009d82:	187b      	adds	r3, r7, r1
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	18d3      	adds	r3, r2, r3
 8009d88:	4a1f      	ldr	r2, [pc, #124]	; (8009e08 <USB_EPStartXfer+0x1168>)
 8009d8a:	4694      	mov	ip, r2
 8009d8c:	4463      	add	r3, ip
 8009d8e:	21c0      	movs	r1, #192	; 0xc0
 8009d90:	187a      	adds	r2, r7, r1
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	1d7b      	adds	r3, r7, #5
 8009d96:	33ff      	adds	r3, #255	; 0xff
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	187b      	adds	r3, r7, r1
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	801a      	strh	r2, [r3, #0]
 8009da2:	e001      	b.n	8009da8 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e025      	b.n	8009df4 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	18d3      	adds	r3, r2, r3
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	208a      	movs	r0, #138	; 0x8a
 8009db8:	183b      	adds	r3, r7, r0
 8009dba:	4914      	ldr	r1, [pc, #80]	; (8009e0c <USB_EPStartXfer+0x116c>)
 8009dbc:	400a      	ands	r2, r1
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	183b      	adds	r3, r7, r0
 8009dc2:	183a      	adds	r2, r7, r0
 8009dc4:	8812      	ldrh	r2, [r2, #0]
 8009dc6:	2180      	movs	r1, #128	; 0x80
 8009dc8:	0149      	lsls	r1, r1, #5
 8009dca:	404a      	eors	r2, r1
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	183b      	adds	r3, r7, r0
 8009dd0:	183a      	adds	r2, r7, r0
 8009dd2:	8812      	ldrh	r2, [r2, #0]
 8009dd4:	2180      	movs	r1, #128	; 0x80
 8009dd6:	0189      	lsls	r1, r1, #6
 8009dd8:	404a      	eors	r2, r1
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	18d3      	adds	r3, r2, r3
 8009de6:	183a      	adds	r2, r7, r0
 8009de8:	8812      	ldrh	r2, [r2, #0]
 8009dea:	4909      	ldr	r1, [pc, #36]	; (8009e10 <USB_EPStartXfer+0x1170>)
 8009dec:	430a      	orrs	r2, r1
 8009dee:	b292      	uxth	r2, r2
 8009df0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	0018      	movs	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	b043      	add	sp, #268	; 0x10c
 8009dfa:	bd90      	pop	{r4, r7, pc}
 8009dfc:	00000402 	.word	0x00000402
 8009e00:	ffff83ff 	.word	0xffff83ff
 8009e04:	ffff8000 	.word	0xffff8000
 8009e08:	00000406 	.word	0x00000406
 8009e0c:	ffffbf8f 	.word	0xffffbf8f
 8009e10:	ffff8080 	.word	0xffff8080

08009e14 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	785b      	ldrb	r3, [r3, #1]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01d      	beq.n	8009e62 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	18d3      	adds	r3, r2, r3
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	200c      	movs	r0, #12
 8009e36:	183b      	adds	r3, r7, r0
 8009e38:	491b      	ldr	r1, [pc, #108]	; (8009ea8 <USB_EPSetStall+0x94>)
 8009e3a:	400a      	ands	r2, r1
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	183b      	adds	r3, r7, r0
 8009e40:	183a      	adds	r2, r7, r0
 8009e42:	8812      	ldrh	r2, [r2, #0]
 8009e44:	2110      	movs	r1, #16
 8009e46:	404a      	eors	r2, r1
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	183a      	adds	r2, r7, r0
 8009e56:	8812      	ldrh	r2, [r2, #0]
 8009e58:	4914      	ldr	r1, [pc, #80]	; (8009eac <USB_EPSetStall+0x98>)
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	e01d      	b.n	8009e9e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	18d3      	adds	r3, r2, r3
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	200e      	movs	r0, #14
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	490e      	ldr	r1, [pc, #56]	; (8009eb0 <USB_EPSetStall+0x9c>)
 8009e76:	400a      	ands	r2, r1
 8009e78:	801a      	strh	r2, [r3, #0]
 8009e7a:	183b      	adds	r3, r7, r0
 8009e7c:	183a      	adds	r2, r7, r0
 8009e7e:	8812      	ldrh	r2, [r2, #0]
 8009e80:	2180      	movs	r1, #128	; 0x80
 8009e82:	0149      	lsls	r1, r1, #5
 8009e84:	404a      	eors	r2, r1
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	18d3      	adds	r3, r2, r3
 8009e92:	183a      	adds	r2, r7, r0
 8009e94:	8812      	ldrh	r2, [r2, #0]
 8009e96:	4905      	ldr	r1, [pc, #20]	; (8009eac <USB_EPSetStall+0x98>)
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	b292      	uxth	r2, r2
 8009e9c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	b004      	add	sp, #16
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	ffff8fbf 	.word	0xffff8fbf
 8009eac:	ffff8080 	.word	0xffff8080
 8009eb0:	ffffbf8f 	.word	0xffffbf8f

08009eb4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	7b1b      	ldrb	r3, [r3, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d000      	beq.n	8009ec8 <USB_EPClearStall+0x14>
 8009ec6:	e095      	b.n	8009ff4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d046      	beq.n	8009f5e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	18d2      	adds	r2, r2, r3
 8009eda:	2110      	movs	r1, #16
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	8812      	ldrh	r2, [r2, #0]
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	187b      	adds	r3, r7, r1
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	2240      	movs	r2, #64	; 0x40
 8009ee8:	4013      	ands	r3, r2
 8009eea:	d016      	beq.n	8009f1a <USB_EPClearStall+0x66>
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	18d3      	adds	r3, r2, r3
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	200e      	movs	r0, #14
 8009efc:	183b      	adds	r3, r7, r0
 8009efe:	4940      	ldr	r1, [pc, #256]	; (800a000 <USB_EPClearStall+0x14c>)
 8009f00:	400a      	ands	r2, r1
 8009f02:	801a      	strh	r2, [r3, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	18d3      	adds	r3, r2, r3
 8009f0e:	183a      	adds	r2, r7, r0
 8009f10:	8812      	ldrh	r2, [r2, #0]
 8009f12:	493c      	ldr	r1, [pc, #240]	; (800a004 <USB_EPClearStall+0x150>)
 8009f14:	430a      	orrs	r2, r1
 8009f16:	b292      	uxth	r2, r2
 8009f18:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	78db      	ldrb	r3, [r3, #3]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d068      	beq.n	8009ff4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	200c      	movs	r0, #12
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	4934      	ldr	r1, [pc, #208]	; (800a008 <USB_EPClearStall+0x154>)
 8009f36:	400a      	ands	r2, r1
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	183b      	adds	r3, r7, r0
 8009f3c:	183a      	adds	r2, r7, r0
 8009f3e:	8812      	ldrh	r2, [r2, #0]
 8009f40:	2120      	movs	r1, #32
 8009f42:	404a      	eors	r2, r1
 8009f44:	801a      	strh	r2, [r3, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	18d3      	adds	r3, r2, r3
 8009f50:	183a      	adds	r2, r7, r0
 8009f52:	8812      	ldrh	r2, [r2, #0]
 8009f54:	492d      	ldr	r1, [pc, #180]	; (800a00c <USB_EPClearStall+0x158>)
 8009f56:	430a      	orrs	r2, r1
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	e04a      	b.n	8009ff4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	18d2      	adds	r2, r2, r3
 8009f68:	2116      	movs	r1, #22
 8009f6a:	187b      	adds	r3, r7, r1
 8009f6c:	8812      	ldrh	r2, [r2, #0]
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	881a      	ldrh	r2, [r3, #0]
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d016      	beq.n	8009faa <USB_EPClearStall+0xf6>
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	18d3      	adds	r3, r2, r3
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	2014      	movs	r0, #20
 8009f8c:	183b      	adds	r3, r7, r0
 8009f8e:	491c      	ldr	r1, [pc, #112]	; (800a000 <USB_EPClearStall+0x14c>)
 8009f90:	400a      	ands	r2, r1
 8009f92:	801a      	strh	r2, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	18d3      	adds	r3, r2, r3
 8009f9e:	183a      	adds	r2, r7, r0
 8009fa0:	8812      	ldrh	r2, [r2, #0]
 8009fa2:	491b      	ldr	r1, [pc, #108]	; (800a010 <USB_EPClearStall+0x15c>)
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	2012      	movs	r0, #18
 8009fba:	183b      	adds	r3, r7, r0
 8009fbc:	4915      	ldr	r1, [pc, #84]	; (800a014 <USB_EPClearStall+0x160>)
 8009fbe:	400a      	ands	r2, r1
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	183b      	adds	r3, r7, r0
 8009fc4:	183a      	adds	r2, r7, r0
 8009fc6:	8812      	ldrh	r2, [r2, #0]
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	0149      	lsls	r1, r1, #5
 8009fcc:	404a      	eors	r2, r1
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	183b      	adds	r3, r7, r0
 8009fd2:	183a      	adds	r2, r7, r0
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	2180      	movs	r1, #128	; 0x80
 8009fd8:	0189      	lsls	r1, r1, #6
 8009fda:	404a      	eors	r2, r1
 8009fdc:	801a      	strh	r2, [r3, #0]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	18d3      	adds	r3, r2, r3
 8009fe8:	183a      	adds	r2, r7, r0
 8009fea:	8812      	ldrh	r2, [r2, #0]
 8009fec:	4907      	ldr	r1, [pc, #28]	; (800a00c <USB_EPClearStall+0x158>)
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	b292      	uxth	r2, r2
 8009ff2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b006      	add	sp, #24
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	ffff8f8f 	.word	0xffff8f8f
 800a004:	ffff80c0 	.word	0xffff80c0
 800a008:	ffff8fbf 	.word	0xffff8fbf
 800a00c:	ffff8080 	.word	0xffff8080
 800a010:	ffffc080 	.word	0xffffc080
 800a014:	ffffbf8f 	.word	0xffffbf8f

0800a018 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	000a      	movs	r2, r1
 800a022:	1cfb      	adds	r3, r7, #3
 800a024:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a026:	1cfb      	adds	r3, r7, #3
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d103      	bne.n	800a036 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	224c      	movs	r2, #76	; 0x4c
 800a032:	2180      	movs	r1, #128	; 0x80
 800a034:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	0018      	movs	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b002      	add	sp, #8
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2258      	movs	r2, #88	; 0x58
 800a04c:	5a9b      	ldrh	r3, [r3, r2]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4a05      	ldr	r2, [pc, #20]	; (800a068 <USB_DevConnect+0x28>)
 800a052:	4313      	orrs	r3, r2
 800a054:	b299      	uxth	r1, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2258      	movs	r2, #88	; 0x58
 800a05a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	0018      	movs	r0, r3
 800a060:	46bd      	mov	sp, r7
 800a062:	b002      	add	sp, #8
 800a064:	bd80      	pop	{r7, pc}
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	ffff8000 	.word	0xffff8000

0800a06c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2244      	movs	r2, #68	; 0x44
 800a078:	5a9b      	ldrh	r3, [r3, r2]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a07e:	68fb      	ldr	r3, [r7, #12]
}
 800a080:	0018      	movs	r0, r3
 800a082:	46bd      	mov	sp, r7
 800a084:	b004      	add	sp, #16
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	0019      	movs	r1, r3
 800a094:	1dbb      	adds	r3, r7, #6
 800a096:	801a      	strh	r2, [r3, #0]
 800a098:	1d3b      	adds	r3, r7, #4
 800a09a:	1c0a      	adds	r2, r1, #0
 800a09c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a09e:	1d3b      	adds	r3, r7, #4
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	085b      	lsrs	r3, r3, #1
 800a0a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0b0:	1dbb      	adds	r3, r7, #6
 800a0b2:	881a      	ldrh	r2, [r3, #0]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	18d3      	adds	r3, r2, r3
 800a0b8:	2280      	movs	r2, #128	; 0x80
 800a0ba:	00d2      	lsls	r2, r2, #3
 800a0bc:	4694      	mov	ip, r2
 800a0be:	4463      	add	r3, ip
 800a0c0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0c6:	e01b      	b.n	800a100 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	021b      	lsls	r3, r3, #8
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	001a      	movs	r2, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e0      	bne.n	800a0c8 <USB_WritePMA+0x40>
  }
}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	46c0      	nop			; (mov r8, r8)
 800a10a:	46bd      	mov	sp, r7
 800a10c:	b00c      	add	sp, #48	; 0x30
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08a      	sub	sp, #40	; 0x28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	0019      	movs	r1, r3
 800a11c:	1dbb      	adds	r3, r7, #6
 800a11e:	801a      	strh	r2, [r3, #0]
 800a120:	1d3b      	adds	r3, r7, #4
 800a122:	1c0a      	adds	r2, r1, #0
 800a124:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a138:	1dbb      	adds	r3, r7, #6
 800a13a:	881a      	ldrh	r2, [r3, #0]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	18d3      	adds	r3, r2, r3
 800a140:	2280      	movs	r2, #128	; 0x80
 800a142:	00d2      	lsls	r2, r2, #3
 800a144:	4694      	mov	ip, r2
 800a146:	4463      	add	r3, ip
 800a148:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
 800a14e:	e018      	b.n	800a182 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	3302      	adds	r3, #2
 800a15c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3301      	adds	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b2da      	uxtb	r2, r3
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	3301      	adds	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	3b01      	subs	r3, #1
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e3      	bne.n	800a150 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a188:	1d3b      	adds	r3, r7, #4
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	2201      	movs	r2, #1
 800a18e:	4013      	ands	r3, r2
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	701a      	strb	r2, [r3, #0]
  }
}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b00a      	add	sp, #40	; 0x28
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	000a      	movs	r2, r1
 800a1b8:	1cfb      	adds	r3, r7, #3
 800a1ba:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a1bc:	230f      	movs	r3, #15
 800a1be:	18fb      	adds	r3, r7, r3
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7c1b      	ldrb	r3, [r3, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d116      	bne.n	800a1fa <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	2181      	movs	r1, #129	; 0x81
 800a1d6:	f002 f8b4 	bl	800c342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1e0:	2380      	movs	r3, #128	; 0x80
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	f002 f8aa 	bl	800c342 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	23b6      	movs	r3, #182	; 0xb6
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	50d1      	str	r1, [r2, r3]
 800a1f8:	e013      	b.n	800a222 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	2202      	movs	r2, #2
 800a200:	2181      	movs	r1, #129	; 0x81
 800a202:	f002 f89e 	bl	800c342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	2202      	movs	r2, #2
 800a212:	2101      	movs	r1, #1
 800a214:	f002 f895 	bl	800c342 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	23b6      	movs	r3, #182	; 0xb6
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	2101      	movs	r1, #1
 800a220:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	2308      	movs	r3, #8
 800a226:	2203      	movs	r2, #3
 800a228:	2182      	movs	r1, #130	; 0x82
 800a22a:	f002 f88a 	bl	800c342 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a234:	2387      	movs	r3, #135	; 0x87
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	0018      	movs	r0, r3
 800a23a:	f002 fa1b 	bl	800c674 <USBD_static_malloc>
 800a23e:	0001      	movs	r1, r0
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	23ae      	movs	r3, #174	; 0xae
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	23ae      	movs	r3, #174	; 0xae
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	58d3      	ldr	r3, [r2, r3]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a254:	230f      	movs	r3, #15
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	2201      	movs	r2, #1
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e02c      	b.n	800a2b8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	23ae      	movs	r3, #174	; 0xae
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	58d3      	ldr	r3, [r2, r3]
 800a266:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	23af      	movs	r3, #175	; 0xaf
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	58d3      	ldr	r3, [r2, r3]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	2385      	movs	r3, #133	; 0x85
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	2100      	movs	r1, #0
 800a27c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	2386      	movs	r3, #134	; 0x86
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	2100      	movs	r1, #0
 800a286:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7c1b      	ldrb	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	2381      	movs	r3, #129	; 0x81
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	58d2      	ldr	r2, [r2, r3]
 800a298:	2380      	movs	r3, #128	; 0x80
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	2101      	movs	r1, #1
 800a2a0:	f002 f99a 	bl	800c5d8 <USBD_LL_PrepareReceive>
 800a2a4:	e008      	b.n	800a2b8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	2381      	movs	r3, #129	; 0x81
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	58d2      	ldr	r2, [r2, r3]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	f002 f990 	bl	800c5d8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a2b8:	230f      	movs	r3, #15
 800a2ba:	18fb      	adds	r3, r7, r3
 800a2bc:	781b      	ldrb	r3, [r3, #0]
}
 800a2be:	0018      	movs	r0, r3
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	b004      	add	sp, #16
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	000a      	movs	r2, r1
 800a2d0:	1cfb      	adds	r3, r7, #3
 800a2d2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a2d4:	230f      	movs	r3, #15
 800a2d6:	18fb      	adds	r3, r7, r3
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2181      	movs	r1, #129	; 0x81
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f002 f865 	bl	800c3b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f002 f85d 	bl	800c3b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	23b6      	movs	r3, #182	; 0xb6
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2182      	movs	r1, #130	; 0x82
 800a304:	0018      	movs	r0, r3
 800a306:	f002 f853 	bl	800c3b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	23ae      	movs	r3, #174	; 0xae
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	58d3      	ldr	r3, [r2, r3]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d011      	beq.n	800a340 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	23af      	movs	r3, #175	; 0xaf
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	58d3      	ldr	r3, [r2, r3]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	23ae      	movs	r3, #174	; 0xae
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	58d3      	ldr	r3, [r2, r3]
 800a330:	0018      	movs	r0, r3
 800a332:	f002 f9ab 	bl	800c68c <USBD_static_free>
    pdev->pClassData = NULL;
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	23ae      	movs	r3, #174	; 0xae
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	2100      	movs	r1, #0
 800a33e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a340:	230f      	movs	r3, #15
 800a342:	18fb      	adds	r3, r7, r3
 800a344:	781b      	ldrb	r3, [r3, #0]
}
 800a346:	0018      	movs	r0, r3
 800a348:	46bd      	mov	sp, r7
 800a34a:	b004      	add	sp, #16
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	23ae      	movs	r3, #174	; 0xae
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	58d3      	ldr	r3, [r2, r3]
 800a362:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a364:	230f      	movs	r3, #15
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	2200      	movs	r2, #0
 800a36a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a36c:	230c      	movs	r3, #12
 800a36e:	18fb      	adds	r3, r7, r3
 800a370:	2200      	movs	r2, #0
 800a372:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a374:	2317      	movs	r3, #23
 800a376:	18fb      	adds	r3, r7, r3
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	001a      	movs	r2, r3
 800a382:	2360      	movs	r3, #96	; 0x60
 800a384:	4013      	ands	r3, r2
 800a386:	d03d      	beq.n	800a404 <USBD_CDC_Setup+0xb4>
 800a388:	2b20      	cmp	r3, #32
 800a38a:	d000      	beq.n	800a38e <USBD_CDC_Setup+0x3e>
 800a38c:	e094      	b.n	800a4b8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	88db      	ldrh	r3, [r3, #6]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d02b      	beq.n	800a3ee <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	da12      	bge.n	800a3c6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	23af      	movs	r3, #175	; 0xaf
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	58d3      	ldr	r3, [r2, r3]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a3ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	88d2      	ldrh	r2, [r2, #6]
 800a3b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3b6:	6939      	ldr	r1, [r7, #16]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	88da      	ldrh	r2, [r3, #6]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f001 fbb2 	bl	800bb28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a3c4:	e083      	b.n	800a4ce <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	7859      	ldrb	r1, [r3, #1]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	88db      	ldrh	r3, [r3, #6]
 800a3d6:	b2d9      	uxtb	r1, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	4a40      	ldr	r2, [pc, #256]	; (800a4dc <USBD_CDC_Setup+0x18c>)
 800a3dc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3de:	6939      	ldr	r1, [r7, #16]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	88da      	ldrh	r2, [r3, #6]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f001 fbd1 	bl	800bb8e <USBD_CtlPrepareRx>
      break;
 800a3ec:	e06f      	b.n	800a4ce <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	23af      	movs	r3, #175	; 0xaf
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	58d3      	ldr	r3, [r2, r3]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	7850      	ldrb	r0, [r2, #1]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	2200      	movs	r2, #0
 800a400:	4798      	blx	r3
      break;
 800a402:	e064      	b.n	800a4ce <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b0b      	cmp	r3, #11
 800a40a:	d037      	beq.n	800a47c <USBD_CDC_Setup+0x12c>
 800a40c:	dc47      	bgt.n	800a49e <USBD_CDC_Setup+0x14e>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <USBD_CDC_Setup+0xc8>
 800a412:	2b0a      	cmp	r3, #10
 800a414:	d019      	beq.n	800a44a <USBD_CDC_Setup+0xfa>
 800a416:	e042      	b.n	800a49e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	23a7      	movs	r3, #167	; 0xa7
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	5cd3      	ldrb	r3, [r2, r3]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d107      	bne.n	800a434 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a424:	230c      	movs	r3, #12
 800a426:	18f9      	adds	r1, r7, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	0018      	movs	r0, r3
 800a42e:	f001 fb7b 	bl	800bb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a432:	e040      	b.n	800a4b6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	0011      	movs	r1, r2
 800a43a:	0018      	movs	r0, r3
 800a43c:	f001 faf6 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a440:	2317      	movs	r3, #23
 800a442:	18fb      	adds	r3, r7, r3
 800a444:	2202      	movs	r2, #2
 800a446:	701a      	strb	r2, [r3, #0]
          break;
 800a448:	e035      	b.n	800a4b6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	23a7      	movs	r3, #167	; 0xa7
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	5cd3      	ldrb	r3, [r2, r3]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d107      	bne.n	800a466 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a456:	230f      	movs	r3, #15
 800a458:	18f9      	adds	r1, r7, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	0018      	movs	r0, r3
 800a460:	f001 fb62 	bl	800bb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a464:	e027      	b.n	800a4b6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	0011      	movs	r1, r2
 800a46c:	0018      	movs	r0, r3
 800a46e:	f001 fadd 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a472:	2317      	movs	r3, #23
 800a474:	18fb      	adds	r3, r7, r3
 800a476:	2202      	movs	r2, #2
 800a478:	701a      	strb	r2, [r3, #0]
          break;
 800a47a:	e01c      	b.n	800a4b6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	23a7      	movs	r3, #167	; 0xa7
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	5cd3      	ldrb	r3, [r2, r3]
 800a484:	2b03      	cmp	r3, #3
 800a486:	d015      	beq.n	800a4b4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	0011      	movs	r1, r2
 800a48e:	0018      	movs	r0, r3
 800a490:	f001 facc 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a494:	2317      	movs	r3, #23
 800a496:	18fb      	adds	r3, r7, r3
 800a498:	2202      	movs	r2, #2
 800a49a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a49c:	e00a      	b.n	800a4b4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f001 fac1 	bl	800ba2c <USBD_CtlError>
          ret = USBD_FAIL;
 800a4aa:	2317      	movs	r3, #23
 800a4ac:	18fb      	adds	r3, r7, r3
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	701a      	strb	r2, [r3, #0]
          break;
 800a4b2:	e000      	b.n	800a4b6 <USBD_CDC_Setup+0x166>
          break;
 800a4b4:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a4b6:	e00a      	b.n	800a4ce <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	0011      	movs	r1, r2
 800a4be:	0018      	movs	r0, r3
 800a4c0:	f001 fab4 	bl	800ba2c <USBD_CtlError>
      ret = USBD_FAIL;
 800a4c4:	2317      	movs	r3, #23
 800a4c6:	18fb      	adds	r3, r7, r3
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	701a      	strb	r2, [r3, #0]
      break;
 800a4cc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a4ce:	2317      	movs	r3, #23
 800a4d0:	18fb      	adds	r3, r7, r3
 800a4d2:	781b      	ldrb	r3, [r3, #0]
}
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b006      	add	sp, #24
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	00000201 	.word	0x00000201

0800a4e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	000a      	movs	r2, r1
 800a4ea:	1cfb      	adds	r3, r7, #3
 800a4ec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	23ae      	movs	r3, #174	; 0xae
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	58d3      	ldr	r3, [r2, r3]
 800a4f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	23b0      	movs	r3, #176	; 0xb0
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	58d3      	ldr	r3, [r2, r3]
 800a500:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	23ae      	movs	r3, #174	; 0xae
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	58d3      	ldr	r3, [r2, r3]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d03e      	beq.n	800a58c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a50e:	1cfb      	adds	r3, r7, #3
 800a510:	781a      	ldrb	r2, [r3, #0]
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	0013      	movs	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	18cb      	adds	r3, r1, r3
 800a51e:	331c      	adds	r3, #28
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d02b      	beq.n	800a57e <USBD_CDC_DataIn+0x9e>
 800a526:	1cfb      	adds	r3, r7, #3
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	0013      	movs	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	189b      	adds	r3, r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	18cb      	adds	r3, r1, r3
 800a536:	331c      	adds	r3, #28
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	1cfb      	adds	r3, r7, #3
 800a53c:	781a      	ldrb	r2, [r3, #0]
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	0013      	movs	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	189b      	adds	r3, r3, r2
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	18cb      	adds	r3, r1, r3
 800a54a:	3338      	adds	r3, #56	; 0x38
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	0019      	movs	r1, r3
 800a550:	f7f5 fe72 	bl	8000238 <__aeabi_uidivmod>
 800a554:	1e0b      	subs	r3, r1, #0
 800a556:	d112      	bne.n	800a57e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a558:	1cfb      	adds	r3, r7, #3
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	0013      	movs	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	189b      	adds	r3, r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	18cb      	adds	r3, r1, r3
 800a568:	331c      	adds	r3, #28
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a56e:	1cfb      	adds	r3, r7, #3
 800a570:	7819      	ldrb	r1, [r3, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	2300      	movs	r3, #0
 800a576:	2200      	movs	r2, #0
 800a578:	f001 fff7 	bl	800c56a <USBD_LL_Transmit>
 800a57c:	e004      	b.n	800a588 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	2385      	movs	r3, #133	; 0x85
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	2100      	movs	r1, #0
 800a586:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	e000      	b.n	800a58e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a58c:	2302      	movs	r3, #2
  }
}
 800a58e:	0018      	movs	r0, r3
 800a590:	46bd      	mov	sp, r7
 800a592:	b004      	add	sp, #16
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	000a      	movs	r2, r1
 800a5a0:	1cfb      	adds	r3, r7, #3
 800a5a2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	23ae      	movs	r3, #174	; 0xae
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	58d3      	ldr	r3, [r2, r3]
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a5ae:	1cfb      	adds	r3, r7, #3
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	0011      	movs	r1, r2
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f002 f845 	bl	800c646 <USBD_LL_GetRxDataSize>
 800a5bc:	0001      	movs	r1, r0
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	2383      	movs	r3, #131	; 0x83
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	23ae      	movs	r3, #174	; 0xae
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	58d3      	ldr	r3, [r2, r3]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	23af      	movs	r3, #175	; 0xaf
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	58d3      	ldr	r3, [r2, r3]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	68f9      	ldr	r1, [r7, #12]
 800a5de:	2381      	movs	r3, #129	; 0x81
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	58c8      	ldr	r0, [r1, r3]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2183      	movs	r1, #131	; 0x83
 800a5e8:	0089      	lsls	r1, r1, #2
 800a5ea:	468c      	mov	ip, r1
 800a5ec:	4463      	add	r3, ip
 800a5ee:	0019      	movs	r1, r3
 800a5f0:	4790      	blx	r2

    return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	b004      	add	sp, #16
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a600:	b590      	push	{r4, r7, lr}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	23ae      	movs	r3, #174	; 0xae
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	58d3      	ldr	r3, [r2, r3]
 800a610:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	23af      	movs	r3, #175	; 0xaf
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	58d3      	ldr	r3, [r2, r3]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d019      	beq.n	800a652 <USBD_CDC_EP0_RxReady+0x52>
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	2380      	movs	r3, #128	; 0x80
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	5cd3      	ldrb	r3, [r2, r3]
 800a626:	2bff      	cmp	r3, #255	; 0xff
 800a628:	d013      	beq.n	800a652 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	23af      	movs	r3, #175	; 0xaf
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	58d3      	ldr	r3, [r2, r3]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	68f9      	ldr	r1, [r7, #12]
 800a636:	2280      	movs	r2, #128	; 0x80
 800a638:	0092      	lsls	r2, r2, #2
 800a63a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a63c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	4c06      	ldr	r4, [pc, #24]	; (800a65c <USBD_CDC_EP0_RxReady+0x5c>)
 800a642:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a644:	b292      	uxth	r2, r2
 800a646:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	2380      	movs	r3, #128	; 0x80
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	21ff      	movs	r1, #255	; 0xff
 800a650:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	0018      	movs	r0, r3
 800a656:	46bd      	mov	sp, r7
 800a658:	b005      	add	sp, #20
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	00000201 	.word	0x00000201

0800a660 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2243      	movs	r2, #67	; 0x43
 800a66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a66e:	4b02      	ldr	r3, [pc, #8]	; (800a678 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a670:	0018      	movs	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	b002      	add	sp, #8
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20000094 	.word	0x20000094

0800a67c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2243      	movs	r2, #67	; 0x43
 800a688:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a68a:	4b02      	ldr	r3, [pc, #8]	; (800a694 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a68c:	0018      	movs	r0, r3
 800a68e:	46bd      	mov	sp, r7
 800a690:	b002      	add	sp, #8
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000050 	.word	0x20000050

0800a698 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2243      	movs	r2, #67	; 0x43
 800a6a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a6a6:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	b002      	add	sp, #8
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	200000d8 	.word	0x200000d8

0800a6b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	220a      	movs	r2, #10
 800a6c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a6c2:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b002      	add	sp, #8
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	2000000c 	.word	0x2000000c

0800a6d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a6da:	200f      	movs	r0, #15
 800a6dc:	183b      	adds	r3, r7, r0
 800a6de:	2202      	movs	r2, #2
 800a6e0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	23af      	movs	r3, #175	; 0xaf
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a6f2:	183b      	adds	r3, r7, r0
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a6f8:	230f      	movs	r3, #15
 800a6fa:	18fb      	adds	r3, r7, r3
 800a6fc:	781b      	ldrb	r3, [r3, #0]
}
 800a6fe:	0018      	movs	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	b004      	add	sp, #16
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	1dbb      	adds	r3, r7, #6
 800a712:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	23ae      	movs	r3, #174	; 0xae
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	58d3      	ldr	r3, [r2, r3]
 800a71c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	2382      	movs	r3, #130	; 0x82
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a728:	1dbb      	adds	r3, r7, #6
 800a72a:	8819      	ldrh	r1, [r3, #0]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	2384      	movs	r3, #132	; 0x84
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	0018      	movs	r0, r3
 800a738:	46bd      	mov	sp, r7
 800a73a:	b006      	add	sp, #24
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	23ae      	movs	r3, #174	; 0xae
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	58d3      	ldr	r3, [r2, r3]
 800a750:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	2381      	movs	r3, #129	; 0x81
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	0018      	movs	r0, r3
 800a760:	46bd      	mov	sp, r7
 800a762:	b004      	add	sp, #16
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	23ae      	movs	r3, #174	; 0xae
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	58d3      	ldr	r3, [r2, r3]
 800a776:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	23ae      	movs	r3, #174	; 0xae
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	58d3      	ldr	r3, [r2, r3]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d022      	beq.n	800a7ca <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	2385      	movs	r3, #133	; 0x85
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	58d3      	ldr	r3, [r2, r3]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11a      	bne.n	800a7c6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	2385      	movs	r3, #133	; 0x85
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	2101      	movs	r1, #1
 800a798:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	2384      	movs	r3, #132	; 0x84
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	58d2      	ldr	r2, [r2, r3]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	2382      	movs	r3, #130	; 0x82
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	2384      	movs	r3, #132	; 0x84
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	000a      	movs	r2, r1
 800a7bc:	2181      	movs	r1, #129	; 0x81
 800a7be:	f001 fed4 	bl	800c56a <USBD_LL_Transmit>

      return USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e002      	b.n	800a7cc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a7ca:	2302      	movs	r3, #2
  }
}
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	b004      	add	sp, #16
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	23ae      	movs	r3, #174	; 0xae
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	58d3      	ldr	r3, [r2, r3]
 800a7e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	23ae      	movs	r3, #174	; 0xae
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	58d3      	ldr	r3, [r2, r3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d019      	beq.n	800a826 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	7c1b      	ldrb	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	2381      	movs	r3, #129	; 0x81
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	58d2      	ldr	r2, [r2, r3]
 800a802:	2380      	movs	r3, #128	; 0x80
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	2101      	movs	r1, #1
 800a80a:	f001 fee5 	bl	800c5d8 <USBD_LL_PrepareReceive>
 800a80e:	e008      	b.n	800a822 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	2381      	movs	r3, #129	; 0x81
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	58d2      	ldr	r2, [r2, r3]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	2101      	movs	r1, #1
 800a81e:	f001 fedb 	bl	800c5d8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	e000      	b.n	800a828 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a826:	2302      	movs	r3, #2
  }
}
 800a828:	0018      	movs	r0, r3
 800a82a:	46bd      	mov	sp, r7
 800a82c:	b004      	add	sp, #16
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	1dfb      	adds	r3, r7, #7
 800a83c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a844:	2302      	movs	r3, #2
 800a846:	e020      	b.n	800a88a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	23ad      	movs	r3, #173	; 0xad
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	58d3      	ldr	r3, [r2, r3]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d004      	beq.n	800a85e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	23ad      	movs	r3, #173	; 0xad
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	2100      	movs	r1, #0
 800a85c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	23ac      	movs	r3, #172	; 0xac
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	23a7      	movs	r3, #167	; 0xa7
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	2101      	movs	r1, #1
 800a876:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	1dfa      	adds	r2, r7, #7
 800a87c:	7812      	ldrb	r2, [r2, #0]
 800a87e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	0018      	movs	r0, r3
 800a884:	f001 fcd4 	bl	800c230 <USBD_LL_Init>

  return USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	0018      	movs	r0, r3
 800a88c:	46bd      	mov	sp, r7
 800a88e:	b004      	add	sp, #16
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a89c:	200f      	movs	r0, #15
 800a89e:	183b      	adds	r3, r7, r0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d008      	beq.n	800a8bc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	23ad      	movs	r3, #173	; 0xad
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a8b4:	183b      	adds	r3, r7, r0
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	e003      	b.n	800a8c4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a8bc:	230f      	movs	r3, #15
 800a8be:	18fb      	adds	r3, r7, r3
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	18fb      	adds	r3, r7, r3
 800a8c8:	781b      	ldrb	r3, [r3, #0]
}
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	b004      	add	sp, #16
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f001 fd0b 	bl	800c2f8 <USBD_LL_Start>

  return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	b002      	add	sp, #8
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b002      	add	sp, #8
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8fe:	b590      	push	{r4, r7, lr}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	000a      	movs	r2, r1
 800a908:	1cfb      	adds	r3, r7, #3
 800a90a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a90c:	240f      	movs	r4, #15
 800a90e:	193b      	adds	r3, r7, r4
 800a910:	2202      	movs	r2, #2
 800a912:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	23ad      	movs	r3, #173	; 0xad
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	58d3      	ldr	r3, [r2, r3]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00e      	beq.n	800a93e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	23ad      	movs	r3, #173	; 0xad
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	58d3      	ldr	r3, [r2, r3]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	1cfa      	adds	r2, r7, #3
 800a92c:	7811      	ldrb	r1, [r2, #0]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	0010      	movs	r0, r2
 800a932:	4798      	blx	r3
 800a934:	1e03      	subs	r3, r0, #0
 800a936:	d102      	bne.n	800a93e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a938:	193b      	adds	r3, r7, r4
 800a93a:	2200      	movs	r2, #0
 800a93c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a93e:	230f      	movs	r3, #15
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	781b      	ldrb	r3, [r3, #0]
}
 800a944:	0018      	movs	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	b005      	add	sp, #20
 800a94a:	bd90      	pop	{r4, r7, pc}

0800a94c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	000a      	movs	r2, r1
 800a956:	1cfb      	adds	r3, r7, #3
 800a958:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	23ad      	movs	r3, #173	; 0xad
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	58d3      	ldr	r3, [r2, r3]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	1cfa      	adds	r2, r7, #3
 800a966:	7811      	ldrb	r1, [r2, #0]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	0010      	movs	r0, r2
 800a96c:	4798      	blx	r3

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b002      	add	sp, #8
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	22aa      	movs	r2, #170	; 0xaa
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	4694      	mov	ip, r2
 800a98a:	4463      	add	r3, ip
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	0011      	movs	r1, r2
 800a990:	0018      	movs	r0, r3
 800a992:	f001 f810 	bl	800b9b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	23a5      	movs	r3, #165	; 0xa5
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	2101      	movs	r1, #1
 800a99e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a23      	ldr	r2, [pc, #140]	; (800aa30 <USBD_LL_SetupStage+0xb8>)
 800a9a4:	5a9b      	ldrh	r3, [r3, r2]
 800a9a6:	0019      	movs	r1, r3
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	23a6      	movs	r3, #166	; 0xa6
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	23aa      	movs	r3, #170	; 0xaa
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	5cd3      	ldrb	r3, [r2, r3]
 800a9b8:	001a      	movs	r2, r3
 800a9ba:	231f      	movs	r3, #31
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d019      	beq.n	800a9f6 <USBD_LL_SetupStage+0x7e>
 800a9c2:	d822      	bhi.n	800aa0a <USBD_LL_SetupStage+0x92>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <USBD_LL_SetupStage+0x56>
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d00a      	beq.n	800a9e2 <USBD_LL_SetupStage+0x6a>
 800a9cc:	e01d      	b.n	800aa0a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	22aa      	movs	r2, #170	; 0xaa
 800a9d2:	0092      	lsls	r2, r2, #2
 800a9d4:	189a      	adds	r2, r3, r2
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	0011      	movs	r1, r2
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f000 fa10 	bl	800ae00 <USBD_StdDevReq>
      break;
 800a9e0:	e020      	b.n	800aa24 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	22aa      	movs	r2, #170	; 0xaa
 800a9e6:	0092      	lsls	r2, r2, #2
 800a9e8:	189a      	adds	r2, r3, r2
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	0011      	movs	r1, r2
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	f000 fa78 	bl	800aee4 <USBD_StdItfReq>
      break;
 800a9f4:	e016      	b.n	800aa24 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	22aa      	movs	r2, #170	; 0xaa
 800a9fa:	0092      	lsls	r2, r2, #2
 800a9fc:	189a      	adds	r2, r3, r2
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	0011      	movs	r1, r2
 800aa02:	0018      	movs	r0, r3
 800aa04:	f000 fac5 	bl	800af92 <USBD_StdEPReq>
      break;
 800aa08:	e00c      	b.n	800aa24 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	23aa      	movs	r3, #170	; 0xaa
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	5cd3      	ldrb	r3, [r2, r3]
 800aa12:	227f      	movs	r2, #127	; 0x7f
 800aa14:	4393      	bics	r3, r2
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	0011      	movs	r1, r2
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f001 fcf2 	bl	800c406 <USBD_LL_StallEP>
      break;
 800aa22:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	0018      	movs	r0, r3
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	b002      	add	sp, #8
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	000002ae 	.word	0x000002ae

0800aa34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	200b      	movs	r0, #11
 800aa40:	183b      	adds	r3, r7, r0
 800aa42:	1c0a      	adds	r2, r1, #0
 800aa44:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa46:	183b      	adds	r3, r7, r0
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d154      	bne.n	800aaf8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3355      	adds	r3, #85	; 0x55
 800aa52:	33ff      	adds	r3, #255	; 0xff
 800aa54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	23a5      	movs	r3, #165	; 0xa5
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	58d3      	ldr	r3, [r2, r3]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d139      	bne.n	800aad6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d919      	bls.n	800aaa2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	1ad2      	subs	r2, r2, r3
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d203      	bcs.n	800aa90 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	e002      	b.n	800aa96 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	001a      	movs	r2, r3
 800aa9c:	f001 f89b 	bl	800bbd6 <USBD_CtlContinueRx>
 800aaa0:	e045      	b.n	800ab2e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	23ad      	movs	r3, #173	; 0xad
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	58d3      	ldr	r3, [r2, r3]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	23a7      	movs	r3, #167	; 0xa7
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d107      	bne.n	800aacc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	23ad      	movs	r3, #173	; 0xad
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	58d3      	ldr	r3, [r2, r3]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	0010      	movs	r0, r2
 800aaca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	0018      	movs	r0, r3
 800aad0:	f001 f894 	bl	800bbfc <USBD_CtlSendStatus>
 800aad4:	e02b      	b.n	800ab2e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	23a5      	movs	r3, #165	; 0xa5
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	58d3      	ldr	r3, [r2, r3]
 800aade:	2b05      	cmp	r3, #5
 800aae0:	d125      	bne.n	800ab2e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	23a5      	movs	r3, #165	; 0xa5
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	2100      	movs	r1, #0
 800aaea:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2100      	movs	r1, #0
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f001 fc88 	bl	800c406 <USBD_LL_StallEP>
 800aaf6:	e01a      	b.n	800ab2e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	23ad      	movs	r3, #173	; 0xad
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	58d3      	ldr	r3, [r2, r3]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d011      	beq.n	800ab2a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	23a7      	movs	r3, #167	; 0xa7
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d10b      	bne.n	800ab2a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	23ad      	movs	r3, #173	; 0xad
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	58d3      	ldr	r3, [r2, r3]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	220b      	movs	r2, #11
 800ab1e:	18ba      	adds	r2, r7, r2
 800ab20:	7811      	ldrb	r1, [r2, #0]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	0010      	movs	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	e001      	b.n	800ab2e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e000      	b.n	800ab30 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	0018      	movs	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b006      	add	sp, #24
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	200b      	movs	r0, #11
 800ab44:	183b      	adds	r3, r7, r0
 800ab46:	1c0a      	adds	r2, r1, #0
 800ab48:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab4a:	183b      	adds	r3, r7, r0
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d000      	beq.n	800ab54 <USBD_LL_DataInStage+0x1c>
 800ab52:	e08e      	b.n	800ac72 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3314      	adds	r3, #20
 800ab58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	23a5      	movs	r3, #165	; 0xa5
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	58d3      	ldr	r3, [r2, r3]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d164      	bne.n	800ac30 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d915      	bls.n	800ab9e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f000 ffec 	bl	800bb68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	2200      	movs	r2, #0
 800ab96:	2100      	movs	r1, #0
 800ab98:	f001 fd1e 	bl	800c5d8 <USBD_LL_PrepareReceive>
 800ab9c:	e059      	b.n	800ac52 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	689a      	ldr	r2, [r3, #8]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	0019      	movs	r1, r3
 800aba8:	0010      	movs	r0, r2
 800abaa:	f7f5 fb45 	bl	8000238 <__aeabi_uidivmod>
 800abae:	1e0b      	subs	r3, r1, #0
 800abb0:	d11f      	bne.n	800abf2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	689a      	ldr	r2, [r3, #8]
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800abba:	429a      	cmp	r2, r3
 800abbc:	d319      	bcc.n	800abf2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	689a      	ldr	r2, [r3, #8]
 800abc2:	68f9      	ldr	r1, [r7, #12]
 800abc4:	23a6      	movs	r3, #166	; 0xa6
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800abca:	429a      	cmp	r2, r3
 800abcc:	d211      	bcs.n	800abf2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	2100      	movs	r1, #0
 800abd4:	0018      	movs	r0, r3
 800abd6:	f000 ffc7 	bl	800bb68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	23a6      	movs	r3, #166	; 0xa6
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	2100      	movs	r1, #0
 800abe2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	2300      	movs	r3, #0
 800abe8:	2200      	movs	r2, #0
 800abea:	2100      	movs	r1, #0
 800abec:	f001 fcf4 	bl	800c5d8 <USBD_LL_PrepareReceive>
 800abf0:	e02f      	b.n	800ac52 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	23ad      	movs	r3, #173	; 0xad
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	58d3      	ldr	r3, [r2, r3]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00d      	beq.n	800ac1c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	23a7      	movs	r3, #167	; 0xa7
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d107      	bne.n	800ac1c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	23ad      	movs	r3, #173	; 0xad
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	58d3      	ldr	r3, [r2, r3]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	0010      	movs	r0, r2
 800ac1a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2180      	movs	r1, #128	; 0x80
 800ac20:	0018      	movs	r0, r3
 800ac22:	f001 fbf0 	bl	800c406 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fffb 	bl	800bc24 <USBD_CtlReceiveStatus>
 800ac2e:	e010      	b.n	800ac52 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	23a5      	movs	r3, #165	; 0xa5
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	58d3      	ldr	r3, [r2, r3]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d005      	beq.n	800ac48 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	23a5      	movs	r3, #165	; 0xa5
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d104      	bne.n	800ac52 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2180      	movs	r1, #128	; 0x80
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f001 fbda 	bl	800c406 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	23a8      	movs	r3, #168	; 0xa8
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	5cd3      	ldrb	r3, [r2, r3]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d124      	bne.n	800aca8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	0018      	movs	r0, r3
 800ac62:	f7ff fe43 	bl	800a8ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	23a8      	movs	r3, #168	; 0xa8
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	54d1      	strb	r1, [r2, r3]
 800ac70:	e01a      	b.n	800aca8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	23ad      	movs	r3, #173	; 0xad
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	58d3      	ldr	r3, [r2, r3]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d011      	beq.n	800aca4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	23a7      	movs	r3, #167	; 0xa7
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d10b      	bne.n	800aca4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	23ad      	movs	r3, #173	; 0xad
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	58d3      	ldr	r3, [r2, r3]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	220b      	movs	r2, #11
 800ac98:	18ba      	adds	r2, r7, r2
 800ac9a:	7811      	ldrb	r1, [r2, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	0010      	movs	r0, r2
 800aca0:	4798      	blx	r3
 800aca2:	e001      	b.n	800aca8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aca4:	2302      	movs	r3, #2
 800aca6:	e000      	b.n	800acaa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	0018      	movs	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	b006      	add	sp, #24
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	2200      	movs	r2, #0
 800acc0:	2100      	movs	r1, #0
 800acc2:	f001 fb3e 	bl	800c342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	23ac      	movs	r3, #172	; 0xac
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	2101      	movs	r1, #1
 800acce:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	23b2      	movs	r3, #178	; 0xb2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	2140      	movs	r1, #64	; 0x40
 800acd8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	2340      	movs	r3, #64	; 0x40
 800acde:	2200      	movs	r2, #0
 800ace0:	2180      	movs	r1, #128	; 0x80
 800ace2:	f001 fb2e 	bl	800c342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2240      	movs	r2, #64	; 0x40
 800acf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	23a7      	movs	r3, #167	; 0xa7
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	2101      	movs	r1, #1
 800acfa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	23a5      	movs	r3, #165	; 0xa5
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	2100      	movs	r1, #0
 800ad04:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	23a9      	movs	r3, #169	; 0xa9
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	2100      	movs	r1, #0
 800ad14:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	23ae      	movs	r3, #174	; 0xae
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	58d3      	ldr	r3, [r2, r3]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	23ad      	movs	r3, #173	; 0xad
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	58d3      	ldr	r3, [r2, r3]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	b2d9      	uxtb	r1, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	0018      	movs	r0, r3
 800ad36:	4790      	blx	r2
  }

  return USBD_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	b002      	add	sp, #8
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	000a      	movs	r2, r1
 800ad4c:	1cfb      	adds	r3, r7, #3
 800ad4e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	1cfa      	adds	r2, r7, #3
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	b002      	add	sp, #8
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	23a7      	movs	r3, #167	; 0xa7
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	5cd1      	ldrb	r1, [r2, r3]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <USBD_LL_Suspend+0x2c>)
 800ad78:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	23a7      	movs	r3, #167	; 0xa7
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	2104      	movs	r1, #4
 800ad82:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	0018      	movs	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	b002      	add	sp, #8
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	46c0      	nop			; (mov r8, r8)
 800ad90:	0000029d 	.word	0x0000029d

0800ad94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	23a7      	movs	r3, #167	; 0xa7
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	5cd3      	ldrb	r3, [r2, r3]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d106      	bne.n	800adb6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a05      	ldr	r2, [pc, #20]	; (800adc0 <USBD_LL_Resume+0x2c>)
 800adac:	5c99      	ldrb	r1, [r3, r2]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	23a7      	movs	r3, #167	; 0xa7
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	b002      	add	sp, #8
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	0000029d 	.word	0x0000029d

0800adc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	23a7      	movs	r3, #167	; 0xa7
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	5cd3      	ldrb	r3, [r2, r3]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d10e      	bne.n	800adf6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	23ad      	movs	r3, #173	; 0xad
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	58d3      	ldr	r3, [r2, r3]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	23ad      	movs	r3, #173	; 0xad
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	58d3      	ldr	r3, [r2, r3]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	0010      	movs	r0, r2
 800adf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	0018      	movs	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b002      	add	sp, #8
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	230f      	movs	r3, #15
 800ae0c:	18fb      	adds	r3, r7, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	001a      	movs	r2, r3
 800ae18:	2360      	movs	r3, #96	; 0x60
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b40      	cmp	r3, #64	; 0x40
 800ae1e:	d004      	beq.n	800ae2a <USBD_StdDevReq+0x2a>
 800ae20:	d84f      	bhi.n	800aec2 <USBD_StdDevReq+0xc2>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <USBD_StdDevReq+0x3e>
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d14b      	bne.n	800aec2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	23ad      	movs	r3, #173	; 0xad
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	58d3      	ldr	r3, [r2, r3]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	0010      	movs	r0, r2
 800ae3a:	4798      	blx	r3
      break;
 800ae3c:	e048      	b.n	800aed0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d835      	bhi.n	800aeb2 <USBD_StdDevReq+0xb2>
 800ae46:	009a      	lsls	r2, r3, #2
 800ae48:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <USBD_StdDevReq+0xe0>)
 800ae4a:	18d3      	adds	r3, r2, r3
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0011      	movs	r1, r2
 800ae56:	0018      	movs	r0, r3
 800ae58:	f000 fa52 	bl	800b300 <USBD_GetDescriptor>
          break;
 800ae5c:	e030      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	0011      	movs	r1, r2
 800ae64:	0018      	movs	r0, r3
 800ae66:	f000 fbfd 	bl	800b664 <USBD_SetAddress>
          break;
 800ae6a:	e029      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	0011      	movs	r1, r2
 800ae72:	0018      	movs	r0, r3
 800ae74:	f000 fc4a 	bl	800b70c <USBD_SetConfig>
          break;
 800ae78:	e022      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	0011      	movs	r1, r2
 800ae80:	0018      	movs	r0, r3
 800ae82:	f000 fce7 	bl	800b854 <USBD_GetConfig>
          break;
 800ae86:	e01b      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	0011      	movs	r1, r2
 800ae8e:	0018      	movs	r0, r3
 800ae90:	f000 fd1b 	bl	800b8ca <USBD_GetStatus>
          break;
 800ae94:	e014      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	0011      	movs	r1, r2
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	f000 fd4e 	bl	800b93e <USBD_SetFeature>
          break;
 800aea2:	e00d      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	0011      	movs	r1, r2
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f000 fd5d 	bl	800b96a <USBD_ClrFeature>
          break;
 800aeb0:	e006      	b.n	800aec0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	0011      	movs	r1, r2
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f000 fdb7 	bl	800ba2c <USBD_CtlError>
          break;
 800aebe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800aec0:	e006      	b.n	800aed0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	0011      	movs	r1, r2
 800aec8:	0018      	movs	r0, r3
 800aeca:	f000 fdaf 	bl	800ba2c <USBD_CtlError>
      break;
 800aece:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800aed0:	230f      	movs	r3, #15
 800aed2:	18fb      	adds	r3, r7, r3
 800aed4:	781b      	ldrb	r3, [r3, #0]
}
 800aed6:	0018      	movs	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	b004      	add	sp, #16
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	0800d154 	.word	0x0800d154

0800aee4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aee4:	b5b0      	push	{r4, r5, r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeee:	230f      	movs	r3, #15
 800aef0:	18fb      	adds	r3, r7, r3
 800aef2:	2200      	movs	r2, #0
 800aef4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	001a      	movs	r2, r3
 800aefc:	2360      	movs	r3, #96	; 0x60
 800aefe:	4013      	ands	r3, r2
 800af00:	2b40      	cmp	r3, #64	; 0x40
 800af02:	d004      	beq.n	800af0e <USBD_StdItfReq+0x2a>
 800af04:	d839      	bhi.n	800af7a <USBD_StdItfReq+0x96>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <USBD_StdItfReq+0x2a>
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	d135      	bne.n	800af7a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	23a7      	movs	r3, #167	; 0xa7
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	5cd3      	ldrb	r3, [r2, r3]
 800af16:	3b01      	subs	r3, #1
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d825      	bhi.n	800af68 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	889b      	ldrh	r3, [r3, #4]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b01      	cmp	r3, #1
 800af24:	d819      	bhi.n	800af5a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	23ad      	movs	r3, #173	; 0xad
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	58d3      	ldr	r3, [r2, r3]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	250f      	movs	r5, #15
 800af32:	197c      	adds	r4, r7, r5
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	0010      	movs	r0, r2
 800af3a:	4798      	blx	r3
 800af3c:	0003      	movs	r3, r0
 800af3e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	88db      	ldrh	r3, [r3, #6]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d116      	bne.n	800af76 <USBD_StdItfReq+0x92>
 800af48:	197b      	adds	r3, r7, r5
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d112      	bne.n	800af76 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	0018      	movs	r0, r3
 800af54:	f000 fe52 	bl	800bbfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af58:	e00d      	b.n	800af76 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	0011      	movs	r1, r2
 800af60:	0018      	movs	r0, r3
 800af62:	f000 fd63 	bl	800ba2c <USBD_CtlError>
          break;
 800af66:	e006      	b.n	800af76 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0011      	movs	r1, r2
 800af6e:	0018      	movs	r0, r3
 800af70:	f000 fd5c 	bl	800ba2c <USBD_CtlError>
          break;
 800af74:	e000      	b.n	800af78 <USBD_StdItfReq+0x94>
          break;
 800af76:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800af78:	e006      	b.n	800af88 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	0011      	movs	r1, r2
 800af80:	0018      	movs	r0, r3
 800af82:	f000 fd53 	bl	800ba2c <USBD_CtlError>
      break;
 800af86:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	0018      	movs	r0, r3
 800af8c:	46bd      	mov	sp, r7
 800af8e:	b004      	add	sp, #16
 800af90:	bdb0      	pop	{r4, r5, r7, pc}

0800af92 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af92:	b5b0      	push	{r4, r5, r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af9c:	230f      	movs	r3, #15
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	2200      	movs	r2, #0
 800afa2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	889a      	ldrh	r2, [r3, #4]
 800afa8:	230e      	movs	r3, #14
 800afaa:	18fb      	adds	r3, r7, r3
 800afac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	001a      	movs	r2, r3
 800afb4:	2360      	movs	r3, #96	; 0x60
 800afb6:	4013      	ands	r3, r2
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	d006      	beq.n	800afca <USBD_StdEPReq+0x38>
 800afbc:	d900      	bls.n	800afc0 <USBD_StdEPReq+0x2e>
 800afbe:	e190      	b.n	800b2e2 <USBD_StdEPReq+0x350>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00c      	beq.n	800afde <USBD_StdEPReq+0x4c>
 800afc4:	2b20      	cmp	r3, #32
 800afc6:	d000      	beq.n	800afca <USBD_StdEPReq+0x38>
 800afc8:	e18b      	b.n	800b2e2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	23ad      	movs	r3, #173	; 0xad
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	58d3      	ldr	r3, [r2, r3]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	0010      	movs	r0, r2
 800afda:	4798      	blx	r3
      break;
 800afdc:	e188      	b.n	800b2f0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	001a      	movs	r2, r3
 800afe4:	2360      	movs	r3, #96	; 0x60
 800afe6:	4013      	ands	r3, r2
 800afe8:	2b20      	cmp	r3, #32
 800afea:	d10f      	bne.n	800b00c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	23ad      	movs	r3, #173	; 0xad
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	58d3      	ldr	r3, [r2, r3]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	250f      	movs	r5, #15
 800aff8:	197c      	adds	r4, r7, r5
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	0010      	movs	r0, r2
 800b000:	4798      	blx	r3
 800b002:	0003      	movs	r3, r0
 800b004:	7023      	strb	r3, [r4, #0]

        return ret;
 800b006:	197b      	adds	r3, r7, r5
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	e174      	b.n	800b2f6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d007      	beq.n	800b024 <USBD_StdEPReq+0x92>
 800b014:	dd00      	ble.n	800b018 <USBD_StdEPReq+0x86>
 800b016:	e15c      	b.n	800b2d2 <USBD_StdEPReq+0x340>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d100      	bne.n	800b01e <USBD_StdEPReq+0x8c>
 800b01c:	e092      	b.n	800b144 <USBD_StdEPReq+0x1b2>
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d04b      	beq.n	800b0ba <USBD_StdEPReq+0x128>
 800b022:	e156      	b.n	800b2d2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	23a7      	movs	r3, #167	; 0xa7
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	5cd3      	ldrb	r3, [r2, r3]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d002      	beq.n	800b036 <USBD_StdEPReq+0xa4>
 800b030:	2b03      	cmp	r3, #3
 800b032:	d01d      	beq.n	800b070 <USBD_StdEPReq+0xde>
 800b034:	e039      	b.n	800b0aa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b036:	220e      	movs	r2, #14
 800b038:	18bb      	adds	r3, r7, r2
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d010      	beq.n	800b062 <USBD_StdEPReq+0xd0>
 800b040:	18bb      	adds	r3, r7, r2
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b80      	cmp	r3, #128	; 0x80
 800b046:	d00c      	beq.n	800b062 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b048:	18bb      	adds	r3, r7, r2
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	0011      	movs	r1, r2
 800b050:	0018      	movs	r0, r3
 800b052:	f001 f9d8 	bl	800c406 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2180      	movs	r1, #128	; 0x80
 800b05a:	0018      	movs	r0, r3
 800b05c:	f001 f9d3 	bl	800c406 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b060:	e02a      	b.n	800b0b8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	0011      	movs	r1, r2
 800b068:	0018      	movs	r0, r3
 800b06a:	f000 fcdf 	bl	800ba2c <USBD_CtlError>
              break;
 800b06e:	e023      	b.n	800b0b8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	885b      	ldrh	r3, [r3, #2]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d113      	bne.n	800b0a0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b078:	220e      	movs	r2, #14
 800b07a:	18bb      	adds	r3, r7, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00e      	beq.n	800b0a0 <USBD_StdEPReq+0x10e>
 800b082:	18bb      	adds	r3, r7, r2
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b80      	cmp	r3, #128	; 0x80
 800b088:	d00a      	beq.n	800b0a0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	88db      	ldrh	r3, [r3, #6]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b092:	18bb      	adds	r3, r7, r2
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	0011      	movs	r1, r2
 800b09a:	0018      	movs	r0, r3
 800b09c:	f001 f9b3 	bl	800c406 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	f000 fdaa 	bl	800bbfc <USBD_CtlSendStatus>

              break;
 800b0a8:	e006      	b.n	800b0b8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	0011      	movs	r1, r2
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f000 fcbb 	bl	800ba2c <USBD_CtlError>
              break;
 800b0b6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b0b8:	e112      	b.n	800b2e0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	23a7      	movs	r3, #167	; 0xa7
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	5cd3      	ldrb	r3, [r2, r3]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d002      	beq.n	800b0cc <USBD_StdEPReq+0x13a>
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d01d      	beq.n	800b106 <USBD_StdEPReq+0x174>
 800b0ca:	e032      	b.n	800b132 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0cc:	220e      	movs	r2, #14
 800b0ce:	18bb      	adds	r3, r7, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d010      	beq.n	800b0f8 <USBD_StdEPReq+0x166>
 800b0d6:	18bb      	adds	r3, r7, r2
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	2b80      	cmp	r3, #128	; 0x80
 800b0dc:	d00c      	beq.n	800b0f8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0de:	18bb      	adds	r3, r7, r2
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	0011      	movs	r1, r2
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	f001 f98d 	bl	800c406 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2180      	movs	r1, #128	; 0x80
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f001 f988 	bl	800c406 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0f6:	e024      	b.n	800b142 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	0011      	movs	r1, r2
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 fc94 	bl	800ba2c <USBD_CtlError>
              break;
 800b104:	e01d      	b.n	800b142 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	885b      	ldrh	r3, [r3, #2]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d118      	bne.n	800b140 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b10e:	210e      	movs	r1, #14
 800b110:	187b      	adds	r3, r7, r1
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	227f      	movs	r2, #127	; 0x7f
 800b116:	4013      	ands	r3, r2
 800b118:	d006      	beq.n	800b128 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b11a:	187b      	adds	r3, r7, r1
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	0011      	movs	r1, r2
 800b122:	0018      	movs	r0, r3
 800b124:	f001 f99a 	bl	800c45c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	0018      	movs	r0, r3
 800b12c:	f000 fd66 	bl	800bbfc <USBD_CtlSendStatus>
              }
              break;
 800b130:	e006      	b.n	800b140 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	0011      	movs	r1, r2
 800b138:	0018      	movs	r0, r3
 800b13a:	f000 fc77 	bl	800ba2c <USBD_CtlError>
              break;
 800b13e:	e000      	b.n	800b142 <USBD_StdEPReq+0x1b0>
              break;
 800b140:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b142:	e0cd      	b.n	800b2e0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	23a7      	movs	r3, #167	; 0xa7
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	5cd3      	ldrb	r3, [r2, r3]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d002      	beq.n	800b156 <USBD_StdEPReq+0x1c4>
 800b150:	2b03      	cmp	r3, #3
 800b152:	d03c      	beq.n	800b1ce <USBD_StdEPReq+0x23c>
 800b154:	e0b5      	b.n	800b2c2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b156:	220e      	movs	r2, #14
 800b158:	18bb      	adds	r3, r7, r2
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00a      	beq.n	800b176 <USBD_StdEPReq+0x1e4>
 800b160:	18bb      	adds	r3, r7, r2
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b80      	cmp	r3, #128	; 0x80
 800b166:	d006      	beq.n	800b176 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	0011      	movs	r1, r2
 800b16e:	0018      	movs	r0, r3
 800b170:	f000 fc5c 	bl	800ba2c <USBD_CtlError>
                break;
 800b174:	e0ac      	b.n	800b2d0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b176:	220e      	movs	r2, #14
 800b178:	18bb      	adds	r3, r7, r2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	da0c      	bge.n	800b19c <USBD_StdEPReq+0x20a>
 800b182:	18bb      	adds	r3, r7, r2
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	227f      	movs	r2, #127	; 0x7f
 800b188:	401a      	ands	r2, r3
 800b18a:	0013      	movs	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	3310      	adds	r3, #16
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	18d3      	adds	r3, r2, r3
 800b198:	3304      	adds	r3, #4
 800b19a:	e00d      	b.n	800b1b8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b19c:	230e      	movs	r3, #14
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	227f      	movs	r2, #127	; 0x7f
 800b1a4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a6:	0013      	movs	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	3351      	adds	r3, #81	; 0x51
 800b1b0:	33ff      	adds	r3, #255	; 0xff
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	18d3      	adds	r3, r2, r3
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 fcae 	bl	800bb28 <USBD_CtlSendData>
              break;
 800b1cc:	e080      	b.n	800b2d0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1ce:	220e      	movs	r2, #14
 800b1d0:	18bb      	adds	r3, r7, r2
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	b25b      	sxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da14      	bge.n	800b204 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1da:	18bb      	adds	r3, r7, r2
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	220f      	movs	r2, #15
 800b1e0:	401a      	ands	r2, r3
 800b1e2:	6879      	ldr	r1, [r7, #4]
 800b1e4:	0013      	movs	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	189b      	adds	r3, r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	18cb      	adds	r3, r1, r3
 800b1ee:	3318      	adds	r3, #24
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11e      	bne.n	800b234 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	0011      	movs	r1, r2
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f000 fc15 	bl	800ba2c <USBD_CtlError>
                  break;
 800b202:	e065      	b.n	800b2d0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b204:	230e      	movs	r3, #14
 800b206:	18fb      	adds	r3, r7, r3
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	220f      	movs	r2, #15
 800b20c:	401a      	ands	r2, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	23ac      	movs	r3, #172	; 0xac
 800b212:	0059      	lsls	r1, r3, #1
 800b214:	0013      	movs	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	189b      	adds	r3, r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	18c3      	adds	r3, r0, r3
 800b21e:	185b      	adds	r3, r3, r1
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d106      	bne.n	800b234 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	0011      	movs	r1, r2
 800b22c:	0018      	movs	r0, r3
 800b22e:	f000 fbfd 	bl	800ba2c <USBD_CtlError>
                  break;
 800b232:	e04d      	b.n	800b2d0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b234:	220e      	movs	r2, #14
 800b236:	18bb      	adds	r3, r7, r2
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	b25b      	sxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da0c      	bge.n	800b25a <USBD_StdEPReq+0x2c8>
 800b240:	18bb      	adds	r3, r7, r2
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	227f      	movs	r2, #127	; 0x7f
 800b246:	401a      	ands	r2, r3
 800b248:	0013      	movs	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	189b      	adds	r3, r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	3310      	adds	r3, #16
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	18d3      	adds	r3, r2, r3
 800b256:	3304      	adds	r3, #4
 800b258:	e00d      	b.n	800b276 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b25a:	230e      	movs	r3, #14
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	227f      	movs	r2, #127	; 0x7f
 800b262:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b264:	0013      	movs	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	189b      	adds	r3, r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	3351      	adds	r3, #81	; 0x51
 800b26e:	33ff      	adds	r3, #255	; 0xff
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	18d3      	adds	r3, r2, r3
 800b274:	3304      	adds	r3, #4
 800b276:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b278:	220e      	movs	r2, #14
 800b27a:	18bb      	adds	r3, r7, r2
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <USBD_StdEPReq+0x2f8>
 800b282:	18bb      	adds	r3, r7, r2
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b80      	cmp	r3, #128	; 0x80
 800b288:	d103      	bne.n	800b292 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2200      	movs	r2, #0
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	e010      	b.n	800b2b4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b292:	230e      	movs	r3, #14
 800b294:	18fb      	adds	r3, r7, r3
 800b296:	781a      	ldrb	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	0011      	movs	r1, r2
 800b29c:	0018      	movs	r0, r3
 800b29e:	f001 f908 	bl	800c4b2 <USBD_LL_IsStallEP>
 800b2a2:	1e03      	subs	r3, r0, #0
 800b2a4:	d003      	beq.n	800b2ae <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	e002      	b.n	800b2b4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2b4:	68b9      	ldr	r1, [r7, #8]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	f000 fc34 	bl	800bb28 <USBD_CtlSendData>
              break;
 800b2c0:	e006      	b.n	800b2d0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	0011      	movs	r1, r2
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f000 fbaf 	bl	800ba2c <USBD_CtlError>
              break;
 800b2ce:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b2d0:	e006      	b.n	800b2e0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f000 fba7 	bl	800ba2c <USBD_CtlError>
          break;
 800b2de:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b2e0:	e006      	b.n	800b2f0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	0011      	movs	r1, r2
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f000 fb9f 	bl	800ba2c <USBD_CtlError>
      break;
 800b2ee:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b2f0:	230f      	movs	r3, #15
 800b2f2:	18fb      	adds	r3, r7, r3
 800b2f4:	781b      	ldrb	r3, [r3, #0]
}
 800b2f6:	0018      	movs	r0, r3
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	b004      	add	sp, #16
 800b2fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b300 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b30a:	2308      	movs	r3, #8
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	2200      	movs	r2, #0
 800b310:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b316:	230b      	movs	r3, #11
 800b318:	18fb      	adds	r3, r7, r3
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	885b      	ldrh	r3, [r3, #2]
 800b322:	0a1b      	lsrs	r3, r3, #8
 800b324:	b29b      	uxth	r3, r3
 800b326:	2b07      	cmp	r3, #7
 800b328:	d900      	bls.n	800b32c <USBD_GetDescriptor+0x2c>
 800b32a:	e159      	b.n	800b5e0 <USBD_GetDescriptor+0x2e0>
 800b32c:	009a      	lsls	r2, r3, #2
 800b32e:	4bcb      	ldr	r3, [pc, #812]	; (800b65c <USBD_GetDescriptor+0x35c>)
 800b330:	18d3      	adds	r3, r2, r3
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	23ac      	movs	r3, #172	; 0xac
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	58d3      	ldr	r3, [r2, r3]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	2108      	movs	r1, #8
 800b346:	1879      	adds	r1, r7, r1
 800b348:	0010      	movs	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	0003      	movs	r3, r0
 800b34e:	60fb      	str	r3, [r7, #12]
      break;
 800b350:	e153      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	7c1b      	ldrb	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10f      	bne.n	800b37a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	23ad      	movs	r3, #173	; 0xad
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	58d3      	ldr	r3, [r2, r3]
 800b362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b364:	2208      	movs	r2, #8
 800b366:	18ba      	adds	r2, r7, r2
 800b368:	0010      	movs	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	0003      	movs	r3, r0
 800b36e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	2202      	movs	r2, #2
 800b376:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b378:	e13f      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	23ad      	movs	r3, #173	; 0xad
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	58d3      	ldr	r3, [r2, r3]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	2208      	movs	r2, #8
 800b386:	18ba      	adds	r2, r7, r2
 800b388:	0010      	movs	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	0003      	movs	r3, r0
 800b38e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	2202      	movs	r2, #2
 800b396:	701a      	strb	r2, [r3, #0]
      break;
 800b398:	e12f      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	d900      	bls.n	800b3a6 <USBD_GetDescriptor+0xa6>
 800b3a4:	e0d0      	b.n	800b548 <USBD_GetDescriptor+0x248>
 800b3a6:	009a      	lsls	r2, r3, #2
 800b3a8:	4bad      	ldr	r3, [pc, #692]	; (800b660 <USBD_GetDescriptor+0x360>)
 800b3aa:	18d3      	adds	r3, r2, r3
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	23ac      	movs	r3, #172	; 0xac
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	58d3      	ldr	r3, [r2, r3]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00d      	beq.n	800b3da <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	23ac      	movs	r3, #172	; 0xac
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	58d3      	ldr	r3, [r2, r3]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	2108      	movs	r1, #8
 800b3ce:	1879      	adds	r1, r7, r1
 800b3d0:	0010      	movs	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	0003      	movs	r3, r0
 800b3d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d8:	e0c3      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	0011      	movs	r1, r2
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f000 fb23 	bl	800ba2c <USBD_CtlError>
            err++;
 800b3e6:	210b      	movs	r1, #11
 800b3e8:	187b      	adds	r3, r7, r1
 800b3ea:	781a      	ldrb	r2, [r3, #0]
 800b3ec:	187b      	adds	r3, r7, r1
 800b3ee:	3201      	adds	r2, #1
 800b3f0:	701a      	strb	r2, [r3, #0]
          break;
 800b3f2:	e0b6      	b.n	800b562 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	23ac      	movs	r3, #172	; 0xac
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	58d3      	ldr	r3, [r2, r3]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00d      	beq.n	800b41e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	23ac      	movs	r3, #172	; 0xac
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	58d3      	ldr	r3, [r2, r3]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	7c12      	ldrb	r2, [r2, #16]
 800b410:	2108      	movs	r1, #8
 800b412:	1879      	adds	r1, r7, r1
 800b414:	0010      	movs	r0, r2
 800b416:	4798      	blx	r3
 800b418:	0003      	movs	r3, r0
 800b41a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41c:	e0a1      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	0011      	movs	r1, r2
 800b424:	0018      	movs	r0, r3
 800b426:	f000 fb01 	bl	800ba2c <USBD_CtlError>
            err++;
 800b42a:	210b      	movs	r1, #11
 800b42c:	187b      	adds	r3, r7, r1
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	187b      	adds	r3, r7, r1
 800b432:	3201      	adds	r2, #1
 800b434:	701a      	strb	r2, [r3, #0]
          break;
 800b436:	e094      	b.n	800b562 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	23ac      	movs	r3, #172	; 0xac
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	58d3      	ldr	r3, [r2, r3]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	23ac      	movs	r3, #172	; 0xac
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	58d3      	ldr	r3, [r2, r3]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	7c12      	ldrb	r2, [r2, #16]
 800b454:	2108      	movs	r1, #8
 800b456:	1879      	adds	r1, r7, r1
 800b458:	0010      	movs	r0, r2
 800b45a:	4798      	blx	r3
 800b45c:	0003      	movs	r3, r0
 800b45e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b460:	e07f      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	0011      	movs	r1, r2
 800b468:	0018      	movs	r0, r3
 800b46a:	f000 fadf 	bl	800ba2c <USBD_CtlError>
            err++;
 800b46e:	210b      	movs	r1, #11
 800b470:	187b      	adds	r3, r7, r1
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	187b      	adds	r3, r7, r1
 800b476:	3201      	adds	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
          break;
 800b47a:	e072      	b.n	800b562 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	23ac      	movs	r3, #172	; 0xac
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	58d3      	ldr	r3, [r2, r3]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00d      	beq.n	800b4a6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	23ac      	movs	r3, #172	; 0xac
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	58d3      	ldr	r3, [r2, r3]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	2108      	movs	r1, #8
 800b49a:	1879      	adds	r1, r7, r1
 800b49c:	0010      	movs	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	0003      	movs	r3, r0
 800b4a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a4:	e05d      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	0011      	movs	r1, r2
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	f000 fabd 	bl	800ba2c <USBD_CtlError>
            err++;
 800b4b2:	210b      	movs	r1, #11
 800b4b4:	187b      	adds	r3, r7, r1
 800b4b6:	781a      	ldrb	r2, [r3, #0]
 800b4b8:	187b      	adds	r3, r7, r1
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
          break;
 800b4be:	e050      	b.n	800b562 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	23ac      	movs	r3, #172	; 0xac
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	58d3      	ldr	r3, [r2, r3]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	23ac      	movs	r3, #172	; 0xac
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	58d3      	ldr	r3, [r2, r3]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	7c12      	ldrb	r2, [r2, #16]
 800b4dc:	2108      	movs	r1, #8
 800b4de:	1879      	adds	r1, r7, r1
 800b4e0:	0010      	movs	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	0003      	movs	r3, r0
 800b4e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4e8:	e03b      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	0011      	movs	r1, r2
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	f000 fa9b 	bl	800ba2c <USBD_CtlError>
            err++;
 800b4f6:	210b      	movs	r1, #11
 800b4f8:	187b      	adds	r3, r7, r1
 800b4fa:	781a      	ldrb	r2, [r3, #0]
 800b4fc:	187b      	adds	r3, r7, r1
 800b4fe:	3201      	adds	r2, #1
 800b500:	701a      	strb	r2, [r3, #0]
          break;
 800b502:	e02e      	b.n	800b562 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	23ac      	movs	r3, #172	; 0xac
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	58d3      	ldr	r3, [r2, r3]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00d      	beq.n	800b52e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	23ac      	movs	r3, #172	; 0xac
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	58d3      	ldr	r3, [r2, r3]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	7c12      	ldrb	r2, [r2, #16]
 800b520:	2108      	movs	r1, #8
 800b522:	1879      	adds	r1, r7, r1
 800b524:	0010      	movs	r0, r2
 800b526:	4798      	blx	r3
 800b528:	0003      	movs	r3, r0
 800b52a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b52c:	e019      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	0011      	movs	r1, r2
 800b534:	0018      	movs	r0, r3
 800b536:	f000 fa79 	bl	800ba2c <USBD_CtlError>
            err++;
 800b53a:	210b      	movs	r1, #11
 800b53c:	187b      	adds	r3, r7, r1
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	187b      	adds	r3, r7, r1
 800b542:	3201      	adds	r2, #1
 800b544:	701a      	strb	r2, [r3, #0]
          break;
 800b546:	e00c      	b.n	800b562 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	0011      	movs	r1, r2
 800b54e:	0018      	movs	r0, r3
 800b550:	f000 fa6c 	bl	800ba2c <USBD_CtlError>
          err++;
 800b554:	210b      	movs	r1, #11
 800b556:	187b      	adds	r3, r7, r1
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	187b      	adds	r3, r7, r1
 800b55c:	3201      	adds	r2, #1
 800b55e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b560:	e04b      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>
 800b562:	e04a      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	7c1b      	ldrb	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	23ad      	movs	r3, #173	; 0xad
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	58d3      	ldr	r3, [r2, r3]
 800b574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b576:	2208      	movs	r2, #8
 800b578:	18ba      	adds	r2, r7, r2
 800b57a:	0010      	movs	r0, r2
 800b57c:	4798      	blx	r3
 800b57e:	0003      	movs	r3, r0
 800b580:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b582:	e03a      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	0011      	movs	r1, r2
 800b58a:	0018      	movs	r0, r3
 800b58c:	f000 fa4e 	bl	800ba2c <USBD_CtlError>
        err++;
 800b590:	210b      	movs	r1, #11
 800b592:	187b      	adds	r3, r7, r1
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	187b      	adds	r3, r7, r1
 800b598:	3201      	adds	r2, #1
 800b59a:	701a      	strb	r2, [r3, #0]
      break;
 800b59c:	e02d      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7c1b      	ldrb	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10f      	bne.n	800b5c6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	23ad      	movs	r3, #173	; 0xad
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	58d3      	ldr	r3, [r2, r3]
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	18ba      	adds	r2, r7, r2
 800b5b4:	0010      	movs	r0, r2
 800b5b6:	4798      	blx	r3
 800b5b8:	0003      	movs	r3, r0
 800b5ba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	2207      	movs	r2, #7
 800b5c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5c4:	e019      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	0011      	movs	r1, r2
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f000 fa2d 	bl	800ba2c <USBD_CtlError>
        err++;
 800b5d2:	210b      	movs	r1, #11
 800b5d4:	187b      	adds	r3, r7, r1
 800b5d6:	781a      	ldrb	r2, [r3, #0]
 800b5d8:	187b      	adds	r3, r7, r1
 800b5da:	3201      	adds	r2, #1
 800b5dc:	701a      	strb	r2, [r3, #0]
      break;
 800b5de:	e00c      	b.n	800b5fa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	0011      	movs	r1, r2
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	f000 fa20 	bl	800ba2c <USBD_CtlError>
      err++;
 800b5ec:	210b      	movs	r1, #11
 800b5ee:	187b      	adds	r3, r7, r1
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	187b      	adds	r3, r7, r1
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	701a      	strb	r2, [r3, #0]
      break;
 800b5f8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b5fa:	230b      	movs	r3, #11
 800b5fc:	18fb      	adds	r3, r7, r3
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d127      	bne.n	800b654 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b604:	2108      	movs	r1, #8
 800b606:	187b      	adds	r3, r7, r1
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d019      	beq.n	800b642 <USBD_GetDescriptor+0x342>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	88db      	ldrh	r3, [r3, #6]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d015      	beq.n	800b642 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	88da      	ldrh	r2, [r3, #6]
 800b61a:	187b      	adds	r3, r7, r1
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	1c18      	adds	r0, r3, #0
 800b620:	1c11      	adds	r1, r2, #0
 800b622:	b28a      	uxth	r2, r1
 800b624:	b283      	uxth	r3, r0
 800b626:	429a      	cmp	r2, r3
 800b628:	d900      	bls.n	800b62c <USBD_GetDescriptor+0x32c>
 800b62a:	1c01      	adds	r1, r0, #0
 800b62c:	b28a      	uxth	r2, r1
 800b62e:	2108      	movs	r1, #8
 800b630:	187b      	adds	r3, r7, r1
 800b632:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b634:	187b      	adds	r3, r7, r1
 800b636:	881a      	ldrh	r2, [r3, #0]
 800b638:	68f9      	ldr	r1, [r7, #12]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	0018      	movs	r0, r3
 800b63e:	f000 fa73 	bl	800bb28 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	88db      	ldrh	r3, [r3, #6]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d105      	bne.n	800b656 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	0018      	movs	r0, r3
 800b64e:	f000 fad5 	bl	800bbfc <USBD_CtlSendStatus>
 800b652:	e000      	b.n	800b656 <USBD_GetDescriptor+0x356>
    return;
 800b654:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b656:	46bd      	mov	sp, r7
 800b658:	b004      	add	sp, #16
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	0800d17c 	.word	0x0800d17c
 800b660:	0800d19c 	.word	0x0800d19c

0800b664 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	889b      	ldrh	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d13d      	bne.n	800b6f2 <USBD_SetAddress+0x8e>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	88db      	ldrh	r3, [r3, #6]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d139      	bne.n	800b6f2 <USBD_SetAddress+0x8e>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	885b      	ldrh	r3, [r3, #2]
 800b682:	2b7f      	cmp	r3, #127	; 0x7f
 800b684:	d835      	bhi.n	800b6f2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	885b      	ldrh	r3, [r3, #2]
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	230f      	movs	r3, #15
 800b68e:	18fb      	adds	r3, r7, r3
 800b690:	217f      	movs	r1, #127	; 0x7f
 800b692:	400a      	ands	r2, r1
 800b694:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	23a7      	movs	r3, #167	; 0xa7
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	5cd3      	ldrb	r3, [r2, r3]
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d106      	bne.n	800b6b0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	0011      	movs	r1, r2
 800b6a8:	0018      	movs	r0, r3
 800b6aa:	f000 f9bf 	bl	800ba2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ae:	e027      	b.n	800b700 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	240f      	movs	r4, #15
 800b6b4:	193a      	adds	r2, r7, r4
 800b6b6:	4914      	ldr	r1, [pc, #80]	; (800b708 <USBD_SetAddress+0xa4>)
 800b6b8:	7812      	ldrb	r2, [r2, #0]
 800b6ba:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6bc:	193b      	adds	r3, r7, r4
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	0011      	movs	r1, r2
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	f000 ff25 	bl	800c514 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	f000 fa95 	bl	800bbfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6d2:	193b      	adds	r3, r7, r4
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	23a7      	movs	r3, #167	; 0xa7
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	2102      	movs	r1, #2
 800b6e2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e4:	e00c      	b.n	800b700 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	23a7      	movs	r3, #167	; 0xa7
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f0:	e006      	b.n	800b700 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	0011      	movs	r1, r2
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f000 f997 	bl	800ba2c <USBD_CtlError>
  }
}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	46c0      	nop			; (mov r8, r8)
 800b702:	46bd      	mov	sp, r7
 800b704:	b005      	add	sp, #20
 800b706:	bd90      	pop	{r4, r7, pc}
 800b708:	0000029e 	.word	0x0000029e

0800b70c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	885b      	ldrh	r3, [r3, #2]
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	4b4c      	ldr	r3, [pc, #304]	; (800b850 <USBD_SetConfig+0x144>)
 800b71e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b720:	4b4b      	ldr	r3, [pc, #300]	; (800b850 <USBD_SetConfig+0x144>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d906      	bls.n	800b736 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	0011      	movs	r1, r2
 800b72e:	0018      	movs	r0, r3
 800b730:	f000 f97c 	bl	800ba2c <USBD_CtlError>
 800b734:	e088      	b.n	800b848 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	23a7      	movs	r3, #167	; 0xa7
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	5cd3      	ldrb	r3, [r2, r3]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d002      	beq.n	800b748 <USBD_SetConfig+0x3c>
 800b742:	2b03      	cmp	r3, #3
 800b744:	d029      	beq.n	800b79a <USBD_SetConfig+0x8e>
 800b746:	e071      	b.n	800b82c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b748:	4b41      	ldr	r3, [pc, #260]	; (800b850 <USBD_SetConfig+0x144>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01f      	beq.n	800b790 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b750:	4b3f      	ldr	r3, [pc, #252]	; (800b850 <USBD_SetConfig+0x144>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	001a      	movs	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	23a7      	movs	r3, #167	; 0xa7
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	2103      	movs	r1, #3
 800b762:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b764:	4b3a      	ldr	r3, [pc, #232]	; (800b850 <USBD_SetConfig+0x144>)
 800b766:	781a      	ldrb	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	0011      	movs	r1, r2
 800b76c:	0018      	movs	r0, r3
 800b76e:	f7ff f8c6 	bl	800a8fe <USBD_SetClassConfig>
 800b772:	0003      	movs	r3, r0
 800b774:	2b02      	cmp	r3, #2
 800b776:	d106      	bne.n	800b786 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	0011      	movs	r1, r2
 800b77e:	0018      	movs	r0, r3
 800b780:	f000 f954 	bl	800ba2c <USBD_CtlError>
            return;
 800b784:	e060      	b.n	800b848 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	0018      	movs	r0, r3
 800b78a:	f000 fa37 	bl	800bbfc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b78e:	e05b      	b.n	800b848 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	0018      	movs	r0, r3
 800b794:	f000 fa32 	bl	800bbfc <USBD_CtlSendStatus>
        break;
 800b798:	e056      	b.n	800b848 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b79a:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <USBD_SetConfig+0x144>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d115      	bne.n	800b7ce <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	23a7      	movs	r3, #167	; 0xa7
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b7ac:	4b28      	ldr	r3, [pc, #160]	; (800b850 <USBD_SetConfig+0x144>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	001a      	movs	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b7b6:	4b26      	ldr	r3, [pc, #152]	; (800b850 <USBD_SetConfig+0x144>)
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	0011      	movs	r1, r2
 800b7be:	0018      	movs	r0, r3
 800b7c0:	f7ff f8c4 	bl	800a94c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 fa18 	bl	800bbfc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7cc:	e03c      	b.n	800b848 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b7ce:	4b20      	ldr	r3, [pc, #128]	; (800b850 <USBD_SetConfig+0x144>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	001a      	movs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d022      	beq.n	800b822 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	0011      	movs	r1, r2
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f7ff f8b0 	bl	800a94c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b7ec:	4b18      	ldr	r3, [pc, #96]	; (800b850 <USBD_SetConfig+0x144>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b7f6:	4b16      	ldr	r3, [pc, #88]	; (800b850 <USBD_SetConfig+0x144>)
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	0011      	movs	r1, r2
 800b7fe:	0018      	movs	r0, r3
 800b800:	f7ff f87d 	bl	800a8fe <USBD_SetClassConfig>
 800b804:	0003      	movs	r3, r0
 800b806:	2b02      	cmp	r3, #2
 800b808:	d106      	bne.n	800b818 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	0011      	movs	r1, r2
 800b810:	0018      	movs	r0, r3
 800b812:	f000 f90b 	bl	800ba2c <USBD_CtlError>
            return;
 800b816:	e017      	b.n	800b848 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	0018      	movs	r0, r3
 800b81c:	f000 f9ee 	bl	800bbfc <USBD_CtlSendStatus>
        break;
 800b820:	e012      	b.n	800b848 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	0018      	movs	r0, r3
 800b826:	f000 f9e9 	bl	800bbfc <USBD_CtlSendStatus>
        break;
 800b82a:	e00d      	b.n	800b848 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	0011      	movs	r1, r2
 800b832:	0018      	movs	r0, r3
 800b834:	f000 f8fa 	bl	800ba2c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <USBD_SetConfig+0x144>)
 800b83a:	781a      	ldrb	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	0011      	movs	r1, r2
 800b840:	0018      	movs	r0, r3
 800b842:	f7ff f883 	bl	800a94c <USBD_ClrClassConfig>
        break;
 800b846:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b848:	46bd      	mov	sp, r7
 800b84a:	b002      	add	sp, #8
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	2000025d 	.word	0x2000025d

0800b854 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	88db      	ldrh	r3, [r3, #6]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d006      	beq.n	800b874 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0011      	movs	r1, r2
 800b86c:	0018      	movs	r0, r3
 800b86e:	f000 f8dd 	bl	800ba2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b872:	e026      	b.n	800b8c2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	23a7      	movs	r3, #167	; 0xa7
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	5cd3      	ldrb	r3, [r2, r3]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	dc02      	bgt.n	800b886 <USBD_GetConfig+0x32>
 800b880:	2b00      	cmp	r3, #0
 800b882:	dc03      	bgt.n	800b88c <USBD_GetConfig+0x38>
 800b884:	e016      	b.n	800b8b4 <USBD_GetConfig+0x60>
 800b886:	2b03      	cmp	r3, #3
 800b888:	d00c      	beq.n	800b8a4 <USBD_GetConfig+0x50>
 800b88a:	e013      	b.n	800b8b4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3308      	adds	r3, #8
 800b896:	0019      	movs	r1, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	0018      	movs	r0, r3
 800b89e:	f000 f943 	bl	800bb28 <USBD_CtlSendData>
        break;
 800b8a2:	e00e      	b.n	800b8c2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1d19      	adds	r1, r3, #4
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	f000 f93b 	bl	800bb28 <USBD_CtlSendData>
        break;
 800b8b2:	e006      	b.n	800b8c2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	0011      	movs	r1, r2
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f000 f8b6 	bl	800ba2c <USBD_CtlError>
        break;
 800b8c0:	46c0      	nop			; (mov r8, r8)
}
 800b8c2:	46c0      	nop			; (mov r8, r8)
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	b002      	add	sp, #8
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	23a7      	movs	r3, #167	; 0xa7
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	5cd3      	ldrb	r3, [r2, r3]
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d822      	bhi.n	800b928 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	88db      	ldrh	r3, [r3, #6]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d006      	beq.n	800b8f8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	0011      	movs	r1, r2
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f000 f89b 	bl	800ba2c <USBD_CtlError>
        break;
 800b8f6:	e01e      	b.n	800b936 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	23a9      	movs	r3, #169	; 0xa9
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	58d3      	ldr	r3, [r2, r3]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	2202      	movs	r2, #2
 800b910:	431a      	orrs	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	330c      	adds	r3, #12
 800b91a:	0019      	movs	r1, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	0018      	movs	r0, r3
 800b922:	f000 f901 	bl	800bb28 <USBD_CtlSendData>
      break;
 800b926:	e006      	b.n	800b936 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0011      	movs	r1, r2
 800b92e:	0018      	movs	r0, r3
 800b930:	f000 f87c 	bl	800ba2c <USBD_CtlError>
      break;
 800b934:	46c0      	nop			; (mov r8, r8)
  }
}
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	46bd      	mov	sp, r7
 800b93a:	b002      	add	sp, #8
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	885b      	ldrh	r3, [r3, #2]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d108      	bne.n	800b962 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	23a9      	movs	r3, #169	; 0xa9
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	2101      	movs	r1, #1
 800b958:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	0018      	movs	r0, r3
 800b95e:	f000 f94d 	bl	800bbfc <USBD_CtlSendStatus>
  }
}
 800b962:	46c0      	nop			; (mov r8, r8)
 800b964:	46bd      	mov	sp, r7
 800b966:	b002      	add	sp, #8
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b082      	sub	sp, #8
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	23a7      	movs	r3, #167	; 0xa7
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	5cd3      	ldrb	r3, [r2, r3]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d80d      	bhi.n	800b99e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d110      	bne.n	800b9ac <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	23a9      	movs	r3, #169	; 0xa9
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	2100      	movs	r1, #0
 800b992:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	0018      	movs	r0, r3
 800b998:	f000 f930 	bl	800bbfc <USBD_CtlSendStatus>
      }
      break;
 800b99c:	e006      	b.n	800b9ac <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	0011      	movs	r1, r2
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f000 f841 	bl	800ba2c <USBD_CtlError>
      break;
 800b9aa:	e000      	b.n	800b9ae <USBD_ClrFeature+0x44>
      break;
 800b9ac:	46c0      	nop			; (mov r8, r8)
  }
}
 800b9ae:	46c0      	nop			; (mov r8, r8)
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b002      	add	sp, #8
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781a      	ldrb	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	785a      	ldrb	r2, [r3, #1]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	3302      	adds	r3, #2
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	3303      	adds	r3, #3
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	18d3      	adds	r3, r2, r3
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	3305      	adds	r3, #5
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	18d3      	adds	r3, r2, r3
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	3306      	adds	r3, #6
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	3307      	adds	r3, #7
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	18d3      	adds	r3, r2, r3
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	80da      	strh	r2, [r3, #6]

}
 800ba24:	46c0      	nop			; (mov r8, r8)
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b002      	add	sp, #8
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2180      	movs	r1, #128	; 0x80
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f000 fce3 	bl	800c406 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2100      	movs	r1, #0
 800ba44:	0018      	movs	r0, r3
 800ba46:	f000 fcde 	bl	800c406 <USBD_LL_StallEP>
}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	b002      	add	sp, #8
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba52:	b590      	push	{r4, r7, lr}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba5e:	2417      	movs	r4, #23
 800ba60:	193b      	adds	r3, r7, r4
 800ba62:	2200      	movs	r2, #0
 800ba64:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d03c      	beq.n	800bae6 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	0018      	movs	r0, r3
 800ba70:	f000 f83d 	bl	800baee <USBD_GetLen>
 800ba74:	0003      	movs	r3, r0
 800ba76:	3301      	adds	r3, #1
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	18db      	adds	r3, r3, r3
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba82:	193b      	adds	r3, r7, r4
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	193a      	adds	r2, r7, r4
 800ba88:	1c59      	adds	r1, r3, #1
 800ba8a:	7011      	strb	r1, [r2, #0]
 800ba8c:	001a      	movs	r2, r3
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	189b      	adds	r3, r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	7812      	ldrb	r2, [r2, #0]
 800ba96:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba98:	193b      	adds	r3, r7, r4
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	193a      	adds	r2, r7, r4
 800ba9e:	1c59      	adds	r1, r3, #1
 800baa0:	7011      	strb	r1, [r2, #0]
 800baa2:	001a      	movs	r2, r3
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	189b      	adds	r3, r3, r2
 800baa8:	2203      	movs	r2, #3
 800baaa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800baac:	e017      	b.n	800bade <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	60fa      	str	r2, [r7, #12]
 800bab4:	2417      	movs	r4, #23
 800bab6:	193a      	adds	r2, r7, r4
 800bab8:	7812      	ldrb	r2, [r2, #0]
 800baba:	1939      	adds	r1, r7, r4
 800babc:	1c50      	adds	r0, r2, #1
 800babe:	7008      	strb	r0, [r1, #0]
 800bac0:	0011      	movs	r1, r2
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	1852      	adds	r2, r2, r1
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800baca:	193b      	adds	r3, r7, r4
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	193a      	adds	r2, r7, r4
 800bad0:	1c59      	adds	r1, r3, #1
 800bad2:	7011      	strb	r1, [r2, #0]
 800bad4:	001a      	movs	r2, r3
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	189b      	adds	r3, r3, r2
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e3      	bne.n	800baae <USBD_GetString+0x5c>
    }
  }
}
 800bae6:	46c0      	nop			; (mov r8, r8)
 800bae8:	46bd      	mov	sp, r7
 800baea:	b007      	add	sp, #28
 800baec:	bd90      	pop	{r4, r7, pc}

0800baee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baf6:	230f      	movs	r3, #15
 800baf8:	18fb      	adds	r3, r7, r3
 800bafa:	2200      	movs	r2, #0
 800bafc:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bafe:	e008      	b.n	800bb12 <USBD_GetLen+0x24>
  {
    len++;
 800bb00:	210f      	movs	r1, #15
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	187b      	adds	r3, r7, r1
 800bb08:	3201      	adds	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]
    buf++;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f2      	bne.n	800bb00 <USBD_GetLen+0x12>
  }

  return len;
 800bb1a:	230f      	movs	r3, #15
 800bb1c:	18fb      	adds	r3, r7, r3
 800bb1e:	781b      	ldrb	r3, [r3, #0]
}
 800bb20:	0018      	movs	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b004      	add	sp, #16
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	1dbb      	adds	r3, r7, #6
 800bb34:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	23a5      	movs	r3, #165	; 0xa5
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	2102      	movs	r1, #2
 800bb3e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bb40:	1dbb      	adds	r3, r7, #6
 800bb42:	881a      	ldrh	r2, [r3, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb48:	1dbb      	adds	r3, r7, #6
 800bb4a:	881a      	ldrh	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb50:	1dbb      	adds	r3, r7, #6
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	2100      	movs	r1, #0
 800bb5a:	f000 fd06 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	0018      	movs	r0, r3
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b004      	add	sp, #16
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	1dbb      	adds	r3, r7, #6
 800bb74:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb76:	1dbb      	adds	r3, r7, #6
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f000 fcf3 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	0018      	movs	r0, r3
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	b004      	add	sp, #16
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	60b9      	str	r1, [r7, #8]
 800bb98:	1dbb      	adds	r3, r7, #6
 800bb9a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	23a5      	movs	r3, #165	; 0xa5
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	2103      	movs	r1, #3
 800bba4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bba6:	1dbb      	adds	r3, r7, #6
 800bba8:	8819      	ldrh	r1, [r3, #0]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	23ae      	movs	r3, #174	; 0xae
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bbb2:	1dbb      	adds	r3, r7, #6
 800bbb4:	8819      	ldrh	r1, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	23b0      	movs	r3, #176	; 0xb0
 800bbba:	005b      	lsls	r3, r3, #1
 800bbbc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbbe:	1dbb      	adds	r3, r7, #6
 800bbc0:	881b      	ldrh	r3, [r3, #0]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	f000 fd06 	bl	800c5d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	0018      	movs	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	b004      	add	sp, #16
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	1dbb      	adds	r3, r7, #6
 800bbe2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbe4:	1dbb      	adds	r3, r7, #6
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	2100      	movs	r1, #0
 800bbee:	f000 fcf3 	bl	800c5d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	b004      	add	sp, #16
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	23a5      	movs	r3, #165	; 0xa5
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	2104      	movs	r1, #4
 800bc0c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	f000 fca8 	bl	800c56a <USBD_LL_Transmit>

  return USBD_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b002      	add	sp, #8
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	23a5      	movs	r3, #165	; 0xa5
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	2105      	movs	r1, #5
 800bc34:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	f000 fccb 	bl	800c5d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	0018      	movs	r0, r3
 800bc46:	46bd      	mov	sp, r7
 800bc48:	b002      	add	sp, #8
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc50:	4914      	ldr	r1, [pc, #80]	; (800bca4 <MX_USB_DEVICE_Init+0x58>)
 800bc52:	4b15      	ldr	r3, [pc, #84]	; (800bca8 <MX_USB_DEVICE_Init+0x5c>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	0018      	movs	r0, r3
 800bc58:	f7fe fdea 	bl	800a830 <USBD_Init>
 800bc5c:	1e03      	subs	r3, r0, #0
 800bc5e:	d001      	beq.n	800bc64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc60:	f7f5 fc98 	bl	8001594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc64:	4a11      	ldr	r2, [pc, #68]	; (800bcac <MX_USB_DEVICE_Init+0x60>)
 800bc66:	4b10      	ldr	r3, [pc, #64]	; (800bca8 <MX_USB_DEVICE_Init+0x5c>)
 800bc68:	0011      	movs	r1, r2
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f7fe fe11 	bl	800a892 <USBD_RegisterClass>
 800bc70:	1e03      	subs	r3, r0, #0
 800bc72:	d001      	beq.n	800bc78 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bc74:	f7f5 fc8e 	bl	8001594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc78:	4a0d      	ldr	r2, [pc, #52]	; (800bcb0 <MX_USB_DEVICE_Init+0x64>)
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <MX_USB_DEVICE_Init+0x5c>)
 800bc7c:	0011      	movs	r1, r2
 800bc7e:	0018      	movs	r0, r3
 800bc80:	f7fe fd26 	bl	800a6d0 <USBD_CDC_RegisterInterface>
 800bc84:	1e03      	subs	r3, r0, #0
 800bc86:	d001      	beq.n	800bc8c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bc88:	f7f5 fc84 	bl	8001594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <MX_USB_DEVICE_Init+0x5c>)
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f7fe fe1f 	bl	800a8d2 <USBD_Start>
 800bc94:	1e03      	subs	r3, r0, #0
 800bc96:	d001      	beq.n	800bc9c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bc98:	f7f5 fc7c 	bl	8001594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc9c:	46c0      	nop			; (mov r8, r8)
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	46c0      	nop			; (mov r8, r8)
 800bca4:	2000012c 	.word	0x2000012c
 800bca8:	200006d0 	.word	0x200006d0
 800bcac:	20000018 	.word	0x20000018
 800bcb0:	2000011c 	.word	0x2000011c

0800bcb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcb8:	4907      	ldr	r1, [pc, #28]	; (800bcd8 <CDC_Init_FS+0x24>)
 800bcba:	4b08      	ldr	r3, [pc, #32]	; (800bcdc <CDC_Init_FS+0x28>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	f7fe fd21 	bl	800a706 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcc4:	4a06      	ldr	r2, [pc, #24]	; (800bce0 <CDC_Init_FS+0x2c>)
 800bcc6:	4b05      	ldr	r3, [pc, #20]	; (800bcdc <CDC_Init_FS+0x28>)
 800bcc8:	0011      	movs	r1, r2
 800bcca:	0018      	movs	r0, r3
 800bccc:	f7fe fd37 	bl	800a73e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcd0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20000d7c 	.word	0x20000d7c
 800bcdc:	200006d0 	.word	0x200006d0
 800bce0:	20000994 	.word	0x20000994

0800bce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcea:	0018      	movs	r0, r3
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6039      	str	r1, [r7, #0]
 800bcf8:	0011      	movs	r1, r2
 800bcfa:	1dfb      	adds	r3, r7, #7
 800bcfc:	1c02      	adds	r2, r0, #0
 800bcfe:	701a      	strb	r2, [r3, #0]
 800bd00:	1d3b      	adds	r3, r7, #4
 800bd02:	1c0a      	adds	r2, r1, #0
 800bd04:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd06:	1dfb      	adds	r3, r7, #7
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b23      	cmp	r3, #35	; 0x23
 800bd0c:	d804      	bhi.n	800bd18 <CDC_Control_FS+0x28>
 800bd0e:	009a      	lsls	r2, r3, #2
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <CDC_Control_FS+0x34>)
 800bd12:	18d3      	adds	r3, r2, r3
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd18:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bd1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	b002      	add	sp, #8
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	0800d1b4 	.word	0x0800d1b4

0800bd28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800bd32:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <CDC_Receive_FS+0x6c>)
 800bd34:	7a1a      	ldrb	r2, [r3, #8]
 800bd36:	2101      	movs	r1, #1
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800bd3c:	230f      	movs	r3, #15
 800bd3e:	18fb      	adds	r3, r7, r3
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e00f      	b.n	800bd66 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <CDC_Receive_FS+0x70>)
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	240f      	movs	r4, #15
 800bd4c:	193b      	adds	r3, r7, r4
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	18d3      	adds	r3, r2, r3
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	0019      	movs	r1, r3
 800bd58:	f7f5 fc56 	bl	8001608 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800bd5c:	193b      	adds	r3, r7, r4
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	193b      	adds	r3, r7, r4
 800bd62:	3201      	adds	r2, #1
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	230f      	movs	r3, #15
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d3e8      	bcc.n	800bd46 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <CDC_Receive_FS+0x74>)
 800bd78:	0011      	movs	r1, r2
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f7fe fcdf 	bl	800a73e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd80:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <CDC_Receive_FS+0x74>)
 800bd82:	0018      	movs	r0, r3
 800bd84:	f7fe fd26 	bl	800a7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	b005      	add	sp, #20
 800bd90:	bd90      	pop	{r4, r7, pc}
 800bd92:	46c0      	nop			; (mov r8, r8)
 800bd94:	20000618 	.word	0x20000618
 800bd98:	20001164 	.word	0x20001164
 800bd9c:	200006d0 	.word	0x200006d0

0800bda0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bda0:	b5b0      	push	{r4, r5, r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	000a      	movs	r2, r1
 800bdaa:	1cbb      	adds	r3, r7, #2
 800bdac:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bdae:	230f      	movs	r3, #15
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bdb6:	4a11      	ldr	r2, [pc, #68]	; (800bdfc <CDC_Transmit_FS+0x5c>)
 800bdb8:	23ae      	movs	r3, #174	; 0xae
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	58d3      	ldr	r3, [r2, r3]
 800bdbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	2385      	movs	r3, #133	; 0x85
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	58d3      	ldr	r3, [r2, r3]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e010      	b.n	800bdf2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bdd0:	1cbb      	adds	r3, r7, #2
 800bdd2:	881a      	ldrh	r2, [r3, #0]
 800bdd4:	6879      	ldr	r1, [r7, #4]
 800bdd6:	4b09      	ldr	r3, [pc, #36]	; (800bdfc <CDC_Transmit_FS+0x5c>)
 800bdd8:	0018      	movs	r0, r3
 800bdda:	f7fe fc94 	bl	800a706 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdde:	250f      	movs	r5, #15
 800bde0:	197c      	adds	r4, r7, r5
 800bde2:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <CDC_Transmit_FS+0x5c>)
 800bde4:	0018      	movs	r0, r3
 800bde6:	f7fe fcbe 	bl	800a766 <USBD_CDC_TransmitPacket>
 800bdea:	0003      	movs	r3, r0
 800bdec:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bdee:	197b      	adds	r3, r7, r5
 800bdf0:	781b      	ldrb	r3, [r3, #0]
}
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	b004      	add	sp, #16
 800bdf8:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfa:	46c0      	nop			; (mov r8, r8)
 800bdfc:	200006d0 	.word	0x200006d0

0800be00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	0002      	movs	r2, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	1dfb      	adds	r3, r7, #7
 800be0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2212      	movs	r2, #18
 800be12:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be14:	4b02      	ldr	r3, [pc, #8]	; (800be20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be16:	0018      	movs	r0, r3
 800be18:	46bd      	mov	sp, r7
 800be1a:	b002      	add	sp, #8
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	20000148 	.word	0x20000148

0800be24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	0002      	movs	r2, r0
 800be2c:	6039      	str	r1, [r7, #0]
 800be2e:	1dfb      	adds	r3, r7, #7
 800be30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2204      	movs	r2, #4
 800be36:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be38:	4b02      	ldr	r3, [pc, #8]	; (800be44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be3a:	0018      	movs	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	b002      	add	sp, #8
 800be40:	bd80      	pop	{r7, pc}
 800be42:	46c0      	nop			; (mov r8, r8)
 800be44:	2000015c 	.word	0x2000015c

0800be48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	0002      	movs	r2, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	1dfb      	adds	r3, r7, #7
 800be54:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800be56:	1dfb      	adds	r3, r7, #7
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	4908      	ldr	r1, [pc, #32]	; (800be84 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <USBD_FS_ProductStrDescriptor+0x40>)
 800be64:	0018      	movs	r0, r3
 800be66:	f7ff fdf4 	bl	800ba52 <USBD_GetString>
 800be6a:	e005      	b.n	800be78 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	4905      	ldr	r1, [pc, #20]	; (800be84 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <USBD_FS_ProductStrDescriptor+0x40>)
 800be72:	0018      	movs	r0, r3
 800be74:	f7ff fded 	bl	800ba52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800be7a:	0018      	movs	r0, r3
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b002      	add	sp, #8
 800be80:	bd80      	pop	{r7, pc}
 800be82:	46c0      	nop			; (mov r8, r8)
 800be84:	20001168 	.word	0x20001168
 800be88:	0800d07c 	.word	0x0800d07c

0800be8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	0002      	movs	r2, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	1dfb      	adds	r3, r7, #7
 800be98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	4904      	ldr	r1, [pc, #16]	; (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800bea0:	0018      	movs	r0, r3
 800bea2:	f7ff fdd6 	bl	800ba52 <USBD_GetString>
  return USBD_StrDesc;
 800bea6:	4b02      	ldr	r3, [pc, #8]	; (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b002      	add	sp, #8
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20001168 	.word	0x20001168
 800beb4:	0800d094 	.word	0x0800d094

0800beb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	0002      	movs	r2, r0
 800bec0:	6039      	str	r1, [r7, #0]
 800bec2:	1dfb      	adds	r3, r7, #7
 800bec4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	221a      	movs	r2, #26
 800beca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800becc:	f000 f84c 	bl	800bf68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_FS_SerialStrDescriptor+0x24>)
}
 800bed2:	0018      	movs	r0, r3
 800bed4:	46bd      	mov	sp, r7
 800bed6:	b002      	add	sp, #8
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	46c0      	nop			; (mov r8, r8)
 800bedc:	20000160 	.word	0x20000160

0800bee0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	0002      	movs	r2, r0
 800bee8:	6039      	str	r1, [r7, #0]
 800beea:	1dfb      	adds	r3, r7, #7
 800beec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800beee:	1dfb      	adds	r3, r7, #7
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4908      	ldr	r1, [pc, #32]	; (800bf1c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <USBD_FS_ConfigStrDescriptor+0x40>)
 800befc:	0018      	movs	r0, r3
 800befe:	f7ff fda8 	bl	800ba52 <USBD_GetString>
 800bf02:	e005      	b.n	800bf10 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	4905      	ldr	r1, [pc, #20]	; (800bf1c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <USBD_FS_ConfigStrDescriptor+0x40>)
 800bf0a:	0018      	movs	r0, r3
 800bf0c:	f7ff fda1 	bl	800ba52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf10:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800bf12:	0018      	movs	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b002      	add	sp, #8
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	20001168 	.word	0x20001168
 800bf20:	0800d0a8 	.word	0x0800d0a8

0800bf24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	0002      	movs	r2, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	1dfb      	adds	r3, r7, #7
 800bf30:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bf32:	1dfb      	adds	r3, r7, #7
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d106      	bne.n	800bf48 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	4908      	ldr	r1, [pc, #32]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800bf40:	0018      	movs	r0, r3
 800bf42:	f7ff fd86 	bl	800ba52 <USBD_GetString>
 800bf46:	e005      	b.n	800bf54 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	4905      	ldr	r1, [pc, #20]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800bf4e:	0018      	movs	r0, r3
 800bf50:	f7ff fd7f 	bl	800ba52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800bf56:	0018      	movs	r0, r3
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	b002      	add	sp, #8
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	20001168 	.word	0x20001168
 800bf64:	0800d0b4 	.word	0x0800d0b4

0800bf68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <Get_SerialNum+0x48>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf74:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <Get_SerialNum+0x4c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf7a:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <Get_SerialNum+0x50>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	18d3      	adds	r3, r2, r3
 800bf86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00b      	beq.n	800bfa6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf8e:	490b      	ldr	r1, [pc, #44]	; (800bfbc <Get_SerialNum+0x54>)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2208      	movs	r2, #8
 800bf94:	0018      	movs	r0, r3
 800bf96:	f000 f815 	bl	800bfc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf9a:	4909      	ldr	r1, [pc, #36]	; (800bfc0 <Get_SerialNum+0x58>)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2204      	movs	r2, #4
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	f000 f80f 	bl	800bfc4 <IntToUnicode>
  }
}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	b004      	add	sp, #16
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	46c0      	nop			; (mov r8, r8)
 800bfb0:	1ffff7ac 	.word	0x1ffff7ac
 800bfb4:	1ffff7b0 	.word	0x1ffff7b0
 800bfb8:	1ffff7b4 	.word	0x1ffff7b4
 800bfbc:	20000162 	.word	0x20000162
 800bfc0:	20000172 	.word	0x20000172

0800bfc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	1dfb      	adds	r3, r7, #7
 800bfd0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800bfd2:	2117      	movs	r1, #23
 800bfd4:	187b      	adds	r3, r7, r1
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800bfda:	187b      	adds	r3, r7, r1
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e02f      	b.n	800c042 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	0f1b      	lsrs	r3, r3, #28
 800bfe6:	2b09      	cmp	r3, #9
 800bfe8:	d80d      	bhi.n	800c006 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	0f1b      	lsrs	r3, r3, #28
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	2317      	movs	r3, #23
 800bff2:	18fb      	adds	r3, r7, r3
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	0019      	movs	r1, r3
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	185b      	adds	r3, r3, r1
 800bffe:	3230      	adds	r2, #48	; 0x30
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e00c      	b.n	800c020 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	0f1b      	lsrs	r3, r3, #28
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	2317      	movs	r3, #23
 800c00e:	18fb      	adds	r3, r7, r3
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	0019      	movs	r1, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	185b      	adds	r3, r3, r1
 800c01a:	3237      	adds	r2, #55	; 0x37
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c026:	2117      	movs	r1, #23
 800c028:	187b      	adds	r3, r7, r1
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	3301      	adds	r3, #1
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	18d3      	adds	r3, r2, r3
 800c034:	2200      	movs	r2, #0
 800c036:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c038:	187b      	adds	r3, r7, r1
 800c03a:	781a      	ldrb	r2, [r3, #0]
 800c03c:	187b      	adds	r3, r7, r1
 800c03e:	3201      	adds	r2, #1
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	2317      	movs	r3, #23
 800c044:	18fa      	adds	r2, r7, r3
 800c046:	1dfb      	adds	r3, r7, #7
 800c048:	7812      	ldrb	r2, [r2, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d3c8      	bcc.n	800bfe2 <IntToUnicode+0x1e>
  }
}
 800c050:	46c0      	nop			; (mov r8, r8)
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	46bd      	mov	sp, r7
 800c056:	b006      	add	sp, #24
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a0e      	ldr	r2, [pc, #56]	; (800c0a4 <HAL_PCD_MspInit+0x48>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d115      	bne.n	800c09a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c06e:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <HAL_PCD_MspInit+0x4c>)
 800c070:	69da      	ldr	r2, [r3, #28]
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <HAL_PCD_MspInit+0x4c>)
 800c074:	2180      	movs	r1, #128	; 0x80
 800c076:	0409      	lsls	r1, r1, #16
 800c078:	430a      	orrs	r2, r1
 800c07a:	61da      	str	r2, [r3, #28]
 800c07c:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <HAL_PCD_MspInit+0x4c>)
 800c07e:	69da      	ldr	r2, [r3, #28]
 800c080:	2380      	movs	r3, #128	; 0x80
 800c082:	041b      	lsls	r3, r3, #16
 800c084:	4013      	ands	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c08a:	2200      	movs	r2, #0
 800c08c:	2100      	movs	r1, #0
 800c08e:	201f      	movs	r0, #31
 800c090:	f7f6 fe2a 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c094:	201f      	movs	r0, #31
 800c096:	f7f6 fe3c 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c09a:	46c0      	nop			; (mov r8, r8)
 800c09c:	46bd      	mov	sp, r7
 800c09e:	b004      	add	sp, #16
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	40005c00 	.word	0x40005c00
 800c0a8:	40021000 	.word	0x40021000

0800c0ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	23bc      	movs	r3, #188	; 0xbc
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	58d2      	ldr	r2, [r2, r3]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	21ac      	movs	r1, #172	; 0xac
 800c0c0:	0089      	lsls	r1, r1, #2
 800c0c2:	468c      	mov	ip, r1
 800c0c4:	4463      	add	r3, ip
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	0010      	movs	r0, r2
 800c0ca:	f7fe fc55 	bl	800a978 <USBD_LL_SetupStage>
}
 800c0ce:	46c0      	nop			; (mov r8, r8)
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b002      	add	sp, #8
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d6:	b590      	push	{r4, r7, lr}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	000a      	movs	r2, r1
 800c0e0:	1cfb      	adds	r3, r7, #3
 800c0e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	23bc      	movs	r3, #188	; 0xbc
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	58d4      	ldr	r4, [r2, r3]
 800c0ec:	1cfb      	adds	r3, r7, #3
 800c0ee:	781a      	ldrb	r2, [r3, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	23be      	movs	r3, #190	; 0xbe
 800c0f4:	0059      	lsls	r1, r3, #1
 800c0f6:	0013      	movs	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	189b      	adds	r3, r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	18c3      	adds	r3, r0, r3
 800c100:	185b      	adds	r3, r3, r1
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	1cfb      	adds	r3, r7, #3
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	0019      	movs	r1, r3
 800c10a:	0020      	movs	r0, r4
 800c10c:	f7fe fc92 	bl	800aa34 <USBD_LL_DataOutStage>
}
 800c110:	46c0      	nop			; (mov r8, r8)
 800c112:	46bd      	mov	sp, r7
 800c114:	b003      	add	sp, #12
 800c116:	bd90      	pop	{r4, r7, pc}

0800c118 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	000a      	movs	r2, r1
 800c122:	1cfb      	adds	r3, r7, #3
 800c124:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	23bc      	movs	r3, #188	; 0xbc
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	58d0      	ldr	r0, [r2, r3]
 800c12e:	1cfb      	adds	r3, r7, #3
 800c130:	781a      	ldrb	r2, [r3, #0]
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	0013      	movs	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	189b      	adds	r3, r3, r2
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	18cb      	adds	r3, r1, r3
 800c13e:	333c      	adds	r3, #60	; 0x3c
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	1cfb      	adds	r3, r7, #3
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	0019      	movs	r1, r3
 800c148:	f7fe fcf6 	bl	800ab38 <USBD_LL_DataInStage>
}
 800c14c:	46c0      	nop			; (mov r8, r8)
 800c14e:	46bd      	mov	sp, r7
 800c150:	b002      	add	sp, #8
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	23bc      	movs	r3, #188	; 0xbc
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	58d3      	ldr	r3, [r2, r3]
 800c164:	0018      	movs	r0, r3
 800c166:	f7fe fe2d 	bl	800adc4 <USBD_LL_SOF>
}
 800c16a:	46c0      	nop			; (mov r8, r8)
 800c16c:	46bd      	mov	sp, r7
 800c16e:	b002      	add	sp, #8
 800c170:	bd80      	pop	{r7, pc}

0800c172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c17a:	230f      	movs	r3, #15
 800c17c:	18fb      	adds	r3, r7, r3
 800c17e:	2201      	movs	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d001      	beq.n	800c18e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c18a:	f7f5 fa03 	bl	8001594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	23bc      	movs	r3, #188	; 0xbc
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	58d2      	ldr	r2, [r2, r3]
 800c196:	230f      	movs	r3, #15
 800c198:	18fb      	adds	r3, r7, r3
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	0019      	movs	r1, r3
 800c19e:	0010      	movs	r0, r2
 800c1a0:	f7fe fdcf 	bl	800ad42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	23bc      	movs	r3, #188	; 0xbc
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	58d3      	ldr	r3, [r2, r3]
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f7fe fd80 	bl	800acb2 <USBD_LL_Reset>
}
 800c1b2:	46c0      	nop			; (mov r8, r8)
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b004      	add	sp, #16
 800c1b8:	bd80      	pop	{r7, pc}
	...

0800c1bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	23bc      	movs	r3, #188	; 0xbc
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	58d3      	ldr	r3, [r2, r3]
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f7fe fdc9 	bl	800ad64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <HAL_PCD_SuspendCallback+0x34>)
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <HAL_PCD_SuspendCallback+0x34>)
 800c1e0:	2106      	movs	r1, #6
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c1e6:	46c0      	nop			; (mov r8, r8)
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	b002      	add	sp, #8
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	e000ed00 	.word	0xe000ed00

0800c1f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d007      	beq.n	800c214 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c204:	4b09      	ldr	r3, [pc, #36]	; (800c22c <HAL_PCD_ResumeCallback+0x38>)
 800c206:	691a      	ldr	r2, [r3, #16]
 800c208:	4b08      	ldr	r3, [pc, #32]	; (800c22c <HAL_PCD_ResumeCallback+0x38>)
 800c20a:	2106      	movs	r1, #6
 800c20c:	438a      	bics	r2, r1
 800c20e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c210:	f000 fa44 	bl	800c69c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	23bc      	movs	r3, #188	; 0xbc
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	58d3      	ldr	r3, [r2, r3]
 800c21c:	0018      	movs	r0, r3
 800c21e:	f7fe fdb9 	bl	800ad94 <USBD_LL_Resume>
}
 800c222:	46c0      	nop			; (mov r8, r8)
 800c224:	46bd      	mov	sp, r7
 800c226:	b002      	add	sp, #8
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	e000ed00 	.word	0xe000ed00

0800c230 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c238:	4a2d      	ldr	r2, [pc, #180]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c23a:	23bc      	movs	r3, #188	; 0xbc
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	23b0      	movs	r3, #176	; 0xb0
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4929      	ldr	r1, [pc, #164]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c24a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c24c:	4b28      	ldr	r3, [pc, #160]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c24e:	4a29      	ldr	r2, [pc, #164]	; (800c2f4 <USBD_LL_Init+0xc4>)
 800c250:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c252:	4b27      	ldr	r3, [pc, #156]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c254:	2208      	movs	r2, #8
 800c256:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c258:	4b25      	ldr	r3, [pc, #148]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c25a:	2202      	movs	r2, #2
 800c25c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c25e:	4b24      	ldr	r3, [pc, #144]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c260:	2202      	movs	r2, #2
 800c262:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c264:	4b22      	ldr	r3, [pc, #136]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c266:	2200      	movs	r2, #0
 800c268:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c26a:	4b21      	ldr	r3, [pc, #132]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c270:	4b1f      	ldr	r3, [pc, #124]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c272:	2200      	movs	r2, #0
 800c274:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c276:	4b1e      	ldr	r3, [pc, #120]	; (800c2f0 <USBD_LL_Init+0xc0>)
 800c278:	0018      	movs	r0, r3
 800c27a:	f7f7 f967 	bl	800354c <HAL_PCD_Init>
 800c27e:	1e03      	subs	r3, r0, #0
 800c280:	d001      	beq.n	800c286 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c282:	f7f5 f987 	bl	8001594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	23b0      	movs	r3, #176	; 0xb0
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	58d0      	ldr	r0, [r2, r3]
 800c28e:	2318      	movs	r3, #24
 800c290:	2200      	movs	r2, #0
 800c292:	2100      	movs	r1, #0
 800c294:	f7f8 ff48 	bl	8005128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	23b0      	movs	r3, #176	; 0xb0
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	58d0      	ldr	r0, [r2, r3]
 800c2a0:	2358      	movs	r3, #88	; 0x58
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2180      	movs	r1, #128	; 0x80
 800c2a6:	f7f8 ff3f 	bl	8005128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	23b0      	movs	r3, #176	; 0xb0
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	58d0      	ldr	r0, [r2, r3]
 800c2b2:	23c0      	movs	r3, #192	; 0xc0
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2181      	movs	r1, #129	; 0x81
 800c2b8:	f7f8 ff36 	bl	8005128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	23b0      	movs	r3, #176	; 0xb0
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	58d0      	ldr	r0, [r2, r3]
 800c2c4:	2388      	movs	r3, #136	; 0x88
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	f7f8 ff2c 	bl	8005128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	23b0      	movs	r3, #176	; 0xb0
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	58d0      	ldr	r0, [r2, r3]
 800c2d8:	2380      	movs	r3, #128	; 0x80
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2182      	movs	r1, #130	; 0x82
 800c2e0:	f7f8 ff22 	bl	8005128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	b002      	add	sp, #8
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	46c0      	nop			; (mov r8, r8)
 800c2f0:	20001368 	.word	0x20001368
 800c2f4:	40005c00 	.word	0x40005c00

0800c2f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c300:	210f      	movs	r1, #15
 800c302:	187b      	adds	r3, r7, r1
 800c304:	2200      	movs	r2, #0
 800c306:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c308:	260e      	movs	r6, #14
 800c30a:	19bb      	adds	r3, r7, r6
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	23b0      	movs	r3, #176	; 0xb0
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	58d3      	ldr	r3, [r2, r3]
 800c318:	000d      	movs	r5, r1
 800c31a:	187c      	adds	r4, r7, r1
 800c31c:	0018      	movs	r0, r3
 800c31e:	f7f7 fa25 	bl	800376c <HAL_PCD_Start>
 800c322:	0003      	movs	r3, r0
 800c324:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c326:	19bc      	adds	r4, r7, r6
 800c328:	197b      	adds	r3, r7, r5
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	0018      	movs	r0, r3
 800c32e:	f000 f9bc 	bl	800c6aa <USBD_Get_USB_Status>
 800c332:	0003      	movs	r3, r0
 800c334:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c336:	19bb      	adds	r3, r7, r6
 800c338:	781b      	ldrb	r3, [r3, #0]
}
 800c33a:	0018      	movs	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	b005      	add	sp, #20
 800c340:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c342:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c344:	b085      	sub	sp, #20
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	000c      	movs	r4, r1
 800c34c:	0010      	movs	r0, r2
 800c34e:	0019      	movs	r1, r3
 800c350:	1cfb      	adds	r3, r7, #3
 800c352:	1c22      	adds	r2, r4, #0
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	1cbb      	adds	r3, r7, #2
 800c358:	1c02      	adds	r2, r0, #0
 800c35a:	701a      	strb	r2, [r3, #0]
 800c35c:	003b      	movs	r3, r7
 800c35e:	1c0a      	adds	r2, r1, #0
 800c360:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c362:	260f      	movs	r6, #15
 800c364:	19bb      	adds	r3, r7, r6
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36a:	250e      	movs	r5, #14
 800c36c:	197b      	adds	r3, r7, r5
 800c36e:	2200      	movs	r2, #0
 800c370:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	23b0      	movs	r3, #176	; 0xb0
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	58d0      	ldr	r0, [r2, r3]
 800c37a:	19bc      	adds	r4, r7, r6
 800c37c:	1cbb      	adds	r3, r7, #2
 800c37e:	781d      	ldrb	r5, [r3, #0]
 800c380:	003b      	movs	r3, r7
 800c382:	881a      	ldrh	r2, [r3, #0]
 800c384:	1cfb      	adds	r3, r7, #3
 800c386:	7819      	ldrb	r1, [r3, #0]
 800c388:	002b      	movs	r3, r5
 800c38a:	f7f7 fbbc 	bl	8003b06 <HAL_PCD_EP_Open>
 800c38e:	0003      	movs	r3, r0
 800c390:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c392:	250e      	movs	r5, #14
 800c394:	197c      	adds	r4, r7, r5
 800c396:	19bb      	adds	r3, r7, r6
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	0018      	movs	r0, r3
 800c39c:	f000 f985 	bl	800c6aa <USBD_Get_USB_Status>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c3a4:	197b      	adds	r3, r7, r5
 800c3a6:	781b      	ldrb	r3, [r3, #0]
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b005      	add	sp, #20
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	000a      	movs	r2, r1
 800c3ba:	1cfb      	adds	r3, r7, #3
 800c3bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3be:	210f      	movs	r1, #15
 800c3c0:	187b      	adds	r3, r7, r1
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3c6:	260e      	movs	r6, #14
 800c3c8:	19bb      	adds	r3, r7, r6
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	23b0      	movs	r3, #176	; 0xb0
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	58d2      	ldr	r2, [r2, r3]
 800c3d6:	000d      	movs	r5, r1
 800c3d8:	187c      	adds	r4, r7, r1
 800c3da:	1cfb      	adds	r3, r7, #3
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	0019      	movs	r1, r3
 800c3e0:	0010      	movs	r0, r2
 800c3e2:	f7f7 fc08 	bl	8003bf6 <HAL_PCD_EP_Close>
 800c3e6:	0003      	movs	r3, r0
 800c3e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ea:	19bc      	adds	r4, r7, r6
 800c3ec:	197b      	adds	r3, r7, r5
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f000 f95a 	bl	800c6aa <USBD_Get_USB_Status>
 800c3f6:	0003      	movs	r3, r0
 800c3f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c3fa:	19bb      	adds	r3, r7, r6
 800c3fc:	781b      	ldrb	r3, [r3, #0]
}
 800c3fe:	0018      	movs	r0, r3
 800c400:	46bd      	mov	sp, r7
 800c402:	b005      	add	sp, #20
 800c404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c406 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c406:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c408:	b085      	sub	sp, #20
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	000a      	movs	r2, r1
 800c410:	1cfb      	adds	r3, r7, #3
 800c412:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c414:	210f      	movs	r1, #15
 800c416:	187b      	adds	r3, r7, r1
 800c418:	2200      	movs	r2, #0
 800c41a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41c:	260e      	movs	r6, #14
 800c41e:	19bb      	adds	r3, r7, r6
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	23b0      	movs	r3, #176	; 0xb0
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	58d2      	ldr	r2, [r2, r3]
 800c42c:	000d      	movs	r5, r1
 800c42e:	187c      	adds	r4, r7, r1
 800c430:	1cfb      	adds	r3, r7, #3
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	0019      	movs	r1, r3
 800c436:	0010      	movs	r0, r2
 800c438:	f7f7 fcd4 	bl	8003de4 <HAL_PCD_EP_SetStall>
 800c43c:	0003      	movs	r3, r0
 800c43e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c440:	19bc      	adds	r4, r7, r6
 800c442:	197b      	adds	r3, r7, r5
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	0018      	movs	r0, r3
 800c448:	f000 f92f 	bl	800c6aa <USBD_Get_USB_Status>
 800c44c:	0003      	movs	r3, r0
 800c44e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c450:	19bb      	adds	r3, r7, r6
 800c452:	781b      	ldrb	r3, [r3, #0]
}
 800c454:	0018      	movs	r0, r3
 800c456:	46bd      	mov	sp, r7
 800c458:	b005      	add	sp, #20
 800c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c45c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	000a      	movs	r2, r1
 800c466:	1cfb      	adds	r3, r7, #3
 800c468:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46a:	210f      	movs	r1, #15
 800c46c:	187b      	adds	r3, r7, r1
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c472:	260e      	movs	r6, #14
 800c474:	19bb      	adds	r3, r7, r6
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	23b0      	movs	r3, #176	; 0xb0
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	58d2      	ldr	r2, [r2, r3]
 800c482:	000d      	movs	r5, r1
 800c484:	187c      	adds	r4, r7, r1
 800c486:	1cfb      	adds	r3, r7, #3
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	0019      	movs	r1, r3
 800c48c:	0010      	movs	r0, r2
 800c48e:	f7f7 fd05 	bl	8003e9c <HAL_PCD_EP_ClrStall>
 800c492:	0003      	movs	r3, r0
 800c494:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c496:	19bc      	adds	r4, r7, r6
 800c498:	197b      	adds	r3, r7, r5
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	0018      	movs	r0, r3
 800c49e:	f000 f904 	bl	800c6aa <USBD_Get_USB_Status>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4a6:	19bb      	adds	r3, r7, r6
 800c4a8:	781b      	ldrb	r3, [r3, #0]
}
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	b005      	add	sp, #20
 800c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4b2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	000a      	movs	r2, r1
 800c4bc:	1cfb      	adds	r3, r7, #3
 800c4be:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	23b0      	movs	r3, #176	; 0xb0
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	58d3      	ldr	r3, [r2, r3]
 800c4c8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4ca:	1cfb      	adds	r3, r7, #3
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da0d      	bge.n	800c4f0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4d4:	1cfb      	adds	r3, r7, #3
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	227f      	movs	r2, #127	; 0x7f
 800c4da:	4013      	ands	r3, r2
 800c4dc:	68f9      	ldr	r1, [r7, #12]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	0013      	movs	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	189b      	adds	r3, r3, r2
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	18cb      	adds	r3, r1, r3
 800c4ea:	3302      	adds	r3, #2
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	e00d      	b.n	800c50c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4f0:	1cfb      	adds	r3, r7, #3
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	227f      	movs	r2, #127	; 0x7f
 800c4f6:	401a      	ands	r2, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	23b5      	movs	r3, #181	; 0xb5
 800c4fc:	0059      	lsls	r1, r3, #1
 800c4fe:	0013      	movs	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	189b      	adds	r3, r3, r2
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	18c3      	adds	r3, r0, r3
 800c508:	185b      	adds	r3, r3, r1
 800c50a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c50c:	0018      	movs	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	b004      	add	sp, #16
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	000a      	movs	r2, r1
 800c51e:	1cfb      	adds	r3, r7, #3
 800c520:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c522:	210f      	movs	r1, #15
 800c524:	187b      	adds	r3, r7, r1
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52a:	260e      	movs	r6, #14
 800c52c:	19bb      	adds	r3, r7, r6
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	23b0      	movs	r3, #176	; 0xb0
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	58d2      	ldr	r2, [r2, r3]
 800c53a:	000d      	movs	r5, r1
 800c53c:	187c      	adds	r4, r7, r1
 800c53e:	1cfb      	adds	r3, r7, #3
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	0019      	movs	r1, r3
 800c544:	0010      	movs	r0, r2
 800c546:	f7f7 fab3 	bl	8003ab0 <HAL_PCD_SetAddress>
 800c54a:	0003      	movs	r3, r0
 800c54c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c54e:	19bc      	adds	r4, r7, r6
 800c550:	197b      	adds	r3, r7, r5
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	0018      	movs	r0, r3
 800c556:	f000 f8a8 	bl	800c6aa <USBD_Get_USB_Status>
 800c55a:	0003      	movs	r3, r0
 800c55c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c55e:	19bb      	adds	r3, r7, r6
 800c560:	781b      	ldrb	r3, [r3, #0]
}
 800c562:	0018      	movs	r0, r3
 800c564:	46bd      	mov	sp, r7
 800c566:	b005      	add	sp, #20
 800c568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c56a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c56a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	0008      	movs	r0, r1
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	0019      	movs	r1, r3
 800c578:	230b      	movs	r3, #11
 800c57a:	18fb      	adds	r3, r7, r3
 800c57c:	1c02      	adds	r2, r0, #0
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	2408      	movs	r4, #8
 800c582:	193b      	adds	r3, r7, r4
 800c584:	1c0a      	adds	r2, r1, #0
 800c586:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2117      	movs	r1, #23
 800c58a:	187b      	adds	r3, r7, r1
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c590:	2516      	movs	r5, #22
 800c592:	197b      	adds	r3, r7, r5
 800c594:	2200      	movs	r2, #0
 800c596:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	23b0      	movs	r3, #176	; 0xb0
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	58d0      	ldr	r0, [r2, r3]
 800c5a0:	193b      	adds	r3, r7, r4
 800c5a2:	881d      	ldrh	r5, [r3, #0]
 800c5a4:	000e      	movs	r6, r1
 800c5a6:	187c      	adds	r4, r7, r1
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	230b      	movs	r3, #11
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	7819      	ldrb	r1, [r3, #0]
 800c5b0:	002b      	movs	r3, r5
 800c5b2:	f7f7 fbce 	bl	8003d52 <HAL_PCD_EP_Transmit>
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ba:	2516      	movs	r5, #22
 800c5bc:	197c      	adds	r4, r7, r5
 800c5be:	19bb      	adds	r3, r7, r6
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f000 f871 	bl	800c6aa <USBD_Get_USB_Status>
 800c5c8:	0003      	movs	r3, r0
 800c5ca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c5cc:	197b      	adds	r3, r7, r5
 800c5ce:	781b      	ldrb	r3, [r3, #0]
}
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	b007      	add	sp, #28
 800c5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5da:	b087      	sub	sp, #28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	0008      	movs	r0, r1
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	0019      	movs	r1, r3
 800c5e6:	230b      	movs	r3, #11
 800c5e8:	18fb      	adds	r3, r7, r3
 800c5ea:	1c02      	adds	r2, r0, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	2408      	movs	r4, #8
 800c5f0:	193b      	adds	r3, r7, r4
 800c5f2:	1c0a      	adds	r2, r1, #0
 800c5f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5f6:	2117      	movs	r1, #23
 800c5f8:	187b      	adds	r3, r7, r1
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5fe:	2516      	movs	r5, #22
 800c600:	197b      	adds	r3, r7, r5
 800c602:	2200      	movs	r2, #0
 800c604:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	23b0      	movs	r3, #176	; 0xb0
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	58d0      	ldr	r0, [r2, r3]
 800c60e:	193b      	adds	r3, r7, r4
 800c610:	881d      	ldrh	r5, [r3, #0]
 800c612:	000e      	movs	r6, r1
 800c614:	187c      	adds	r4, r7, r1
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	230b      	movs	r3, #11
 800c61a:	18fb      	adds	r3, r7, r3
 800c61c:	7819      	ldrb	r1, [r3, #0]
 800c61e:	002b      	movs	r3, r5
 800c620:	f7f7 fb3a 	bl	8003c98 <HAL_PCD_EP_Receive>
 800c624:	0003      	movs	r3, r0
 800c626:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c628:	2516      	movs	r5, #22
 800c62a:	197c      	adds	r4, r7, r5
 800c62c:	19bb      	adds	r3, r7, r6
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	0018      	movs	r0, r3
 800c632:	f000 f83a 	bl	800c6aa <USBD_Get_USB_Status>
 800c636:	0003      	movs	r3, r0
 800c638:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c63a:	197b      	adds	r3, r7, r5
 800c63c:	781b      	ldrb	r3, [r3, #0]
}
 800c63e:	0018      	movs	r0, r3
 800c640:	46bd      	mov	sp, r7
 800c642:	b007      	add	sp, #28
 800c644:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c646 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b082      	sub	sp, #8
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	000a      	movs	r2, r1
 800c650:	1cfb      	adds	r3, r7, #3
 800c652:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	23b0      	movs	r3, #176	; 0xb0
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	58d2      	ldr	r2, [r2, r3]
 800c65c:	1cfb      	adds	r3, r7, #3
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	0019      	movs	r1, r3
 800c662:	0010      	movs	r0, r2
 800c664:	f7f7 fb5c 	bl	8003d20 <HAL_PCD_EP_GetRxCount>
 800c668:	0003      	movs	r3, r0
}
 800c66a:	0018      	movs	r0, r3
 800c66c:	46bd      	mov	sp, r7
 800c66e:	b002      	add	sp, #8
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c67c:	4b02      	ldr	r3, [pc, #8]	; (800c688 <USBD_static_malloc+0x14>)
}
 800c67e:	0018      	movs	r0, r3
 800c680:	46bd      	mov	sp, r7
 800c682:	b002      	add	sp, #8
 800c684:	bd80      	pop	{r7, pc}
 800c686:	46c0      	nop			; (mov r8, r8)
 800c688:	20000260 	.word	0x20000260

0800c68c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]

}
 800c694:	46c0      	nop			; (mov r8, r8)
 800c696:	46bd      	mov	sp, r7
 800c698:	b002      	add	sp, #8
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c6a0:	f7f3 ff72 	bl	8000588 <SystemClock_Config>
}
 800c6a4:	46c0      	nop			; (mov r8, r8)
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	0002      	movs	r2, r0
 800c6b2:	1dfb      	adds	r3, r7, #7
 800c6b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b6:	230f      	movs	r3, #15
 800c6b8:	18fb      	adds	r3, r7, r3
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c6be:	1dfb      	adds	r3, r7, #7
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d017      	beq.n	800c6f6 <USBD_Get_USB_Status+0x4c>
 800c6c6:	dc1b      	bgt.n	800c700 <USBD_Get_USB_Status+0x56>
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d00f      	beq.n	800c6ec <USBD_Get_USB_Status+0x42>
 800c6cc:	dc18      	bgt.n	800c700 <USBD_Get_USB_Status+0x56>
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <USBD_Get_USB_Status+0x2e>
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d005      	beq.n	800c6e2 <USBD_Get_USB_Status+0x38>
 800c6d6:	e013      	b.n	800c700 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6d8:	230f      	movs	r3, #15
 800c6da:	18fb      	adds	r3, r7, r3
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
    break;
 800c6e0:	e013      	b.n	800c70a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6e2:	230f      	movs	r3, #15
 800c6e4:	18fb      	adds	r3, r7, r3
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	701a      	strb	r2, [r3, #0]
    break;
 800c6ea:	e00e      	b.n	800c70a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6ec:	230f      	movs	r3, #15
 800c6ee:	18fb      	adds	r3, r7, r3
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	701a      	strb	r2, [r3, #0]
    break;
 800c6f4:	e009      	b.n	800c70a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6f6:	230f      	movs	r3, #15
 800c6f8:	18fb      	adds	r3, r7, r3
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	701a      	strb	r2, [r3, #0]
    break;
 800c6fe:	e004      	b.n	800c70a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c700:	230f      	movs	r3, #15
 800c702:	18fb      	adds	r3, r7, r3
 800c704:	2202      	movs	r2, #2
 800c706:	701a      	strb	r2, [r3, #0]
    break;
 800c708:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c70a:	230f      	movs	r3, #15
 800c70c:	18fb      	adds	r3, r7, r3
 800c70e:	781b      	ldrb	r3, [r3, #0]
}
 800c710:	0018      	movs	r0, r3
 800c712:	46bd      	mov	sp, r7
 800c714:	b004      	add	sp, #16
 800c716:	bd80      	pop	{r7, pc}

0800c718 <__errno>:
 800c718:	4b01      	ldr	r3, [pc, #4]	; (800c720 <__errno+0x8>)
 800c71a:	6818      	ldr	r0, [r3, #0]
 800c71c:	4770      	bx	lr
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	2000017c 	.word	0x2000017c

0800c724 <__libc_init_array>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	2600      	movs	r6, #0
 800c728:	4d0c      	ldr	r5, [pc, #48]	; (800c75c <__libc_init_array+0x38>)
 800c72a:	4c0d      	ldr	r4, [pc, #52]	; (800c760 <__libc_init_array+0x3c>)
 800c72c:	1b64      	subs	r4, r4, r5
 800c72e:	10a4      	asrs	r4, r4, #2
 800c730:	42a6      	cmp	r6, r4
 800c732:	d109      	bne.n	800c748 <__libc_init_array+0x24>
 800c734:	2600      	movs	r6, #0
 800c736:	f000 fc5b 	bl	800cff0 <_init>
 800c73a:	4d0a      	ldr	r5, [pc, #40]	; (800c764 <__libc_init_array+0x40>)
 800c73c:	4c0a      	ldr	r4, [pc, #40]	; (800c768 <__libc_init_array+0x44>)
 800c73e:	1b64      	subs	r4, r4, r5
 800c740:	10a4      	asrs	r4, r4, #2
 800c742:	42a6      	cmp	r6, r4
 800c744:	d105      	bne.n	800c752 <__libc_init_array+0x2e>
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	00b3      	lsls	r3, r6, #2
 800c74a:	58eb      	ldr	r3, [r5, r3]
 800c74c:	4798      	blx	r3
 800c74e:	3601      	adds	r6, #1
 800c750:	e7ee      	b.n	800c730 <__libc_init_array+0xc>
 800c752:	00b3      	lsls	r3, r6, #2
 800c754:	58eb      	ldr	r3, [r5, r3]
 800c756:	4798      	blx	r3
 800c758:	3601      	adds	r6, #1
 800c75a:	e7f2      	b.n	800c742 <__libc_init_array+0x1e>
 800c75c:	0800d278 	.word	0x0800d278
 800c760:	0800d278 	.word	0x0800d278
 800c764:	0800d278 	.word	0x0800d278
 800c768:	0800d27c 	.word	0x0800d27c

0800c76c <malloc>:
 800c76c:	b510      	push	{r4, lr}
 800c76e:	4b03      	ldr	r3, [pc, #12]	; (800c77c <malloc+0x10>)
 800c770:	0001      	movs	r1, r0
 800c772:	6818      	ldr	r0, [r3, #0]
 800c774:	f000 f860 	bl	800c838 <_malloc_r>
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	46c0      	nop			; (mov r8, r8)
 800c77c:	2000017c 	.word	0x2000017c

0800c780 <free>:
 800c780:	b510      	push	{r4, lr}
 800c782:	4b03      	ldr	r3, [pc, #12]	; (800c790 <free+0x10>)
 800c784:	0001      	movs	r1, r0
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	f000 f80c 	bl	800c7a4 <_free_r>
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	46c0      	nop			; (mov r8, r8)
 800c790:	2000017c 	.word	0x2000017c

0800c794 <memset>:
 800c794:	0003      	movs	r3, r0
 800c796:	1882      	adds	r2, r0, r2
 800c798:	4293      	cmp	r3, r2
 800c79a:	d100      	bne.n	800c79e <memset+0xa>
 800c79c:	4770      	bx	lr
 800c79e:	7019      	strb	r1, [r3, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	e7f9      	b.n	800c798 <memset+0x4>

0800c7a4 <_free_r>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	0005      	movs	r5, r0
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	d010      	beq.n	800c7ce <_free_r+0x2a>
 800c7ac:	1f0c      	subs	r4, r1, #4
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	da00      	bge.n	800c7b6 <_free_r+0x12>
 800c7b4:	18e4      	adds	r4, r4, r3
 800c7b6:	0028      	movs	r0, r5
 800c7b8:	f000 f8ce 	bl	800c958 <__malloc_lock>
 800c7bc:	4a1d      	ldr	r2, [pc, #116]	; (800c834 <_free_r+0x90>)
 800c7be:	6813      	ldr	r3, [r2, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d105      	bne.n	800c7d0 <_free_r+0x2c>
 800c7c4:	6063      	str	r3, [r4, #4]
 800c7c6:	6014      	str	r4, [r2, #0]
 800c7c8:	0028      	movs	r0, r5
 800c7ca:	f000 f8cd 	bl	800c968 <__malloc_unlock>
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d908      	bls.n	800c7e6 <_free_r+0x42>
 800c7d4:	6821      	ldr	r1, [r4, #0]
 800c7d6:	1860      	adds	r0, r4, r1
 800c7d8:	4283      	cmp	r3, r0
 800c7da:	d1f3      	bne.n	800c7c4 <_free_r+0x20>
 800c7dc:	6818      	ldr	r0, [r3, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	1841      	adds	r1, r0, r1
 800c7e2:	6021      	str	r1, [r4, #0]
 800c7e4:	e7ee      	b.n	800c7c4 <_free_r+0x20>
 800c7e6:	001a      	movs	r2, r3
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <_free_r+0x4e>
 800c7ee:	42a3      	cmp	r3, r4
 800c7f0:	d9f9      	bls.n	800c7e6 <_free_r+0x42>
 800c7f2:	6811      	ldr	r1, [r2, #0]
 800c7f4:	1850      	adds	r0, r2, r1
 800c7f6:	42a0      	cmp	r0, r4
 800c7f8:	d10b      	bne.n	800c812 <_free_r+0x6e>
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	1809      	adds	r1, r1, r0
 800c7fe:	1850      	adds	r0, r2, r1
 800c800:	6011      	str	r1, [r2, #0]
 800c802:	4283      	cmp	r3, r0
 800c804:	d1e0      	bne.n	800c7c8 <_free_r+0x24>
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	1841      	adds	r1, r0, r1
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	6053      	str	r3, [r2, #4]
 800c810:	e7da      	b.n	800c7c8 <_free_r+0x24>
 800c812:	42a0      	cmp	r0, r4
 800c814:	d902      	bls.n	800c81c <_free_r+0x78>
 800c816:	230c      	movs	r3, #12
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	e7d5      	b.n	800c7c8 <_free_r+0x24>
 800c81c:	6821      	ldr	r1, [r4, #0]
 800c81e:	1860      	adds	r0, r4, r1
 800c820:	4283      	cmp	r3, r0
 800c822:	d103      	bne.n	800c82c <_free_r+0x88>
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	1841      	adds	r1, r0, r1
 800c82a:	6021      	str	r1, [r4, #0]
 800c82c:	6063      	str	r3, [r4, #4]
 800c82e:	6054      	str	r4, [r2, #4]
 800c830:	e7ca      	b.n	800c7c8 <_free_r+0x24>
 800c832:	46c0      	nop			; (mov r8, r8)
 800c834:	20000480 	.word	0x20000480

0800c838 <_malloc_r>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	2303      	movs	r3, #3
 800c83c:	1ccd      	adds	r5, r1, #3
 800c83e:	439d      	bics	r5, r3
 800c840:	3508      	adds	r5, #8
 800c842:	0006      	movs	r6, r0
 800c844:	2d0c      	cmp	r5, #12
 800c846:	d21f      	bcs.n	800c888 <_malloc_r+0x50>
 800c848:	250c      	movs	r5, #12
 800c84a:	42a9      	cmp	r1, r5
 800c84c:	d81e      	bhi.n	800c88c <_malloc_r+0x54>
 800c84e:	0030      	movs	r0, r6
 800c850:	f000 f882 	bl	800c958 <__malloc_lock>
 800c854:	4925      	ldr	r1, [pc, #148]	; (800c8ec <_malloc_r+0xb4>)
 800c856:	680a      	ldr	r2, [r1, #0]
 800c858:	0014      	movs	r4, r2
 800c85a:	2c00      	cmp	r4, #0
 800c85c:	d11a      	bne.n	800c894 <_malloc_r+0x5c>
 800c85e:	4f24      	ldr	r7, [pc, #144]	; (800c8f0 <_malloc_r+0xb8>)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d104      	bne.n	800c870 <_malloc_r+0x38>
 800c866:	0021      	movs	r1, r4
 800c868:	0030      	movs	r0, r6
 800c86a:	f000 f843 	bl	800c8f4 <_sbrk_r>
 800c86e:	6038      	str	r0, [r7, #0]
 800c870:	0029      	movs	r1, r5
 800c872:	0030      	movs	r0, r6
 800c874:	f000 f83e 	bl	800c8f4 <_sbrk_r>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d12b      	bne.n	800c8d4 <_malloc_r+0x9c>
 800c87c:	230c      	movs	r3, #12
 800c87e:	0030      	movs	r0, r6
 800c880:	6033      	str	r3, [r6, #0]
 800c882:	f000 f871 	bl	800c968 <__malloc_unlock>
 800c886:	e003      	b.n	800c890 <_malloc_r+0x58>
 800c888:	2d00      	cmp	r5, #0
 800c88a:	dade      	bge.n	800c84a <_malloc_r+0x12>
 800c88c:	230c      	movs	r3, #12
 800c88e:	6033      	str	r3, [r6, #0]
 800c890:	2000      	movs	r0, #0
 800c892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	1b5b      	subs	r3, r3, r5
 800c898:	d419      	bmi.n	800c8ce <_malloc_r+0x96>
 800c89a:	2b0b      	cmp	r3, #11
 800c89c:	d903      	bls.n	800c8a6 <_malloc_r+0x6e>
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	18e4      	adds	r4, r4, r3
 800c8a2:	6025      	str	r5, [r4, #0]
 800c8a4:	e003      	b.n	800c8ae <_malloc_r+0x76>
 800c8a6:	6863      	ldr	r3, [r4, #4]
 800c8a8:	42a2      	cmp	r2, r4
 800c8aa:	d10e      	bne.n	800c8ca <_malloc_r+0x92>
 800c8ac:	600b      	str	r3, [r1, #0]
 800c8ae:	0030      	movs	r0, r6
 800c8b0:	f000 f85a 	bl	800c968 <__malloc_unlock>
 800c8b4:	0020      	movs	r0, r4
 800c8b6:	2207      	movs	r2, #7
 800c8b8:	300b      	adds	r0, #11
 800c8ba:	1d23      	adds	r3, r4, #4
 800c8bc:	4390      	bics	r0, r2
 800c8be:	1ac2      	subs	r2, r0, r3
 800c8c0:	4298      	cmp	r0, r3
 800c8c2:	d0e6      	beq.n	800c892 <_malloc_r+0x5a>
 800c8c4:	1a1b      	subs	r3, r3, r0
 800c8c6:	50a3      	str	r3, [r4, r2]
 800c8c8:	e7e3      	b.n	800c892 <_malloc_r+0x5a>
 800c8ca:	6053      	str	r3, [r2, #4]
 800c8cc:	e7ef      	b.n	800c8ae <_malloc_r+0x76>
 800c8ce:	0022      	movs	r2, r4
 800c8d0:	6864      	ldr	r4, [r4, #4]
 800c8d2:	e7c2      	b.n	800c85a <_malloc_r+0x22>
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	1cc4      	adds	r4, r0, #3
 800c8d8:	439c      	bics	r4, r3
 800c8da:	42a0      	cmp	r0, r4
 800c8dc:	d0e1      	beq.n	800c8a2 <_malloc_r+0x6a>
 800c8de:	1a21      	subs	r1, r4, r0
 800c8e0:	0030      	movs	r0, r6
 800c8e2:	f000 f807 	bl	800c8f4 <_sbrk_r>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	d1db      	bne.n	800c8a2 <_malloc_r+0x6a>
 800c8ea:	e7c7      	b.n	800c87c <_malloc_r+0x44>
 800c8ec:	20000480 	.word	0x20000480
 800c8f0:	20000484 	.word	0x20000484

0800c8f4 <_sbrk_r>:
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	b570      	push	{r4, r5, r6, lr}
 800c8f8:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_sbrk_r+0x20>)
 800c8fa:	0004      	movs	r4, r0
 800c8fc:	0008      	movs	r0, r1
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	f7f5 f9f0 	bl	8001ce4 <_sbrk>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d103      	bne.n	800c910 <_sbrk_r+0x1c>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d000      	beq.n	800c910 <_sbrk_r+0x1c>
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	bd70      	pop	{r4, r5, r6, pc}
 800c912:	46c0      	nop			; (mov r8, r8)
 800c914:	2000165c 	.word	0x2000165c

0800c918 <siprintf>:
 800c918:	b40e      	push	{r1, r2, r3}
 800c91a:	b500      	push	{lr}
 800c91c:	490b      	ldr	r1, [pc, #44]	; (800c94c <siprintf+0x34>)
 800c91e:	b09c      	sub	sp, #112	; 0x70
 800c920:	ab1d      	add	r3, sp, #116	; 0x74
 800c922:	9002      	str	r0, [sp, #8]
 800c924:	9006      	str	r0, [sp, #24]
 800c926:	9107      	str	r1, [sp, #28]
 800c928:	9104      	str	r1, [sp, #16]
 800c92a:	4809      	ldr	r0, [pc, #36]	; (800c950 <siprintf+0x38>)
 800c92c:	4909      	ldr	r1, [pc, #36]	; (800c954 <siprintf+0x3c>)
 800c92e:	cb04      	ldmia	r3!, {r2}
 800c930:	9105      	str	r1, [sp, #20]
 800c932:	6800      	ldr	r0, [r0, #0]
 800c934:	a902      	add	r1, sp, #8
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	f000 f880 	bl	800ca3c <_svfiprintf_r>
 800c93c:	2300      	movs	r3, #0
 800c93e:	9a02      	ldr	r2, [sp, #8]
 800c940:	7013      	strb	r3, [r2, #0]
 800c942:	b01c      	add	sp, #112	; 0x70
 800c944:	bc08      	pop	{r3}
 800c946:	b003      	add	sp, #12
 800c948:	4718      	bx	r3
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	7fffffff 	.word	0x7fffffff
 800c950:	2000017c 	.word	0x2000017c
 800c954:	ffff0208 	.word	0xffff0208

0800c958 <__malloc_lock>:
 800c958:	b510      	push	{r4, lr}
 800c95a:	4802      	ldr	r0, [pc, #8]	; (800c964 <__malloc_lock+0xc>)
 800c95c:	f000 faf0 	bl	800cf40 <__retarget_lock_acquire_recursive>
 800c960:	bd10      	pop	{r4, pc}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	20001664 	.word	0x20001664

0800c968 <__malloc_unlock>:
 800c968:	b510      	push	{r4, lr}
 800c96a:	4802      	ldr	r0, [pc, #8]	; (800c974 <__malloc_unlock+0xc>)
 800c96c:	f000 fae9 	bl	800cf42 <__retarget_lock_release_recursive>
 800c970:	bd10      	pop	{r4, pc}
 800c972:	46c0      	nop			; (mov r8, r8)
 800c974:	20001664 	.word	0x20001664

0800c978 <__ssputs_r>:
 800c978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c97a:	688e      	ldr	r6, [r1, #8]
 800c97c:	b085      	sub	sp, #20
 800c97e:	0007      	movs	r7, r0
 800c980:	000c      	movs	r4, r1
 800c982:	9203      	str	r2, [sp, #12]
 800c984:	9301      	str	r3, [sp, #4]
 800c986:	429e      	cmp	r6, r3
 800c988:	d83c      	bhi.n	800ca04 <__ssputs_r+0x8c>
 800c98a:	2390      	movs	r3, #144	; 0x90
 800c98c:	898a      	ldrh	r2, [r1, #12]
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	421a      	tst	r2, r3
 800c992:	d034      	beq.n	800c9fe <__ssputs_r+0x86>
 800c994:	2503      	movs	r5, #3
 800c996:	6909      	ldr	r1, [r1, #16]
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	1a5b      	subs	r3, r3, r1
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	6963      	ldr	r3, [r4, #20]
 800c9a0:	9802      	ldr	r0, [sp, #8]
 800c9a2:	435d      	muls	r5, r3
 800c9a4:	0feb      	lsrs	r3, r5, #31
 800c9a6:	195d      	adds	r5, r3, r5
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	106d      	asrs	r5, r5, #1
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	181b      	adds	r3, r3, r0
 800c9b0:	42ab      	cmp	r3, r5
 800c9b2:	d900      	bls.n	800c9b6 <__ssputs_r+0x3e>
 800c9b4:	001d      	movs	r5, r3
 800c9b6:	0553      	lsls	r3, r2, #21
 800c9b8:	d532      	bpl.n	800ca20 <__ssputs_r+0xa8>
 800c9ba:	0029      	movs	r1, r5
 800c9bc:	0038      	movs	r0, r7
 800c9be:	f7ff ff3b 	bl	800c838 <_malloc_r>
 800c9c2:	1e06      	subs	r6, r0, #0
 800c9c4:	d109      	bne.n	800c9da <__ssputs_r+0x62>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	603b      	str	r3, [r7, #0]
 800c9ca:	2340      	movs	r3, #64	; 0x40
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	89a2      	ldrh	r2, [r4, #12]
 800c9d0:	4240      	negs	r0, r0
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	b005      	add	sp, #20
 800c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9da:	9a02      	ldr	r2, [sp, #8]
 800c9dc:	6921      	ldr	r1, [r4, #16]
 800c9de:	f000 fabc 	bl	800cf5a <memcpy>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	4a14      	ldr	r2, [pc, #80]	; (800ca38 <__ssputs_r+0xc0>)
 800c9e6:	401a      	ands	r2, r3
 800c9e8:	2380      	movs	r3, #128	; 0x80
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	9b02      	ldr	r3, [sp, #8]
 800c9f0:	6126      	str	r6, [r4, #16]
 800c9f2:	18f6      	adds	r6, r6, r3
 800c9f4:	6026      	str	r6, [r4, #0]
 800c9f6:	6165      	str	r5, [r4, #20]
 800c9f8:	9e01      	ldr	r6, [sp, #4]
 800c9fa:	1aed      	subs	r5, r5, r3
 800c9fc:	60a5      	str	r5, [r4, #8]
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	429e      	cmp	r6, r3
 800ca02:	d900      	bls.n	800ca06 <__ssputs_r+0x8e>
 800ca04:	9e01      	ldr	r6, [sp, #4]
 800ca06:	0032      	movs	r2, r6
 800ca08:	9903      	ldr	r1, [sp, #12]
 800ca0a:	6820      	ldr	r0, [r4, #0]
 800ca0c:	f000 faae 	bl	800cf6c <memmove>
 800ca10:	68a3      	ldr	r3, [r4, #8]
 800ca12:	2000      	movs	r0, #0
 800ca14:	1b9b      	subs	r3, r3, r6
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	199e      	adds	r6, r3, r6
 800ca1c:	6026      	str	r6, [r4, #0]
 800ca1e:	e7da      	b.n	800c9d6 <__ssputs_r+0x5e>
 800ca20:	002a      	movs	r2, r5
 800ca22:	0038      	movs	r0, r7
 800ca24:	f000 fab5 	bl	800cf92 <_realloc_r>
 800ca28:	1e06      	subs	r6, r0, #0
 800ca2a:	d1e0      	bne.n	800c9ee <__ssputs_r+0x76>
 800ca2c:	0038      	movs	r0, r7
 800ca2e:	6921      	ldr	r1, [r4, #16]
 800ca30:	f7ff feb8 	bl	800c7a4 <_free_r>
 800ca34:	e7c7      	b.n	800c9c6 <__ssputs_r+0x4e>
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	fffffb7f 	.word	0xfffffb7f

0800ca3c <_svfiprintf_r>:
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	b0a1      	sub	sp, #132	; 0x84
 800ca40:	9003      	str	r0, [sp, #12]
 800ca42:	001d      	movs	r5, r3
 800ca44:	898b      	ldrh	r3, [r1, #12]
 800ca46:	000f      	movs	r7, r1
 800ca48:	0016      	movs	r6, r2
 800ca4a:	061b      	lsls	r3, r3, #24
 800ca4c:	d511      	bpl.n	800ca72 <_svfiprintf_r+0x36>
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10e      	bne.n	800ca72 <_svfiprintf_r+0x36>
 800ca54:	2140      	movs	r1, #64	; 0x40
 800ca56:	f7ff feef 	bl	800c838 <_malloc_r>
 800ca5a:	6038      	str	r0, [r7, #0]
 800ca5c:	6138      	str	r0, [r7, #16]
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d105      	bne.n	800ca6e <_svfiprintf_r+0x32>
 800ca62:	230c      	movs	r3, #12
 800ca64:	9a03      	ldr	r2, [sp, #12]
 800ca66:	3801      	subs	r0, #1
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	b021      	add	sp, #132	; 0x84
 800ca6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca6e:	2340      	movs	r3, #64	; 0x40
 800ca70:	617b      	str	r3, [r7, #20]
 800ca72:	2300      	movs	r3, #0
 800ca74:	ac08      	add	r4, sp, #32
 800ca76:	6163      	str	r3, [r4, #20]
 800ca78:	3320      	adds	r3, #32
 800ca7a:	7663      	strb	r3, [r4, #25]
 800ca7c:	3310      	adds	r3, #16
 800ca7e:	76a3      	strb	r3, [r4, #26]
 800ca80:	9507      	str	r5, [sp, #28]
 800ca82:	0035      	movs	r5, r6
 800ca84:	782b      	ldrb	r3, [r5, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <_svfiprintf_r+0x52>
 800ca8a:	2b25      	cmp	r3, #37	; 0x25
 800ca8c:	d147      	bne.n	800cb1e <_svfiprintf_r+0xe2>
 800ca8e:	1bab      	subs	r3, r5, r6
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	42b5      	cmp	r5, r6
 800ca94:	d00c      	beq.n	800cab0 <_svfiprintf_r+0x74>
 800ca96:	0032      	movs	r2, r6
 800ca98:	0039      	movs	r1, r7
 800ca9a:	9803      	ldr	r0, [sp, #12]
 800ca9c:	f7ff ff6c 	bl	800c978 <__ssputs_r>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d100      	bne.n	800caa6 <_svfiprintf_r+0x6a>
 800caa4:	e0ae      	b.n	800cc04 <_svfiprintf_r+0x1c8>
 800caa6:	6962      	ldr	r2, [r4, #20]
 800caa8:	9b05      	ldr	r3, [sp, #20]
 800caaa:	4694      	mov	ip, r2
 800caac:	4463      	add	r3, ip
 800caae:	6163      	str	r3, [r4, #20]
 800cab0:	782b      	ldrb	r3, [r5, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d100      	bne.n	800cab8 <_svfiprintf_r+0x7c>
 800cab6:	e0a5      	b.n	800cc04 <_svfiprintf_r+0x1c8>
 800cab8:	2201      	movs	r2, #1
 800caba:	2300      	movs	r3, #0
 800cabc:	4252      	negs	r2, r2
 800cabe:	6062      	str	r2, [r4, #4]
 800cac0:	a904      	add	r1, sp, #16
 800cac2:	3254      	adds	r2, #84	; 0x54
 800cac4:	1852      	adds	r2, r2, r1
 800cac6:	1c6e      	adds	r6, r5, #1
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	60e3      	str	r3, [r4, #12]
 800cacc:	60a3      	str	r3, [r4, #8]
 800cace:	7013      	strb	r3, [r2, #0]
 800cad0:	65a3      	str	r3, [r4, #88]	; 0x58
 800cad2:	2205      	movs	r2, #5
 800cad4:	7831      	ldrb	r1, [r6, #0]
 800cad6:	4854      	ldr	r0, [pc, #336]	; (800cc28 <_svfiprintf_r+0x1ec>)
 800cad8:	f000 fa34 	bl	800cf44 <memchr>
 800cadc:	1c75      	adds	r5, r6, #1
 800cade:	2800      	cmp	r0, #0
 800cae0:	d11f      	bne.n	800cb22 <_svfiprintf_r+0xe6>
 800cae2:	6822      	ldr	r2, [r4, #0]
 800cae4:	06d3      	lsls	r3, r2, #27
 800cae6:	d504      	bpl.n	800caf2 <_svfiprintf_r+0xb6>
 800cae8:	2353      	movs	r3, #83	; 0x53
 800caea:	a904      	add	r1, sp, #16
 800caec:	185b      	adds	r3, r3, r1
 800caee:	2120      	movs	r1, #32
 800caf0:	7019      	strb	r1, [r3, #0]
 800caf2:	0713      	lsls	r3, r2, #28
 800caf4:	d504      	bpl.n	800cb00 <_svfiprintf_r+0xc4>
 800caf6:	2353      	movs	r3, #83	; 0x53
 800caf8:	a904      	add	r1, sp, #16
 800cafa:	185b      	adds	r3, r3, r1
 800cafc:	212b      	movs	r1, #43	; 0x2b
 800cafe:	7019      	strb	r1, [r3, #0]
 800cb00:	7833      	ldrb	r3, [r6, #0]
 800cb02:	2b2a      	cmp	r3, #42	; 0x2a
 800cb04:	d016      	beq.n	800cb34 <_svfiprintf_r+0xf8>
 800cb06:	0035      	movs	r5, r6
 800cb08:	2100      	movs	r1, #0
 800cb0a:	200a      	movs	r0, #10
 800cb0c:	68e3      	ldr	r3, [r4, #12]
 800cb0e:	782a      	ldrb	r2, [r5, #0]
 800cb10:	1c6e      	adds	r6, r5, #1
 800cb12:	3a30      	subs	r2, #48	; 0x30
 800cb14:	2a09      	cmp	r2, #9
 800cb16:	d94e      	bls.n	800cbb6 <_svfiprintf_r+0x17a>
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	d111      	bne.n	800cb40 <_svfiprintf_r+0x104>
 800cb1c:	e017      	b.n	800cb4e <_svfiprintf_r+0x112>
 800cb1e:	3501      	adds	r5, #1
 800cb20:	e7b0      	b.n	800ca84 <_svfiprintf_r+0x48>
 800cb22:	4b41      	ldr	r3, [pc, #260]	; (800cc28 <_svfiprintf_r+0x1ec>)
 800cb24:	6822      	ldr	r2, [r4, #0]
 800cb26:	1ac0      	subs	r0, r0, r3
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4083      	lsls	r3, r0
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	002e      	movs	r6, r5
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	e7ce      	b.n	800cad2 <_svfiprintf_r+0x96>
 800cb34:	9b07      	ldr	r3, [sp, #28]
 800cb36:	1d19      	adds	r1, r3, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	9107      	str	r1, [sp, #28]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	db01      	blt.n	800cb44 <_svfiprintf_r+0x108>
 800cb40:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb42:	e004      	b.n	800cb4e <_svfiprintf_r+0x112>
 800cb44:	425b      	negs	r3, r3
 800cb46:	60e3      	str	r3, [r4, #12]
 800cb48:	2302      	movs	r3, #2
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	782b      	ldrb	r3, [r5, #0]
 800cb50:	2b2e      	cmp	r3, #46	; 0x2e
 800cb52:	d10a      	bne.n	800cb6a <_svfiprintf_r+0x12e>
 800cb54:	786b      	ldrb	r3, [r5, #1]
 800cb56:	2b2a      	cmp	r3, #42	; 0x2a
 800cb58:	d135      	bne.n	800cbc6 <_svfiprintf_r+0x18a>
 800cb5a:	9b07      	ldr	r3, [sp, #28]
 800cb5c:	3502      	adds	r5, #2
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	db2b      	blt.n	800cbc0 <_svfiprintf_r+0x184>
 800cb68:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6a:	4e30      	ldr	r6, [pc, #192]	; (800cc2c <_svfiprintf_r+0x1f0>)
 800cb6c:	2203      	movs	r2, #3
 800cb6e:	0030      	movs	r0, r6
 800cb70:	7829      	ldrb	r1, [r5, #0]
 800cb72:	f000 f9e7 	bl	800cf44 <memchr>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d006      	beq.n	800cb88 <_svfiprintf_r+0x14c>
 800cb7a:	2340      	movs	r3, #64	; 0x40
 800cb7c:	1b80      	subs	r0, r0, r6
 800cb7e:	4083      	lsls	r3, r0
 800cb80:	6822      	ldr	r2, [r4, #0]
 800cb82:	3501      	adds	r5, #1
 800cb84:	4313      	orrs	r3, r2
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	7829      	ldrb	r1, [r5, #0]
 800cb8a:	2206      	movs	r2, #6
 800cb8c:	4828      	ldr	r0, [pc, #160]	; (800cc30 <_svfiprintf_r+0x1f4>)
 800cb8e:	1c6e      	adds	r6, r5, #1
 800cb90:	7621      	strb	r1, [r4, #24]
 800cb92:	f000 f9d7 	bl	800cf44 <memchr>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d03c      	beq.n	800cc14 <_svfiprintf_r+0x1d8>
 800cb9a:	4b26      	ldr	r3, [pc, #152]	; (800cc34 <_svfiprintf_r+0x1f8>)
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d125      	bne.n	800cbec <_svfiprintf_r+0x1b0>
 800cba0:	2207      	movs	r2, #7
 800cba2:	9b07      	ldr	r3, [sp, #28]
 800cba4:	3307      	adds	r3, #7
 800cba6:	4393      	bics	r3, r2
 800cba8:	3308      	adds	r3, #8
 800cbaa:	9307      	str	r3, [sp, #28]
 800cbac:	6963      	ldr	r3, [r4, #20]
 800cbae:	9a04      	ldr	r2, [sp, #16]
 800cbb0:	189b      	adds	r3, r3, r2
 800cbb2:	6163      	str	r3, [r4, #20]
 800cbb4:	e765      	b.n	800ca82 <_svfiprintf_r+0x46>
 800cbb6:	4343      	muls	r3, r0
 800cbb8:	0035      	movs	r5, r6
 800cbba:	2101      	movs	r1, #1
 800cbbc:	189b      	adds	r3, r3, r2
 800cbbe:	e7a6      	b.n	800cb0e <_svfiprintf_r+0xd2>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	425b      	negs	r3, r3
 800cbc4:	e7d0      	b.n	800cb68 <_svfiprintf_r+0x12c>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	200a      	movs	r0, #10
 800cbca:	001a      	movs	r2, r3
 800cbcc:	3501      	adds	r5, #1
 800cbce:	6063      	str	r3, [r4, #4]
 800cbd0:	7829      	ldrb	r1, [r5, #0]
 800cbd2:	1c6e      	adds	r6, r5, #1
 800cbd4:	3930      	subs	r1, #48	; 0x30
 800cbd6:	2909      	cmp	r1, #9
 800cbd8:	d903      	bls.n	800cbe2 <_svfiprintf_r+0x1a6>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0c5      	beq.n	800cb6a <_svfiprintf_r+0x12e>
 800cbde:	9209      	str	r2, [sp, #36]	; 0x24
 800cbe0:	e7c3      	b.n	800cb6a <_svfiprintf_r+0x12e>
 800cbe2:	4342      	muls	r2, r0
 800cbe4:	0035      	movs	r5, r6
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	1852      	adds	r2, r2, r1
 800cbea:	e7f1      	b.n	800cbd0 <_svfiprintf_r+0x194>
 800cbec:	ab07      	add	r3, sp, #28
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	003a      	movs	r2, r7
 800cbf2:	0021      	movs	r1, r4
 800cbf4:	4b10      	ldr	r3, [pc, #64]	; (800cc38 <_svfiprintf_r+0x1fc>)
 800cbf6:	9803      	ldr	r0, [sp, #12]
 800cbf8:	e000      	b.n	800cbfc <_svfiprintf_r+0x1c0>
 800cbfa:	bf00      	nop
 800cbfc:	9004      	str	r0, [sp, #16]
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	3301      	adds	r3, #1
 800cc02:	d1d3      	bne.n	800cbac <_svfiprintf_r+0x170>
 800cc04:	89bb      	ldrh	r3, [r7, #12]
 800cc06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc08:	065b      	lsls	r3, r3, #25
 800cc0a:	d400      	bmi.n	800cc0e <_svfiprintf_r+0x1d2>
 800cc0c:	e72d      	b.n	800ca6a <_svfiprintf_r+0x2e>
 800cc0e:	2001      	movs	r0, #1
 800cc10:	4240      	negs	r0, r0
 800cc12:	e72a      	b.n	800ca6a <_svfiprintf_r+0x2e>
 800cc14:	ab07      	add	r3, sp, #28
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	003a      	movs	r2, r7
 800cc1a:	0021      	movs	r1, r4
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <_svfiprintf_r+0x1fc>)
 800cc1e:	9803      	ldr	r0, [sp, #12]
 800cc20:	f000 f87c 	bl	800cd1c <_printf_i>
 800cc24:	e7ea      	b.n	800cbfc <_svfiprintf_r+0x1c0>
 800cc26:	46c0      	nop			; (mov r8, r8)
 800cc28:	0800d244 	.word	0x0800d244
 800cc2c:	0800d24a 	.word	0x0800d24a
 800cc30:	0800d24e 	.word	0x0800d24e
 800cc34:	00000000 	.word	0x00000000
 800cc38:	0800c979 	.word	0x0800c979

0800cc3c <_printf_common>:
 800cc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc3e:	0015      	movs	r5, r2
 800cc40:	9301      	str	r3, [sp, #4]
 800cc42:	688a      	ldr	r2, [r1, #8]
 800cc44:	690b      	ldr	r3, [r1, #16]
 800cc46:	000c      	movs	r4, r1
 800cc48:	9000      	str	r0, [sp, #0]
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	da00      	bge.n	800cc50 <_printf_common+0x14>
 800cc4e:	0013      	movs	r3, r2
 800cc50:	0022      	movs	r2, r4
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	3243      	adds	r2, #67	; 0x43
 800cc56:	7812      	ldrb	r2, [r2, #0]
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	d001      	beq.n	800cc60 <_printf_common+0x24>
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	069b      	lsls	r3, r3, #26
 800cc64:	d502      	bpl.n	800cc6c <_printf_common+0x30>
 800cc66:	682b      	ldr	r3, [r5, #0]
 800cc68:	3302      	adds	r3, #2
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	6822      	ldr	r2, [r4, #0]
 800cc6e:	2306      	movs	r3, #6
 800cc70:	0017      	movs	r7, r2
 800cc72:	401f      	ands	r7, r3
 800cc74:	421a      	tst	r2, r3
 800cc76:	d027      	beq.n	800ccc8 <_printf_common+0x8c>
 800cc78:	0023      	movs	r3, r4
 800cc7a:	3343      	adds	r3, #67	; 0x43
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	1e5a      	subs	r2, r3, #1
 800cc80:	4193      	sbcs	r3, r2
 800cc82:	6822      	ldr	r2, [r4, #0]
 800cc84:	0692      	lsls	r2, r2, #26
 800cc86:	d430      	bmi.n	800ccea <_printf_common+0xae>
 800cc88:	0022      	movs	r2, r4
 800cc8a:	9901      	ldr	r1, [sp, #4]
 800cc8c:	9800      	ldr	r0, [sp, #0]
 800cc8e:	9e08      	ldr	r6, [sp, #32]
 800cc90:	3243      	adds	r2, #67	; 0x43
 800cc92:	47b0      	blx	r6
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d025      	beq.n	800cce4 <_printf_common+0xa8>
 800cc98:	2306      	movs	r3, #6
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	682a      	ldr	r2, [r5, #0]
 800cc9e:	68e1      	ldr	r1, [r4, #12]
 800cca0:	2500      	movs	r5, #0
 800cca2:	4003      	ands	r3, r0
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d103      	bne.n	800ccb0 <_printf_common+0x74>
 800cca8:	1a8d      	subs	r5, r1, r2
 800ccaa:	43eb      	mvns	r3, r5
 800ccac:	17db      	asrs	r3, r3, #31
 800ccae:	401d      	ands	r5, r3
 800ccb0:	68a3      	ldr	r3, [r4, #8]
 800ccb2:	6922      	ldr	r2, [r4, #16]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	dd01      	ble.n	800ccbc <_printf_common+0x80>
 800ccb8:	1a9b      	subs	r3, r3, r2
 800ccba:	18ed      	adds	r5, r5, r3
 800ccbc:	2700      	movs	r7, #0
 800ccbe:	42bd      	cmp	r5, r7
 800ccc0:	d120      	bne.n	800cd04 <_printf_common+0xc8>
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	e010      	b.n	800cce8 <_printf_common+0xac>
 800ccc6:	3701      	adds	r7, #1
 800ccc8:	68e3      	ldr	r3, [r4, #12]
 800ccca:	682a      	ldr	r2, [r5, #0]
 800cccc:	1a9b      	subs	r3, r3, r2
 800ccce:	42bb      	cmp	r3, r7
 800ccd0:	ddd2      	ble.n	800cc78 <_printf_common+0x3c>
 800ccd2:	0022      	movs	r2, r4
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	9901      	ldr	r1, [sp, #4]
 800ccd8:	9800      	ldr	r0, [sp, #0]
 800ccda:	9e08      	ldr	r6, [sp, #32]
 800ccdc:	3219      	adds	r2, #25
 800ccde:	47b0      	blx	r6
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d1f0      	bne.n	800ccc6 <_printf_common+0x8a>
 800cce4:	2001      	movs	r0, #1
 800cce6:	4240      	negs	r0, r0
 800cce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccea:	2030      	movs	r0, #48	; 0x30
 800ccec:	18e1      	adds	r1, r4, r3
 800ccee:	3143      	adds	r1, #67	; 0x43
 800ccf0:	7008      	strb	r0, [r1, #0]
 800ccf2:	0021      	movs	r1, r4
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	3145      	adds	r1, #69	; 0x45
 800ccf8:	7809      	ldrb	r1, [r1, #0]
 800ccfa:	18a2      	adds	r2, r4, r2
 800ccfc:	3243      	adds	r2, #67	; 0x43
 800ccfe:	3302      	adds	r3, #2
 800cd00:	7011      	strb	r1, [r2, #0]
 800cd02:	e7c1      	b.n	800cc88 <_printf_common+0x4c>
 800cd04:	0022      	movs	r2, r4
 800cd06:	2301      	movs	r3, #1
 800cd08:	9901      	ldr	r1, [sp, #4]
 800cd0a:	9800      	ldr	r0, [sp, #0]
 800cd0c:	9e08      	ldr	r6, [sp, #32]
 800cd0e:	321a      	adds	r2, #26
 800cd10:	47b0      	blx	r6
 800cd12:	1c43      	adds	r3, r0, #1
 800cd14:	d0e6      	beq.n	800cce4 <_printf_common+0xa8>
 800cd16:	3701      	adds	r7, #1
 800cd18:	e7d1      	b.n	800ccbe <_printf_common+0x82>
	...

0800cd1c <_printf_i>:
 800cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1e:	b08b      	sub	sp, #44	; 0x2c
 800cd20:	9206      	str	r2, [sp, #24]
 800cd22:	000a      	movs	r2, r1
 800cd24:	3243      	adds	r2, #67	; 0x43
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	9005      	str	r0, [sp, #20]
 800cd2a:	9204      	str	r2, [sp, #16]
 800cd2c:	7e0a      	ldrb	r2, [r1, #24]
 800cd2e:	000c      	movs	r4, r1
 800cd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd32:	2a78      	cmp	r2, #120	; 0x78
 800cd34:	d806      	bhi.n	800cd44 <_printf_i+0x28>
 800cd36:	2a62      	cmp	r2, #98	; 0x62
 800cd38:	d808      	bhi.n	800cd4c <_printf_i+0x30>
 800cd3a:	2a00      	cmp	r2, #0
 800cd3c:	d100      	bne.n	800cd40 <_printf_i+0x24>
 800cd3e:	e0c0      	b.n	800cec2 <_printf_i+0x1a6>
 800cd40:	2a58      	cmp	r2, #88	; 0x58
 800cd42:	d052      	beq.n	800cdea <_printf_i+0xce>
 800cd44:	0026      	movs	r6, r4
 800cd46:	3642      	adds	r6, #66	; 0x42
 800cd48:	7032      	strb	r2, [r6, #0]
 800cd4a:	e022      	b.n	800cd92 <_printf_i+0x76>
 800cd4c:	0010      	movs	r0, r2
 800cd4e:	3863      	subs	r0, #99	; 0x63
 800cd50:	2815      	cmp	r0, #21
 800cd52:	d8f7      	bhi.n	800cd44 <_printf_i+0x28>
 800cd54:	f7f3 f9e0 	bl	8000118 <__gnu_thumb1_case_shi>
 800cd58:	001f0016 	.word	0x001f0016
 800cd5c:	fff6fff6 	.word	0xfff6fff6
 800cd60:	fff6fff6 	.word	0xfff6fff6
 800cd64:	fff6001f 	.word	0xfff6001f
 800cd68:	fff6fff6 	.word	0xfff6fff6
 800cd6c:	00a8fff6 	.word	0x00a8fff6
 800cd70:	009a0036 	.word	0x009a0036
 800cd74:	fff6fff6 	.word	0xfff6fff6
 800cd78:	fff600b9 	.word	0xfff600b9
 800cd7c:	fff60036 	.word	0xfff60036
 800cd80:	009efff6 	.word	0x009efff6
 800cd84:	0026      	movs	r6, r4
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	3642      	adds	r6, #66	; 0x42
 800cd8a:	1d11      	adds	r1, r2, #4
 800cd8c:	6019      	str	r1, [r3, #0]
 800cd8e:	6813      	ldr	r3, [r2, #0]
 800cd90:	7033      	strb	r3, [r6, #0]
 800cd92:	2301      	movs	r3, #1
 800cd94:	e0a7      	b.n	800cee6 <_printf_i+0x1ca>
 800cd96:	6808      	ldr	r0, [r1, #0]
 800cd98:	6819      	ldr	r1, [r3, #0]
 800cd9a:	1d0a      	adds	r2, r1, #4
 800cd9c:	0605      	lsls	r5, r0, #24
 800cd9e:	d50b      	bpl.n	800cdb8 <_printf_i+0x9c>
 800cda0:	680d      	ldr	r5, [r1, #0]
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	2d00      	cmp	r5, #0
 800cda6:	da03      	bge.n	800cdb0 <_printf_i+0x94>
 800cda8:	232d      	movs	r3, #45	; 0x2d
 800cdaa:	9a04      	ldr	r2, [sp, #16]
 800cdac:	426d      	negs	r5, r5
 800cdae:	7013      	strb	r3, [r2, #0]
 800cdb0:	4b61      	ldr	r3, [pc, #388]	; (800cf38 <_printf_i+0x21c>)
 800cdb2:	270a      	movs	r7, #10
 800cdb4:	9303      	str	r3, [sp, #12]
 800cdb6:	e032      	b.n	800ce1e <_printf_i+0x102>
 800cdb8:	680d      	ldr	r5, [r1, #0]
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	0641      	lsls	r1, r0, #25
 800cdbe:	d5f1      	bpl.n	800cda4 <_printf_i+0x88>
 800cdc0:	b22d      	sxth	r5, r5
 800cdc2:	e7ef      	b.n	800cda4 <_printf_i+0x88>
 800cdc4:	680d      	ldr	r5, [r1, #0]
 800cdc6:	6819      	ldr	r1, [r3, #0]
 800cdc8:	1d08      	adds	r0, r1, #4
 800cdca:	6018      	str	r0, [r3, #0]
 800cdcc:	062e      	lsls	r6, r5, #24
 800cdce:	d501      	bpl.n	800cdd4 <_printf_i+0xb8>
 800cdd0:	680d      	ldr	r5, [r1, #0]
 800cdd2:	e003      	b.n	800cddc <_printf_i+0xc0>
 800cdd4:	066d      	lsls	r5, r5, #25
 800cdd6:	d5fb      	bpl.n	800cdd0 <_printf_i+0xb4>
 800cdd8:	680d      	ldr	r5, [r1, #0]
 800cdda:	b2ad      	uxth	r5, r5
 800cddc:	4b56      	ldr	r3, [pc, #344]	; (800cf38 <_printf_i+0x21c>)
 800cdde:	270a      	movs	r7, #10
 800cde0:	9303      	str	r3, [sp, #12]
 800cde2:	2a6f      	cmp	r2, #111	; 0x6f
 800cde4:	d117      	bne.n	800ce16 <_printf_i+0xfa>
 800cde6:	2708      	movs	r7, #8
 800cde8:	e015      	b.n	800ce16 <_printf_i+0xfa>
 800cdea:	3145      	adds	r1, #69	; 0x45
 800cdec:	700a      	strb	r2, [r1, #0]
 800cdee:	4a52      	ldr	r2, [pc, #328]	; (800cf38 <_printf_i+0x21c>)
 800cdf0:	9203      	str	r2, [sp, #12]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	6821      	ldr	r1, [r4, #0]
 800cdf6:	ca20      	ldmia	r2!, {r5}
 800cdf8:	601a      	str	r2, [r3, #0]
 800cdfa:	0608      	lsls	r0, r1, #24
 800cdfc:	d550      	bpl.n	800cea0 <_printf_i+0x184>
 800cdfe:	07cb      	lsls	r3, r1, #31
 800ce00:	d502      	bpl.n	800ce08 <_printf_i+0xec>
 800ce02:	2320      	movs	r3, #32
 800ce04:	4319      	orrs	r1, r3
 800ce06:	6021      	str	r1, [r4, #0]
 800ce08:	2710      	movs	r7, #16
 800ce0a:	2d00      	cmp	r5, #0
 800ce0c:	d103      	bne.n	800ce16 <_printf_i+0xfa>
 800ce0e:	2320      	movs	r3, #32
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	439a      	bics	r2, r3
 800ce14:	6022      	str	r2, [r4, #0]
 800ce16:	0023      	movs	r3, r4
 800ce18:	2200      	movs	r2, #0
 800ce1a:	3343      	adds	r3, #67	; 0x43
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	6863      	ldr	r3, [r4, #4]
 800ce20:	60a3      	str	r3, [r4, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	db03      	blt.n	800ce2e <_printf_i+0x112>
 800ce26:	2204      	movs	r2, #4
 800ce28:	6821      	ldr	r1, [r4, #0]
 800ce2a:	4391      	bics	r1, r2
 800ce2c:	6021      	str	r1, [r4, #0]
 800ce2e:	2d00      	cmp	r5, #0
 800ce30:	d102      	bne.n	800ce38 <_printf_i+0x11c>
 800ce32:	9e04      	ldr	r6, [sp, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00c      	beq.n	800ce52 <_printf_i+0x136>
 800ce38:	9e04      	ldr	r6, [sp, #16]
 800ce3a:	0028      	movs	r0, r5
 800ce3c:	0039      	movs	r1, r7
 800ce3e:	f7f3 f9fb 	bl	8000238 <__aeabi_uidivmod>
 800ce42:	9b03      	ldr	r3, [sp, #12]
 800ce44:	3e01      	subs	r6, #1
 800ce46:	5c5b      	ldrb	r3, [r3, r1]
 800ce48:	7033      	strb	r3, [r6, #0]
 800ce4a:	002b      	movs	r3, r5
 800ce4c:	0005      	movs	r5, r0
 800ce4e:	429f      	cmp	r7, r3
 800ce50:	d9f3      	bls.n	800ce3a <_printf_i+0x11e>
 800ce52:	2f08      	cmp	r7, #8
 800ce54:	d109      	bne.n	800ce6a <_printf_i+0x14e>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	07db      	lsls	r3, r3, #31
 800ce5a:	d506      	bpl.n	800ce6a <_printf_i+0x14e>
 800ce5c:	6863      	ldr	r3, [r4, #4]
 800ce5e:	6922      	ldr	r2, [r4, #16]
 800ce60:	4293      	cmp	r3, r2
 800ce62:	dc02      	bgt.n	800ce6a <_printf_i+0x14e>
 800ce64:	2330      	movs	r3, #48	; 0x30
 800ce66:	3e01      	subs	r6, #1
 800ce68:	7033      	strb	r3, [r6, #0]
 800ce6a:	9b04      	ldr	r3, [sp, #16]
 800ce6c:	1b9b      	subs	r3, r3, r6
 800ce6e:	6123      	str	r3, [r4, #16]
 800ce70:	9b07      	ldr	r3, [sp, #28]
 800ce72:	0021      	movs	r1, r4
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	9805      	ldr	r0, [sp, #20]
 800ce78:	9b06      	ldr	r3, [sp, #24]
 800ce7a:	aa09      	add	r2, sp, #36	; 0x24
 800ce7c:	f7ff fede 	bl	800cc3c <_printf_common>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	d135      	bne.n	800cef0 <_printf_i+0x1d4>
 800ce84:	2001      	movs	r0, #1
 800ce86:	4240      	negs	r0, r0
 800ce88:	b00b      	add	sp, #44	; 0x2c
 800ce8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	6809      	ldr	r1, [r1, #0]
 800ce90:	430a      	orrs	r2, r1
 800ce92:	6022      	str	r2, [r4, #0]
 800ce94:	0022      	movs	r2, r4
 800ce96:	2178      	movs	r1, #120	; 0x78
 800ce98:	3245      	adds	r2, #69	; 0x45
 800ce9a:	7011      	strb	r1, [r2, #0]
 800ce9c:	4a27      	ldr	r2, [pc, #156]	; (800cf3c <_printf_i+0x220>)
 800ce9e:	e7a7      	b.n	800cdf0 <_printf_i+0xd4>
 800cea0:	0648      	lsls	r0, r1, #25
 800cea2:	d5ac      	bpl.n	800cdfe <_printf_i+0xe2>
 800cea4:	b2ad      	uxth	r5, r5
 800cea6:	e7aa      	b.n	800cdfe <_printf_i+0xe2>
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	680d      	ldr	r5, [r1, #0]
 800ceac:	1d10      	adds	r0, r2, #4
 800ceae:	6949      	ldr	r1, [r1, #20]
 800ceb0:	6018      	str	r0, [r3, #0]
 800ceb2:	6813      	ldr	r3, [r2, #0]
 800ceb4:	062e      	lsls	r6, r5, #24
 800ceb6:	d501      	bpl.n	800cebc <_printf_i+0x1a0>
 800ceb8:	6019      	str	r1, [r3, #0]
 800ceba:	e002      	b.n	800cec2 <_printf_i+0x1a6>
 800cebc:	066d      	lsls	r5, r5, #25
 800cebe:	d5fb      	bpl.n	800ceb8 <_printf_i+0x19c>
 800cec0:	8019      	strh	r1, [r3, #0]
 800cec2:	2300      	movs	r3, #0
 800cec4:	9e04      	ldr	r6, [sp, #16]
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	e7d2      	b.n	800ce70 <_printf_i+0x154>
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	1d11      	adds	r1, r2, #4
 800cece:	6019      	str	r1, [r3, #0]
 800ced0:	6816      	ldr	r6, [r2, #0]
 800ced2:	2100      	movs	r1, #0
 800ced4:	0030      	movs	r0, r6
 800ced6:	6862      	ldr	r2, [r4, #4]
 800ced8:	f000 f834 	bl	800cf44 <memchr>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d001      	beq.n	800cee4 <_printf_i+0x1c8>
 800cee0:	1b80      	subs	r0, r0, r6
 800cee2:	6060      	str	r0, [r4, #4]
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	6123      	str	r3, [r4, #16]
 800cee8:	2300      	movs	r3, #0
 800ceea:	9a04      	ldr	r2, [sp, #16]
 800ceec:	7013      	strb	r3, [r2, #0]
 800ceee:	e7bf      	b.n	800ce70 <_printf_i+0x154>
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	0032      	movs	r2, r6
 800cef4:	9906      	ldr	r1, [sp, #24]
 800cef6:	9805      	ldr	r0, [sp, #20]
 800cef8:	9d07      	ldr	r5, [sp, #28]
 800cefa:	47a8      	blx	r5
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d0c1      	beq.n	800ce84 <_printf_i+0x168>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	079b      	lsls	r3, r3, #30
 800cf04:	d415      	bmi.n	800cf32 <_printf_i+0x216>
 800cf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf08:	68e0      	ldr	r0, [r4, #12]
 800cf0a:	4298      	cmp	r0, r3
 800cf0c:	dabc      	bge.n	800ce88 <_printf_i+0x16c>
 800cf0e:	0018      	movs	r0, r3
 800cf10:	e7ba      	b.n	800ce88 <_printf_i+0x16c>
 800cf12:	0022      	movs	r2, r4
 800cf14:	2301      	movs	r3, #1
 800cf16:	9906      	ldr	r1, [sp, #24]
 800cf18:	9805      	ldr	r0, [sp, #20]
 800cf1a:	9e07      	ldr	r6, [sp, #28]
 800cf1c:	3219      	adds	r2, #25
 800cf1e:	47b0      	blx	r6
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d0af      	beq.n	800ce84 <_printf_i+0x168>
 800cf24:	3501      	adds	r5, #1
 800cf26:	68e3      	ldr	r3, [r4, #12]
 800cf28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf2a:	1a9b      	subs	r3, r3, r2
 800cf2c:	42ab      	cmp	r3, r5
 800cf2e:	dcf0      	bgt.n	800cf12 <_printf_i+0x1f6>
 800cf30:	e7e9      	b.n	800cf06 <_printf_i+0x1ea>
 800cf32:	2500      	movs	r5, #0
 800cf34:	e7f7      	b.n	800cf26 <_printf_i+0x20a>
 800cf36:	46c0      	nop			; (mov r8, r8)
 800cf38:	0800d255 	.word	0x0800d255
 800cf3c:	0800d266 	.word	0x0800d266

0800cf40 <__retarget_lock_acquire_recursive>:
 800cf40:	4770      	bx	lr

0800cf42 <__retarget_lock_release_recursive>:
 800cf42:	4770      	bx	lr

0800cf44 <memchr>:
 800cf44:	b2c9      	uxtb	r1, r1
 800cf46:	1882      	adds	r2, r0, r2
 800cf48:	4290      	cmp	r0, r2
 800cf4a:	d101      	bne.n	800cf50 <memchr+0xc>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	4770      	bx	lr
 800cf50:	7803      	ldrb	r3, [r0, #0]
 800cf52:	428b      	cmp	r3, r1
 800cf54:	d0fb      	beq.n	800cf4e <memchr+0xa>
 800cf56:	3001      	adds	r0, #1
 800cf58:	e7f6      	b.n	800cf48 <memchr+0x4>

0800cf5a <memcpy>:
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d100      	bne.n	800cf64 <memcpy+0xa>
 800cf62:	bd10      	pop	{r4, pc}
 800cf64:	5ccc      	ldrb	r4, [r1, r3]
 800cf66:	54c4      	strb	r4, [r0, r3]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	e7f8      	b.n	800cf5e <memcpy+0x4>

0800cf6c <memmove>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	4288      	cmp	r0, r1
 800cf70:	d902      	bls.n	800cf78 <memmove+0xc>
 800cf72:	188b      	adds	r3, r1, r2
 800cf74:	4298      	cmp	r0, r3
 800cf76:	d303      	bcc.n	800cf80 <memmove+0x14>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e007      	b.n	800cf8c <memmove+0x20>
 800cf7c:	5c8b      	ldrb	r3, [r1, r2]
 800cf7e:	5483      	strb	r3, [r0, r2]
 800cf80:	3a01      	subs	r2, #1
 800cf82:	d2fb      	bcs.n	800cf7c <memmove+0x10>
 800cf84:	bd10      	pop	{r4, pc}
 800cf86:	5ccc      	ldrb	r4, [r1, r3]
 800cf88:	54c4      	strb	r4, [r0, r3]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d1fa      	bne.n	800cf86 <memmove+0x1a>
 800cf90:	e7f8      	b.n	800cf84 <memmove+0x18>

0800cf92 <_realloc_r>:
 800cf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf94:	0007      	movs	r7, r0
 800cf96:	000d      	movs	r5, r1
 800cf98:	0016      	movs	r6, r2
 800cf9a:	2900      	cmp	r1, #0
 800cf9c:	d105      	bne.n	800cfaa <_realloc_r+0x18>
 800cf9e:	0011      	movs	r1, r2
 800cfa0:	f7ff fc4a 	bl	800c838 <_malloc_r>
 800cfa4:	0004      	movs	r4, r0
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	d103      	bne.n	800cfb6 <_realloc_r+0x24>
 800cfae:	f7ff fbf9 	bl	800c7a4 <_free_r>
 800cfb2:	0034      	movs	r4, r6
 800cfb4:	e7f7      	b.n	800cfa6 <_realloc_r+0x14>
 800cfb6:	f000 f812 	bl	800cfde <_malloc_usable_size_r>
 800cfba:	002c      	movs	r4, r5
 800cfbc:	42b0      	cmp	r0, r6
 800cfbe:	d2f2      	bcs.n	800cfa6 <_realloc_r+0x14>
 800cfc0:	0031      	movs	r1, r6
 800cfc2:	0038      	movs	r0, r7
 800cfc4:	f7ff fc38 	bl	800c838 <_malloc_r>
 800cfc8:	1e04      	subs	r4, r0, #0
 800cfca:	d0ec      	beq.n	800cfa6 <_realloc_r+0x14>
 800cfcc:	0029      	movs	r1, r5
 800cfce:	0032      	movs	r2, r6
 800cfd0:	f7ff ffc3 	bl	800cf5a <memcpy>
 800cfd4:	0029      	movs	r1, r5
 800cfd6:	0038      	movs	r0, r7
 800cfd8:	f7ff fbe4 	bl	800c7a4 <_free_r>
 800cfdc:	e7e3      	b.n	800cfa6 <_realloc_r+0x14>

0800cfde <_malloc_usable_size_r>:
 800cfde:	1f0b      	subs	r3, r1, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	1f18      	subs	r0, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	da01      	bge.n	800cfec <_malloc_usable_size_r+0xe>
 800cfe8:	580b      	ldr	r3, [r1, r0]
 800cfea:	18c0      	adds	r0, r0, r3
 800cfec:	4770      	bx	lr
	...

0800cff0 <_init>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff6:	bc08      	pop	{r3}
 800cff8:	469e      	mov	lr, r3
 800cffa:	4770      	bx	lr

0800cffc <_fini>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	46c0      	nop			; (mov r8, r8)
 800d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d002:	bc08      	pop	{r3}
 800d004:	469e      	mov	lr, r3
 800d006:	4770      	bx	lr
