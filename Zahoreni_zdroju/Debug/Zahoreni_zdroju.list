
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800c590  0800c590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c780  0800c780  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c780  0800c780  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c780  0800c780  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c784  0800c784  0001c784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200001e0  0800c968  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800c968  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027392  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048eb  00000000  00000000  0004759a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0004be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0004d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f32c  00000000  00000000  0004ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e06d  00000000  00000000  0006dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3cc4  00000000  00000000  0008bdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fa7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  0012fad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c578 	.word	0x0800c578

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c578 	.word	0x0800c578

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 f948 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f940 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 f939 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 f931 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 f929 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 f922 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 f91a 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f912 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 f90b 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 f903 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f8fb 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 f8f4 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <readBusy>:

//_____Přečte dostupnost displeje_____//
// !!! Pracuje v blokujícím módu !!!
DISP_STATE readBusy(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	uint8_t data = READ_BUSY_FLAG;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	22fc      	movs	r2, #252	; 0xfc
 8000506:	701a      	strb	r2, [r3, #0]
	uint8_t data2;

	DISP_CS_ON;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <readBusy+0x70>)
 800050a:	2200      	movs	r2, #0
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f8e1 	bl	80026d6 <HAL_GPIO_WritePin>
	//_____Požadavek na čtení Busy Flag_____//
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000514:	1df9      	adds	r1, r7, #7
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <readBusy+0x74>)
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	f004 fe5a 	bl	80051d4 <HAL_SPI_Transmit>
	//_____Čtení příchozího bytu_____//
	HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f001 fa6f 	bl	8001a04 <HAL_Delay>

	if(HAL_SPI_Receive(&hspi1, &data2, 1, 100) == HAL_OK)
 8000526:	1db9      	adds	r1, r7, #6
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <readBusy+0x74>)
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	2201      	movs	r2, #1
 800052e:	f004 ffa9 	bl	8005484 <HAL_SPI_Receive>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d10e      	bne.n	8000554 <readBusy+0x58>
	{
		//_____Vrať hodnotu BF_____//
		DISP_CS_OFF;
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <readBusy+0x70>)
 8000538:	2201      	movs	r2, #1
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	0018      	movs	r0, r3
 800053e:	f002 f8ca 	bl	80026d6 <HAL_GPIO_WritePin>
		return (MaskBit(data2, 7))? SPI_BUSY : SPI_OK;
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b25b      	sxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	da01      	bge.n	8000550 <readBusy+0x54>
 800054c:	2303      	movs	r3, #3
 800054e:	e008      	b.n	8000562 <readBusy+0x66>
 8000550:	2301      	movs	r3, #1
 8000552:	e006      	b.n	8000562 <readBusy+0x66>
	}
	else
	{
		//_____Chyba čtení BF_____//
		DISP_CS_OFF;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <readBusy+0x70>)
 8000556:	2201      	movs	r2, #1
 8000558:	2140      	movs	r1, #64	; 0x40
 800055a:	0018      	movs	r0, r3
 800055c:	f002 f8bb 	bl	80026d6 <HAL_GPIO_WritePin>
		return SPI_ERR;
 8000560:	2302      	movs	r3, #2
	}
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	48000400 	.word	0x48000400
 8000570:	200004dc 	.word	0x200004dc

08000574 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
	while(readBusy() != SPI_OK)
 8000586:	e006      	b.n	8000596 <sendByte+0x22>
	{
		if(readBusy() == SPI_ERR)
 8000588:	f7ff ffb8 	bl	80004fc <readBusy>
 800058c:	0003      	movs	r3, r0
 800058e:	2b02      	cmp	r3, #2
 8000590:	d101      	bne.n	8000596 <sendByte+0x22>
		{
			return SPI_ERR;
 8000592:	2302      	movs	r3, #2
 8000594:	e08d      	b.n	80006b2 <sendByte+0x13e>
	while(readBusy() != SPI_OK)
 8000596:	f7ff ffb1 	bl	80004fc <readBusy>
 800059a:	0003      	movs	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f3      	bne.n	8000588 <sendByte+0x14>
		}
	}
	uint8_t buffer[3];
	switch(type)
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d002      	beq.n	80005ae <sendByte+0x3a>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d005      	beq.n	80005b8 <sendByte+0x44>
			break;
		case DATA:
			buffer[0] = 0xFA;
			break;
		default:
			break;
 80005ac:	e009      	b.n	80005c2 <sendByte+0x4e>
			buffer[0] = 0xF8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	22f8      	movs	r2, #248	; 0xf8
 80005b4:	701a      	strb	r2, [r3, #0]
			break;
 80005b6:	e004      	b.n	80005c2 <sendByte+0x4e>
			buffer[0] = 0xFA;
 80005b8:	2308      	movs	r3, #8
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	22fa      	movs	r2, #250	; 0xfa
 80005be:	701a      	strb	r2, [r3, #0]
			break;
 80005c0:	46c0      	nop			; (mov r8, r8)
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 80005c2:	230f      	movs	r3, #15
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80005d2:	230d      	movs	r3, #13
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e03a      	b.n	8000652 <sendByte+0xde>
	{
		if(MaskBit(byte, i))
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	210d      	movs	r1, #13
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	411a      	asrs	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	d00f      	beq.n	8000610 <sendByte+0x9c>
		{
			SetBit(tmp1, (7-i));
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2207      	movs	r2, #7
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2201      	movs	r2, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	210f      	movs	r1, #15
 8000602:	187b      	adds	r3, r7, r1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25a      	sxtb	r2, r3
 800060c:	187b      	adds	r3, r7, r1
 800060e:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	210d      	movs	r1, #13
 8000616:	187b      	adds	r3, r7, r1
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	411a      	asrs	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	d00f      	beq.n	8000646 <sendByte+0xd2>
		{
			SetBit(tmp2, (7-i));
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2207      	movs	r2, #7
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2201      	movs	r2, #1
 8000630:	409a      	lsls	r2, r3
 8000632:	0013      	movs	r3, r2
 8000634:	b25a      	sxtb	r2, r3
 8000636:	210e      	movs	r1, #14
 8000638:	187b      	adds	r3, r7, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b25b      	sxtb	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b25a      	sxtb	r2, r3
 8000642:	187b      	adds	r3, r7, r1
 8000644:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000646:	210d      	movs	r1, #13
 8000648:	187b      	adds	r3, r7, r1
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	187b      	adds	r3, r7, r1
 800064e:	3201      	adds	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	230d      	movs	r3, #13
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d9bf      	bls.n	80005dc <sendByte+0x68>
		}
	}
	buffer[1] = tmp1;
 800065c:	2508      	movs	r5, #8
 800065e:	197b      	adds	r3, r7, r5
 8000660:	220f      	movs	r2, #15
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000668:	197b      	adds	r3, r7, r5
 800066a:	220e      	movs	r2, #14
 800066c:	18ba      	adds	r2, r7, r2
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <sendByte+0x148>)
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	0018      	movs	r0, r3
 800067a:	f002 f82c 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &buffer[0], 3, 100);
 800067e:	260c      	movs	r6, #12
 8000680:	19bc      	adds	r4, r7, r6
 8000682:	1979      	adds	r1, r7, r5
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <sendByte+0x14c>)
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2203      	movs	r2, #3
 800068a:	f004 fda3 	bl	80051d4 <HAL_SPI_Transmit>
 800068e:	0003      	movs	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <sendByte+0x148>)
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	0018      	movs	r0, r3
 800069a:	f002 f81c 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 f9b0 	bl	8001a04 <HAL_Delay>
	if(ret == HAL_OK)
 80006a4:	19bb      	adds	r3, r7, r6
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <sendByte+0x13c>
		return DISP_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e000      	b.n	80006b2 <sendByte+0x13e>
	else
		return SPI_ERR;
 80006b0:	2302      	movs	r3, #2
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b005      	add	sp, #20
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	48000400 	.word	0x48000400
 80006c0:	200004dc 	.word	0x200004dc

080006c4 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 f99b 	bl	8001a04 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <dispInit+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fffe 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006da:	2014      	movs	r0, #20
 80006dc:	f001 f992 	bl	8001a04 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <dispInit+0x74>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fff5 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f001 f989 	bl	8001a04 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set
 80006f2:	2101      	movs	r1, #1
 80006f4:	2031      	movs	r0, #49	; 0x31
 80006f6:	f7ff ff3d 	bl	8000574 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 80006fa:	2101      	movs	r1, #1
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff39 	bl	8000574 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000702:	2101      	movs	r1, #1
 8000704:	2013      	movs	r0, #19
 8000706:	f7ff ff35 	bl	8000574 <sendByte>
	sendByte(0x7F, INSTRUCTION);	//Contrast
 800070a:	2101      	movs	r1, #1
 800070c:	207f      	movs	r0, #127	; 0x7f
 800070e:	f7ff ff31 	bl	8000574 <sendByte>
	sendByte(0x5C, INSTRUCTION);	//Power/Icon/Contrast
 8000712:	2101      	movs	r1, #1
 8000714:	205c      	movs	r0, #92	; 0x5c
 8000716:	f7ff ff2d 	bl	8000574 <sendByte>
	sendByte(0x6E, INSTRUCTION);	//Follower control
 800071a:	2101      	movs	r1, #1
 800071c:	206e      	movs	r0, #110	; 0x6e
 800071e:	f7ff ff29 	bl	8000574 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000722:	2101      	movs	r1, #1
 8000724:	200f      	movs	r0, #15
 8000726:	f7ff ff25 	bl	8000574 <sendByte>
	//sendByte(0x72, INSTRUCTION);	//Contrast set
	//sendByte(0x38, INSTRUCTION);	//Function set
	//sendByte(0x0C, INSTRUCTION);	//Display on

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff fe74 	bl	8000418 <setColour>
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	48000400 	.word	0x48000400

0800073c <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	1dbb      	adds	r3, r7, #6
 800074a:	1c0a      	adds	r2, r1, #0
 800074c:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d803      	bhi.n	8000766 <setCursor+0x2a>
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d901      	bls.n	800076a <setCursor+0x2e>
		return DISP_ERR;
 8000766:	2304      	movs	r3, #4
 8000768:	e020      	b.n	80007ac <setCursor+0x70>
	addres += row*0x20;
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	015b      	lsls	r3, r3, #5
 8000770:	b2d9      	uxtb	r1, r3
 8000772:	250f      	movs	r5, #15
 8000774:	197b      	adds	r3, r7, r5
 8000776:	197a      	adds	r2, r7, r5
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	188a      	adds	r2, r1, r2
 800077c:	701a      	strb	r2, [r3, #0]
	addres += col;
 800077e:	197b      	adds	r3, r7, r5
 8000780:	1979      	adds	r1, r7, r5
 8000782:	1dba      	adds	r2, r7, #6
 8000784:	7809      	ldrb	r1, [r1, #0]
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	188a      	adds	r2, r1, r2
 800078a:	701a      	strb	r2, [r3, #0]

	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 800078c:	2101      	movs	r1, #1
 800078e:	2038      	movs	r0, #56	; 0x38
 8000790:	f7ff fef0 	bl	8000574 <sendByte>
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8000794:	260e      	movs	r6, #14
 8000796:	19bc      	adds	r4, r7, r6
 8000798:	197b      	adds	r3, r7, r5
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fee8 	bl	8000574 <sendByte>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	return ret;
 80007a8:	19bb      	adds	r3, r7, r6
 80007aa:	781b      	ldrb	r3, [r3, #0]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b005      	add	sp, #20
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007b4 <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0004      	movs	r4, r0
 80007bc:	0008      	movs	r0, r1
 80007be:	0011      	movs	r1, r2
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	1c22      	adds	r2, r4, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	1c02      	adds	r2, r0, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1d7b      	adds	r3, r7, #5
 80007ce:	1c0a      	adds	r2, r1, #0
 80007d0:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 80007d2:	250f      	movs	r5, #15
 80007d4:	197c      	adds	r4, r7, r5
 80007d6:	1d7b      	adds	r3, r7, #5
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ffab 	bl	800073c <setCursor>
 80007e6:	0003      	movs	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]
	if(ret == DISP_OK)
 80007ea:	197b      	adds	r3, r7, r5
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10b      	bne.n	800080a <writeChar+0x56>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 80007f2:	197c      	adds	r4, r7, r5
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2102      	movs	r1, #2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff feba 	bl	8000574 <sendByte>
 8000800:	0003      	movs	r3, r0
 8000802:	7023      	strb	r3, [r4, #0]
		return ret;
 8000804:	197b      	adds	r3, r7, r5
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	e002      	b.n	8000810 <writeChar+0x5c>
	}
	else
		return ret;
 800080a:	230f      	movs	r3, #15
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781b      	ldrb	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bdb0      	pop	{r4, r5, r7, pc}

08000818 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	1dbb      	adds	r3, r7, #6
 8000822:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	429a      	cmp	r2, r3
 800082e:	d104      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.butt0_int = 1;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_GPIO_EXTI_Callback+0x40>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	2110      	movs	r1, #16
 8000836:	430a      	orrs	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800083a:	1dbb      	adds	r3, r7, #6
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	429a      	cmp	r2, r3
 8000844:	d104      	bne.n	8000850 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.butt1_int = 1;
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <HAL_GPIO_EXTI_Callback+0x40>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	430a      	orrs	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
	}
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000588 	.word	0x20000588

0800085c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000868:	429a      	cmp	r2, r3
 800086a:	d104      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.ten_ms = 1;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
	}
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000540 	.word	0x20000540
 8000884:	20000588 	.word	0x20000588

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 f856 	bl	800193c <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fd58 	bl	8001346 <createBuffer>
 8000896:	0002      	movs	r2, r0
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <main+0x84>)
 800089a:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 fd52 	bl	8001346 <createBuffer>
 80008a2:	0002      	movs	r2, r0
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <main+0x88>)
 80008a6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80008a8:	23fa      	movs	r3, #250	; 0xfa
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fd4a 	bl	8001346 <createBuffer>
 80008b2:	0002      	movs	r2, r0
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <main+0x8c>)
 80008b6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f832 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 fa9a 	bl	8000df4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008c0:	f00a fc88 	bl	800b1d4 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80008c4:	f000 fa78 	bl	8000db8 <MX_DMA_Init>
  MX_ADC_Init();
 80008c8:	f000 f896 	bl	80009f8 <MX_ADC_Init>
  MX_SPI1_Init();
 80008cc:	f000 f9b2 	bl	8000c34 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80008d0:	f000 fa42 	bl	8000d58 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008d4:	f000 f9f4 	bl	8000cc0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 80008d8:	f7ff fef4 	bl	80006c4 <dispInit>
  writeChar('a', 1, 5);
 80008dc:	2205      	movs	r2, #5
 80008de:	2101      	movs	r1, #1
 80008e0:	2061      	movs	r0, #97	; 0x61
 80008e2:	f7ff ff67 	bl	80007b4 <writeChar>
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <main+0x90>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f005 fb0d 	bl	8005f08 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.ten_ms)	// 10 ms
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <main+0x94>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0f8      	beq.n	80008ee <main+0x66>
	  {
		  clkHandler();
 80008fc:	f000 fb66 	bl	8000fcc <clkHandler>
		  buttonDebounce();
 8000900:	f000 fc0a 	bl	8001118 <buttonDebounce>
		  comHandler();
 8000904:	f000 fc84 	bl	8001210 <comHandler>
	  if(flags.ten_ms)	// 10 ms
 8000908:	e7f1      	b.n	80008ee <main+0x66>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000448 	.word	0x20000448
 8000910:	20000450 	.word	0x20000450
 8000914:	200010a8 	.word	0x200010a8
 8000918:	20000540 	.word	0x20000540
 800091c:	20000588 	.word	0x20000588

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b099      	sub	sp, #100	; 0x64
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	242c      	movs	r4, #44	; 0x2c
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2334      	movs	r3, #52	; 0x34
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f00b f9f3 	bl	800bd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000936:	231c      	movs	r3, #28
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	0018      	movs	r0, r3
 800093c:	2310      	movs	r3, #16
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f00b f9eb 	bl	800bd1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	231c      	movs	r3, #28
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f00b f9e4 	bl	800bd1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2232      	movs	r2, #50	; 0x32
 800095a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2201      	movs	r2, #1
 8000966:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2201      	movs	r2, #1
 800096c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2210      	movs	r2, #16
 8000972:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2210      	movs	r2, #16
 8000978:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2202      	movs	r2, #2
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	0212      	lsls	r2, r2, #8
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0352      	lsls	r2, r2, #13
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	187b      	adds	r3, r7, r1
 8000998:	0018      	movs	r0, r3
 800099a:	f003 fd63 	bl	8004464 <HAL_RCC_OscConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009a2:	f000 fccb 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	211c      	movs	r1, #28
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2207      	movs	r2, #7
 80009ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2101      	movs	r1, #1
 80009c4:	0018      	movs	r0, r3
 80009c6:	f004 f8d3 	bl	8004b70 <HAL_RCC_ClockConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009ce:	f000 fcb5 	bl	800133c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009d2:	003b      	movs	r3, r7
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	0292      	lsls	r2, r2, #10
 80009d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009da:	003b      	movs	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	003b      	movs	r3, r7
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 fa40 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009ec:	f000 fca6 	bl	800133c <Error_Handler>
  }
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b019      	add	sp, #100	; 0x64
 80009f6:	bd90      	pop	{r4, r7, pc}

080009f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	0018      	movs	r0, r3
 8000a02:	230c      	movs	r3, #12
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f00b f988 	bl	800bd1c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a0c:	4b87      	ldr	r3, [pc, #540]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a0e:	4a88      	ldr	r2, [pc, #544]	; (8000c30 <MX_ADC_Init+0x238>)
 8000a10:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a12:	4b86      	ldr	r3, [pc, #536]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a18:	4b84      	ldr	r3, [pc, #528]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1e:	4b83      	ldr	r3, [pc, #524]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a24:	4b81      	ldr	r3, [pc, #516]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b80      	ldr	r3, [pc, #512]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a30:	4b7e      	ldr	r3, [pc, #504]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a36:	4b7d      	ldr	r3, [pc, #500]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b7a      	ldr	r3, [pc, #488]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a4a:	22c2      	movs	r2, #194	; 0xc2
 8000a4c:	32ff      	adds	r2, #255	; 0xff
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a50:	4b76      	ldr	r3, [pc, #472]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a56:	4b75      	ldr	r3, [pc, #468]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a58:	2224      	movs	r2, #36	; 0x24
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5e:	4b73      	ldr	r3, [pc, #460]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a64:	4b71      	ldr	r3, [pc, #452]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fff0 	bl	8001a4c <HAL_ADC_Init>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 fc64 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0152      	lsls	r2, r2, #5
 8000a80:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0552      	lsls	r2, r2, #21
 8000a88:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a8a:	1d3a      	adds	r2, r7, #4
 8000a8c:	4b67      	ldr	r3, [pc, #412]	; (8000c2c <MX_ADC_Init+0x234>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f91b 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000a9a:	f000 fc4f 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa4:	1d3a      	adds	r2, r7, #4
 8000aa6:	4b61      	ldr	r3, [pc, #388]	; (8000c2c <MX_ADC_Init+0x234>)
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 f90e 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000ab4:	f000 fc42 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2202      	movs	r2, #2
 8000abc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000abe:	1d3a      	adds	r2, r7, #4
 8000ac0:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <MX_ADC_Init+0x234>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 f901 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000ace:	f000 fc35 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad8:	1d3a      	adds	r2, r7, #4
 8000ada:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <MX_ADC_Init+0x234>)
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f8f4 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000ae8:	f000 fc28 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2204      	movs	r2, #4
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000af2:	1d3a      	adds	r2, r7, #4
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <MX_ADC_Init+0x234>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 f8e7 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000b02:	f000 fc1b 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2205      	movs	r2, #5
 8000b0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0c:	1d3a      	adds	r2, r7, #4
 8000b0e:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 f8da 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000b1c:	f000 fc0e 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2206      	movs	r2, #6
 8000b24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 f8cd 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000b36:	f000 fc01 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b40:	1d3a      	adds	r2, r7, #4
 8000b42:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 f8c0 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000b50:	f000 fbf4 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2208      	movs	r2, #8
 8000b58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b5a:	1d3a      	adds	r2, r7, #4
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 f8b3 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000b6a:	f000 fbe7 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2209      	movs	r2, #9
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 f8a6 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000b84:	f000 fbda 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	220a      	movs	r2, #10
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b8e:	1d3a      	adds	r2, r7, #4
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_ADC_Init+0x234>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 f899 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000b9e:	f000 fbcd 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	220b      	movs	r2, #11
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ba8:	1d3a      	adds	r2, r7, #4
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_ADC_Init+0x234>)
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 f88c 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000bb8:	f000 fbc0 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_ADC_Init+0x234>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 f87f 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000bd2:	f000 fbb3 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	220d      	movs	r2, #13
 8000bda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_ADC_Init+0x234>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 f872 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000bec:	f000 fba6 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	220e      	movs	r2, #14
 8000bf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf6:	1d3a      	adds	r2, r7, #4
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_ADC_Init+0x234>)
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 f865 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000c06:	f000 fb99 	bl	800133c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_ADC_Init+0x234>)
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 f858 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000c20:	f000 fb8c 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b004      	add	sp, #16
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200005d0 	.word	0x200005d0
 8000c30:	40012400 	.word	0x40012400

08000c34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <MX_SPI1_Init+0x84>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c40:	2282      	movs	r2, #130	; 0x82
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c4e:	22e0      	movs	r2, #224	; 0xe0
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c6a:	2238      	movs	r2, #56	; 0x38
 8000c6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SPI1_Init+0x80>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f004 f9e5 	bl	8005064 <HAL_SPI_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fb4d 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI1_Init+0x88>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fd14 	bl	80026d6 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200004dc 	.word	0x200004dc
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	48000400 	.word	0x48000400

08000cc0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	231c      	movs	r3, #28
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f00b f824 	bl	800bd1c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <MX_TIM14_Init+0x90>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000cdc:	222f      	movs	r2, #47	; 0x2f
 8000cde:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <MX_TIM14_Init+0x94>)
 8000cea:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f005 f8b4 	bl	8005e68 <HAL_TIM_Base_Init>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000d04:	f000 fb1a 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f005 f94e 	bl	8005fac <HAL_TIM_OC_Init>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 fb12 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d30:	1d39      	adds	r1, r7, #4
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_TIM14_Init+0x8c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f005 faa6 	bl	8006288 <HAL_TIM_OC_ConfigChannel>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000d40:	f000 fafc 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b008      	add	sp, #32
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000540 	.word	0x20000540
 8000d50:	40002000 	.word	0x40002000
 8000d54:	0000270f 	.word	0x0000270f

08000d58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_USART3_UART_Init+0x5c>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d64:	2296      	movs	r2, #150	; 0x96
 8000d66:	0212      	lsls	r2, r2, #8
 8000d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <MX_USART3_UART_Init+0x58>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f005 fd77 	bl	8006890 <HAL_UART_Init>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000da6:	f000 fac9 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000458 	.word	0x20000458
 8000db4:	40004800 	.word	0x40004800

08000db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_DMA_Init+0x38>)
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_DMA_Init+0x38>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	615a      	str	r2, [r3, #20]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_DMA_Init+0x38>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2009      	movs	r0, #9
 8000ddc:	f001 f930 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000de0:	2009      	movs	r0, #9
 8000de2:	f001 f942 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40021000 	.word	0x40021000

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	2414      	movs	r4, #20
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2314      	movs	r3, #20
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	f00a ff89 	bl	800bd1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b6b      	ldr	r3, [pc, #428]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	4b6a      	ldr	r3, [pc, #424]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	03c9      	lsls	r1, r1, #15
 8000e14:	430a      	orrs	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b67      	ldr	r3, [pc, #412]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	0309      	lsls	r1, r1, #12
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	031b      	lsls	r3, r3, #12
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0289      	lsls	r1, r1, #10
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b59      	ldr	r3, [pc, #356]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	02c9      	lsls	r1, r1, #11
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	02db      	lsls	r3, r3, #11
 8000e74:	4013      	ands	r3, r2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0349      	lsls	r1, r1, #13
 8000e84:	430a      	orrs	r2, r1
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	4b4b      	ldr	r3, [pc, #300]	; (8000fb8 <MX_GPIO_Init+0x1c4>)
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	035b      	lsls	r3, r3, #13
 8000e90:	4013      	ands	r3, r2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000e96:	4949      	ldr	r1, [pc, #292]	; (8000fbc <MX_GPIO_Init+0x1c8>)
 8000e98:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MX_GPIO_Init+0x1cc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fc1a 	bl	80026d6 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ea2:	239e      	movs	r3, #158	; 0x9e
 8000ea4:	015b      	lsls	r3, r3, #5
 8000ea6:	4847      	ldr	r0, [pc, #284]	; (8000fc4 <MX_GPIO_Init+0x1d0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0019      	movs	r1, r3
 8000eac:	f001 fc13 	bl	80026d6 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	0219      	lsls	r1, r3, #8
 8000eb4:	2390      	movs	r3, #144	; 0x90
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 fc0b 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	4a3e      	ldr	r2, [pc, #248]	; (8000fbc <MX_GPIO_Init+0x1c8>)
 8000ec4:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <MX_GPIO_Init+0x1cc>)
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f001 fa64 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	229e      	movs	r2, #158	; 0x9e
 8000eea:	0152      	lsls	r2, r2, #5
 8000eec:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	000c      	movs	r4, r1
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <MX_GPIO_Init+0x1d0>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f001 fa4f 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	22c0      	movs	r2, #192	; 0xc0
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2288      	movs	r2, #136	; 0x88
 8000f1a:	0352      	lsls	r2, r2, #13
 8000f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	2202      	movs	r2, #2
 8000f22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	193a      	adds	r2, r7, r4
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fa3d 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	00d2      	lsls	r2, r2, #3
 8000f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	2390      	movs	r3, #144	; 0x90
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fa2c 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000f54:	0021      	movs	r1, r4
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	0212      	lsls	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	000c      	movs	r4, r1
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2201      	movs	r2, #1
 8000f64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000f72:	193a      	adds	r2, r7, r4
 8000f74:	2390      	movs	r3, #144	; 0x90
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f001 fa16 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	2204      	movs	r2, #4
 8000f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <MX_GPIO_Init+0x1d4>)
 8000f96:	0019      	movs	r1, r3
 8000f98:	0010      	movs	r0, r2
 8000f9a:	f001 fa07 	bl	80023ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f001 f84c 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fa8:	2007      	movs	r0, #7
 8000faa:	f001 f85e 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b00b      	add	sp, #44	; 0x2c
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	0000f3c4 	.word	0x0000f3c4
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00

08000fcc <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	; 0x2c
 8000fd0:	af02      	add	r7, sp, #8
	flags.ten_ms = 0;
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <clkHandler+0x134>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	438a      	bics	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
	flags.sec	= 0;
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <clkHandler+0x134>)
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	438a      	bics	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
	flags.min	= 0;
 8000fe6:	4b46      	ldr	r3, [pc, #280]	; (8001100 <clkHandler+0x134>)
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	2104      	movs	r1, #4
 8000fec:	438a      	bics	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
	flags.hour	= 0;
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <clkHandler+0x134>)
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	sysTime++;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <clkHandler+0x138>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <clkHandler+0x138>)
 8001002:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <clkHandler+0x138>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2164      	movs	r1, #100	; 0x64
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff f914 	bl	8000238 <__aeabi_uidivmod>
 8001010:	1e0b      	subs	r3, r1, #0
 8001012:	d109      	bne.n	8001028 <clkHandler+0x5c>
	{
		sysTime_sec++;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <clkHandler+0x13c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <clkHandler+0x13c>)
 800101c:	601a      	str	r2, [r3, #0]
		flags.sec = 1;
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <clkHandler+0x134>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	2102      	movs	r1, #2
 8001024:	430a      	orrs	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
	}

	if(flags.sec)
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <clkHandler+0x134>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d042      	beq.n	80010bc <clkHandler+0xf0>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <clkHandler+0x13c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	213c      	movs	r1, #60	; 0x3c
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f8fb 	bl	8000238 <__aeabi_uidivmod>
 8001042:	1e0b      	subs	r3, r1, #0
 8001044:	d110      	bne.n	8001068 <clkHandler+0x9c>
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <clkHandler+0x13c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <clkHandler+0x9c>
		{
			sysTime_sec = 0;
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <clkHandler+0x13c>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <clkHandler+0x140>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <clkHandler+0x140>)
 800105c:	601a      	str	r2, [r3, #0]
			flags.min = 1;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <clkHandler+0x134>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	2104      	movs	r1, #4
 8001064:	430a      	orrs	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
		}

		if(flags.min)
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <clkHandler+0x134>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2204      	movs	r2, #4
 800106e:	4013      	ands	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d022      	beq.n	80010bc <clkHandler+0xf0>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <clkHandler+0x140>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	213c      	movs	r1, #60	; 0x3c
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff f8db 	bl	8000238 <__aeabi_uidivmod>
 8001082:	1e0b      	subs	r3, r1, #0
 8001084:	d11a      	bne.n	80010bc <clkHandler+0xf0>
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <clkHandler+0x140>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d016      	beq.n	80010bc <clkHandler+0xf0>
			{

				sysTime_sec = 0;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <clkHandler+0x13c>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <clkHandler+0x140>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <clkHandler+0x144>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <clkHandler+0x144>)
 80010a2:	601a      	str	r2, [r3, #0]
				flags.hour = 1;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <clkHandler+0x134>)
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	2108      	movs	r1, #8
 80010aa:	430a      	orrs	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
				if(sysTime_hour >= 23)
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <clkHandler+0x144>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b16      	cmp	r3, #22
 80010b4:	d902      	bls.n	80010bc <clkHandler+0xf0>
					sysTime_hour = 0;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <clkHandler+0x144>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(flags.sec)
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <clkHandler+0x134>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d016      	beq.n	80010f8 <clkHandler+0x12c>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <clkHandler+0x144>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <clkHandler+0x140>)
 80010d0:	681c      	ldr	r4, [r3, #0]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <clkHandler+0x13c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	490f      	ldr	r1, [pc, #60]	; (8001114 <clkHandler+0x148>)
 80010d8:	0038      	movs	r0, r7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	0023      	movs	r3, r4
 80010de:	f00a fedf 	bl	800bea0 <siprintf>
		CDC_Transmit_FS(timeStamp, strlen(timeStamp));	//odešli čas
 80010e2:	003b      	movs	r3, r7
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff f80f 	bl	8000108 <strlen>
 80010ea:	0003      	movs	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	003b      	movs	r3, r7
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f00a f918 	bl	800b328 <CDC_Transmit_FS>
	}
#endif
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	20000588 	.word	0x20000588
 8001104:	200001fc 	.word	0x200001fc
 8001108:	20000200 	.word	0x20000200
 800110c:	20000204 	.word	0x20000204
 8001110:	20000208 	.word	0x20000208
 8001114:	0800c590 	.word	0x0800c590

08001118 <buttonDebounce>:

void buttonDebounce()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	if(flags.butt0_int)
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <buttonDebounce+0xe8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2210      	movs	r2, #16
 8001122:	4013      	ands	r3, r2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d031      	beq.n	800118e <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fab1 	bl	800269c <HAL_GPIO_ReadPin>
 800113a:	0003      	movs	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <buttonDebounce+0xec>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <buttonDebounce+0xec>)
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <buttonDebounce+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <buttonDebounce+0xe8>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	2110      	movs	r1, #16
 800115a:	438a      	bics	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <buttonDebounce+0xec>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d913      	bls.n	800118e <buttonDebounce+0x76>
		{
			flags.butt0_ver = 1;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <buttonDebounce+0xe8>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	2120      	movs	r1, #32
 800116c:	430a      	orrs	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <buttonDebounce+0xe8>)
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	2110      	movs	r1, #16
 8001176:	438a      	bics	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
			button0_Debounce = 0;
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <buttonDebounce+0xec>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <buttonDebounce+0xf0>)
 8001186:	0019      	movs	r1, r3
 8001188:	0010      	movs	r0, r2
 800118a:	f001 fac1 	bl	8002710 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.butt1_int)
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <buttonDebounce+0xe8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	4013      	ands	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02e      	beq.n	80011fa <buttonDebounce+0xe2>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	005a      	lsls	r2, r3, #1
 80011a0:	2390      	movs	r3, #144	; 0x90
 80011a2:	05db      	lsls	r3, r3, #23
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f001 fa78 	bl	800269c <HAL_GPIO_ReadPin>
 80011ac:	0003      	movs	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d106      	bne.n	80011c0 <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <buttonDebounce+0xf4>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <buttonDebounce+0xf4>)
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e007      	b.n	80011d0 <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <buttonDebounce+0xf4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
			flags.butt1_int = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <buttonDebounce+0xe8>)
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	438a      	bics	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <buttonDebounce+0xf4>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d910      	bls.n	80011fa <buttonDebounce+0xe2>
		{
			flags.butt1_ver = 1;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <buttonDebounce+0xe8>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	4249      	negs	r1, r1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
			flags.butt1_int;
			button1_Debounce = 0;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <buttonDebounce+0xf4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	021a      	lsls	r2, r3, #8
 80011ee:	2390      	movs	r3, #144	; 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fa8b 	bl	8002710 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000588 	.word	0x20000588
 8001204:	2000020c 	.word	0x2000020c
 8001208:	48000400 	.word	0x48000400
 800120c:	2000020d 	.word	0x2000020d

08001210 <comHandler>:

//_____Obsluha komunikace s PC přes USB_____//
void comHandler()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
	if(flags.data_received)
 8001216:	4b42      	ldr	r3, [pc, #264]	; (8001320 <comHandler+0x110>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d100      	bne.n	8001226 <comHandler+0x16>
 8001224:	e078      	b.n	8001318 <comHandler+0x108>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8001226:	e067      	b.n	80012f8 <comHandler+0xe8>
		{
			uint8_t txt[30];

			switch(instruction)
 8001228:	231f      	movs	r3, #31
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b73      	cmp	r3, #115	; 0x73
 8001230:	d008      	beq.n	8001244 <comHandler+0x34>
 8001232:	dc4f      	bgt.n	80012d4 <comHandler+0xc4>
 8001234:	2b70      	cmp	r3, #112	; 0x70
 8001236:	d029      	beq.n	800128c <comHandler+0x7c>
 8001238:	dc4c      	bgt.n	80012d4 <comHandler+0xc4>
 800123a:	2b63      	cmp	r3, #99	; 0x63
 800123c:	d014      	beq.n	8001268 <comHandler+0x58>
 800123e:	2b6b      	cmp	r3, #107	; 0x6b
 8001240:	d036      	beq.n	80012b0 <comHandler+0xa0>
 8001242:	e047      	b.n	80012d4 <comHandler+0xc4>
			{
			case 's': ;
				//___Start testu___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
 8001244:	4a37      	ldr	r2, [pc, #220]	; (8001324 <comHandler+0x114>)
 8001246:	003b      	movs	r3, r7
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f00a fe28 	bl	800bea0 <siprintf>
				CDC_Transmit_FS(txt, strlen(txt));
 8001250:	003b      	movs	r3, r7
 8001252:	0018      	movs	r0, r3
 8001254:	f7fe ff58 	bl	8000108 <strlen>
 8001258:	0003      	movs	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	003b      	movs	r3, r7
 800125e:	0011      	movs	r1, r2
 8001260:	0018      	movs	r0, r3
 8001262:	f00a f861 	bl	800b328 <CDC_Transmit_FS>
#endif
				break;
 8001266:	e047      	b.n	80012f8 <comHandler+0xe8>

			case'c': ;
				//___Ukončení___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <comHandler+0x118>)
 800126a:	003b      	movs	r3, r7
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f00a fe16 	bl	800bea0 <siprintf>
				CDC_Transmit_FS(txt, strlen(txt));
 8001274:	003b      	movs	r3, r7
 8001276:	0018      	movs	r0, r3
 8001278:	f7fe ff46 	bl	8000108 <strlen>
 800127c:	0003      	movs	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	003b      	movs	r3, r7
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f00a f84f 	bl	800b328 <CDC_Transmit_FS>
#endif
				break;
 800128a:	e035      	b.n	80012f8 <comHandler+0xe8>

			case'p': ;
				//___Pauza___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <comHandler+0x11c>)
 800128e:	003b      	movs	r3, r7
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f00a fe04 	bl	800bea0 <siprintf>
				CDC_Transmit_FS(txt, strlen(txt));
 8001298:	003b      	movs	r3, r7
 800129a:	0018      	movs	r0, r3
 800129c:	f7fe ff34 	bl	8000108 <strlen>
 80012a0:	0003      	movs	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	003b      	movs	r3, r7
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f00a f83d 	bl	800b328 <CDC_Transmit_FS>
#endif
				break;
 80012ae:	e023      	b.n	80012f8 <comHandler+0xe8>

			case'k': ;
				//___Kalibrace___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <comHandler+0x120>)
 80012b2:	003b      	movs	r3, r7
 80012b4:	0011      	movs	r1, r2
 80012b6:	0018      	movs	r0, r3
 80012b8:	f00a fdf2 	bl	800bea0 <siprintf>
				CDC_Transmit_FS(txt, strlen(txt));
 80012bc:	003b      	movs	r3, r7
 80012be:	0018      	movs	r0, r3
 80012c0:	f7fe ff22 	bl	8000108 <strlen>
 80012c4:	0003      	movs	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	003b      	movs	r3, r7
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f00a f82b 	bl	800b328 <CDC_Transmit_FS>
#endif
				break;
 80012d2:	e011      	b.n	80012f8 <comHandler+0xe8>

			default: ;
				//___Neplatný příkaz___//
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <comHandler+0x124>)
 80012d6:	003b      	movs	r3, r7
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f00a fde0 	bl	800bea0 <siprintf>
				CDC_Transmit_FS(txt, strlen(txt));
 80012e0:	003b      	movs	r3, r7
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7fe ff10 	bl	8000108 <strlen>
 80012e8:	0003      	movs	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	003b      	movs	r3, r7
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f00a f819 	bl	800b328 <CDC_Transmit_FS>
#endif
				break;
 80012f6:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <comHandler+0x128>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	221f      	movs	r2, #31
 80012fe:	18ba      	adds	r2, r7, r2
 8001300:	0011      	movs	r1, r2
 8001302:	0018      	movs	r0, r3
 8001304:	f000 f88b 	bl	800141e <pop>
 8001308:	0003      	movs	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d18c      	bne.n	8001228 <comHandler+0x18>
			}
		}
		flags.data_received = 0;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <comHandler+0x110>)
 8001310:	785a      	ldrb	r2, [r3, #1]
 8001312:	2101      	movs	r1, #1
 8001314:	438a      	bics	r2, r1
 8001316:	705a      	strb	r2, [r3, #1]
	}

}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b008      	add	sp, #32
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000588 	.word	0x20000588
 8001324:	0800c5a0 	.word	0x0800c5a0
 8001328:	0800c5a8 	.word	0x0800c5a8
 800132c:	0800c5b4 	.word	0x0800c5b4
 8001330:	0800c5bc 	.word	0x0800c5bc
 8001334:	0800c5c8 	.word	0x0800c5c8
 8001338:	200010a8 	.word	0x200010a8

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>

08001346 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 800134e:	2018      	movs	r0, #24
 8001350:	f00a fcd0 	bl	800bcf4 <malloc>
 8001354:	0003      	movs	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <createBuffer+0x1c>
	{
		return NULL;
 800135e:	2300      	movs	r3, #0
 8001360:	e022      	b.n	80013a8 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f00a fcc5 	bl	800bcf4 <malloc>
 800136a:	0003      	movs	r3, r0
 800136c:	001a      	movs	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <createBuffer+0x40>
	{
		free(buffer);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	0018      	movs	r0, r3
 800137e:	f00a fcc3 	bl	800bd08 <free>
		return NULL;
 8001382:	2300      	movs	r3, #0
 8001384:	e010      	b.n	80013a8 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	751a      	strb	r2, [r3, #20]

	return buffer;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	000a      	movs	r2, r1
 80013ba:	1cfb      	adds	r3, r7, #3
 80013bc:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d101      	bne.n	80013ca <push+0x1a>
		return BUFFER_FULL;
 80013c6:	2302      	movs	r3, #2
 80013c8:	e025      	b.n	8001416 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	0019      	movs	r1, r3
 80013d6:	0010      	movs	r0, r2
 80013d8:	f7ff f818 	bl	800040c <__aeabi_idivmod>
 80013dc:	000b      	movs	r3, r1
 80013de:	001a      	movs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	18d3      	adds	r3, r2, r3
 80013f8:	1cfa      	adds	r2, r7, #3
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	db01      	blt.n	800140e <push+0x5e>
 800140a:	2202      	movs	r2, #2
 800140c:	e000      	b.n	8001410 <push+0x60>
 800140e:	2200      	movs	r2, #0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}

0800141e <pop>:
}

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7d1b      	ldrb	r3, [r3, #20]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <pop+0x16>
		return BUFFER_EMPTY;
 8001430:	2301      	movs	r3, #1
 8001432:	e023      	b.n	800147c <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	0019      	movs	r1, r3
 8001450:	0010      	movs	r0, r2
 8001452:	f7fe ffdb 	bl	800040c <__aeabi_idivmod>
 8001456:	000b      	movs	r3, r1
 8001458:	001a      	movs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	4313      	orrs	r3, r2
 8001470:	0fdb      	lsrs	r3, r3, #31
 8001472:	b2db      	uxtb	r3, r3
 8001474:	001a      	movs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0549      	lsls	r1, r1, #21
 80014ac:	430a      	orrs	r2, r1
 80014ae:	61da      	str	r2, [r3, #28]
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_MspInit+0x44>)
 80014b2:	69da      	ldr	r2, [r3, #28]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08d      	sub	sp, #52	; 0x34
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	241c      	movs	r4, #28
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f00a fc1c 	bl	800bd1c <memset>
  if(hadc->Instance==ADC1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <HAL_ADC_MspInit+0x148>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d000      	beq.n	80014f0 <HAL_ADC_MspInit+0x24>
 80014ee:	e08d      	b.n	800160c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f0:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	4b48      	ldr	r3, [pc, #288]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0089      	lsls	r1, r1, #2
 80014fa:	430a      	orrs	r2, r1
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	0309      	lsls	r1, r1, #12
 8001516:	430a      	orrs	r2, r1
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	031b      	lsls	r3, r3, #12
 8001522:	4013      	ands	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	0289      	lsls	r1, r1, #10
 8001532:	430a      	orrs	r2, r1
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	02c9      	lsls	r1, r1, #11
 800154e:	430a      	orrs	r2, r1
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_ADC_MspInit+0x14c>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	02db      	lsls	r3, r3, #11
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001560:	193b      	adds	r3, r7, r4
 8001562:	223f      	movs	r2, #63	; 0x3f
 8001564:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	193b      	adds	r3, r7, r4
 8001568:	2203      	movs	r2, #3
 800156a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	193b      	adds	r3, r7, r4
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	193b      	adds	r3, r7, r4
 8001574:	4a29      	ldr	r2, [pc, #164]	; (800161c <HAL_ADC_MspInit+0x150>)
 8001576:	0019      	movs	r1, r3
 8001578:	0010      	movs	r0, r2
 800157a:	f000 ff17 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800157e:	193b      	adds	r3, r7, r4
 8001580:	22ff      	movs	r2, #255	; 0xff
 8001582:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2203      	movs	r2, #3
 8001588:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	193b      	adds	r3, r7, r4
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	193a      	adds	r2, r7, r4
 8001592:	2390      	movs	r3, #144	; 0x90
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	0011      	movs	r1, r2
 8001598:	0018      	movs	r0, r3
 800159a:	f000 ff07 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	2203      	movs	r2, #3
 80015a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	193b      	adds	r3, r7, r4
 80015a6:	2203      	movs	r2, #3
 80015a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_ADC_MspInit+0x154>)
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f000 fef8 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_ADC_MspInit+0x15c>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0052      	lsls	r2, r2, #1
 80015da:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	00d2      	lsls	r2, r2, #3
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_ADC_MspInit+0x158>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 fd56 	bl	80020a4 <HAL_DMA_Init>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80015fc:	f7ff fe9e 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_ADC_MspInit+0x158>)
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_ADC_MspInit+0x158>)
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b00d      	add	sp, #52	; 0x34
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	40012400 	.word	0x40012400
 8001618:	40021000 	.word	0x40021000
 800161c:	48000800 	.word	0x48000800
 8001620:	48000400 	.word	0x48000400
 8001624:	2000058c 	.word	0x2000058c
 8001628:	40020008 	.word	0x40020008

0800162c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	2414      	movs	r4, #20
 8001636:	193b      	adds	r3, r7, r4
 8001638:	0018      	movs	r0, r3
 800163a:	2314      	movs	r3, #20
 800163c:	001a      	movs	r2, r3
 800163e:	2100      	movs	r1, #0
 8001640:	f00a fb6c 	bl	800bd1c <memset>
  if(hspi->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_SPI_MspInit+0x90>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d131      	bne.n	80016b2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0149      	lsls	r1, r1, #5
 8001658:	430a      	orrs	r2, r1
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	430a      	orrs	r2, r1
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_SPI_MspInit+0x94>)
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2238      	movs	r2, #56	; 0x38
 800168c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2202      	movs	r2, #2
 8001692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2203      	movs	r2, #3
 800169e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_SPI_MspInit+0x98>)
 80016aa:	0019      	movs	r1, r3
 80016ac:	0010      	movs	r0, r2
 80016ae:	f000 fe7d 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b00b      	add	sp, #44	; 0x2c
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40013000 	.word	0x40013000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_TIM_Base_MspInit+0x48>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d115      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0049      	lsls	r1, r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_TIM_Base_MspInit+0x4c>)
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2013      	movs	r0, #19
 80016fc:	f000 fca0 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001700:	2013      	movs	r0, #19
 8001702:	f000 fcb2 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40002000 	.word	0x40002000
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08b      	sub	sp, #44	; 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	2414      	movs	r4, #20
 8001722:	193b      	adds	r3, r7, r4
 8001724:	0018      	movs	r0, r3
 8001726:	2314      	movs	r3, #20
 8001728:	001a      	movs	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00a faf6 	bl	800bd1c <memset>
  if(huart->Instance==USART3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <HAL_UART_MspInit+0xa0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d13a      	bne.n	80017b0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_UART_MspInit+0xa4>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_UART_MspInit+0xa4>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	02c9      	lsls	r1, r1, #11
 8001744:	430a      	orrs	r2, r1
 8001746:	61da      	str	r2, [r3, #28]
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_UART_MspInit+0xa4>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	02db      	lsls	r3, r3, #11
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xa4>)
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_UART_MspInit+0xa4>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0309      	lsls	r1, r1, #12
 8001760:	430a      	orrs	r2, r1
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0xa4>)
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	22c0      	movs	r2, #192	; 0xc0
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	0021      	movs	r1, r4
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2202      	movs	r2, #2
 8001780:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2203      	movs	r2, #3
 800178c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2201      	movs	r2, #1
 8001792:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	187b      	adds	r3, r7, r1
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_UART_MspInit+0xa8>)
 8001798:	0019      	movs	r1, r3
 800179a:	0010      	movs	r0, r2
 800179c:	f000 fe06 	bl	80023ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	201d      	movs	r0, #29
 80017a6:	f000 fc4b 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80017aa:	201d      	movs	r0, #29
 80017ac:	f000 fc5d 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b00b      	add	sp, #44	; 0x2c
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40004800 	.word	0x40004800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f8f0 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 ffa4 	bl	8002748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	0018      	movs	r0, r3
 8001806:	f000 ff9f 	bl	8002748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <DMA1_Channel1_IRQHandler+0x14>)
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fd09 	bl	800222e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	2000058c 	.word	0x2000058c

08001828 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <TIM14_IRQHandler+0x14>)
 800182e:	0018      	movs	r0, r3
 8001830:	f004 fc14 	bl	800605c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20000540 	.word	0x20000540

08001840 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <USART3_4_IRQHandler+0x14>)
 8001846:	0018      	movs	r0, r3
 8001848:	f005 f876 	bl	8006938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	20000458 	.word	0x20000458

08001858 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <USB_IRQHandler+0x14>)
 800185e:	0018      	movs	r0, r3
 8001860:	f001 f8c4 	bl	80029ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	200012ac 	.word	0x200012ac

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f00a f9fe 	bl	800bca0 <__errno>
 80018a4:	0003      	movs	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	425b      	negs	r3, r3
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b006      	add	sp, #24
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20004000 	.word	0x20004000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000210 	.word	0x20000210
 80018d8:	200015b0 	.word	0x200015b0

080018dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001912:	f7ff ffe3 	bl	80018dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001916:	f00a f9c9 	bl	800bcac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7fe ffb5 	bl	8000888 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800192c:	0800c788 	.word	0x0800c788
  ldr r2, =_sbss
 8001930:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001934:	200015b0 	.word	0x200015b0

08001938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_COMP_IRQHandler>
	...

0800193c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_Init+0x24>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_Init+0x24>)
 8001946:	2110      	movs	r1, #16
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f809 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001952:	f7ff fd97 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_InitTick+0x5c>)
 800196e:	681c      	ldr	r4, [r3, #0]
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_InitTick+0x60>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	0019      	movs	r1, r3
 8001976:	23fa      	movs	r3, #250	; 0xfa
 8001978:	0098      	lsls	r0, r3, #2
 800197a:	f7fe fbd7 	bl	800012c <__udivsi3>
 800197e:	0003      	movs	r3, r0
 8001980:	0019      	movs	r1, r3
 8001982:	0020      	movs	r0, r4
 8001984:	f7fe fbd2 	bl	800012c <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fb7d 	bl	800208a <HAL_SYSTICK_Config>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e00f      	b.n	80019b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d80b      	bhi.n	80019b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	2301      	movs	r3, #1
 80019a2:	425b      	negs	r3, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fb4a 	bl	8002040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_InitTick+0x64>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b003      	add	sp, #12
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	001a      	movs	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	18d2      	adds	r2, r2, r3
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_IncTick+0x20>)
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000610 	.word	0x20000610

080019f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_GetTick+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	20000610 	.word	0x20000610

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	001a      	movs	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	189b      	adds	r3, r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	f7ff ffe0 	bl	80019f0 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e125      	b.n	8001cb6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2234      	movs	r2, #52	; 0x34
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fd22 	bl	80014cc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d000      	beq.n	8001a94 <HAL_ADC_Init+0x48>
 8001a92:	e103      	b.n	8001c9c <HAL_ADC_Init+0x250>
 8001a94:	230f      	movs	r3, #15
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d000      	beq.n	8001aa0 <HAL_ADC_Init+0x54>
 8001a9e:	e0fd      	b.n	8001c9c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001aaa:	d000      	beq.n	8001aae <HAL_ADC_Init+0x62>
 8001aac:	e0f6      	b.n	8001c9c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	4a83      	ldr	r2, [pc, #524]	; (8001cc0 <HAL_ADC_Init+0x274>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d112      	bne.n	8001af2 <HAL_ADC_Init+0xa6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d009      	beq.n	8001aee <HAL_ADC_Init+0xa2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0xa6>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_ADC_Init+0xa8>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d116      	bne.n	8001b26 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2218      	movs	r2, #24
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	0899      	lsrs	r1, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4964      	ldr	r1, [pc, #400]	; (8001cc4 <HAL_ADC_Init+0x278>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7e1b      	ldrb	r3, [r3, #24]
 8001b3a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e5b      	ldrb	r3, [r3, #25]
 8001b40:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b42:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7e9b      	ldrb	r3, [r3, #26]
 8001b48:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d002      	beq.n	8001b5a <HAL_ADC_Init+0x10e>
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	e000      	b.n	8001b5c <HAL_ADC_Init+0x110>
 8001b5a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b5c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b62:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_Init+0x124>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_Init+0x126>
 8001b70:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b72:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2124      	movs	r1, #36	; 0x24
 8001b78:	5c5b      	ldrb	r3, [r3, r1]
 8001b7a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b7c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7edb      	ldrb	r3, [r3, #27]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d115      	bne.n	8001bb8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e9b      	ldrb	r3, [r3, #26]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0252      	lsls	r2, r2, #9
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	23c2      	movs	r3, #194	; 0xc2
 8001bbe:	33ff      	adds	r3, #255	; 0xff
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d007      	beq.n	8001bd4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68d9      	ldr	r1, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	055b      	lsls	r3, r3, #21
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d01b      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d017      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d013      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d00f      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00b      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d007      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d003      	beq.n	8001c28 <HAL_ADC_Init+0x1dc>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	d112      	bne.n	8001c4e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2107      	movs	r1, #7
 8001c34:	438a      	bics	r2, r1
 8001c36:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6959      	ldr	r1, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	2207      	movs	r2, #7
 8001c44:	401a      	ands	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_ADC_Init+0x27c>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d10b      	bne.n	8001c76 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c74:	e01c      	b.n	8001cb0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	2212      	movs	r2, #18
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	2210      	movs	r2, #16
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c92:	230f      	movs	r3, #15
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c9a:	e009      	b.n	8001cb0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	fffffefd 	.word	0xfffffefd
 8001cc4:	fffe0219 	.word	0xfffe0219
 8001cc8:	833fffe7 	.word	0x833fffe7

08001ccc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d011      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d00d      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d009      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d005      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d001      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2234      	movs	r2, #52	; 0x34
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x54>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0d0      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1f6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2234      	movs	r2, #52	; 0x34
 8001d24:	2101      	movs	r1, #1
 8001d26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4013      	ands	r3, r2
 8001d32:	d000      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x6a>
 8001d34:	e0b4      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a64      	ldr	r2, [pc, #400]	; (8001ecc <HAL_ADC_ConfigChannel+0x200>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x76>
 8001d40:	e082      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d037      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d033      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d02f      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d02b      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d027      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d023      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d01f      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2107      	movs	r1, #7
 8001da8:	400b      	ands	r3, r1
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d012      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2107      	movs	r1, #7
 8001dba:	438a      	bics	r2, r1
 8001dbc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2207      	movs	r2, #7
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d007      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x120>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d003      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x120>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d163      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001dec:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_ADC_ConfigChannel+0x204>)
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d009      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x140>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b11      	cmp	r3, #17
 8001dfe:	d102      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x13a>
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	03db      	lsls	r3, r3, #15
 8001e04:	e004      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x144>
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	045b      	lsls	r3, r3, #17
 8001e0a:	e001      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x144>
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_ADC_ConfigChannel+0x204>)
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d14a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_ADC_ConfigChannel+0x208>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	492d      	ldr	r1, [pc, #180]	; (8001ed8 <HAL_ADC_ConfigChannel+0x20c>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7fe f981 	bl	800012c <__udivsi3>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	001a      	movs	r2, r3
 8001e2e:	0013      	movs	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	189b      	adds	r3, r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x16e>
 8001e46:	e035      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	4099      	lsls	r1, r3
 8001e56:	000b      	movs	r3, r1
 8001e58:	43d9      	mvns	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	400a      	ands	r2, r1
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d007      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x1ae>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b11      	cmp	r3, #17
 8001e70:	d003      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x1ae>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d11c      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_ADC_ConfigChannel+0x204>)
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d007      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x1ca>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x1c6>
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_ConfigChannel+0x210>)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x1cc>
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_ADC_ConfigChannel+0x214>)
 8001e94:	e000      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x1cc>
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_ADC_ConfigChannel+0x218>)
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_ADC_ConfigChannel+0x204>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e009      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2234      	movs	r2, #52	; 0x34
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	00001001 	.word	0x00001001
 8001ed0:	40012708 	.word	0x40012708
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	000f4240 	.word	0x000f4240
 8001edc:	ffbfffff 	.word	0xffbfffff
 8001ee0:	feffffff 	.word	0xfeffffff
 8001ee4:	ff7fffff 	.word	0xff7fffff

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	0002      	movs	r2, r0
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8001efa:	d809      	bhi.n	8001f10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	001a      	movs	r2, r3
 8001f02:	231f      	movs	r3, #31
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_EnableIRQ+0x30>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
  }
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d828      	bhi.n	8001f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f32:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	33c0      	adds	r3, #192	; 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	589b      	ldr	r3, [r3, r2]
 8001f42:	1dfa      	adds	r2, r7, #7
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	0011      	movs	r1, r2
 8001f48:	2203      	movs	r2, #3
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	21ff      	movs	r1, #255	; 0xff
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	401a      	ands	r2, r3
 8001f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	401a      	ands	r2, r3
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	2303      	movs	r3, #3
 8001f6a:	4003      	ands	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	33c0      	adds	r3, #192	; 0xc0
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f82:	e031      	b.n	8001fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	400b      	ands	r3, r1
 8001f90:	3b08      	subs	r3, #8
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3306      	adds	r3, #6
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1dfa      	adds	r2, r7, #7
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	00d2      	lsls	r2, r2, #3
 8001faa:	21ff      	movs	r1, #255	; 0xff
 8001fac:	4091      	lsls	r1, r2
 8001fae:	000a      	movs	r2, r1
 8001fb0:	43d2      	mvns	r2, r2
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	001c      	movs	r4, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	4023      	ands	r3, r4
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	3306      	adds	r3, #6
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	18c3      	adds	r3, r0, r3
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b003      	add	sp, #12
 8001fee:	bd90      	pop	{r4, r7, pc}
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	045b      	lsls	r3, r3, #17
 8002008:	429a      	cmp	r2, r3
 800200a:	d301      	bcc.n	8002010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200c:	2301      	movs	r3, #1
 800200e:	e010      	b.n	8002032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <SysTick_Config+0x44>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	3a01      	subs	r2, #1
 8002016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002018:	2301      	movs	r3, #1
 800201a:	425b      	negs	r3, r3
 800201c:	2103      	movs	r1, #3
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff ff7c 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x44>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x44>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	210f      	movs	r1, #15
 800204c:	187b      	adds	r3, r7, r1
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	187b      	adds	r3, r7, r1
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b25b      	sxtb	r3, r3
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	0002      	movs	r2, r0
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ff33 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff ffaf 	bl	8001ff8 <SysTick_Config>
 800209a:	0003      	movs	r3, r0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e036      	b.n	8002128 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2221      	movs	r2, #33	; 0x21
 80020be:	2102      	movs	r1, #2
 80020c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_DMA_Init+0x8c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f932 	bl	8002374 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2221      	movs	r2, #33	; 0x21
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}  
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	ffffc00f 	.word	0xffffc00f

08002134 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2221      	movs	r2, #33	; 0x21
 8002140:	5c9b      	ldrb	r3, [r3, r2]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e020      	b.n	800219c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	210e      	movs	r1, #14
 8002166:	438a      	bics	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	2101      	movs	r1, #1
 8002184:	4091      	lsls	r1, r2
 8002186:	000a      	movs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	2100      	movs	r1, #0
 8002198:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	210f      	movs	r1, #15
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2221      	movs	r2, #33	; 0x21
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d006      	beq.n	80021ce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2204      	movs	r2, #4
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e028      	b.n	8002220 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	210e      	movs	r1, #14
 80021da:	438a      	bics	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	438a      	bics	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2101      	movs	r1, #1
 80021f8:	4091      	lsls	r1, r2
 80021fa:	000a      	movs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	0010      	movs	r0, r2
 800221e:	4798      	blx	r3
    } 
  }
  return status;
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	781b      	ldrb	r3, [r3, #0]
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	0013      	movs	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	d024      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x72>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2204      	movs	r2, #4
 800225a:	4013      	ands	r3, r2
 800225c:	d020      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2220      	movs	r2, #32
 8002266:	4013      	ands	r3, r2
 8002268:	d107      	bne.n	800227a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2104      	movs	r1, #4
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	2104      	movs	r1, #4
 8002284:	4091      	lsls	r1, r2
 8002286:	000a      	movs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <HAL_DMA_IRQHandler+0x66>
 8002292:	e06a      	b.n	800236a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	0010      	movs	r0, r2
 800229c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800229e:	e064      	b.n	800236a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2202      	movs	r2, #2
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	d02b      	beq.n	8002308 <HAL_DMA_IRQHandler+0xda>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d027      	beq.n	8002308 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	4013      	ands	r3, r2
 80022c2:	d10b      	bne.n	80022dc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	210a      	movs	r1, #10
 80022d0:	438a      	bics	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2221      	movs	r2, #33	; 0x21
 80022d8:	2101      	movs	r1, #1
 80022da:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	2102      	movs	r1, #2
 80022e6:	4091      	lsls	r1, r2
 80022e8:	000a      	movs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d036      	beq.n	800236a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	0010      	movs	r0, r2
 8002304:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002306:	e030      	b.n	800236a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	d028      	beq.n	800236a <HAL_DMA_IRQHandler+0x13c>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2208      	movs	r2, #8
 800231c:	4013      	ands	r3, r2
 800231e:	d024      	beq.n	800236a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	210e      	movs	r1, #14
 800232c:	438a      	bics	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	2101      	movs	r1, #1
 800233a:	4091      	lsls	r1, r2
 800233c:	000a      	movs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	0010      	movs	r0, r2
 8002366:	4798      	blx	r3
    }
   }
}  
 8002368:	e7ff      	b.n	800236a <HAL_DMA_IRQHandler+0x13c>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <DMA_CalcBaseAndBitshift+0x30>)
 8002382:	4694      	mov	ip, r2
 8002384:	4463      	add	r3, ip
 8002386:	2114      	movs	r1, #20
 8002388:	0018      	movs	r0, r3
 800238a:	f7fd fecf 	bl	800012c <__udivsi3>
 800238e:	0003      	movs	r3, r0
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <DMA_CalcBaseAndBitshift+0x34>)
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	bffdfff8 	.word	0xbffdfff8
 80023a8:	40020000 	.word	0x40020000

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e155      	b.n	8002668 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4091      	lsls	r1, r2
 80023c6:	000a      	movs	r2, r1
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d100      	bne.n	80023d4 <HAL_GPIO_Init+0x28>
 80023d2:	e146      	b.n	8002662 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	4013      	ands	r3, r2
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2203      	movs	r2, #3
 80023e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	409a      	lsls	r2, r3
 80023fa:	0013      	movs	r3, r2
 80023fc:	43da      	mvns	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	2201      	movs	r2, #1
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	4013      	ands	r3, r2
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	58d3      	ldr	r3, [r2, r3]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2207      	movs	r2, #7
 80024a8:	4013      	ands	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	43da      	mvns	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2107      	movs	r1, #7
 80024c2:	400b      	ands	r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	409a      	lsls	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	6939      	ldr	r1, [r7, #16]
 80024dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	43da      	mvns	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	401a      	ands	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	409a      	lsls	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	23c0      	movs	r3, #192	; 0xc0
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d100      	bne.n	8002520 <HAL_GPIO_Init+0x174>
 800251e:	e0a0      	b.n	8002662 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_GPIO_Init+0x2d4>)
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_GPIO_Init+0x2d4>)
 8002526:	2101      	movs	r1, #1
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_GPIO_Init+0x2d4>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_GPIO_Init+0x2d8>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	589b      	ldr	r3, [r3, r2]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2203      	movs	r2, #3
 800254a:	4013      	ands	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	43da      	mvns	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	2390      	movs	r3, #144	; 0x90
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	429a      	cmp	r2, r3
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x1ee>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_GPIO_Init+0x2dc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x1ea>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_GPIO_Init+0x2e0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x1e6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a45      	ldr	r2, [pc, #276]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x1e2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a44      	ldr	r2, [pc, #272]	; (8002694 <HAL_GPIO_Init+0x2e8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x1de>
 8002586:	2304      	movs	r3, #4
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x1f0>
 800258a:	2305      	movs	r3, #5
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x1f0>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x1f0>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x1f0>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x1f0>
 800259a:	2300      	movs	r3, #0
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	2103      	movs	r1, #3
 80025a0:	400a      	ands	r2, r1
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_GPIO_Init+0x2d8>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	025b      	lsls	r3, r3, #9
 80025d2:	4013      	ands	r3, r2
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43da      	mvns	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	035b      	lsls	r3, r3, #13
 8002626:	4013      	ands	r3, r2
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43da      	mvns	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	4013      	ands	r3, r2
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	40da      	lsrs	r2, r3
 8002670:	1e13      	subs	r3, r2, #0
 8002672:	d000      	beq.n	8002676 <HAL_GPIO_Init+0x2ca>
 8002674:	e6a2      	b.n	80023bc <HAL_GPIO_Init+0x10>
  } 
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b006      	add	sp, #24
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40010000 	.word	0x40010000
 8002688:	48000400 	.word	0x48000400
 800268c:	48000800 	.word	0x48000800
 8002690:	48000c00 	.word	0x48000c00
 8002694:	48001000 	.word	0x48001000
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	000a      	movs	r2, r1
 80026a6:	1cbb      	adds	r3, r7, #2
 80026a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	1cba      	adds	r2, r7, #2
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	4013      	ands	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026b6:	230f      	movs	r3, #15
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
  }
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	0008      	movs	r0, r1
 80026e0:	0011      	movs	r1, r2
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c02      	adds	r2, r0, #0
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	1c7b      	adds	r3, r7, #1
 80026ea:	1c0a      	adds	r2, r1, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ee:	1c7b      	adds	r3, r7, #1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fe:	e003      	b.n	8002708 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002700:	1cbb      	adds	r3, r7, #2
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	000a      	movs	r2, r1
 800271a:	1cbb      	adds	r3, r7, #2
 800271c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002724:	1cbb      	adds	r3, r7, #2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	1cb9      	adds	r1, r7, #2
 8002734:	8809      	ldrh	r1, [r1, #0]
 8002736:	400b      	ands	r3, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	0002      	movs	r2, r0
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	1dba      	adds	r2, r7, #6
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	4013      	ands	r3, r2
 800275e:	d008      	beq.n	8002772 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002762:	1dba      	adds	r2, r7, #6
 8002764:	8812      	ldrh	r2, [r2, #0]
 8002766:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	0018      	movs	r0, r3
 800276e:	f7fe f853 	bl	8000818 <HAL_GPIO_EXTI_Callback>
  }
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	b08b      	sub	sp, #44	; 0x2c
 8002784:	af06      	add	r7, sp, #24
 8002786:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0ff      	b.n	8002992 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a81      	ldr	r2, [pc, #516]	; (800299c <HAL_PCD_Init+0x21c>)
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	23aa      	movs	r3, #170	; 0xaa
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	2100      	movs	r1, #0
 80027a6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f008 ff1a 	bl	800b5e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a7a      	ldr	r2, [pc, #488]	; (800299c <HAL_PCD_Init+0x21c>)
 80027b4:	2103      	movs	r1, #3
 80027b6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f004 ffb9 	bl	8007734 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e058      	b.n	800287e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027cc:	200f      	movs	r0, #15
 80027ce:	183b      	adds	r3, r7, r0
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	0013      	movs	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	189b      	adds	r3, r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	18cb      	adds	r3, r1, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	0013      	movs	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	183a      	adds	r2, r7, r0
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027fc:	0004      	movs	r4, r0
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	193b      	adds	r3, r7, r4
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b298      	uxth	r0, r3
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	0013      	movs	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	189b      	adds	r3, r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	18cb      	adds	r3, r1, r3
 8002814:	3336      	adds	r3, #54	; 0x36
 8002816:	1c02      	adds	r2, r0, #0
 8002818:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800281a:	193b      	adds	r3, r7, r4
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	0013      	movs	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	189b      	adds	r3, r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	18cb      	adds	r3, r1, r3
 800282c:	3303      	adds	r3, #3
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	0013      	movs	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	189b      	adds	r3, r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	18cb      	adds	r3, r1, r3
 8002842:	3338      	adds	r3, #56	; 0x38
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	0013      	movs	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	189b      	adds	r3, r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	18cb      	adds	r3, r1, r3
 8002858:	333c      	adds	r3, #60	; 0x3c
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800285e:	193b      	adds	r3, r7, r4
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	0013      	movs	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	189b      	adds	r3, r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	18cb      	adds	r3, r1, r3
 800286e:	3340      	adds	r3, #64	; 0x40
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	193b      	adds	r3, r7, r4
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	193b      	adds	r3, r7, r4
 800287a:	3201      	adds	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	210f      	movs	r1, #15
 8002880:	187b      	adds	r3, r7, r1
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d39f      	bcc.n	80027cc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e056      	b.n	8002942 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002894:	240f      	movs	r4, #15
 8002896:	193b      	adds	r3, r7, r4
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	236a      	movs	r3, #106	; 0x6a
 800289e:	33ff      	adds	r3, #255	; 0xff
 80028a0:	0019      	movs	r1, r3
 80028a2:	0013      	movs	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	18c3      	adds	r3, r0, r3
 80028ac:	185b      	adds	r3, r3, r1
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	23b4      	movs	r3, #180	; 0xb4
 80028ba:	0059      	lsls	r1, r3, #1
 80028bc:	0013      	movs	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	18c3      	adds	r3, r0, r3
 80028c6:	185b      	adds	r3, r3, r1
 80028c8:	193a      	adds	r2, r7, r4
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	236c      	movs	r3, #108	; 0x6c
 80028d6:	33ff      	adds	r3, #255	; 0xff
 80028d8:	0019      	movs	r1, r3
 80028da:	0013      	movs	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	18c3      	adds	r3, r0, r3
 80028e4:	185b      	adds	r3, r3, r1
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	23bc      	movs	r3, #188	; 0xbc
 80028f2:	0059      	lsls	r1, r3, #1
 80028f4:	0013      	movs	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	18c3      	adds	r3, r0, r3
 80028fe:	185b      	adds	r3, r3, r1
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002904:	193b      	adds	r3, r7, r4
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	23be      	movs	r3, #190	; 0xbe
 800290c:	0059      	lsls	r1, r3, #1
 800290e:	0013      	movs	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	189b      	adds	r3, r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	18c3      	adds	r3, r0, r3
 8002918:	185b      	adds	r3, r3, r1
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800291e:	193b      	adds	r3, r7, r4
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	23c0      	movs	r3, #192	; 0xc0
 8002926:	0059      	lsls	r1, r3, #1
 8002928:	0013      	movs	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	189b      	adds	r3, r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	18c3      	adds	r3, r0, r3
 8002932:	185b      	adds	r3, r3, r1
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	193b      	adds	r3, r7, r4
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	193b      	adds	r3, r7, r4
 800293e:	3201      	adds	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	230f      	movs	r3, #15
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d3a1      	bcc.n	8002894 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	466a      	mov	r2, sp
 8002958:	0011      	movs	r1, r2
 800295a:	001a      	movs	r2, r3
 800295c:	3210      	adds	r2, #16
 800295e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002960:	c170      	stmia	r1!, {r4, r5, r6}
 8002962:	ca30      	ldmia	r2!, {r4, r5}
 8002964:	c130      	stmia	r1!, {r4, r5}
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f004 fefc 	bl	8007768 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_PCD_Init+0x21c>)
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d103      	bne.n	8002990 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f001 fd34 	bl	80043f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b005      	add	sp, #20
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	000002a9 	.word	0x000002a9

080029a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	23aa      	movs	r3, #170	; 0xaa
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_PCD_Start+0x18>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e014      	b.n	80029e2 <HAL_PCD_Start+0x42>
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	23aa      	movs	r3, #170	; 0xaa
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	2101      	movs	r1, #1
 80029c0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f004 fe9e 	bl	8007708 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f006 fdf9 	bl	80095c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	23aa      	movs	r3, #170	; 0xaa
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	2100      	movs	r1, #0
 80029de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f006 fdfb 	bl	80095f4 <USB_ReadInterrupts>
 80029fe:	0002      	movs	r2, r0
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	401a      	ands	r2, r3
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d103      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fbbb 	bl	800318c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f006 fdea 	bl	80095f4 <USB_ReadInterrupts>
 8002a20:	0002      	movs	r2, r0
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	401a      	ands	r2, r3
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d114      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2244      	movs	r2, #68	; 0x44
 8002a36:	5a9b      	ldrh	r3, [r3, r2]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	49a2      	ldr	r1, [pc, #648]	; (8002cc8 <HAL_PCD_IRQHandler+0x2dc>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	b291      	uxth	r1, r2
 8002a44:	2244      	movs	r2, #68	; 0x44
 8002a46:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f008 fe55 	bl	800b6fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2100      	movs	r1, #0
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f945 	bl	8002ce4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f006 fdc8 	bl	80095f4 <USB_ReadInterrupts>
 8002a64:	0002      	movs	r2, r0
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	01db      	lsls	r3, r3, #7
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	01db      	lsls	r3, r3, #7
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10b      	bne.n	8002a8c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2244      	movs	r2, #68	; 0x44
 8002a7a:	5a9b      	ldrh	r3, [r3, r2]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4992      	ldr	r1, [pc, #584]	; (8002ccc <HAL_PCD_IRQHandler+0x2e0>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	b291      	uxth	r1, r2
 8002a88:	2244      	movs	r2, #68	; 0x44
 8002a8a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f006 fdaf 	bl	80095f4 <USB_ReadInterrupts>
 8002a96:	0002      	movs	r2, r0
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	019b      	lsls	r3, r3, #6
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10b      	bne.n	8002abe <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2244      	movs	r2, #68	; 0x44
 8002aac:	5a9b      	ldrh	r3, [r3, r2]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4986      	ldr	r1, [pc, #536]	; (8002cd0 <HAL_PCD_IRQHandler+0x2e4>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	b291      	uxth	r1, r2
 8002aba:	2244      	movs	r2, #68	; 0x44
 8002abc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f006 fd96 	bl	80095f4 <USB_ReadInterrupts>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	401a      	ands	r2, r3
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d137      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	5a9b      	ldrh	r3, [r3, r2]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	438a      	bics	r2, r1
 8002aea:	b291      	uxth	r1, r2
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2240      	movs	r2, #64	; 0x40
 8002af6:	5a9b      	ldrh	r3, [r3, r2]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2108      	movs	r1, #8
 8002b00:	438a      	bics	r2, r1
 8002b02:	b291      	uxth	r1, r2
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	23b8      	movs	r3, #184	; 0xb8
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d109      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	23b8      	movs	r3, #184	; 0xb8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2100      	movs	r1, #0
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 fc92 	bl	800444c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f008 fe26 	bl	800b77c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2244      	movs	r2, #68	; 0x44
 8002b36:	5a9b      	ldrh	r3, [r3, r2]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_PCD_IRQHandler+0x2e8>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	b291      	uxth	r1, r2
 8002b44:	2244      	movs	r2, #68	; 0x44
 8002b46:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f006 fd51 	bl	80095f4 <USB_ReadInterrupts>
 8002b52:	0002      	movs	r2, r0
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	401a      	ands	r2, r3
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d127      	bne.n	8002bb2 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	5a9b      	ldrh	r3, [r3, r2]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2108      	movs	r1, #8
 8002b72:	430a      	orrs	r2, r1
 8002b74:	b291      	uxth	r1, r2
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2244      	movs	r2, #68	; 0x44
 8002b80:	5a9b      	ldrh	r3, [r3, r2]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4953      	ldr	r1, [pc, #332]	; (8002cd8 <HAL_PCD_IRQHandler+0x2ec>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	b291      	uxth	r1, r2
 8002b8e:	2244      	movs	r2, #68	; 0x44
 8002b90:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	5a9b      	ldrh	r3, [r3, r2]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	b291      	uxth	r1, r2
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f008 fdc9 	bl	800b744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f006 fd1c 	bl	80095f4 <USB_ReadInterrupts>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d145      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2244      	movs	r2, #68	; 0x44
 8002bcc:	5a9b      	ldrh	r3, [r3, r2]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	b291      	uxth	r1, r2
 8002bda:	2244      	movs	r2, #68	; 0x44
 8002bdc:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	23b8      	movs	r3, #184	; 0xb8
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	5cd3      	ldrb	r3, [r2, r3]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d12f      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	5a9b      	ldrh	r3, [r3, r2]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	b291      	uxth	r1, r2
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	5a9b      	ldrh	r3, [r3, r2]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2108      	movs	r1, #8
 8002c12:	430a      	orrs	r2, r1
 8002c14:	b291      	uxth	r1, r2
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	23b8      	movs	r3, #184	; 0xb8
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	2101      	movs	r1, #1
 8002c22:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2254      	movs	r2, #84	; 0x54
 8002c2a:	5a9b      	ldrh	r3, [r3, r2]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	223c      	movs	r2, #60	; 0x3c
 8002c32:	4013      	ands	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	23b9      	movs	r3, #185	; 0xb9
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2101      	movs	r1, #1
 8002c42:	0018      	movs	r0, r3
 8002c44:	f001 fc02 	bl	800444c <HAL_PCDEx_LPM_Callback>
 8002c48:	e003      	b.n	8002c52 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f008 fd79 	bl	800b744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f006 fccc 	bl	80095f4 <USB_ReadInterrupts>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	401a      	ands	r2, r3
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10f      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2244      	movs	r2, #68	; 0x44
 8002c72:	5a9b      	ldrh	r3, [r3, r2]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4918      	ldr	r1, [pc, #96]	; (8002cdc <HAL_PCD_IRQHandler+0x2f0>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	b291      	uxth	r1, r2
 8002c80:	2244      	movs	r2, #68	; 0x44
 8002c82:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f008 fd28 	bl	800b6dc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f006 fcaf 	bl	80095f4 <USB_ReadInterrupts>
 8002c96:	0002      	movs	r2, r0
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d10b      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2244      	movs	r2, #68	; 0x44
 8002cac:	5a9b      	ldrh	r3, [r3, r2]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	490a      	ldr	r1, [pc, #40]	; (8002ce0 <HAL_PCD_IRQHandler+0x2f4>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	b291      	uxth	r1, r2
 8002cba:	2244      	movs	r2, #68	; 0x44
 8002cbc:	5299      	strh	r1, [r3, r2]
  }
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	fffffbff 	.word	0xfffffbff
 8002ccc:	ffffbfff 	.word	0xffffbfff
 8002cd0:	ffffdfff 	.word	0xffffdfff
 8002cd4:	ffffefff 	.word	0xffffefff
 8002cd8:	fffff7ff 	.word	0xfffff7ff
 8002cdc:	fffffdff 	.word	0xfffffdff
 8002ce0:	fffffeff 	.word	0xfffffeff

08002ce4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	000a      	movs	r2, r1
 8002cee:	1cfb      	adds	r3, r7, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	23aa      	movs	r3, #170	; 0xaa
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_SetAddress+0x1e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e017      	b.n	8002d32 <HAL_PCD_SetAddress+0x4e>
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	23aa      	movs	r3, #170	; 0xaa
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	2101      	movs	r1, #1
 8002d0a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1cfa      	adds	r2, r7, #3
 8002d10:	2124      	movs	r1, #36	; 0x24
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	1cfb      	adds	r3, r7, #3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	0019      	movs	r1, r3
 8002d20:	0010      	movs	r0, r2
 8002d22:	f006 fc3d 	bl	80095a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	23aa      	movs	r3, #170	; 0xaa
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	000c      	movs	r4, r1
 8002d44:	0010      	movs	r0, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	1cfb      	adds	r3, r7, #3
 8002d4a:	1c22      	adds	r2, r4, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	003b      	movs	r3, r7
 8002d50:	1c02      	adds	r2, r0, #0
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	1cbb      	adds	r3, r7, #2
 8002d56:	1c0a      	adds	r2, r1, #0
 8002d58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d5a:	230b      	movs	r3, #11
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d62:	1cfb      	adds	r3, r7, #3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da0f      	bge.n	8002d8c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	1cfb      	adds	r3, r7, #3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2207      	movs	r2, #7
 8002d72:	4013      	ands	r3, r2
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	0013      	movs	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	18d3      	adds	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	705a      	strb	r2, [r3, #1]
 8002d8a:	e00f      	b.n	8002dac <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8c:	1cfb      	adds	r3, r7, #3
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2207      	movs	r2, #7
 8002d92:	401a      	ands	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3369      	adds	r3, #105	; 0x69
 8002d9e:	33ff      	adds	r3, #255	; 0xff
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	18d3      	adds	r3, r2, r3
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dac:	1cfb      	adds	r3, r7, #3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2207      	movs	r2, #7
 8002db2:	4013      	ands	r3, r2
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dba:	003b      	movs	r3, r7
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1cba      	adds	r2, r7, #2
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ddc:	1cbb      	adds	r3, r7, #2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	23aa      	movs	r3, #170	; 0xaa
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_EP_Open+0xc0>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e013      	b.n	8002e22 <HAL_PCD_EP_Open+0xe8>
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	23aa      	movs	r3, #170	; 0xaa
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	2101      	movs	r1, #1
 8002e02:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f004 fcd7 	bl	80077c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	23aa      	movs	r3, #170	; 0xaa
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	2100      	movs	r1, #0
 8002e1a:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	781b      	ldrb	r3, [r3, #0]
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b005      	add	sp, #20
 8002e28:	bd90      	pop	{r4, r7, pc}

08002e2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	000a      	movs	r2, r1
 8002e34:	1cfb      	adds	r3, r7, #3
 8002e36:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e38:	1cfb      	adds	r3, r7, #3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da0f      	bge.n	8002e62 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	1cfb      	adds	r3, r7, #3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	18d3      	adds	r3, r2, r3
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	705a      	strb	r2, [r3, #1]
 8002e60:	e00f      	b.n	8002e82 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	1cfb      	adds	r3, r7, #3
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2207      	movs	r2, #7
 8002e68:	401a      	ands	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	3369      	adds	r3, #105	; 0x69
 8002e74:	33ff      	adds	r3, #255	; 0xff
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e82:	1cfb      	adds	r3, r7, #3
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	23aa      	movs	r3, #170	; 0xaa
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_EP_Close+0x76>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e011      	b.n	8002ec4 <HAL_PCD_EP_Close+0x9a>
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	23aa      	movs	r3, #170	; 0xaa
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f004 fff8 	bl	8007ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	23aa      	movs	r3, #170	; 0xaa
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	200b      	movs	r0, #11
 8002eda:	183b      	adds	r3, r7, r0
 8002edc:	1c0a      	adds	r2, r1, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee0:	0001      	movs	r1, r0
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	401a      	ands	r2, r3
 8002eea:	0013      	movs	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	3369      	adds	r3, #105	; 0x69
 8002ef4:	33ff      	adds	r3, #255	; 0xff
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2207      	movs	r2, #7
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d107      	bne.n	8002f3c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	0011      	movs	r1, r2
 8002f34:	0018      	movs	r0, r3
 8002f36:	f005 f977 	bl	8008228 <USB_EPStartXfer>
 8002f3a:	e006      	b.n	8002f4a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f005 f96f 	bl	8008228 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b006      	add	sp, #24
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	000a      	movs	r2, r1
 8002f5e:	1cfb      	adds	r3, r7, #3
 8002f60:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f62:	1cfb      	adds	r3, r7, #3
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2207      	movs	r2, #7
 8002f68:	401a      	ands	r2, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	23c2      	movs	r3, #194	; 0xc2
 8002f6e:	0059      	lsls	r1, r3, #1
 8002f70:	0013      	movs	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	18c3      	adds	r3, r0, r3
 8002f7a:	185b      	adds	r3, r3, r1
 8002f7c:	681b      	ldr	r3, [r3, #0]
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	200b      	movs	r0, #11
 8002f94:	183b      	adds	r3, r7, r0
 8002f96:	1c0a      	adds	r2, r1, #0
 8002f98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	18d3      	adds	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2224      	movs	r2, #36	; 0x24
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fe6:	183b      	adds	r3, r7, r0
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2207      	movs	r2, #7
 8002fec:	4013      	ands	r3, r2
 8002fee:	d107      	bne.n	8003000 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f005 f915 	bl	8008228 <USB_EPStartXfer>
 8002ffe:	e006      	b.n	800300e <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	0011      	movs	r1, r2
 8003008:	0018      	movs	r0, r3
 800300a:	f005 f90d 	bl	8008228 <USB_EPStartXfer>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b006      	add	sp, #24
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	000a      	movs	r2, r1
 8003022:	1cfb      	adds	r3, r7, #3
 8003024:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003026:	1cfb      	adds	r3, r7, #3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2207      	movs	r2, #7
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d901      	bls.n	800303a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e046      	b.n	80030c8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303a:	1cfb      	adds	r3, r7, #3
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b25b      	sxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	da0f      	bge.n	8003064 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	1cfb      	adds	r3, r7, #3
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2207      	movs	r2, #7
 800304a:	4013      	ands	r3, r2
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	0013      	movs	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	189b      	adds	r3, r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	18d3      	adds	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00d      	b.n	8003080 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003064:	1cfb      	adds	r3, r7, #3
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	0013      	movs	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	189b      	adds	r3, r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3369      	adds	r3, #105	; 0x69
 8003072:	33ff      	adds	r3, #255	; 0xff
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003086:	1cfb      	adds	r3, r7, #3
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2207      	movs	r2, #7
 800308c:	4013      	ands	r3, r2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	23aa      	movs	r3, #170	; 0xaa
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_PCD_EP_SetStall+0x8c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e011      	b.n	80030c8 <HAL_PCD_EP_SetStall+0xb0>
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	23aa      	movs	r3, #170	; 0xaa
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	2101      	movs	r1, #1
 80030ac:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f006 f970 	bl	800939c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	23aa      	movs	r3, #170	; 0xaa
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	2100      	movs	r1, #0
 80030c4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	000a      	movs	r2, r1
 80030da:	1cfb      	adds	r3, r7, #3
 80030dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030de:	1cfb      	adds	r3, r7, #3
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	220f      	movs	r2, #15
 80030e4:	401a      	ands	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d901      	bls.n	80030f2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e048      	b.n	8003184 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f2:	1cfb      	adds	r3, r7, #3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b25b      	sxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da0f      	bge.n	800311c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	1cfb      	adds	r3, r7, #3
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2207      	movs	r2, #7
 8003102:	4013      	ands	r3, r2
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	0013      	movs	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	189b      	adds	r3, r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	705a      	strb	r2, [r3, #1]
 800311a:	e00f      	b.n	800313c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311c:	1cfb      	adds	r3, r7, #3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2207      	movs	r2, #7
 8003122:	401a      	ands	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	189b      	adds	r3, r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	3369      	adds	r3, #105	; 0x69
 800312e:	33ff      	adds	r3, #255	; 0xff
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	1cfb      	adds	r3, r7, #3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2207      	movs	r2, #7
 8003148:	4013      	ands	r3, r2
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	23aa      	movs	r3, #170	; 0xaa
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_PCD_EP_ClrStall+0x90>
 800315c:	2302      	movs	r3, #2
 800315e:	e011      	b.n	8003184 <HAL_PCD_EP_ClrStall+0xb4>
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	23aa      	movs	r3, #170	; 0xaa
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	2101      	movs	r1, #1
 8003168:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f006 f962 	bl	800943c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	23aa      	movs	r3, #170	; 0xaa
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	2100      	movs	r1, #0
 8003180:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}

0800318c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800318c:	b5b0      	push	{r4, r5, r7, lr}
 800318e:	b096      	sub	sp, #88	; 0x58
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003194:	f000 fbd8 	bl	8003948 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2056      	movs	r0, #86	; 0x56
 800319e:	183b      	adds	r3, r7, r0
 80031a0:	2144      	movs	r1, #68	; 0x44
 80031a2:	5a52      	ldrh	r2, [r2, r1]
 80031a4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	2455      	movs	r4, #85	; 0x55
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	210f      	movs	r1, #15
 80031b2:	400a      	ands	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d000      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x34>
 80031be:	e179      	b.n	80034b4 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80031c0:	183b      	adds	r3, r7, r0
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2210      	movs	r2, #16
 80031c6:	4013      	ands	r3, r2
 80031c8:	d154      	bne.n	8003274 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	200e      	movs	r0, #14
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	49af      	ldr	r1, [pc, #700]	; (8003494 <PCD_EP_ISR_Handler+0x308>)
 80031d8:	400a      	ands	r2, r1
 80031da:	801a      	strh	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	183a      	adds	r2, r7, r0
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	49ac      	ldr	r1, [pc, #688]	; (8003498 <PCD_EP_ISR_Handler+0x30c>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3328      	adds	r3, #40	; 0x28
 80031f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2250      	movs	r2, #80	; 0x50
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	001a      	movs	r2, r3
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	18d2      	adds	r2, r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	4aa3      	ldr	r2, [pc, #652]	; (800349c <PCD_EP_ISR_Handler+0x310>)
 800320e:	4694      	mov	ip, r2
 8003210:	4463      	add	r3, ip
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	059b      	lsls	r3, r3, #22
 8003216:	0d9a      	lsrs	r2, r3, #22
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	18d2      	adds	r2, r2, r3
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2100      	movs	r1, #0
 800322e:	0018      	movs	r0, r3
 8003230:	f008 fa36 	bl	800b6a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <PCD_EP_ISR_Handler+0xb8>
 8003240:	f000 fb82 	bl	8003948 <PCD_EP_ISR_Handler+0x7bc>
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <PCD_EP_ISR_Handler+0xc4>
 800324c:	f000 fb7c 	bl	8003948 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	5c9b      	ldrb	r3, [r3, r2]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	4252      	negs	r2, r2
 800325c:	4313      	orrs	r3, r2
 800325e:	b2da      	uxtb	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b291      	uxth	r1, r2
 8003266:	224c      	movs	r2, #76	; 0x4c
 8003268:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2224      	movs	r2, #36	; 0x24
 800326e:	2100      	movs	r1, #0
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	e369      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3369      	adds	r3, #105	; 0x69
 8003278:	33ff      	adds	r3, #255	; 0xff
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2152      	movs	r1, #82	; 0x52
 8003282:	187b      	adds	r3, r7, r1
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003288:	187b      	adds	r3, r7, r1
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d037      	beq.n	8003304 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2250      	movs	r2, #80	; 0x50
 800329a:	5a9b      	ldrh	r3, [r3, r2]
 800329c:	b29b      	uxth	r3, r3
 800329e:	001a      	movs	r2, r3
 80032a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	18d2      	adds	r2, r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	18d3      	adds	r3, r2, r3
 80032ae:	4a7c      	ldr	r2, [pc, #496]	; (80034a0 <PCD_EP_ISR_Handler+0x314>)
 80032b0:	4694      	mov	ip, r2
 80032b2:	4463      	add	r3, ip
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	059b      	lsls	r3, r3, #22
 80032b8:	0d9a      	lsrs	r2, r3, #22
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	22ac      	movs	r2, #172	; 0xac
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	1899      	adds	r1, r3, r2
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80032ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f006 f9e0 	bl	8009698 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	2010      	movs	r0, #16
 80032e2:	183b      	adds	r3, r7, r0
 80032e4:	496f      	ldr	r1, [pc, #444]	; (80034a4 <PCD_EP_ISR_Handler+0x318>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	183a      	adds	r2, r7, r0
 80032f0:	8812      	ldrh	r2, [r2, #0]
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	430a      	orrs	r2, r1
 80032f6:	b292      	uxth	r2, r2
 80032f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f008 f999 	bl	800b634 <HAL_PCD_SetupStageCallback>
 8003302:	e321      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003304:	2352      	movs	r3, #82	; 0x52
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2200      	movs	r2, #0
 800330a:	5e9b      	ldrsh	r3, [r3, r2]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db00      	blt.n	8003312 <PCD_EP_ISR_Handler+0x186>
 8003310:	e31a      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29a      	uxth	r2, r3
 800331a:	201e      	movs	r0, #30
 800331c:	183b      	adds	r3, r7, r0
 800331e:	4961      	ldr	r1, [pc, #388]	; (80034a4 <PCD_EP_ISR_Handler+0x318>)
 8003320:	400a      	ands	r2, r1
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	183a      	adds	r2, r7, r0
 800332a:	8812      	ldrh	r2, [r2, #0]
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	430a      	orrs	r2, r1
 8003330:	b292      	uxth	r2, r2
 8003332:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2250      	movs	r2, #80	; 0x50
 800333a:	5a9b      	ldrh	r3, [r3, r2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	001a      	movs	r2, r3
 8003340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	18d2      	adds	r2, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <PCD_EP_ISR_Handler+0x314>)
 8003350:	4694      	mov	ip, r2
 8003352:	4463      	add	r3, ip
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	059b      	lsls	r3, r3, #22
 8003358:	0d9a      	lsrs	r2, r3, #22
 800335a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800335e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <PCD_EP_ISR_Handler+0x210>
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	6959      	ldr	r1, [r3, #20]
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800337e:	b29b      	uxth	r3, r3
 8003380:	f006 f98a 	bl	8009698 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	18d2      	adds	r2, r2, r3
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2100      	movs	r1, #0
 8003396:	0018      	movs	r0, r3
 8003398:	f008 f961 	bl	800b65e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	001a      	movs	r2, r3
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	4013      	ands	r3, r2
 80033ac:	d000      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x224>
 80033ae:	e2cb      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2250      	movs	r2, #80	; 0x50
 80033bc:	5a9b      	ldrh	r3, [r3, r2]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	001a      	movs	r2, r3
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	189b      	adds	r3, r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <PCD_EP_ISR_Handler+0x314>)
 80033cc:	4694      	mov	ip, r2
 80033ce:	4463      	add	r3, ip
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d110      	bne.n	80033fc <PCD_EP_ISR_Handler+0x270>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4a31      	ldr	r2, [pc, #196]	; (80034a8 <PCD_EP_ISR_Handler+0x31c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <PCD_EP_ISR_Handler+0x30c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e02b      	b.n	8003454 <PCD_EP_ISR_Handler+0x2c8>
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b3e      	cmp	r3, #62	; 0x3e
 8003402:	d812      	bhi.n	800342a <PCD_EP_ISR_Handler+0x29e>
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2201      	movs	r2, #1
 8003412:	4013      	ands	r3, r2
 8003414:	d002      	beq.n	800341c <PCD_EP_ISR_Handler+0x290>
 8003416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003418:	3301      	adds	r3, #1
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	b29b      	uxth	r3, r3
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	b29a      	uxth	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	801a      	strh	r2, [r3, #0]
 8003428:	e014      	b.n	8003454 <PCD_EP_ISR_Handler+0x2c8>
 800342a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	221f      	movs	r2, #31
 8003438:	4013      	ands	r3, r2
 800343a:	d102      	bne.n	8003442 <PCD_EP_ISR_Handler+0x2b6>
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	3b01      	subs	r3, #1
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
 8003442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003444:	b29b      	uxth	r3, r3
 8003446:	029b      	lsls	r3, r3, #10
 8003448:	b29b      	uxth	r3, r3
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <PCD_EP_ISR_Handler+0x30c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	b29a      	uxth	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29a      	uxth	r2, r3
 800345c:	2012      	movs	r0, #18
 800345e:	183b      	adds	r3, r7, r0
 8003460:	4912      	ldr	r1, [pc, #72]	; (80034ac <PCD_EP_ISR_Handler+0x320>)
 8003462:	400a      	ands	r2, r1
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	183b      	adds	r3, r7, r0
 8003468:	183a      	adds	r2, r7, r0
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0149      	lsls	r1, r1, #5
 8003470:	404a      	eors	r2, r1
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	183b      	adds	r3, r7, r0
 8003476:	183a      	adds	r2, r7, r0
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0189      	lsls	r1, r1, #6
 800347e:	404a      	eors	r2, r1
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	183a      	adds	r2, r7, r0
 8003488:	8812      	ldrh	r2, [r2, #0]
 800348a:	4909      	ldr	r1, [pc, #36]	; (80034b0 <PCD_EP_ISR_Handler+0x324>)
 800348c:	430a      	orrs	r2, r1
 800348e:	b292      	uxth	r2, r2
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e259      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
 8003494:	ffff8f0f 	.word	0xffff8f0f
 8003498:	ffff8000 	.word	0xffff8000
 800349c:	00000402 	.word	0x00000402
 80034a0:	00000406 	.word	0x00000406
 80034a4:	00000f8f 	.word	0x00000f8f
 80034a8:	ffff83ff 	.word	0xffff83ff
 80034ac:	ffffbf8f 	.word	0xffffbf8f
 80034b0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	001a      	movs	r2, r3
 80034ba:	2055      	movs	r0, #85	; 0x55
 80034bc:	183b      	adds	r3, r7, r0
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	18d2      	adds	r2, r2, r3
 80034c4:	2152      	movs	r1, #82	; 0x52
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2200      	movs	r2, #0
 80034d0:	5e9b      	ldrsh	r3, [r3, r2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db00      	blt.n	80034d8 <PCD_EP_ISR_Handler+0x34c>
 80034d6:	e0fa      	b.n	80036ce <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	001a      	movs	r2, r3
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	2450      	movs	r4, #80	; 0x50
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	49cf      	ldr	r1, [pc, #828]	; (800382c <PCD_EP_ISR_Handler+0x6a0>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	801a      	strh	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	001a      	movs	r2, r3
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	193a      	adds	r2, r7, r4
 8003504:	8812      	ldrh	r2, [r2, #0]
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	430a      	orrs	r2, r1
 800350a:	b292      	uxth	r2, r2
 800350c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800350e:	183b      	adds	r3, r7, r0
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	0013      	movs	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	189b      	adds	r3, r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	3369      	adds	r3, #105	; 0x69
 800351c:	33ff      	adds	r3, #255	; 0xff
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	18d3      	adds	r3, r2, r3
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	7b1b      	ldrb	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d125      	bne.n	8003578 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2250      	movs	r2, #80	; 0x50
 8003532:	5a9b      	ldrh	r3, [r3, r2]
 8003534:	b29b      	uxth	r3, r3
 8003536:	001a      	movs	r2, r3
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	18d2      	adds	r2, r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	4aba      	ldr	r2, [pc, #744]	; (8003830 <PCD_EP_ISR_Handler+0x6a4>)
 8003548:	4694      	mov	ip, r2
 800354a:	4463      	add	r3, ip
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	2448      	movs	r4, #72	; 0x48
 8003550:	193b      	adds	r3, r7, r4
 8003552:	0592      	lsls	r2, r2, #22
 8003554:	0d92      	lsrs	r2, r2, #22
 8003556:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003558:	193b      	adds	r3, r7, r4
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d100      	bne.n	8003562 <PCD_EP_ISR_Handler+0x3d6>
 8003560:	e08d      	b.n	800367e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	6959      	ldr	r1, [r3, #20]
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	88da      	ldrh	r2, [r3, #6]
 800356e:	193b      	adds	r3, r7, r4
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	f006 f891 	bl	8009698 <USB_ReadPMA>
 8003576:	e082      	b.n	800367e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d10c      	bne.n	800359a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003580:	2348      	movs	r3, #72	; 0x48
 8003582:	18fc      	adds	r4, r7, r3
 8003584:	2352      	movs	r3, #82	; 0x52
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f9ee 	bl	8003970 <HAL_PCD_EP_DB_Receive>
 8003594:	0003      	movs	r3, r0
 8003596:	8023      	strh	r3, [r4, #0]
 8003598:	e071      	b.n	800367e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	001a      	movs	r2, r3
 80035a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	204a      	movs	r0, #74	; 0x4a
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	49a0      	ldr	r1, [pc, #640]	; (8003834 <PCD_EP_ISR_Handler+0x6a8>)
 80035b2:	400a      	ands	r2, r1
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	001a      	movs	r2, r3
 80035bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	18d3      	adds	r3, r2, r3
 80035c4:	183a      	adds	r2, r7, r0
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	499b      	ldr	r1, [pc, #620]	; (8003838 <PCD_EP_ISR_Handler+0x6ac>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	b292      	uxth	r2, r2
 80035ce:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	001a      	movs	r2, r3
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	001a      	movs	r2, r3
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	01db      	lsls	r3, r3, #7
 80035e8:	4013      	ands	r3, r2
 80035ea:	d024      	beq.n	8003636 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2250      	movs	r2, #80	; 0x50
 80035f2:	5a9b      	ldrh	r3, [r3, r2]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	001a      	movs	r2, r3
 80035f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	18d2      	adds	r2, r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	4a8d      	ldr	r2, [pc, #564]	; (800383c <PCD_EP_ISR_Handler+0x6b0>)
 8003608:	4694      	mov	ip, r2
 800360a:	4463      	add	r3, ip
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	2448      	movs	r4, #72	; 0x48
 8003610:	193b      	adds	r3, r7, r4
 8003612:	0592      	lsls	r2, r2, #22
 8003614:	0d92      	lsrs	r2, r2, #22
 8003616:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003618:	193b      	adds	r3, r7, r4
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02e      	beq.n	800367e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003626:	6959      	ldr	r1, [r3, #20]
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	891a      	ldrh	r2, [r3, #8]
 800362c:	193b      	adds	r3, r7, r4
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f006 f832 	bl	8009698 <USB_ReadPMA>
 8003634:	e023      	b.n	800367e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2250      	movs	r2, #80	; 0x50
 800363c:	5a9b      	ldrh	r3, [r3, r2]
 800363e:	b29b      	uxth	r3, r3
 8003640:	001a      	movs	r2, r3
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	18d2      	adds	r2, r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	18d3      	adds	r3, r2, r3
 8003650:	4a77      	ldr	r2, [pc, #476]	; (8003830 <PCD_EP_ISR_Handler+0x6a4>)
 8003652:	4694      	mov	ip, r2
 8003654:	4463      	add	r3, ip
 8003656:	881a      	ldrh	r2, [r3, #0]
 8003658:	2448      	movs	r4, #72	; 0x48
 800365a:	193b      	adds	r3, r7, r4
 800365c:	0592      	lsls	r2, r2, #22
 800365e:	0d92      	lsrs	r2, r2, #22
 8003660:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003662:	193b      	adds	r3, r7, r4
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003670:	6959      	ldr	r1, [r3, #20]
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	895a      	ldrh	r2, [r3, #10]
 8003676:	193b      	adds	r3, r7, r4
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f006 f80d 	bl	8009698 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	2148      	movs	r1, #72	; 0x48
 8003684:	187b      	adds	r3, r7, r1
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	18d2      	adds	r2, r2, r3
 800368a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	187b      	adds	r3, r7, r1
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	18d2      	adds	r2, r2, r3
 8003698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <PCD_EP_ISR_Handler+0x524>
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d207      	bcs.n	80036c0 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0011      	movs	r1, r2
 80036b8:	0018      	movs	r0, r3
 80036ba:	f007 ffd0 	bl	800b65e <HAL_PCD_DataOutStageCallback>
 80036be:	e006      	b.n	80036ce <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036c6:	0011      	movs	r1, r2
 80036c8:	0018      	movs	r0, r3
 80036ca:	f004 fdad 	bl	8008228 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80036ce:	2452      	movs	r4, #82	; 0x52
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	4013      	ands	r3, r2
 80036d8:	d100      	bne.n	80036dc <PCD_EP_ISR_Handler+0x550>
 80036da:	e135      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80036dc:	2055      	movs	r0, #85	; 0x55
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	0013      	movs	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	001a      	movs	r2, r3
 80036f8:	183b      	adds	r3, r7, r0
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	18d3      	adds	r3, r2, r3
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29a      	uxth	r2, r3
 8003704:	2542      	movs	r5, #66	; 0x42
 8003706:	197b      	adds	r3, r7, r5
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <PCD_EP_ISR_Handler+0x6b4>)
 800370a:	400a      	ands	r2, r1
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	001a      	movs	r2, r3
 8003714:	183b      	adds	r3, r7, r0
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	197a      	adds	r2, r7, r5
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	4948      	ldr	r1, [pc, #288]	; (8003844 <PCD_EP_ISR_Handler+0x6b8>)
 8003722:	430a      	orrs	r2, r1
 8003724:	b292      	uxth	r2, r2
 8003726:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d100      	bne.n	8003732 <PCD_EP_ISR_Handler+0x5a6>
 8003730:	e0ad      	b.n	800388e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003738:	193b      	adds	r3, r7, r4
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	d046      	beq.n	80037d0 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d125      	bne.n	8003796 <PCD_EP_ISR_Handler+0x60a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2250      	movs	r2, #80	; 0x50
 8003756:	5a9b      	ldrh	r3, [r3, r2]
 8003758:	b29b      	uxth	r3, r3
 800375a:	001a      	movs	r2, r3
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	189b      	adds	r3, r3, r2
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	00da      	lsls	r2, r3, #3
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <PCD_EP_ISR_Handler+0x6b0>)
 800376e:	4694      	mov	ip, r2
 8003770:	4463      	add	r3, ip
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	4a33      	ldr	r2, [pc, #204]	; (8003848 <PCD_EP_ISR_Handler+0x6bc>)
 800377c:	4013      	ands	r3, r2
 800377e:	b29a      	uxth	r2, r3
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <PCD_EP_ISR_Handler+0x6b8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	b29a      	uxth	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	e073      	b.n	800387e <PCD_EP_ISR_Handler+0x6f2>
 8003796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d16f      	bne.n	800387e <PCD_EP_ISR_Handler+0x6f2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2250      	movs	r2, #80	; 0x50
 80037aa:	5a9b      	ldrh	r3, [r3, r2]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	001a      	movs	r2, r3
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	00da      	lsls	r2, r3, #3
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	18d3      	adds	r3, r2, r3
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <PCD_EP_ISR_Handler+0x6b0>)
 80037c2:	4694      	mov	ip, r2
 80037c4:	4463      	add	r3, ip
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	2200      	movs	r2, #0
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	e056      	b.n	800387e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d136      	bne.n	800384c <PCD_EP_ISR_Handler+0x6c0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2250      	movs	r2, #80	; 0x50
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	001a      	movs	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <PCD_EP_ISR_Handler+0x6a4>)
 8003802:	4694      	mov	ip, r2
 8003804:	4463      	add	r3, ip
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <PCD_EP_ISR_Handler+0x6bc>)
 8003810:	4013      	ands	r3, r2
 8003812:	b29a      	uxth	r2, r3
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <PCD_EP_ISR_Handler+0x6b8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	b29a      	uxth	r2, r3
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	e029      	b.n	800387e <PCD_EP_ISR_Handler+0x6f2>
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	00000f8f 	.word	0x00000f8f
 8003830:	00000406 	.word	0x00000406
 8003834:	ffff8f8f 	.word	0xffff8f8f
 8003838:	ffff80c0 	.word	0xffff80c0
 800383c:	00000402 	.word	0x00000402
 8003840:	ffff8f0f 	.word	0xffff8f0f
 8003844:	ffff8000 	.word	0xffff8000
 8003848:	ffff83ff 	.word	0xffff83ff
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d114      	bne.n	800387e <PCD_EP_ISR_Handler+0x6f2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2250      	movs	r2, #80	; 0x50
 800385a:	5a9b      	ldrh	r3, [r3, r2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	001a      	movs	r2, r3
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	189b      	adds	r3, r3, r2
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00da      	lsls	r2, r3, #3
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	4a3d      	ldr	r2, [pc, #244]	; (8003968 <PCD_EP_ISR_Handler+0x7dc>)
 8003872:	4694      	mov	ip, r2
 8003874:	4463      	add	r3, ip
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2200      	movs	r2, #0
 800387c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f007 ff0a 	bl	800b6a0 <HAL_PCD_DataInStageCallback>
 800388c:	e05c      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d150      	bne.n	8003938 <PCD_EP_ISR_Handler+0x7ac>
 8003896:	2352      	movs	r3, #82	; 0x52
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d149      	bne.n	8003938 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2250      	movs	r2, #80	; 0x50
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	001a      	movs	r2, r3
 80038b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	18d2      	adds	r2, r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	4a2b      	ldr	r2, [pc, #172]	; (800396c <PCD_EP_ISR_Handler+0x7e0>)
 80038c0:	4694      	mov	ip, r2
 80038c2:	4463      	add	r3, ip
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	2140      	movs	r1, #64	; 0x40
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	0592      	lsls	r2, r2, #22
 80038cc:	0d92      	lsrs	r2, r2, #22
 80038ce:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d907      	bls.n	80038ec <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	619a      	str	r2, [r3, #24]
 80038ea:	e002      	b.n	80038f2 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80038ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f007 fecc 	bl	800b6a0 <HAL_PCD_DataInStageCallback>
 8003908:	e01e      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	2140      	movs	r1, #64	; 0x40
 8003910:	187b      	adds	r3, r7, r1
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	18d2      	adds	r2, r2, r3
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	187b      	adds	r3, r7, r1
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	18d2      	adds	r2, r2, r3
 8003924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003926:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f004 fc79 	bl	8008228 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003936:	e007      	b.n	8003948 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003938:	2352      	movs	r3, #82	; 0x52
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0018      	movs	r0, r3
 8003944:	f000 f930 	bl	8003ba8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2244      	movs	r2, #68	; 0x44
 800394e:	5a9b      	ldrh	r3, [r3, r2]
 8003950:	b29b      	uxth	r3, r3
 8003952:	b21b      	sxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	da01      	bge.n	800395c <PCD_EP_ISR_Handler+0x7d0>
 8003958:	f7ff fc1e 	bl	8003198 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b016      	add	sp, #88	; 0x58
 8003964:	bdb0      	pop	{r4, r5, r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	00000406 	.word	0x00000406
 800396c:	00000402 	.word	0x00000402

08003970 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800397e:	1dbb      	adds	r3, r7, #6
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	01db      	lsls	r3, r3, #7
 8003986:	4013      	ands	r3, r2
 8003988:	d100      	bne.n	800398c <HAL_PCD_EP_DB_Receive+0x1c>
 800398a:	e07d      	b.n	8003a88 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2250      	movs	r2, #80	; 0x50
 8003992:	5a9b      	ldrh	r3, [r3, r2]
 8003994:	b29b      	uxth	r3, r3
 8003996:	001a      	movs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	18d2      	adds	r2, r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	4a7a      	ldr	r2, [pc, #488]	; (8003b90 <HAL_PCD_EP_DB_Receive+0x220>)
 80039a8:	4694      	mov	ip, r2
 80039aa:	4463      	add	r3, ip
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	211a      	movs	r1, #26
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	0592      	lsls	r2, r2, #22
 80039b4:	0d92      	lsrs	r2, r2, #22
 80039b6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d307      	bcc.n	80039d4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	1ad2      	subs	r2, r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	619a      	str	r2, [r3, #24]
 80039d2:	e002      	b.n	80039da <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d121      	bne.n	8003a26 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	001a      	movs	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	18d3      	adds	r3, r2, r3
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	2018      	movs	r0, #24
 80039f6:	183b      	adds	r3, r7, r0
 80039f8:	4966      	ldr	r1, [pc, #408]	; (8003b94 <HAL_PCD_EP_DB_Receive+0x224>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	183a      	adds	r2, r7, r0
 8003a02:	8812      	ldrh	r2, [r2, #0]
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	0189      	lsls	r1, r1, #6
 8003a08:	404a      	eors	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	001a      	movs	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	183a      	adds	r2, r7, r0
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	495e      	ldr	r1, [pc, #376]	; (8003b98 <HAL_PCD_EP_DB_Receive+0x228>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	b292      	uxth	r2, r2
 8003a24:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a26:	1dbb      	adds	r3, r7, #6
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d01a      	beq.n	8003a66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	001a      	movs	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	2016      	movs	r0, #22
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	4955      	ldr	r1, [pc, #340]	; (8003b9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	001a      	movs	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	18d3      	adds	r3, r2, r3
 8003a5a:	183a      	adds	r2, r7, r0
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	4950      	ldr	r1, [pc, #320]	; (8003ba0 <HAL_PCD_EP_DB_Receive+0x230>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	b292      	uxth	r2, r2
 8003a64:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003a66:	241a      	movs	r4, #26
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d100      	bne.n	8003a72 <HAL_PCD_EP_DB_Receive+0x102>
 8003a70:	e086      	b.n	8003b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6959      	ldr	r1, [r3, #20]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	891a      	ldrh	r2, [r3, #8]
 8003a7e:	193b      	adds	r3, r7, r4
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	f005 fe09 	bl	8009698 <USB_ReadPMA>
 8003a86:	e07b      	b.n	8003b80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2250      	movs	r2, #80	; 0x50
 8003a8e:	5a9b      	ldrh	r3, [r3, r2]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	001a      	movs	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	18d2      	adds	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <HAL_PCD_EP_DB_Receive+0x234>)
 8003aa4:	4694      	mov	ip, r2
 8003aa6:	4463      	add	r3, ip
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	211a      	movs	r1, #26
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	0592      	lsls	r2, r2, #22
 8003ab0:	0d92      	lsrs	r2, r2, #22
 8003ab2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d307      	bcc.n	8003ad0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	619a      	str	r2, [r3, #24]
 8003ace:	e002      	b.n	8003ad6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d121      	bne.n	8003b22 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	201e      	movs	r0, #30
 8003af2:	183b      	adds	r3, r7, r0
 8003af4:	4927      	ldr	r1, [pc, #156]	; (8003b94 <HAL_PCD_EP_DB_Receive+0x224>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	183a      	adds	r2, r7, r0
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0189      	lsls	r1, r1, #6
 8003b04:	404a      	eors	r2, r1
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	183a      	adds	r2, r7, r0
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	491f      	ldr	r1, [pc, #124]	; (8003b98 <HAL_PCD_EP_DB_Receive+0x228>)
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d11a      	bne.n	8003b62 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	001a      	movs	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	201c      	movs	r0, #28
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_PCD_EP_DB_Receive+0x22c>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	18d3      	adds	r3, r2, r3
 8003b56:	183a      	adds	r2, r7, r0
 8003b58:	8812      	ldrh	r2, [r2, #0]
 8003b5a:	4911      	ldr	r1, [pc, #68]	; (8003ba0 <HAL_PCD_EP_DB_Receive+0x230>)
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003b62:	241a      	movs	r4, #26
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6959      	ldr	r1, [r3, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	895a      	ldrh	r2, [r3, #10]
 8003b78:	193b      	adds	r3, r7, r4
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	f005 fd8c 	bl	8009698 <USB_ReadPMA>
    }
  }

  return count;
 8003b80:	231a      	movs	r3, #26
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	881b      	ldrh	r3, [r3, #0]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b009      	add	sp, #36	; 0x24
 8003b8c:	bd90      	pop	{r4, r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	00000402 	.word	0x00000402
 8003b94:	ffffbf8f 	.word	0xffffbf8f
 8003b98:	ffff8080 	.word	0xffff8080
 8003b9c:	ffff8f8f 	.word	0xffff8f8f
 8003ba0:	ffff80c0 	.word	0xffff80c0
 8003ba4:	00000406 	.word	0x00000406

08003ba8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b0a2      	sub	sp, #136	; 0x88
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	1dbb      	adds	r3, r7, #6
 8003bb4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bb6:	1dbb      	adds	r3, r7, #6
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003bc0:	e1c8      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2250      	movs	r2, #80	; 0x50
 8003bc8:	5a9b      	ldrh	r3, [r3, r2]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	001a      	movs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	18d2      	adds	r2, r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	18d3      	adds	r3, r2, r3
 8003bdc:	4ad7      	ldr	r2, [pc, #860]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003bde:	4694      	mov	ip, r2
 8003be0:	4463      	add	r3, ip
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	214e      	movs	r1, #78	; 0x4e
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	0592      	lsls	r2, r2, #22
 8003bea:	0d92      	lsrs	r2, r2, #22
 8003bec:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d907      	bls.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	619a      	str	r2, [r3, #24]
 8003c08:	e002      	b.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d000      	beq.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x72>
 8003c18:	e0b5      	b.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d125      	bne.n	8003c6e <HAL_PCD_EP_DB_Transmit+0xc6>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2250      	movs	r2, #80	; 0x50
 8003c2e:	5a9b      	ldrh	r3, [r3, r2]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	001a      	movs	r2, r3
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	4abd      	ldr	r2, [pc, #756]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003c46:	4694      	mov	ip, r2
 8003c48:	4463      	add	r3, ip
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4abb      	ldr	r2, [pc, #748]	; (8003f40 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4ab8      	ldr	r2, [pc, #736]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	e01b      	b.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d117      	bne.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2250      	movs	r2, #80	; 0x50
 8003c82:	5a9b      	ldrh	r3, [r3, r2]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	001a      	movs	r2, r3
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	4aa8      	ldr	r2, [pc, #672]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003c9a:	4694      	mov	ip, r2
 8003c9c:	4463      	add	r3, ip
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d125      	bne.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x158>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2250      	movs	r2, #80	; 0x50
 8003cc0:	5a9b      	ldrh	r3, [r3, r2]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	00da      	lsls	r2, r3, #3
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	18d3      	adds	r3, r2, r3
 8003cd6:	4a9c      	ldr	r2, [pc, #624]	; (8003f48 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003cd8:	4694      	mov	ip, r2
 8003cda:	4463      	add	r3, ip
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	4a96      	ldr	r2, [pc, #600]	; (8003f40 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4a93      	ldr	r2, [pc, #588]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	e018      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	785b      	ldrb	r3, [r3, #1]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d114      	bne.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2250      	movs	r2, #80	; 0x50
 8003d0e:	5a9b      	ldrh	r3, [r3, r2]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	001a      	movs	r2, r3
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	00da      	lsls	r2, r3, #3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	4a88      	ldr	r2, [pc, #544]	; (8003f48 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003d26:	4694      	mov	ip, r2
 8003d28:	4463      	add	r3, ip
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f007 fcb0 	bl	800b6a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	01db      	lsls	r3, r3, #7
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003d4c:	e2d4      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	001a      	movs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	2012      	movs	r0, #18
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	4979      	ldr	r1, [pc, #484]	; (8003f4c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	183a      	adds	r2, r7, r0
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	4974      	ldr	r1, [pc, #464]	; (8003f50 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	b292      	uxth	r2, r2
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	e2b8      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d86:	1dbb      	adds	r3, r7, #6
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	01db      	lsls	r3, r3, #7
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d01a      	beq.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	001a      	movs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	2044      	movs	r0, #68	; 0x44
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	4968      	ldr	r1, [pc, #416]	; (8003f4c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	001a      	movs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	18d3      	adds	r3, r2, r3
 8003dbc:	183a      	adds	r2, r7, r0
 8003dbe:	8812      	ldrh	r2, [r2, #0]
 8003dc0:	4963      	ldr	r1, [pc, #396]	; (8003f50 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	5c9b      	ldrb	r3, [r3, r2]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d000      	beq.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003dd2:	e291      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	214e      	movs	r1, #78	; 0x4e
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	18d2      	adds	r2, r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	18d2      	adds	r2, r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d309      	bcc.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	e016      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003e1a:	234e      	movs	r3, #78	; 0x4e
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2224      	movs	r2, #36	; 0x24
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	e009      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d150      	bne.n	8003eea <HAL_PCD_EP_DB_Transmit+0x342>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2250      	movs	r2, #80	; 0x50
 8003e54:	5a9b      	ldrh	r3, [r3, r2]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	001a      	movs	r2, r3
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	00da      	lsls	r2, r3, #3
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003e6c:	4694      	mov	ip, r2
 8003e6e:	4463      	add	r3, ip
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
 8003e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d110      	bne.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e044      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9e:	d810      	bhi.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x31a>
 8003ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d002      	beq.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e030      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	221f      	movs	r2, #31
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d102      	bne.n	8003ed6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e01c      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d118      	bne.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2250      	movs	r2, #80	; 0x50
 8003efe:	5a9b      	ldrh	r3, [r3, r2]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	001a      	movs	r2, r3
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	643b      	str	r3, [r7, #64]	; 0x40
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	00da      	lsls	r2, r3, #3
 8003f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f12:	18d3      	adds	r3, r2, r3
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003f16:	4694      	mov	ip, r2
 8003f18:	4463      	add	r3, ip
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6959      	ldr	r1, [r3, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	891a      	ldrh	r2, [r3, #8]
 8003f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f005 fb6c 	bl	8009610 <USB_WritePMA>
 8003f38:	e1de      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	00000402 	.word	0x00000402
 8003f40:	ffff83ff 	.word	0xffff83ff
 8003f44:	ffff8000 	.word	0xffff8000
 8003f48:	00000406 	.word	0x00000406
 8003f4c:	ffff8f8f 	.word	0xffff8f8f
 8003f50:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2250      	movs	r2, #80	; 0x50
 8003f5a:	5a9b      	ldrh	r3, [r3, r2]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	001a      	movs	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	18d2      	adds	r2, r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	4aca      	ldr	r2, [pc, #808]	; (8004298 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003f70:	4694      	mov	ip, r2
 8003f72:	4463      	add	r3, ip
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	214e      	movs	r1, #78	; 0x4e
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	0592      	lsls	r2, r2, #22
 8003f7c:	0d92      	lsrs	r2, r2, #22
 8003f7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d307      	bcc.n	8003f9c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	1ad2      	subs	r2, r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	619a      	str	r2, [r3, #24]
 8003f9a:	e002      	b.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d000      	beq.n	8003fac <HAL_PCD_EP_DB_Transmit+0x404>
 8003faa:	e0c0      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d125      	bne.n	8004000 <HAL_PCD_EP_DB_Transmit+0x458>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2250      	movs	r2, #80	; 0x50
 8003fc0:	5a9b      	ldrh	r3, [r3, r2]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	00da      	lsls	r2, r3, #3
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	4ab1      	ldr	r2, [pc, #708]	; (800429c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003fd8:	4694      	mov	ip, r2
 8003fda:	4463      	add	r3, ip
 8003fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4aae      	ldr	r2, [pc, #696]	; (80042a0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4aab      	ldr	r2, [pc, #684]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	e01b      	b.n	8004038 <HAL_PCD_EP_DB_Transmit+0x490>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d117      	bne.n	8004038 <HAL_PCD_EP_DB_Transmit+0x490>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	677b      	str	r3, [r7, #116]	; 0x74
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2250      	movs	r2, #80	; 0x50
 8004014:	5a9b      	ldrh	r3, [r3, r2]
 8004016:	b29b      	uxth	r3, r3
 8004018:	001a      	movs	r2, r3
 800401a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401c:	189b      	adds	r3, r3, r2
 800401e:	677b      	str	r3, [r7, #116]	; 0x74
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	00da      	lsls	r2, r3, #3
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	4a9c      	ldr	r2, [pc, #624]	; (800429c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800402c:	4694      	mov	ip, r2
 800402e:	4463      	add	r3, ip
 8004030:	673b      	str	r3, [r7, #112]	; 0x70
 8004032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004034:	2200      	movs	r2, #0
 8004036:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	67bb      	str	r3, [r7, #120]	; 0x78
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d130      	bne.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x500>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	187a      	adds	r2, r7, r1
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2250      	movs	r2, #80	; 0x50
 8004056:	5a9b      	ldrh	r3, [r3, r2]
 8004058:	b29b      	uxth	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	187b      	adds	r3, r7, r1
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	189b      	adds	r3, r3, r2
 8004062:	187a      	adds	r2, r7, r1
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	00da      	lsls	r2, r3, #3
 800406c:	187b      	adds	r3, r7, r1
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	4a89      	ldr	r2, [pc, #548]	; (8004298 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004074:	4694      	mov	ip, r2
 8004076:	4463      	add	r3, ip
 8004078:	2184      	movs	r1, #132	; 0x84
 800407a:	187a      	adds	r2, r7, r1
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	187b      	adds	r3, r7, r1
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	4a86      	ldr	r2, [pc, #536]	; (80042a0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004088:	4013      	ands	r3, r2
 800408a:	b29a      	uxth	r2, r3
 800408c:	187b      	adds	r3, r7, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	187b      	adds	r3, r7, r1
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	4a82      	ldr	r2, [pc, #520]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	e018      	b.n	80040da <HAL_PCD_EP_DB_Transmit+0x532>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d114      	bne.n	80040da <HAL_PCD_EP_DB_Transmit+0x532>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2250      	movs	r2, #80	; 0x50
 80040b6:	5a9b      	ldrh	r3, [r3, r2]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	001a      	movs	r2, r3
 80040bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	00da      	lsls	r2, r3, #3
 80040c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ca:	18d3      	adds	r3, r2, r3
 80040cc:	4a72      	ldr	r2, [pc, #456]	; (8004298 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80040ce:	4694      	mov	ip, r2
 80040d0:	4463      	add	r3, ip
 80040d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040d6:	2200      	movs	r2, #0
 80040d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f007 fadc 	bl	800b6a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	4013      	ands	r3, r2
 80040f2:	d000      	beq.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80040f4:	e100      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	001a      	movs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29a      	uxth	r2, r3
 8004108:	2046      	movs	r0, #70	; 0x46
 800410a:	183b      	adds	r3, r7, r0
 800410c:	4966      	ldr	r1, [pc, #408]	; (80042a8 <HAL_PCD_EP_DB_Transmit+0x700>)
 800410e:	400a      	ands	r2, r1
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	001a      	movs	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	183a      	adds	r2, r7, r0
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	4961      	ldr	r1, [pc, #388]	; (80042ac <HAL_PCD_EP_DB_Transmit+0x704>)
 8004126:	430a      	orrs	r2, r1
 8004128:	b292      	uxth	r2, r2
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	e0e4      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800412e:	1dbb      	adds	r3, r7, #6
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	01db      	lsls	r3, r3, #7
 8004136:	4013      	ands	r3, r2
 8004138:	d11a      	bne.n	8004170 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	001a      	movs	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29a      	uxth	r2, r3
 800414c:	204c      	movs	r0, #76	; 0x4c
 800414e:	183b      	adds	r3, r7, r0
 8004150:	4955      	ldr	r1, [pc, #340]	; (80042a8 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004152:	400a      	ands	r2, r1
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	001a      	movs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	18d3      	adds	r3, r2, r3
 8004164:	183a      	adds	r2, r7, r0
 8004166:	8812      	ldrh	r2, [r2, #0]
 8004168:	4950      	ldr	r1, [pc, #320]	; (80042ac <HAL_PCD_EP_DB_Transmit+0x704>)
 800416a:	430a      	orrs	r2, r1
 800416c:	b292      	uxth	r2, r2
 800416e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	5c9b      	ldrb	r3, [r3, r2]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d000      	beq.n	800417c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800417a:	e0bd      	b.n	80042f8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	214e      	movs	r1, #78	; 0x4e
 8004182:	187b      	adds	r3, r7, r1
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	18d2      	adds	r2, r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	187b      	adds	r3, r7, r1
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	18d2      	adds	r2, r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d309      	bcc.n	80041ba <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	1ad2      	subs	r2, r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	621a      	str	r2, [r3, #32]
 80041b8:	e016      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d108      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80041c2:	234e      	movs	r3, #78	; 0x4e
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]
 80041d2:	e009      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	667b      	str	r3, [r7, #100]	; 0x64
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d15c      	bne.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x708>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2250      	movs	r2, #80	; 0x50
 8004202:	5a9b      	ldrh	r3, [r3, r2]
 8004204:	b29b      	uxth	r3, r3
 8004206:	001a      	movs	r2, r3
 8004208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420a:	189b      	adds	r3, r3, r2
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00da      	lsls	r2, r3, #3
 8004214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004216:	18d3      	adds	r3, r2, r3
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800421a:	4694      	mov	ip, r2
 800421c:	4463      	add	r3, ip
 800421e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d110      	bne.n	8004248 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800422e:	4013      	ands	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	b29a      	uxth	r2, r3
 8004242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	e04d      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424a:	2b3e      	cmp	r3, #62	; 0x3e
 800424c:	d810      	bhi.n	8004270 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
 8004254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d002      	beq.n	8004262 <HAL_PCD_EP_DB_Transmit+0x6ba>
 800425c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425e:	3301      	adds	r3, #1
 8004260:	657b      	str	r3, [r7, #84]	; 0x54
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	b29b      	uxth	r3, r3
 8004266:	029b      	lsls	r3, r3, #10
 8004268:	b29a      	uxth	r2, r3
 800426a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	e039      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	657b      	str	r3, [r7, #84]	; 0x54
 8004276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004278:	221f      	movs	r2, #31
 800427a:	4013      	ands	r3, r2
 800427c:	d102      	bne.n	8004284 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	3b01      	subs	r3, #1
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
 8004284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004286:	b29b      	uxth	r3, r3
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	b29b      	uxth	r3, r3
 800428c:	4a05      	ldr	r2, [pc, #20]	; (80042a4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	b29a      	uxth	r2, r3
 8004292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	e025      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004298:	00000406 	.word	0x00000406
 800429c:	00000402 	.word	0x00000402
 80042a0:	ffff83ff 	.word	0xffff83ff
 80042a4:	ffff8000 	.word	0xffff8000
 80042a8:	ffff8f8f 	.word	0xffff8f8f
 80042ac:	ffffc080 	.word	0xffffc080
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d115      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x73c>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2250      	movs	r2, #80	; 0x50
 80042be:	5a9b      	ldrh	r3, [r3, r2]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	001a      	movs	r2, r3
 80042c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	00da      	lsls	r2, r3, #3
 80042d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d2:	18d3      	adds	r3, r2, r3
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80042d6:	4694      	mov	ip, r2
 80042d8:	4463      	add	r3, ip
 80042da:	663b      	str	r3, [r7, #96]	; 0x60
 80042dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042de:	b29a      	uxth	r2, r3
 80042e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6959      	ldr	r1, [r3, #20]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	895a      	ldrh	r2, [r3, #10]
 80042f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f005 f98c 	bl	8009610 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	001a      	movs	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	18d3      	adds	r3, r2, r3
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29a      	uxth	r2, r3
 800430a:	2010      	movs	r0, #16
 800430c:	183b      	adds	r3, r7, r0
 800430e:	4911      	ldr	r1, [pc, #68]	; (8004354 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004310:	400a      	ands	r2, r1
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	183b      	adds	r3, r7, r0
 8004316:	183a      	adds	r2, r7, r0
 8004318:	8812      	ldrh	r2, [r2, #0]
 800431a:	2110      	movs	r1, #16
 800431c:	404a      	eors	r2, r1
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	183b      	adds	r3, r7, r0
 8004322:	183a      	adds	r2, r7, r0
 8004324:	8812      	ldrh	r2, [r2, #0]
 8004326:	2120      	movs	r1, #32
 8004328:	404a      	eors	r2, r1
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	001a      	movs	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	183a      	adds	r2, r7, r0
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8004340:	430a      	orrs	r2, r1
 8004342:	b292      	uxth	r2, r2
 8004344:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b022      	add	sp, #136	; 0x88
 800434e:	bd80      	pop	{r7, pc}
 8004350:	00000406 	.word	0x00000406
 8004354:	ffff8fbf 	.word	0xffff8fbf
 8004358:	ffff8080 	.word	0xffff8080

0800435c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	0008      	movs	r0, r1
 8004366:	0011      	movs	r1, r2
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	240a      	movs	r4, #10
 800436c:	193b      	adds	r3, r7, r4
 800436e:	1c02      	adds	r2, r0, #0
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	2308      	movs	r3, #8
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800437a:	0021      	movs	r1, r4
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	4013      	ands	r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438a:	187b      	adds	r3, r7, r1
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	2207      	movs	r2, #7
 8004390:	4013      	ands	r3, r2
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	0013      	movs	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	189b      	adds	r3, r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e00b      	b.n	80043bc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a4:	230a      	movs	r3, #10
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	0013      	movs	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	3369      	adds	r3, #105	; 0x69
 80043b4:	33ff      	adds	r3, #255	; 0xff
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043bc:	2308      	movs	r3, #8
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	80da      	strh	r2, [r3, #6]
 80043d4:	e00b      	b.n	80043ee <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2201      	movs	r2, #1
 80043da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0c1b      	lsrs	r3, r3, #16
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b007      	add	sp, #28
 80043f6:	bd90      	pop	{r4, r7, pc}

080043f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	23ba      	movs	r3, #186	; 0xba
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	2101      	movs	r1, #1
 800440e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	23b8      	movs	r3, #184	; 0xb8
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	2100      	movs	r1, #0
 8004418:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2254      	movs	r2, #84	; 0x54
 800441e:	5a9b      	ldrh	r3, [r3, r2]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2201      	movs	r2, #1
 8004424:	4313      	orrs	r3, r2
 8004426:	b299      	uxth	r1, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2254      	movs	r2, #84	; 0x54
 800442c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2254      	movs	r2, #84	; 0x54
 8004432:	5a9b      	ldrh	r3, [r3, r2]
 8004434:	b29b      	uxth	r3, r3
 8004436:	2202      	movs	r2, #2
 8004438:	4313      	orrs	r3, r2
 800443a:	b299      	uxth	r1, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2254      	movs	r2, #84	; 0x54
 8004440:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b004      	add	sp, #16
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	000a      	movs	r2, r1
 8004456:	1cfb      	adds	r3, r7, #3
 8004458:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f000 fb76 	bl	8004b64 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	4013      	ands	r3, r2
 8004480:	d100      	bne.n	8004484 <HAL_RCC_OscConfig+0x20>
 8004482:	e08e      	b.n	80045a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004484:	4bc5      	ldr	r3, [pc, #788]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	220c      	movs	r2, #12
 800448a:	4013      	ands	r3, r2
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00e      	beq.n	80044ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004490:	4bc2      	ldr	r3, [pc, #776]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	220c      	movs	r2, #12
 8004496:	4013      	ands	r3, r2
 8004498:	2b08      	cmp	r3, #8
 800449a:	d117      	bne.n	80044cc <HAL_RCC_OscConfig+0x68>
 800449c:	4bbf      	ldr	r3, [pc, #764]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	23c0      	movs	r3, #192	; 0xc0
 80044a2:	025b      	lsls	r3, r3, #9
 80044a4:	401a      	ands	r2, r3
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	025b      	lsls	r3, r3, #9
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d10e      	bne.n	80044cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4bbb      	ldr	r3, [pc, #748]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	4013      	ands	r3, r2
 80044b8:	d100      	bne.n	80044bc <HAL_RCC_OscConfig+0x58>
 80044ba:	e071      	b.n	80045a0 <HAL_RCC_OscConfig+0x13c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d000      	beq.n	80044c6 <HAL_RCC_OscConfig+0x62>
 80044c4:	e06c      	b.n	80045a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f000 fb4c 	bl	8004b64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x80>
 80044d4:	4bb1      	ldr	r3, [pc, #708]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4bb0      	ldr	r3, [pc, #704]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	0249      	lsls	r1, r1, #9
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e02f      	b.n	8004544 <HAL_RCC_OscConfig+0xe0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10c      	bne.n	8004506 <HAL_RCC_OscConfig+0xa2>
 80044ec:	4bab      	ldr	r3, [pc, #684]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4baa      	ldr	r3, [pc, #680]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044f2:	49ab      	ldr	r1, [pc, #684]	; (80047a0 <HAL_RCC_OscConfig+0x33c>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	4ba8      	ldr	r3, [pc, #672]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4ba7      	ldr	r3, [pc, #668]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80044fe:	49a9      	ldr	r1, [pc, #676]	; (80047a4 <HAL_RCC_OscConfig+0x340>)
 8004500:	400a      	ands	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e01e      	b.n	8004544 <HAL_RCC_OscConfig+0xe0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10e      	bne.n	800452c <HAL_RCC_OscConfig+0xc8>
 800450e:	4ba3      	ldr	r3, [pc, #652]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4ba2      	ldr	r3, [pc, #648]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004514:	2180      	movs	r1, #128	; 0x80
 8004516:	02c9      	lsls	r1, r1, #11
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	4b9f      	ldr	r3, [pc, #636]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b9e      	ldr	r3, [pc, #632]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	0249      	lsls	r1, r1, #9
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0xe0>
 800452c:	4b9b      	ldr	r3, [pc, #620]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b9a      	ldr	r3, [pc, #616]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004532:	499b      	ldr	r1, [pc, #620]	; (80047a0 <HAL_RCC_OscConfig+0x33c>)
 8004534:	400a      	ands	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	4b98      	ldr	r3, [pc, #608]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b97      	ldr	r3, [pc, #604]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800453e:	4999      	ldr	r1, [pc, #612]	; (80047a4 <HAL_RCC_OscConfig+0x340>)
 8004540:	400a      	ands	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d014      	beq.n	8004576 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fd fa50 	bl	80019f0 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004556:	f7fd fa4b 	bl	80019f0 <HAL_GetTick>
 800455a:	0002      	movs	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b64      	cmp	r3, #100	; 0x64
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e2fd      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004568:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	4013      	ands	r3, r2
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0xf2>
 8004574:	e015      	b.n	80045a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd fa3b 	bl	80019f0 <HAL_GetTick>
 800457a:	0003      	movs	r3, r0
 800457c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fd fa36 	bl	80019f0 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e2e8      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b82      	ldr	r3, [pc, #520]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	4013      	ands	r3, r2
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x11c>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d100      	bne.n	80045ae <HAL_RCC_OscConfig+0x14a>
 80045ac:	e06c      	b.n	8004688 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045ae:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	220c      	movs	r2, #12
 80045b4:	4013      	ands	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045b8:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	220c      	movs	r2, #12
 80045be:	4013      	ands	r3, r2
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d11f      	bne.n	8004604 <HAL_RCC_OscConfig+0x1a0>
 80045c4:	4b75      	ldr	r3, [pc, #468]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	23c0      	movs	r3, #192	; 0xc0
 80045ca:	025b      	lsls	r3, r3, #9
 80045cc:	401a      	ands	r2, r3
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	4b71      	ldr	r3, [pc, #452]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d005      	beq.n	80045ec <HAL_RCC_OscConfig+0x188>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e2bb      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b6b      	ldr	r3, [pc, #428]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	22f8      	movs	r2, #248	; 0xf8
 80045f2:	4393      	bics	r3, r2
 80045f4:	0019      	movs	r1, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00da      	lsls	r2, r3, #3
 80045fc:	4b67      	ldr	r3, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	e041      	b.n	8004688 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d024      	beq.n	8004656 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004612:	2101      	movs	r1, #1
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd f9ea 	bl	80019f0 <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fd f9e5 	bl	80019f0 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e297      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d0f1      	beq.n	8004622 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	22f8      	movs	r2, #248	; 0xf8
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00da      	lsls	r2, r3, #3
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e018      	b.n	8004688 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004656:	4b51      	ldr	r3, [pc, #324]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800465c:	2101      	movs	r1, #1
 800465e:	438a      	bics	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fd f9c5 	bl	80019f0 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466c:	f7fd f9c0 	bl	80019f0 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e272      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2202      	movs	r2, #2
 8004684:	4013      	ands	r3, r2
 8004686:	d1f1      	bne.n	800466c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2208      	movs	r2, #8
 800468e:	4013      	ands	r3, r2
 8004690:	d036      	beq.n	8004700 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d019      	beq.n	80046ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b40      	ldr	r3, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800469c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	430a      	orrs	r2, r1
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fd f9a3 	bl	80019f0 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fd f99e 	bl	80019f0 <HAL_GetTick>
 80046b4:	0002      	movs	r2, r0
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e250      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2202      	movs	r2, #2
 80046c8:	4013      	ands	r3, r2
 80046ca:	d0f1      	beq.n	80046b0 <HAL_RCC_OscConfig+0x24c>
 80046cc:	e018      	b.n	8004700 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80046d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d2:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80046d4:	2101      	movs	r1, #1
 80046d6:	438a      	bics	r2, r1
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fd f989 	bl	80019f0 <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fd f984 	bl	80019f0 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e236      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f6:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_RCC_OscConfig+0x338>)
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2202      	movs	r2, #2
 80046fc:	4013      	ands	r3, r2
 80046fe:	d1f1      	bne.n	80046e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2204      	movs	r2, #4
 8004706:	4013      	ands	r3, r2
 8004708:	d100      	bne.n	800470c <HAL_RCC_OscConfig+0x2a8>
 800470a:	e0b5      	b.n	8004878 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470c:	201f      	movs	r0, #31
 800470e:	183b      	adds	r3, r7, r0
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	055b      	lsls	r3, r3, #21
 800471c:	4013      	ands	r3, r2
 800471e:	d110      	bne.n	8004742 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	0549      	lsls	r1, r1, #21
 800472a:	430a      	orrs	r2, r1
 800472c:	61da      	str	r2, [r3, #28]
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	055b      	lsls	r3, r3, #21
 8004736:	4013      	ands	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800473c:	183b      	adds	r3, r7, r0
 800473e:	2201      	movs	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_RCC_OscConfig+0x344>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4013      	ands	r3, r2
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474e:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_RCC_OscConfig+0x344>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x344>)
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	0049      	lsls	r1, r1, #1
 8004758:	430a      	orrs	r2, r1
 800475a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475c:	f7fd f948 	bl	80019f0 <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd f943 	bl	80019f0 <HAL_GetTick>
 800476a:	0002      	movs	r2, r0
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1f5      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x344>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4013      	ands	r3, r2
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10f      	bne.n	80047ac <HAL_RCC_OscConfig+0x348>
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_RCC_OscConfig+0x338>)
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	4b02      	ldr	r3, [pc, #8]	; (800479c <HAL_RCC_OscConfig+0x338>)
 8004792:	2101      	movs	r1, #1
 8004794:	430a      	orrs	r2, r1
 8004796:	621a      	str	r2, [r3, #32]
 8004798:	e036      	b.n	8004808 <HAL_RCC_OscConfig+0x3a4>
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40021000 	.word	0x40021000
 80047a0:	fffeffff 	.word	0xfffeffff
 80047a4:	fffbffff 	.word	0xfffbffff
 80047a8:	40007000 	.word	0x40007000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <HAL_RCC_OscConfig+0x36a>
 80047b4:	4bca      	ldr	r3, [pc, #808]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	4bc9      	ldr	r3, [pc, #804]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047ba:	2101      	movs	r1, #1
 80047bc:	438a      	bics	r2, r1
 80047be:	621a      	str	r2, [r3, #32]
 80047c0:	4bc7      	ldr	r3, [pc, #796]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	4bc6      	ldr	r3, [pc, #792]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047c6:	2104      	movs	r1, #4
 80047c8:	438a      	bics	r2, r1
 80047ca:	621a      	str	r2, [r3, #32]
 80047cc:	e01c      	b.n	8004808 <HAL_RCC_OscConfig+0x3a4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x38c>
 80047d6:	4bc2      	ldr	r3, [pc, #776]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	4bc1      	ldr	r3, [pc, #772]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047dc:	2104      	movs	r1, #4
 80047de:	430a      	orrs	r2, r1
 80047e0:	621a      	str	r2, [r3, #32]
 80047e2:	4bbf      	ldr	r3, [pc, #764]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	4bbe      	ldr	r3, [pc, #760]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047e8:	2101      	movs	r1, #1
 80047ea:	430a      	orrs	r2, r1
 80047ec:	621a      	str	r2, [r3, #32]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0x3a4>
 80047f0:	4bbb      	ldr	r3, [pc, #748]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047f2:	6a1a      	ldr	r2, [r3, #32]
 80047f4:	4bba      	ldr	r3, [pc, #744]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047f6:	2101      	movs	r1, #1
 80047f8:	438a      	bics	r2, r1
 80047fa:	621a      	str	r2, [r3, #32]
 80047fc:	4bb8      	ldr	r3, [pc, #736]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	4bb7      	ldr	r3, [pc, #732]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004802:	2104      	movs	r1, #4
 8004804:	438a      	bics	r2, r1
 8004806:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d014      	beq.n	800483a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004810:	f7fd f8ee 	bl	80019f0 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e009      	b.n	800482e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd f8e9 	bl	80019f0 <HAL_GetTick>
 800481e:	0002      	movs	r2, r0
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	4aaf      	ldr	r2, [pc, #700]	; (8004ae4 <HAL_RCC_OscConfig+0x680>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e19a      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	4bac      	ldr	r3, [pc, #688]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x3b6>
 8004838:	e013      	b.n	8004862 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fd f8d9 	bl	80019f0 <HAL_GetTick>
 800483e:	0003      	movs	r3, r0
 8004840:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	e009      	b.n	8004858 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd f8d4 	bl	80019f0 <HAL_GetTick>
 8004848:	0002      	movs	r2, r0
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4aa5      	ldr	r2, [pc, #660]	; (8004ae4 <HAL_RCC_OscConfig+0x680>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e185      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	4ba1      	ldr	r3, [pc, #644]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	2202      	movs	r2, #2
 800485e:	4013      	ands	r3, r2
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004862:	231f      	movs	r3, #31
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b9c      	ldr	r3, [pc, #624]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	4b9b      	ldr	r3, [pc, #620]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004872:	499d      	ldr	r1, [pc, #628]	; (8004ae8 <HAL_RCC_OscConfig+0x684>)
 8004874:	400a      	ands	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2210      	movs	r2, #16
 800487e:	4013      	ands	r3, r2
 8004880:	d063      	beq.n	800494a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d12a      	bne.n	80048e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800488a:	4b95      	ldr	r3, [pc, #596]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800488c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488e:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004890:	2104      	movs	r1, #4
 8004892:	430a      	orrs	r2, r1
 8004894:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004896:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489a:	4b91      	ldr	r3, [pc, #580]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800489c:	2101      	movs	r1, #1
 800489e:	430a      	orrs	r2, r1
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a2:	f7fd f8a5 	bl	80019f0 <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048ac:	f7fd f8a0 	bl	80019f0 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e152      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048be:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	2202      	movs	r2, #2
 80048c4:	4013      	ands	r3, r2
 80048c6:	d0f1      	beq.n	80048ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048c8:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	22f8      	movs	r2, #248	; 0xf8
 80048ce:	4393      	bics	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	00da      	lsls	r2, r3, #3
 80048d8:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048da:	430a      	orrs	r2, r1
 80048dc:	635a      	str	r2, [r3, #52]	; 0x34
 80048de:	e034      	b.n	800494a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	3305      	adds	r3, #5
 80048e6:	d111      	bne.n	800490c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80048e8:	4b7d      	ldr	r3, [pc, #500]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ec:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048ee:	2104      	movs	r1, #4
 80048f0:	438a      	bics	r2, r1
 80048f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048f4:	4b7a      	ldr	r3, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	22f8      	movs	r2, #248	; 0xf8
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	00da      	lsls	r2, r3, #3
 8004904:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004906:	430a      	orrs	r2, r1
 8004908:	635a      	str	r2, [r3, #52]	; 0x34
 800490a:	e01e      	b.n	800494a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800490c:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800490e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004910:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004912:	2104      	movs	r1, #4
 8004914:	430a      	orrs	r2, r1
 8004916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004918:	4b71      	ldr	r3, [pc, #452]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800491e:	2101      	movs	r1, #1
 8004920:	438a      	bics	r2, r1
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004924:	f7fd f864 	bl	80019f0 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800492e:	f7fd f85f 	bl	80019f0 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e111      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004940:	4b67      	ldr	r3, [pc, #412]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d1f1      	bne.n	800492e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2220      	movs	r2, #32
 8004950:	4013      	ands	r3, r2
 8004952:	d05c      	beq.n	8004a0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004954:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	220c      	movs	r2, #12
 800495a:	4013      	ands	r3, r2
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d00e      	beq.n	800497e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004960:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	220c      	movs	r2, #12
 8004966:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004968:	2b08      	cmp	r3, #8
 800496a:	d114      	bne.n	8004996 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800496c:	4b5c      	ldr	r3, [pc, #368]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	23c0      	movs	r3, #192	; 0xc0
 8004972:	025b      	lsls	r3, r3, #9
 8004974:	401a      	ands	r2, r3
 8004976:	23c0      	movs	r3, #192	; 0xc0
 8004978:	025b      	lsls	r3, r3, #9
 800497a:	429a      	cmp	r2, r3
 800497c:	d10b      	bne.n	8004996 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	4013      	ands	r3, r2
 8004988:	d040      	beq.n	8004a0c <HAL_RCC_OscConfig+0x5a8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d03c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0e6      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800499e:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80049a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a2:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	0249      	lsls	r1, r1, #9
 80049a8:	430a      	orrs	r2, r1
 80049aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fd f820 	bl	80019f0 <HAL_GetTick>
 80049b0:	0003      	movs	r3, r0
 80049b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fd f81b 	bl	80019f0 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0cd      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80049ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	4013      	ands	r3, r2
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x552>
 80049d4:	e01b      	b.n	8004a0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049d6:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 80049dc:	4943      	ldr	r1, [pc, #268]	; (8004aec <HAL_RCC_OscConfig+0x688>)
 80049de:	400a      	ands	r2, r1
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fd f805 	bl	80019f0 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ec:	f7fd f800 	bl	80019f0 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0b2      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80049fe:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	025b      	lsls	r3, r3, #9
 8004a06:	4013      	ands	r3, r2
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x588>
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004a0c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d100      	bne.n	8004a18 <HAL_RCC_OscConfig+0x5b4>
 8004a16:	e0a4      	b.n	8004b62 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a18:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	220c      	movs	r2, #12
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d100      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5c2>
 8004a24:	e078      	b.n	8004b18 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d14c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a34:	492e      	ldr	r1, [pc, #184]	; (8004af0 <HAL_RCC_OscConfig+0x68c>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fc ffd9 	bl	80019f0 <HAL_GetTick>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fc ffd4 	bl	80019f0 <HAL_GetTick>
 8004a48:	0002      	movs	r2, r0
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e086      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	049b      	lsls	r3, r3, #18
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	220f      	movs	r2, #15
 8004a68:	4393      	bics	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a72:	430a      	orrs	r2, r1
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a76:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <HAL_RCC_OscConfig+0x690>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	0449      	lsls	r1, r1, #17
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fc ffa7 	bl	80019f0 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fc ffa2 	bl	80019f0 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e054      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	049b      	lsls	r3, r3, #18
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x644>
 8004ac6:	e04c      	b.n	8004b62 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x67c>)
 8004ace:	4908      	ldr	r1, [pc, #32]	; (8004af0 <HAL_RCC_OscConfig+0x68c>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fc ff8c 	bl	80019f0 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	e015      	b.n	8004b0a <HAL_RCC_OscConfig+0x6a6>
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	00001388 	.word	0x00001388
 8004ae8:	efffffff 	.word	0xefffffff
 8004aec:	fffeffff 	.word	0xfffeffff
 8004af0:	feffffff 	.word	0xfeffffff
 8004af4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fc ff7a 	bl	80019f0 <HAL_GetTick>
 8004afc:	0002      	movs	r2, r0
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e02c      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <HAL_RCC_OscConfig+0x708>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	049b      	lsls	r3, r3, #18
 8004b12:	4013      	ands	r3, r2
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x694>
 8004b16:	e024      	b.n	8004b62 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e01f      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_RCC_OscConfig+0x708>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_RCC_OscConfig+0x708>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	23c0      	movs	r3, #192	; 0xc0
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d10e      	bne.n	8004b5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	220f      	movs	r2, #15
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	23f0      	movs	r3, #240	; 0xf0
 8004b52:	039b      	lsls	r3, r3, #14
 8004b54:	401a      	ands	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b008      	add	sp, #32
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000

08004b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0bf      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d911      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b5e      	ldr	r3, [pc, #376]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	4393      	bics	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0a6      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d015      	beq.n	8004bec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d006      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bca:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004bd0:	21e0      	movs	r1, #224	; 0xe0
 8004bd2:	00c9      	lsls	r1, r1, #3
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	22f0      	movs	r2, #240	; 0xf0
 8004bde:	4393      	bics	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d04c      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b44      	ldr	r3, [pc, #272]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	029b      	lsls	r3, r3, #10
 8004c06:	4013      	ands	r3, r2
 8004c08:	d120      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07a      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	049b      	lsls	r3, r3, #18
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d114      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e06e      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	4013      	ands	r3, r2
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e062      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2202      	movs	r2, #2
 8004c44:	4013      	ands	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e05b      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4c:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	4393      	bics	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fc fec6 	bl	80019f0 <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c68:	e009      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fc fec1 	bl	80019f0 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_RCC_ClockConfig+0x1a4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e042      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	220c      	movs	r2, #12
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1ec      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2201      	movs	r2, #1
 8004c96:	4013      	ands	r3, r2
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d211      	bcs.n	8004cc2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb0:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <HAL_RCC_ClockConfig+0x19c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e020      	b.n	8004d04 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <HAL_RCC_ClockConfig+0x1a8>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ce0:	f000 f820 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004ce4:	0001      	movs	r1, r0
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x1a0>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	220f      	movs	r2, #15
 8004cee:	4013      	ands	r3, r2
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1ac>)
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	000a      	movs	r2, r1
 8004cf6:	40da      	lsrs	r2, r3
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1b0>)
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cfc:	2003      	movs	r0, #3
 8004cfe:	f7fc fe31 	bl	8001964 <HAL_InitTick>
  
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	00001388 	.word	0x00001388
 8004d18:	fffff8ff 	.word	0xfffff8ff
 8004d1c:	0800c644 	.word	0x0800c644
 8004d20:	20000000 	.word	0x20000000

08004d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b08f      	sub	sp, #60	; 0x3c
 8004d28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004d2a:	2314      	movs	r3, #20
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xec>)
 8004d30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d32:	c313      	stmia	r3!, {r0, r1, r4}
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	4a36      	ldr	r2, [pc, #216]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004d58:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	220c      	movs	r2, #12
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d047      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0xd4>
 8004d68:	d849      	bhi.n	8004dfe <HAL_RCC_GetSysClockFreq+0xda>
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x50>
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x56>
 8004d72:	e044      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004d78:	e044      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	0c9b      	lsrs	r3, r3, #18
 8004d7e:	220f      	movs	r2, #15
 8004d80:	4013      	ands	r3, r2
 8004d82:	2214      	movs	r2, #20
 8004d84:	18ba      	adds	r2, r7, r2
 8004d86:	5cd3      	ldrb	r3, [r2, r3]
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	220f      	movs	r2, #15
 8004d90:	4013      	ands	r3, r2
 8004d92:	1d3a      	adds	r2, r7, #4
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9a:	23c0      	movs	r3, #192	; 0xc0
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	401a      	ands	r2, r3
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	025b      	lsls	r3, r3, #9
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d109      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	481c      	ldr	r0, [pc, #112]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dac:	f7fb f9be 	bl	800012c <__udivsi3>
 8004db0:	0003      	movs	r3, r0
 8004db2:	001a      	movs	r2, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	4353      	muls	r3, r2
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e01a      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbe:	23c0      	movs	r3, #192	; 0xc0
 8004dc0:	025b      	lsls	r3, r3, #9
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	23c0      	movs	r3, #192	; 0xc0
 8004dc6:	025b      	lsls	r3, r3, #9
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d109      	bne.n	8004de0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dce:	4814      	ldr	r0, [pc, #80]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dd0:	f7fb f9ac 	bl	800012c <__udivsi3>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	4353      	muls	r3, r2
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de2:	4810      	ldr	r0, [pc, #64]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004de4:	f7fb f9a2 	bl	800012c <__udivsi3>
 8004de8:	0003      	movs	r3, r0
 8004dea:	001a      	movs	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	4353      	muls	r3, r2
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004dfc:	e002      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x100>)
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b00f      	add	sp, #60	; 0x3c
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	0800c5dc 	.word	0x0800c5dc
 8004e14:	0800c5ec 	.word	0x0800c5ec
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	02dc6c00 	.word	0x02dc6c00
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004e40:	f7ff fff2 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e44:	0001      	movs	r1, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	4013      	ands	r3, r2
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	40d9      	lsrs	r1, r3
 8004e56:	000b      	movs	r3, r1
}    
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800c654 	.word	0x0800c654

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	025b      	lsls	r3, r3, #9
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004e84:	e08e      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2017      	movs	r0, #23
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8e:	4b6e      	ldr	r3, [pc, #440]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	055b      	lsls	r3, r3, #21
 8004e96:	4013      	ands	r3, r2
 8004e98:	d110      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	4b6b      	ldr	r3, [pc, #428]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ea0:	2180      	movs	r1, #128	; 0x80
 8004ea2:	0549      	lsls	r1, r1, #21
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	61da      	str	r2, [r3, #28]
 8004ea8:	4b67      	ldr	r3, [pc, #412]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	055b      	lsls	r3, r3, #21
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb6:	183b      	adds	r3, r7, r0
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	4b63      	ldr	r3, [pc, #396]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d11a      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec8:	4b60      	ldr	r3, [pc, #384]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b5f      	ldr	r3, [pc, #380]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	0049      	lsls	r1, r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed6:	f7fc fd8b 	bl	80019f0 <HAL_GetTick>
 8004eda:	0003      	movs	r3, r0
 8004edc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	e008      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee0:	f7fc fd86 	bl	80019f0 <HAL_GetTick>
 8004ee4:	0002      	movs	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0a6      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b56      	ldr	r3, [pc, #344]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4013      	ands	r3, r2
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efe:	4b52      	ldr	r3, [pc, #328]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	23c0      	movs	r3, #192	; 0xc0
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4013      	ands	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d034      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	23c0      	movs	r3, #192	; 0xc0
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d02c      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f20:	4b49      	ldr	r3, [pc, #292]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f2a:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	4b46      	ldr	r3, [pc, #280]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0249      	lsls	r1, r1, #9
 8004f34:	430a      	orrs	r2, r1
 8004f36:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f38:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	4b42      	ldr	r3, [pc, #264]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f3e:	4945      	ldr	r1, [pc, #276]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f44:	4b40      	ldr	r3, [pc, #256]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fc fd4d 	bl	80019f0 <HAL_GetTick>
 8004f56:	0003      	movs	r3, r0
 8004f58:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5a:	e009      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fc fd48 	bl	80019f0 <HAL_GetTick>
 8004f60:	0002      	movs	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e067      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	4b35      	ldr	r3, [pc, #212]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	2202      	movs	r2, #2
 8004f76:	4013      	ands	r3, r2
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7a:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	4a34      	ldr	r2, [pc, #208]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f8e:	2317      	movs	r3, #23
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f9e:	492f      	ldr	r1, [pc, #188]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fcc:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	2210      	movs	r2, #16
 8004ff0:	4393      	bics	r3, r2
 8004ff2:	0019      	movs	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	4013      	ands	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2280      	movs	r2, #128	; 0x80
 8005010:	4393      	bics	r3, r2
 8005012:	0019      	movs	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800501a:	430a      	orrs	r2, r1
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4013      	ands	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	2240      	movs	r2, #64	; 0x40
 8005030:	4393      	bics	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800503a:	430a      	orrs	r2, r1
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	40007000 	.word	0x40007000
 8005050:	fffffcff 	.word	0xfffffcff
 8005054:	fffeffff 	.word	0xfffeffff
 8005058:	00001388 	.word	0x00001388
 800505c:	efffffff 	.word	0xefffffff
 8005060:	fffcffff 	.word	0xfffcffff

08005064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0a8      	b.n	80051c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	2382      	movs	r3, #130	; 0x82
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	429a      	cmp	r2, r3
 8005088:	d009      	beq.n	800509e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	61da      	str	r2, [r3, #28]
 8005090:	e005      	b.n	800509e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	225d      	movs	r2, #93	; 0x5d
 80050a8:	5c9b      	ldrb	r3, [r3, r2]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	225c      	movs	r2, #92	; 0x5c
 80050b4:	2100      	movs	r1, #0
 80050b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7fc fab6 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	225d      	movs	r2, #93	; 0x5d
 80050c4:	2102      	movs	r1, #2
 80050c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2140      	movs	r1, #64	; 0x40
 80050d4:	438a      	bics	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	23e0      	movs	r3, #224	; 0xe0
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d902      	bls.n	80050ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e002      	b.n	80050f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	015b      	lsls	r3, r3, #5
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	23f0      	movs	r3, #240	; 0xf0
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d008      	beq.n	800510e <HAL_SPI_Init+0xaa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	23e0      	movs	r3, #224	; 0xe0
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	429a      	cmp	r2, r3
 8005106:	d002      	beq.n	800510e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	2382      	movs	r3, #130	; 0x82
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	401a      	ands	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	2384      	movs	r3, #132	; 0x84
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	400b      	ands	r3, r1
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2102      	movs	r1, #2
 800512a:	400b      	ands	r3, r1
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2101      	movs	r1, #1
 8005134:	400b      	ands	r3, r1
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6999      	ldr	r1, [r3, #24]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	400b      	ands	r3, r1
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2138      	movs	r1, #56	; 0x38
 800514a:	400b      	ands	r3, r1
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	2180      	movs	r1, #128	; 0x80
 8005154:	400b      	ands	r3, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	0011      	movs	r1, r2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	2204      	movs	r2, #4
 8005174:	401a      	ands	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2110      	movs	r1, #16
 800517c:	400b      	ands	r3, r1
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005184:	2108      	movs	r1, #8
 8005186:	400b      	ands	r3, r1
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	23f0      	movs	r3, #240	; 0xf0
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	400b      	ands	r3, r1
 8005194:	431a      	orrs	r2, r3
 8005196:	0011      	movs	r1, r2
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	401a      	ands	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4907      	ldr	r1, [pc, #28]	; (80051d0 <HAL_SPI_Init+0x16c>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	225d      	movs	r2, #93	; 0x5d
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	fffff7ff 	.word	0xfffff7ff

080051d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	1dbb      	adds	r3, r7, #6
 80051e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e4:	231f      	movs	r3, #31
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	225c      	movs	r2, #92	; 0x5c
 80051f0:	5c9b      	ldrb	r3, [r3, r2]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_Transmit+0x26>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e140      	b.n	800547c <HAL_SPI_Transmit+0x2a8>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	225c      	movs	r2, #92	; 0x5c
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005202:	f7fc fbf5 	bl	80019f0 <HAL_GetTick>
 8005206:	0003      	movs	r3, r0
 8005208:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800520a:	2316      	movs	r3, #22
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	1dba      	adds	r2, r7, #6
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	225d      	movs	r2, #93	; 0x5d
 8005218:	5c9b      	ldrb	r3, [r3, r2]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d004      	beq.n	800522a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005220:	231f      	movs	r3, #31
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	2202      	movs	r2, #2
 8005226:	701a      	strb	r2, [r3, #0]
    goto error;
 8005228:	e11d      	b.n	8005466 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_SPI_Transmit+0x64>
 8005230:	1dbb      	adds	r3, r7, #6
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005238:	231f      	movs	r3, #31
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005240:	e111      	b.n	8005466 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	225d      	movs	r2, #93	; 0x5d
 8005246:	2103      	movs	r1, #3
 8005248:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1dba      	adds	r2, r7, #6
 800525a:	8812      	ldrh	r2, [r2, #0]
 800525c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1dba      	adds	r2, r7, #6
 8005262:	8812      	ldrh	r2, [r2, #0]
 8005264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2244      	movs	r2, #68	; 0x44
 8005270:	2100      	movs	r1, #0
 8005272:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2246      	movs	r2, #70	; 0x46
 8005278:	2100      	movs	r1, #0
 800527a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	429a      	cmp	r2, r3
 8005292:	d110      	bne.n	80052b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2140      	movs	r1, #64	; 0x40
 80052a0:	438a      	bics	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	01c9      	lsls	r1, r1, #7
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	4013      	ands	r3, r2
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d007      	beq.n	80052d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2140      	movs	r1, #64	; 0x40
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	23e0      	movs	r3, #224	; 0xe0
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	429a      	cmp	r2, r3
 80052de:	d94e      	bls.n	800537e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <HAL_SPI_Transmit+0x11e>
 80052e8:	2316      	movs	r3, #22
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d13f      	bne.n	8005372 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005316:	e02c      	b.n	8005372 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d112      	bne.n	800534c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800534a:	e012      	b.n	8005372 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534c:	f7fc fb50 	bl	80019f0 <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d802      	bhi.n	8005362 <HAL_SPI_Transmit+0x18e>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Transmit+0x194>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005368:	231f      	movs	r3, #31
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2203      	movs	r2, #3
 800536e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005370:	e079      	b.n	8005466 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1cd      	bne.n	8005318 <HAL_SPI_Transmit+0x144>
 800537c:	e04f      	b.n	800541e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_SPI_Transmit+0x1bc>
 8005386:	2316      	movs	r3, #22
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d141      	bne.n	8005414 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80053b6:	e02d      	b.n	8005414 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2202      	movs	r2, #2
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d113      	bne.n	80053ee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ec:	e012      	b.n	8005414 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ee:	f7fc faff 	bl	80019f0 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d802      	bhi.n	8005404 <HAL_SPI_Transmit+0x230>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_SPI_Transmit+0x236>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800540a:	231f      	movs	r3, #31
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	2203      	movs	r2, #3
 8005410:	701a      	strb	r2, [r3, #0]
          goto error;
 8005412:	e028      	b.n	8005466 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1cc      	bne.n	80053b8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	0018      	movs	r0, r3
 8005426:	f000 fcd9 	bl	8005ddc <SPI_EndRxTxTransaction>
 800542a:	1e03      	subs	r3, r0, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800545a:	231f      	movs	r3, #31
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e000      	b.n	8005466 <HAL_SPI_Transmit+0x292>
  }

error:
 8005464:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	225d      	movs	r2, #93	; 0x5d
 800546a:	2101      	movs	r1, #1
 800546c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	225c      	movs	r2, #92	; 0x5c
 8005472:	2100      	movs	r1, #0
 8005474:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005476:	231f      	movs	r3, #31
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b008      	add	sp, #32
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	1dbb      	adds	r3, r7, #6
 8005492:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005494:	2317      	movs	r3, #23
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	2382      	movs	r3, #130	; 0x82
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d113      	bne.n	80054d0 <HAL_SPI_Receive+0x4c>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10f      	bne.n	80054d0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	225d      	movs	r2, #93	; 0x5d
 80054b4:	2104      	movs	r1, #4
 80054b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054b8:	1dbb      	adds	r3, r7, #6
 80054ba:	881c      	ldrh	r4, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	0023      	movs	r3, r4
 80054c8:	f000 f928 	bl	800571c <HAL_SPI_TransmitReceive>
 80054cc:	0003      	movs	r3, r0
 80054ce:	e11c      	b.n	800570a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	225c      	movs	r2, #92	; 0x5c
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Receive+0x5a>
 80054da:	2302      	movs	r3, #2
 80054dc:	e115      	b.n	800570a <HAL_SPI_Receive+0x286>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	225c      	movs	r2, #92	; 0x5c
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e6:	f7fc fa83 	bl	80019f0 <HAL_GetTick>
 80054ea:	0003      	movs	r3, r0
 80054ec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	225d      	movs	r2, #93	; 0x5d
 80054f2:	5c9b      	ldrb	r3, [r3, r2]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d004      	beq.n	8005504 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80054fa:	2317      	movs	r3, #23
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
    goto error;
 8005502:	e0f7      	b.n	80056f4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_SPI_Receive+0x8e>
 800550a:	1dbb      	adds	r3, r7, #6
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005512:	2317      	movs	r3, #23
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
    goto error;
 800551a:	e0eb      	b.n	80056f4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	225d      	movs	r2, #93	; 0x5d
 8005520:	2104      	movs	r1, #4
 8005522:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1dba      	adds	r2, r7, #6
 8005534:	2144      	movs	r1, #68	; 0x44
 8005536:	8812      	ldrh	r2, [r2, #0]
 8005538:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1dba      	adds	r2, r7, #6
 800553e:	2146      	movs	r1, #70	; 0x46
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	23e0      	movs	r3, #224	; 0xe0
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	429a      	cmp	r2, r3
 800556c:	d908      	bls.n	8005580 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4966      	ldr	r1, [pc, #408]	; (8005714 <HAL_SPI_Receive+0x290>)
 800557a:	400a      	ands	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	e008      	b.n	8005592 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	0149      	lsls	r1, r1, #5
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	429a      	cmp	r2, r3
 800559c:	d10f      	bne.n	80055be <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	438a      	bics	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4957      	ldr	r1, [pc, #348]	; (8005718 <HAL_SPI_Receive+0x294>)
 80055ba:	400a      	ands	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d007      	beq.n	80055dc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2140      	movs	r1, #64	; 0x40
 80055d8:	430a      	orrs	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	23e0      	movs	r3, #224	; 0xe0
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d900      	bls.n	80055ea <HAL_SPI_Receive+0x166>
 80055e8:	e069      	b.n	80056be <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055ea:	e031      	b.n	8005650 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d117      	bne.n	800562a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	001a      	movs	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2246      	movs	r2, #70	; 0x46
 800561a:	5a9b      	ldrh	r3, [r3, r2]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b299      	uxth	r1, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2246      	movs	r2, #70	; 0x46
 8005626:	5299      	strh	r1, [r3, r2]
 8005628:	e012      	b.n	8005650 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562a:	f7fc f9e1 	bl	80019f0 <HAL_GetTick>
 800562e:	0002      	movs	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d802      	bhi.n	8005640 <HAL_SPI_Receive+0x1bc>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	d102      	bne.n	8005646 <HAL_SPI_Receive+0x1c2>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	2203      	movs	r2, #3
 800564c:	701a      	strb	r2, [r3, #0]
          goto error;
 800564e:	e051      	b.n	80056f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2246      	movs	r2, #70	; 0x46
 8005654:	5a9b      	ldrh	r3, [r3, r2]
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1c7      	bne.n	80055ec <HAL_SPI_Receive+0x168>
 800565c:	e035      	b.n	80056ca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2201      	movs	r2, #1
 8005666:	4013      	ands	r3, r2
 8005668:	2b01      	cmp	r3, #1
 800566a:	d115      	bne.n	8005698 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	b292      	uxth	r2, r2
 8005678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2246      	movs	r2, #70	; 0x46
 8005688:	5a9b      	ldrh	r3, [r3, r2]
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b299      	uxth	r1, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2246      	movs	r2, #70	; 0x46
 8005694:	5299      	strh	r1, [r3, r2]
 8005696:	e012      	b.n	80056be <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005698:	f7fc f9aa 	bl	80019f0 <HAL_GetTick>
 800569c:	0002      	movs	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d802      	bhi.n	80056ae <HAL_SPI_Receive+0x22a>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	d102      	bne.n	80056b4 <HAL_SPI_Receive+0x230>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80056b4:	2317      	movs	r3, #23
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2203      	movs	r2, #3
 80056ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80056bc:	e01a      	b.n	80056f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2246      	movs	r2, #70	; 0x46
 80056c2:	5a9b      	ldrh	r3, [r3, r2]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1c9      	bne.n	800565e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 fb25 	bl	8005d20 <SPI_EndRxTransaction>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80056e8:	2317      	movs	r3, #23
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e000      	b.n	80056f4 <HAL_SPI_Receive+0x270>
  }

error :
 80056f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	225d      	movs	r2, #93	; 0x5d
 80056f8:	2101      	movs	r1, #1
 80056fa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	225c      	movs	r2, #92	; 0x5c
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005704:	2317      	movs	r3, #23
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	781b      	ldrb	r3, [r3, #0]
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b007      	add	sp, #28
 8005710:	bd90      	pop	{r4, r7, pc}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	ffffefff 	.word	0xffffefff
 8005718:	ffffbfff 	.word	0xffffbfff

0800571c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	001a      	movs	r2, r3
 800572a:	1cbb      	adds	r3, r7, #2
 800572c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800572e:	2301      	movs	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005732:	2323      	movs	r3, #35	; 0x23
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	225c      	movs	r2, #92	; 0x5c
 800573e:	5c9b      	ldrb	r3, [r3, r2]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x2c>
 8005744:	2302      	movs	r3, #2
 8005746:	e1b5      	b.n	8005ab4 <HAL_SPI_TransmitReceive+0x398>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	225c      	movs	r2, #92	; 0x5c
 800574c:	2101      	movs	r1, #1
 800574e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005750:	f7fc f94e 	bl	80019f0 <HAL_GetTick>
 8005754:	0003      	movs	r3, r0
 8005756:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005758:	201b      	movs	r0, #27
 800575a:	183b      	adds	r3, r7, r0
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	215d      	movs	r1, #93	; 0x5d
 8005760:	5c52      	ldrb	r2, [r2, r1]
 8005762:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800576a:	2312      	movs	r3, #18
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	1cba      	adds	r2, r7, #2
 8005770:	8812      	ldrh	r2, [r2, #0]
 8005772:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005774:	183b      	adds	r3, r7, r0
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d011      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x84>
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	2382      	movs	r3, #130	; 0x82
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	429a      	cmp	r2, r3
 8005784:	d107      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x7a>
 800578e:	183b      	adds	r3, r7, r0
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d004      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005796:	2323      	movs	r3, #35	; 0x23
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	2202      	movs	r2, #2
 800579c:	701a      	strb	r2, [r3, #0]
    goto error;
 800579e:	e17e      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d006      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x98>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x98>
 80057ac:	1cbb      	adds	r3, r7, #2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80057b4:	2323      	movs	r3, #35	; 0x23
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80057bc:	e16f      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	225d      	movs	r2, #93	; 0x5d
 80057c2:	5c9b      	ldrb	r3, [r3, r2]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d003      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	225d      	movs	r2, #93	; 0x5d
 80057ce:	2105      	movs	r1, #5
 80057d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1cba      	adds	r2, r7, #2
 80057e2:	2146      	movs	r1, #70	; 0x46
 80057e4:	8812      	ldrh	r2, [r2, #0]
 80057e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1cba      	adds	r2, r7, #2
 80057ec:	2144      	movs	r1, #68	; 0x44
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1cba      	adds	r2, r7, #2
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1cba      	adds	r2, r7, #2
 8005804:	8812      	ldrh	r2, [r2, #0]
 8005806:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	23e0      	movs	r3, #224	; 0xe0
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	429a      	cmp	r2, r3
 800581e:	d908      	bls.n	8005832 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	49a4      	ldr	r1, [pc, #656]	; (8005abc <HAL_SPI_TransmitReceive+0x3a0>)
 800582c:	400a      	ands	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	e008      	b.n	8005844 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	0149      	lsls	r1, r1, #5
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2240      	movs	r2, #64	; 0x40
 800584c:	4013      	ands	r3, r2
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d007      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	430a      	orrs	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	23e0      	movs	r3, #224	; 0xe0
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	429a      	cmp	r2, r3
 800586c:	d800      	bhi.n	8005870 <HAL_SPI_TransmitReceive+0x154>
 800586e:	e07f      	b.n	8005970 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x168>
 8005878:	2312      	movs	r3, #18
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d000      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x168>
 8005882:	e069      	b.n	8005958 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a8:	e056      	b.n	8005958 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2202      	movs	r2, #2
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d11b      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x1d4>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x1d4>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d113      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2201      	movs	r2, #1
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d11c      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x21c>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2246      	movs	r2, #70	; 0x46
 8005902:	5a9b      	ldrh	r3, [r3, r2]
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2246      	movs	r2, #70	; 0x46
 8005926:	5a9b      	ldrh	r3, [r3, r2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b299      	uxth	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2246      	movs	r2, #70	; 0x46
 8005932:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005938:	f7fc f85a 	bl	80019f0 <HAL_GetTick>
 800593c:	0002      	movs	r2, r0
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005944:	429a      	cmp	r2, r3
 8005946:	d807      	bhi.n	8005958 <HAL_SPI_TransmitReceive+0x23c>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	3301      	adds	r3, #1
 800594c:	d004      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800594e:	2323      	movs	r3, #35	; 0x23
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	2203      	movs	r2, #3
 8005954:	701a      	strb	r2, [r3, #0]
        goto error;
 8005956:	e0a2      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1a3      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x18e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2246      	movs	r2, #70	; 0x46
 8005966:	5a9b      	ldrh	r3, [r3, r2]
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d19d      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x18e>
 800596e:	e085      	b.n	8005a7c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x268>
 8005978:	2312      	movs	r3, #18
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d000      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x268>
 8005982:	e070      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059aa:	e05c      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2202      	movs	r2, #2
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d11c      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x2d8>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x2d8>
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d114      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2201      	movs	r2, #1
 80059fc:	4013      	ands	r3, r2
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d11e      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x324>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2246      	movs	r2, #70	; 0x46
 8005a06:	5a9b      	ldrh	r3, [r3, r2]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	001a      	movs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2246      	movs	r2, #70	; 0x46
 8005a2e:	5a9b      	ldrh	r3, [r3, r2]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b299      	uxth	r1, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2246      	movs	r2, #70	; 0x46
 8005a3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a40:	f7fb ffd6 	bl	80019f0 <HAL_GetTick>
 8005a44:	0002      	movs	r2, r0
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d802      	bhi.n	8005a56 <HAL_SPI_TransmitReceive+0x33a>
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3301      	adds	r3, #1
 8005a54:	d102      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x340>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005a5c:	2323      	movs	r3, #35	; 0x23
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	2203      	movs	r2, #3
 8005a62:	701a      	strb	r2, [r3, #0]
        goto error;
 8005a64:	e01b      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d19d      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x290>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2246      	movs	r2, #70	; 0x46
 8005a74:	5a9b      	ldrh	r3, [r3, r2]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d197      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f9aa 	bl	8005ddc <SPI_EndRxTxTransaction>
 8005a88:	1e03      	subs	r3, r0, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005a8c:	2323      	movs	r3, #35	; 0x23
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
 8005a9a:	e000      	b.n	8005a9e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005a9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	225d      	movs	r2, #93	; 0x5d
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	225c      	movs	r2, #92	; 0x5c
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005aae:	2323      	movs	r3, #35	; 0x23
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	781b      	ldrb	r3, [r3, #0]
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b00a      	add	sp, #40	; 0x28
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	ffffefff 	.word	0xffffefff

08005ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad0:	f7fb ff8e 	bl	80019f0 <HAL_GetTick>
 8005ad4:	0002      	movs	r2, r0
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae0:	f7fb ff86 	bl	80019f0 <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	; (8005bd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	015b      	lsls	r3, r3, #5
 8005aee:	0d1b      	lsrs	r3, r3, #20
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	4353      	muls	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af6:	e058      	b.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	d055      	beq.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005afe:	f7fb ff77 	bl	80019f0 <HAL_GetTick>
 8005b02:	0002      	movs	r2, r0
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d902      	bls.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d142      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	21e0      	movs	r1, #224	; 0xe0
 8005b20:	438a      	bics	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	2382      	movs	r3, #130	; 0x82
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d113      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d005      	beq.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d107      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2140      	movs	r1, #64	; 0x40
 8005b54:	438a      	bics	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	019b      	lsls	r3, r3, #6
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d110      	bne.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	491a      	ldr	r1, [pc, #104]	; (8005bd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005b70:	400a      	ands	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	0189      	lsls	r1, r1, #6
 8005b82:	430a      	orrs	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	225d      	movs	r2, #93	; 0x5d
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	225c      	movs	r2, #92	; 0x5c
 8005b92:	2100      	movs	r1, #0
 8005b94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e017      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	425a      	negs	r2, r3
 8005bba:	4153      	adcs	r3, r2
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	1dfb      	adds	r3, r7, #7
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d197      	bne.n	8005af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b008      	add	sp, #32
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	20000000 	.word	0x20000000
 8005bd8:	ffffdfff 	.word	0xffffdfff

08005bdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bea:	2317      	movs	r3, #23
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bf2:	f7fb fefd 	bl	80019f0 <HAL_GetTick>
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c02:	f7fb fef5 	bl	80019f0 <HAL_GetTick>
 8005c06:	0003      	movs	r3, r0
 8005c08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c12:	4b41      	ldr	r3, [pc, #260]	; (8005d18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	0013      	movs	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	189b      	adds	r3, r3, r2
 8005c1c:	00da      	lsls	r2, r3, #3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	0d1b      	lsrs	r3, r3, #20
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	4353      	muls	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c28:	e068      	b.n	8005cfc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	23c0      	movs	r3, #192	; 0xc0
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d10a      	bne.n	8005c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d107      	bne.n	8005c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	2117      	movs	r1, #23
 8005c42:	187b      	adds	r3, r7, r1
 8005c44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	d055      	beq.n	8005cfc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c50:	f7fb fece 	bl	80019f0 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d902      	bls.n	8005c66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d142      	bne.n	8005cec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	21e0      	movs	r1, #224	; 0xe0
 8005c72:	438a      	bics	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	2382      	movs	r3, #130	; 0x82
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d113      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0xce>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d005      	beq.n	8005c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d107      	bne.n	8005caa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	438a      	bics	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	019b      	lsls	r3, r3, #6
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d110      	bne.n	8005cd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4916      	ldr	r1, [pc, #88]	; (8005d1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	0189      	lsls	r1, r1, #6
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	225d      	movs	r2, #93	; 0x5d
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	225c      	movs	r2, #92	; 0x5c
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e010      	b.n	8005d0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d18e      	bne.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b00a      	add	sp, #40	; 0x28
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	ffffdfff 	.word	0xffffdfff

08005d20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	2382      	movs	r3, #130	; 0x82
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d113      	bne.n	8005d60 <SPI_EndRxTransaction+0x40>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d005      	beq.n	8005d50 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d107      	bne.n	8005d60 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2140      	movs	r1, #64	; 0x40
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	0013      	movs	r3, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	f7ff fea7 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005d72:	1e03      	subs	r3, r0, #0
 8005d74:	d007      	beq.n	8005d86 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e026      	b.n	8005dd4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	2382      	movs	r3, #130	; 0x82
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d11f      	bne.n	8005dd2 <SPI_EndRxTransaction+0xb2>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d005      	beq.n	8005daa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d113      	bne.n	8005dd2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	23c0      	movs	r3, #192	; 0xc0
 8005dae:	00d9      	lsls	r1, r3, #3
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	0013      	movs	r3, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	f7ff ff0f 	bl	8005bdc <SPI_WaitFifoStateUntilTimeout>
 8005dbe:	1e03      	subs	r3, r0, #0
 8005dc0:	d007      	beq.n	8005dd2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e000      	b.n	8005dd4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	23c0      	movs	r3, #192	; 0xc0
 8005dec:	0159      	lsls	r1, r3, #5
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	0013      	movs	r3, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	f7ff fef0 	bl	8005bdc <SPI_WaitFifoStateUntilTimeout>
 8005dfc:	1e03      	subs	r3, r0, #0
 8005dfe:	d007      	beq.n	8005e10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e04:	2220      	movs	r2, #32
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e027      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	0013      	movs	r3, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	f7ff fe4f 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d007      	beq.n	8005e36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e014      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	23c0      	movs	r3, #192	; 0xc0
 8005e3a:	00d9      	lsls	r1, r3, #3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	0013      	movs	r3, r2
 8005e44:	2200      	movs	r2, #0
 8005e46:	f7ff fec9 	bl	8005bdc <SPI_WaitFifoStateUntilTimeout>
 8005e4a:	1e03      	subs	r3, r0, #0
 8005e4c:	d007      	beq.n	8005e5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	2220      	movs	r2, #32
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e000      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	0018      	movs	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b004      	add	sp, #16
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e042      	b.n	8005f00 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	223d      	movs	r2, #61	; 0x3d
 8005e7e:	5c9b      	ldrb	r3, [r3, r2]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d107      	bne.n	8005e96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	223c      	movs	r2, #60	; 0x3c
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fb fc19 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	223d      	movs	r2, #61	; 0x3d
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	0010      	movs	r0, r2
 8005eaa:	f000 fa65 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2246      	movs	r2, #70	; 0x46
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	223e      	movs	r2, #62	; 0x3e
 8005eba:	2101      	movs	r1, #1
 8005ebc:	5499      	strb	r1, [r3, r2]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	223f      	movs	r2, #63	; 0x3f
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	5499      	strb	r1, [r3, r2]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	2101      	movs	r1, #1
 8005ecc:	5499      	strb	r1, [r3, r2]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2241      	movs	r2, #65	; 0x41
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2242      	movs	r2, #66	; 0x42
 8005eda:	2101      	movs	r1, #1
 8005edc:	5499      	strb	r1, [r3, r2]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2243      	movs	r2, #67	; 0x43
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	5499      	strb	r1, [r3, r2]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2244      	movs	r2, #68	; 0x44
 8005eea:	2101      	movs	r1, #1
 8005eec:	5499      	strb	r1, [r3, r2]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2245      	movs	r2, #69	; 0x45
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	223d      	movs	r2, #61	; 0x3d
 8005efa:	2101      	movs	r1, #1
 8005efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b002      	add	sp, #8
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	223d      	movs	r2, #61	; 0x3d
 8005f14:	5c9b      	ldrb	r3, [r3, r2]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d001      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e03b      	b.n	8005f98 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	223d      	movs	r2, #61	; 0x3d
 8005f24:	2102      	movs	r1, #2
 8005f26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2101      	movs	r1, #1
 8005f34:	430a      	orrs	r2, r1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <HAL_TIM_Base_Start_IT+0x98>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00f      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0x5a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	05db      	lsls	r3, r3, #23
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0x5a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0x5a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d111      	bne.n	8005f86 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2207      	movs	r2, #7
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d010      	beq.n	8005f96 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2101      	movs	r1, #1
 8005f80:	430a      	orrs	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f84:	e007      	b.n	8005f96 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2101      	movs	r1, #1
 8005f92:	430a      	orrs	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b004      	add	sp, #16
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40014000 	.word	0x40014000

08005fac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e042      	b.n	8006044 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	223d      	movs	r2, #61	; 0x3d
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223c      	movs	r2, #60	; 0x3c
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 f839 	bl	800604c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	223d      	movs	r2, #61	; 0x3d
 8005fde:	2102      	movs	r1, #2
 8005fe0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	0019      	movs	r1, r3
 8005fec:	0010      	movs	r0, r2
 8005fee:	f000 f9c3 	bl	8006378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2246      	movs	r2, #70	; 0x46
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	223e      	movs	r2, #62	; 0x3e
 8005ffe:	2101      	movs	r1, #1
 8006000:	5499      	strb	r1, [r3, r2]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	223f      	movs	r2, #63	; 0x3f
 8006006:	2101      	movs	r1, #1
 8006008:	5499      	strb	r1, [r3, r2]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	2101      	movs	r1, #1
 8006010:	5499      	strb	r1, [r3, r2]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2241      	movs	r2, #65	; 0x41
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2242      	movs	r2, #66	; 0x42
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2243      	movs	r2, #67	; 0x43
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2244      	movs	r2, #68	; 0x44
 800602e:	2101      	movs	r1, #1
 8006030:	5499      	strb	r1, [r3, r2]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2245      	movs	r2, #69	; 0x45
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	223d      	movs	r2, #61	; 0x3d
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006054:	46c0      	nop			; (mov r8, r8)
 8006056:	46bd      	mov	sp, r7
 8006058:	b002      	add	sp, #8
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2202      	movs	r2, #2
 800606c:	4013      	ands	r3, r2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d124      	bne.n	80060bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2202      	movs	r2, #2
 800607a:	4013      	ands	r3, r2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d11d      	bne.n	80060bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2203      	movs	r2, #3
 8006086:	4252      	negs	r2, r2
 8006088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2203      	movs	r2, #3
 8006098:	4013      	ands	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0018      	movs	r0, r3
 80060a0:	f000 f952 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 80060a4:	e007      	b.n	80060b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 f945 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f951 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2204      	movs	r2, #4
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d125      	bne.n	8006116 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2204      	movs	r2, #4
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d11e      	bne.n	8006116 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2205      	movs	r2, #5
 80060de:	4252      	negs	r2, r2
 80060e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	23c0      	movs	r3, #192	; 0xc0
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 f925 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 80060fe:	e007      	b.n	8006110 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f918 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 f924 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2208      	movs	r2, #8
 800611e:	4013      	ands	r3, r2
 8006120:	2b08      	cmp	r3, #8
 8006122:	d124      	bne.n	800616e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2208      	movs	r2, #8
 800612c:	4013      	ands	r3, r2
 800612e:	2b08      	cmp	r3, #8
 8006130:	d11d      	bne.n	800616e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2209      	movs	r2, #9
 8006138:	4252      	negs	r2, r2
 800613a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2204      	movs	r2, #4
 8006140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	2203      	movs	r2, #3
 800614a:	4013      	ands	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	0018      	movs	r0, r3
 8006152:	f000 f8f9 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 8006156:	e007      	b.n	8006168 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 f8ec 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	0018      	movs	r0, r3
 8006164:	f000 f8f8 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2210      	movs	r2, #16
 8006176:	4013      	ands	r3, r2
 8006178:	2b10      	cmp	r3, #16
 800617a:	d125      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	2210      	movs	r2, #16
 8006184:	4013      	ands	r3, r2
 8006186:	2b10      	cmp	r3, #16
 8006188:	d11e      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2211      	movs	r2, #17
 8006190:	4252      	negs	r2, r2
 8006192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2208      	movs	r2, #8
 8006198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	23c0      	movs	r3, #192	; 0xc0
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4013      	ands	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 f8cc 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e007      	b.n	80061c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f000 f8bf 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	0018      	movs	r0, r3
 80061be:	f000 f8cb 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2201      	movs	r2, #1
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10f      	bne.n	80061f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d108      	bne.n	80061f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2202      	movs	r2, #2
 80061ea:	4252      	negs	r2, r2
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7fa fb33 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2280      	movs	r2, #128	; 0x80
 80061fe:	4013      	ands	r3, r2
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d10f      	bne.n	8006224 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2280      	movs	r2, #128	; 0x80
 800620c:	4013      	ands	r3, r2
 800620e:	2b80      	cmp	r3, #128	; 0x80
 8006210:	d108      	bne.n	8006224 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2281      	movs	r2, #129	; 0x81
 8006218:	4252      	negs	r2, r2
 800621a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	0018      	movs	r0, r3
 8006220:	f000 fb2e 	bl	8006880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	4013      	ands	r3, r2
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d10f      	bne.n	8006252 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2240      	movs	r2, #64	; 0x40
 800623a:	4013      	ands	r3, r2
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d108      	bne.n	8006252 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2241      	movs	r2, #65	; 0x41
 8006246:	4252      	negs	r2, r2
 8006248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0018      	movs	r0, r3
 800624e:	f000 f88b 	bl	8006368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2220      	movs	r2, #32
 800625a:	4013      	ands	r3, r2
 800625c:	2b20      	cmp	r3, #32
 800625e:	d10f      	bne.n	8006280 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	4013      	ands	r3, r2
 800626a:	2b20      	cmp	r3, #32
 800626c:	d108      	bne.n	8006280 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2221      	movs	r2, #33	; 0x21
 8006274:	4252      	negs	r2, r2
 8006276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 faf8 	bl	8006870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2317      	movs	r3, #23
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	223c      	movs	r2, #60	; 0x3c
 80062a0:	5c9b      	ldrb	r3, [r3, r2]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_OC_ConfigChannel+0x22>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e042      	b.n	8006330 <HAL_TIM_OC_ConfigChannel+0xa8>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	223c      	movs	r2, #60	; 0x3c
 80062ae:	2101      	movs	r1, #1
 80062b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d027      	beq.n	8006308 <HAL_TIM_OC_ConfigChannel+0x80>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d82c      	bhi.n	8006318 <HAL_TIM_OC_ConfigChannel+0x90>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d019      	beq.n	80062f8 <HAL_TIM_OC_ConfigChannel+0x70>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d826      	bhi.n	8006318 <HAL_TIM_OC_ConfigChannel+0x90>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_TIM_OC_ConfigChannel+0x50>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d008      	beq.n	80062e8 <HAL_TIM_OC_ConfigChannel+0x60>
 80062d6:	e01f      	b.n	8006318 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f000 f8c9 	bl	8006478 <TIM_OC1_SetConfig>
      break;
 80062e6:	e01c      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	0011      	movs	r1, r2
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 f949 	bl	8006588 <TIM_OC2_SetConfig>
      break;
 80062f6:	e014      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f000 f9c5 	bl	8006690 <TIM_OC3_SetConfig>
      break;
 8006306:	e00c      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	0011      	movs	r1, r2
 8006310:	0018      	movs	r0, r3
 8006312:	f000 fa43 	bl	800679c <TIM_OC4_SetConfig>
      break;
 8006316:	e004      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006318:	2317      	movs	r3, #23
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
      break;
 8006320:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	223c      	movs	r2, #60	; 0x3c
 8006326:	2100      	movs	r1, #0
 8006328:	5499      	strb	r1, [r3, r2]

  return status;
 800632a:	2317      	movs	r3, #23
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	781b      	ldrb	r3, [r3, #0]
}
 8006330:	0018      	movs	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	b006      	add	sp, #24
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b002      	add	sp, #8
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a34      	ldr	r2, [pc, #208]	; (800645c <TIM_Base_SetConfig+0xe4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d008      	beq.n	80063a2 <TIM_Base_SetConfig+0x2a>
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	05db      	lsls	r3, r3, #23
 8006396:	429a      	cmp	r2, r3
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x2a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a30      	ldr	r2, [pc, #192]	; (8006460 <TIM_Base_SetConfig+0xe8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2270      	movs	r2, #112	; 0x70
 80063a6:	4393      	bics	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a29      	ldr	r2, [pc, #164]	; (800645c <TIM_Base_SetConfig+0xe4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d018      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	05db      	lsls	r3, r3, #23
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d013      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a25      	ldr	r2, [pc, #148]	; (8006460 <TIM_Base_SetConfig+0xe8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00f      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a24      	ldr	r2, [pc, #144]	; (8006464 <TIM_Base_SetConfig+0xec>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00b      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a23      	ldr	r2, [pc, #140]	; (8006468 <TIM_Base_SetConfig+0xf0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <TIM_Base_SetConfig+0xf4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_Base_SetConfig+0x76>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a21      	ldr	r2, [pc, #132]	; (8006470 <TIM_Base_SetConfig+0xf8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d108      	bne.n	8006400 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <TIM_Base_SetConfig+0xfc>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	4393      	bics	r3, r2
 8006406:	001a      	movs	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a0c      	ldr	r2, [pc, #48]	; (800645c <TIM_Base_SetConfig+0xe4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_Base_SetConfig+0xce>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a0d      	ldr	r2, [pc, #52]	; (8006468 <TIM_Base_SetConfig+0xf0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_Base_SetConfig+0xce>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a0c      	ldr	r2, [pc, #48]	; (800646c <TIM_Base_SetConfig+0xf4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0xce>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <TIM_Base_SetConfig+0xf8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d103      	bne.n	800644e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	615a      	str	r2, [r3, #20]
}
 8006454:	46c0      	nop			; (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40000400 	.word	0x40000400
 8006464:	40002000 	.word	0x40002000
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800
 8006474:	fffffcff 	.word	0xfffffcff

08006478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	2201      	movs	r2, #1
 8006488:	4393      	bics	r3, r2
 800648a:	001a      	movs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2270      	movs	r2, #112	; 0x70
 80064a6:	4393      	bics	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2203      	movs	r2, #3
 80064ae:	4393      	bics	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2202      	movs	r2, #2
 80064c0:	4393      	bics	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a27      	ldr	r2, [pc, #156]	; (8006570 <TIM_OC1_SetConfig+0xf8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_OC1_SetConfig+0x76>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a26      	ldr	r2, [pc, #152]	; (8006574 <TIM_OC1_SetConfig+0xfc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_OC1_SetConfig+0x76>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a25      	ldr	r2, [pc, #148]	; (8006578 <TIM_OC1_SetConfig+0x100>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_OC1_SetConfig+0x76>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a24      	ldr	r2, [pc, #144]	; (800657c <TIM_OC1_SetConfig+0x104>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10c      	bne.n	8006508 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2208      	movs	r2, #8
 80064f2:	4393      	bics	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2204      	movs	r2, #4
 8006504:	4393      	bics	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	; (8006570 <TIM_OC1_SetConfig+0xf8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00b      	beq.n	8006528 <TIM_OC1_SetConfig+0xb0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a18      	ldr	r2, [pc, #96]	; (8006574 <TIM_OC1_SetConfig+0xfc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_OC1_SetConfig+0xb0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <TIM_OC1_SetConfig+0x100>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC1_SetConfig+0xb0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	; (800657c <TIM_OC1_SetConfig+0x104>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d111      	bne.n	800654c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4a15      	ldr	r2, [pc, #84]	; (8006580 <TIM_OC1_SetConfig+0x108>)
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	4a14      	ldr	r2, [pc, #80]	; (8006584 <TIM_OC1_SetConfig+0x10c>)
 8006534:	4013      	ands	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	46bd      	mov	sp, r7
 800656a:	b006      	add	sp, #24
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800
 8006580:	fffffeff 	.word	0xfffffeff
 8006584:	fffffdff 	.word	0xfffffdff

08006588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	2210      	movs	r2, #16
 8006598:	4393      	bics	r3, r2
 800659a:	001a      	movs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a2e      	ldr	r2, [pc, #184]	; (8006670 <TIM_OC2_SetConfig+0xe8>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <TIM_OC2_SetConfig+0xec>)
 80065be:	4013      	ands	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2220      	movs	r2, #32
 80065d2:	4393      	bics	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a24      	ldr	r2, [pc, #144]	; (8006678 <TIM_OC2_SetConfig+0xf0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10d      	bne.n	8006606 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	4393      	bics	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	4393      	bics	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <TIM_OC2_SetConfig+0xf0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1a      	ldr	r2, [pc, #104]	; (800667c <TIM_OC2_SetConfig+0xf4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a19      	ldr	r2, [pc, #100]	; (8006680 <TIM_OC2_SetConfig+0xf8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_OC2_SetConfig+0x9e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a18      	ldr	r2, [pc, #96]	; (8006684 <TIM_OC2_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d113      	bne.n	800664e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4a17      	ldr	r2, [pc, #92]	; (8006688 <TIM_OC2_SetConfig+0x100>)
 800662a:	4013      	ands	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4a16      	ldr	r2, [pc, #88]	; (800668c <TIM_OC2_SetConfig+0x104>)
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	621a      	str	r2, [r3, #32]
}
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b006      	add	sp, #24
 800666e:	bd80      	pop	{r7, pc}
 8006670:	ffff8fff 	.word	0xffff8fff
 8006674:	fffffcff 	.word	0xfffffcff
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800
 8006688:	fffffbff 	.word	0xfffffbff
 800668c:	fffff7ff 	.word	0xfffff7ff

08006690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a35      	ldr	r2, [pc, #212]	; (8006774 <TIM_OC3_SetConfig+0xe4>)
 80066a0:	401a      	ands	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2270      	movs	r2, #112	; 0x70
 80066bc:	4393      	bics	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2203      	movs	r2, #3
 80066c4:	4393      	bics	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4a28      	ldr	r2, [pc, #160]	; (8006778 <TIM_OC3_SetConfig+0xe8>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a24      	ldr	r2, [pc, #144]	; (800677c <TIM_OC3_SetConfig+0xec>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10d      	bne.n	800670a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4a23      	ldr	r2, [pc, #140]	; (8006780 <TIM_OC3_SetConfig+0xf0>)
 80066f2:	4013      	ands	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4a1f      	ldr	r2, [pc, #124]	; (8006784 <TIM_OC3_SetConfig+0xf4>)
 8006706:	4013      	ands	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1b      	ldr	r2, [pc, #108]	; (800677c <TIM_OC3_SetConfig+0xec>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <TIM_OC3_SetConfig+0xf8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <TIM_OC3_SetConfig+0xfc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC3_SetConfig+0x9a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1a      	ldr	r2, [pc, #104]	; (8006790 <TIM_OC3_SetConfig+0x100>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d113      	bne.n	8006752 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4a19      	ldr	r2, [pc, #100]	; (8006794 <TIM_OC3_SetConfig+0x104>)
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4a18      	ldr	r2, [pc, #96]	; (8006798 <TIM_OC3_SetConfig+0x108>)
 8006736:	4013      	ands	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b006      	add	sp, #24
 8006772:	bd80      	pop	{r7, pc}
 8006774:	fffffeff 	.word	0xfffffeff
 8006778:	fffffdff 	.word	0xfffffdff
 800677c:	40012c00 	.word	0x40012c00
 8006780:	fffff7ff 	.word	0xfffff7ff
 8006784:	fffffbff 	.word	0xfffffbff
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800
 8006794:	ffffefff 	.word	0xffffefff
 8006798:	ffffdfff 	.word	0xffffdfff

0800679c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a28      	ldr	r2, [pc, #160]	; (800684c <TIM_OC4_SetConfig+0xb0>)
 80067ac:	401a      	ands	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a22      	ldr	r2, [pc, #136]	; (8006850 <TIM_OC4_SetConfig+0xb4>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <TIM_OC4_SetConfig+0xb8>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <TIM_OC4_SetConfig+0xbc>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a19      	ldr	r2, [pc, #100]	; (800685c <TIM_OC4_SetConfig+0xc0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00b      	beq.n	8006814 <TIM_OC4_SetConfig+0x78>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <TIM_OC4_SetConfig+0xc4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_OC4_SetConfig+0x78>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a17      	ldr	r2, [pc, #92]	; (8006864 <TIM_OC4_SetConfig+0xc8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_OC4_SetConfig+0x78>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a16      	ldr	r2, [pc, #88]	; (8006868 <TIM_OC4_SetConfig+0xcc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d109      	bne.n	8006828 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <TIM_OC4_SetConfig+0xd0>)
 8006818:	4013      	ands	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	46bd      	mov	sp, r7
 8006846:	b006      	add	sp, #24
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	ffffefff 	.word	0xffffefff
 8006850:	ffff8fff 	.word	0xffff8fff
 8006854:	fffffcff 	.word	0xfffffcff
 8006858:	ffffdfff 	.word	0xffffdfff
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800
 800686c:	ffffbfff 	.word	0xffffbfff

08006870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b002      	add	sp, #8
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e044      	b.n	800692c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d107      	bne.n	80068ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2274      	movs	r2, #116	; 0x74
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7fa ff2f 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2224      	movs	r2, #36	; 0x24
 80068be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2101      	movs	r1, #1
 80068cc:	438a      	bics	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 fb24 	bl	8006f20 <UART_SetConfig>
 80068d8:	0003      	movs	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e024      	b.n	800692c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 fc9f 	bl	8007230 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	490d      	ldr	r1, [pc, #52]	; (8006934 <HAL_UART_Init+0xa4>)
 80068fe:	400a      	ands	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	212a      	movs	r1, #42	; 0x2a
 800690e:	438a      	bics	r2, r1
 8006910:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2101      	movs	r1, #1
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0018      	movs	r0, r3
 8006926:	f000 fd37 	bl	8007398 <UART_CheckIdleState>
 800692a:	0003      	movs	r3, r0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}
 8006934:	ffffb7ff 	.word	0xffffb7ff

08006938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b0ab      	sub	sp, #172	; 0xac
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	22a4      	movs	r2, #164	; 0xa4
 8006948:	18b9      	adds	r1, r7, r2
 800694a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	20a0      	movs	r0, #160	; 0xa0
 8006954:	1839      	adds	r1, r7, r0
 8006956:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	219c      	movs	r1, #156	; 0x9c
 8006960:	1879      	adds	r1, r7, r1
 8006962:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006964:	0011      	movs	r1, r2
 8006966:	18bb      	adds	r3, r7, r2
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a99      	ldr	r2, [pc, #612]	; (8006bd0 <HAL_UART_IRQHandler+0x298>)
 800696c:	4013      	ands	r3, r2
 800696e:	2298      	movs	r2, #152	; 0x98
 8006970:	18bc      	adds	r4, r7, r2
 8006972:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006974:	18bb      	adds	r3, r7, r2
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d114      	bne.n	80069a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800697c:	187b      	adds	r3, r7, r1
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2220      	movs	r2, #32
 8006982:	4013      	ands	r3, r2
 8006984:	d00f      	beq.n	80069a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006986:	183b      	adds	r3, r7, r0
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2220      	movs	r2, #32
 800698c:	4013      	ands	r3, r2
 800698e:	d00a      	beq.n	80069a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006994:	2b00      	cmp	r3, #0
 8006996:	d100      	bne.n	800699a <HAL_UART_IRQHandler+0x62>
 8006998:	e296      	b.n	8006ec8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	0010      	movs	r0, r2
 80069a2:	4798      	blx	r3
      }
      return;
 80069a4:	e290      	b.n	8006ec8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069a6:	2398      	movs	r3, #152	; 0x98
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d100      	bne.n	80069b2 <HAL_UART_IRQHandler+0x7a>
 80069b0:	e114      	b.n	8006bdc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069b2:	239c      	movs	r3, #156	; 0x9c
 80069b4:	18fb      	adds	r3, r7, r3
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	d106      	bne.n	80069cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069be:	23a0      	movs	r3, #160	; 0xa0
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a83      	ldr	r2, [pc, #524]	; (8006bd4 <HAL_UART_IRQHandler+0x29c>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	d100      	bne.n	80069cc <HAL_UART_IRQHandler+0x94>
 80069ca:	e107      	b.n	8006bdc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069cc:	23a4      	movs	r3, #164	; 0xa4
 80069ce:	18fb      	adds	r3, r7, r3
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	4013      	ands	r3, r2
 80069d6:	d012      	beq.n	80069fe <HAL_UART_IRQHandler+0xc6>
 80069d8:	23a0      	movs	r3, #160	; 0xa0
 80069da:	18fb      	adds	r3, r7, r3
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	d00b      	beq.n	80069fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2201      	movs	r2, #1
 80069ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	589b      	ldr	r3, [r3, r2]
 80069f4:	2201      	movs	r2, #1
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069fe:	23a4      	movs	r3, #164	; 0xa4
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2202      	movs	r2, #2
 8006a06:	4013      	ands	r3, r2
 8006a08:	d011      	beq.n	8006a2e <HAL_UART_IRQHandler+0xf6>
 8006a0a:	239c      	movs	r3, #156	; 0x9c
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2201      	movs	r2, #1
 8006a12:	4013      	ands	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2280      	movs	r2, #128	; 0x80
 8006a22:	589b      	ldr	r3, [r3, r2]
 8006a24:	2204      	movs	r2, #4
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a2e:	23a4      	movs	r3, #164	; 0xa4
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2204      	movs	r2, #4
 8006a36:	4013      	ands	r3, r2
 8006a38:	d011      	beq.n	8006a5e <HAL_UART_IRQHandler+0x126>
 8006a3a:	239c      	movs	r3, #156	; 0x9c
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2201      	movs	r2, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2280      	movs	r2, #128	; 0x80
 8006a52:	589b      	ldr	r3, [r3, r2]
 8006a54:	2202      	movs	r2, #2
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a5e:	23a4      	movs	r3, #164	; 0xa4
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2208      	movs	r2, #8
 8006a66:	4013      	ands	r3, r2
 8006a68:	d017      	beq.n	8006a9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a6a:	23a0      	movs	r3, #160	; 0xa0
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2220      	movs	r2, #32
 8006a72:	4013      	ands	r3, r2
 8006a74:	d105      	bne.n	8006a82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a76:	239c      	movs	r3, #156	; 0x9c
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2208      	movs	r2, #8
 8006a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	589b      	ldr	r3, [r3, r2]
 8006a90:	2208      	movs	r2, #8
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a9a:	23a4      	movs	r3, #164	; 0xa4
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x198>
 8006aa8:	23a0      	movs	r3, #160	; 0xa0
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	04db      	lsls	r3, r3, #19
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d00c      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	0112      	lsls	r2, r2, #4
 8006abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2280      	movs	r2, #128	; 0x80
 8006ac4:	589b      	ldr	r3, [r3, r2]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2280      	movs	r2, #128	; 0x80
 8006ad4:	589b      	ldr	r3, [r3, r2]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d100      	bne.n	8006adc <HAL_UART_IRQHandler+0x1a4>
 8006ada:	e1f7      	b.n	8006ecc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006adc:	23a4      	movs	r3, #164	; 0xa4
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d00e      	beq.n	8006b06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae8:	23a0      	movs	r3, #160	; 0xa0
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2220      	movs	r2, #32
 8006af0:	4013      	ands	r3, r2
 8006af2:	d008      	beq.n	8006b06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	0010      	movs	r0, r2
 8006b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	589b      	ldr	r3, [r3, r2]
 8006b0c:	2194      	movs	r1, #148	; 0x94
 8006b0e:	187a      	adds	r2, r7, r1
 8006b10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d004      	beq.n	8006b2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2228      	movs	r2, #40	; 0x28
 8006b26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b28:	d047      	beq.n	8006bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 fd3f 	bl	80075b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2240      	movs	r2, #64	; 0x40
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d137      	bne.n	8006bb0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b40:	f3ef 8310 	mrs	r3, PRIMASK
 8006b44:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b48:	2090      	movs	r0, #144	; 0x90
 8006b4a:	183a      	adds	r2, r7, r0
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	2301      	movs	r3, #1
 8006b50:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2140      	movs	r1, #64	; 0x40
 8006b66:	438a      	bics	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	183b      	adds	r3, r7, r0
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d012      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	4a14      	ldr	r2, [pc, #80]	; (8006bd8 <HAL_UART_IRQHandler+0x2a0>)
 8006b86:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f7fb fb09 	bl	80021a4 <HAL_DMA_Abort_IT>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d01a      	beq.n	8006bcc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	e012      	b.n	8006bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 f9a5 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bae:	e00d      	b.n	8006bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 f9a0 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb8:	e008      	b.n	8006bcc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 f99b 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2280      	movs	r2, #128	; 0x80
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006bca:	e17f      	b.n	8006ecc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bcc:	46c0      	nop			; (mov r8, r8)
    return;
 8006bce:	e17d      	b.n	8006ecc <HAL_UART_IRQHandler+0x594>
 8006bd0:	0000080f 	.word	0x0000080f
 8006bd4:	04000120 	.word	0x04000120
 8006bd8:	08007675 	.word	0x08007675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d000      	beq.n	8006be6 <HAL_UART_IRQHandler+0x2ae>
 8006be4:	e131      	b.n	8006e4a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006be6:	23a4      	movs	r3, #164	; 0xa4
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2210      	movs	r2, #16
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d100      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x2bc>
 8006bf2:	e12a      	b.n	8006e4a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bf4:	23a0      	movs	r3, #160	; 0xa0
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d100      	bne.n	8006c02 <HAL_UART_IRQHandler+0x2ca>
 8006c00:	e123      	b.n	8006e4a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2210      	movs	r2, #16
 8006c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2240      	movs	r2, #64	; 0x40
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d000      	beq.n	8006c1a <HAL_UART_IRQHandler+0x2e2>
 8006c18:	e09b      	b.n	8006d52 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	217e      	movs	r1, #126	; 0x7e
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d100      	bne.n	8006c32 <HAL_UART_IRQHandler+0x2fa>
 8006c30:	e14e      	b.n	8006ed0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2258      	movs	r2, #88	; 0x58
 8006c36:	5a9b      	ldrh	r3, [r3, r2]
 8006c38:	187a      	adds	r2, r7, r1
 8006c3a:	8812      	ldrh	r2, [r2, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d300      	bcc.n	8006c42 <HAL_UART_IRQHandler+0x30a>
 8006c40:	e146      	b.n	8006ed0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	187a      	adds	r2, r7, r1
 8006c46:	215a      	movs	r1, #90	; 0x5a
 8006c48:	8812      	ldrh	r2, [r2, #0]
 8006c4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d06e      	beq.n	8006d34 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c56:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c60:	2301      	movs	r3, #1
 8006c62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	499a      	ldr	r1, [pc, #616]	; (8006ee0 <HAL_UART_IRQHandler+0x5a8>)
 8006c78:	400a      	ands	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f383 8810 	msr	PRIMASK, r3
}
 8006c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c88:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	677b      	str	r3, [r7, #116]	; 0x74
 8006c92:	2301      	movs	r3, #1
 8006c94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2101      	movs	r1, #1
 8006caa:	438a      	bics	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb4:	f383 8810 	msr	PRIMASK, r3
}
 8006cb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cba:	f3ef 8310 	mrs	r3, PRIMASK
 8006cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cca:	f383 8810 	msr	PRIMASK, r3
}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2140      	movs	r1, #64	; 0x40
 8006cdc:	438a      	bics	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cfc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d02:	2301      	movs	r3, #1
 8006d04:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2110      	movs	r1, #16
 8006d1a:	438a      	bics	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d24:	f383 8810 	msr	PRIMASK, r3
}
 8006d28:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7fb fa00 	bl	8002134 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2258      	movs	r2, #88	; 0x58
 8006d38:	5a9a      	ldrh	r2, [r3, r2]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	215a      	movs	r1, #90	; 0x5a
 8006d3e:	5a5b      	ldrh	r3, [r3, r1]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	0011      	movs	r1, r2
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f000 f8dc 	bl	8006f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d50:	e0be      	b.n	8006ed0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2258      	movs	r2, #88	; 0x58
 8006d56:	5a99      	ldrh	r1, [r3, r2]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	225a      	movs	r2, #90	; 0x5a
 8006d5c:	5a9b      	ldrh	r3, [r3, r2]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	208e      	movs	r0, #142	; 0x8e
 8006d62:	183b      	adds	r3, r7, r0
 8006d64:	1a8a      	subs	r2, r1, r2
 8006d66:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	225a      	movs	r2, #90	; 0x5a
 8006d6c:	5a9b      	ldrh	r3, [r3, r2]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d100      	bne.n	8006d76 <HAL_UART_IRQHandler+0x43e>
 8006d74:	e0ae      	b.n	8006ed4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006d76:	183b      	adds	r3, r7, r0
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d100      	bne.n	8006d80 <HAL_UART_IRQHandler+0x448>
 8006d7e:	e0a9      	b.n	8006ed4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d80:	f3ef 8310 	mrs	r3, PRIMASK
 8006d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d86:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d88:	2488      	movs	r4, #136	; 0x88
 8006d8a:	193a      	adds	r2, r7, r4
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	2301      	movs	r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	494f      	ldr	r1, [pc, #316]	; (8006ee4 <HAL_UART_IRQHandler+0x5ac>)
 8006da6:	400a      	ands	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	193b      	adds	r3, r7, r4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f383 8810 	msr	PRIMASK, r3
}
 8006db6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dbe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	2484      	movs	r4, #132	; 0x84
 8006dc2:	193a      	adds	r2, r7, r4
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f383 8810 	msr	PRIMASK, r3
}
 8006dd0:	46c0      	nop			; (mov r8, r8)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2101      	movs	r1, #1
 8006dde:	438a      	bics	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	f383 8810 	msr	PRIMASK, r3
}
 8006dee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e02:	f3ef 8310 	mrs	r3, PRIMASK
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	2480      	movs	r4, #128	; 0x80
 8006e0c:	193a      	adds	r2, r7, r4
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	2301      	movs	r3, #1
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f383 8810 	msr	PRIMASK, r3
}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2110      	movs	r1, #16
 8006e28:	438a      	bics	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	193b      	adds	r3, r7, r4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3a:	183b      	adds	r3, r7, r0
 8006e3c:	881a      	ldrh	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0011      	movs	r1, r2
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f860 	bl	8006f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e48:	e044      	b.n	8006ed4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e4a:	23a4      	movs	r3, #164	; 0xa4
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	035b      	lsls	r3, r3, #13
 8006e54:	4013      	ands	r3, r2
 8006e56:	d010      	beq.n	8006e7a <HAL_UART_IRQHandler+0x542>
 8006e58:	239c      	movs	r3, #156	; 0x9c
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	03db      	lsls	r3, r3, #15
 8006e62:	4013      	ands	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	0352      	lsls	r2, r2, #13
 8006e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	0018      	movs	r0, r3
 8006e74:	f000 fc40 	bl	80076f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e78:	e02f      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e7a:	23a4      	movs	r3, #164	; 0xa4
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2280      	movs	r2, #128	; 0x80
 8006e82:	4013      	ands	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e86:	23a0      	movs	r3, #160	; 0xa0
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01e      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	4798      	blx	r3
    }
    return;
 8006ea4:	e018      	b.n	8006ed8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ea6:	23a4      	movs	r3, #164	; 0xa4
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2240      	movs	r2, #64	; 0x40
 8006eae:	4013      	ands	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_UART_IRQHandler+0x5a2>
 8006eb2:	23a0      	movs	r3, #160	; 0xa0
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2240      	movs	r2, #64	; 0x40
 8006eba:	4013      	ands	r3, r2
 8006ebc:	d00d      	beq.n	8006eda <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 fbee 	bl	80076a2 <UART_EndTransmit_IT>
    return;
 8006ec6:	e008      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8006ec8:	46c0      	nop			; (mov r8, r8)
 8006eca:	e006      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
    return;
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	e004      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	e002      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
      return;
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	e000      	b.n	8006eda <HAL_UART_IRQHandler+0x5a2>
    return;
 8006ed8:	46c0      	nop			; (mov r8, r8)
  }

}
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b02b      	add	sp, #172	; 0xac
 8006ede:	bd90      	pop	{r4, r7, pc}
 8006ee0:	fffffeff 	.word	0xfffffeff
 8006ee4:	fffffedf 	.word	0xfffffedf

08006ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ef0:	46c0      	nop			; (mov r8, r8)
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f00:	46c0      	nop			; (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b002      	add	sp, #8
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	000a      	movs	r2, r1
 8006f12:	1cbb      	adds	r3, r7, #2
 8006f14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b002      	add	sp, #8
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f28:	231e      	movs	r3, #30
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4aaf      	ldr	r2, [pc, #700]	; (800720c <UART_SetConfig+0x2ec>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	0019      	movs	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4aaa      	ldr	r2, [pc, #680]	; (8007210 <UART_SetConfig+0x2f0>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	0019      	movs	r1, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4aa1      	ldr	r2, [pc, #644]	; (8007214 <UART_SetConfig+0x2f4>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	0019      	movs	r1, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a9d      	ldr	r2, [pc, #628]	; (8007218 <UART_SetConfig+0x2f8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d127      	bne.n	8006ff6 <UART_SetConfig+0xd6>
 8006fa6:	4b9d      	ldr	r3, [pc, #628]	; (800721c <UART_SetConfig+0x2fc>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	2203      	movs	r2, #3
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d00d      	beq.n	8006fce <UART_SetConfig+0xae>
 8006fb2:	d81b      	bhi.n	8006fec <UART_SetConfig+0xcc>
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d014      	beq.n	8006fe2 <UART_SetConfig+0xc2>
 8006fb8:	d818      	bhi.n	8006fec <UART_SetConfig+0xcc>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <UART_SetConfig+0xa4>
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d00a      	beq.n	8006fd8 <UART_SetConfig+0xb8>
 8006fc2:	e013      	b.n	8006fec <UART_SetConfig+0xcc>
 8006fc4:	231f      	movs	r3, #31
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e065      	b.n	800709a <UART_SetConfig+0x17a>
 8006fce:	231f      	movs	r3, #31
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e060      	b.n	800709a <UART_SetConfig+0x17a>
 8006fd8:	231f      	movs	r3, #31
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	2204      	movs	r2, #4
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e05b      	b.n	800709a <UART_SetConfig+0x17a>
 8006fe2:	231f      	movs	r3, #31
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	e056      	b.n	800709a <UART_SetConfig+0x17a>
 8006fec:	231f      	movs	r3, #31
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e051      	b.n	800709a <UART_SetConfig+0x17a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a89      	ldr	r2, [pc, #548]	; (8007220 <UART_SetConfig+0x300>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d134      	bne.n	800706a <UART_SetConfig+0x14a>
 8007000:	4b86      	ldr	r3, [pc, #536]	; (800721c <UART_SetConfig+0x2fc>)
 8007002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007004:	23c0      	movs	r3, #192	; 0xc0
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	4013      	ands	r3, r2
 800700a:	22c0      	movs	r2, #192	; 0xc0
 800700c:	0292      	lsls	r2, r2, #10
 800700e:	4293      	cmp	r3, r2
 8007010:	d017      	beq.n	8007042 <UART_SetConfig+0x122>
 8007012:	22c0      	movs	r2, #192	; 0xc0
 8007014:	0292      	lsls	r2, r2, #10
 8007016:	4293      	cmp	r3, r2
 8007018:	d822      	bhi.n	8007060 <UART_SetConfig+0x140>
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	0292      	lsls	r2, r2, #10
 800701e:	4293      	cmp	r3, r2
 8007020:	d019      	beq.n	8007056 <UART_SetConfig+0x136>
 8007022:	2280      	movs	r2, #128	; 0x80
 8007024:	0292      	lsls	r2, r2, #10
 8007026:	4293      	cmp	r3, r2
 8007028:	d81a      	bhi.n	8007060 <UART_SetConfig+0x140>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <UART_SetConfig+0x118>
 800702e:	2280      	movs	r2, #128	; 0x80
 8007030:	0252      	lsls	r2, r2, #9
 8007032:	4293      	cmp	r3, r2
 8007034:	d00a      	beq.n	800704c <UART_SetConfig+0x12c>
 8007036:	e013      	b.n	8007060 <UART_SetConfig+0x140>
 8007038:	231f      	movs	r3, #31
 800703a:	18fb      	adds	r3, r7, r3
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e02b      	b.n	800709a <UART_SetConfig+0x17a>
 8007042:	231f      	movs	r3, #31
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e026      	b.n	800709a <UART_SetConfig+0x17a>
 800704c:	231f      	movs	r3, #31
 800704e:	18fb      	adds	r3, r7, r3
 8007050:	2204      	movs	r2, #4
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e021      	b.n	800709a <UART_SetConfig+0x17a>
 8007056:	231f      	movs	r3, #31
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2208      	movs	r2, #8
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e01c      	b.n	800709a <UART_SetConfig+0x17a>
 8007060:	231f      	movs	r3, #31
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	2210      	movs	r2, #16
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e017      	b.n	800709a <UART_SetConfig+0x17a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6d      	ldr	r2, [pc, #436]	; (8007224 <UART_SetConfig+0x304>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d104      	bne.n	800707e <UART_SetConfig+0x15e>
 8007074:	231f      	movs	r3, #31
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	e00d      	b.n	800709a <UART_SetConfig+0x17a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a69      	ldr	r2, [pc, #420]	; (8007228 <UART_SetConfig+0x308>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d104      	bne.n	8007092 <UART_SetConfig+0x172>
 8007088:	231f      	movs	r3, #31
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e003      	b.n	800709a <UART_SetConfig+0x17a>
 8007092:	231f      	movs	r3, #31
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	2210      	movs	r2, #16
 8007098:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d15d      	bne.n	8007162 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80070a6:	231f      	movs	r3, #31
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d015      	beq.n	80070dc <UART_SetConfig+0x1bc>
 80070b0:	dc18      	bgt.n	80070e4 <UART_SetConfig+0x1c4>
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d00d      	beq.n	80070d2 <UART_SetConfig+0x1b2>
 80070b6:	dc15      	bgt.n	80070e4 <UART_SetConfig+0x1c4>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <UART_SetConfig+0x1a2>
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d005      	beq.n	80070cc <UART_SetConfig+0x1ac>
 80070c0:	e010      	b.n	80070e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c2:	f7fd febb 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 80070c6:	0003      	movs	r3, r0
 80070c8:	61bb      	str	r3, [r7, #24]
        break;
 80070ca:	e012      	b.n	80070f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070cc:	4b57      	ldr	r3, [pc, #348]	; (800722c <UART_SetConfig+0x30c>)
 80070ce:	61bb      	str	r3, [r7, #24]
        break;
 80070d0:	e00f      	b.n	80070f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d2:	f7fd fe27 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80070d6:	0003      	movs	r3, r0
 80070d8:	61bb      	str	r3, [r7, #24]
        break;
 80070da:	e00a      	b.n	80070f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	61bb      	str	r3, [r7, #24]
        break;
 80070e2:	e006      	b.n	80070f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070e8:	231e      	movs	r3, #30
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
        break;
 80070f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d100      	bne.n	80070fa <UART_SetConfig+0x1da>
 80070f8:	e07b      	b.n	80071f2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	005a      	lsls	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	18d2      	adds	r2, r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	0019      	movs	r1, r3
 800710c:	0010      	movs	r0, r2
 800710e:	f7f9 f80d 	bl	800012c <__udivsi3>
 8007112:	0003      	movs	r3, r0
 8007114:	b29b      	uxth	r3, r3
 8007116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b0f      	cmp	r3, #15
 800711c:	d91c      	bls.n	8007158 <UART_SetConfig+0x238>
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	025b      	lsls	r3, r3, #9
 8007124:	429a      	cmp	r2, r3
 8007126:	d217      	bcs.n	8007158 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	b29a      	uxth	r2, r3
 800712c:	200e      	movs	r0, #14
 800712e:	183b      	adds	r3, r7, r0
 8007130:	210f      	movs	r1, #15
 8007132:	438a      	bics	r2, r1
 8007134:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	2207      	movs	r2, #7
 800713e:	4013      	ands	r3, r2
 8007140:	b299      	uxth	r1, r3
 8007142:	183b      	adds	r3, r7, r0
 8007144:	183a      	adds	r2, r7, r0
 8007146:	8812      	ldrh	r2, [r2, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	183a      	adds	r2, r7, r0
 8007152:	8812      	ldrh	r2, [r2, #0]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	e04c      	b.n	80071f2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007158:	231e      	movs	r3, #30
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	e047      	b.n	80071f2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007162:	231f      	movs	r3, #31
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d015      	beq.n	8007198 <UART_SetConfig+0x278>
 800716c:	dc18      	bgt.n	80071a0 <UART_SetConfig+0x280>
 800716e:	2b04      	cmp	r3, #4
 8007170:	d00d      	beq.n	800718e <UART_SetConfig+0x26e>
 8007172:	dc15      	bgt.n	80071a0 <UART_SetConfig+0x280>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <UART_SetConfig+0x25e>
 8007178:	2b02      	cmp	r3, #2
 800717a:	d005      	beq.n	8007188 <UART_SetConfig+0x268>
 800717c:	e010      	b.n	80071a0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fd fe5d 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8007182:	0003      	movs	r3, r0
 8007184:	61bb      	str	r3, [r7, #24]
        break;
 8007186:	e012      	b.n	80071ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b28      	ldr	r3, [pc, #160]	; (800722c <UART_SetConfig+0x30c>)
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e00f      	b.n	80071ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd fdc9 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8007192:	0003      	movs	r3, r0
 8007194:	61bb      	str	r3, [r7, #24]
        break;
 8007196:	e00a      	b.n	80071ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	61bb      	str	r3, [r7, #24]
        break;
 800719e:	e006      	b.n	80071ae <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a4:	231e      	movs	r3, #30
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	2201      	movs	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
        break;
 80071ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01e      	beq.n	80071f2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	085a      	lsrs	r2, r3, #1
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	18d2      	adds	r2, r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	0019      	movs	r1, r3
 80071c4:	0010      	movs	r0, r2
 80071c6:	f7f8 ffb1 	bl	800012c <__udivsi3>
 80071ca:	0003      	movs	r3, r0
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d909      	bls.n	80071ea <UART_SetConfig+0x2ca>
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	025b      	lsls	r3, r3, #9
 80071dc:	429a      	cmp	r2, r3
 80071de:	d204      	bcs.n	80071ea <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	60da      	str	r2, [r3, #12]
 80071e8:	e003      	b.n	80071f2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80071ea:	231e      	movs	r3, #30
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071fe:	231e      	movs	r3, #30
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	781b      	ldrb	r3, [r3, #0]
}
 8007204:	0018      	movs	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	b008      	add	sp, #32
 800720a:	bd80      	pop	{r7, pc}
 800720c:	efff69f3 	.word	0xefff69f3
 8007210:	ffffcfff 	.word	0xffffcfff
 8007214:	fffff4ff 	.word	0xfffff4ff
 8007218:	40013800 	.word	0x40013800
 800721c:	40021000 	.word	0x40021000
 8007220:	40004400 	.word	0x40004400
 8007224:	40004800 	.word	0x40004800
 8007228:	40004c00 	.word	0x40004c00
 800722c:	007a1200 	.word	0x007a1200

08007230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2201      	movs	r2, #1
 800723e:	4013      	ands	r3, r2
 8007240:	d00b      	beq.n	800725a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a4a      	ldr	r2, [pc, #296]	; (8007374 <UART_AdvFeatureConfig+0x144>)
 800724a:	4013      	ands	r3, r2
 800724c:	0019      	movs	r1, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2202      	movs	r2, #2
 8007260:	4013      	ands	r3, r2
 8007262:	d00b      	beq.n	800727c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4a43      	ldr	r2, [pc, #268]	; (8007378 <UART_AdvFeatureConfig+0x148>)
 800726c:	4013      	ands	r3, r2
 800726e:	0019      	movs	r1, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2204      	movs	r2, #4
 8007282:	4013      	ands	r3, r2
 8007284:	d00b      	beq.n	800729e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a3b      	ldr	r2, [pc, #236]	; (800737c <UART_AdvFeatureConfig+0x14c>)
 800728e:	4013      	ands	r3, r2
 8007290:	0019      	movs	r1, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2208      	movs	r2, #8
 80072a4:	4013      	ands	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	4a34      	ldr	r2, [pc, #208]	; (8007380 <UART_AdvFeatureConfig+0x150>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	0019      	movs	r1, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	2210      	movs	r2, #16
 80072c6:	4013      	ands	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <UART_AdvFeatureConfig+0x154>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	0019      	movs	r1, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2220      	movs	r2, #32
 80072e8:	4013      	ands	r3, r2
 80072ea:	d00b      	beq.n	8007304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	4a25      	ldr	r2, [pc, #148]	; (8007388 <UART_AdvFeatureConfig+0x158>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	0019      	movs	r1, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2240      	movs	r2, #64	; 0x40
 800730a:	4013      	ands	r3, r2
 800730c:	d01d      	beq.n	800734a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <UART_AdvFeatureConfig+0x15c>)
 8007316:	4013      	ands	r3, r2
 8007318:	0019      	movs	r1, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	2380      	movs	r3, #128	; 0x80
 800732c:	035b      	lsls	r3, r3, #13
 800732e:	429a      	cmp	r2, r3
 8007330:	d10b      	bne.n	800734a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a15      	ldr	r2, [pc, #84]	; (8007390 <UART_AdvFeatureConfig+0x160>)
 800733a:	4013      	ands	r3, r2
 800733c:	0019      	movs	r1, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	4013      	ands	r3, r2
 8007352:	d00b      	beq.n	800736c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <UART_AdvFeatureConfig+0x164>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }
}
 800736c:	46c0      	nop			; (mov r8, r8)
 800736e:	46bd      	mov	sp, r7
 8007370:	b002      	add	sp, #8
 8007372:	bd80      	pop	{r7, pc}
 8007374:	fffdffff 	.word	0xfffdffff
 8007378:	fffeffff 	.word	0xfffeffff
 800737c:	fffbffff 	.word	0xfffbffff
 8007380:	ffff7fff 	.word	0xffff7fff
 8007384:	ffffefff 	.word	0xffffefff
 8007388:	ffffdfff 	.word	0xffffdfff
 800738c:	ffefffff 	.word	0xffefffff
 8007390:	ff9fffff 	.word	0xff9fffff
 8007394:	fff7ffff 	.word	0xfff7ffff

08007398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	2100      	movs	r1, #0
 80073a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a8:	f7fa fb22 	bl	80019f0 <HAL_GetTick>
 80073ac:	0003      	movs	r3, r0
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2208      	movs	r2, #8
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d10c      	bne.n	80073d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2280      	movs	r2, #128	; 0x80
 80073c2:	0391      	lsls	r1, r2, #14
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4a17      	ldr	r2, [pc, #92]	; (8007424 <UART_CheckIdleState+0x8c>)
 80073c8:	9200      	str	r2, [sp, #0]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f000 f82c 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 80073d0:	1e03      	subs	r3, r0, #0
 80073d2:	d001      	beq.n	80073d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e021      	b.n	800741c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2204      	movs	r2, #4
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d10c      	bne.n	8007400 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2280      	movs	r2, #128	; 0x80
 80073ea:	03d1      	lsls	r1, r2, #15
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4a0d      	ldr	r2, [pc, #52]	; (8007424 <UART_CheckIdleState+0x8c>)
 80073f0:	9200      	str	r2, [sp, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f000 f818 	bl	8007428 <UART_WaitOnFlagUntilTimeout>
 80073f8:	1e03      	subs	r3, r0, #0
 80073fa:	d001      	beq.n	8007400 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e00d      	b.n	800741c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2274      	movs	r2, #116	; 0x74
 8007416:	2100      	movs	r1, #0
 8007418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	0018      	movs	r0, r3
 800741e:	46bd      	mov	sp, r7
 8007420:	b004      	add	sp, #16
 8007422:	bd80      	pop	{r7, pc}
 8007424:	01ffffff 	.word	0x01ffffff

08007428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b094      	sub	sp, #80	; 0x50
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007438:	e0a3      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800743c:	3301      	adds	r3, #1
 800743e:	d100      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007440:	e09f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007442:	f7fa fad5 	bl	80019f0 <HAL_GetTick>
 8007446:	0002      	movs	r2, r0
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744e:	429a      	cmp	r2, r3
 8007450:	d302      	bcc.n	8007458 <UART_WaitOnFlagUntilTimeout+0x30>
 8007452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007454:	2b00      	cmp	r3, #0
 8007456:	d13d      	bne.n	80074d4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007458:	f3ef 8310 	mrs	r3, PRIMASK
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
 8007462:	2301      	movs	r3, #1
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	494c      	ldr	r1, [pc, #304]	; (80075ac <UART_WaitOnFlagUntilTimeout+0x184>)
 800747a:	400a      	ands	r2, r1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007480:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	f383 8810 	msr	PRIMASK, r3
}
 8007488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748a:	f3ef 8310 	mrs	r3, PRIMASK
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007492:	643b      	str	r3, [r7, #64]	; 0x40
 8007494:	2301      	movs	r3, #1
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f383 8810 	msr	PRIMASK, r3
}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2101      	movs	r1, #1
 80074ac:	438a      	bics	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	f383 8810 	msr	PRIMASK, r3
}
 80074ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2274      	movs	r2, #116	; 0x74
 80074cc:	2100      	movs	r1, #0
 80074ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e067      	b.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2204      	movs	r2, #4
 80074dc:	4013      	ands	r3, r2
 80074de:	d050      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69da      	ldr	r2, [r3, #28]
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	401a      	ands	r2, r3
 80074ec:	2380      	movs	r3, #128	; 0x80
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d146      	bne.n	8007582 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	0112      	lsls	r2, r2, #4
 80074fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007502:	613b      	str	r3, [r7, #16]
  return(result);
 8007504:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f383 8810 	msr	PRIMASK, r3
}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4923      	ldr	r1, [pc, #140]	; (80075ac <UART_WaitOnFlagUntilTimeout+0x184>)
 8007520:	400a      	ands	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007530:	f3ef 8310 	mrs	r3, PRIMASK
 8007534:	61fb      	str	r3, [r7, #28]
  return(result);
 8007536:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007538:	64bb      	str	r3, [r7, #72]	; 0x48
 800753a:	2301      	movs	r3, #1
 800753c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	f383 8810 	msr	PRIMASK, r3
}
 8007544:	46c0      	nop			; (mov r8, r8)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2101      	movs	r1, #1
 8007552:	438a      	bics	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
 8007556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	f383 8810 	msr	PRIMASK, r3
}
 8007560:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2280      	movs	r2, #128	; 0x80
 8007572:	2120      	movs	r1, #32
 8007574:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2274      	movs	r2, #116	; 0x74
 800757a:	2100      	movs	r1, #0
 800757c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e010      	b.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	4013      	ands	r3, r2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	425a      	negs	r2, r3
 8007592:	4153      	adcs	r3, r2
 8007594:	b2db      	uxtb	r3, r3
 8007596:	001a      	movs	r2, r3
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d100      	bne.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80075a0:	e74b      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	0018      	movs	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b014      	add	sp, #80	; 0x50
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	fffffe5f 	.word	0xfffffe5f

080075b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08e      	sub	sp, #56	; 0x38
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b8:	f3ef 8310 	mrs	r3, PRIMASK
 80075bc:	617b      	str	r3, [r7, #20]
  return(result);
 80075be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
 80075c2:	2301      	movs	r3, #1
 80075c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f383 8810 	msr	PRIMASK, r3
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4925      	ldr	r1, [pc, #148]	; (8007670 <UART_EndRxTransfer+0xc0>)
 80075da:	400a      	ands	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f383 8810 	msr	PRIMASK, r3
}
 80075e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ea:	f3ef 8310 	mrs	r3, PRIMASK
 80075ee:	623b      	str	r3, [r7, #32]
  return(result);
 80075f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
 80075f4:	2301      	movs	r3, #1
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2101      	movs	r1, #1
 800760c:	438a      	bics	r2, r1
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f383 8810 	msr	PRIMASK, r3
}
 800761a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007620:	2b01      	cmp	r3, #1
 8007622:	d118      	bne.n	8007656 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007624:	f3ef 8310 	mrs	r3, PRIMASK
 8007628:	60bb      	str	r3, [r7, #8]
  return(result);
 800762a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800762e:	2301      	movs	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f383 8810 	msr	PRIMASK, r3
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2110      	movs	r1, #16
 8007646:	438a      	bics	r2, r1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f383 8810 	msr	PRIMASK, r3
}
 8007654:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b00e      	add	sp, #56	; 0x38
 800766e:	bd80      	pop	{r7, pc}
 8007670:	fffffedf 	.word	0xfffffedf

08007674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	225a      	movs	r2, #90	; 0x5a
 8007686:	2100      	movs	r1, #0
 8007688:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2252      	movs	r2, #82	; 0x52
 800768e:	2100      	movs	r1, #0
 8007690:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	0018      	movs	r0, r3
 8007696:	f7ff fc2f 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b004      	add	sp, #16
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b086      	sub	sp, #24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076aa:	f3ef 8310 	mrs	r3, PRIMASK
 80076ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80076b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2140      	movs	r1, #64	; 0x40
 80076cc:	438a      	bics	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f383 8810 	msr	PRIMASK, r3
}
 80076da:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	0018      	movs	r0, r3
 80076ec:	f7ff fbfc 	bl	8006ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f0:	46c0      	nop			; (mov r8, r8)
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b006      	add	sp, #24
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007700:	46c0      	nop			; (mov r8, r8)
 8007702:	46bd      	mov	sp, r7
 8007704:	b002      	add	sp, #8
 8007706:	bd80      	pop	{r7, pc}

08007708 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2244      	movs	r2, #68	; 0x44
 8007714:	2100      	movs	r1, #0
 8007716:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <USB_EnableGlobalInt+0x28>)
 800771a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	b299      	uxth	r1, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2240      	movs	r2, #64	; 0x40
 8007724:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b004      	add	sp, #16
 800772e:	bd80      	pop	{r7, pc}
 8007730:	0000bf80 	.word	0x0000bf80

08007734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <USB_DisableGlobalInt+0x30>)
 800773e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2240      	movs	r2, #64	; 0x40
 8007744:	5a9b      	ldrh	r3, [r3, r2]
 8007746:	b29b      	uxth	r3, r3
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	b292      	uxth	r2, r2
 800774c:	43d2      	mvns	r2, r2
 800774e:	b292      	uxth	r2, r2
 8007750:	4013      	ands	r3, r2
 8007752:	b299      	uxth	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2240      	movs	r2, #64	; 0x40
 8007758:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	0018      	movs	r0, r3
 800775e:	46bd      	mov	sp, r7
 8007760:	b004      	add	sp, #16
 8007762:	bd80      	pop	{r7, pc}
 8007764:	0000bf80 	.word	0x0000bf80

08007768 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007768:	b084      	sub	sp, #16
 800776a:	b590      	push	{r4, r7, lr}
 800776c:	46c6      	mov	lr, r8
 800776e:	b500      	push	{lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	2004      	movs	r0, #4
 8007778:	2410      	movs	r4, #16
 800777a:	46a4      	mov	ip, r4
 800777c:	2408      	movs	r4, #8
 800777e:	46a0      	mov	r8, r4
 8007780:	44b8      	add	r8, r7
 8007782:	44c4      	add	ip, r8
 8007784:	4460      	add	r0, ip
 8007786:	6001      	str	r1, [r0, #0]
 8007788:	6042      	str	r2, [r0, #4]
 800778a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2240      	movs	r2, #64	; 0x40
 8007790:	2101      	movs	r1, #1
 8007792:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	2100      	movs	r1, #0
 800779a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2244      	movs	r2, #68	; 0x44
 80077a0:	2100      	movs	r1, #0
 80077a2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2250      	movs	r2, #80	; 0x50
 80077a8:	2100      	movs	r1, #0
 80077aa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b002      	add	sp, #8
 80077b4:	bc80      	pop	{r7}
 80077b6:	46b8      	mov	r8, r7
 80077b8:	bc90      	pop	{r4, r7}
 80077ba:	bc08      	pop	{r3}
 80077bc:	b004      	add	sp, #16
 80077be:	4718      	bx	r3

080077c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b09c      	sub	sp, #112	; 0x70
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ca:	236f      	movs	r3, #111	; 0x6f
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	18d3      	adds	r3, r2, r3
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	236c      	movs	r3, #108	; 0x6c
 80077e2:	18fb      	adds	r3, r7, r3
 80077e4:	49cf      	ldr	r1, [pc, #828]	; (8007b24 <USB_ActivateEndpoint+0x364>)
 80077e6:	400a      	ands	r2, r1
 80077e8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	78db      	ldrb	r3, [r3, #3]
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d017      	beq.n	8007822 <USB_ActivateEndpoint+0x62>
 80077f2:	dc28      	bgt.n	8007846 <USB_ActivateEndpoint+0x86>
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d00e      	beq.n	8007816 <USB_ActivateEndpoint+0x56>
 80077f8:	dc25      	bgt.n	8007846 <USB_ActivateEndpoint+0x86>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <USB_ActivateEndpoint+0x44>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d018      	beq.n	8007834 <USB_ActivateEndpoint+0x74>
 8007802:	e020      	b.n	8007846 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007804:	226c      	movs	r2, #108	; 0x6c
 8007806:	18bb      	adds	r3, r7, r2
 8007808:	18ba      	adds	r2, r7, r2
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	2180      	movs	r1, #128	; 0x80
 800780e:	0089      	lsls	r1, r1, #2
 8007810:	430a      	orrs	r2, r1
 8007812:	801a      	strh	r2, [r3, #0]
      break;
 8007814:	e01c      	b.n	8007850 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8007816:	226c      	movs	r2, #108	; 0x6c
 8007818:	18bb      	adds	r3, r7, r2
 800781a:	18ba      	adds	r2, r7, r2
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	801a      	strh	r2, [r3, #0]
      break;
 8007820:	e016      	b.n	8007850 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007822:	226c      	movs	r2, #108	; 0x6c
 8007824:	18bb      	adds	r3, r7, r2
 8007826:	18ba      	adds	r2, r7, r2
 8007828:	8812      	ldrh	r2, [r2, #0]
 800782a:	21c0      	movs	r1, #192	; 0xc0
 800782c:	00c9      	lsls	r1, r1, #3
 800782e:	430a      	orrs	r2, r1
 8007830:	801a      	strh	r2, [r3, #0]
      break;
 8007832:	e00d      	b.n	8007850 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007834:	226c      	movs	r2, #108	; 0x6c
 8007836:	18bb      	adds	r3, r7, r2
 8007838:	18ba      	adds	r2, r7, r2
 800783a:	8812      	ldrh	r2, [r2, #0]
 800783c:	2180      	movs	r1, #128	; 0x80
 800783e:	00c9      	lsls	r1, r1, #3
 8007840:	430a      	orrs	r2, r1
 8007842:	801a      	strh	r2, [r3, #0]
      break;
 8007844:	e004      	b.n	8007850 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8007846:	236f      	movs	r3, #111	; 0x6f
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
      break;
 800784e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	18d3      	adds	r3, r2, r3
 800785a:	226c      	movs	r2, #108	; 0x6c
 800785c:	18ba      	adds	r2, r7, r2
 800785e:	8812      	ldrh	r2, [r2, #0]
 8007860:	49b1      	ldr	r1, [pc, #708]	; (8007b28 <USB_ActivateEndpoint+0x368>)
 8007862:	430a      	orrs	r2, r1
 8007864:	b292      	uxth	r2, r2
 8007866:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	18d3      	adds	r3, r2, r3
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	b21b      	sxth	r3, r3
 8007878:	4aac      	ldr	r2, [pc, #688]	; (8007b2c <USB_ActivateEndpoint+0x36c>)
 800787a:	4013      	ands	r3, r2
 800787c:	b21a      	sxth	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b21b      	sxth	r3, r3
 8007884:	4313      	orrs	r3, r2
 8007886:	b21a      	sxth	r2, r3
 8007888:	2166      	movs	r1, #102	; 0x66
 800788a:	187b      	adds	r3, r7, r1
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	18d3      	adds	r3, r2, r3
 8007898:	187a      	adds	r2, r7, r1
 800789a:	8812      	ldrh	r2, [r2, #0]
 800789c:	49a2      	ldr	r1, [pc, #648]	; (8007b28 <USB_ActivateEndpoint+0x368>)
 800789e:	430a      	orrs	r2, r1
 80078a0:	b292      	uxth	r2, r2
 80078a2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	7b1b      	ldrb	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d000      	beq.n	80078ae <USB_ActivateEndpoint+0xee>
 80078ac:	e150      	b.n	8007b50 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d100      	bne.n	80078b8 <USB_ActivateEndpoint+0xf8>
 80078b6:	e07a      	b.n	80079ae <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2250      	movs	r2, #80	; 0x50
 80078c0:	5a9b      	ldrh	r3, [r3, r2]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	001a      	movs	r2, r3
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	189b      	adds	r3, r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	00da      	lsls	r2, r3, #3
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	18d3      	adds	r3, r2, r3
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	00d2      	lsls	r2, r2, #3
 80078da:	4694      	mov	ip, r2
 80078dc:	4463      	add	r3, ip
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	88db      	ldrh	r3, [r3, #6]
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	18db      	adds	r3, r3, r3
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d2      	adds	r2, r2, r3
 80078fa:	2112      	movs	r1, #18
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	8812      	ldrh	r2, [r2, #0]
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	187b      	adds	r3, r7, r1
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	2240      	movs	r2, #64	; 0x40
 8007908:	4013      	ands	r3, r2
 800790a:	d016      	beq.n	800793a <USB_ActivateEndpoint+0x17a>
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	18d3      	adds	r3, r2, r3
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29a      	uxth	r2, r3
 800791a:	2010      	movs	r0, #16
 800791c:	183b      	adds	r3, r7, r0
 800791e:	4983      	ldr	r1, [pc, #524]	; (8007b2c <USB_ActivateEndpoint+0x36c>)
 8007920:	400a      	ands	r2, r1
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	18d3      	adds	r3, r2, r3
 800792e:	183a      	adds	r2, r7, r0
 8007930:	8812      	ldrh	r2, [r2, #0]
 8007932:	497f      	ldr	r1, [pc, #508]	; (8007b30 <USB_ActivateEndpoint+0x370>)
 8007934:	430a      	orrs	r2, r1
 8007936:	b292      	uxth	r2, r2
 8007938:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	78db      	ldrb	r3, [r3, #3]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d01d      	beq.n	800797e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	18d3      	adds	r3, r2, r3
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29a      	uxth	r2, r3
 8007950:	200c      	movs	r0, #12
 8007952:	183b      	adds	r3, r7, r0
 8007954:	4977      	ldr	r1, [pc, #476]	; (8007b34 <USB_ActivateEndpoint+0x374>)
 8007956:	400a      	ands	r2, r1
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	183b      	adds	r3, r7, r0
 800795c:	183a      	adds	r2, r7, r0
 800795e:	8812      	ldrh	r2, [r2, #0]
 8007960:	2120      	movs	r1, #32
 8007962:	404a      	eors	r2, r1
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	18d3      	adds	r3, r2, r3
 8007970:	183a      	adds	r2, r7, r0
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	496c      	ldr	r1, [pc, #432]	; (8007b28 <USB_ActivateEndpoint+0x368>)
 8007976:	430a      	orrs	r2, r1
 8007978:	b292      	uxth	r2, r2
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e27a      	b.n	8007e74 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	18d3      	adds	r3, r2, r3
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29a      	uxth	r2, r3
 800798c:	200e      	movs	r0, #14
 800798e:	183b      	adds	r3, r7, r0
 8007990:	4968      	ldr	r1, [pc, #416]	; (8007b34 <USB_ActivateEndpoint+0x374>)
 8007992:	400a      	ands	r2, r1
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	18d3      	adds	r3, r2, r3
 80079a0:	183a      	adds	r2, r7, r0
 80079a2:	8812      	ldrh	r2, [r2, #0]
 80079a4:	4960      	ldr	r1, [pc, #384]	; (8007b28 <USB_ActivateEndpoint+0x368>)
 80079a6:	430a      	orrs	r2, r1
 80079a8:	b292      	uxth	r2, r2
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e262      	b.n	8007e74 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2250      	movs	r2, #80	; 0x50
 80079b6:	5a9b      	ldrh	r3, [r3, r2]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	001a      	movs	r2, r3
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	189b      	adds	r3, r3, r2
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	00da      	lsls	r2, r3, #3
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	18d3      	adds	r3, r2, r3
 80079cc:	4a5a      	ldr	r2, [pc, #360]	; (8007b38 <USB_ActivateEndpoint+0x378>)
 80079ce:	4694      	mov	ip, r2
 80079d0:	4463      	add	r3, ip
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	88db      	ldrh	r3, [r3, #6]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	18db      	adds	r3, r3, r3
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2250      	movs	r2, #80	; 0x50
 80079ec:	5a9b      	ldrh	r3, [r3, r2]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	001a      	movs	r2, r3
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	189b      	adds	r3, r3, r2
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	00da      	lsls	r2, r3, #3
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	4a4e      	ldr	r2, [pc, #312]	; (8007b3c <USB_ActivateEndpoint+0x37c>)
 8007a04:	4694      	mov	ip, r2
 8007a06:	4463      	add	r3, ip
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d110      	bne.n	8007a34 <USB_ActivateEndpoint+0x274>
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4a49      	ldr	r2, [pc, #292]	; (8007b40 <USB_ActivateEndpoint+0x380>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4a46      	ldr	r2, [pc, #280]	; (8007b44 <USB_ActivateEndpoint+0x384>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e02b      	b.n	8007a8c <USB_ActivateEndpoint+0x2cc>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3a:	d812      	bhi.n	8007a62 <USB_ActivateEndpoint+0x2a2>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	d002      	beq.n	8007a54 <USB_ActivateEndpoint+0x294>
 8007a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a50:	3301      	adds	r3, #1
 8007a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	029b      	lsls	r3, r3, #10
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e014      	b.n	8007a8c <USB_ActivateEndpoint+0x2cc>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	221f      	movs	r2, #31
 8007a70:	4013      	ands	r3, r2
 8007a72:	d102      	bne.n	8007a7a <USB_ActivateEndpoint+0x2ba>
 8007a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a76:	3b01      	subs	r3, #1
 8007a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	029b      	lsls	r3, r3, #10
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4a30      	ldr	r2, [pc, #192]	; (8007b44 <USB_ActivateEndpoint+0x384>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	18d2      	adds	r2, r2, r3
 8007a96:	2122      	movs	r1, #34	; 0x22
 8007a98:	187b      	adds	r3, r7, r1
 8007a9a:	8812      	ldrh	r2, [r2, #0]
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	01db      	lsls	r3, r3, #7
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	d016      	beq.n	8007ad8 <USB_ActivateEndpoint+0x318>
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	18d3      	adds	r3, r2, r3
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	2020      	movs	r0, #32
 8007aba:	183b      	adds	r3, r7, r0
 8007abc:	491b      	ldr	r1, [pc, #108]	; (8007b2c <USB_ActivateEndpoint+0x36c>)
 8007abe:	400a      	ands	r2, r1
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	18d3      	adds	r3, r2, r3
 8007acc:	183a      	adds	r2, r7, r0
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	491d      	ldr	r1, [pc, #116]	; (8007b48 <USB_ActivateEndpoint+0x388>)
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	18d3      	adds	r3, r2, r3
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	201e      	movs	r0, #30
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	4918      	ldr	r1, [pc, #96]	; (8007b4c <USB_ActivateEndpoint+0x38c>)
 8007aec:	400a      	ands	r2, r1
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	183b      	adds	r3, r7, r0
 8007af2:	183a      	adds	r2, r7, r0
 8007af4:	8812      	ldrh	r2, [r2, #0]
 8007af6:	2180      	movs	r1, #128	; 0x80
 8007af8:	0149      	lsls	r1, r1, #5
 8007afa:	404a      	eors	r2, r1
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	183a      	adds	r2, r7, r0
 8007b02:	8812      	ldrh	r2, [r2, #0]
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	0189      	lsls	r1, r1, #6
 8007b08:	404a      	eors	r2, r1
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	18d3      	adds	r3, r2, r3
 8007b16:	183a      	adds	r2, r7, r0
 8007b18:	8812      	ldrh	r2, [r2, #0]
 8007b1a:	4903      	ldr	r1, [pc, #12]	; (8007b28 <USB_ActivateEndpoint+0x368>)
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	e1a7      	b.n	8007e74 <USB_ActivateEndpoint+0x6b4>
 8007b24:	ffff898f 	.word	0xffff898f
 8007b28:	ffff8080 	.word	0xffff8080
 8007b2c:	ffff8f8f 	.word	0xffff8f8f
 8007b30:	ffff80c0 	.word	0xffff80c0
 8007b34:	ffff8fbf 	.word	0xffff8fbf
 8007b38:	00000404 	.word	0x00000404
 8007b3c:	00000406 	.word	0x00000406
 8007b40:	ffff83ff 	.word	0xffff83ff
 8007b44:	ffff8000 	.word	0xffff8000
 8007b48:	ffffc080 	.word	0xffffc080
 8007b4c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d117      	bne.n	8007b88 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	2062      	movs	r0, #98	; 0x62
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	49c6      	ldr	r1, [pc, #792]	; (8007e84 <USB_ActivateEndpoint+0x6c4>)
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	18d3      	adds	r3, r2, r3
 8007b7a:	183a      	adds	r2, r7, r0
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	49c2      	ldr	r1, [pc, #776]	; (8007e88 <USB_ActivateEndpoint+0x6c8>)
 8007b80:	430a      	orrs	r2, r1
 8007b82:	b292      	uxth	r2, r2
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	e016      	b.n	8007bb6 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	18d3      	adds	r3, r2, r3
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	2064      	movs	r0, #100	; 0x64
 8007b98:	183b      	adds	r3, r7, r0
 8007b9a:	49bc      	ldr	r1, [pc, #752]	; (8007e8c <USB_ActivateEndpoint+0x6cc>)
 8007b9c:	400a      	ands	r2, r1
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	18d3      	adds	r3, r2, r3
 8007baa:	183a      	adds	r2, r7, r0
 8007bac:	8812      	ldrh	r2, [r2, #0]
 8007bae:	49b8      	ldr	r1, [pc, #736]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2250      	movs	r2, #80	; 0x50
 8007bbe:	5a9b      	ldrh	r3, [r3, r2]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	001a      	movs	r2, r3
 8007bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc6:	189b      	adds	r3, r3, r2
 8007bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	00da      	lsls	r2, r3, #3
 8007bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd2:	18d3      	adds	r3, r2, r3
 8007bd4:	2280      	movs	r2, #128	; 0x80
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	4694      	mov	ip, r2
 8007bda:	4463      	add	r3, ip
 8007bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	891b      	ldrh	r3, [r3, #8]
 8007be2:	085b      	lsrs	r3, r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	18db      	adds	r3, r3, r3
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2250      	movs	r2, #80	; 0x50
 8007bf6:	5a9b      	ldrh	r3, [r3, r2]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	657b      	str	r3, [r7, #84]	; 0x54
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00da      	lsls	r2, r3, #3
 8007c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0a:	18d3      	adds	r3, r2, r3
 8007c0c:	4aa1      	ldr	r2, [pc, #644]	; (8007e94 <USB_ActivateEndpoint+0x6d4>)
 8007c0e:	4694      	mov	ip, r2
 8007c10:	4463      	add	r3, ip
 8007c12:	653b      	str	r3, [r7, #80]	; 0x50
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	895b      	ldrh	r3, [r3, #10]
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	18db      	adds	r3, r3, r3
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	785b      	ldrb	r3, [r3, #1]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d000      	beq.n	8007c2e <USB_ActivateEndpoint+0x46e>
 8007c2c:	e087      	b.n	8007d3e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	18d2      	adds	r2, r2, r3
 8007c38:	2140      	movs	r1, #64	; 0x40
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	8812      	ldrh	r2, [r2, #0]
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	187b      	adds	r3, r7, r1
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	2380      	movs	r3, #128	; 0x80
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	4013      	ands	r3, r2
 8007c4a:	d016      	beq.n	8007c7a <USB_ActivateEndpoint+0x4ba>
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	18d3      	adds	r3, r2, r3
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	203e      	movs	r0, #62	; 0x3e
 8007c5c:	183b      	adds	r3, r7, r0
 8007c5e:	4989      	ldr	r1, [pc, #548]	; (8007e84 <USB_ActivateEndpoint+0x6c4>)
 8007c60:	400a      	ands	r2, r1
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	183a      	adds	r2, r7, r0
 8007c70:	8812      	ldrh	r2, [r2, #0]
 8007c72:	4989      	ldr	r1, [pc, #548]	; (8007e98 <USB_ActivateEndpoint+0x6d8>)
 8007c74:	430a      	orrs	r2, r1
 8007c76:	b292      	uxth	r2, r2
 8007c78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	18d2      	adds	r2, r2, r3
 8007c84:	213c      	movs	r1, #60	; 0x3c
 8007c86:	187b      	adds	r3, r7, r1
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	187b      	adds	r3, r7, r1
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2240      	movs	r2, #64	; 0x40
 8007c92:	4013      	ands	r3, r2
 8007c94:	d016      	beq.n	8007cc4 <USB_ActivateEndpoint+0x504>
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	18d3      	adds	r3, r2, r3
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	203a      	movs	r0, #58	; 0x3a
 8007ca6:	183b      	adds	r3, r7, r0
 8007ca8:	4976      	ldr	r1, [pc, #472]	; (8007e84 <USB_ActivateEndpoint+0x6c4>)
 8007caa:	400a      	ands	r2, r1
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	18d3      	adds	r3, r2, r3
 8007cb8:	183a      	adds	r2, r7, r0
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	4977      	ldr	r1, [pc, #476]	; (8007e9c <USB_ActivateEndpoint+0x6dc>)
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	18d3      	adds	r3, r2, r3
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	2038      	movs	r0, #56	; 0x38
 8007cd4:	183b      	adds	r3, r7, r0
 8007cd6:	4972      	ldr	r1, [pc, #456]	; (8007ea0 <USB_ActivateEndpoint+0x6e0>)
 8007cd8:	400a      	ands	r2, r1
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	183b      	adds	r3, r7, r0
 8007cde:	183a      	adds	r2, r7, r0
 8007ce0:	8812      	ldrh	r2, [r2, #0]
 8007ce2:	2180      	movs	r1, #128	; 0x80
 8007ce4:	0149      	lsls	r1, r1, #5
 8007ce6:	404a      	eors	r2, r1
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	183b      	adds	r3, r7, r0
 8007cec:	183a      	adds	r2, r7, r0
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	2180      	movs	r1, #128	; 0x80
 8007cf2:	0189      	lsls	r1, r1, #6
 8007cf4:	404a      	eors	r2, r1
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	18d3      	adds	r3, r2, r3
 8007d02:	183a      	adds	r2, r7, r0
 8007d04:	8812      	ldrh	r2, [r2, #0]
 8007d06:	4962      	ldr	r1, [pc, #392]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	18d3      	adds	r3, r2, r3
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	2036      	movs	r0, #54	; 0x36
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	4960      	ldr	r1, [pc, #384]	; (8007ea4 <USB_ActivateEndpoint+0x6e4>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	18d3      	adds	r3, r2, r3
 8007d30:	183a      	adds	r2, r7, r0
 8007d32:	8812      	ldrh	r2, [r2, #0]
 8007d34:	4956      	ldr	r1, [pc, #344]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007d36:	430a      	orrs	r2, r1
 8007d38:	b292      	uxth	r2, r2
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	e09a      	b.n	8007e74 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	18d2      	adds	r2, r2, r3
 8007d48:	214e      	movs	r1, #78	; 0x4e
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	8812      	ldrh	r2, [r2, #0]
 8007d4e:	801a      	strh	r2, [r3, #0]
 8007d50:	187b      	adds	r3, r7, r1
 8007d52:	881a      	ldrh	r2, [r3, #0]
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	01db      	lsls	r3, r3, #7
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d016      	beq.n	8007d8a <USB_ActivateEndpoint+0x5ca>
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	18d3      	adds	r3, r2, r3
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	204c      	movs	r0, #76	; 0x4c
 8007d6c:	183b      	adds	r3, r7, r0
 8007d6e:	4945      	ldr	r1, [pc, #276]	; (8007e84 <USB_ActivateEndpoint+0x6c4>)
 8007d70:	400a      	ands	r2, r1
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	18d3      	adds	r3, r2, r3
 8007d7e:	183a      	adds	r2, r7, r0
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	4945      	ldr	r1, [pc, #276]	; (8007e98 <USB_ActivateEndpoint+0x6d8>)
 8007d84:	430a      	orrs	r2, r1
 8007d86:	b292      	uxth	r2, r2
 8007d88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	18d2      	adds	r2, r2, r3
 8007d94:	214a      	movs	r1, #74	; 0x4a
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	8812      	ldrh	r2, [r2, #0]
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	187b      	adds	r3, r7, r1
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	2240      	movs	r2, #64	; 0x40
 8007da2:	4013      	ands	r3, r2
 8007da4:	d016      	beq.n	8007dd4 <USB_ActivateEndpoint+0x614>
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	18d3      	adds	r3, r2, r3
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	2048      	movs	r0, #72	; 0x48
 8007db6:	183b      	adds	r3, r7, r0
 8007db8:	4932      	ldr	r1, [pc, #200]	; (8007e84 <USB_ActivateEndpoint+0x6c4>)
 8007dba:	400a      	ands	r2, r1
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	18d3      	adds	r3, r2, r3
 8007dc8:	183a      	adds	r2, r7, r0
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	4933      	ldr	r1, [pc, #204]	; (8007e9c <USB_ActivateEndpoint+0x6dc>)
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	b292      	uxth	r2, r2
 8007dd2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	78db      	ldrb	r3, [r3, #3]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d01d      	beq.n	8007e18 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	18d3      	adds	r3, r2, r3
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	2044      	movs	r0, #68	; 0x44
 8007dec:	183b      	adds	r3, r7, r0
 8007dee:	492d      	ldr	r1, [pc, #180]	; (8007ea4 <USB_ActivateEndpoint+0x6e4>)
 8007df0:	400a      	ands	r2, r1
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	183b      	adds	r3, r7, r0
 8007df6:	183a      	adds	r2, r7, r0
 8007df8:	8812      	ldrh	r2, [r2, #0]
 8007dfa:	2120      	movs	r1, #32
 8007dfc:	404a      	eors	r2, r1
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	18d3      	adds	r3, r2, r3
 8007e0a:	183a      	adds	r2, r7, r0
 8007e0c:	8812      	ldrh	r2, [r2, #0]
 8007e0e:	4920      	ldr	r1, [pc, #128]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007e10:	430a      	orrs	r2, r1
 8007e12:	b292      	uxth	r2, r2
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e016      	b.n	8007e46 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	18d3      	adds	r3, r2, r3
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	2046      	movs	r0, #70	; 0x46
 8007e28:	183b      	adds	r3, r7, r0
 8007e2a:	491e      	ldr	r1, [pc, #120]	; (8007ea4 <USB_ActivateEndpoint+0x6e4>)
 8007e2c:	400a      	ands	r2, r1
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	18d3      	adds	r3, r2, r3
 8007e3a:	183a      	adds	r2, r7, r0
 8007e3c:	8812      	ldrh	r2, [r2, #0]
 8007e3e:	4914      	ldr	r1, [pc, #80]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007e40:	430a      	orrs	r2, r1
 8007e42:	b292      	uxth	r2, r2
 8007e44:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	18d3      	adds	r3, r2, r3
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	2042      	movs	r0, #66	; 0x42
 8007e56:	183b      	adds	r3, r7, r0
 8007e58:	4911      	ldr	r1, [pc, #68]	; (8007ea0 <USB_ActivateEndpoint+0x6e0>)
 8007e5a:	400a      	ands	r2, r1
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	18d3      	adds	r3, r2, r3
 8007e68:	183a      	adds	r2, r7, r0
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	4908      	ldr	r1, [pc, #32]	; (8007e90 <USB_ActivateEndpoint+0x6d0>)
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	b292      	uxth	r2, r2
 8007e72:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8007e74:	236f      	movs	r3, #111	; 0x6f
 8007e76:	18fb      	adds	r3, r7, r3
 8007e78:	781b      	ldrb	r3, [r3, #0]
}
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b01c      	add	sp, #112	; 0x70
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	ffff8f8f 	.word	0xffff8f8f
 8007e88:	ffff8180 	.word	0xffff8180
 8007e8c:	ffff8e8f 	.word	0xffff8e8f
 8007e90:	ffff8080 	.word	0xffff8080
 8007e94:	00000404 	.word	0x00000404
 8007e98:	ffffc080 	.word	0xffffc080
 8007e9c:	ffff80c0 	.word	0xffff80c0
 8007ea0:	ffffbf8f 	.word	0xffffbf8f
 8007ea4:	ffff8fbf 	.word	0xffff8fbf

08007ea8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08c      	sub	sp, #48	; 0x30
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	7b1b      	ldrb	r3, [r3, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d000      	beq.n	8007ebc <USB_DeactivateEndpoint+0x14>
 8007eba:	e07e      	b.n	8007fba <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d03c      	beq.n	8007f3e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	18d2      	adds	r2, r2, r3
 8007ece:	210c      	movs	r1, #12
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	8812      	ldrh	r2, [r2, #0]
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	4013      	ands	r3, r2
 8007ede:	d016      	beq.n	8007f0e <USB_DeactivateEndpoint+0x66>
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	18d3      	adds	r3, r2, r3
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	200a      	movs	r0, #10
 8007ef0:	183b      	adds	r3, r7, r0
 8007ef2:	49c7      	ldr	r1, [pc, #796]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8007ef4:	400a      	ands	r2, r1
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	18d3      	adds	r3, r2, r3
 8007f02:	183a      	adds	r2, r7, r0
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	49c3      	ldr	r1, [pc, #780]	; (8008214 <USB_DeactivateEndpoint+0x36c>)
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	18d3      	adds	r3, r2, r3
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	2008      	movs	r0, #8
 8007f1e:	183b      	adds	r3, r7, r0
 8007f20:	49bd      	ldr	r1, [pc, #756]	; (8008218 <USB_DeactivateEndpoint+0x370>)
 8007f22:	400a      	ands	r2, r1
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	18d3      	adds	r3, r2, r3
 8007f30:	183a      	adds	r2, r7, r0
 8007f32:	8812      	ldrh	r2, [r2, #0]
 8007f34:	49b9      	ldr	r1, [pc, #740]	; (800821c <USB_DeactivateEndpoint+0x374>)
 8007f36:	430a      	orrs	r2, r1
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	e163      	b.n	8008206 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	18d2      	adds	r2, r2, r3
 8007f48:	2112      	movs	r1, #18
 8007f4a:	187b      	adds	r3, r7, r1
 8007f4c:	8812      	ldrh	r2, [r2, #0]
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	187b      	adds	r3, r7, r1
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	01db      	lsls	r3, r3, #7
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d016      	beq.n	8007f8a <USB_DeactivateEndpoint+0xe2>
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	18d3      	adds	r3, r2, r3
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	2010      	movs	r0, #16
 8007f6c:	183b      	adds	r3, r7, r0
 8007f6e:	49a8      	ldr	r1, [pc, #672]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8007f70:	400a      	ands	r2, r1
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	18d3      	adds	r3, r2, r3
 8007f7e:	183a      	adds	r2, r7, r0
 8007f80:	8812      	ldrh	r2, [r2, #0]
 8007f82:	49a7      	ldr	r1, [pc, #668]	; (8008220 <USB_DeactivateEndpoint+0x378>)
 8007f84:	430a      	orrs	r2, r1
 8007f86:	b292      	uxth	r2, r2
 8007f88:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	18d3      	adds	r3, r2, r3
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	200e      	movs	r0, #14
 8007f9a:	183b      	adds	r3, r7, r0
 8007f9c:	49a1      	ldr	r1, [pc, #644]	; (8008224 <USB_DeactivateEndpoint+0x37c>)
 8007f9e:	400a      	ands	r2, r1
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	18d3      	adds	r3, r2, r3
 8007fac:	183a      	adds	r2, r7, r0
 8007fae:	8812      	ldrh	r2, [r2, #0]
 8007fb0:	499a      	ldr	r1, [pc, #616]	; (800821c <USB_DeactivateEndpoint+0x374>)
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	b292      	uxth	r2, r2
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e125      	b.n	8008206 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d000      	beq.n	8007fc4 <USB_DeactivateEndpoint+0x11c>
 8007fc2:	e090      	b.n	80080e6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	18d2      	adds	r2, r2, r3
 8007fce:	2120      	movs	r1, #32
 8007fd0:	187b      	adds	r3, r7, r1
 8007fd2:	8812      	ldrh	r2, [r2, #0]
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	187b      	adds	r3, r7, r1
 8007fd8:	881a      	ldrh	r2, [r3, #0]
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	01db      	lsls	r3, r3, #7
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d016      	beq.n	8008010 <USB_DeactivateEndpoint+0x168>
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	18d3      	adds	r3, r2, r3
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	201e      	movs	r0, #30
 8007ff2:	183b      	adds	r3, r7, r0
 8007ff4:	4986      	ldr	r1, [pc, #536]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8007ff6:	400a      	ands	r2, r1
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	18d3      	adds	r3, r2, r3
 8008004:	183a      	adds	r2, r7, r0
 8008006:	8812      	ldrh	r2, [r2, #0]
 8008008:	4985      	ldr	r1, [pc, #532]	; (8008220 <USB_DeactivateEndpoint+0x378>)
 800800a:	430a      	orrs	r2, r1
 800800c:	b292      	uxth	r2, r2
 800800e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	18d2      	adds	r2, r2, r3
 800801a:	211c      	movs	r1, #28
 800801c:	187b      	adds	r3, r7, r1
 800801e:	8812      	ldrh	r2, [r2, #0]
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	187b      	adds	r3, r7, r1
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	2240      	movs	r2, #64	; 0x40
 8008028:	4013      	ands	r3, r2
 800802a:	d016      	beq.n	800805a <USB_DeactivateEndpoint+0x1b2>
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29a      	uxth	r2, r3
 800803a:	201a      	movs	r0, #26
 800803c:	183b      	adds	r3, r7, r0
 800803e:	4974      	ldr	r1, [pc, #464]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8008040:	400a      	ands	r2, r1
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	18d3      	adds	r3, r2, r3
 800804e:	183a      	adds	r2, r7, r0
 8008050:	8812      	ldrh	r2, [r2, #0]
 8008052:	4970      	ldr	r1, [pc, #448]	; (8008214 <USB_DeactivateEndpoint+0x36c>)
 8008054:	430a      	orrs	r2, r1
 8008056:	b292      	uxth	r2, r2
 8008058:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	18d3      	adds	r3, r2, r3
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	2018      	movs	r0, #24
 800806a:	183b      	adds	r3, r7, r0
 800806c:	4968      	ldr	r1, [pc, #416]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 800806e:	400a      	ands	r2, r1
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	18d3      	adds	r3, r2, r3
 800807c:	183a      	adds	r2, r7, r0
 800807e:	8812      	ldrh	r2, [r2, #0]
 8008080:	4964      	ldr	r1, [pc, #400]	; (8008214 <USB_DeactivateEndpoint+0x36c>)
 8008082:	430a      	orrs	r2, r1
 8008084:	b292      	uxth	r2, r2
 8008086:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	18d3      	adds	r3, r2, r3
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	2016      	movs	r0, #22
 8008098:	183b      	adds	r3, r7, r0
 800809a:	4962      	ldr	r1, [pc, #392]	; (8008224 <USB_DeactivateEndpoint+0x37c>)
 800809c:	400a      	ands	r2, r1
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	18d3      	adds	r3, r2, r3
 80080aa:	183a      	adds	r2, r7, r0
 80080ac:	8812      	ldrh	r2, [r2, #0]
 80080ae:	495b      	ldr	r1, [pc, #364]	; (800821c <USB_DeactivateEndpoint+0x374>)
 80080b0:	430a      	orrs	r2, r1
 80080b2:	b292      	uxth	r2, r2
 80080b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	18d3      	adds	r3, r2, r3
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	2014      	movs	r0, #20
 80080c6:	183b      	adds	r3, r7, r0
 80080c8:	4953      	ldr	r1, [pc, #332]	; (8008218 <USB_DeactivateEndpoint+0x370>)
 80080ca:	400a      	ands	r2, r1
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	183a      	adds	r2, r7, r0
 80080da:	8812      	ldrh	r2, [r2, #0]
 80080dc:	494f      	ldr	r1, [pc, #316]	; (800821c <USB_DeactivateEndpoint+0x374>)
 80080de:	430a      	orrs	r2, r1
 80080e0:	b292      	uxth	r2, r2
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e08f      	b.n	8008206 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	18d2      	adds	r2, r2, r3
 80080f0:	212e      	movs	r1, #46	; 0x2e
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	8812      	ldrh	r2, [r2, #0]
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	881a      	ldrh	r2, [r3, #0]
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	4013      	ands	r3, r2
 8008102:	d016      	beq.n	8008132 <USB_DeactivateEndpoint+0x28a>
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	18d3      	adds	r3, r2, r3
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29a      	uxth	r2, r3
 8008112:	202c      	movs	r0, #44	; 0x2c
 8008114:	183b      	adds	r3, r7, r0
 8008116:	493e      	ldr	r1, [pc, #248]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8008118:	400a      	ands	r2, r1
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	18d3      	adds	r3, r2, r3
 8008126:	183a      	adds	r2, r7, r0
 8008128:	8812      	ldrh	r2, [r2, #0]
 800812a:	493d      	ldr	r1, [pc, #244]	; (8008220 <USB_DeactivateEndpoint+0x378>)
 800812c:	430a      	orrs	r2, r1
 800812e:	b292      	uxth	r2, r2
 8008130:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	18d2      	adds	r2, r2, r3
 800813c:	212a      	movs	r1, #42	; 0x2a
 800813e:	187b      	adds	r3, r7, r1
 8008140:	8812      	ldrh	r2, [r2, #0]
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	187b      	adds	r3, r7, r1
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	2240      	movs	r2, #64	; 0x40
 800814a:	4013      	ands	r3, r2
 800814c:	d016      	beq.n	800817c <USB_DeactivateEndpoint+0x2d4>
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	2028      	movs	r0, #40	; 0x28
 800815e:	183b      	adds	r3, r7, r0
 8008160:	492b      	ldr	r1, [pc, #172]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8008162:	400a      	ands	r2, r1
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	183a      	adds	r2, r7, r0
 8008172:	8812      	ldrh	r2, [r2, #0]
 8008174:	4927      	ldr	r1, [pc, #156]	; (8008214 <USB_DeactivateEndpoint+0x36c>)
 8008176:	430a      	orrs	r2, r1
 8008178:	b292      	uxth	r2, r2
 800817a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	18d3      	adds	r3, r2, r3
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
 800818a:	2026      	movs	r0, #38	; 0x26
 800818c:	183b      	adds	r3, r7, r0
 800818e:	4920      	ldr	r1, [pc, #128]	; (8008210 <USB_DeactivateEndpoint+0x368>)
 8008190:	400a      	ands	r2, r1
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	18d3      	adds	r3, r2, r3
 800819e:	183a      	adds	r2, r7, r0
 80081a0:	8812      	ldrh	r2, [r2, #0]
 80081a2:	491f      	ldr	r1, [pc, #124]	; (8008220 <USB_DeactivateEndpoint+0x378>)
 80081a4:	430a      	orrs	r2, r1
 80081a6:	b292      	uxth	r2, r2
 80081a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	2024      	movs	r0, #36	; 0x24
 80081ba:	183b      	adds	r3, r7, r0
 80081bc:	4916      	ldr	r1, [pc, #88]	; (8008218 <USB_DeactivateEndpoint+0x370>)
 80081be:	400a      	ands	r2, r1
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	18d3      	adds	r3, r2, r3
 80081cc:	183a      	adds	r2, r7, r0
 80081ce:	8812      	ldrh	r2, [r2, #0]
 80081d0:	4912      	ldr	r1, [pc, #72]	; (800821c <USB_DeactivateEndpoint+0x374>)
 80081d2:	430a      	orrs	r2, r1
 80081d4:	b292      	uxth	r2, r2
 80081d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	18d3      	adds	r3, r2, r3
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	2022      	movs	r0, #34	; 0x22
 80081e8:	183b      	adds	r3, r7, r0
 80081ea:	490e      	ldr	r1, [pc, #56]	; (8008224 <USB_DeactivateEndpoint+0x37c>)
 80081ec:	400a      	ands	r2, r1
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	18d3      	adds	r3, r2, r3
 80081fa:	183a      	adds	r2, r7, r0
 80081fc:	8812      	ldrh	r2, [r2, #0]
 80081fe:	4907      	ldr	r1, [pc, #28]	; (800821c <USB_DeactivateEndpoint+0x374>)
 8008200:	430a      	orrs	r2, r1
 8008202:	b292      	uxth	r2, r2
 8008204:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	b00c      	add	sp, #48	; 0x30
 800820e:	bd80      	pop	{r7, pc}
 8008210:	ffff8f8f 	.word	0xffff8f8f
 8008214:	ffff80c0 	.word	0xffff80c0
 8008218:	ffff8fbf 	.word	0xffff8fbf
 800821c:	ffff8080 	.word	0xffff8080
 8008220:	ffffc080 	.word	0xffffc080
 8008224:	ffffbf8f 	.word	0xffffbf8f

08008228 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b0c3      	sub	sp, #268	; 0x10c
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d001      	beq.n	800823e <USB_EPStartXfer+0x16>
 800823a:	f000 fcef 	bl	8008c1c <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	d905      	bls.n	8008256 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	1d7a      	adds	r2, r7, #5
 8008250:	32ff      	adds	r2, #255	; 0xff
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e004      	b.n	8008260 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	1d7a      	adds	r2, r7, #5
 800825c:	32ff      	adds	r2, #255	; 0xff
 800825e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	7b1b      	ldrb	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d125      	bne.n	80082b4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	6959      	ldr	r1, [r3, #20]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	88da      	ldrh	r2, [r3, #6]
 8008270:	1d7b      	adds	r3, r7, #5
 8008272:	33ff      	adds	r3, #255	; 0xff
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f9c9 	bl	8009610 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2250      	movs	r2, #80	; 0x50
 8008286:	5a9b      	ldrh	r3, [r3, r2]
 8008288:	b29b      	uxth	r3, r3
 800828a:	001a      	movs	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	189b      	adds	r3, r3, r2
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	00da      	lsls	r2, r3, #3
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	18d3      	adds	r3, r2, r3
 800829c:	4acc      	ldr	r2, [pc, #816]	; (80085d0 <USB_EPStartXfer+0x3a8>)
 800829e:	4694      	mov	ip, r2
 80082a0:	4463      	add	r3, ip
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	1d7b      	adds	r3, r7, #5
 80082a6:	33ff      	adds	r3, #255	; 0xff
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	f000 fc8f 	bl	8008bd2 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d000      	beq.n	80082be <USB_EPStartXfer+0x96>
 80082bc:	e33a      	b.n	8008934 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6a1a      	ldr	r2, [r3, #32]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d800      	bhi.n	80082cc <USB_EPStartXfer+0xa4>
 80082ca:	e2df      	b.n	800888c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	18d3      	adds	r3, r2, r3
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	2056      	movs	r0, #86	; 0x56
 80082dc:	183b      	adds	r3, r7, r0
 80082de:	49bd      	ldr	r1, [pc, #756]	; (80085d4 <USB_EPStartXfer+0x3ac>)
 80082e0:	400a      	ands	r2, r1
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	18d3      	adds	r3, r2, r3
 80082ee:	183a      	adds	r2, r7, r0
 80082f0:	8812      	ldrh	r2, [r2, #0]
 80082f2:	49b9      	ldr	r1, [pc, #740]	; (80085d8 <USB_EPStartXfer+0x3b0>)
 80082f4:	430a      	orrs	r2, r1
 80082f6:	b292      	uxth	r2, r2
 80082f8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6a1a      	ldr	r2, [r3, #32]
 80082fe:	1d7b      	adds	r3, r7, #5
 8008300:	33ff      	adds	r3, #255	; 0xff
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	001a      	movs	r2, r3
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	4013      	ands	r3, r2
 800831e:	d100      	bne.n	8008322 <USB_EPStartXfer+0xfa>
 8008320:	e162      	b.n	80085e8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	633b      	str	r3, [r7, #48]	; 0x30
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d16a      	bne.n	8008404 <USB_EPStartXfer+0x1dc>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2250      	movs	r2, #80	; 0x50
 8008336:	5a9b      	ldrh	r3, [r3, r2]
 8008338:	b29b      	uxth	r3, r3
 800833a:	001a      	movs	r2, r3
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	189b      	adds	r3, r3, r2
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	00da      	lsls	r2, r3, #3
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	18d3      	adds	r3, r2, r3
 800834c:	4aa3      	ldr	r2, [pc, #652]	; (80085dc <USB_EPStartXfer+0x3b4>)
 800834e:	4694      	mov	ip, r2
 8008350:	4463      	add	r3, ip
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
 8008354:	1d7b      	adds	r3, r7, #5
 8008356:	33ff      	adds	r3, #255	; 0xff
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d110      	bne.n	8008380 <USB_EPStartXfer+0x158>
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	4a9e      	ldr	r2, [pc, #632]	; (80085e0 <USB_EPStartXfer+0x3b8>)
 8008366:	4013      	ands	r3, r2
 8008368:	b29a      	uxth	r2, r3
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	4a9b      	ldr	r2, [pc, #620]	; (80085e4 <USB_EPStartXfer+0x3bc>)
 8008376:	4313      	orrs	r3, r2
 8008378:	b29a      	uxth	r2, r3
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e05c      	b.n	800843a <USB_EPStartXfer+0x212>
 8008380:	1d7b      	adds	r3, r7, #5
 8008382:	33ff      	adds	r3, #255	; 0xff
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b3e      	cmp	r3, #62	; 0x3e
 8008388:	d81c      	bhi.n	80083c4 <USB_EPStartXfer+0x19c>
 800838a:	1d7b      	adds	r3, r7, #5
 800838c:	33ff      	adds	r3, #255	; 0xff
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	085b      	lsrs	r3, r3, #1
 8008392:	1c7a      	adds	r2, r7, #1
 8008394:	32ff      	adds	r2, #255	; 0xff
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	1d7b      	adds	r3, r7, #5
 800839a:	33ff      	adds	r3, #255	; 0xff
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2201      	movs	r2, #1
 80083a0:	4013      	ands	r3, r2
 80083a2:	d006      	beq.n	80083b2 <USB_EPStartXfer+0x18a>
 80083a4:	1c7b      	adds	r3, r7, #1
 80083a6:	33ff      	adds	r3, #255	; 0xff
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	1c7a      	adds	r2, r7, #1
 80083ae:	32ff      	adds	r2, #255	; 0xff
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	1c7b      	adds	r3, r7, #1
 80083b4:	33ff      	adds	r3, #255	; 0xff
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	029b      	lsls	r3, r3, #10
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e03a      	b.n	800843a <USB_EPStartXfer+0x212>
 80083c4:	1d7b      	adds	r3, r7, #5
 80083c6:	33ff      	adds	r3, #255	; 0xff
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	1c7a      	adds	r2, r7, #1
 80083ce:	32ff      	adds	r2, #255	; 0xff
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	1d7b      	adds	r3, r7, #5
 80083d4:	33ff      	adds	r3, #255	; 0xff
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	221f      	movs	r2, #31
 80083da:	4013      	ands	r3, r2
 80083dc:	d106      	bne.n	80083ec <USB_EPStartXfer+0x1c4>
 80083de:	1c7b      	adds	r3, r7, #1
 80083e0:	33ff      	adds	r3, #255	; 0xff
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	1c7a      	adds	r2, r7, #1
 80083e8:	32ff      	adds	r2, #255	; 0xff
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	1c7b      	adds	r3, r7, #1
 80083ee:	33ff      	adds	r3, #255	; 0xff
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4a7a      	ldr	r2, [pc, #488]	; (80085e4 <USB_EPStartXfer+0x3bc>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e01a      	b.n	800843a <USB_EPStartXfer+0x212>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d116      	bne.n	800843a <USB_EPStartXfer+0x212>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2250      	movs	r2, #80	; 0x50
 8008410:	5a9b      	ldrh	r3, [r3, r2]
 8008412:	b29b      	uxth	r3, r3
 8008414:	001a      	movs	r2, r3
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	189b      	adds	r3, r3, r2
 800841a:	633b      	str	r3, [r7, #48]	; 0x30
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	00da      	lsls	r2, r3, #3
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	18d3      	adds	r3, r2, r3
 8008426:	4a6d      	ldr	r2, [pc, #436]	; (80085dc <USB_EPStartXfer+0x3b4>)
 8008428:	4694      	mov	ip, r2
 800842a:	4463      	add	r3, ip
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800842e:	1d7b      	adds	r3, r7, #5
 8008430:	33ff      	adds	r3, #255	; 0xff
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	b29a      	uxth	r2, r3
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800843a:	2076      	movs	r0, #118	; 0x76
 800843c:	183b      	adds	r3, r7, r0
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	8952      	ldrh	r2, [r2, #10]
 8008442:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6959      	ldr	r1, [r3, #20]
 8008448:	1d7b      	adds	r3, r7, #5
 800844a:	33ff      	adds	r3, #255	; 0xff
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	b29c      	uxth	r4, r3
 8008450:	183b      	adds	r3, r7, r0
 8008452:	881a      	ldrh	r2, [r3, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	0023      	movs	r3, r4
 8008458:	f001 f8da 	bl	8009610 <USB_WritePMA>
            ep->xfer_buff += len;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	1d7b      	adds	r3, r7, #5
 8008462:	33ff      	adds	r3, #255	; 0xff
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	18d2      	adds	r2, r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	6a1a      	ldr	r2, [r3, #32]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d908      	bls.n	800848a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	6a1a      	ldr	r2, [r3, #32]
 800847c:	1d7b      	adds	r3, r7, #5
 800847e:	33ff      	adds	r3, #255	; 0xff
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	621a      	str	r2, [r3, #32]
 8008488:	e007      	b.n	800849a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	1d7a      	adds	r2, r7, #5
 8008490:	32ff      	adds	r2, #255	; 0xff
 8008492:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d166      	bne.n	8008570 <USB_EPStartXfer+0x348>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	61bb      	str	r3, [r7, #24]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2250      	movs	r2, #80	; 0x50
 80084aa:	5a9b      	ldrh	r3, [r3, r2]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	001a      	movs	r2, r3
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	189b      	adds	r3, r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	00da      	lsls	r2, r3, #3
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	18d3      	adds	r3, r2, r3
 80084c0:	4a43      	ldr	r2, [pc, #268]	; (80085d0 <USB_EPStartXfer+0x3a8>)
 80084c2:	4694      	mov	ip, r2
 80084c4:	4463      	add	r3, ip
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	1d7b      	adds	r3, r7, #5
 80084ca:	33ff      	adds	r3, #255	; 0xff
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d110      	bne.n	80084f4 <USB_EPStartXfer+0x2cc>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4a41      	ldr	r2, [pc, #260]	; (80085e0 <USB_EPStartXfer+0x3b8>)
 80084da:	4013      	ands	r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	4a3e      	ldr	r2, [pc, #248]	; (80085e4 <USB_EPStartXfer+0x3bc>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e05a      	b.n	80085aa <USB_EPStartXfer+0x382>
 80084f4:	1d7b      	adds	r3, r7, #5
 80084f6:	33ff      	adds	r3, #255	; 0xff
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b3e      	cmp	r3, #62	; 0x3e
 80084fc:	d81a      	bhi.n	8008534 <USB_EPStartXfer+0x30c>
 80084fe:	1d7b      	adds	r3, r7, #5
 8008500:	33ff      	adds	r3, #255	; 0xff
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	21fc      	movs	r1, #252	; 0xfc
 8008508:	187a      	adds	r2, r7, r1
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	1d7b      	adds	r3, r7, #5
 800850e:	33ff      	adds	r3, #255	; 0xff
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2201      	movs	r2, #1
 8008514:	4013      	ands	r3, r2
 8008516:	d004      	beq.n	8008522 <USB_EPStartXfer+0x2fa>
 8008518:	187b      	adds	r3, r7, r1
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	187a      	adds	r2, r7, r1
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	23fc      	movs	r3, #252	; 0xfc
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	b29a      	uxth	r2, r3
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	e03a      	b.n	80085aa <USB_EPStartXfer+0x382>
 8008534:	1d7b      	adds	r3, r7, #5
 8008536:	33ff      	adds	r3, #255	; 0xff
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	21fc      	movs	r1, #252	; 0xfc
 800853e:	187a      	adds	r2, r7, r1
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	1d7b      	adds	r3, r7, #5
 8008544:	33ff      	adds	r3, #255	; 0xff
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	221f      	movs	r2, #31
 800854a:	4013      	ands	r3, r2
 800854c:	d104      	bne.n	8008558 <USB_EPStartXfer+0x330>
 800854e:	187b      	adds	r3, r7, r1
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	187a      	adds	r2, r7, r1
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	23fc      	movs	r3, #252	; 0xfc
 800855a:	18fb      	adds	r3, r7, r3
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	029b      	lsls	r3, r3, #10
 8008562:	b29b      	uxth	r3, r3
 8008564:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <USB_EPStartXfer+0x3bc>)
 8008566:	4313      	orrs	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	e01c      	b.n	80085aa <USB_EPStartXfer+0x382>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d118      	bne.n	80085aa <USB_EPStartXfer+0x382>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	623b      	str	r3, [r7, #32]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2250      	movs	r2, #80	; 0x50
 8008580:	5a9b      	ldrh	r3, [r3, r2]
 8008582:	b29b      	uxth	r3, r3
 8008584:	001a      	movs	r2, r3
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	189b      	adds	r3, r3, r2
 800858a:	623b      	str	r3, [r7, #32]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	00da      	lsls	r2, r3, #3
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	18d3      	adds	r3, r2, r3
 8008596:	4a0e      	ldr	r2, [pc, #56]	; (80085d0 <USB_EPStartXfer+0x3a8>)
 8008598:	4694      	mov	ip, r2
 800859a:	4463      	add	r3, ip
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	1d7b      	adds	r3, r7, #5
 80085a0:	33ff      	adds	r3, #255	; 0xff
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085aa:	2076      	movs	r0, #118	; 0x76
 80085ac:	183b      	adds	r3, r7, r0
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	8912      	ldrh	r2, [r2, #8]
 80085b2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	6959      	ldr	r1, [r3, #20]
 80085b8:	1d7b      	adds	r3, r7, #5
 80085ba:	33ff      	adds	r3, #255	; 0xff
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	b29c      	uxth	r4, r3
 80085c0:	183b      	adds	r3, r7, r0
 80085c2:	881a      	ldrh	r2, [r3, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	0023      	movs	r3, r4
 80085c8:	f001 f822 	bl	8009610 <USB_WritePMA>
 80085cc:	e301      	b.n	8008bd2 <USB_EPStartXfer+0x9aa>
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	00000402 	.word	0x00000402
 80085d4:	ffff8f8f 	.word	0xffff8f8f
 80085d8:	ffff8180 	.word	0xffff8180
 80085dc:	00000406 	.word	0x00000406
 80085e0:	ffff83ff 	.word	0xffff83ff
 80085e4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d166      	bne.n	80086be <USB_EPStartXfer+0x496>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2250      	movs	r2, #80	; 0x50
 80085f8:	5a9b      	ldrh	r3, [r3, r2]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	001a      	movs	r2, r3
 80085fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008600:	189b      	adds	r3, r3, r2
 8008602:	64bb      	str	r3, [r7, #72]	; 0x48
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	00da      	lsls	r2, r3, #3
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	18d3      	adds	r3, r2, r3
 800860e:	4ac3      	ldr	r2, [pc, #780]	; (800891c <USB_EPStartXfer+0x6f4>)
 8008610:	4694      	mov	ip, r2
 8008612:	4463      	add	r3, ip
 8008614:	647b      	str	r3, [r7, #68]	; 0x44
 8008616:	1d7b      	adds	r3, r7, #5
 8008618:	33ff      	adds	r3, #255	; 0xff
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d110      	bne.n	8008642 <USB_EPStartXfer+0x41a>
 8008620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	4abe      	ldr	r2, [pc, #760]	; (8008920 <USB_EPStartXfer+0x6f8>)
 8008628:	4013      	ands	r3, r2
 800862a:	b29a      	uxth	r2, r3
 800862c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	4abb      	ldr	r2, [pc, #748]	; (8008924 <USB_EPStartXfer+0x6fc>)
 8008638:	4313      	orrs	r3, r2
 800863a:	b29a      	uxth	r2, r3
 800863c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e05a      	b.n	80086f8 <USB_EPStartXfer+0x4d0>
 8008642:	1d7b      	adds	r3, r7, #5
 8008644:	33ff      	adds	r3, #255	; 0xff
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b3e      	cmp	r3, #62	; 0x3e
 800864a:	d81a      	bhi.n	8008682 <USB_EPStartXfer+0x45a>
 800864c:	1d7b      	adds	r3, r7, #5
 800864e:	33ff      	adds	r3, #255	; 0xff
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	085b      	lsrs	r3, r3, #1
 8008654:	21f8      	movs	r1, #248	; 0xf8
 8008656:	187a      	adds	r2, r7, r1
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	1d7b      	adds	r3, r7, #5
 800865c:	33ff      	adds	r3, #255	; 0xff
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d004      	beq.n	8008670 <USB_EPStartXfer+0x448>
 8008666:	187b      	adds	r3, r7, r1
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	187a      	adds	r2, r7, r1
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	23f8      	movs	r3, #248	; 0xf8
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	b29a      	uxth	r2, r3
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	e03a      	b.n	80086f8 <USB_EPStartXfer+0x4d0>
 8008682:	1d7b      	adds	r3, r7, #5
 8008684:	33ff      	adds	r3, #255	; 0xff
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	21f8      	movs	r1, #248	; 0xf8
 800868c:	187a      	adds	r2, r7, r1
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	1d7b      	adds	r3, r7, #5
 8008692:	33ff      	adds	r3, #255	; 0xff
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	221f      	movs	r2, #31
 8008698:	4013      	ands	r3, r2
 800869a:	d104      	bne.n	80086a6 <USB_EPStartXfer+0x47e>
 800869c:	187b      	adds	r3, r7, r1
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	187a      	adds	r2, r7, r1
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	23f8      	movs	r3, #248	; 0xf8
 80086a8:	18fb      	adds	r3, r7, r3
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	029b      	lsls	r3, r3, #10
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4a9c      	ldr	r2, [pc, #624]	; (8008924 <USB_EPStartXfer+0x6fc>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e01c      	b.n	80086f8 <USB_EPStartXfer+0x4d0>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d118      	bne.n	80086f8 <USB_EPStartXfer+0x4d0>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	653b      	str	r3, [r7, #80]	; 0x50
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2250      	movs	r2, #80	; 0x50
 80086ce:	5a9b      	ldrh	r3, [r3, r2]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	001a      	movs	r2, r3
 80086d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d6:	189b      	adds	r3, r3, r2
 80086d8:	653b      	str	r3, [r7, #80]	; 0x50
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	00da      	lsls	r2, r3, #3
 80086e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e2:	18d3      	adds	r3, r2, r3
 80086e4:	4a8d      	ldr	r2, [pc, #564]	; (800891c <USB_EPStartXfer+0x6f4>)
 80086e6:	4694      	mov	ip, r2
 80086e8:	4463      	add	r3, ip
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ec:	1d7b      	adds	r3, r7, #5
 80086ee:	33ff      	adds	r3, #255	; 0xff
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086f8:	2076      	movs	r0, #118	; 0x76
 80086fa:	183b      	adds	r3, r7, r0
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	8912      	ldrh	r2, [r2, #8]
 8008700:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6959      	ldr	r1, [r3, #20]
 8008706:	1d7b      	adds	r3, r7, #5
 8008708:	33ff      	adds	r3, #255	; 0xff
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	b29c      	uxth	r4, r3
 800870e:	183b      	adds	r3, r7, r0
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	0023      	movs	r3, r4
 8008716:	f000 ff7b 	bl	8009610 <USB_WritePMA>
            ep->xfer_buff += len;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	695a      	ldr	r2, [r3, #20]
 800871e:	1d7b      	adds	r3, r7, #5
 8008720:	33ff      	adds	r3, #255	; 0xff
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	18d2      	adds	r2, r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6a1a      	ldr	r2, [r3, #32]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	429a      	cmp	r2, r3
 8008734:	d908      	bls.n	8008748 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6a1a      	ldr	r2, [r3, #32]
 800873a:	1d7b      	adds	r3, r7, #5
 800873c:	33ff      	adds	r3, #255	; 0xff
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	621a      	str	r2, [r3, #32]
 8008746:	e007      	b.n	8008758 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	1d7a      	adds	r2, r7, #5
 800874e:	32ff      	adds	r2, #255	; 0xff
 8008750:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	643b      	str	r3, [r7, #64]	; 0x40
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d166      	bne.n	8008832 <USB_EPStartXfer+0x60a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2250      	movs	r2, #80	; 0x50
 800876c:	5a9b      	ldrh	r3, [r3, r2]
 800876e:	b29b      	uxth	r3, r3
 8008770:	001a      	movs	r2, r3
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	189b      	adds	r3, r3, r2
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	00da      	lsls	r2, r3, #3
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	18d3      	adds	r3, r2, r3
 8008782:	4a69      	ldr	r2, [pc, #420]	; (8008928 <USB_EPStartXfer+0x700>)
 8008784:	4694      	mov	ip, r2
 8008786:	4463      	add	r3, ip
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
 800878a:	1d7b      	adds	r3, r7, #5
 800878c:	33ff      	adds	r3, #255	; 0xff
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d110      	bne.n	80087b6 <USB_EPStartXfer+0x58e>
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	4a61      	ldr	r2, [pc, #388]	; (8008920 <USB_EPStartXfer+0x6f8>)
 800879c:	4013      	ands	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	801a      	strh	r2, [r3, #0]
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4a5e      	ldr	r2, [pc, #376]	; (8008924 <USB_EPStartXfer+0x6fc>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e058      	b.n	8008868 <USB_EPStartXfer+0x640>
 80087b6:	1d7b      	adds	r3, r7, #5
 80087b8:	33ff      	adds	r3, #255	; 0xff
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b3e      	cmp	r3, #62	; 0x3e
 80087be:	d81a      	bhi.n	80087f6 <USB_EPStartXfer+0x5ce>
 80087c0:	1d7b      	adds	r3, r7, #5
 80087c2:	33ff      	adds	r3, #255	; 0xff
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	21f4      	movs	r1, #244	; 0xf4
 80087ca:	187a      	adds	r2, r7, r1
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	1d7b      	adds	r3, r7, #5
 80087d0:	33ff      	adds	r3, #255	; 0xff
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2201      	movs	r2, #1
 80087d6:	4013      	ands	r3, r2
 80087d8:	d004      	beq.n	80087e4 <USB_EPStartXfer+0x5bc>
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3301      	adds	r3, #1
 80087e0:	187a      	adds	r2, r7, r1
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	23f4      	movs	r3, #244	; 0xf4
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	029b      	lsls	r3, r3, #10
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	e038      	b.n	8008868 <USB_EPStartXfer+0x640>
 80087f6:	1d7b      	adds	r3, r7, #5
 80087f8:	33ff      	adds	r3, #255	; 0xff
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	21f4      	movs	r1, #244	; 0xf4
 8008800:	187a      	adds	r2, r7, r1
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	1d7b      	adds	r3, r7, #5
 8008806:	33ff      	adds	r3, #255	; 0xff
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	221f      	movs	r2, #31
 800880c:	4013      	ands	r3, r2
 800880e:	d104      	bne.n	800881a <USB_EPStartXfer+0x5f2>
 8008810:	187b      	adds	r3, r7, r1
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3b01      	subs	r3, #1
 8008816:	187a      	adds	r2, r7, r1
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	23f4      	movs	r3, #244	; 0xf4
 800881c:	18fb      	adds	r3, r7, r3
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29b      	uxth	r3, r3
 8008826:	4a3f      	ldr	r2, [pc, #252]	; (8008924 <USB_EPStartXfer+0x6fc>)
 8008828:	4313      	orrs	r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	801a      	strh	r2, [r3, #0]
 8008830:	e01a      	b.n	8008868 <USB_EPStartXfer+0x640>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d116      	bne.n	8008868 <USB_EPStartXfer+0x640>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2250      	movs	r2, #80	; 0x50
 800883e:	5a9b      	ldrh	r3, [r3, r2]
 8008840:	b29b      	uxth	r3, r3
 8008842:	001a      	movs	r2, r3
 8008844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008846:	189b      	adds	r3, r3, r2
 8008848:	643b      	str	r3, [r7, #64]	; 0x40
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	00da      	lsls	r2, r3, #3
 8008850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008852:	18d3      	adds	r3, r2, r3
 8008854:	4a34      	ldr	r2, [pc, #208]	; (8008928 <USB_EPStartXfer+0x700>)
 8008856:	4694      	mov	ip, r2
 8008858:	4463      	add	r3, ip
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800885c:	1d7b      	adds	r3, r7, #5
 800885e:	33ff      	adds	r3, #255	; 0xff
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	b29a      	uxth	r2, r3
 8008864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008868:	2076      	movs	r0, #118	; 0x76
 800886a:	183b      	adds	r3, r7, r0
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	8952      	ldrh	r2, [r2, #10]
 8008870:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6959      	ldr	r1, [r3, #20]
 8008876:	1d7b      	adds	r3, r7, #5
 8008878:	33ff      	adds	r3, #255	; 0xff
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	b29c      	uxth	r4, r3
 800887e:	183b      	adds	r3, r7, r0
 8008880:	881a      	ldrh	r2, [r3, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	0023      	movs	r3, r4
 8008886:	f000 fec3 	bl	8009610 <USB_WritePMA>
 800888a:	e1a2      	b.n	8008bd2 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	1d7a      	adds	r2, r7, #5
 8008892:	32ff      	adds	r2, #255	; 0xff
 8008894:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	18d3      	adds	r3, r2, r3
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	2062      	movs	r0, #98	; 0x62
 80088a6:	183b      	adds	r3, r7, r0
 80088a8:	4920      	ldr	r1, [pc, #128]	; (800892c <USB_EPStartXfer+0x704>)
 80088aa:	400a      	ands	r2, r1
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	18d3      	adds	r3, r2, r3
 80088b8:	183a      	adds	r2, r7, r0
 80088ba:	8812      	ldrh	r2, [r2, #0]
 80088bc:	491c      	ldr	r1, [pc, #112]	; (8008930 <USB_EPStartXfer+0x708>)
 80088be:	430a      	orrs	r2, r1
 80088c0:	b292      	uxth	r2, r2
 80088c2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2250      	movs	r2, #80	; 0x50
 80088cc:	5a9b      	ldrh	r3, [r3, r2]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	001a      	movs	r2, r3
 80088d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d4:	189b      	adds	r3, r3, r2
 80088d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	00da      	lsls	r2, r3, #3
 80088de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e0:	18d3      	adds	r3, r2, r3
 80088e2:	4a0e      	ldr	r2, [pc, #56]	; (800891c <USB_EPStartXfer+0x6f4>)
 80088e4:	4694      	mov	ip, r2
 80088e6:	4463      	add	r3, ip
 80088e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80088ea:	1d7b      	adds	r3, r7, #5
 80088ec:	33ff      	adds	r3, #255	; 0xff
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088f6:	2076      	movs	r0, #118	; 0x76
 80088f8:	183b      	adds	r3, r7, r0
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	8912      	ldrh	r2, [r2, #8]
 80088fe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	6959      	ldr	r1, [r3, #20]
 8008904:	1d7b      	adds	r3, r7, #5
 8008906:	33ff      	adds	r3, #255	; 0xff
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	b29c      	uxth	r4, r3
 800890c:	183b      	adds	r3, r7, r0
 800890e:	881a      	ldrh	r2, [r3, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	0023      	movs	r3, r4
 8008914:	f000 fe7c 	bl	8009610 <USB_WritePMA>
 8008918:	e15b      	b.n	8008bd2 <USB_EPStartXfer+0x9aa>
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	00000402 	.word	0x00000402
 8008920:	ffff83ff 	.word	0xffff83ff
 8008924:	ffff8000 	.word	0xffff8000
 8008928:	00000406 	.word	0x00000406
 800892c:	ffff8e8f 	.word	0xffff8e8f
 8008930:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	1d7b      	adds	r3, r7, #5
 800893a:	33ff      	adds	r3, #255	; 0xff
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	1ad2      	subs	r2, r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	001a      	movs	r2, r3
 8008954:	2340      	movs	r3, #64	; 0x40
 8008956:	4013      	ands	r3, r2
 8008958:	d100      	bne.n	800895c <USB_EPStartXfer+0x734>
 800895a:	e099      	b.n	8008a90 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	673b      	str	r3, [r7, #112]	; 0x70
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d166      	bne.n	8008a36 <USB_EPStartXfer+0x80e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	66bb      	str	r3, [r7, #104]	; 0x68
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2250      	movs	r2, #80	; 0x50
 8008970:	5a9b      	ldrh	r3, [r3, r2]
 8008972:	b29b      	uxth	r3, r3
 8008974:	001a      	movs	r2, r3
 8008976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008978:	189b      	adds	r3, r3, r2
 800897a:	66bb      	str	r3, [r7, #104]	; 0x68
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	00da      	lsls	r2, r3, #3
 8008982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008984:	18d3      	adds	r3, r2, r3
 8008986:	4ad0      	ldr	r2, [pc, #832]	; (8008cc8 <USB_EPStartXfer+0xaa0>)
 8008988:	4694      	mov	ip, r2
 800898a:	4463      	add	r3, ip
 800898c:	667b      	str	r3, [r7, #100]	; 0x64
 800898e:	1d7b      	adds	r3, r7, #5
 8008990:	33ff      	adds	r3, #255	; 0xff
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d110      	bne.n	80089ba <USB_EPStartXfer+0x792>
 8008998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	4acb      	ldr	r2, [pc, #812]	; (8008ccc <USB_EPStartXfer+0xaa4>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4ac8      	ldr	r2, [pc, #800]	; (8008cd0 <USB_EPStartXfer+0xaa8>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	e058      	b.n	8008a6c <USB_EPStartXfer+0x844>
 80089ba:	1d7b      	adds	r3, r7, #5
 80089bc:	33ff      	adds	r3, #255	; 0xff
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b3e      	cmp	r3, #62	; 0x3e
 80089c2:	d81a      	bhi.n	80089fa <USB_EPStartXfer+0x7d2>
 80089c4:	1d7b      	adds	r3, r7, #5
 80089c6:	33ff      	adds	r3, #255	; 0xff
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	21f0      	movs	r1, #240	; 0xf0
 80089ce:	187a      	adds	r2, r7, r1
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	1d7b      	adds	r3, r7, #5
 80089d4:	33ff      	adds	r3, #255	; 0xff
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2201      	movs	r2, #1
 80089da:	4013      	ands	r3, r2
 80089dc:	d004      	beq.n	80089e8 <USB_EPStartXfer+0x7c0>
 80089de:	187b      	adds	r3, r7, r1
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	187a      	adds	r2, r7, r1
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	23f0      	movs	r3, #240	; 0xf0
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	029b      	lsls	r3, r3, #10
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e038      	b.n	8008a6c <USB_EPStartXfer+0x844>
 80089fa:	1d7b      	adds	r3, r7, #5
 80089fc:	33ff      	adds	r3, #255	; 0xff
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	21f0      	movs	r1, #240	; 0xf0
 8008a04:	187a      	adds	r2, r7, r1
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	1d7b      	adds	r3, r7, #5
 8008a0a:	33ff      	adds	r3, #255	; 0xff
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	221f      	movs	r2, #31
 8008a10:	4013      	ands	r3, r2
 8008a12:	d104      	bne.n	8008a1e <USB_EPStartXfer+0x7f6>
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	187a      	adds	r2, r7, r1
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	23f0      	movs	r3, #240	; 0xf0
 8008a20:	18fb      	adds	r3, r7, r3
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	029b      	lsls	r3, r3, #10
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4aa9      	ldr	r2, [pc, #676]	; (8008cd0 <USB_EPStartXfer+0xaa8>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e01a      	b.n	8008a6c <USB_EPStartXfer+0x844>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d116      	bne.n	8008a6c <USB_EPStartXfer+0x844>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2250      	movs	r2, #80	; 0x50
 8008a42:	5a9b      	ldrh	r3, [r3, r2]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	001a      	movs	r2, r3
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	00da      	lsls	r2, r3, #3
 8008a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a56:	18d3      	adds	r3, r2, r3
 8008a58:	4a9b      	ldr	r2, [pc, #620]	; (8008cc8 <USB_EPStartXfer+0xaa0>)
 8008a5a:	4694      	mov	ip, r2
 8008a5c:	4463      	add	r3, ip
 8008a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a60:	1d7b      	adds	r3, r7, #5
 8008a62:	33ff      	adds	r3, #255	; 0xff
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a6c:	2076      	movs	r0, #118	; 0x76
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	8952      	ldrh	r2, [r2, #10]
 8008a74:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6959      	ldr	r1, [r3, #20]
 8008a7a:	1d7b      	adds	r3, r7, #5
 8008a7c:	33ff      	adds	r3, #255	; 0xff
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	b29c      	uxth	r4, r3
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	881a      	ldrh	r2, [r3, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	0023      	movs	r3, r4
 8008a8a:	f000 fdc1 	bl	8009610 <USB_WritePMA>
 8008a8e:	e0a0      	b.n	8008bd2 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d166      	bne.n	8008b66 <USB_EPStartXfer+0x93e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2250      	movs	r2, #80	; 0x50
 8008aa0:	5a9b      	ldrh	r3, [r3, r2]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	001a      	movs	r2, r3
 8008aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aa8:	189b      	adds	r3, r3, r2
 8008aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	00da      	lsls	r2, r3, #3
 8008ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ab4:	18d3      	adds	r3, r2, r3
 8008ab6:	4a87      	ldr	r2, [pc, #540]	; (8008cd4 <USB_EPStartXfer+0xaac>)
 8008ab8:	4694      	mov	ip, r2
 8008aba:	4463      	add	r3, ip
 8008abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008abe:	1d7b      	adds	r3, r7, #5
 8008ac0:	33ff      	adds	r3, #255	; 0xff
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d110      	bne.n	8008aea <USB_EPStartXfer+0x8c2>
 8008ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4a7f      	ldr	r2, [pc, #508]	; (8008ccc <USB_EPStartXfer+0xaa4>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	4a7c      	ldr	r2, [pc, #496]	; (8008cd0 <USB_EPStartXfer+0xaa8>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae6:	801a      	strh	r2, [r3, #0]
 8008ae8:	e062      	b.n	8008bb0 <USB_EPStartXfer+0x988>
 8008aea:	1d7b      	adds	r3, r7, #5
 8008aec:	33ff      	adds	r3, #255	; 0xff
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b3e      	cmp	r3, #62	; 0x3e
 8008af2:	d81a      	bhi.n	8008b2a <USB_EPStartXfer+0x902>
 8008af4:	1d7b      	adds	r3, r7, #5
 8008af6:	33ff      	adds	r3, #255	; 0xff
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	21ec      	movs	r1, #236	; 0xec
 8008afe:	187a      	adds	r2, r7, r1
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	1d7b      	adds	r3, r7, #5
 8008b04:	33ff      	adds	r3, #255	; 0xff
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <USB_EPStartXfer+0x8f0>
 8008b0e:	187b      	adds	r3, r7, r1
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	187a      	adds	r2, r7, r1
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	23ec      	movs	r3, #236	; 0xec
 8008b1a:	18fb      	adds	r3, r7, r3
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	029b      	lsls	r3, r3, #10
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e042      	b.n	8008bb0 <USB_EPStartXfer+0x988>
 8008b2a:	1d7b      	adds	r3, r7, #5
 8008b2c:	33ff      	adds	r3, #255	; 0xff
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	21ec      	movs	r1, #236	; 0xec
 8008b34:	187a      	adds	r2, r7, r1
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	1d7b      	adds	r3, r7, #5
 8008b3a:	33ff      	adds	r3, #255	; 0xff
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	221f      	movs	r2, #31
 8008b40:	4013      	ands	r3, r2
 8008b42:	d104      	bne.n	8008b4e <USB_EPStartXfer+0x926>
 8008b44:	187b      	adds	r3, r7, r1
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	187a      	adds	r2, r7, r1
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	23ec      	movs	r3, #236	; 0xec
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4a5d      	ldr	r2, [pc, #372]	; (8008cd0 <USB_EPStartXfer+0xaa8>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e024      	b.n	8008bb0 <USB_EPStartXfer+0x988>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d120      	bne.n	8008bb0 <USB_EPStartXfer+0x988>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2184      	movs	r1, #132	; 0x84
 8008b72:	187a      	adds	r2, r7, r1
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2250      	movs	r2, #80	; 0x50
 8008b7a:	5a9b      	ldrh	r3, [r3, r2]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	001a      	movs	r2, r3
 8008b80:	187b      	adds	r3, r7, r1
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	187a      	adds	r2, r7, r1
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	00da      	lsls	r2, r3, #3
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	18d3      	adds	r3, r2, r3
 8008b96:	4a4f      	ldr	r2, [pc, #316]	; (8008cd4 <USB_EPStartXfer+0xaac>)
 8008b98:	4694      	mov	ip, r2
 8008b9a:	4463      	add	r3, ip
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	187a      	adds	r2, r7, r1
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	1d7b      	adds	r3, r7, #5
 8008ba4:	33ff      	adds	r3, #255	; 0xff
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	187b      	adds	r3, r7, r1
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bb0:	2076      	movs	r0, #118	; 0x76
 8008bb2:	183b      	adds	r3, r7, r0
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	8912      	ldrh	r2, [r2, #8]
 8008bb8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6959      	ldr	r1, [r3, #20]
 8008bbe:	1d7b      	adds	r3, r7, #5
 8008bc0:	33ff      	adds	r3, #255	; 0xff
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	b29c      	uxth	r4, r3
 8008bc6:	183b      	adds	r3, r7, r0
 8008bc8:	881a      	ldrh	r2, [r3, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	0023      	movs	r3, r4
 8008bce:	f000 fd1f 	bl	8009610 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	18d3      	adds	r3, r2, r3
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	200a      	movs	r0, #10
 8008be2:	183b      	adds	r3, r7, r0
 8008be4:	493c      	ldr	r1, [pc, #240]	; (8008cd8 <USB_EPStartXfer+0xab0>)
 8008be6:	400a      	ands	r2, r1
 8008be8:	801a      	strh	r2, [r3, #0]
 8008bea:	183b      	adds	r3, r7, r0
 8008bec:	183a      	adds	r2, r7, r0
 8008bee:	8812      	ldrh	r2, [r2, #0]
 8008bf0:	2110      	movs	r1, #16
 8008bf2:	404a      	eors	r2, r1
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	183a      	adds	r2, r7, r0
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	2120      	movs	r1, #32
 8008bfe:	404a      	eors	r2, r1
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	18d3      	adds	r3, r2, r3
 8008c0c:	183a      	adds	r2, r7, r0
 8008c0e:	8812      	ldrh	r2, [r2, #0]
 8008c10:	4932      	ldr	r1, [pc, #200]	; (8008cdc <USB_EPStartXfer+0xab4>)
 8008c12:	430a      	orrs	r2, r1
 8008c14:	b292      	uxth	r2, r2
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	f000 fbaf 	bl	800937a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	7b1b      	ldrb	r3, [r3, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d000      	beq.n	8008c26 <USB_EPStartXfer+0x9fe>
 8008c24:	e09e      	b.n	8008d64 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d90d      	bls.n	8008c4e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	1d7a      	adds	r2, r7, #5
 8008c38:	32ff      	adds	r2, #255	; 0xff
 8008c3a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	1d7b      	adds	r3, r7, #5
 8008c42:	33ff      	adds	r3, #255	; 0xff
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	619a      	str	r2, [r3, #24]
 8008c4c:	e007      	b.n	8008c5e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	1d7a      	adds	r2, r7, #5
 8008c54:	32ff      	adds	r2, #255	; 0xff
 8008c56:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2190      	movs	r1, #144	; 0x90
 8008c62:	187a      	adds	r2, r7, r1
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2250      	movs	r2, #80	; 0x50
 8008c6a:	5a9b      	ldrh	r3, [r3, r2]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	001a      	movs	r2, r3
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	189b      	adds	r3, r3, r2
 8008c76:	187a      	adds	r2, r7, r1
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	00da      	lsls	r2, r3, #3
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <USB_EPStartXfer+0xaa0>)
 8008c88:	4694      	mov	ip, r2
 8008c8a:	4463      	add	r3, ip
 8008c8c:	218c      	movs	r1, #140	; 0x8c
 8008c8e:	187a      	adds	r2, r7, r1
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	1d7b      	adds	r3, r7, #5
 8008c94:	33ff      	adds	r3, #255	; 0xff
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d121      	bne.n	8008ce0 <USB_EPStartXfer+0xab8>
 8008c9c:	187b      	adds	r3, r7, r1
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4a09      	ldr	r2, [pc, #36]	; (8008ccc <USB_EPStartXfer+0xaa4>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	187b      	adds	r3, r7, r1
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4a05      	ldr	r2, [pc, #20]	; (8008cd0 <USB_EPStartXfer+0xaa8>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	e334      	b.n	8009330 <USB_EPStartXfer+0x1108>
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	00000406 	.word	0x00000406
 8008ccc:	ffff83ff 	.word	0xffff83ff
 8008cd0:	ffff8000 	.word	0xffff8000
 8008cd4:	00000402 	.word	0x00000402
 8008cd8:	ffff8fbf 	.word	0xffff8fbf
 8008cdc:	ffff8080 	.word	0xffff8080
 8008ce0:	1d7b      	adds	r3, r7, #5
 8008ce2:	33ff      	adds	r3, #255	; 0xff
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce8:	d81c      	bhi.n	8008d24 <USB_EPStartXfer+0xafc>
 8008cea:	1d7b      	adds	r3, r7, #5
 8008cec:	33ff      	adds	r3, #255	; 0xff
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	21e8      	movs	r1, #232	; 0xe8
 8008cf4:	187a      	adds	r2, r7, r1
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	1d7b      	adds	r3, r7, #5
 8008cfa:	33ff      	adds	r3, #255	; 0xff
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4013      	ands	r3, r2
 8008d02:	d004      	beq.n	8008d0e <USB_EPStartXfer+0xae6>
 8008d04:	187b      	adds	r3, r7, r1
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	187a      	adds	r2, r7, r1
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	23e8      	movs	r3, #232	; 0xe8
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	029b      	lsls	r3, r3, #10
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	238c      	movs	r3, #140	; 0x8c
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	801a      	strh	r2, [r3, #0]
 8008d22:	e305      	b.n	8009330 <USB_EPStartXfer+0x1108>
 8008d24:	1d7b      	adds	r3, r7, #5
 8008d26:	33ff      	adds	r3, #255	; 0xff
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	095b      	lsrs	r3, r3, #5
 8008d2c:	21e8      	movs	r1, #232	; 0xe8
 8008d2e:	187a      	adds	r2, r7, r1
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	1d7b      	adds	r3, r7, #5
 8008d34:	33ff      	adds	r3, #255	; 0xff
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	221f      	movs	r2, #31
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d104      	bne.n	8008d48 <USB_EPStartXfer+0xb20>
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	187a      	adds	r2, r7, r1
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	23e8      	movs	r3, #232	; 0xe8
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	029b      	lsls	r3, r3, #10
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4aca      	ldr	r2, [pc, #808]	; (8009080 <USB_EPStartXfer+0xe58>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	238c      	movs	r3, #140	; 0x8c
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	e2e5      	b.n	8009330 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	78db      	ldrb	r3, [r3, #3]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d000      	beq.n	8008d6e <USB_EPStartXfer+0xb46>
 8008d6c:	e16f      	b.n	800904e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d16f      	bne.n	8008e56 <USB_EPStartXfer+0xc2e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	21ac      	movs	r1, #172	; 0xac
 8008d7a:	187a      	adds	r2, r7, r1
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2250      	movs	r2, #80	; 0x50
 8008d82:	5a9b      	ldrh	r3, [r3, r2]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	001a      	movs	r2, r3
 8008d88:	187b      	adds	r3, r7, r1
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	189b      	adds	r3, r3, r2
 8008d8e:	187a      	adds	r2, r7, r1
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	00da      	lsls	r2, r3, #3
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	18d3      	adds	r3, r2, r3
 8008d9e:	4ab9      	ldr	r2, [pc, #740]	; (8009084 <USB_EPStartXfer+0xe5c>)
 8008da0:	4694      	mov	ip, r2
 8008da2:	4463      	add	r3, ip
 8008da4:	21a8      	movs	r1, #168	; 0xa8
 8008da6:	187a      	adds	r2, r7, r1
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d114      	bne.n	8008ddc <USB_EPStartXfer+0xbb4>
 8008db2:	187b      	adds	r3, r7, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4ab3      	ldr	r2, [pc, #716]	; (8009088 <USB_EPStartXfer+0xe60>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	187b      	adds	r3, r7, r1
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	187b      	adds	r3, r7, r1
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4aac      	ldr	r2, [pc, #688]	; (8009080 <USB_EPStartXfer+0xe58>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	187b      	adds	r3, r7, r1
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	e060      	b.n	8008e9e <USB_EPStartXfer+0xc76>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b3e      	cmp	r3, #62	; 0x3e
 8008de2:	d81a      	bhi.n	8008e1a <USB_EPStartXfer+0xbf2>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	21e4      	movs	r1, #228	; 0xe4
 8008dec:	187a      	adds	r2, r7, r1
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2201      	movs	r2, #1
 8008df6:	4013      	ands	r3, r2
 8008df8:	d004      	beq.n	8008e04 <USB_EPStartXfer+0xbdc>
 8008dfa:	187b      	adds	r3, r7, r1
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	187a      	adds	r2, r7, r1
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	23e4      	movs	r3, #228	; 0xe4
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	23a8      	movs	r3, #168	; 0xa8
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	801a      	strh	r2, [r3, #0]
 8008e18:	e041      	b.n	8008e9e <USB_EPStartXfer+0xc76>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	21e4      	movs	r1, #228	; 0xe4
 8008e22:	187a      	adds	r2, r7, r1
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	221f      	movs	r2, #31
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	d104      	bne.n	8008e3a <USB_EPStartXfer+0xc12>
 8008e30:	187b      	adds	r3, r7, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	187a      	adds	r2, r7, r1
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	23e4      	movs	r3, #228	; 0xe4
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	029b      	lsls	r3, r3, #10
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	4a8e      	ldr	r2, [pc, #568]	; (8009080 <USB_EPStartXfer+0xe58>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	23a8      	movs	r3, #168	; 0xa8
 8008e4e:	18fb      	adds	r3, r7, r3
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	e023      	b.n	8008e9e <USB_EPStartXfer+0xc76>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d11f      	bne.n	8008e9e <USB_EPStartXfer+0xc76>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	21b4      	movs	r1, #180	; 0xb4
 8008e62:	187a      	adds	r2, r7, r1
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2250      	movs	r2, #80	; 0x50
 8008e6a:	5a9b      	ldrh	r3, [r3, r2]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	001a      	movs	r2, r3
 8008e70:	187b      	adds	r3, r7, r1
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	189b      	adds	r3, r3, r2
 8008e76:	187a      	adds	r2, r7, r1
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	00da      	lsls	r2, r3, #3
 8008e80:	187b      	adds	r3, r7, r1
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	18d3      	adds	r3, r2, r3
 8008e86:	4a7f      	ldr	r2, [pc, #508]	; (8009084 <USB_EPStartXfer+0xe5c>)
 8008e88:	4694      	mov	ip, r2
 8008e8a:	4463      	add	r3, ip
 8008e8c:	21b0      	movs	r1, #176	; 0xb0
 8008e8e:	187a      	adds	r2, r7, r1
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	22a4      	movs	r2, #164	; 0xa4
 8008ea2:	18ba      	adds	r2, r7, r2
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d16f      	bne.n	8008f8e <USB_EPStartXfer+0xd66>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	219c      	movs	r1, #156	; 0x9c
 8008eb2:	187a      	adds	r2, r7, r1
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2250      	movs	r2, #80	; 0x50
 8008eba:	5a9b      	ldrh	r3, [r3, r2]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	001a      	movs	r2, r3
 8008ec0:	187b      	adds	r3, r7, r1
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	189b      	adds	r3, r3, r2
 8008ec6:	187a      	adds	r2, r7, r1
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	00da      	lsls	r2, r3, #3
 8008ed0:	187b      	adds	r3, r7, r1
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	18d3      	adds	r3, r2, r3
 8008ed6:	4a6d      	ldr	r2, [pc, #436]	; (800908c <USB_EPStartXfer+0xe64>)
 8008ed8:	4694      	mov	ip, r2
 8008eda:	4463      	add	r3, ip
 8008edc:	2198      	movs	r1, #152	; 0x98
 8008ede:	187a      	adds	r2, r7, r1
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d114      	bne.n	8008f14 <USB_EPStartXfer+0xcec>
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	4a65      	ldr	r2, [pc, #404]	; (8009088 <USB_EPStartXfer+0xe60>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	187b      	adds	r3, r7, r1
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	187b      	adds	r3, r7, r1
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	4a5e      	ldr	r2, [pc, #376]	; (8009080 <USB_EPStartXfer+0xe58>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	187b      	adds	r3, r7, r1
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	e05d      	b.n	8008fd0 <USB_EPStartXfer+0xda8>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b3e      	cmp	r3, #62	; 0x3e
 8008f1a:	d81a      	bhi.n	8008f52 <USB_EPStartXfer+0xd2a>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	21e0      	movs	r1, #224	; 0xe0
 8008f24:	187a      	adds	r2, r7, r1
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4013      	ands	r3, r2
 8008f30:	d004      	beq.n	8008f3c <USB_EPStartXfer+0xd14>
 8008f32:	187b      	adds	r3, r7, r1
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3301      	adds	r3, #1
 8008f38:	187a      	adds	r2, r7, r1
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	23e0      	movs	r3, #224	; 0xe0
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	029b      	lsls	r3, r3, #10
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	2398      	movs	r3, #152	; 0x98
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	e03e      	b.n	8008fd0 <USB_EPStartXfer+0xda8>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	21e0      	movs	r1, #224	; 0xe0
 8008f5a:	187a      	adds	r2, r7, r1
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	221f      	movs	r2, #31
 8008f64:	4013      	ands	r3, r2
 8008f66:	d104      	bne.n	8008f72 <USB_EPStartXfer+0xd4a>
 8008f68:	187b      	adds	r3, r7, r1
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	187a      	adds	r2, r7, r1
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	23e0      	movs	r3, #224	; 0xe0
 8008f74:	18fb      	adds	r3, r7, r3
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	029b      	lsls	r3, r3, #10
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4a40      	ldr	r2, [pc, #256]	; (8009080 <USB_EPStartXfer+0xe58>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	2398      	movs	r3, #152	; 0x98
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e020      	b.n	8008fd0 <USB_EPStartXfer+0xda8>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d11c      	bne.n	8008fd0 <USB_EPStartXfer+0xda8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2250      	movs	r2, #80	; 0x50
 8008f9a:	5a9b      	ldrh	r3, [r3, r2]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	001a      	movs	r2, r3
 8008fa0:	21a4      	movs	r1, #164	; 0xa4
 8008fa2:	187b      	adds	r3, r7, r1
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	187a      	adds	r2, r7, r1
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	00da      	lsls	r2, r3, #3
 8008fb2:	187b      	adds	r3, r7, r1
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	18d3      	adds	r3, r2, r3
 8008fb8:	4a34      	ldr	r2, [pc, #208]	; (800908c <USB_EPStartXfer+0xe64>)
 8008fba:	4694      	mov	ip, r2
 8008fbc:	4463      	add	r3, ip
 8008fbe:	21a0      	movs	r1, #160	; 0xa0
 8008fc0:	187a      	adds	r2, r7, r1
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	187b      	adds	r3, r7, r1
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d100      	bne.n	8008fda <USB_EPStartXfer+0xdb2>
 8008fd8:	e1aa      	b.n	8009330 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	18d2      	adds	r2, r2, r3
 8008fe4:	2196      	movs	r1, #150	; 0x96
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	8812      	ldrh	r2, [r2, #0]
 8008fea:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	881a      	ldrh	r2, [r3, #0]
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	01db      	lsls	r3, r3, #7
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d004      	beq.n	8009002 <USB_EPStartXfer+0xdda>
 8008ff8:	187b      	adds	r3, r7, r1
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	2240      	movs	r2, #64	; 0x40
 8008ffe:	4013      	ands	r3, r2
 8009000:	d10d      	bne.n	800901e <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009002:	2196      	movs	r1, #150	; 0x96
 8009004:	187b      	adds	r3, r7, r1
 8009006:	881a      	ldrh	r2, [r3, #0]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	01db      	lsls	r3, r3, #7
 800900c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800900e:	d000      	beq.n	8009012 <USB_EPStartXfer+0xdea>
 8009010:	e18e      	b.n	8009330 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009012:	187b      	adds	r3, r7, r1
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	2240      	movs	r2, #64	; 0x40
 8009018:	4013      	ands	r3, r2
 800901a:	d000      	beq.n	800901e <USB_EPStartXfer+0xdf6>
 800901c:	e188      	b.n	8009330 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	b29a      	uxth	r2, r3
 800902c:	2094      	movs	r0, #148	; 0x94
 800902e:	183b      	adds	r3, r7, r0
 8009030:	4917      	ldr	r1, [pc, #92]	; (8009090 <USB_EPStartXfer+0xe68>)
 8009032:	400a      	ands	r2, r1
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	18d3      	adds	r3, r2, r3
 8009040:	183a      	adds	r2, r7, r0
 8009042:	8812      	ldrh	r2, [r2, #0]
 8009044:	4913      	ldr	r1, [pc, #76]	; (8009094 <USB_EPStartXfer+0xe6c>)
 8009046:	430a      	orrs	r2, r1
 8009048:	b292      	uxth	r2, r2
 800904a:	801a      	strh	r2, [r3, #0]
 800904c:	e170      	b.n	8009330 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	78db      	ldrb	r3, [r3, #3]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d000      	beq.n	8009058 <USB_EPStartXfer+0xe30>
 8009056:	e169      	b.n	800932c <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	429a      	cmp	r2, r3
 8009062:	d919      	bls.n	8009098 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	1d7a      	adds	r2, r7, #5
 800906a:	32ff      	adds	r2, #255	; 0xff
 800906c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	1d7b      	adds	r3, r7, #5
 8009074:	33ff      	adds	r3, #255	; 0xff
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	619a      	str	r2, [r3, #24]
 800907e:	e013      	b.n	80090a8 <USB_EPStartXfer+0xe80>
 8009080:	ffff8000 	.word	0xffff8000
 8009084:	00000402 	.word	0x00000402
 8009088:	ffff83ff 	.word	0xffff83ff
 800908c:	00000406 	.word	0x00000406
 8009090:	ffff8f8f 	.word	0xffff8f8f
 8009094:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	1d7a      	adds	r2, r7, #5
 800909e:	32ff      	adds	r2, #255	; 0xff
 80090a0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d000      	beq.n	80090b2 <USB_EPStartXfer+0xe8a>
 80090b0:	e075      	b.n	800919e <USB_EPStartXfer+0xf76>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	21cc      	movs	r1, #204	; 0xcc
 80090b6:	187a      	adds	r2, r7, r1
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2250      	movs	r2, #80	; 0x50
 80090be:	5a9b      	ldrh	r3, [r3, r2]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	001a      	movs	r2, r3
 80090c4:	187b      	adds	r3, r7, r1
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	189b      	adds	r3, r3, r2
 80090ca:	187a      	adds	r2, r7, r1
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	00da      	lsls	r2, r3, #3
 80090d4:	187b      	adds	r3, r7, r1
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	18d3      	adds	r3, r2, r3
 80090da:	4aaa      	ldr	r2, [pc, #680]	; (8009384 <USB_EPStartXfer+0x115c>)
 80090dc:	4694      	mov	ip, r2
 80090de:	4463      	add	r3, ip
 80090e0:	21c8      	movs	r1, #200	; 0xc8
 80090e2:	187a      	adds	r2, r7, r1
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	1d7b      	adds	r3, r7, #5
 80090e8:	33ff      	adds	r3, #255	; 0xff
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d114      	bne.n	800911a <USB_EPStartXfer+0xef2>
 80090f0:	187b      	adds	r3, r7, r1
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4aa3      	ldr	r2, [pc, #652]	; (8009388 <USB_EPStartXfer+0x1160>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	187b      	adds	r3, r7, r1
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	801a      	strh	r2, [r3, #0]
 8009104:	187b      	adds	r3, r7, r1
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	4a9f      	ldr	r2, [pc, #636]	; (800938c <USB_EPStartXfer+0x1164>)
 800910e:	4313      	orrs	r3, r2
 8009110:	b29a      	uxth	r2, r3
 8009112:	187b      	adds	r3, r7, r1
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	e066      	b.n	80091e8 <USB_EPStartXfer+0xfc0>
 800911a:	1d7b      	adds	r3, r7, #5
 800911c:	33ff      	adds	r3, #255	; 0xff
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b3e      	cmp	r3, #62	; 0x3e
 8009122:	d81c      	bhi.n	800915e <USB_EPStartXfer+0xf36>
 8009124:	1d7b      	adds	r3, r7, #5
 8009126:	33ff      	adds	r3, #255	; 0xff
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	21dc      	movs	r1, #220	; 0xdc
 800912e:	187a      	adds	r2, r7, r1
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	1d7b      	adds	r3, r7, #5
 8009134:	33ff      	adds	r3, #255	; 0xff
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2201      	movs	r2, #1
 800913a:	4013      	ands	r3, r2
 800913c:	d004      	beq.n	8009148 <USB_EPStartXfer+0xf20>
 800913e:	187b      	adds	r3, r7, r1
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	187a      	adds	r2, r7, r1
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	23dc      	movs	r3, #220	; 0xdc
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	b29b      	uxth	r3, r3
 8009150:	029b      	lsls	r3, r3, #10
 8009152:	b29a      	uxth	r2, r3
 8009154:	23c8      	movs	r3, #200	; 0xc8
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	801a      	strh	r2, [r3, #0]
 800915c:	e044      	b.n	80091e8 <USB_EPStartXfer+0xfc0>
 800915e:	1d7b      	adds	r3, r7, #5
 8009160:	33ff      	adds	r3, #255	; 0xff
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	21dc      	movs	r1, #220	; 0xdc
 8009168:	187a      	adds	r2, r7, r1
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	1d7b      	adds	r3, r7, #5
 800916e:	33ff      	adds	r3, #255	; 0xff
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	221f      	movs	r2, #31
 8009174:	4013      	ands	r3, r2
 8009176:	d104      	bne.n	8009182 <USB_EPStartXfer+0xf5a>
 8009178:	187b      	adds	r3, r7, r1
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3b01      	subs	r3, #1
 800917e:	187a      	adds	r2, r7, r1
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	23dc      	movs	r3, #220	; 0xdc
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	029b      	lsls	r3, r3, #10
 800918c:	b29b      	uxth	r3, r3
 800918e:	4a7f      	ldr	r2, [pc, #508]	; (800938c <USB_EPStartXfer+0x1164>)
 8009190:	4313      	orrs	r3, r2
 8009192:	b29a      	uxth	r2, r3
 8009194:	23c8      	movs	r3, #200	; 0xc8
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e024      	b.n	80091e8 <USB_EPStartXfer+0xfc0>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d120      	bne.n	80091e8 <USB_EPStartXfer+0xfc0>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	21d4      	movs	r1, #212	; 0xd4
 80091aa:	187a      	adds	r2, r7, r1
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2250      	movs	r2, #80	; 0x50
 80091b2:	5a9b      	ldrh	r3, [r3, r2]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	001a      	movs	r2, r3
 80091b8:	187b      	adds	r3, r7, r1
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	189b      	adds	r3, r3, r2
 80091be:	187a      	adds	r2, r7, r1
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	00da      	lsls	r2, r3, #3
 80091c8:	187b      	adds	r3, r7, r1
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	18d3      	adds	r3, r2, r3
 80091ce:	4a6d      	ldr	r2, [pc, #436]	; (8009384 <USB_EPStartXfer+0x115c>)
 80091d0:	4694      	mov	ip, r2
 80091d2:	4463      	add	r3, ip
 80091d4:	21d0      	movs	r1, #208	; 0xd0
 80091d6:	187a      	adds	r2, r7, r1
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	1d7b      	adds	r3, r7, #5
 80091dc:	33ff      	adds	r3, #255	; 0xff
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	187b      	adds	r3, r7, r1
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	22c4      	movs	r2, #196	; 0xc4
 80091ec:	18ba      	adds	r2, r7, r2
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d000      	beq.n	80091fa <USB_EPStartXfer+0xfd2>
 80091f8:	e075      	b.n	80092e6 <USB_EPStartXfer+0x10be>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	21bc      	movs	r1, #188	; 0xbc
 80091fe:	187a      	adds	r2, r7, r1
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2250      	movs	r2, #80	; 0x50
 8009206:	5a9b      	ldrh	r3, [r3, r2]
 8009208:	b29b      	uxth	r3, r3
 800920a:	001a      	movs	r2, r3
 800920c:	187b      	adds	r3, r7, r1
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	189b      	adds	r3, r3, r2
 8009212:	187a      	adds	r2, r7, r1
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	00da      	lsls	r2, r3, #3
 800921c:	187b      	adds	r3, r7, r1
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	18d3      	adds	r3, r2, r3
 8009222:	4a5b      	ldr	r2, [pc, #364]	; (8009390 <USB_EPStartXfer+0x1168>)
 8009224:	4694      	mov	ip, r2
 8009226:	4463      	add	r3, ip
 8009228:	21b8      	movs	r1, #184	; 0xb8
 800922a:	187a      	adds	r2, r7, r1
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	1d7b      	adds	r3, r7, #5
 8009230:	33ff      	adds	r3, #255	; 0xff
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d114      	bne.n	8009262 <USB_EPStartXfer+0x103a>
 8009238:	187b      	adds	r3, r7, r1
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	4a51      	ldr	r2, [pc, #324]	; (8009388 <USB_EPStartXfer+0x1160>)
 8009242:	4013      	ands	r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	187b      	adds	r3, r7, r1
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	187b      	adds	r3, r7, r1
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	4a4d      	ldr	r2, [pc, #308]	; (800938c <USB_EPStartXfer+0x1164>)
 8009256:	4313      	orrs	r3, r2
 8009258:	b29a      	uxth	r2, r3
 800925a:	187b      	adds	r3, r7, r1
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	801a      	strh	r2, [r3, #0]
 8009260:	e066      	b.n	8009330 <USB_EPStartXfer+0x1108>
 8009262:	1d7b      	adds	r3, r7, #5
 8009264:	33ff      	adds	r3, #255	; 0xff
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b3e      	cmp	r3, #62	; 0x3e
 800926a:	d81c      	bhi.n	80092a6 <USB_EPStartXfer+0x107e>
 800926c:	1d7b      	adds	r3, r7, #5
 800926e:	33ff      	adds	r3, #255	; 0xff
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	21d8      	movs	r1, #216	; 0xd8
 8009276:	187a      	adds	r2, r7, r1
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	1d7b      	adds	r3, r7, #5
 800927c:	33ff      	adds	r3, #255	; 0xff
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	4013      	ands	r3, r2
 8009284:	d004      	beq.n	8009290 <USB_EPStartXfer+0x1068>
 8009286:	187b      	adds	r3, r7, r1
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	187a      	adds	r2, r7, r1
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	23d8      	movs	r3, #216	; 0xd8
 8009292:	18fb      	adds	r3, r7, r3
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	029b      	lsls	r3, r3, #10
 800929a:	b29a      	uxth	r2, r3
 800929c:	23b8      	movs	r3, #184	; 0xb8
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	801a      	strh	r2, [r3, #0]
 80092a4:	e044      	b.n	8009330 <USB_EPStartXfer+0x1108>
 80092a6:	1d7b      	adds	r3, r7, #5
 80092a8:	33ff      	adds	r3, #255	; 0xff
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	21d8      	movs	r1, #216	; 0xd8
 80092b0:	187a      	adds	r2, r7, r1
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	1d7b      	adds	r3, r7, #5
 80092b6:	33ff      	adds	r3, #255	; 0xff
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	221f      	movs	r2, #31
 80092bc:	4013      	ands	r3, r2
 80092be:	d104      	bne.n	80092ca <USB_EPStartXfer+0x10a2>
 80092c0:	187b      	adds	r3, r7, r1
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	187a      	adds	r2, r7, r1
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	23d8      	movs	r3, #216	; 0xd8
 80092cc:	18fb      	adds	r3, r7, r3
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	029b      	lsls	r3, r3, #10
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	4a2d      	ldr	r2, [pc, #180]	; (800938c <USB_EPStartXfer+0x1164>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	23b8      	movs	r3, #184	; 0xb8
 80092de:	18fb      	adds	r3, r7, r3
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	e024      	b.n	8009330 <USB_EPStartXfer+0x1108>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	785b      	ldrb	r3, [r3, #1]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d120      	bne.n	8009330 <USB_EPStartXfer+0x1108>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2250      	movs	r2, #80	; 0x50
 80092f2:	5a9b      	ldrh	r3, [r3, r2]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	001a      	movs	r2, r3
 80092f8:	21c4      	movs	r1, #196	; 0xc4
 80092fa:	187b      	adds	r3, r7, r1
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	187a      	adds	r2, r7, r1
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	00da      	lsls	r2, r3, #3
 800930a:	187b      	adds	r3, r7, r1
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	18d3      	adds	r3, r2, r3
 8009310:	4a1f      	ldr	r2, [pc, #124]	; (8009390 <USB_EPStartXfer+0x1168>)
 8009312:	4694      	mov	ip, r2
 8009314:	4463      	add	r3, ip
 8009316:	21c0      	movs	r1, #192	; 0xc0
 8009318:	187a      	adds	r2, r7, r1
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	1d7b      	adds	r3, r7, #5
 800931e:	33ff      	adds	r3, #255	; 0xff
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	b29a      	uxth	r2, r3
 8009324:	187b      	adds	r3, r7, r1
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e001      	b.n	8009330 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e025      	b.n	800937c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	18d3      	adds	r3, r2, r3
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	b29a      	uxth	r2, r3
 800933e:	208a      	movs	r0, #138	; 0x8a
 8009340:	183b      	adds	r3, r7, r0
 8009342:	4914      	ldr	r1, [pc, #80]	; (8009394 <USB_EPStartXfer+0x116c>)
 8009344:	400a      	ands	r2, r1
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	183b      	adds	r3, r7, r0
 800934a:	183a      	adds	r2, r7, r0
 800934c:	8812      	ldrh	r2, [r2, #0]
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	0149      	lsls	r1, r1, #5
 8009352:	404a      	eors	r2, r1
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	183b      	adds	r3, r7, r0
 8009358:	183a      	adds	r2, r7, r0
 800935a:	8812      	ldrh	r2, [r2, #0]
 800935c:	2180      	movs	r1, #128	; 0x80
 800935e:	0189      	lsls	r1, r1, #6
 8009360:	404a      	eors	r2, r1
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	18d3      	adds	r3, r2, r3
 800936e:	183a      	adds	r2, r7, r0
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	4909      	ldr	r1, [pc, #36]	; (8009398 <USB_EPStartXfer+0x1170>)
 8009374:	430a      	orrs	r2, r1
 8009376:	b292      	uxth	r2, r2
 8009378:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	0018      	movs	r0, r3
 800937e:	46bd      	mov	sp, r7
 8009380:	b043      	add	sp, #268	; 0x10c
 8009382:	bd90      	pop	{r4, r7, pc}
 8009384:	00000402 	.word	0x00000402
 8009388:	ffff83ff 	.word	0xffff83ff
 800938c:	ffff8000 	.word	0xffff8000
 8009390:	00000406 	.word	0x00000406
 8009394:	ffffbf8f 	.word	0xffffbf8f
 8009398:	ffff8080 	.word	0xffff8080

0800939c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01d      	beq.n	80093ea <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	18d3      	adds	r3, r2, r3
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	200c      	movs	r0, #12
 80093be:	183b      	adds	r3, r7, r0
 80093c0:	491b      	ldr	r1, [pc, #108]	; (8009430 <USB_EPSetStall+0x94>)
 80093c2:	400a      	ands	r2, r1
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	183b      	adds	r3, r7, r0
 80093c8:	183a      	adds	r2, r7, r0
 80093ca:	8812      	ldrh	r2, [r2, #0]
 80093cc:	2110      	movs	r1, #16
 80093ce:	404a      	eors	r2, r1
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	183a      	adds	r2, r7, r0
 80093de:	8812      	ldrh	r2, [r2, #0]
 80093e0:	4914      	ldr	r1, [pc, #80]	; (8009434 <USB_EPSetStall+0x98>)
 80093e2:	430a      	orrs	r2, r1
 80093e4:	b292      	uxth	r2, r2
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	e01d      	b.n	8009426 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	18d3      	adds	r3, r2, r3
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	200e      	movs	r0, #14
 80093fa:	183b      	adds	r3, r7, r0
 80093fc:	490e      	ldr	r1, [pc, #56]	; (8009438 <USB_EPSetStall+0x9c>)
 80093fe:	400a      	ands	r2, r1
 8009400:	801a      	strh	r2, [r3, #0]
 8009402:	183b      	adds	r3, r7, r0
 8009404:	183a      	adds	r2, r7, r0
 8009406:	8812      	ldrh	r2, [r2, #0]
 8009408:	2180      	movs	r1, #128	; 0x80
 800940a:	0149      	lsls	r1, r1, #5
 800940c:	404a      	eors	r2, r1
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	18d3      	adds	r3, r2, r3
 800941a:	183a      	adds	r2, r7, r0
 800941c:	8812      	ldrh	r2, [r2, #0]
 800941e:	4905      	ldr	r1, [pc, #20]	; (8009434 <USB_EPSetStall+0x98>)
 8009420:	430a      	orrs	r2, r1
 8009422:	b292      	uxth	r2, r2
 8009424:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	0018      	movs	r0, r3
 800942a:	46bd      	mov	sp, r7
 800942c:	b004      	add	sp, #16
 800942e:	bd80      	pop	{r7, pc}
 8009430:	ffff8fbf 	.word	0xffff8fbf
 8009434:	ffff8080 	.word	0xffff8080
 8009438:	ffffbf8f 	.word	0xffffbf8f

0800943c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	7b1b      	ldrb	r3, [r3, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d000      	beq.n	8009450 <USB_EPClearStall+0x14>
 800944e:	e095      	b.n	800957c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d046      	beq.n	80094e6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	18d2      	adds	r2, r2, r3
 8009462:	2110      	movs	r1, #16
 8009464:	187b      	adds	r3, r7, r1
 8009466:	8812      	ldrh	r2, [r2, #0]
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	187b      	adds	r3, r7, r1
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	2240      	movs	r2, #64	; 0x40
 8009470:	4013      	ands	r3, r2
 8009472:	d016      	beq.n	80094a2 <USB_EPClearStall+0x66>
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	18d3      	adds	r3, r2, r3
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29a      	uxth	r2, r3
 8009482:	200e      	movs	r0, #14
 8009484:	183b      	adds	r3, r7, r0
 8009486:	4940      	ldr	r1, [pc, #256]	; (8009588 <USB_EPClearStall+0x14c>)
 8009488:	400a      	ands	r2, r1
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	18d3      	adds	r3, r2, r3
 8009496:	183a      	adds	r2, r7, r0
 8009498:	8812      	ldrh	r2, [r2, #0]
 800949a:	493c      	ldr	r1, [pc, #240]	; (800958c <USB_EPClearStall+0x150>)
 800949c:	430a      	orrs	r2, r1
 800949e:	b292      	uxth	r2, r2
 80094a0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	78db      	ldrb	r3, [r3, #3]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d068      	beq.n	800957c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	18d3      	adds	r3, r2, r3
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	200c      	movs	r0, #12
 80094ba:	183b      	adds	r3, r7, r0
 80094bc:	4934      	ldr	r1, [pc, #208]	; (8009590 <USB_EPClearStall+0x154>)
 80094be:	400a      	ands	r2, r1
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	183b      	adds	r3, r7, r0
 80094c4:	183a      	adds	r2, r7, r0
 80094c6:	8812      	ldrh	r2, [r2, #0]
 80094c8:	2120      	movs	r1, #32
 80094ca:	404a      	eors	r2, r1
 80094cc:	801a      	strh	r2, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	18d3      	adds	r3, r2, r3
 80094d8:	183a      	adds	r2, r7, r0
 80094da:	8812      	ldrh	r2, [r2, #0]
 80094dc:	492d      	ldr	r1, [pc, #180]	; (8009594 <USB_EPClearStall+0x158>)
 80094de:	430a      	orrs	r2, r1
 80094e0:	b292      	uxth	r2, r2
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	e04a      	b.n	800957c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	18d2      	adds	r2, r2, r3
 80094f0:	2116      	movs	r1, #22
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	8812      	ldrh	r2, [r2, #0]
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	187b      	adds	r3, r7, r1
 80094fa:	881a      	ldrh	r2, [r3, #0]
 80094fc:	2380      	movs	r3, #128	; 0x80
 80094fe:	01db      	lsls	r3, r3, #7
 8009500:	4013      	ands	r3, r2
 8009502:	d016      	beq.n	8009532 <USB_EPClearStall+0xf6>
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	18d3      	adds	r3, r2, r3
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29a      	uxth	r2, r3
 8009512:	2014      	movs	r0, #20
 8009514:	183b      	adds	r3, r7, r0
 8009516:	491c      	ldr	r1, [pc, #112]	; (8009588 <USB_EPClearStall+0x14c>)
 8009518:	400a      	ands	r2, r1
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	183a      	adds	r2, r7, r0
 8009528:	8812      	ldrh	r2, [r2, #0]
 800952a:	491b      	ldr	r1, [pc, #108]	; (8009598 <USB_EPClearStall+0x15c>)
 800952c:	430a      	orrs	r2, r1
 800952e:	b292      	uxth	r2, r2
 8009530:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	18d3      	adds	r3, r2, r3
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	b29a      	uxth	r2, r3
 8009540:	2012      	movs	r0, #18
 8009542:	183b      	adds	r3, r7, r0
 8009544:	4915      	ldr	r1, [pc, #84]	; (800959c <USB_EPClearStall+0x160>)
 8009546:	400a      	ands	r2, r1
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	183b      	adds	r3, r7, r0
 800954c:	183a      	adds	r2, r7, r0
 800954e:	8812      	ldrh	r2, [r2, #0]
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	0149      	lsls	r1, r1, #5
 8009554:	404a      	eors	r2, r1
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	183b      	adds	r3, r7, r0
 800955a:	183a      	adds	r2, r7, r0
 800955c:	8812      	ldrh	r2, [r2, #0]
 800955e:	2180      	movs	r1, #128	; 0x80
 8009560:	0189      	lsls	r1, r1, #6
 8009562:	404a      	eors	r2, r1
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	18d3      	adds	r3, r2, r3
 8009570:	183a      	adds	r2, r7, r0
 8009572:	8812      	ldrh	r2, [r2, #0]
 8009574:	4907      	ldr	r1, [pc, #28]	; (8009594 <USB_EPClearStall+0x158>)
 8009576:	430a      	orrs	r2, r1
 8009578:	b292      	uxth	r2, r2
 800957a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	0018      	movs	r0, r3
 8009580:	46bd      	mov	sp, r7
 8009582:	b006      	add	sp, #24
 8009584:	bd80      	pop	{r7, pc}
 8009586:	46c0      	nop			; (mov r8, r8)
 8009588:	ffff8f8f 	.word	0xffff8f8f
 800958c:	ffff80c0 	.word	0xffff80c0
 8009590:	ffff8fbf 	.word	0xffff8fbf
 8009594:	ffff8080 	.word	0xffff8080
 8009598:	ffffc080 	.word	0xffffc080
 800959c:	ffffbf8f 	.word	0xffffbf8f

080095a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	000a      	movs	r2, r1
 80095aa:	1cfb      	adds	r3, r7, #3
 80095ac:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80095ae:	1cfb      	adds	r3, r7, #3
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	224c      	movs	r2, #76	; 0x4c
 80095ba:	2180      	movs	r1, #128	; 0x80
 80095bc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	0018      	movs	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b002      	add	sp, #8
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2258      	movs	r2, #88	; 0x58
 80095d4:	5a9b      	ldrh	r3, [r3, r2]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	4a05      	ldr	r2, [pc, #20]	; (80095f0 <USB_DevConnect+0x28>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	b299      	uxth	r1, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2258      	movs	r2, #88	; 0x58
 80095e2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	0018      	movs	r0, r3
 80095e8:	46bd      	mov	sp, r7
 80095ea:	b002      	add	sp, #8
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	ffff8000 	.word	0xffff8000

080095f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2244      	movs	r2, #68	; 0x44
 8009600:	5a9b      	ldrh	r3, [r3, r2]
 8009602:	b29b      	uxth	r3, r3
 8009604:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009606:	68fb      	ldr	r3, [r7, #12]
}
 8009608:	0018      	movs	r0, r3
 800960a:	46bd      	mov	sp, r7
 800960c:	b004      	add	sp, #16
 800960e:	bd80      	pop	{r7, pc}

08009610 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08c      	sub	sp, #48	; 0x30
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	0019      	movs	r1, r3
 800961c:	1dbb      	adds	r3, r7, #6
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	1c0a      	adds	r2, r1, #0
 8009624:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009638:	1dbb      	adds	r3, r7, #6
 800963a:	881a      	ldrh	r2, [r3, #0]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	18d3      	adds	r3, r2, r3
 8009640:	2280      	movs	r2, #128	; 0x80
 8009642:	00d2      	lsls	r2, r2, #3
 8009644:	4694      	mov	ip, r2
 8009646:	4463      	add	r3, ip
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800964e:	e01b      	b.n	8009688 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	3301      	adds	r3, #1
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	b29b      	uxth	r3, r3
 8009666:	001a      	movs	r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	b29a      	uxth	r2, r3
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	3302      	adds	r3, #2
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	3301      	adds	r3, #1
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009684:	3b01      	subs	r3, #1
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e0      	bne.n	8009650 <USB_WritePMA+0x40>
  }
}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	46c0      	nop			; (mov r8, r8)
 8009692:	46bd      	mov	sp, r7
 8009694:	b00c      	add	sp, #48	; 0x30
 8009696:	bd80      	pop	{r7, pc}

08009698 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	0019      	movs	r1, r3
 80096a4:	1dbb      	adds	r3, r7, #6
 80096a6:	801a      	strh	r2, [r3, #0]
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	1c0a      	adds	r2, r1, #0
 80096ac:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096c0:	1dbb      	adds	r3, r7, #6
 80096c2:	881a      	ldrh	r2, [r3, #0]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	18d3      	adds	r3, r2, r3
 80096c8:	2280      	movs	r2, #128	; 0x80
 80096ca:	00d2      	lsls	r2, r2, #3
 80096cc:	4694      	mov	ip, r2
 80096ce:	4463      	add	r3, ip
 80096d0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
 80096d6:	e018      	b.n	800970a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	3302      	adds	r3, #2
 80096e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3301      	adds	r3, #1
 80096f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	3301      	adds	r3, #1
 8009702:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	3b01      	subs	r3, #1
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e3      	bne.n	80096d8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	2201      	movs	r2, #1
 8009716:	4013      	ands	r3, r2
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	b29b      	uxth	r3, r3
 8009724:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	b2da      	uxtb	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	701a      	strb	r2, [r3, #0]
  }
}
 800972e:	46c0      	nop			; (mov r8, r8)
 8009730:	46bd      	mov	sp, r7
 8009732:	b00a      	add	sp, #40	; 0x28
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	000a      	movs	r2, r1
 8009740:	1cfb      	adds	r3, r7, #3
 8009742:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009744:	230f      	movs	r3, #15
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7c1b      	ldrb	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d116      	bne.n	8009782 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009754:	2380      	movs	r3, #128	; 0x80
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	2181      	movs	r1, #129	; 0x81
 800975e:	f002 f8b4 	bl	800b8ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009768:	2380      	movs	r3, #128	; 0x80
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	2101      	movs	r1, #1
 8009772:	f002 f8aa 	bl	800b8ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	23b6      	movs	r3, #182	; 0xb6
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	2101      	movs	r1, #1
 800977e:	50d1      	str	r1, [r2, r3]
 8009780:	e013      	b.n	80097aa <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	2340      	movs	r3, #64	; 0x40
 8009786:	2202      	movs	r2, #2
 8009788:	2181      	movs	r1, #129	; 0x81
 800978a:	f002 f89e 	bl	800b8ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	2340      	movs	r3, #64	; 0x40
 8009798:	2202      	movs	r2, #2
 800979a:	2101      	movs	r1, #1
 800979c:	f002 f895 	bl	800b8ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	23b6      	movs	r3, #182	; 0xb6
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	2101      	movs	r1, #1
 80097a8:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	2308      	movs	r3, #8
 80097ae:	2203      	movs	r2, #3
 80097b0:	2182      	movs	r1, #130	; 0x82
 80097b2:	f002 f88a 	bl	800b8ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097bc:	2387      	movs	r3, #135	; 0x87
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	0018      	movs	r0, r3
 80097c2:	f002 fa1b 	bl	800bbfc <USBD_static_malloc>
 80097c6:	0001      	movs	r1, r0
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	23ae      	movs	r3, #174	; 0xae
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	23ae      	movs	r3, #174	; 0xae
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	58d3      	ldr	r3, [r2, r3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80097dc:	230f      	movs	r3, #15
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	2201      	movs	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e02c      	b.n	8009840 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	23ae      	movs	r3, #174	; 0xae
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	58d3      	ldr	r3, [r2, r3]
 80097ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	23af      	movs	r3, #175	; 0xaf
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	58d3      	ldr	r3, [r2, r3]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	2385      	movs	r3, #133	; 0x85
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	2100      	movs	r1, #0
 8009804:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	2386      	movs	r3, #134	; 0x86
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	2100      	movs	r1, #0
 800980e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7c1b      	ldrb	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	2381      	movs	r3, #129	; 0x81
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	58d2      	ldr	r2, [r2, r3]
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	2101      	movs	r1, #1
 8009828:	f002 f99a 	bl	800bb60 <USBD_LL_PrepareReceive>
 800982c:	e008      	b.n	8009840 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	2381      	movs	r3, #129	; 0x81
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	58d2      	ldr	r2, [r2, r3]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	2101      	movs	r1, #1
 800983c:	f002 f990 	bl	800bb60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009840:	230f      	movs	r3, #15
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	781b      	ldrb	r3, [r3, #0]
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	b004      	add	sp, #16
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	000a      	movs	r2, r1
 8009858:	1cfb      	adds	r3, r7, #3
 800985a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800985c:	230f      	movs	r3, #15
 800985e:	18fb      	adds	r3, r7, r3
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2181      	movs	r1, #129	; 0x81
 8009868:	0018      	movs	r0, r3
 800986a:	f002 f865 	bl	800b938 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2101      	movs	r1, #1
 8009878:	0018      	movs	r0, r3
 800987a:	f002 f85d 	bl	800b938 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	23b6      	movs	r3, #182	; 0xb6
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	2100      	movs	r1, #0
 8009886:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2182      	movs	r1, #130	; 0x82
 800988c:	0018      	movs	r0, r3
 800988e:	f002 f853 	bl	800b938 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	23ae      	movs	r3, #174	; 0xae
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	58d3      	ldr	r3, [r2, r3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d011      	beq.n	80098c8 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	23af      	movs	r3, #175	; 0xaf
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	58d3      	ldr	r3, [r2, r3]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	23ae      	movs	r3, #174	; 0xae
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	58d3      	ldr	r3, [r2, r3]
 80098b8:	0018      	movs	r0, r3
 80098ba:	f002 f9ab 	bl	800bc14 <USBD_static_free>
    pdev->pClassData = NULL;
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	23ae      	movs	r3, #174	; 0xae
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	2100      	movs	r1, #0
 80098c6:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80098c8:	230f      	movs	r3, #15
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	781b      	ldrb	r3, [r3, #0]
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b004      	add	sp, #16
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	23ae      	movs	r3, #174	; 0xae
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	58d3      	ldr	r3, [r2, r3]
 80098ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098ec:	230f      	movs	r3, #15
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80098f4:	230c      	movs	r3, #12
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	2200      	movs	r2, #0
 80098fa:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80098fc:	2317      	movs	r3, #23
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	001a      	movs	r2, r3
 800990a:	2360      	movs	r3, #96	; 0x60
 800990c:	4013      	ands	r3, r2
 800990e:	d03d      	beq.n	800998c <USBD_CDC_Setup+0xb4>
 8009910:	2b20      	cmp	r3, #32
 8009912:	d000      	beq.n	8009916 <USBD_CDC_Setup+0x3e>
 8009914:	e094      	b.n	8009a40 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	88db      	ldrh	r3, [r3, #6]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d02b      	beq.n	8009976 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b25b      	sxtb	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	da12      	bge.n	800994e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	23af      	movs	r3, #175	; 0xaf
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	58d3      	ldr	r3, [r2, r3]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009936:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	88d2      	ldrh	r2, [r2, #6]
 800993c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800993e:	6939      	ldr	r1, [r7, #16]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	88da      	ldrh	r2, [r3, #6]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	0018      	movs	r0, r3
 8009948:	f001 fbb2 	bl	800b0b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800994c:	e083      	b.n	8009a56 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	7859      	ldrb	r1, [r3, #1]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	2380      	movs	r3, #128	; 0x80
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	88db      	ldrh	r3, [r3, #6]
 800995e:	b2d9      	uxtb	r1, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4a40      	ldr	r2, [pc, #256]	; (8009a64 <USBD_CDC_Setup+0x18c>)
 8009964:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009966:	6939      	ldr	r1, [r7, #16]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	88da      	ldrh	r2, [r3, #6]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	0018      	movs	r0, r3
 8009970:	f001 fbd1 	bl	800b116 <USBD_CtlPrepareRx>
      break;
 8009974:	e06f      	b.n	8009a56 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	23af      	movs	r3, #175	; 0xaf
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	58d3      	ldr	r3, [r2, r3]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	7850      	ldrb	r0, [r2, #1]
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	4798      	blx	r3
      break;
 800998a:	e064      	b.n	8009a56 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	2b0b      	cmp	r3, #11
 8009992:	d037      	beq.n	8009a04 <USBD_CDC_Setup+0x12c>
 8009994:	dc47      	bgt.n	8009a26 <USBD_CDC_Setup+0x14e>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <USBD_CDC_Setup+0xc8>
 800999a:	2b0a      	cmp	r3, #10
 800999c:	d019      	beq.n	80099d2 <USBD_CDC_Setup+0xfa>
 800999e:	e042      	b.n	8009a26 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	23a7      	movs	r3, #167	; 0xa7
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	5cd3      	ldrb	r3, [r2, r3]
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d107      	bne.n	80099bc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80099ac:	230c      	movs	r3, #12
 80099ae:	18f9      	adds	r1, r7, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	0018      	movs	r0, r3
 80099b6:	f001 fb7b 	bl	800b0b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ba:	e040      	b.n	8009a3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	0011      	movs	r1, r2
 80099c2:	0018      	movs	r0, r3
 80099c4:	f001 faf6 	bl	800afb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80099c8:	2317      	movs	r3, #23
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	2202      	movs	r2, #2
 80099ce:	701a      	strb	r2, [r3, #0]
          break;
 80099d0:	e035      	b.n	8009a3e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	23a7      	movs	r3, #167	; 0xa7
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	5cd3      	ldrb	r3, [r2, r3]
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d107      	bne.n	80099ee <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80099de:	230f      	movs	r3, #15
 80099e0:	18f9      	adds	r1, r7, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	0018      	movs	r0, r3
 80099e8:	f001 fb62 	bl	800b0b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ec:	e027      	b.n	8009a3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	0011      	movs	r1, r2
 80099f4:	0018      	movs	r0, r3
 80099f6:	f001 fadd 	bl	800afb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80099fa:	2317      	movs	r3, #23
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	2202      	movs	r2, #2
 8009a00:	701a      	strb	r2, [r3, #0]
          break;
 8009a02:	e01c      	b.n	8009a3e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	23a7      	movs	r3, #167	; 0xa7
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	5cd3      	ldrb	r3, [r2, r3]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d015      	beq.n	8009a3c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	0011      	movs	r1, r2
 8009a16:	0018      	movs	r0, r3
 8009a18:	f001 facc 	bl	800afb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a1c:	2317      	movs	r3, #23
 8009a1e:	18fb      	adds	r3, r7, r3
 8009a20:	2202      	movs	r2, #2
 8009a22:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009a24:	e00a      	b.n	8009a3c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	0011      	movs	r1, r2
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f001 fac1 	bl	800afb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a32:	2317      	movs	r3, #23
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	2202      	movs	r2, #2
 8009a38:	701a      	strb	r2, [r3, #0]
          break;
 8009a3a:	e000      	b.n	8009a3e <USBD_CDC_Setup+0x166>
          break;
 8009a3c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009a3e:	e00a      	b.n	8009a56 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0011      	movs	r1, r2
 8009a46:	0018      	movs	r0, r3
 8009a48:	f001 fab4 	bl	800afb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a4c:	2317      	movs	r3, #23
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	2202      	movs	r2, #2
 8009a52:	701a      	strb	r2, [r3, #0]
      break;
 8009a54:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009a56:	2317      	movs	r3, #23
 8009a58:	18fb      	adds	r3, r7, r3
 8009a5a:	781b      	ldrb	r3, [r3, #0]
}
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b006      	add	sp, #24
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	00000201 	.word	0x00000201

08009a68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	000a      	movs	r2, r1
 8009a72:	1cfb      	adds	r3, r7, #3
 8009a74:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	23ae      	movs	r3, #174	; 0xae
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	58d3      	ldr	r3, [r2, r3]
 8009a7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	23b0      	movs	r3, #176	; 0xb0
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	58d3      	ldr	r3, [r2, r3]
 8009a88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	23ae      	movs	r3, #174	; 0xae
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	58d3      	ldr	r3, [r2, r3]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d03e      	beq.n	8009b14 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a96:	1cfb      	adds	r3, r7, #3
 8009a98:	781a      	ldrb	r2, [r3, #0]
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	0013      	movs	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	18cb      	adds	r3, r1, r3
 8009aa6:	331c      	adds	r3, #28
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d02b      	beq.n	8009b06 <USBD_CDC_DataIn+0x9e>
 8009aae:	1cfb      	adds	r3, r7, #3
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	0013      	movs	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	18cb      	adds	r3, r1, r3
 8009abe:	331c      	adds	r3, #28
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	1cfb      	adds	r3, r7, #3
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68b9      	ldr	r1, [r7, #8]
 8009ac8:	0013      	movs	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	189b      	adds	r3, r3, r2
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	18cb      	adds	r3, r1, r3
 8009ad2:	3338      	adds	r3, #56	; 0x38
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	0019      	movs	r1, r3
 8009ad8:	f7f6 fbae 	bl	8000238 <__aeabi_uidivmod>
 8009adc:	1e0b      	subs	r3, r1, #0
 8009ade:	d112      	bne.n	8009b06 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ae0:	1cfb      	adds	r3, r7, #3
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	0013      	movs	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	189b      	adds	r3, r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	18cb      	adds	r3, r1, r3
 8009af0:	331c      	adds	r3, #28
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009af6:	1cfb      	adds	r3, r7, #3
 8009af8:	7819      	ldrb	r1, [r3, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	2300      	movs	r3, #0
 8009afe:	2200      	movs	r2, #0
 8009b00:	f001 fff7 	bl	800baf2 <USBD_LL_Transmit>
 8009b04:	e004      	b.n	8009b10 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	2385      	movs	r3, #133	; 0x85
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	e000      	b.n	8009b16 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009b14:	2302      	movs	r3, #2
  }
}
 8009b16:	0018      	movs	r0, r3
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	b004      	add	sp, #16
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	000a      	movs	r2, r1
 8009b28:	1cfb      	adds	r3, r7, #3
 8009b2a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	23ae      	movs	r3, #174	; 0xae
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	58d3      	ldr	r3, [r2, r3]
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b36:	1cfb      	adds	r3, r7, #3
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	0011      	movs	r1, r2
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f002 f845 	bl	800bbce <USBD_LL_GetRxDataSize>
 8009b44:	0001      	movs	r1, r0
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	2383      	movs	r3, #131	; 0x83
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	23ae      	movs	r3, #174	; 0xae
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	58d3      	ldr	r3, [r2, r3]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d011      	beq.n	8009b7e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	23af      	movs	r3, #175	; 0xaf
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	58d3      	ldr	r3, [r2, r3]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	68f9      	ldr	r1, [r7, #12]
 8009b66:	2381      	movs	r3, #129	; 0x81
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	58c8      	ldr	r0, [r1, r3]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2183      	movs	r1, #131	; 0x83
 8009b70:	0089      	lsls	r1, r1, #2
 8009b72:	468c      	mov	ip, r1
 8009b74:	4463      	add	r3, ip
 8009b76:	0019      	movs	r1, r3
 8009b78:	4790      	blx	r2

    return USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e000      	b.n	8009b80 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8009b7e:	2302      	movs	r3, #2
  }
}
 8009b80:	0018      	movs	r0, r3
 8009b82:	46bd      	mov	sp, r7
 8009b84:	b004      	add	sp, #16
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b88:	b590      	push	{r4, r7, lr}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	23ae      	movs	r3, #174	; 0xae
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	58d3      	ldr	r3, [r2, r3]
 8009b98:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	23af      	movs	r3, #175	; 0xaf
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	58d3      	ldr	r3, [r2, r3]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d019      	beq.n	8009bda <USBD_CDC_EP0_RxReady+0x52>
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	5cd3      	ldrb	r3, [r2, r3]
 8009bae:	2bff      	cmp	r3, #255	; 0xff
 8009bb0:	d013      	beq.n	8009bda <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	23af      	movs	r3, #175	; 0xaf
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	58d3      	ldr	r3, [r2, r3]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	2280      	movs	r2, #128	; 0x80
 8009bc0:	0092      	lsls	r2, r2, #2
 8009bc2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009bc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4c06      	ldr	r4, [pc, #24]	; (8009be4 <USBD_CDC_EP0_RxReady+0x5c>)
 8009bca:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bcc:	b292      	uxth	r2, r2
 8009bce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	2380      	movs	r3, #128	; 0x80
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	21ff      	movs	r1, #255	; 0xff
 8009bd8:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	0018      	movs	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b005      	add	sp, #20
 8009be2:	bd90      	pop	{r4, r7, pc}
 8009be4:	00000201 	.word	0x00000201

08009be8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2243      	movs	r2, #67	; 0x43
 8009bf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009bf6:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000094 	.word	0x20000094

08009c04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2243      	movs	r2, #67	; 0x43
 8009c10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009c12:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009c14:	0018      	movs	r0, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000050 	.word	0x20000050

08009c20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2243      	movs	r2, #67	; 0x43
 8009c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009c2e:	4b02      	ldr	r3, [pc, #8]	; (8009c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009c30:	0018      	movs	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b002      	add	sp, #8
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	200000d8 	.word	0x200000d8

08009c3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	220a      	movs	r2, #10
 8009c48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009c4a:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b002      	add	sp, #8
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	2000000c 	.word	0x2000000c

08009c58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009c62:	200f      	movs	r0, #15
 8009c64:	183b      	adds	r3, r7, r0
 8009c66:	2202      	movs	r2, #2
 8009c68:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d007      	beq.n	8009c80 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	23af      	movs	r3, #175	; 0xaf
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009c7a:	183b      	adds	r3, r7, r0
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009c80:	230f      	movs	r3, #15
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	781b      	ldrb	r3, [r3, #0]
}
 8009c86:	0018      	movs	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b004      	add	sp, #16
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b086      	sub	sp, #24
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	1dbb      	adds	r3, r7, #6
 8009c9a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	23ae      	movs	r3, #174	; 0xae
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	58d3      	ldr	r3, [r2, r3]
 8009ca4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	2382      	movs	r3, #130	; 0x82
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009cb0:	1dbb      	adds	r3, r7, #6
 8009cb2:	8819      	ldrh	r1, [r3, #0]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	2384      	movs	r3, #132	; 0x84
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	b006      	add	sp, #24
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	23ae      	movs	r3, #174	; 0xae
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	58d3      	ldr	r3, [r2, r3]
 8009cd8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	2381      	movs	r3, #129	; 0x81
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b004      	add	sp, #16
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	23ae      	movs	r3, #174	; 0xae
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	58d3      	ldr	r3, [r2, r3]
 8009cfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	23ae      	movs	r3, #174	; 0xae
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	58d3      	ldr	r3, [r2, r3]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d022      	beq.n	8009d52 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	2385      	movs	r3, #133	; 0x85
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	58d3      	ldr	r3, [r2, r3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d11a      	bne.n	8009d4e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	2385      	movs	r3, #133	; 0x85
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	2101      	movs	r1, #1
 8009d20:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	2384      	movs	r3, #132	; 0x84
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	58d2      	ldr	r2, [r2, r3]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	2382      	movs	r3, #130	; 0x82
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	2384      	movs	r3, #132	; 0x84
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	000a      	movs	r2, r1
 8009d44:	2181      	movs	r1, #129	; 0x81
 8009d46:	f001 fed4 	bl	800baf2 <USBD_LL_Transmit>

      return USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e002      	b.n	8009d54 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009d52:	2302      	movs	r3, #2
  }
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b004      	add	sp, #16
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	23ae      	movs	r3, #174	; 0xae
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	58d3      	ldr	r3, [r2, r3]
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	23ae      	movs	r3, #174	; 0xae
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	58d3      	ldr	r3, [r2, r3]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d019      	beq.n	8009dae <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7c1b      	ldrb	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	2381      	movs	r3, #129	; 0x81
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	58d2      	ldr	r2, [r2, r3]
 8009d8a:	2380      	movs	r3, #128	; 0x80
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	2101      	movs	r1, #1
 8009d92:	f001 fee5 	bl	800bb60 <USBD_LL_PrepareReceive>
 8009d96:	e008      	b.n	8009daa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	2381      	movs	r3, #129	; 0x81
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	58d2      	ldr	r2, [r2, r3]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	2101      	movs	r1, #1
 8009da6:	f001 fedb 	bl	800bb60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	0018      	movs	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	b004      	add	sp, #16
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	1dfb      	adds	r3, r7, #7
 8009dc4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e020      	b.n	8009e12 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	23ad      	movs	r3, #173	; 0xad
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	58d3      	ldr	r3, [r2, r3]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d004      	beq.n	8009de6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	23ad      	movs	r3, #173	; 0xad
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	2100      	movs	r1, #0
 8009de4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	23ac      	movs	r3, #172	; 0xac
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	23a7      	movs	r3, #167	; 0xa7
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	1dfa      	adds	r2, r7, #7
 8009e04:	7812      	ldrb	r2, [r2, #0]
 8009e06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f001 fcd4 	bl	800b7b8 <USBD_LL_Init>

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b004      	add	sp, #16
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009e24:	200f      	movs	r0, #15
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	2200      	movs	r2, #0
 8009e2a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d008      	beq.n	8009e44 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	23ad      	movs	r3, #173	; 0xad
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009e3c:	183b      	adds	r3, r7, r0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	e003      	b.n	8009e4c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009e44:	230f      	movs	r3, #15
 8009e46:	18fb      	adds	r3, r7, r3
 8009e48:	2202      	movs	r2, #2
 8009e4a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009e4c:	230f      	movs	r3, #15
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	781b      	ldrb	r3, [r3, #0]
}
 8009e52:	0018      	movs	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	b004      	add	sp, #16
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	0018      	movs	r0, r3
 8009e66:	f001 fd0b 	bl	800b880 <USBD_LL_Start>

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	b002      	add	sp, #8
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	0018      	movs	r0, r3
 8009e80:	46bd      	mov	sp, r7
 8009e82:	b002      	add	sp, #8
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	000a      	movs	r2, r1
 8009e90:	1cfb      	adds	r3, r7, #3
 8009e92:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e94:	240f      	movs	r4, #15
 8009e96:	193b      	adds	r3, r7, r4
 8009e98:	2202      	movs	r2, #2
 8009e9a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	23ad      	movs	r3, #173	; 0xad
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	58d3      	ldr	r3, [r2, r3]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00e      	beq.n	8009ec6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	23ad      	movs	r3, #173	; 0xad
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	58d3      	ldr	r3, [r2, r3]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	1cfa      	adds	r2, r7, #3
 8009eb4:	7811      	ldrb	r1, [r2, #0]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	0010      	movs	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	1e03      	subs	r3, r0, #0
 8009ebe:	d102      	bne.n	8009ec6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009ec0:	193b      	adds	r3, r7, r4
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009ec6:	230f      	movs	r3, #15
 8009ec8:	18fb      	adds	r3, r7, r3
 8009eca:	781b      	ldrb	r3, [r3, #0]
}
 8009ecc:	0018      	movs	r0, r3
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b005      	add	sp, #20
 8009ed2:	bd90      	pop	{r4, r7, pc}

08009ed4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	000a      	movs	r2, r1
 8009ede:	1cfb      	adds	r3, r7, #3
 8009ee0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	23ad      	movs	r3, #173	; 0xad
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	58d3      	ldr	r3, [r2, r3]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	1cfa      	adds	r2, r7, #3
 8009eee:	7811      	ldrb	r1, [r2, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	0010      	movs	r0, r2
 8009ef4:	4798      	blx	r3

  return USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	0018      	movs	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	b002      	add	sp, #8
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	22aa      	movs	r2, #170	; 0xaa
 8009f0e:	0092      	lsls	r2, r2, #2
 8009f10:	4694      	mov	ip, r2
 8009f12:	4463      	add	r3, ip
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	0011      	movs	r1, r2
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f001 f810 	bl	800af3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	23a5      	movs	r3, #165	; 0xa5
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	2101      	movs	r1, #1
 8009f26:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a23      	ldr	r2, [pc, #140]	; (8009fb8 <USBD_LL_SetupStage+0xb8>)
 8009f2c:	5a9b      	ldrh	r3, [r3, r2]
 8009f2e:	0019      	movs	r1, r3
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	23a6      	movs	r3, #166	; 0xa6
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	23aa      	movs	r3, #170	; 0xaa
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	5cd3      	ldrb	r3, [r2, r3]
 8009f40:	001a      	movs	r2, r3
 8009f42:	231f      	movs	r3, #31
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d019      	beq.n	8009f7e <USBD_LL_SetupStage+0x7e>
 8009f4a:	d822      	bhi.n	8009f92 <USBD_LL_SetupStage+0x92>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <USBD_LL_SetupStage+0x56>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d00a      	beq.n	8009f6a <USBD_LL_SetupStage+0x6a>
 8009f54:	e01d      	b.n	8009f92 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	22aa      	movs	r2, #170	; 0xaa
 8009f5a:	0092      	lsls	r2, r2, #2
 8009f5c:	189a      	adds	r2, r3, r2
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	0011      	movs	r1, r2
 8009f62:	0018      	movs	r0, r3
 8009f64:	f000 fa10 	bl	800a388 <USBD_StdDevReq>
      break;
 8009f68:	e020      	b.n	8009fac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	22aa      	movs	r2, #170	; 0xaa
 8009f6e:	0092      	lsls	r2, r2, #2
 8009f70:	189a      	adds	r2, r3, r2
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fa78 	bl	800a46c <USBD_StdItfReq>
      break;
 8009f7c:	e016      	b.n	8009fac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	22aa      	movs	r2, #170	; 0xaa
 8009f82:	0092      	lsls	r2, r2, #2
 8009f84:	189a      	adds	r2, r3, r2
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	0011      	movs	r1, r2
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fac5 	bl	800a51a <USBD_StdEPReq>
      break;
 8009f90:	e00c      	b.n	8009fac <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	23aa      	movs	r3, #170	; 0xaa
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	227f      	movs	r2, #127	; 0x7f
 8009f9c:	4393      	bics	r3, r2
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f001 fcf2 	bl	800b98e <USBD_LL_StallEP>
      break;
 8009faa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	0018      	movs	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b002      	add	sp, #8
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	000002ae 	.word	0x000002ae

08009fbc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	200b      	movs	r0, #11
 8009fc8:	183b      	adds	r3, r7, r0
 8009fca:	1c0a      	adds	r2, r1, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fce:	183b      	adds	r3, r7, r0
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d154      	bne.n	800a080 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3355      	adds	r3, #85	; 0x55
 8009fda:	33ff      	adds	r3, #255	; 0xff
 8009fdc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	23a5      	movs	r3, #165	; 0xa5
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	58d3      	ldr	r3, [r2, r3]
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d139      	bne.n	800a05e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d919      	bls.n	800a02a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d203      	bcs.n	800a018 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a014:	b29b      	uxth	r3, r3
 800a016:	e002      	b.n	800a01e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	001a      	movs	r2, r3
 800a024:	f001 f89b 	bl	800b15e <USBD_CtlContinueRx>
 800a028:	e045      	b.n	800a0b6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	23ad      	movs	r3, #173	; 0xad
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	58d3      	ldr	r3, [r2, r3]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00d      	beq.n	800a054 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	23a7      	movs	r3, #167	; 0xa7
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a040:	2b03      	cmp	r3, #3
 800a042:	d107      	bne.n	800a054 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	23ad      	movs	r3, #173	; 0xad
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	58d3      	ldr	r3, [r2, r3]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	0010      	movs	r0, r2
 800a052:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	0018      	movs	r0, r3
 800a058:	f001 f894 	bl	800b184 <USBD_CtlSendStatus>
 800a05c:	e02b      	b.n	800a0b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	23a5      	movs	r3, #165	; 0xa5
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	58d3      	ldr	r3, [r2, r3]
 800a066:	2b05      	cmp	r3, #5
 800a068:	d125      	bne.n	800a0b6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	23a5      	movs	r3, #165	; 0xa5
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	2100      	movs	r1, #0
 800a072:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2100      	movs	r1, #0
 800a078:	0018      	movs	r0, r3
 800a07a:	f001 fc88 	bl	800b98e <USBD_LL_StallEP>
 800a07e:	e01a      	b.n	800a0b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	23ad      	movs	r3, #173	; 0xad
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	58d3      	ldr	r3, [r2, r3]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d011      	beq.n	800a0b2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	23a7      	movs	r3, #167	; 0xa7
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800a096:	2b03      	cmp	r3, #3
 800a098:	d10b      	bne.n	800a0b2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	23ad      	movs	r3, #173	; 0xad
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	58d3      	ldr	r3, [r2, r3]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	220b      	movs	r2, #11
 800a0a6:	18ba      	adds	r2, r7, r2
 800a0a8:	7811      	ldrb	r1, [r2, #0]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	0010      	movs	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	e001      	b.n	800a0b6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e000      	b.n	800a0b8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b006      	add	sp, #24
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	200b      	movs	r0, #11
 800a0cc:	183b      	adds	r3, r7, r0
 800a0ce:	1c0a      	adds	r2, r1, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a0d2:	183b      	adds	r3, r7, r0
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d000      	beq.n	800a0dc <USBD_LL_DataInStage+0x1c>
 800a0da:	e08e      	b.n	800a1fa <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3314      	adds	r3, #20
 800a0e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	23a5      	movs	r3, #165	; 0xa5
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	58d3      	ldr	r3, [r2, r3]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d164      	bne.n	800a1b8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d915      	bls.n	800a126 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	1ad2      	subs	r2, r2, r3
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	0018      	movs	r0, r3
 800a114:	f000 ffec 	bl	800b0f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	2300      	movs	r3, #0
 800a11c:	2200      	movs	r2, #0
 800a11e:	2100      	movs	r1, #0
 800a120:	f001 fd1e 	bl	800bb60 <USBD_LL_PrepareReceive>
 800a124:	e059      	b.n	800a1da <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	0019      	movs	r1, r3
 800a130:	0010      	movs	r0, r2
 800a132:	f7f6 f881 	bl	8000238 <__aeabi_uidivmod>
 800a136:	1e0b      	subs	r3, r1, #0
 800a138:	d11f      	bne.n	800a17a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a142:	429a      	cmp	r2, r3
 800a144:	d319      	bcc.n	800a17a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	68f9      	ldr	r1, [r7, #12]
 800a14c:	23a6      	movs	r3, #166	; 0xa6
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800a152:	429a      	cmp	r2, r3
 800a154:	d211      	bcs.n	800a17a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	2100      	movs	r1, #0
 800a15c:	0018      	movs	r0, r3
 800a15e:	f000 ffc7 	bl	800b0f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	23a6      	movs	r3, #166	; 0xa6
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	2100      	movs	r1, #0
 800a16a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	2300      	movs	r3, #0
 800a170:	2200      	movs	r2, #0
 800a172:	2100      	movs	r1, #0
 800a174:	f001 fcf4 	bl	800bb60 <USBD_LL_PrepareReceive>
 800a178:	e02f      	b.n	800a1da <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	23ad      	movs	r3, #173	; 0xad
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	58d3      	ldr	r3, [r2, r3]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00d      	beq.n	800a1a4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	23a7      	movs	r3, #167	; 0xa7
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a190:	2b03      	cmp	r3, #3
 800a192:	d107      	bne.n	800a1a4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	23ad      	movs	r3, #173	; 0xad
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	58d3      	ldr	r3, [r2, r3]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	0010      	movs	r0, r2
 800a1a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2180      	movs	r1, #128	; 0x80
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f001 fbf0 	bl	800b98e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f000 fffb 	bl	800b1ac <USBD_CtlReceiveStatus>
 800a1b6:	e010      	b.n	800a1da <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	23a5      	movs	r3, #165	; 0xa5
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	58d3      	ldr	r3, [r2, r3]
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d005      	beq.n	800a1d0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	23a5      	movs	r3, #165	; 0xa5
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2180      	movs	r1, #128	; 0x80
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f001 fbda 	bl	800b98e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	23a8      	movs	r3, #168	; 0xa8
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d124      	bne.n	800a230 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7ff fe43 	bl	8009e74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	23a8      	movs	r3, #168	; 0xa8
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	54d1      	strb	r1, [r2, r3]
 800a1f8:	e01a      	b.n	800a230 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	23ad      	movs	r3, #173	; 0xad
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	58d3      	ldr	r3, [r2, r3]
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d011      	beq.n	800a22c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	23a7      	movs	r3, #167	; 0xa7
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a210:	2b03      	cmp	r3, #3
 800a212:	d10b      	bne.n	800a22c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	23ad      	movs	r3, #173	; 0xad
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	58d3      	ldr	r3, [r2, r3]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	220b      	movs	r2, #11
 800a220:	18ba      	adds	r2, r7, r2
 800a222:	7811      	ldrb	r1, [r2, #0]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	0010      	movs	r0, r2
 800a228:	4798      	blx	r3
 800a22a:	e001      	b.n	800a230 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a22c:	2302      	movs	r3, #2
 800a22e:	e000      	b.n	800a232 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	0018      	movs	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	b006      	add	sp, #24
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b082      	sub	sp, #8
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	2200      	movs	r2, #0
 800a248:	2100      	movs	r1, #0
 800a24a:	f001 fb3e 	bl	800b8ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	23ac      	movs	r3, #172	; 0xac
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	2101      	movs	r1, #1
 800a256:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	23b2      	movs	r3, #178	; 0xb2
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	2140      	movs	r1, #64	; 0x40
 800a260:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	2200      	movs	r2, #0
 800a268:	2180      	movs	r1, #128	; 0x80
 800a26a:	f001 fb2e 	bl	800b8ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2240      	movs	r2, #64	; 0x40
 800a278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	23a7      	movs	r3, #167	; 0xa7
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	2101      	movs	r1, #1
 800a282:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	23a5      	movs	r3, #165	; 0xa5
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	2100      	movs	r1, #0
 800a28c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	23a9      	movs	r3, #169	; 0xa9
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	2100      	movs	r1, #0
 800a29c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	23ae      	movs	r3, #174	; 0xae
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	58d3      	ldr	r3, [r2, r3]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	23ad      	movs	r3, #173	; 0xad
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	58d3      	ldr	r3, [r2, r3]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	b2d9      	uxtb	r1, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0018      	movs	r0, r3
 800a2be:	4790      	blx	r2
  }

  return USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	b002      	add	sp, #8
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	000a      	movs	r2, r1
 800a2d4:	1cfb      	adds	r3, r7, #3
 800a2d6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	1cfa      	adds	r2, r7, #3
 800a2dc:	7812      	ldrb	r2, [r2, #0]
 800a2de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b002      	add	sp, #8
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	23a7      	movs	r3, #167	; 0xa7
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	5cd1      	ldrb	r1, [r2, r3]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a06      	ldr	r2, [pc, #24]	; (800a318 <USBD_LL_Suspend+0x2c>)
 800a300:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	23a7      	movs	r3, #167	; 0xa7
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	2104      	movs	r1, #4
 800a30a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	0018      	movs	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	b002      	add	sp, #8
 800a314:	bd80      	pop	{r7, pc}
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	0000029d 	.word	0x0000029d

0800a31c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	23a7      	movs	r3, #167	; 0xa7
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	5cd3      	ldrb	r3, [r2, r3]
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	d106      	bne.n	800a33e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a05      	ldr	r2, [pc, #20]	; (800a348 <USBD_LL_Resume+0x2c>)
 800a334:	5c99      	ldrb	r1, [r3, r2]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	23a7      	movs	r3, #167	; 0xa7
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	0018      	movs	r0, r3
 800a342:	46bd      	mov	sp, r7
 800a344:	b002      	add	sp, #8
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0000029d 	.word	0x0000029d

0800a34c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	23a7      	movs	r3, #167	; 0xa7
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	5cd3      	ldrb	r3, [r2, r3]
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d10e      	bne.n	800a37e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	23ad      	movs	r3, #173	; 0xad
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	58d3      	ldr	r3, [r2, r3]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	23ad      	movs	r3, #173	; 0xad
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	58d3      	ldr	r3, [r2, r3]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	0010      	movs	r0, r2
 800a37c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	0018      	movs	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	b002      	add	sp, #8
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	230f      	movs	r3, #15
 800a394:	18fb      	adds	r3, r7, r3
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	001a      	movs	r2, r3
 800a3a0:	2360      	movs	r3, #96	; 0x60
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b40      	cmp	r3, #64	; 0x40
 800a3a6:	d004      	beq.n	800a3b2 <USBD_StdDevReq+0x2a>
 800a3a8:	d84f      	bhi.n	800a44a <USBD_StdDevReq+0xc2>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <USBD_StdDevReq+0x3e>
 800a3ae:	2b20      	cmp	r3, #32
 800a3b0:	d14b      	bne.n	800a44a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	23ad      	movs	r3, #173	; 0xad
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	58d3      	ldr	r3, [r2, r3]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	0010      	movs	r0, r2
 800a3c2:	4798      	blx	r3
      break;
 800a3c4:	e048      	b.n	800a458 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	785b      	ldrb	r3, [r3, #1]
 800a3ca:	2b09      	cmp	r3, #9
 800a3cc:	d835      	bhi.n	800a43a <USBD_StdDevReq+0xb2>
 800a3ce:	009a      	lsls	r2, r3, #2
 800a3d0:	4b25      	ldr	r3, [pc, #148]	; (800a468 <USBD_StdDevReq+0xe0>)
 800a3d2:	18d3      	adds	r3, r2, r3
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	0011      	movs	r1, r2
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f000 fa52 	bl	800a888 <USBD_GetDescriptor>
          break;
 800a3e4:	e030      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f000 fbfd 	bl	800abec <USBD_SetAddress>
          break;
 800a3f2:	e029      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	0011      	movs	r1, r2
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f000 fc4a 	bl	800ac94 <USBD_SetConfig>
          break;
 800a400:	e022      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	0011      	movs	r1, r2
 800a408:	0018      	movs	r0, r3
 800a40a:	f000 fce7 	bl	800addc <USBD_GetConfig>
          break;
 800a40e:	e01b      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	0011      	movs	r1, r2
 800a416:	0018      	movs	r0, r3
 800a418:	f000 fd1b 	bl	800ae52 <USBD_GetStatus>
          break;
 800a41c:	e014      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	0011      	movs	r1, r2
 800a424:	0018      	movs	r0, r3
 800a426:	f000 fd4e 	bl	800aec6 <USBD_SetFeature>
          break;
 800a42a:	e00d      	b.n	800a448 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	0011      	movs	r1, r2
 800a432:	0018      	movs	r0, r3
 800a434:	f000 fd5d 	bl	800aef2 <USBD_ClrFeature>
          break;
 800a438:	e006      	b.n	800a448 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	0011      	movs	r1, r2
 800a440:	0018      	movs	r0, r3
 800a442:	f000 fdb7 	bl	800afb4 <USBD_CtlError>
          break;
 800a446:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a448:	e006      	b.n	800a458 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	0011      	movs	r1, r2
 800a450:	0018      	movs	r0, r3
 800a452:	f000 fdaf 	bl	800afb4 <USBD_CtlError>
      break;
 800a456:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a458:	230f      	movs	r3, #15
 800a45a:	18fb      	adds	r3, r7, r3
 800a45c:	781b      	ldrb	r3, [r3, #0]
}
 800a45e:	0018      	movs	r0, r3
 800a460:	46bd      	mov	sp, r7
 800a462:	b004      	add	sp, #16
 800a464:	bd80      	pop	{r7, pc}
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	0800c65c 	.word	0x0800c65c

0800a46c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a476:	230f      	movs	r3, #15
 800a478:	18fb      	adds	r3, r7, r3
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	001a      	movs	r2, r3
 800a484:	2360      	movs	r3, #96	; 0x60
 800a486:	4013      	ands	r3, r2
 800a488:	2b40      	cmp	r3, #64	; 0x40
 800a48a:	d004      	beq.n	800a496 <USBD_StdItfReq+0x2a>
 800a48c:	d839      	bhi.n	800a502 <USBD_StdItfReq+0x96>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <USBD_StdItfReq+0x2a>
 800a492:	2b20      	cmp	r3, #32
 800a494:	d135      	bne.n	800a502 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	23a7      	movs	r3, #167	; 0xa7
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	5cd3      	ldrb	r3, [r2, r3]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d825      	bhi.n	800a4f0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	889b      	ldrh	r3, [r3, #4]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d819      	bhi.n	800a4e2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	23ad      	movs	r3, #173	; 0xad
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	58d3      	ldr	r3, [r2, r3]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	250f      	movs	r5, #15
 800a4ba:	197c      	adds	r4, r7, r5
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	0010      	movs	r0, r2
 800a4c2:	4798      	blx	r3
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	88db      	ldrh	r3, [r3, #6]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d116      	bne.n	800a4fe <USBD_StdItfReq+0x92>
 800a4d0:	197b      	adds	r3, r7, r5
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d112      	bne.n	800a4fe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f000 fe52 	bl	800b184 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4e0:	e00d      	b.n	800a4fe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	0011      	movs	r1, r2
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f000 fd63 	bl	800afb4 <USBD_CtlError>
          break;
 800a4ee:	e006      	b.n	800a4fe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	0011      	movs	r1, r2
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f000 fd5c 	bl	800afb4 <USBD_CtlError>
          break;
 800a4fc:	e000      	b.n	800a500 <USBD_StdItfReq+0x94>
          break;
 800a4fe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a500:	e006      	b.n	800a510 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	0011      	movs	r1, r2
 800a508:	0018      	movs	r0, r3
 800a50a:	f000 fd53 	bl	800afb4 <USBD_CtlError>
      break;
 800a50e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	0018      	movs	r0, r3
 800a514:	46bd      	mov	sp, r7
 800a516:	b004      	add	sp, #16
 800a518:	bdb0      	pop	{r4, r5, r7, pc}

0800a51a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a51a:	b5b0      	push	{r4, r5, r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a524:	230f      	movs	r3, #15
 800a526:	18fb      	adds	r3, r7, r3
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	889a      	ldrh	r2, [r3, #4]
 800a530:	230e      	movs	r3, #14
 800a532:	18fb      	adds	r3, r7, r3
 800a534:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	001a      	movs	r2, r3
 800a53c:	2360      	movs	r3, #96	; 0x60
 800a53e:	4013      	ands	r3, r2
 800a540:	2b40      	cmp	r3, #64	; 0x40
 800a542:	d006      	beq.n	800a552 <USBD_StdEPReq+0x38>
 800a544:	d900      	bls.n	800a548 <USBD_StdEPReq+0x2e>
 800a546:	e190      	b.n	800a86a <USBD_StdEPReq+0x350>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00c      	beq.n	800a566 <USBD_StdEPReq+0x4c>
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	d000      	beq.n	800a552 <USBD_StdEPReq+0x38>
 800a550:	e18b      	b.n	800a86a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	23ad      	movs	r3, #173	; 0xad
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	58d3      	ldr	r3, [r2, r3]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	0010      	movs	r0, r2
 800a562:	4798      	blx	r3
      break;
 800a564:	e188      	b.n	800a878 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	001a      	movs	r2, r3
 800a56c:	2360      	movs	r3, #96	; 0x60
 800a56e:	4013      	ands	r3, r2
 800a570:	2b20      	cmp	r3, #32
 800a572:	d10f      	bne.n	800a594 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	23ad      	movs	r3, #173	; 0xad
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	58d3      	ldr	r3, [r2, r3]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	250f      	movs	r5, #15
 800a580:	197c      	adds	r4, r7, r5
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	0010      	movs	r0, r2
 800a588:	4798      	blx	r3
 800a58a:	0003      	movs	r3, r0
 800a58c:	7023      	strb	r3, [r4, #0]

        return ret;
 800a58e:	197b      	adds	r3, r7, r5
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	e174      	b.n	800a87e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d007      	beq.n	800a5ac <USBD_StdEPReq+0x92>
 800a59c:	dd00      	ble.n	800a5a0 <USBD_StdEPReq+0x86>
 800a59e:	e15c      	b.n	800a85a <USBD_StdEPReq+0x340>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d100      	bne.n	800a5a6 <USBD_StdEPReq+0x8c>
 800a5a4:	e092      	b.n	800a6cc <USBD_StdEPReq+0x1b2>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d04b      	beq.n	800a642 <USBD_StdEPReq+0x128>
 800a5aa:	e156      	b.n	800a85a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	23a7      	movs	r3, #167	; 0xa7
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	5cd3      	ldrb	r3, [r2, r3]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d002      	beq.n	800a5be <USBD_StdEPReq+0xa4>
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d01d      	beq.n	800a5f8 <USBD_StdEPReq+0xde>
 800a5bc:	e039      	b.n	800a632 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5be:	220e      	movs	r2, #14
 800a5c0:	18bb      	adds	r3, r7, r2
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d010      	beq.n	800a5ea <USBD_StdEPReq+0xd0>
 800a5c8:	18bb      	adds	r3, r7, r2
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b80      	cmp	r3, #128	; 0x80
 800a5ce:	d00c      	beq.n	800a5ea <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a5d0:	18bb      	adds	r3, r7, r2
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	0011      	movs	r1, r2
 800a5d8:	0018      	movs	r0, r3
 800a5da:	f001 f9d8 	bl	800b98e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2180      	movs	r1, #128	; 0x80
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f001 f9d3 	bl	800b98e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5e8:	e02a      	b.n	800a640 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	0011      	movs	r1, r2
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	f000 fcdf 	bl	800afb4 <USBD_CtlError>
              break;
 800a5f6:	e023      	b.n	800a640 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	885b      	ldrh	r3, [r3, #2]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d113      	bne.n	800a628 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a600:	220e      	movs	r2, #14
 800a602:	18bb      	adds	r3, r7, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00e      	beq.n	800a628 <USBD_StdEPReq+0x10e>
 800a60a:	18bb      	adds	r3, r7, r2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b80      	cmp	r3, #128	; 0x80
 800a610:	d00a      	beq.n	800a628 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	88db      	ldrh	r3, [r3, #6]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a61a:	18bb      	adds	r3, r7, r2
 800a61c:	781a      	ldrb	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	0011      	movs	r1, r2
 800a622:	0018      	movs	r0, r3
 800a624:	f001 f9b3 	bl	800b98e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 fdaa 	bl	800b184 <USBD_CtlSendStatus>

              break;
 800a630:	e006      	b.n	800a640 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	0011      	movs	r1, r2
 800a638:	0018      	movs	r0, r3
 800a63a:	f000 fcbb 	bl	800afb4 <USBD_CtlError>
              break;
 800a63e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a640:	e112      	b.n	800a868 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	23a7      	movs	r3, #167	; 0xa7
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	5cd3      	ldrb	r3, [r2, r3]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d002      	beq.n	800a654 <USBD_StdEPReq+0x13a>
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d01d      	beq.n	800a68e <USBD_StdEPReq+0x174>
 800a652:	e032      	b.n	800a6ba <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a654:	220e      	movs	r2, #14
 800a656:	18bb      	adds	r3, r7, r2
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <USBD_StdEPReq+0x166>
 800a65e:	18bb      	adds	r3, r7, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d00c      	beq.n	800a680 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a666:	18bb      	adds	r3, r7, r2
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	0011      	movs	r1, r2
 800a66e:	0018      	movs	r0, r3
 800a670:	f001 f98d 	bl	800b98e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2180      	movs	r1, #128	; 0x80
 800a678:	0018      	movs	r0, r3
 800a67a:	f001 f988 	bl	800b98e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a67e:	e024      	b.n	800a6ca <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	0011      	movs	r1, r2
 800a686:	0018      	movs	r0, r3
 800a688:	f000 fc94 	bl	800afb4 <USBD_CtlError>
              break;
 800a68c:	e01d      	b.n	800a6ca <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d118      	bne.n	800a6c8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a696:	210e      	movs	r1, #14
 800a698:	187b      	adds	r3, r7, r1
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	227f      	movs	r2, #127	; 0x7f
 800a69e:	4013      	ands	r3, r2
 800a6a0:	d006      	beq.n	800a6b0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6a2:	187b      	adds	r3, r7, r1
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	0011      	movs	r1, r2
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f001 f99a 	bl	800b9e4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f000 fd66 	bl	800b184 <USBD_CtlSendStatus>
              }
              break;
 800a6b8:	e006      	b.n	800a6c8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	0011      	movs	r1, r2
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f000 fc77 	bl	800afb4 <USBD_CtlError>
              break;
 800a6c6:	e000      	b.n	800a6ca <USBD_StdEPReq+0x1b0>
              break;
 800a6c8:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a6ca:	e0cd      	b.n	800a868 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	23a7      	movs	r3, #167	; 0xa7
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	5cd3      	ldrb	r3, [r2, r3]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d002      	beq.n	800a6de <USBD_StdEPReq+0x1c4>
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	d03c      	beq.n	800a756 <USBD_StdEPReq+0x23c>
 800a6dc:	e0b5      	b.n	800a84a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6de:	220e      	movs	r2, #14
 800a6e0:	18bb      	adds	r3, r7, r2
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <USBD_StdEPReq+0x1e4>
 800a6e8:	18bb      	adds	r3, r7, r2
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b80      	cmp	r3, #128	; 0x80
 800a6ee:	d006      	beq.n	800a6fe <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0011      	movs	r1, r2
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f000 fc5c 	bl	800afb4 <USBD_CtlError>
                break;
 800a6fc:	e0ac      	b.n	800a858 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6fe:	220e      	movs	r2, #14
 800a700:	18bb      	adds	r3, r7, r2
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	b25b      	sxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	da0c      	bge.n	800a724 <USBD_StdEPReq+0x20a>
 800a70a:	18bb      	adds	r3, r7, r2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	227f      	movs	r2, #127	; 0x7f
 800a710:	401a      	ands	r2, r3
 800a712:	0013      	movs	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	189b      	adds	r3, r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	3310      	adds	r3, #16
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	18d3      	adds	r3, r2, r3
 800a720:	3304      	adds	r3, #4
 800a722:	e00d      	b.n	800a740 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a724:	230e      	movs	r3, #14
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	227f      	movs	r2, #127	; 0x7f
 800a72c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a72e:	0013      	movs	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	189b      	adds	r3, r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	3351      	adds	r3, #81	; 0x51
 800a738:	33ff      	adds	r3, #255	; 0xff
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	18d3      	adds	r3, r2, r3
 800a73e:	3304      	adds	r3, #4
 800a740:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a748:	68b9      	ldr	r1, [r7, #8]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2202      	movs	r2, #2
 800a74e:	0018      	movs	r0, r3
 800a750:	f000 fcae 	bl	800b0b0 <USBD_CtlSendData>
              break;
 800a754:	e080      	b.n	800a858 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a756:	220e      	movs	r2, #14
 800a758:	18bb      	adds	r3, r7, r2
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	b25b      	sxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da14      	bge.n	800a78c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a762:	18bb      	adds	r3, r7, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	220f      	movs	r2, #15
 800a768:	401a      	ands	r2, r3
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	0013      	movs	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	189b      	adds	r3, r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	18cb      	adds	r3, r1, r3
 800a776:	3318      	adds	r3, #24
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d11e      	bne.n	800a7bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	0011      	movs	r1, r2
 800a784:	0018      	movs	r0, r3
 800a786:	f000 fc15 	bl	800afb4 <USBD_CtlError>
                  break;
 800a78a:	e065      	b.n	800a858 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a78c:	230e      	movs	r3, #14
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	220f      	movs	r2, #15
 800a794:	401a      	ands	r2, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	23ac      	movs	r3, #172	; 0xac
 800a79a:	0059      	lsls	r1, r3, #1
 800a79c:	0013      	movs	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	189b      	adds	r3, r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	18c3      	adds	r3, r0, r3
 800a7a6:	185b      	adds	r3, r3, r1
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	0011      	movs	r1, r2
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f000 fbfd 	bl	800afb4 <USBD_CtlError>
                  break;
 800a7ba:	e04d      	b.n	800a858 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7bc:	220e      	movs	r2, #14
 800a7be:	18bb      	adds	r3, r7, r2
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b25b      	sxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	da0c      	bge.n	800a7e2 <USBD_StdEPReq+0x2c8>
 800a7c8:	18bb      	adds	r3, r7, r2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	227f      	movs	r2, #127	; 0x7f
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	0013      	movs	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	3310      	adds	r3, #16
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	3304      	adds	r3, #4
 800a7e0:	e00d      	b.n	800a7fe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7e2:	230e      	movs	r3, #14
 800a7e4:	18fb      	adds	r3, r7, r3
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	227f      	movs	r2, #127	; 0x7f
 800a7ea:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7ec:	0013      	movs	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	189b      	adds	r3, r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	3351      	adds	r3, #81	; 0x51
 800a7f6:	33ff      	adds	r3, #255	; 0xff
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	18d3      	adds	r3, r2, r3
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a800:	220e      	movs	r2, #14
 800a802:	18bb      	adds	r3, r7, r2
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <USBD_StdEPReq+0x2f8>
 800a80a:	18bb      	adds	r3, r7, r2
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b80      	cmp	r3, #128	; 0x80
 800a810:	d103      	bne.n	800a81a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e010      	b.n	800a83c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a81a:	230e      	movs	r3, #14
 800a81c:	18fb      	adds	r3, r7, r3
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	0011      	movs	r1, r2
 800a824:	0018      	movs	r0, r3
 800a826:	f001 f908 	bl	800ba3a <USBD_LL_IsStallEP>
 800a82a:	1e03      	subs	r3, r0, #0
 800a82c:	d003      	beq.n	800a836 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2201      	movs	r2, #1
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	e002      	b.n	800a83c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2202      	movs	r2, #2
 800a842:	0018      	movs	r0, r3
 800a844:	f000 fc34 	bl	800b0b0 <USBD_CtlSendData>
              break;
 800a848:	e006      	b.n	800a858 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	0011      	movs	r1, r2
 800a850:	0018      	movs	r0, r3
 800a852:	f000 fbaf 	bl	800afb4 <USBD_CtlError>
              break;
 800a856:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a858:	e006      	b.n	800a868 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	0011      	movs	r1, r2
 800a860:	0018      	movs	r0, r3
 800a862:	f000 fba7 	bl	800afb4 <USBD_CtlError>
          break;
 800a866:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a868:	e006      	b.n	800a878 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	0011      	movs	r1, r2
 800a870:	0018      	movs	r0, r3
 800a872:	f000 fb9f 	bl	800afb4 <USBD_CtlError>
      break;
 800a876:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a878:	230f      	movs	r3, #15
 800a87a:	18fb      	adds	r3, r7, r3
 800a87c:	781b      	ldrb	r3, [r3, #0]
}
 800a87e:	0018      	movs	r0, r3
 800a880:	46bd      	mov	sp, r7
 800a882:	b004      	add	sp, #16
 800a884:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a888 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a892:	2308      	movs	r3, #8
 800a894:	18fb      	adds	r3, r7, r3
 800a896:	2200      	movs	r2, #0
 800a898:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a89e:	230b      	movs	r3, #11
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d900      	bls.n	800a8b4 <USBD_GetDescriptor+0x2c>
 800a8b2:	e159      	b.n	800ab68 <USBD_GetDescriptor+0x2e0>
 800a8b4:	009a      	lsls	r2, r3, #2
 800a8b6:	4bcb      	ldr	r3, [pc, #812]	; (800abe4 <USBD_GetDescriptor+0x35c>)
 800a8b8:	18d3      	adds	r3, r2, r3
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	23ac      	movs	r3, #172	; 0xac
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	58d3      	ldr	r3, [r2, r3]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7c12      	ldrb	r2, [r2, #16]
 800a8cc:	2108      	movs	r1, #8
 800a8ce:	1879      	adds	r1, r7, r1
 800a8d0:	0010      	movs	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	60fb      	str	r3, [r7, #12]
      break;
 800a8d8:	e153      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7c1b      	ldrb	r3, [r3, #16]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10f      	bne.n	800a902 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	23ad      	movs	r3, #173	; 0xad
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	58d3      	ldr	r3, [r2, r3]
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	18ba      	adds	r2, r7, r2
 800a8f0:	0010      	movs	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	0003      	movs	r3, r0
 800a8f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a900:	e13f      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	23ad      	movs	r3, #173	; 0xad
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	58d3      	ldr	r3, [r2, r3]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	2208      	movs	r2, #8
 800a90e:	18ba      	adds	r2, r7, r2
 800a910:	0010      	movs	r0, r2
 800a912:	4798      	blx	r3
 800a914:	0003      	movs	r3, r0
 800a916:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	3301      	adds	r3, #1
 800a91c:	2202      	movs	r2, #2
 800a91e:	701a      	strb	r2, [r3, #0]
      break;
 800a920:	e12f      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	885b      	ldrh	r3, [r3, #2]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b05      	cmp	r3, #5
 800a92a:	d900      	bls.n	800a92e <USBD_GetDescriptor+0xa6>
 800a92c:	e0d0      	b.n	800aad0 <USBD_GetDescriptor+0x248>
 800a92e:	009a      	lsls	r2, r3, #2
 800a930:	4bad      	ldr	r3, [pc, #692]	; (800abe8 <USBD_GetDescriptor+0x360>)
 800a932:	18d3      	adds	r3, r2, r3
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	23ac      	movs	r3, #172	; 0xac
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	58d3      	ldr	r3, [r2, r3]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00d      	beq.n	800a962 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	23ac      	movs	r3, #172	; 0xac
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	58d3      	ldr	r3, [r2, r3]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	7c12      	ldrb	r2, [r2, #16]
 800a954:	2108      	movs	r1, #8
 800a956:	1879      	adds	r1, r7, r1
 800a958:	0010      	movs	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	0003      	movs	r3, r0
 800a95e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a960:	e0c3      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	0011      	movs	r1, r2
 800a968:	0018      	movs	r0, r3
 800a96a:	f000 fb23 	bl	800afb4 <USBD_CtlError>
            err++;
 800a96e:	210b      	movs	r1, #11
 800a970:	187b      	adds	r3, r7, r1
 800a972:	781a      	ldrb	r2, [r3, #0]
 800a974:	187b      	adds	r3, r7, r1
 800a976:	3201      	adds	r2, #1
 800a978:	701a      	strb	r2, [r3, #0]
          break;
 800a97a:	e0b6      	b.n	800aaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	23ac      	movs	r3, #172	; 0xac
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	58d3      	ldr	r3, [r2, r3]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00d      	beq.n	800a9a6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	23ac      	movs	r3, #172	; 0xac
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	58d3      	ldr	r3, [r2, r3]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	7c12      	ldrb	r2, [r2, #16]
 800a998:	2108      	movs	r1, #8
 800a99a:	1879      	adds	r1, r7, r1
 800a99c:	0010      	movs	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9a4:	e0a1      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	0011      	movs	r1, r2
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 fb01 	bl	800afb4 <USBD_CtlError>
            err++;
 800a9b2:	210b      	movs	r1, #11
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	3201      	adds	r2, #1
 800a9bc:	701a      	strb	r2, [r3, #0]
          break;
 800a9be:	e094      	b.n	800aaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	23ac      	movs	r3, #172	; 0xac
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	58d3      	ldr	r3, [r2, r3]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00d      	beq.n	800a9ea <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	23ac      	movs	r3, #172	; 0xac
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	58d3      	ldr	r3, [r2, r3]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	7c12      	ldrb	r2, [r2, #16]
 800a9dc:	2108      	movs	r1, #8
 800a9de:	1879      	adds	r1, r7, r1
 800a9e0:	0010      	movs	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	0003      	movs	r3, r0
 800a9e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e8:	e07f      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	0011      	movs	r1, r2
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f000 fadf 	bl	800afb4 <USBD_CtlError>
            err++;
 800a9f6:	210b      	movs	r1, #11
 800a9f8:	187b      	adds	r3, r7, r1
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	187b      	adds	r3, r7, r1
 800a9fe:	3201      	adds	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
          break;
 800aa02:	e072      	b.n	800aaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	23ac      	movs	r3, #172	; 0xac
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	58d3      	ldr	r3, [r2, r3]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00d      	beq.n	800aa2e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	23ac      	movs	r3, #172	; 0xac
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	58d3      	ldr	r3, [r2, r3]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	7c12      	ldrb	r2, [r2, #16]
 800aa20:	2108      	movs	r1, #8
 800aa22:	1879      	adds	r1, r7, r1
 800aa24:	0010      	movs	r0, r2
 800aa26:	4798      	blx	r3
 800aa28:	0003      	movs	r3, r0
 800aa2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2c:	e05d      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	0011      	movs	r1, r2
 800aa34:	0018      	movs	r0, r3
 800aa36:	f000 fabd 	bl	800afb4 <USBD_CtlError>
            err++;
 800aa3a:	210b      	movs	r1, #11
 800aa3c:	187b      	adds	r3, r7, r1
 800aa3e:	781a      	ldrb	r2, [r3, #0]
 800aa40:	187b      	adds	r3, r7, r1
 800aa42:	3201      	adds	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
          break;
 800aa46:	e050      	b.n	800aaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	23ac      	movs	r3, #172	; 0xac
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	58d3      	ldr	r3, [r2, r3]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00d      	beq.n	800aa72 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	23ac      	movs	r3, #172	; 0xac
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	58d3      	ldr	r3, [r2, r3]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	2108      	movs	r1, #8
 800aa66:	1879      	adds	r1, r7, r1
 800aa68:	0010      	movs	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	0003      	movs	r3, r0
 800aa6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa70:	e03b      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	0011      	movs	r1, r2
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f000 fa9b 	bl	800afb4 <USBD_CtlError>
            err++;
 800aa7e:	210b      	movs	r1, #11
 800aa80:	187b      	adds	r3, r7, r1
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	187b      	adds	r3, r7, r1
 800aa86:	3201      	adds	r2, #1
 800aa88:	701a      	strb	r2, [r3, #0]
          break;
 800aa8a:	e02e      	b.n	800aaea <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	23ac      	movs	r3, #172	; 0xac
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	58d3      	ldr	r3, [r2, r3]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	23ac      	movs	r3, #172	; 0xac
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	58d3      	ldr	r3, [r2, r3]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	7c12      	ldrb	r2, [r2, #16]
 800aaa8:	2108      	movs	r1, #8
 800aaaa:	1879      	adds	r1, r7, r1
 800aaac:	0010      	movs	r0, r2
 800aaae:	4798      	blx	r3
 800aab0:	0003      	movs	r3, r0
 800aab2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aab4:	e019      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	0011      	movs	r1, r2
 800aabc:	0018      	movs	r0, r3
 800aabe:	f000 fa79 	bl	800afb4 <USBD_CtlError>
            err++;
 800aac2:	210b      	movs	r1, #11
 800aac4:	187b      	adds	r3, r7, r1
 800aac6:	781a      	ldrb	r2, [r3, #0]
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	3201      	adds	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
          break;
 800aace:	e00c      	b.n	800aaea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	0011      	movs	r1, r2
 800aad6:	0018      	movs	r0, r3
 800aad8:	f000 fa6c 	bl	800afb4 <USBD_CtlError>
          err++;
 800aadc:	210b      	movs	r1, #11
 800aade:	187b      	adds	r3, r7, r1
 800aae0:	781a      	ldrb	r2, [r3, #0]
 800aae2:	187b      	adds	r3, r7, r1
 800aae4:	3201      	adds	r2, #1
 800aae6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800aae8:	e04b      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>
 800aaea:	e04a      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7c1b      	ldrb	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10b      	bne.n	800ab0c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	23ad      	movs	r3, #173	; 0xad
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	58d3      	ldr	r3, [r2, r3]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	2208      	movs	r2, #8
 800ab00:	18ba      	adds	r2, r7, r2
 800ab02:	0010      	movs	r0, r2
 800ab04:	4798      	blx	r3
 800ab06:	0003      	movs	r3, r0
 800ab08:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab0a:	e03a      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	0011      	movs	r1, r2
 800ab12:	0018      	movs	r0, r3
 800ab14:	f000 fa4e 	bl	800afb4 <USBD_CtlError>
        err++;
 800ab18:	210b      	movs	r1, #11
 800ab1a:	187b      	adds	r3, r7, r1
 800ab1c:	781a      	ldrb	r2, [r3, #0]
 800ab1e:	187b      	adds	r3, r7, r1
 800ab20:	3201      	adds	r2, #1
 800ab22:	701a      	strb	r2, [r3, #0]
      break;
 800ab24:	e02d      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7c1b      	ldrb	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10f      	bne.n	800ab4e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	23ad      	movs	r3, #173	; 0xad
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	58d3      	ldr	r3, [r2, r3]
 800ab36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab38:	2208      	movs	r2, #8
 800ab3a:	18ba      	adds	r2, r7, r2
 800ab3c:	0010      	movs	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	0003      	movs	r3, r0
 800ab42:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	2207      	movs	r2, #7
 800ab4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab4c:	e019      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	0011      	movs	r1, r2
 800ab54:	0018      	movs	r0, r3
 800ab56:	f000 fa2d 	bl	800afb4 <USBD_CtlError>
        err++;
 800ab5a:	210b      	movs	r1, #11
 800ab5c:	187b      	adds	r3, r7, r1
 800ab5e:	781a      	ldrb	r2, [r3, #0]
 800ab60:	187b      	adds	r3, r7, r1
 800ab62:	3201      	adds	r2, #1
 800ab64:	701a      	strb	r2, [r3, #0]
      break;
 800ab66:	e00c      	b.n	800ab82 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	0011      	movs	r1, r2
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f000 fa20 	bl	800afb4 <USBD_CtlError>
      err++;
 800ab74:	210b      	movs	r1, #11
 800ab76:	187b      	adds	r3, r7, r1
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	187b      	adds	r3, r7, r1
 800ab7c:	3201      	adds	r2, #1
 800ab7e:	701a      	strb	r2, [r3, #0]
      break;
 800ab80:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800ab82:	230b      	movs	r3, #11
 800ab84:	18fb      	adds	r3, r7, r3
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d127      	bne.n	800abdc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab8c:	2108      	movs	r1, #8
 800ab8e:	187b      	adds	r3, r7, r1
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d019      	beq.n	800abca <USBD_GetDescriptor+0x342>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	88db      	ldrh	r3, [r3, #6]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d015      	beq.n	800abca <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	88da      	ldrh	r2, [r3, #6]
 800aba2:	187b      	adds	r3, r7, r1
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	1c18      	adds	r0, r3, #0
 800aba8:	1c11      	adds	r1, r2, #0
 800abaa:	b28a      	uxth	r2, r1
 800abac:	b283      	uxth	r3, r0
 800abae:	429a      	cmp	r2, r3
 800abb0:	d900      	bls.n	800abb4 <USBD_GetDescriptor+0x32c>
 800abb2:	1c01      	adds	r1, r0, #0
 800abb4:	b28a      	uxth	r2, r1
 800abb6:	2108      	movs	r1, #8
 800abb8:	187b      	adds	r3, r7, r1
 800abba:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	881a      	ldrh	r2, [r3, #0]
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	0018      	movs	r0, r3
 800abc6:	f000 fa73 	bl	800b0b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d105      	bne.n	800abde <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	0018      	movs	r0, r3
 800abd6:	f000 fad5 	bl	800b184 <USBD_CtlSendStatus>
 800abda:	e000      	b.n	800abde <USBD_GetDescriptor+0x356>
    return;
 800abdc:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800abde:	46bd      	mov	sp, r7
 800abe0:	b004      	add	sp, #16
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	0800c684 	.word	0x0800c684
 800abe8:	0800c6a4 	.word	0x0800c6a4

0800abec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abec:	b590      	push	{r4, r7, lr}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d13d      	bne.n	800ac7a <USBD_SetAddress+0x8e>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	88db      	ldrh	r3, [r3, #6]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d139      	bne.n	800ac7a <USBD_SetAddress+0x8e>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	885b      	ldrh	r3, [r3, #2]
 800ac0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ac0c:	d835      	bhi.n	800ac7a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	885b      	ldrh	r3, [r3, #2]
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	230f      	movs	r3, #15
 800ac16:	18fb      	adds	r3, r7, r3
 800ac18:	217f      	movs	r1, #127	; 0x7f
 800ac1a:	400a      	ands	r2, r1
 800ac1c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	23a7      	movs	r3, #167	; 0xa7
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	5cd3      	ldrb	r3, [r2, r3]
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d106      	bne.n	800ac38 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0011      	movs	r1, r2
 800ac30:	0018      	movs	r0, r3
 800ac32:	f000 f9bf 	bl	800afb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac36:	e027      	b.n	800ac88 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	240f      	movs	r4, #15
 800ac3c:	193a      	adds	r2, r7, r4
 800ac3e:	4914      	ldr	r1, [pc, #80]	; (800ac90 <USBD_SetAddress+0xa4>)
 800ac40:	7812      	ldrb	r2, [r2, #0]
 800ac42:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac44:	193b      	adds	r3, r7, r4
 800ac46:	781a      	ldrb	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	0011      	movs	r1, r2
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f000 ff25 	bl	800ba9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	0018      	movs	r0, r3
 800ac56:	f000 fa95 	bl	800b184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac5a:	193b      	adds	r3, r7, r4
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	23a7      	movs	r3, #167	; 0xa7
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	2102      	movs	r1, #2
 800ac6a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac6c:	e00c      	b.n	800ac88 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	23a7      	movs	r3, #167	; 0xa7
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	2101      	movs	r1, #1
 800ac76:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac78:	e006      	b.n	800ac88 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	0011      	movs	r1, r2
 800ac80:	0018      	movs	r0, r3
 800ac82:	f000 f997 	bl	800afb4 <USBD_CtlError>
  }
}
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	46c0      	nop			; (mov r8, r8)
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	b005      	add	sp, #20
 800ac8e:	bd90      	pop	{r4, r7, pc}
 800ac90:	0000029e 	.word	0x0000029e

0800ac94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	885b      	ldrh	r3, [r3, #2]
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	4b4c      	ldr	r3, [pc, #304]	; (800add8 <USBD_SetConfig+0x144>)
 800aca6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aca8:	4b4b      	ldr	r3, [pc, #300]	; (800add8 <USBD_SetConfig+0x144>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d906      	bls.n	800acbe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	0011      	movs	r1, r2
 800acb6:	0018      	movs	r0, r3
 800acb8:	f000 f97c 	bl	800afb4 <USBD_CtlError>
 800acbc:	e088      	b.n	800add0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	23a7      	movs	r3, #167	; 0xa7
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	5cd3      	ldrb	r3, [r2, r3]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d002      	beq.n	800acd0 <USBD_SetConfig+0x3c>
 800acca:	2b03      	cmp	r3, #3
 800accc:	d029      	beq.n	800ad22 <USBD_SetConfig+0x8e>
 800acce:	e071      	b.n	800adb4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800acd0:	4b41      	ldr	r3, [pc, #260]	; (800add8 <USBD_SetConfig+0x144>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01f      	beq.n	800ad18 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800acd8:	4b3f      	ldr	r3, [pc, #252]	; (800add8 <USBD_SetConfig+0x144>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	001a      	movs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	23a7      	movs	r3, #167	; 0xa7
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	2103      	movs	r1, #3
 800acea:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800acec:	4b3a      	ldr	r3, [pc, #232]	; (800add8 <USBD_SetConfig+0x144>)
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	0011      	movs	r1, r2
 800acf4:	0018      	movs	r0, r3
 800acf6:	f7ff f8c6 	bl	8009e86 <USBD_SetClassConfig>
 800acfa:	0003      	movs	r3, r0
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d106      	bne.n	800ad0e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	0011      	movs	r1, r2
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 f954 	bl	800afb4 <USBD_CtlError>
            return;
 800ad0c:	e060      	b.n	800add0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	0018      	movs	r0, r3
 800ad12:	f000 fa37 	bl	800b184 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad16:	e05b      	b.n	800add0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f000 fa32 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800ad20:	e056      	b.n	800add0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ad22:	4b2d      	ldr	r3, [pc, #180]	; (800add8 <USBD_SetConfig+0x144>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d115      	bne.n	800ad56 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	23a7      	movs	r3, #167	; 0xa7
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	2102      	movs	r1, #2
 800ad32:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800ad34:	4b28      	ldr	r3, [pc, #160]	; (800add8 <USBD_SetConfig+0x144>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	001a      	movs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ad3e:	4b26      	ldr	r3, [pc, #152]	; (800add8 <USBD_SetConfig+0x144>)
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	0011      	movs	r1, r2
 800ad46:	0018      	movs	r0, r3
 800ad48:	f7ff f8c4 	bl	8009ed4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f000 fa18 	bl	800b184 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ad54:	e03c      	b.n	800add0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800ad56:	4b20      	ldr	r3, [pc, #128]	; (800add8 <USBD_SetConfig+0x144>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	001a      	movs	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d022      	beq.n	800adaa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	0011      	movs	r1, r2
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f7ff f8b0 	bl	8009ed4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ad74:	4b18      	ldr	r3, [pc, #96]	; (800add8 <USBD_SetConfig+0x144>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	001a      	movs	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad7e:	4b16      	ldr	r3, [pc, #88]	; (800add8 <USBD_SetConfig+0x144>)
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	0011      	movs	r1, r2
 800ad86:	0018      	movs	r0, r3
 800ad88:	f7ff f87d 	bl	8009e86 <USBD_SetClassConfig>
 800ad8c:	0003      	movs	r3, r0
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d106      	bne.n	800ada0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	0011      	movs	r1, r2
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f000 f90b 	bl	800afb4 <USBD_CtlError>
            return;
 800ad9e:	e017      	b.n	800add0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	0018      	movs	r0, r3
 800ada4:	f000 f9ee 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800ada8:	e012      	b.n	800add0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	0018      	movs	r0, r3
 800adae:	f000 f9e9 	bl	800b184 <USBD_CtlSendStatus>
        break;
 800adb2:	e00d      	b.n	800add0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	0011      	movs	r1, r2
 800adba:	0018      	movs	r0, r3
 800adbc:	f000 f8fa 	bl	800afb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800adc0:	4b05      	ldr	r3, [pc, #20]	; (800add8 <USBD_SetConfig+0x144>)
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	0011      	movs	r1, r2
 800adc8:	0018      	movs	r0, r3
 800adca:	f7ff f883 	bl	8009ed4 <USBD_ClrClassConfig>
        break;
 800adce:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800add0:	46bd      	mov	sp, r7
 800add2:	b002      	add	sp, #8
 800add4:	bd80      	pop	{r7, pc}
 800add6:	46c0      	nop			; (mov r8, r8)
 800add8:	20000214 	.word	0x20000214

0800addc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	88db      	ldrh	r3, [r3, #6]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d006      	beq.n	800adfc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0011      	movs	r1, r2
 800adf4:	0018      	movs	r0, r3
 800adf6:	f000 f8dd 	bl	800afb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adfa:	e026      	b.n	800ae4a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	23a7      	movs	r3, #167	; 0xa7
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	5cd3      	ldrb	r3, [r2, r3]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	dc02      	bgt.n	800ae0e <USBD_GetConfig+0x32>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc03      	bgt.n	800ae14 <USBD_GetConfig+0x38>
 800ae0c:	e016      	b.n	800ae3c <USBD_GetConfig+0x60>
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d00c      	beq.n	800ae2c <USBD_GetConfig+0x50>
 800ae12:	e013      	b.n	800ae3c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	0019      	movs	r1, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	0018      	movs	r0, r3
 800ae26:	f000 f943 	bl	800b0b0 <USBD_CtlSendData>
        break;
 800ae2a:	e00e      	b.n	800ae4a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	1d19      	adds	r1, r3, #4
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	0018      	movs	r0, r3
 800ae36:	f000 f93b 	bl	800b0b0 <USBD_CtlSendData>
        break;
 800ae3a:	e006      	b.n	800ae4a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	0011      	movs	r1, r2
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 f8b6 	bl	800afb4 <USBD_CtlError>
        break;
 800ae48:	46c0      	nop			; (mov r8, r8)
}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b002      	add	sp, #8
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	23a7      	movs	r3, #167	; 0xa7
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	5cd3      	ldrb	r3, [r2, r3]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d822      	bhi.n	800aeb0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	88db      	ldrh	r3, [r3, #6]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d006      	beq.n	800ae80 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	0011      	movs	r1, r2
 800ae78:	0018      	movs	r0, r3
 800ae7a:	f000 f89b 	bl	800afb4 <USBD_CtlError>
        break;
 800ae7e:	e01e      	b.n	800aebe <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	23a9      	movs	r3, #169	; 0xa9
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	58d3      	ldr	r3, [r2, r3]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2202      	movs	r2, #2
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	330c      	adds	r3, #12
 800aea2:	0019      	movs	r1, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2202      	movs	r2, #2
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f000 f901 	bl	800b0b0 <USBD_CtlSendData>
      break;
 800aeae:	e006      	b.n	800aebe <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	0011      	movs	r1, r2
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f000 f87c 	bl	800afb4 <USBD_CtlError>
      break;
 800aebc:	46c0      	nop			; (mov r8, r8)
  }
}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b002      	add	sp, #8
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d108      	bne.n	800aeea <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	23a9      	movs	r3, #169	; 0xa9
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	2101      	movs	r1, #1
 800aee0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 f94d 	bl	800b184 <USBD_CtlSendStatus>
  }
}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	46bd      	mov	sp, r7
 800aeee:	b002      	add	sp, #8
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	23a7      	movs	r3, #167	; 0xa7
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	5cd3      	ldrb	r3, [r2, r3]
 800af04:	3b01      	subs	r3, #1
 800af06:	2b02      	cmp	r3, #2
 800af08:	d80d      	bhi.n	800af26 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	885b      	ldrh	r3, [r3, #2]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d110      	bne.n	800af34 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	23a9      	movs	r3, #169	; 0xa9
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	2100      	movs	r1, #0
 800af1a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	0018      	movs	r0, r3
 800af20:	f000 f930 	bl	800b184 <USBD_CtlSendStatus>
      }
      break;
 800af24:	e006      	b.n	800af34 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	0011      	movs	r1, r2
 800af2c:	0018      	movs	r0, r3
 800af2e:	f000 f841 	bl	800afb4 <USBD_CtlError>
      break;
 800af32:	e000      	b.n	800af36 <USBD_ClrFeature+0x44>
      break;
 800af34:	46c0      	nop			; (mov r8, r8)
  }
}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	46bd      	mov	sp, r7
 800af3a:	b002      	add	sp, #8
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	785a      	ldrb	r2, [r3, #1]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	3302      	adds	r3, #2
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	3303      	adds	r3, #3
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b29b      	uxth	r3, r3
 800af68:	021b      	lsls	r3, r3, #8
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	18d3      	adds	r3, r2, r3
 800af6e:	b29a      	uxth	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	3304      	adds	r3, #4
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	3305      	adds	r3, #5
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	021b      	lsls	r3, r3, #8
 800af86:	b29b      	uxth	r3, r3
 800af88:	18d3      	adds	r3, r2, r3
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	3306      	adds	r3, #6
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	b29a      	uxth	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	3307      	adds	r3, #7
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	18d3      	adds	r3, r2, r3
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	80da      	strh	r2, [r3, #6]

}
 800afac:	46c0      	nop			; (mov r8, r8)
 800afae:	46bd      	mov	sp, r7
 800afb0:	b002      	add	sp, #8
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2180      	movs	r1, #128	; 0x80
 800afc2:	0018      	movs	r0, r3
 800afc4:	f000 fce3 	bl	800b98e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2100      	movs	r1, #0
 800afcc:	0018      	movs	r0, r3
 800afce:	f000 fcde 	bl	800b98e <USBD_LL_StallEP>
}
 800afd2:	46c0      	nop			; (mov r8, r8)
 800afd4:	46bd      	mov	sp, r7
 800afd6:	b002      	add	sp, #8
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afda:	b590      	push	{r4, r7, lr}
 800afdc:	b087      	sub	sp, #28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afe6:	2417      	movs	r4, #23
 800afe8:	193b      	adds	r3, r7, r4
 800afea:	2200      	movs	r2, #0
 800afec:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d03c      	beq.n	800b06e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	0018      	movs	r0, r3
 800aff8:	f000 f83d 	bl	800b076 <USBD_GetLen>
 800affc:	0003      	movs	r3, r0
 800affe:	3301      	adds	r3, #1
 800b000:	b29b      	uxth	r3, r3
 800b002:	18db      	adds	r3, r3, r3
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b00a:	193b      	adds	r3, r7, r4
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	193a      	adds	r2, r7, r4
 800b010:	1c59      	adds	r1, r3, #1
 800b012:	7011      	strb	r1, [r2, #0]
 800b014:	001a      	movs	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	189b      	adds	r3, r3, r2
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	7812      	ldrb	r2, [r2, #0]
 800b01e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b020:	193b      	adds	r3, r7, r4
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	193a      	adds	r2, r7, r4
 800b026:	1c59      	adds	r1, r3, #1
 800b028:	7011      	strb	r1, [r2, #0]
 800b02a:	001a      	movs	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	189b      	adds	r3, r3, r2
 800b030:	2203      	movs	r2, #3
 800b032:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b034:	e017      	b.n	800b066 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	60fa      	str	r2, [r7, #12]
 800b03c:	2417      	movs	r4, #23
 800b03e:	193a      	adds	r2, r7, r4
 800b040:	7812      	ldrb	r2, [r2, #0]
 800b042:	1939      	adds	r1, r7, r4
 800b044:	1c50      	adds	r0, r2, #1
 800b046:	7008      	strb	r0, [r1, #0]
 800b048:	0011      	movs	r1, r2
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	1852      	adds	r2, r2, r1
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b052:	193b      	adds	r3, r7, r4
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	193a      	adds	r2, r7, r4
 800b058:	1c59      	adds	r1, r3, #1
 800b05a:	7011      	strb	r1, [r2, #0]
 800b05c:	001a      	movs	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	189b      	adds	r3, r3, r2
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e3      	bne.n	800b036 <USBD_GetString+0x5c>
    }
  }
}
 800b06e:	46c0      	nop			; (mov r8, r8)
 800b070:	46bd      	mov	sp, r7
 800b072:	b007      	add	sp, #28
 800b074:	bd90      	pop	{r4, r7, pc}

0800b076 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b07e:	230f      	movs	r3, #15
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800b086:	e008      	b.n	800b09a <USBD_GetLen+0x24>
  {
    len++;
 800b088:	210f      	movs	r1, #15
 800b08a:	187b      	adds	r3, r7, r1
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	187b      	adds	r3, r7, r1
 800b090:	3201      	adds	r2, #1
 800b092:	701a      	strb	r2, [r3, #0]
    buf++;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3301      	adds	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f2      	bne.n	800b088 <USBD_GetLen+0x12>
  }

  return len;
 800b0a2:	230f      	movs	r3, #15
 800b0a4:	18fb      	adds	r3, r7, r3
 800b0a6:	781b      	ldrb	r3, [r3, #0]
}
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	b004      	add	sp, #16
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	1dbb      	adds	r3, r7, #6
 800b0bc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	23a5      	movs	r3, #165	; 0xa5
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	2102      	movs	r1, #2
 800b0c6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800b0c8:	1dbb      	adds	r3, r7, #6
 800b0ca:	881a      	ldrh	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b0d0:	1dbb      	adds	r3, r7, #6
 800b0d2:	881a      	ldrh	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d8:	1dbb      	adds	r3, r7, #6
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f000 fd06 	bl	800baf2 <USBD_LL_Transmit>

  return USBD_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	0018      	movs	r0, r3
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	b004      	add	sp, #16
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	1dbb      	adds	r3, r7, #6
 800b0fc:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0fe:	1dbb      	adds	r3, r7, #6
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	2100      	movs	r1, #0
 800b108:	f000 fcf3 	bl	800baf2 <USBD_LL_Transmit>

  return USBD_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	0018      	movs	r0, r3
 800b110:	46bd      	mov	sp, r7
 800b112:	b004      	add	sp, #16
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	1dbb      	adds	r3, r7, #6
 800b122:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	23a5      	movs	r3, #165	; 0xa5
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	2103      	movs	r1, #3
 800b12c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800b12e:	1dbb      	adds	r3, r7, #6
 800b130:	8819      	ldrh	r1, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	23ae      	movs	r3, #174	; 0xae
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800b13a:	1dbb      	adds	r3, r7, #6
 800b13c:	8819      	ldrh	r1, [r3, #0]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	23b0      	movs	r3, #176	; 0xb0
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b146:	1dbb      	adds	r3, r7, #6
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	2100      	movs	r1, #0
 800b150:	f000 fd06 	bl	800bb60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	0018      	movs	r0, r3
 800b158:	46bd      	mov	sp, r7
 800b15a:	b004      	add	sp, #16
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	1dbb      	adds	r3, r7, #6
 800b16a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b16c:	1dbb      	adds	r3, r7, #6
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	2100      	movs	r1, #0
 800b176:	f000 fcf3 	bl	800bb60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	0018      	movs	r0, r3
 800b17e:	46bd      	mov	sp, r7
 800b180:	b004      	add	sp, #16
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	23a5      	movs	r3, #165	; 0xa5
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	2104      	movs	r1, #4
 800b194:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	2300      	movs	r3, #0
 800b19a:	2200      	movs	r2, #0
 800b19c:	2100      	movs	r1, #0
 800b19e:	f000 fca8 	bl	800baf2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	b002      	add	sp, #8
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	23a5      	movs	r3, #165	; 0xa5
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	2105      	movs	r1, #5
 800b1bc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f000 fccb 	bl	800bb60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1d8:	4914      	ldr	r1, [pc, #80]	; (800b22c <MX_USB_DEVICE_Init+0x58>)
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f7fe fdea 	bl	8009db8 <USBD_Init>
 800b1e4:	1e03      	subs	r3, r0, #0
 800b1e6:	d001      	beq.n	800b1ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1e8:	f7f6 f8a8 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1ec:	4a11      	ldr	r2, [pc, #68]	; (800b234 <MX_USB_DEVICE_Init+0x60>)
 800b1ee:	4b10      	ldr	r3, [pc, #64]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b1f0:	0011      	movs	r1, r2
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f7fe fe11 	bl	8009e1a <USBD_RegisterClass>
 800b1f8:	1e03      	subs	r3, r0, #0
 800b1fa:	d001      	beq.n	800b200 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800b1fc:	f7f6 f89e 	bl	800133c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b200:	4a0d      	ldr	r2, [pc, #52]	; (800b238 <MX_USB_DEVICE_Init+0x64>)
 800b202:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b204:	0011      	movs	r1, r2
 800b206:	0018      	movs	r0, r3
 800b208:	f7fe fd26 	bl	8009c58 <USBD_CDC_RegisterInterface>
 800b20c:	1e03      	subs	r3, r0, #0
 800b20e:	d001      	beq.n	800b214 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b210:	f7f6 f894 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <MX_USB_DEVICE_Init+0x5c>)
 800b216:	0018      	movs	r0, r3
 800b218:	f7fe fe1f 	bl	8009e5a <USBD_Start>
 800b21c:	1e03      	subs	r3, r0, #0
 800b21e:	d001      	beq.n	800b224 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b220:	f7f6 f88c 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b224:	46c0      	nop			; (mov r8, r8)
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	46c0      	nop			; (mov r8, r8)
 800b22c:	2000012c 	.word	0x2000012c
 800b230:	20000614 	.word	0x20000614
 800b234:	20000018 	.word	0x20000018
 800b238:	2000011c 	.word	0x2000011c

0800b23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b240:	4907      	ldr	r1, [pc, #28]	; (800b260 <CDC_Init_FS+0x24>)
 800b242:	4b08      	ldr	r3, [pc, #32]	; (800b264 <CDC_Init_FS+0x28>)
 800b244:	2200      	movs	r2, #0
 800b246:	0018      	movs	r0, r3
 800b248:	f7fe fd21 	bl	8009c8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b24c:	4a06      	ldr	r2, [pc, #24]	; (800b268 <CDC_Init_FS+0x2c>)
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <CDC_Init_FS+0x28>)
 800b250:	0011      	movs	r1, r2
 800b252:	0018      	movs	r0, r3
 800b254:	f7fe fd37 	bl	8009cc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b258:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b25a:	0018      	movs	r0, r3
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20000cc0 	.word	0x20000cc0
 800b264:	20000614 	.word	0x20000614
 800b268:	200008d8 	.word	0x200008d8

0800b26c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b270:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b272:	0018      	movs	r0, r3
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6039      	str	r1, [r7, #0]
 800b280:	0011      	movs	r1, r2
 800b282:	1dfb      	adds	r3, r7, #7
 800b284:	1c02      	adds	r2, r0, #0
 800b286:	701a      	strb	r2, [r3, #0]
 800b288:	1d3b      	adds	r3, r7, #4
 800b28a:	1c0a      	adds	r2, r1, #0
 800b28c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b28e:	1dfb      	adds	r3, r7, #7
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b23      	cmp	r3, #35	; 0x23
 800b294:	d804      	bhi.n	800b2a0 <CDC_Control_FS+0x28>
 800b296:	009a      	lsls	r2, r3, #2
 800b298:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <CDC_Control_FS+0x34>)
 800b29a:	18d3      	adds	r3, r2, r3
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2a0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b2a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	0800c6bc 	.word	0x0800c6bc

0800b2b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2b0:	b590      	push	{r4, r7, lr}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800b2ba:	4b18      	ldr	r3, [pc, #96]	; (800b31c <CDC_Receive_FS+0x6c>)
 800b2bc:	785a      	ldrb	r2, [r3, #1]
 800b2be:	2101      	movs	r1, #1
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	705a      	strb	r2, [r3, #1]

  for(uint8_t i = 0; i < *Len; i++)
 800b2c4:	230f      	movs	r3, #15
 800b2c6:	18fb      	adds	r3, r7, r3
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]
 800b2cc:	e00f      	b.n	800b2ee <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800b2ce:	4b14      	ldr	r3, [pc, #80]	; (800b320 <CDC_Receive_FS+0x70>)
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	240f      	movs	r4, #15
 800b2d4:	193b      	adds	r3, r7, r4
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	18d3      	adds	r3, r2, r3
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	0019      	movs	r1, r3
 800b2e0:	f7f6 f866 	bl	80013b0 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800b2e4:	193b      	adds	r3, r7, r4
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	193b      	adds	r3, r7, r4
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	230f      	movs	r3, #15
 800b2f0:	18fb      	adds	r3, r7, r3
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d3e8      	bcc.n	800b2ce <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <CDC_Receive_FS+0x74>)
 800b300:	0011      	movs	r1, r2
 800b302:	0018      	movs	r0, r3
 800b304:	f7fe fcdf 	bl	8009cc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b308:	4b06      	ldr	r3, [pc, #24]	; (800b324 <CDC_Receive_FS+0x74>)
 800b30a:	0018      	movs	r0, r3
 800b30c:	f7fe fd26 	bl	8009d5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b312:	0018      	movs	r0, r3
 800b314:	46bd      	mov	sp, r7
 800b316:	b005      	add	sp, #20
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	46c0      	nop			; (mov r8, r8)
 800b31c:	20000588 	.word	0x20000588
 800b320:	200010a8 	.word	0x200010a8
 800b324:	20000614 	.word	0x20000614

0800b328 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b328:	b5b0      	push	{r4, r5, r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	000a      	movs	r2, r1
 800b332:	1cbb      	adds	r3, r7, #2
 800b334:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b336:	230f      	movs	r3, #15
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	2200      	movs	r2, #0
 800b33c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b33e:	4a11      	ldr	r2, [pc, #68]	; (800b384 <CDC_Transmit_FS+0x5c>)
 800b340:	23ae      	movs	r3, #174	; 0xae
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	58d3      	ldr	r3, [r2, r3]
 800b346:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	2385      	movs	r3, #133	; 0x85
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	58d3      	ldr	r3, [r2, r3]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b354:	2301      	movs	r3, #1
 800b356:	e010      	b.n	800b37a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b358:	1cbb      	adds	r3, r7, #2
 800b35a:	881a      	ldrh	r2, [r3, #0]
 800b35c:	6879      	ldr	r1, [r7, #4]
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <CDC_Transmit_FS+0x5c>)
 800b360:	0018      	movs	r0, r3
 800b362:	f7fe fc94 	bl	8009c8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b366:	250f      	movs	r5, #15
 800b368:	197c      	adds	r4, r7, r5
 800b36a:	4b06      	ldr	r3, [pc, #24]	; (800b384 <CDC_Transmit_FS+0x5c>)
 800b36c:	0018      	movs	r0, r3
 800b36e:	f7fe fcbe 	bl	8009cee <USBD_CDC_TransmitPacket>
 800b372:	0003      	movs	r3, r0
 800b374:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b376:	197b      	adds	r3, r7, r5
 800b378:	781b      	ldrb	r3, [r3, #0]
}
 800b37a:	0018      	movs	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	b004      	add	sp, #16
 800b380:	bdb0      	pop	{r4, r5, r7, pc}
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	20000614 	.word	0x20000614

0800b388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	0002      	movs	r2, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	1dfb      	adds	r3, r7, #7
 800b394:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2212      	movs	r2, #18
 800b39a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b39e:	0018      	movs	r0, r3
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	b002      	add	sp, #8
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	46c0      	nop			; (mov r8, r8)
 800b3a8:	20000148 	.word	0x20000148

0800b3ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	0002      	movs	r2, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	1dfb      	adds	r3, r7, #7
 800b3b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2204      	movs	r2, #4
 800b3be:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3c0:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	b002      	add	sp, #8
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	2000015c 	.word	0x2000015c

0800b3d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	0002      	movs	r2, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	1dfb      	adds	r3, r7, #7
 800b3dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b3de:	1dfb      	adds	r3, r7, #7
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	4908      	ldr	r1, [pc, #32]	; (800b40c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b3ea:	4b09      	ldr	r3, [pc, #36]	; (800b410 <USBD_FS_ProductStrDescriptor+0x40>)
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f7ff fdf4 	bl	800afda <USBD_GetString>
 800b3f2:	e005      	b.n	800b400 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	4905      	ldr	r1, [pc, #20]	; (800b40c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <USBD_FS_ProductStrDescriptor+0x40>)
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f7ff fded 	bl	800afda <USBD_GetString>
  }
  return USBD_StrDesc;
 800b400:	4b02      	ldr	r3, [pc, #8]	; (800b40c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b402:	0018      	movs	r0, r3
 800b404:	46bd      	mov	sp, r7
 800b406:	b002      	add	sp, #8
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	200010ac 	.word	0x200010ac
 800b410:	0800c5fc 	.word	0x0800c5fc

0800b414 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	0002      	movs	r2, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	1dfb      	adds	r3, r7, #7
 800b420:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	4904      	ldr	r1, [pc, #16]	; (800b438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b426:	4b05      	ldr	r3, [pc, #20]	; (800b43c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b428:	0018      	movs	r0, r3
 800b42a:	f7ff fdd6 	bl	800afda <USBD_GetString>
  return USBD_StrDesc;
 800b42e:	4b02      	ldr	r3, [pc, #8]	; (800b438 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b430:	0018      	movs	r0, r3
 800b432:	46bd      	mov	sp, r7
 800b434:	b002      	add	sp, #8
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200010ac 	.word	0x200010ac
 800b43c:	0800c614 	.word	0x0800c614

0800b440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	0002      	movs	r2, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	1dfb      	adds	r3, r7, #7
 800b44c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	221a      	movs	r2, #26
 800b452:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b454:	f000 f84c 	bl	800b4f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b45a:	0018      	movs	r0, r3
 800b45c:	46bd      	mov	sp, r7
 800b45e:	b002      	add	sp, #8
 800b460:	bd80      	pop	{r7, pc}
 800b462:	46c0      	nop			; (mov r8, r8)
 800b464:	20000160 	.word	0x20000160

0800b468 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	0002      	movs	r2, r0
 800b470:	6039      	str	r1, [r7, #0]
 800b472:	1dfb      	adds	r3, r7, #7
 800b474:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b476:	1dfb      	adds	r3, r7, #7
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	4908      	ldr	r1, [pc, #32]	; (800b4a4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b482:	4b09      	ldr	r3, [pc, #36]	; (800b4a8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b484:	0018      	movs	r0, r3
 800b486:	f7ff fda8 	bl	800afda <USBD_GetString>
 800b48a:	e005      	b.n	800b498 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4905      	ldr	r1, [pc, #20]	; (800b4a4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b492:	0018      	movs	r0, r3
 800b494:	f7ff fda1 	bl	800afda <USBD_GetString>
  }
  return USBD_StrDesc;
 800b498:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b49a:	0018      	movs	r0, r3
 800b49c:	46bd      	mov	sp, r7
 800b49e:	b002      	add	sp, #8
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	46c0      	nop			; (mov r8, r8)
 800b4a4:	200010ac 	.word	0x200010ac
 800b4a8:	0800c628 	.word	0x0800c628

0800b4ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	0002      	movs	r2, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	1dfb      	adds	r3, r7, #7
 800b4b8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b4ba:	1dfb      	adds	r3, r7, #7
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d106      	bne.n	800b4d0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	4908      	ldr	r1, [pc, #32]	; (800b4e8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b4c6:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b4c8:	0018      	movs	r0, r3
 800b4ca:	f7ff fd86 	bl	800afda <USBD_GetString>
 800b4ce:	e005      	b.n	800b4dc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	4905      	ldr	r1, [pc, #20]	; (800b4e8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	f7ff fd7f 	bl	800afda <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b4de:	0018      	movs	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	200010ac 	.word	0x200010ac
 800b4ec:	0800c634 	.word	0x0800c634

0800b4f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4f6:	4b10      	ldr	r3, [pc, #64]	; (800b538 <Get_SerialNum+0x48>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4fc:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <Get_SerialNum+0x4c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b502:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <Get_SerialNum+0x50>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	18d3      	adds	r3, r2, r3
 800b50e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00b      	beq.n	800b52e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b516:	490b      	ldr	r1, [pc, #44]	; (800b544 <Get_SerialNum+0x54>)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2208      	movs	r2, #8
 800b51c:	0018      	movs	r0, r3
 800b51e:	f000 f815 	bl	800b54c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b522:	4909      	ldr	r1, [pc, #36]	; (800b548 <Get_SerialNum+0x58>)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2204      	movs	r2, #4
 800b528:	0018      	movs	r0, r3
 800b52a:	f000 f80f 	bl	800b54c <IntToUnicode>
  }
}
 800b52e:	46c0      	nop			; (mov r8, r8)
 800b530:	46bd      	mov	sp, r7
 800b532:	b004      	add	sp, #16
 800b534:	bd80      	pop	{r7, pc}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	1ffff7ac 	.word	0x1ffff7ac
 800b53c:	1ffff7b0 	.word	0x1ffff7b0
 800b540:	1ffff7b4 	.word	0x1ffff7b4
 800b544:	20000162 	.word	0x20000162
 800b548:	20000172 	.word	0x20000172

0800b54c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	1dfb      	adds	r3, r7, #7
 800b558:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b55a:	2117      	movs	r1, #23
 800b55c:	187b      	adds	r3, r7, r1
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b562:	187b      	adds	r3, r7, r1
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	e02f      	b.n	800b5ca <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	0f1b      	lsrs	r3, r3, #28
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d80d      	bhi.n	800b58e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	0f1b      	lsrs	r3, r3, #28
 800b576:	b2da      	uxtb	r2, r3
 800b578:	2317      	movs	r3, #23
 800b57a:	18fb      	adds	r3, r7, r3
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	0019      	movs	r1, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	185b      	adds	r3, r3, r1
 800b586:	3230      	adds	r2, #48	; 0x30
 800b588:	b2d2      	uxtb	r2, r2
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e00c      	b.n	800b5a8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	0f1b      	lsrs	r3, r3, #28
 800b592:	b2da      	uxtb	r2, r3
 800b594:	2317      	movs	r3, #23
 800b596:	18fb      	adds	r3, r7, r3
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	0019      	movs	r1, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	185b      	adds	r3, r3, r1
 800b5a2:	3237      	adds	r2, #55	; 0x37
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	011b      	lsls	r3, r3, #4
 800b5ac:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5ae:	2117      	movs	r1, #23
 800b5b0:	187b      	adds	r3, r7, r1
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	18d3      	adds	r3, r2, r3
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5c0:	187b      	adds	r3, r7, r1
 800b5c2:	781a      	ldrb	r2, [r3, #0]
 800b5c4:	187b      	adds	r3, r7, r1
 800b5c6:	3201      	adds	r2, #1
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	2317      	movs	r3, #23
 800b5cc:	18fa      	adds	r2, r7, r3
 800b5ce:	1dfb      	adds	r3, r7, #7
 800b5d0:	7812      	ldrb	r2, [r2, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d3c8      	bcc.n	800b56a <IntToUnicode+0x1e>
  }
}
 800b5d8:	46c0      	nop			; (mov r8, r8)
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	b006      	add	sp, #24
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a0e      	ldr	r2, [pc, #56]	; (800b62c <HAL_PCD_MspInit+0x48>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d115      	bne.n	800b622 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5f6:	4b0e      	ldr	r3, [pc, #56]	; (800b630 <HAL_PCD_MspInit+0x4c>)
 800b5f8:	69da      	ldr	r2, [r3, #28]
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <HAL_PCD_MspInit+0x4c>)
 800b5fc:	2180      	movs	r1, #128	; 0x80
 800b5fe:	0409      	lsls	r1, r1, #16
 800b600:	430a      	orrs	r2, r1
 800b602:	61da      	str	r2, [r3, #28]
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <HAL_PCD_MspInit+0x4c>)
 800b606:	69da      	ldr	r2, [r3, #28]
 800b608:	2380      	movs	r3, #128	; 0x80
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	4013      	ands	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	201f      	movs	r0, #31
 800b618:	f7f6 fd12 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b61c:	201f      	movs	r0, #31
 800b61e:	f7f6 fd24 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	46bd      	mov	sp, r7
 800b626:	b004      	add	sp, #16
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	40005c00 	.word	0x40005c00
 800b630:	40021000 	.word	0x40021000

0800b634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	23bc      	movs	r3, #188	; 0xbc
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	58d2      	ldr	r2, [r2, r3]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	21ac      	movs	r1, #172	; 0xac
 800b648:	0089      	lsls	r1, r1, #2
 800b64a:	468c      	mov	ip, r1
 800b64c:	4463      	add	r3, ip
 800b64e:	0019      	movs	r1, r3
 800b650:	0010      	movs	r0, r2
 800b652:	f7fe fc55 	bl	8009f00 <USBD_LL_SetupStage>
}
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	46bd      	mov	sp, r7
 800b65a:	b002      	add	sp, #8
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b65e:	b590      	push	{r4, r7, lr}
 800b660:	b083      	sub	sp, #12
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	000a      	movs	r2, r1
 800b668:	1cfb      	adds	r3, r7, #3
 800b66a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	23bc      	movs	r3, #188	; 0xbc
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	58d4      	ldr	r4, [r2, r3]
 800b674:	1cfb      	adds	r3, r7, #3
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	23be      	movs	r3, #190	; 0xbe
 800b67c:	0059      	lsls	r1, r3, #1
 800b67e:	0013      	movs	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	189b      	adds	r3, r3, r2
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	18c3      	adds	r3, r0, r3
 800b688:	185b      	adds	r3, r3, r1
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	1cfb      	adds	r3, r7, #3
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	0019      	movs	r1, r3
 800b692:	0020      	movs	r0, r4
 800b694:	f7fe fc92 	bl	8009fbc <USBD_LL_DataOutStage>
}
 800b698:	46c0      	nop			; (mov r8, r8)
 800b69a:	46bd      	mov	sp, r7
 800b69c:	b003      	add	sp, #12
 800b69e:	bd90      	pop	{r4, r7, pc}

0800b6a0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	000a      	movs	r2, r1
 800b6aa:	1cfb      	adds	r3, r7, #3
 800b6ac:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	23bc      	movs	r3, #188	; 0xbc
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	58d0      	ldr	r0, [r2, r3]
 800b6b6:	1cfb      	adds	r3, r7, #3
 800b6b8:	781a      	ldrb	r2, [r3, #0]
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	0013      	movs	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	18cb      	adds	r3, r1, r3
 800b6c6:	333c      	adds	r3, #60	; 0x3c
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	1cfb      	adds	r3, r7, #3
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	0019      	movs	r1, r3
 800b6d0:	f7fe fcf6 	bl	800a0c0 <USBD_LL_DataInStage>
}
 800b6d4:	46c0      	nop			; (mov r8, r8)
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	b002      	add	sp, #8
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	23bc      	movs	r3, #188	; 0xbc
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	58d3      	ldr	r3, [r2, r3]
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	f7fe fe2d 	bl	800a34c <USBD_LL_SOF>
}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	b002      	add	sp, #8
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b702:	230f      	movs	r3, #15
 800b704:	18fb      	adds	r3, r7, r3
 800b706:	2201      	movs	r2, #1
 800b708:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d001      	beq.n	800b716 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b712:	f7f5 fe13 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	23bc      	movs	r3, #188	; 0xbc
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	58d2      	ldr	r2, [r2, r3]
 800b71e:	230f      	movs	r3, #15
 800b720:	18fb      	adds	r3, r7, r3
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	0019      	movs	r1, r3
 800b726:	0010      	movs	r0, r2
 800b728:	f7fe fdcf 	bl	800a2ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	23bc      	movs	r3, #188	; 0xbc
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	58d3      	ldr	r3, [r2, r3]
 800b734:	0018      	movs	r0, r3
 800b736:	f7fe fd80 	bl	800a23a <USBD_LL_Reset>
}
 800b73a:	46c0      	nop			; (mov r8, r8)
 800b73c:	46bd      	mov	sp, r7
 800b73e:	b004      	add	sp, #16
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	23bc      	movs	r3, #188	; 0xbc
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	58d3      	ldr	r3, [r2, r3]
 800b754:	0018      	movs	r0, r3
 800b756:	f7fe fdc9 	bl	800a2ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d005      	beq.n	800b76e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <HAL_PCD_SuspendCallback+0x34>)
 800b764:	691a      	ldr	r2, [r3, #16]
 800b766:	4b04      	ldr	r3, [pc, #16]	; (800b778 <HAL_PCD_SuspendCallback+0x34>)
 800b768:	2106      	movs	r1, #6
 800b76a:	430a      	orrs	r2, r1
 800b76c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b76e:	46c0      	nop			; (mov r8, r8)
 800b770:	46bd      	mov	sp, r7
 800b772:	b002      	add	sp, #8
 800b774:	bd80      	pop	{r7, pc}
 800b776:	46c0      	nop			; (mov r8, r8)
 800b778:	e000ed00 	.word	0xe000ed00

0800b77c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <HAL_PCD_ResumeCallback+0x38>)
 800b78e:	691a      	ldr	r2, [r3, #16]
 800b790:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <HAL_PCD_ResumeCallback+0x38>)
 800b792:	2106      	movs	r1, #6
 800b794:	438a      	bics	r2, r1
 800b796:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b798:	f000 fa44 	bl	800bc24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	23bc      	movs	r3, #188	; 0xbc
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	58d3      	ldr	r3, [r2, r3]
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f7fe fdb9 	bl	800a31c <USBD_LL_Resume>
}
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	b002      	add	sp, #8
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	e000ed00 	.word	0xe000ed00

0800b7b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b7c0:	4a2d      	ldr	r2, [pc, #180]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7c2:	23bc      	movs	r3, #188	; 0xbc
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	23b0      	movs	r3, #176	; 0xb0
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4929      	ldr	r1, [pc, #164]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7d2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b7d4:	4b28      	ldr	r3, [pc, #160]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7d6:	4a29      	ldr	r2, [pc, #164]	; (800b87c <USBD_LL_Init+0xc4>)
 800b7d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7da:	4b27      	ldr	r3, [pc, #156]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7dc:	2208      	movs	r2, #8
 800b7de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7e6:	4b24      	ldr	r3, [pc, #144]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7ec:	4b22      	ldr	r3, [pc, #136]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7f2:	4b21      	ldr	r3, [pc, #132]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7f8:	4b1f      	ldr	r3, [pc, #124]	; (800b878 <USBD_LL_Init+0xc0>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7fe:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <USBD_LL_Init+0xc0>)
 800b800:	0018      	movs	r0, r3
 800b802:	f7f6 ffbd 	bl	8002780 <HAL_PCD_Init>
 800b806:	1e03      	subs	r3, r0, #0
 800b808:	d001      	beq.n	800b80e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b80a:	f7f5 fd97 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	23b0      	movs	r3, #176	; 0xb0
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	58d0      	ldr	r0, [r2, r3]
 800b816:	2318      	movs	r3, #24
 800b818:	2200      	movs	r2, #0
 800b81a:	2100      	movs	r1, #0
 800b81c:	f7f8 fd9e 	bl	800435c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	23b0      	movs	r3, #176	; 0xb0
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	58d0      	ldr	r0, [r2, r3]
 800b828:	2358      	movs	r3, #88	; 0x58
 800b82a:	2200      	movs	r2, #0
 800b82c:	2180      	movs	r1, #128	; 0x80
 800b82e:	f7f8 fd95 	bl	800435c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	23b0      	movs	r3, #176	; 0xb0
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	58d0      	ldr	r0, [r2, r3]
 800b83a:	23c0      	movs	r3, #192	; 0xc0
 800b83c:	2200      	movs	r2, #0
 800b83e:	2181      	movs	r1, #129	; 0x81
 800b840:	f7f8 fd8c 	bl	800435c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	23b0      	movs	r3, #176	; 0xb0
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	58d0      	ldr	r0, [r2, r3]
 800b84c:	2388      	movs	r3, #136	; 0x88
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	2200      	movs	r2, #0
 800b852:	2101      	movs	r1, #1
 800b854:	f7f8 fd82 	bl	800435c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	23b0      	movs	r3, #176	; 0xb0
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	58d0      	ldr	r0, [r2, r3]
 800b860:	2380      	movs	r3, #128	; 0x80
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	2200      	movs	r2, #0
 800b866:	2182      	movs	r1, #130	; 0x82
 800b868:	f7f8 fd78 	bl	800435c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	0018      	movs	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	b002      	add	sp, #8
 800b874:	bd80      	pop	{r7, pc}
 800b876:	46c0      	nop			; (mov r8, r8)
 800b878:	200012ac 	.word	0x200012ac
 800b87c:	40005c00 	.word	0x40005c00

0800b880 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b888:	210f      	movs	r1, #15
 800b88a:	187b      	adds	r3, r7, r1
 800b88c:	2200      	movs	r2, #0
 800b88e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b890:	260e      	movs	r6, #14
 800b892:	19bb      	adds	r3, r7, r6
 800b894:	2200      	movs	r2, #0
 800b896:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	23b0      	movs	r3, #176	; 0xb0
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	58d3      	ldr	r3, [r2, r3]
 800b8a0:	000d      	movs	r5, r1
 800b8a2:	187c      	adds	r4, r7, r1
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	f7f7 f87b 	bl	80029a0 <HAL_PCD_Start>
 800b8aa:	0003      	movs	r3, r0
 800b8ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ae:	19bc      	adds	r4, r7, r6
 800b8b0:	197b      	adds	r3, r7, r5
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f000 f9bc 	bl	800bc32 <USBD_Get_USB_Status>
 800b8ba:	0003      	movs	r3, r0
 800b8bc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8be:	19bb      	adds	r3, r7, r6
 800b8c0:	781b      	ldrb	r3, [r3, #0]
}
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	b005      	add	sp, #20
 800b8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	000c      	movs	r4, r1
 800b8d4:	0010      	movs	r0, r2
 800b8d6:	0019      	movs	r1, r3
 800b8d8:	1cfb      	adds	r3, r7, #3
 800b8da:	1c22      	adds	r2, r4, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	1cbb      	adds	r3, r7, #2
 800b8e0:	1c02      	adds	r2, r0, #0
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	003b      	movs	r3, r7
 800b8e6:	1c0a      	adds	r2, r1, #0
 800b8e8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ea:	260f      	movs	r6, #15
 800b8ec:	19bb      	adds	r3, r7, r6
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f2:	250e      	movs	r5, #14
 800b8f4:	197b      	adds	r3, r7, r5
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	23b0      	movs	r3, #176	; 0xb0
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	58d0      	ldr	r0, [r2, r3]
 800b902:	19bc      	adds	r4, r7, r6
 800b904:	1cbb      	adds	r3, r7, #2
 800b906:	781d      	ldrb	r5, [r3, #0]
 800b908:	003b      	movs	r3, r7
 800b90a:	881a      	ldrh	r2, [r3, #0]
 800b90c:	1cfb      	adds	r3, r7, #3
 800b90e:	7819      	ldrb	r1, [r3, #0]
 800b910:	002b      	movs	r3, r5
 800b912:	f7f7 fa12 	bl	8002d3a <HAL_PCD_EP_Open>
 800b916:	0003      	movs	r3, r0
 800b918:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91a:	250e      	movs	r5, #14
 800b91c:	197c      	adds	r4, r7, r5
 800b91e:	19bb      	adds	r3, r7, r6
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	0018      	movs	r0, r3
 800b924:	f000 f985 	bl	800bc32 <USBD_Get_USB_Status>
 800b928:	0003      	movs	r3, r0
 800b92a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b92c:	197b      	adds	r3, r7, r5
 800b92e:	781b      	ldrb	r3, [r3, #0]
}
 800b930:	0018      	movs	r0, r3
 800b932:	46bd      	mov	sp, r7
 800b934:	b005      	add	sp, #20
 800b936:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b938 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	000a      	movs	r2, r1
 800b942:	1cfb      	adds	r3, r7, #3
 800b944:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b946:	210f      	movs	r1, #15
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	2200      	movs	r2, #0
 800b94c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94e:	260e      	movs	r6, #14
 800b950:	19bb      	adds	r3, r7, r6
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	23b0      	movs	r3, #176	; 0xb0
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	58d2      	ldr	r2, [r2, r3]
 800b95e:	000d      	movs	r5, r1
 800b960:	187c      	adds	r4, r7, r1
 800b962:	1cfb      	adds	r3, r7, #3
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	0019      	movs	r1, r3
 800b968:	0010      	movs	r0, r2
 800b96a:	f7f7 fa5e 	bl	8002e2a <HAL_PCD_EP_Close>
 800b96e:	0003      	movs	r3, r0
 800b970:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b972:	19bc      	adds	r4, r7, r6
 800b974:	197b      	adds	r3, r7, r5
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	0018      	movs	r0, r3
 800b97a:	f000 f95a 	bl	800bc32 <USBD_Get_USB_Status>
 800b97e:	0003      	movs	r3, r0
 800b980:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b982:	19bb      	adds	r3, r7, r6
 800b984:	781b      	ldrb	r3, [r3, #0]
}
 800b986:	0018      	movs	r0, r3
 800b988:	46bd      	mov	sp, r7
 800b98a:	b005      	add	sp, #20
 800b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b98e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	000a      	movs	r2, r1
 800b998:	1cfb      	adds	r3, r7, #3
 800b99a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b99c:	210f      	movs	r1, #15
 800b99e:	187b      	adds	r3, r7, r1
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a4:	260e      	movs	r6, #14
 800b9a6:	19bb      	adds	r3, r7, r6
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	23b0      	movs	r3, #176	; 0xb0
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	58d2      	ldr	r2, [r2, r3]
 800b9b4:	000d      	movs	r5, r1
 800b9b6:	187c      	adds	r4, r7, r1
 800b9b8:	1cfb      	adds	r3, r7, #3
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	0019      	movs	r1, r3
 800b9be:	0010      	movs	r0, r2
 800b9c0:	f7f7 fb2a 	bl	8003018 <HAL_PCD_EP_SetStall>
 800b9c4:	0003      	movs	r3, r0
 800b9c6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c8:	19bc      	adds	r4, r7, r6
 800b9ca:	197b      	adds	r3, r7, r5
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f000 f92f 	bl	800bc32 <USBD_Get_USB_Status>
 800b9d4:	0003      	movs	r3, r0
 800b9d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b9d8:	19bb      	adds	r3, r7, r6
 800b9da:	781b      	ldrb	r3, [r3, #0]
}
 800b9dc:	0018      	movs	r0, r3
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	b005      	add	sp, #20
 800b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	000a      	movs	r2, r1
 800b9ee:	1cfb      	adds	r3, r7, #3
 800b9f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f2:	210f      	movs	r1, #15
 800b9f4:	187b      	adds	r3, r7, r1
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fa:	260e      	movs	r6, #14
 800b9fc:	19bb      	adds	r3, r7, r6
 800b9fe:	2200      	movs	r2, #0
 800ba00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	23b0      	movs	r3, #176	; 0xb0
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	58d2      	ldr	r2, [r2, r3]
 800ba0a:	000d      	movs	r5, r1
 800ba0c:	187c      	adds	r4, r7, r1
 800ba0e:	1cfb      	adds	r3, r7, #3
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	0019      	movs	r1, r3
 800ba14:	0010      	movs	r0, r2
 800ba16:	f7f7 fb5b 	bl	80030d0 <HAL_PCD_EP_ClrStall>
 800ba1a:	0003      	movs	r3, r0
 800ba1c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba1e:	19bc      	adds	r4, r7, r6
 800ba20:	197b      	adds	r3, r7, r5
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	0018      	movs	r0, r3
 800ba26:	f000 f904 	bl	800bc32 <USBD_Get_USB_Status>
 800ba2a:	0003      	movs	r3, r0
 800ba2c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ba2e:	19bb      	adds	r3, r7, r6
 800ba30:	781b      	ldrb	r3, [r3, #0]
}
 800ba32:	0018      	movs	r0, r3
 800ba34:	46bd      	mov	sp, r7
 800ba36:	b005      	add	sp, #20
 800ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba3a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	000a      	movs	r2, r1
 800ba44:	1cfb      	adds	r3, r7, #3
 800ba46:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	23b0      	movs	r3, #176	; 0xb0
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	58d3      	ldr	r3, [r2, r3]
 800ba50:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba52:	1cfb      	adds	r3, r7, #3
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	b25b      	sxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	da0d      	bge.n	800ba78 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba5c:	1cfb      	adds	r3, r7, #3
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	227f      	movs	r2, #127	; 0x7f
 800ba62:	4013      	ands	r3, r2
 800ba64:	68f9      	ldr	r1, [r7, #12]
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	0013      	movs	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	18cb      	adds	r3, r1, r3
 800ba72:	3302      	adds	r3, #2
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	e00d      	b.n	800ba94 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba78:	1cfb      	adds	r3, r7, #3
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	227f      	movs	r2, #127	; 0x7f
 800ba7e:	401a      	ands	r2, r3
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	23b5      	movs	r3, #181	; 0xb5
 800ba84:	0059      	lsls	r1, r3, #1
 800ba86:	0013      	movs	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	18c3      	adds	r3, r0, r3
 800ba90:	185b      	adds	r3, r3, r1
 800ba92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba94:	0018      	movs	r0, r3
 800ba96:	46bd      	mov	sp, r7
 800ba98:	b004      	add	sp, #16
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	000a      	movs	r2, r1
 800baa6:	1cfb      	adds	r3, r7, #3
 800baa8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baaa:	210f      	movs	r1, #15
 800baac:	187b      	adds	r3, r7, r1
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab2:	260e      	movs	r6, #14
 800bab4:	19bb      	adds	r3, r7, r6
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	23b0      	movs	r3, #176	; 0xb0
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	58d2      	ldr	r2, [r2, r3]
 800bac2:	000d      	movs	r5, r1
 800bac4:	187c      	adds	r4, r7, r1
 800bac6:	1cfb      	adds	r3, r7, #3
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	0019      	movs	r1, r3
 800bacc:	0010      	movs	r0, r2
 800bace:	f7f7 f909 	bl	8002ce4 <HAL_PCD_SetAddress>
 800bad2:	0003      	movs	r3, r0
 800bad4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bad6:	19bc      	adds	r4, r7, r6
 800bad8:	197b      	adds	r3, r7, r5
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	0018      	movs	r0, r3
 800bade:	f000 f8a8 	bl	800bc32 <USBD_Get_USB_Status>
 800bae2:	0003      	movs	r3, r0
 800bae4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bae6:	19bb      	adds	r3, r7, r6
 800bae8:	781b      	ldrb	r3, [r3, #0]
}
 800baea:	0018      	movs	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	b005      	add	sp, #20
 800baf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800baf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800baf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf4:	b087      	sub	sp, #28
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	0008      	movs	r0, r1
 800bafc:	607a      	str	r2, [r7, #4]
 800bafe:	0019      	movs	r1, r3
 800bb00:	230b      	movs	r3, #11
 800bb02:	18fb      	adds	r3, r7, r3
 800bb04:	1c02      	adds	r2, r0, #0
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	2408      	movs	r4, #8
 800bb0a:	193b      	adds	r3, r7, r4
 800bb0c:	1c0a      	adds	r2, r1, #0
 800bb0e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb10:	2117      	movs	r1, #23
 800bb12:	187b      	adds	r3, r7, r1
 800bb14:	2200      	movs	r2, #0
 800bb16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb18:	2516      	movs	r5, #22
 800bb1a:	197b      	adds	r3, r7, r5
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	23b0      	movs	r3, #176	; 0xb0
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	58d0      	ldr	r0, [r2, r3]
 800bb28:	193b      	adds	r3, r7, r4
 800bb2a:	881d      	ldrh	r5, [r3, #0]
 800bb2c:	000e      	movs	r6, r1
 800bb2e:	187c      	adds	r4, r7, r1
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	230b      	movs	r3, #11
 800bb34:	18fb      	adds	r3, r7, r3
 800bb36:	7819      	ldrb	r1, [r3, #0]
 800bb38:	002b      	movs	r3, r5
 800bb3a:	f7f7 fa24 	bl	8002f86 <HAL_PCD_EP_Transmit>
 800bb3e:	0003      	movs	r3, r0
 800bb40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb42:	2516      	movs	r5, #22
 800bb44:	197c      	adds	r4, r7, r5
 800bb46:	19bb      	adds	r3, r7, r6
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	0018      	movs	r0, r3
 800bb4c:	f000 f871 	bl	800bc32 <USBD_Get_USB_Status>
 800bb50:	0003      	movs	r3, r0
 800bb52:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bb54:	197b      	adds	r3, r7, r5
 800bb56:	781b      	ldrb	r3, [r3, #0]
}
 800bb58:	0018      	movs	r0, r3
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	b007      	add	sp, #28
 800bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	0008      	movs	r0, r1
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	230b      	movs	r3, #11
 800bb70:	18fb      	adds	r3, r7, r3
 800bb72:	1c02      	adds	r2, r0, #0
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	2408      	movs	r4, #8
 800bb78:	193b      	adds	r3, r7, r4
 800bb7a:	1c0a      	adds	r2, r1, #0
 800bb7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7e:	2117      	movs	r1, #23
 800bb80:	187b      	adds	r3, r7, r1
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb86:	2516      	movs	r5, #22
 800bb88:	197b      	adds	r3, r7, r5
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	23b0      	movs	r3, #176	; 0xb0
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	58d0      	ldr	r0, [r2, r3]
 800bb96:	193b      	adds	r3, r7, r4
 800bb98:	881d      	ldrh	r5, [r3, #0]
 800bb9a:	000e      	movs	r6, r1
 800bb9c:	187c      	adds	r4, r7, r1
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	230b      	movs	r3, #11
 800bba2:	18fb      	adds	r3, r7, r3
 800bba4:	7819      	ldrb	r1, [r3, #0]
 800bba6:	002b      	movs	r3, r5
 800bba8:	f7f7 f990 	bl	8002ecc <HAL_PCD_EP_Receive>
 800bbac:	0003      	movs	r3, r0
 800bbae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbb0:	2516      	movs	r5, #22
 800bbb2:	197c      	adds	r4, r7, r5
 800bbb4:	19bb      	adds	r3, r7, r6
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f000 f83a 	bl	800bc32 <USBD_Get_USB_Status>
 800bbbe:	0003      	movs	r3, r0
 800bbc0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bbc2:	197b      	adds	r3, r7, r5
 800bbc4:	781b      	ldrb	r3, [r3, #0]
}
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b007      	add	sp, #28
 800bbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	000a      	movs	r2, r1
 800bbd8:	1cfb      	adds	r3, r7, #3
 800bbda:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	23b0      	movs	r3, #176	; 0xb0
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	58d2      	ldr	r2, [r2, r3]
 800bbe4:	1cfb      	adds	r3, r7, #3
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	0019      	movs	r1, r3
 800bbea:	0010      	movs	r0, r2
 800bbec:	f7f7 f9b2 	bl	8002f54 <HAL_PCD_EP_GetRxCount>
 800bbf0:	0003      	movs	r3, r0
}
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	b002      	add	sp, #8
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc04:	4b02      	ldr	r3, [pc, #8]	; (800bc10 <USBD_static_malloc+0x14>)
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b002      	add	sp, #8
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	20000218 	.word	0x20000218

0800bc14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]

}
 800bc1c:	46c0      	nop			; (mov r8, r8)
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b002      	add	sp, #8
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bc28:	f7f4 fe7a 	bl	8000920 <SystemClock_Config>
}
 800bc2c:	46c0      	nop			; (mov r8, r8)
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	0002      	movs	r2, r0
 800bc3a:	1dfb      	adds	r3, r7, #7
 800bc3c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3e:	230f      	movs	r3, #15
 800bc40:	18fb      	adds	r3, r7, r3
 800bc42:	2200      	movs	r2, #0
 800bc44:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800bc46:	1dfb      	adds	r3, r7, #7
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d017      	beq.n	800bc7e <USBD_Get_USB_Status+0x4c>
 800bc4e:	dc1b      	bgt.n	800bc88 <USBD_Get_USB_Status+0x56>
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d00f      	beq.n	800bc74 <USBD_Get_USB_Status+0x42>
 800bc54:	dc18      	bgt.n	800bc88 <USBD_Get_USB_Status+0x56>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <USBD_Get_USB_Status+0x2e>
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d005      	beq.n	800bc6a <USBD_Get_USB_Status+0x38>
 800bc5e:	e013      	b.n	800bc88 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc60:	230f      	movs	r3, #15
 800bc62:	18fb      	adds	r3, r7, r3
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
    break;
 800bc68:	e013      	b.n	800bc92 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc6a:	230f      	movs	r3, #15
 800bc6c:	18fb      	adds	r3, r7, r3
 800bc6e:	2202      	movs	r2, #2
 800bc70:	701a      	strb	r2, [r3, #0]
    break;
 800bc72:	e00e      	b.n	800bc92 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc74:	230f      	movs	r3, #15
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	2201      	movs	r2, #1
 800bc7a:	701a      	strb	r2, [r3, #0]
    break;
 800bc7c:	e009      	b.n	800bc92 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc7e:	230f      	movs	r3, #15
 800bc80:	18fb      	adds	r3, r7, r3
 800bc82:	2202      	movs	r2, #2
 800bc84:	701a      	strb	r2, [r3, #0]
    break;
 800bc86:	e004      	b.n	800bc92 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800bc88:	230f      	movs	r3, #15
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	701a      	strb	r2, [r3, #0]
    break;
 800bc90:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800bc92:	230f      	movs	r3, #15
 800bc94:	18fb      	adds	r3, r7, r3
 800bc96:	781b      	ldrb	r3, [r3, #0]
}
 800bc98:	0018      	movs	r0, r3
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	b004      	add	sp, #16
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <__errno>:
 800bca0:	4b01      	ldr	r3, [pc, #4]	; (800bca8 <__errno+0x8>)
 800bca2:	6818      	ldr	r0, [r3, #0]
 800bca4:	4770      	bx	lr
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	2000017c 	.word	0x2000017c

0800bcac <__libc_init_array>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	2600      	movs	r6, #0
 800bcb0:	4d0c      	ldr	r5, [pc, #48]	; (800bce4 <__libc_init_array+0x38>)
 800bcb2:	4c0d      	ldr	r4, [pc, #52]	; (800bce8 <__libc_init_array+0x3c>)
 800bcb4:	1b64      	subs	r4, r4, r5
 800bcb6:	10a4      	asrs	r4, r4, #2
 800bcb8:	42a6      	cmp	r6, r4
 800bcba:	d109      	bne.n	800bcd0 <__libc_init_array+0x24>
 800bcbc:	2600      	movs	r6, #0
 800bcbe:	f000 fc5b 	bl	800c578 <_init>
 800bcc2:	4d0a      	ldr	r5, [pc, #40]	; (800bcec <__libc_init_array+0x40>)
 800bcc4:	4c0a      	ldr	r4, [pc, #40]	; (800bcf0 <__libc_init_array+0x44>)
 800bcc6:	1b64      	subs	r4, r4, r5
 800bcc8:	10a4      	asrs	r4, r4, #2
 800bcca:	42a6      	cmp	r6, r4
 800bccc:	d105      	bne.n	800bcda <__libc_init_array+0x2e>
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	00b3      	lsls	r3, r6, #2
 800bcd2:	58eb      	ldr	r3, [r5, r3]
 800bcd4:	4798      	blx	r3
 800bcd6:	3601      	adds	r6, #1
 800bcd8:	e7ee      	b.n	800bcb8 <__libc_init_array+0xc>
 800bcda:	00b3      	lsls	r3, r6, #2
 800bcdc:	58eb      	ldr	r3, [r5, r3]
 800bcde:	4798      	blx	r3
 800bce0:	3601      	adds	r6, #1
 800bce2:	e7f2      	b.n	800bcca <__libc_init_array+0x1e>
 800bce4:	0800c780 	.word	0x0800c780
 800bce8:	0800c780 	.word	0x0800c780
 800bcec:	0800c780 	.word	0x0800c780
 800bcf0:	0800c784 	.word	0x0800c784

0800bcf4 <malloc>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <malloc+0x10>)
 800bcf8:	0001      	movs	r1, r0
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	f000 f860 	bl	800bdc0 <_malloc_r>
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	2000017c 	.word	0x2000017c

0800bd08 <free>:
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <free+0x10>)
 800bd0c:	0001      	movs	r1, r0
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	f000 f80c 	bl	800bd2c <_free_r>
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	46c0      	nop			; (mov r8, r8)
 800bd18:	2000017c 	.word	0x2000017c

0800bd1c <memset>:
 800bd1c:	0003      	movs	r3, r0
 800bd1e:	1882      	adds	r2, r0, r2
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d100      	bne.n	800bd26 <memset+0xa>
 800bd24:	4770      	bx	lr
 800bd26:	7019      	strb	r1, [r3, #0]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	e7f9      	b.n	800bd20 <memset+0x4>

0800bd2c <_free_r>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	0005      	movs	r5, r0
 800bd30:	2900      	cmp	r1, #0
 800bd32:	d010      	beq.n	800bd56 <_free_r+0x2a>
 800bd34:	1f0c      	subs	r4, r1, #4
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	da00      	bge.n	800bd3e <_free_r+0x12>
 800bd3c:	18e4      	adds	r4, r4, r3
 800bd3e:	0028      	movs	r0, r5
 800bd40:	f000 f8ce 	bl	800bee0 <__malloc_lock>
 800bd44:	4a1d      	ldr	r2, [pc, #116]	; (800bdbc <_free_r+0x90>)
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d105      	bne.n	800bd58 <_free_r+0x2c>
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	6014      	str	r4, [r2, #0]
 800bd50:	0028      	movs	r0, r5
 800bd52:	f000 f8cd 	bl	800bef0 <__malloc_unlock>
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d908      	bls.n	800bd6e <_free_r+0x42>
 800bd5c:	6821      	ldr	r1, [r4, #0]
 800bd5e:	1860      	adds	r0, r4, r1
 800bd60:	4283      	cmp	r3, r0
 800bd62:	d1f3      	bne.n	800bd4c <_free_r+0x20>
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	1841      	adds	r1, r0, r1
 800bd6a:	6021      	str	r1, [r4, #0]
 800bd6c:	e7ee      	b.n	800bd4c <_free_r+0x20>
 800bd6e:	001a      	movs	r2, r3
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <_free_r+0x4e>
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	d9f9      	bls.n	800bd6e <_free_r+0x42>
 800bd7a:	6811      	ldr	r1, [r2, #0]
 800bd7c:	1850      	adds	r0, r2, r1
 800bd7e:	42a0      	cmp	r0, r4
 800bd80:	d10b      	bne.n	800bd9a <_free_r+0x6e>
 800bd82:	6820      	ldr	r0, [r4, #0]
 800bd84:	1809      	adds	r1, r1, r0
 800bd86:	1850      	adds	r0, r2, r1
 800bd88:	6011      	str	r1, [r2, #0]
 800bd8a:	4283      	cmp	r3, r0
 800bd8c:	d1e0      	bne.n	800bd50 <_free_r+0x24>
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	1841      	adds	r1, r0, r1
 800bd94:	6011      	str	r1, [r2, #0]
 800bd96:	6053      	str	r3, [r2, #4]
 800bd98:	e7da      	b.n	800bd50 <_free_r+0x24>
 800bd9a:	42a0      	cmp	r0, r4
 800bd9c:	d902      	bls.n	800bda4 <_free_r+0x78>
 800bd9e:	230c      	movs	r3, #12
 800bda0:	602b      	str	r3, [r5, #0]
 800bda2:	e7d5      	b.n	800bd50 <_free_r+0x24>
 800bda4:	6821      	ldr	r1, [r4, #0]
 800bda6:	1860      	adds	r0, r4, r1
 800bda8:	4283      	cmp	r3, r0
 800bdaa:	d103      	bne.n	800bdb4 <_free_r+0x88>
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	1841      	adds	r1, r0, r1
 800bdb2:	6021      	str	r1, [r4, #0]
 800bdb4:	6063      	str	r3, [r4, #4]
 800bdb6:	6054      	str	r4, [r2, #4]
 800bdb8:	e7ca      	b.n	800bd50 <_free_r+0x24>
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	20000438 	.word	0x20000438

0800bdc0 <_malloc_r>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	1ccd      	adds	r5, r1, #3
 800bdc6:	439d      	bics	r5, r3
 800bdc8:	3508      	adds	r5, #8
 800bdca:	0006      	movs	r6, r0
 800bdcc:	2d0c      	cmp	r5, #12
 800bdce:	d21f      	bcs.n	800be10 <_malloc_r+0x50>
 800bdd0:	250c      	movs	r5, #12
 800bdd2:	42a9      	cmp	r1, r5
 800bdd4:	d81e      	bhi.n	800be14 <_malloc_r+0x54>
 800bdd6:	0030      	movs	r0, r6
 800bdd8:	f000 f882 	bl	800bee0 <__malloc_lock>
 800bddc:	4925      	ldr	r1, [pc, #148]	; (800be74 <_malloc_r+0xb4>)
 800bdde:	680a      	ldr	r2, [r1, #0]
 800bde0:	0014      	movs	r4, r2
 800bde2:	2c00      	cmp	r4, #0
 800bde4:	d11a      	bne.n	800be1c <_malloc_r+0x5c>
 800bde6:	4f24      	ldr	r7, [pc, #144]	; (800be78 <_malloc_r+0xb8>)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d104      	bne.n	800bdf8 <_malloc_r+0x38>
 800bdee:	0021      	movs	r1, r4
 800bdf0:	0030      	movs	r0, r6
 800bdf2:	f000 f843 	bl	800be7c <_sbrk_r>
 800bdf6:	6038      	str	r0, [r7, #0]
 800bdf8:	0029      	movs	r1, r5
 800bdfa:	0030      	movs	r0, r6
 800bdfc:	f000 f83e 	bl	800be7c <_sbrk_r>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d12b      	bne.n	800be5c <_malloc_r+0x9c>
 800be04:	230c      	movs	r3, #12
 800be06:	0030      	movs	r0, r6
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	f000 f871 	bl	800bef0 <__malloc_unlock>
 800be0e:	e003      	b.n	800be18 <_malloc_r+0x58>
 800be10:	2d00      	cmp	r5, #0
 800be12:	dade      	bge.n	800bdd2 <_malloc_r+0x12>
 800be14:	230c      	movs	r3, #12
 800be16:	6033      	str	r3, [r6, #0]
 800be18:	2000      	movs	r0, #0
 800be1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1b5b      	subs	r3, r3, r5
 800be20:	d419      	bmi.n	800be56 <_malloc_r+0x96>
 800be22:	2b0b      	cmp	r3, #11
 800be24:	d903      	bls.n	800be2e <_malloc_r+0x6e>
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	18e4      	adds	r4, r4, r3
 800be2a:	6025      	str	r5, [r4, #0]
 800be2c:	e003      	b.n	800be36 <_malloc_r+0x76>
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	42a2      	cmp	r2, r4
 800be32:	d10e      	bne.n	800be52 <_malloc_r+0x92>
 800be34:	600b      	str	r3, [r1, #0]
 800be36:	0030      	movs	r0, r6
 800be38:	f000 f85a 	bl	800bef0 <__malloc_unlock>
 800be3c:	0020      	movs	r0, r4
 800be3e:	2207      	movs	r2, #7
 800be40:	300b      	adds	r0, #11
 800be42:	1d23      	adds	r3, r4, #4
 800be44:	4390      	bics	r0, r2
 800be46:	1ac2      	subs	r2, r0, r3
 800be48:	4298      	cmp	r0, r3
 800be4a:	d0e6      	beq.n	800be1a <_malloc_r+0x5a>
 800be4c:	1a1b      	subs	r3, r3, r0
 800be4e:	50a3      	str	r3, [r4, r2]
 800be50:	e7e3      	b.n	800be1a <_malloc_r+0x5a>
 800be52:	6053      	str	r3, [r2, #4]
 800be54:	e7ef      	b.n	800be36 <_malloc_r+0x76>
 800be56:	0022      	movs	r2, r4
 800be58:	6864      	ldr	r4, [r4, #4]
 800be5a:	e7c2      	b.n	800bde2 <_malloc_r+0x22>
 800be5c:	2303      	movs	r3, #3
 800be5e:	1cc4      	adds	r4, r0, #3
 800be60:	439c      	bics	r4, r3
 800be62:	42a0      	cmp	r0, r4
 800be64:	d0e1      	beq.n	800be2a <_malloc_r+0x6a>
 800be66:	1a21      	subs	r1, r4, r0
 800be68:	0030      	movs	r0, r6
 800be6a:	f000 f807 	bl	800be7c <_sbrk_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d1db      	bne.n	800be2a <_malloc_r+0x6a>
 800be72:	e7c7      	b.n	800be04 <_malloc_r+0x44>
 800be74:	20000438 	.word	0x20000438
 800be78:	2000043c 	.word	0x2000043c

0800be7c <_sbrk_r>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b570      	push	{r4, r5, r6, lr}
 800be80:	4d06      	ldr	r5, [pc, #24]	; (800be9c <_sbrk_r+0x20>)
 800be82:	0004      	movs	r4, r0
 800be84:	0008      	movs	r0, r1
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	f7f5 fcf2 	bl	8001870 <_sbrk>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d103      	bne.n	800be98 <_sbrk_r+0x1c>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d000      	beq.n	800be98 <_sbrk_r+0x1c>
 800be96:	6023      	str	r3, [r4, #0]
 800be98:	bd70      	pop	{r4, r5, r6, pc}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	200015a0 	.word	0x200015a0

0800bea0 <siprintf>:
 800bea0:	b40e      	push	{r1, r2, r3}
 800bea2:	b500      	push	{lr}
 800bea4:	490b      	ldr	r1, [pc, #44]	; (800bed4 <siprintf+0x34>)
 800bea6:	b09c      	sub	sp, #112	; 0x70
 800bea8:	ab1d      	add	r3, sp, #116	; 0x74
 800beaa:	9002      	str	r0, [sp, #8]
 800beac:	9006      	str	r0, [sp, #24]
 800beae:	9107      	str	r1, [sp, #28]
 800beb0:	9104      	str	r1, [sp, #16]
 800beb2:	4809      	ldr	r0, [pc, #36]	; (800bed8 <siprintf+0x38>)
 800beb4:	4909      	ldr	r1, [pc, #36]	; (800bedc <siprintf+0x3c>)
 800beb6:	cb04      	ldmia	r3!, {r2}
 800beb8:	9105      	str	r1, [sp, #20]
 800beba:	6800      	ldr	r0, [r0, #0]
 800bebc:	a902      	add	r1, sp, #8
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	f000 f880 	bl	800bfc4 <_svfiprintf_r>
 800bec4:	2300      	movs	r3, #0
 800bec6:	9a02      	ldr	r2, [sp, #8]
 800bec8:	7013      	strb	r3, [r2, #0]
 800beca:	b01c      	add	sp, #112	; 0x70
 800becc:	bc08      	pop	{r3}
 800bece:	b003      	add	sp, #12
 800bed0:	4718      	bx	r3
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	7fffffff 	.word	0x7fffffff
 800bed8:	2000017c 	.word	0x2000017c
 800bedc:	ffff0208 	.word	0xffff0208

0800bee0 <__malloc_lock>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4802      	ldr	r0, [pc, #8]	; (800beec <__malloc_lock+0xc>)
 800bee4:	f000 faf0 	bl	800c4c8 <__retarget_lock_acquire_recursive>
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	46c0      	nop			; (mov r8, r8)
 800beec:	200015a8 	.word	0x200015a8

0800bef0 <__malloc_unlock>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	4802      	ldr	r0, [pc, #8]	; (800befc <__malloc_unlock+0xc>)
 800bef4:	f000 fae9 	bl	800c4ca <__retarget_lock_release_recursive>
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	200015a8 	.word	0x200015a8

0800bf00 <__ssputs_r>:
 800bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf02:	688e      	ldr	r6, [r1, #8]
 800bf04:	b085      	sub	sp, #20
 800bf06:	0007      	movs	r7, r0
 800bf08:	000c      	movs	r4, r1
 800bf0a:	9203      	str	r2, [sp, #12]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	429e      	cmp	r6, r3
 800bf10:	d83c      	bhi.n	800bf8c <__ssputs_r+0x8c>
 800bf12:	2390      	movs	r3, #144	; 0x90
 800bf14:	898a      	ldrh	r2, [r1, #12]
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	421a      	tst	r2, r3
 800bf1a:	d034      	beq.n	800bf86 <__ssputs_r+0x86>
 800bf1c:	2503      	movs	r5, #3
 800bf1e:	6909      	ldr	r1, [r1, #16]
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	1a5b      	subs	r3, r3, r1
 800bf24:	9302      	str	r3, [sp, #8]
 800bf26:	6963      	ldr	r3, [r4, #20]
 800bf28:	9802      	ldr	r0, [sp, #8]
 800bf2a:	435d      	muls	r5, r3
 800bf2c:	0feb      	lsrs	r3, r5, #31
 800bf2e:	195d      	adds	r5, r3, r5
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	106d      	asrs	r5, r5, #1
 800bf34:	3301      	adds	r3, #1
 800bf36:	181b      	adds	r3, r3, r0
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	d900      	bls.n	800bf3e <__ssputs_r+0x3e>
 800bf3c:	001d      	movs	r5, r3
 800bf3e:	0553      	lsls	r3, r2, #21
 800bf40:	d532      	bpl.n	800bfa8 <__ssputs_r+0xa8>
 800bf42:	0029      	movs	r1, r5
 800bf44:	0038      	movs	r0, r7
 800bf46:	f7ff ff3b 	bl	800bdc0 <_malloc_r>
 800bf4a:	1e06      	subs	r6, r0, #0
 800bf4c:	d109      	bne.n	800bf62 <__ssputs_r+0x62>
 800bf4e:	230c      	movs	r3, #12
 800bf50:	603b      	str	r3, [r7, #0]
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	2001      	movs	r0, #1
 800bf56:	89a2      	ldrh	r2, [r4, #12]
 800bf58:	4240      	negs	r0, r0
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	b005      	add	sp, #20
 800bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf62:	9a02      	ldr	r2, [sp, #8]
 800bf64:	6921      	ldr	r1, [r4, #16]
 800bf66:	f000 fabc 	bl	800c4e2 <memcpy>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	4a14      	ldr	r2, [pc, #80]	; (800bfc0 <__ssputs_r+0xc0>)
 800bf6e:	401a      	ands	r2, r3
 800bf70:	2380      	movs	r3, #128	; 0x80
 800bf72:	4313      	orrs	r3, r2
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	9b02      	ldr	r3, [sp, #8]
 800bf78:	6126      	str	r6, [r4, #16]
 800bf7a:	18f6      	adds	r6, r6, r3
 800bf7c:	6026      	str	r6, [r4, #0]
 800bf7e:	6165      	str	r5, [r4, #20]
 800bf80:	9e01      	ldr	r6, [sp, #4]
 800bf82:	1aed      	subs	r5, r5, r3
 800bf84:	60a5      	str	r5, [r4, #8]
 800bf86:	9b01      	ldr	r3, [sp, #4]
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	d900      	bls.n	800bf8e <__ssputs_r+0x8e>
 800bf8c:	9e01      	ldr	r6, [sp, #4]
 800bf8e:	0032      	movs	r2, r6
 800bf90:	9903      	ldr	r1, [sp, #12]
 800bf92:	6820      	ldr	r0, [r4, #0]
 800bf94:	f000 faae 	bl	800c4f4 <memmove>
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	1b9b      	subs	r3, r3, r6
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	199e      	adds	r6, r3, r6
 800bfa4:	6026      	str	r6, [r4, #0]
 800bfa6:	e7da      	b.n	800bf5e <__ssputs_r+0x5e>
 800bfa8:	002a      	movs	r2, r5
 800bfaa:	0038      	movs	r0, r7
 800bfac:	f000 fab5 	bl	800c51a <_realloc_r>
 800bfb0:	1e06      	subs	r6, r0, #0
 800bfb2:	d1e0      	bne.n	800bf76 <__ssputs_r+0x76>
 800bfb4:	0038      	movs	r0, r7
 800bfb6:	6921      	ldr	r1, [r4, #16]
 800bfb8:	f7ff feb8 	bl	800bd2c <_free_r>
 800bfbc:	e7c7      	b.n	800bf4e <__ssputs_r+0x4e>
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	fffffb7f 	.word	0xfffffb7f

0800bfc4 <_svfiprintf_r>:
 800bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc6:	b0a1      	sub	sp, #132	; 0x84
 800bfc8:	9003      	str	r0, [sp, #12]
 800bfca:	001d      	movs	r5, r3
 800bfcc:	898b      	ldrh	r3, [r1, #12]
 800bfce:	000f      	movs	r7, r1
 800bfd0:	0016      	movs	r6, r2
 800bfd2:	061b      	lsls	r3, r3, #24
 800bfd4:	d511      	bpl.n	800bffa <_svfiprintf_r+0x36>
 800bfd6:	690b      	ldr	r3, [r1, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10e      	bne.n	800bffa <_svfiprintf_r+0x36>
 800bfdc:	2140      	movs	r1, #64	; 0x40
 800bfde:	f7ff feef 	bl	800bdc0 <_malloc_r>
 800bfe2:	6038      	str	r0, [r7, #0]
 800bfe4:	6138      	str	r0, [r7, #16]
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d105      	bne.n	800bff6 <_svfiprintf_r+0x32>
 800bfea:	230c      	movs	r3, #12
 800bfec:	9a03      	ldr	r2, [sp, #12]
 800bfee:	3801      	subs	r0, #1
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	b021      	add	sp, #132	; 0x84
 800bff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	617b      	str	r3, [r7, #20]
 800bffa:	2300      	movs	r3, #0
 800bffc:	ac08      	add	r4, sp, #32
 800bffe:	6163      	str	r3, [r4, #20]
 800c000:	3320      	adds	r3, #32
 800c002:	7663      	strb	r3, [r4, #25]
 800c004:	3310      	adds	r3, #16
 800c006:	76a3      	strb	r3, [r4, #26]
 800c008:	9507      	str	r5, [sp, #28]
 800c00a:	0035      	movs	r5, r6
 800c00c:	782b      	ldrb	r3, [r5, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <_svfiprintf_r+0x52>
 800c012:	2b25      	cmp	r3, #37	; 0x25
 800c014:	d147      	bne.n	800c0a6 <_svfiprintf_r+0xe2>
 800c016:	1bab      	subs	r3, r5, r6
 800c018:	9305      	str	r3, [sp, #20]
 800c01a:	42b5      	cmp	r5, r6
 800c01c:	d00c      	beq.n	800c038 <_svfiprintf_r+0x74>
 800c01e:	0032      	movs	r2, r6
 800c020:	0039      	movs	r1, r7
 800c022:	9803      	ldr	r0, [sp, #12]
 800c024:	f7ff ff6c 	bl	800bf00 <__ssputs_r>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d100      	bne.n	800c02e <_svfiprintf_r+0x6a>
 800c02c:	e0ae      	b.n	800c18c <_svfiprintf_r+0x1c8>
 800c02e:	6962      	ldr	r2, [r4, #20]
 800c030:	9b05      	ldr	r3, [sp, #20]
 800c032:	4694      	mov	ip, r2
 800c034:	4463      	add	r3, ip
 800c036:	6163      	str	r3, [r4, #20]
 800c038:	782b      	ldrb	r3, [r5, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d100      	bne.n	800c040 <_svfiprintf_r+0x7c>
 800c03e:	e0a5      	b.n	800c18c <_svfiprintf_r+0x1c8>
 800c040:	2201      	movs	r2, #1
 800c042:	2300      	movs	r3, #0
 800c044:	4252      	negs	r2, r2
 800c046:	6062      	str	r2, [r4, #4]
 800c048:	a904      	add	r1, sp, #16
 800c04a:	3254      	adds	r2, #84	; 0x54
 800c04c:	1852      	adds	r2, r2, r1
 800c04e:	1c6e      	adds	r6, r5, #1
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	60e3      	str	r3, [r4, #12]
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	7013      	strb	r3, [r2, #0]
 800c058:	65a3      	str	r3, [r4, #88]	; 0x58
 800c05a:	2205      	movs	r2, #5
 800c05c:	7831      	ldrb	r1, [r6, #0]
 800c05e:	4854      	ldr	r0, [pc, #336]	; (800c1b0 <_svfiprintf_r+0x1ec>)
 800c060:	f000 fa34 	bl	800c4cc <memchr>
 800c064:	1c75      	adds	r5, r6, #1
 800c066:	2800      	cmp	r0, #0
 800c068:	d11f      	bne.n	800c0aa <_svfiprintf_r+0xe6>
 800c06a:	6822      	ldr	r2, [r4, #0]
 800c06c:	06d3      	lsls	r3, r2, #27
 800c06e:	d504      	bpl.n	800c07a <_svfiprintf_r+0xb6>
 800c070:	2353      	movs	r3, #83	; 0x53
 800c072:	a904      	add	r1, sp, #16
 800c074:	185b      	adds	r3, r3, r1
 800c076:	2120      	movs	r1, #32
 800c078:	7019      	strb	r1, [r3, #0]
 800c07a:	0713      	lsls	r3, r2, #28
 800c07c:	d504      	bpl.n	800c088 <_svfiprintf_r+0xc4>
 800c07e:	2353      	movs	r3, #83	; 0x53
 800c080:	a904      	add	r1, sp, #16
 800c082:	185b      	adds	r3, r3, r1
 800c084:	212b      	movs	r1, #43	; 0x2b
 800c086:	7019      	strb	r1, [r3, #0]
 800c088:	7833      	ldrb	r3, [r6, #0]
 800c08a:	2b2a      	cmp	r3, #42	; 0x2a
 800c08c:	d016      	beq.n	800c0bc <_svfiprintf_r+0xf8>
 800c08e:	0035      	movs	r5, r6
 800c090:	2100      	movs	r1, #0
 800c092:	200a      	movs	r0, #10
 800c094:	68e3      	ldr	r3, [r4, #12]
 800c096:	782a      	ldrb	r2, [r5, #0]
 800c098:	1c6e      	adds	r6, r5, #1
 800c09a:	3a30      	subs	r2, #48	; 0x30
 800c09c:	2a09      	cmp	r2, #9
 800c09e:	d94e      	bls.n	800c13e <_svfiprintf_r+0x17a>
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d111      	bne.n	800c0c8 <_svfiprintf_r+0x104>
 800c0a4:	e017      	b.n	800c0d6 <_svfiprintf_r+0x112>
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	e7b0      	b.n	800c00c <_svfiprintf_r+0x48>
 800c0aa:	4b41      	ldr	r3, [pc, #260]	; (800c1b0 <_svfiprintf_r+0x1ec>)
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	1ac0      	subs	r0, r0, r3
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	4083      	lsls	r3, r0
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	002e      	movs	r6, r5
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	e7ce      	b.n	800c05a <_svfiprintf_r+0x96>
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	1d19      	adds	r1, r3, #4
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	9107      	str	r1, [sp, #28]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	db01      	blt.n	800c0cc <_svfiprintf_r+0x108>
 800c0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0ca:	e004      	b.n	800c0d6 <_svfiprintf_r+0x112>
 800c0cc:	425b      	negs	r3, r3
 800c0ce:	60e3      	str	r3, [r4, #12]
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	782b      	ldrb	r3, [r5, #0]
 800c0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c0da:	d10a      	bne.n	800c0f2 <_svfiprintf_r+0x12e>
 800c0dc:	786b      	ldrb	r3, [r5, #1]
 800c0de:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e0:	d135      	bne.n	800c14e <_svfiprintf_r+0x18a>
 800c0e2:	9b07      	ldr	r3, [sp, #28]
 800c0e4:	3502      	adds	r5, #2
 800c0e6:	1d1a      	adds	r2, r3, #4
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	9207      	str	r2, [sp, #28]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	db2b      	blt.n	800c148 <_svfiprintf_r+0x184>
 800c0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f2:	4e30      	ldr	r6, [pc, #192]	; (800c1b4 <_svfiprintf_r+0x1f0>)
 800c0f4:	2203      	movs	r2, #3
 800c0f6:	0030      	movs	r0, r6
 800c0f8:	7829      	ldrb	r1, [r5, #0]
 800c0fa:	f000 f9e7 	bl	800c4cc <memchr>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d006      	beq.n	800c110 <_svfiprintf_r+0x14c>
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	1b80      	subs	r0, r0, r6
 800c106:	4083      	lsls	r3, r0
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	3501      	adds	r5, #1
 800c10c:	4313      	orrs	r3, r2
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	7829      	ldrb	r1, [r5, #0]
 800c112:	2206      	movs	r2, #6
 800c114:	4828      	ldr	r0, [pc, #160]	; (800c1b8 <_svfiprintf_r+0x1f4>)
 800c116:	1c6e      	adds	r6, r5, #1
 800c118:	7621      	strb	r1, [r4, #24]
 800c11a:	f000 f9d7 	bl	800c4cc <memchr>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d03c      	beq.n	800c19c <_svfiprintf_r+0x1d8>
 800c122:	4b26      	ldr	r3, [pc, #152]	; (800c1bc <_svfiprintf_r+0x1f8>)
 800c124:	2b00      	cmp	r3, #0
 800c126:	d125      	bne.n	800c174 <_svfiprintf_r+0x1b0>
 800c128:	2207      	movs	r2, #7
 800c12a:	9b07      	ldr	r3, [sp, #28]
 800c12c:	3307      	adds	r3, #7
 800c12e:	4393      	bics	r3, r2
 800c130:	3308      	adds	r3, #8
 800c132:	9307      	str	r3, [sp, #28]
 800c134:	6963      	ldr	r3, [r4, #20]
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	189b      	adds	r3, r3, r2
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	e765      	b.n	800c00a <_svfiprintf_r+0x46>
 800c13e:	4343      	muls	r3, r0
 800c140:	0035      	movs	r5, r6
 800c142:	2101      	movs	r1, #1
 800c144:	189b      	adds	r3, r3, r2
 800c146:	e7a6      	b.n	800c096 <_svfiprintf_r+0xd2>
 800c148:	2301      	movs	r3, #1
 800c14a:	425b      	negs	r3, r3
 800c14c:	e7d0      	b.n	800c0f0 <_svfiprintf_r+0x12c>
 800c14e:	2300      	movs	r3, #0
 800c150:	200a      	movs	r0, #10
 800c152:	001a      	movs	r2, r3
 800c154:	3501      	adds	r5, #1
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	7829      	ldrb	r1, [r5, #0]
 800c15a:	1c6e      	adds	r6, r5, #1
 800c15c:	3930      	subs	r1, #48	; 0x30
 800c15e:	2909      	cmp	r1, #9
 800c160:	d903      	bls.n	800c16a <_svfiprintf_r+0x1a6>
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0c5      	beq.n	800c0f2 <_svfiprintf_r+0x12e>
 800c166:	9209      	str	r2, [sp, #36]	; 0x24
 800c168:	e7c3      	b.n	800c0f2 <_svfiprintf_r+0x12e>
 800c16a:	4342      	muls	r2, r0
 800c16c:	0035      	movs	r5, r6
 800c16e:	2301      	movs	r3, #1
 800c170:	1852      	adds	r2, r2, r1
 800c172:	e7f1      	b.n	800c158 <_svfiprintf_r+0x194>
 800c174:	ab07      	add	r3, sp, #28
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	003a      	movs	r2, r7
 800c17a:	0021      	movs	r1, r4
 800c17c:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <_svfiprintf_r+0x1fc>)
 800c17e:	9803      	ldr	r0, [sp, #12]
 800c180:	e000      	b.n	800c184 <_svfiprintf_r+0x1c0>
 800c182:	bf00      	nop
 800c184:	9004      	str	r0, [sp, #16]
 800c186:	9b04      	ldr	r3, [sp, #16]
 800c188:	3301      	adds	r3, #1
 800c18a:	d1d3      	bne.n	800c134 <_svfiprintf_r+0x170>
 800c18c:	89bb      	ldrh	r3, [r7, #12]
 800c18e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c190:	065b      	lsls	r3, r3, #25
 800c192:	d400      	bmi.n	800c196 <_svfiprintf_r+0x1d2>
 800c194:	e72d      	b.n	800bff2 <_svfiprintf_r+0x2e>
 800c196:	2001      	movs	r0, #1
 800c198:	4240      	negs	r0, r0
 800c19a:	e72a      	b.n	800bff2 <_svfiprintf_r+0x2e>
 800c19c:	ab07      	add	r3, sp, #28
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	003a      	movs	r2, r7
 800c1a2:	0021      	movs	r1, r4
 800c1a4:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <_svfiprintf_r+0x1fc>)
 800c1a6:	9803      	ldr	r0, [sp, #12]
 800c1a8:	f000 f87c 	bl	800c2a4 <_printf_i>
 800c1ac:	e7ea      	b.n	800c184 <_svfiprintf_r+0x1c0>
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	0800c74c 	.word	0x0800c74c
 800c1b4:	0800c752 	.word	0x0800c752
 800c1b8:	0800c756 	.word	0x0800c756
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	0800bf01 	.word	0x0800bf01

0800c1c4 <_printf_common>:
 800c1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c6:	0015      	movs	r5, r2
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	688a      	ldr	r2, [r1, #8]
 800c1cc:	690b      	ldr	r3, [r1, #16]
 800c1ce:	000c      	movs	r4, r1
 800c1d0:	9000      	str	r0, [sp, #0]
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	da00      	bge.n	800c1d8 <_printf_common+0x14>
 800c1d6:	0013      	movs	r3, r2
 800c1d8:	0022      	movs	r2, r4
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	3243      	adds	r2, #67	; 0x43
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	d001      	beq.n	800c1e8 <_printf_common+0x24>
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	069b      	lsls	r3, r3, #26
 800c1ec:	d502      	bpl.n	800c1f4 <_printf_common+0x30>
 800c1ee:	682b      	ldr	r3, [r5, #0]
 800c1f0:	3302      	adds	r3, #2
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	6822      	ldr	r2, [r4, #0]
 800c1f6:	2306      	movs	r3, #6
 800c1f8:	0017      	movs	r7, r2
 800c1fa:	401f      	ands	r7, r3
 800c1fc:	421a      	tst	r2, r3
 800c1fe:	d027      	beq.n	800c250 <_printf_common+0x8c>
 800c200:	0023      	movs	r3, r4
 800c202:	3343      	adds	r3, #67	; 0x43
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	1e5a      	subs	r2, r3, #1
 800c208:	4193      	sbcs	r3, r2
 800c20a:	6822      	ldr	r2, [r4, #0]
 800c20c:	0692      	lsls	r2, r2, #26
 800c20e:	d430      	bmi.n	800c272 <_printf_common+0xae>
 800c210:	0022      	movs	r2, r4
 800c212:	9901      	ldr	r1, [sp, #4]
 800c214:	9800      	ldr	r0, [sp, #0]
 800c216:	9e08      	ldr	r6, [sp, #32]
 800c218:	3243      	adds	r2, #67	; 0x43
 800c21a:	47b0      	blx	r6
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d025      	beq.n	800c26c <_printf_common+0xa8>
 800c220:	2306      	movs	r3, #6
 800c222:	6820      	ldr	r0, [r4, #0]
 800c224:	682a      	ldr	r2, [r5, #0]
 800c226:	68e1      	ldr	r1, [r4, #12]
 800c228:	2500      	movs	r5, #0
 800c22a:	4003      	ands	r3, r0
 800c22c:	2b04      	cmp	r3, #4
 800c22e:	d103      	bne.n	800c238 <_printf_common+0x74>
 800c230:	1a8d      	subs	r5, r1, r2
 800c232:	43eb      	mvns	r3, r5
 800c234:	17db      	asrs	r3, r3, #31
 800c236:	401d      	ands	r5, r3
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	6922      	ldr	r2, [r4, #16]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	dd01      	ble.n	800c244 <_printf_common+0x80>
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	18ed      	adds	r5, r5, r3
 800c244:	2700      	movs	r7, #0
 800c246:	42bd      	cmp	r5, r7
 800c248:	d120      	bne.n	800c28c <_printf_common+0xc8>
 800c24a:	2000      	movs	r0, #0
 800c24c:	e010      	b.n	800c270 <_printf_common+0xac>
 800c24e:	3701      	adds	r7, #1
 800c250:	68e3      	ldr	r3, [r4, #12]
 800c252:	682a      	ldr	r2, [r5, #0]
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	42bb      	cmp	r3, r7
 800c258:	ddd2      	ble.n	800c200 <_printf_common+0x3c>
 800c25a:	0022      	movs	r2, r4
 800c25c:	2301      	movs	r3, #1
 800c25e:	9901      	ldr	r1, [sp, #4]
 800c260:	9800      	ldr	r0, [sp, #0]
 800c262:	9e08      	ldr	r6, [sp, #32]
 800c264:	3219      	adds	r2, #25
 800c266:	47b0      	blx	r6
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d1f0      	bne.n	800c24e <_printf_common+0x8a>
 800c26c:	2001      	movs	r0, #1
 800c26e:	4240      	negs	r0, r0
 800c270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c272:	2030      	movs	r0, #48	; 0x30
 800c274:	18e1      	adds	r1, r4, r3
 800c276:	3143      	adds	r1, #67	; 0x43
 800c278:	7008      	strb	r0, [r1, #0]
 800c27a:	0021      	movs	r1, r4
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	3145      	adds	r1, #69	; 0x45
 800c280:	7809      	ldrb	r1, [r1, #0]
 800c282:	18a2      	adds	r2, r4, r2
 800c284:	3243      	adds	r2, #67	; 0x43
 800c286:	3302      	adds	r3, #2
 800c288:	7011      	strb	r1, [r2, #0]
 800c28a:	e7c1      	b.n	800c210 <_printf_common+0x4c>
 800c28c:	0022      	movs	r2, r4
 800c28e:	2301      	movs	r3, #1
 800c290:	9901      	ldr	r1, [sp, #4]
 800c292:	9800      	ldr	r0, [sp, #0]
 800c294:	9e08      	ldr	r6, [sp, #32]
 800c296:	321a      	adds	r2, #26
 800c298:	47b0      	blx	r6
 800c29a:	1c43      	adds	r3, r0, #1
 800c29c:	d0e6      	beq.n	800c26c <_printf_common+0xa8>
 800c29e:	3701      	adds	r7, #1
 800c2a0:	e7d1      	b.n	800c246 <_printf_common+0x82>
	...

0800c2a4 <_printf_i>:
 800c2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2a6:	b08b      	sub	sp, #44	; 0x2c
 800c2a8:	9206      	str	r2, [sp, #24]
 800c2aa:	000a      	movs	r2, r1
 800c2ac:	3243      	adds	r2, #67	; 0x43
 800c2ae:	9307      	str	r3, [sp, #28]
 800c2b0:	9005      	str	r0, [sp, #20]
 800c2b2:	9204      	str	r2, [sp, #16]
 800c2b4:	7e0a      	ldrb	r2, [r1, #24]
 800c2b6:	000c      	movs	r4, r1
 800c2b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ba:	2a78      	cmp	r2, #120	; 0x78
 800c2bc:	d806      	bhi.n	800c2cc <_printf_i+0x28>
 800c2be:	2a62      	cmp	r2, #98	; 0x62
 800c2c0:	d808      	bhi.n	800c2d4 <_printf_i+0x30>
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d100      	bne.n	800c2c8 <_printf_i+0x24>
 800c2c6:	e0c0      	b.n	800c44a <_printf_i+0x1a6>
 800c2c8:	2a58      	cmp	r2, #88	; 0x58
 800c2ca:	d052      	beq.n	800c372 <_printf_i+0xce>
 800c2cc:	0026      	movs	r6, r4
 800c2ce:	3642      	adds	r6, #66	; 0x42
 800c2d0:	7032      	strb	r2, [r6, #0]
 800c2d2:	e022      	b.n	800c31a <_printf_i+0x76>
 800c2d4:	0010      	movs	r0, r2
 800c2d6:	3863      	subs	r0, #99	; 0x63
 800c2d8:	2815      	cmp	r0, #21
 800c2da:	d8f7      	bhi.n	800c2cc <_printf_i+0x28>
 800c2dc:	f7f3 ff1c 	bl	8000118 <__gnu_thumb1_case_shi>
 800c2e0:	001f0016 	.word	0x001f0016
 800c2e4:	fff6fff6 	.word	0xfff6fff6
 800c2e8:	fff6fff6 	.word	0xfff6fff6
 800c2ec:	fff6001f 	.word	0xfff6001f
 800c2f0:	fff6fff6 	.word	0xfff6fff6
 800c2f4:	00a8fff6 	.word	0x00a8fff6
 800c2f8:	009a0036 	.word	0x009a0036
 800c2fc:	fff6fff6 	.word	0xfff6fff6
 800c300:	fff600b9 	.word	0xfff600b9
 800c304:	fff60036 	.word	0xfff60036
 800c308:	009efff6 	.word	0x009efff6
 800c30c:	0026      	movs	r6, r4
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	3642      	adds	r6, #66	; 0x42
 800c312:	1d11      	adds	r1, r2, #4
 800c314:	6019      	str	r1, [r3, #0]
 800c316:	6813      	ldr	r3, [r2, #0]
 800c318:	7033      	strb	r3, [r6, #0]
 800c31a:	2301      	movs	r3, #1
 800c31c:	e0a7      	b.n	800c46e <_printf_i+0x1ca>
 800c31e:	6808      	ldr	r0, [r1, #0]
 800c320:	6819      	ldr	r1, [r3, #0]
 800c322:	1d0a      	adds	r2, r1, #4
 800c324:	0605      	lsls	r5, r0, #24
 800c326:	d50b      	bpl.n	800c340 <_printf_i+0x9c>
 800c328:	680d      	ldr	r5, [r1, #0]
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	2d00      	cmp	r5, #0
 800c32e:	da03      	bge.n	800c338 <_printf_i+0x94>
 800c330:	232d      	movs	r3, #45	; 0x2d
 800c332:	9a04      	ldr	r2, [sp, #16]
 800c334:	426d      	negs	r5, r5
 800c336:	7013      	strb	r3, [r2, #0]
 800c338:	4b61      	ldr	r3, [pc, #388]	; (800c4c0 <_printf_i+0x21c>)
 800c33a:	270a      	movs	r7, #10
 800c33c:	9303      	str	r3, [sp, #12]
 800c33e:	e032      	b.n	800c3a6 <_printf_i+0x102>
 800c340:	680d      	ldr	r5, [r1, #0]
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	0641      	lsls	r1, r0, #25
 800c346:	d5f1      	bpl.n	800c32c <_printf_i+0x88>
 800c348:	b22d      	sxth	r5, r5
 800c34a:	e7ef      	b.n	800c32c <_printf_i+0x88>
 800c34c:	680d      	ldr	r5, [r1, #0]
 800c34e:	6819      	ldr	r1, [r3, #0]
 800c350:	1d08      	adds	r0, r1, #4
 800c352:	6018      	str	r0, [r3, #0]
 800c354:	062e      	lsls	r6, r5, #24
 800c356:	d501      	bpl.n	800c35c <_printf_i+0xb8>
 800c358:	680d      	ldr	r5, [r1, #0]
 800c35a:	e003      	b.n	800c364 <_printf_i+0xc0>
 800c35c:	066d      	lsls	r5, r5, #25
 800c35e:	d5fb      	bpl.n	800c358 <_printf_i+0xb4>
 800c360:	680d      	ldr	r5, [r1, #0]
 800c362:	b2ad      	uxth	r5, r5
 800c364:	4b56      	ldr	r3, [pc, #344]	; (800c4c0 <_printf_i+0x21c>)
 800c366:	270a      	movs	r7, #10
 800c368:	9303      	str	r3, [sp, #12]
 800c36a:	2a6f      	cmp	r2, #111	; 0x6f
 800c36c:	d117      	bne.n	800c39e <_printf_i+0xfa>
 800c36e:	2708      	movs	r7, #8
 800c370:	e015      	b.n	800c39e <_printf_i+0xfa>
 800c372:	3145      	adds	r1, #69	; 0x45
 800c374:	700a      	strb	r2, [r1, #0]
 800c376:	4a52      	ldr	r2, [pc, #328]	; (800c4c0 <_printf_i+0x21c>)
 800c378:	9203      	str	r2, [sp, #12]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	6821      	ldr	r1, [r4, #0]
 800c37e:	ca20      	ldmia	r2!, {r5}
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	0608      	lsls	r0, r1, #24
 800c384:	d550      	bpl.n	800c428 <_printf_i+0x184>
 800c386:	07cb      	lsls	r3, r1, #31
 800c388:	d502      	bpl.n	800c390 <_printf_i+0xec>
 800c38a:	2320      	movs	r3, #32
 800c38c:	4319      	orrs	r1, r3
 800c38e:	6021      	str	r1, [r4, #0]
 800c390:	2710      	movs	r7, #16
 800c392:	2d00      	cmp	r5, #0
 800c394:	d103      	bne.n	800c39e <_printf_i+0xfa>
 800c396:	2320      	movs	r3, #32
 800c398:	6822      	ldr	r2, [r4, #0]
 800c39a:	439a      	bics	r2, r3
 800c39c:	6022      	str	r2, [r4, #0]
 800c39e:	0023      	movs	r3, r4
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	3343      	adds	r3, #67	; 0x43
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	6863      	ldr	r3, [r4, #4]
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	db03      	blt.n	800c3b6 <_printf_i+0x112>
 800c3ae:	2204      	movs	r2, #4
 800c3b0:	6821      	ldr	r1, [r4, #0]
 800c3b2:	4391      	bics	r1, r2
 800c3b4:	6021      	str	r1, [r4, #0]
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d102      	bne.n	800c3c0 <_printf_i+0x11c>
 800c3ba:	9e04      	ldr	r6, [sp, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00c      	beq.n	800c3da <_printf_i+0x136>
 800c3c0:	9e04      	ldr	r6, [sp, #16]
 800c3c2:	0028      	movs	r0, r5
 800c3c4:	0039      	movs	r1, r7
 800c3c6:	f7f3 ff37 	bl	8000238 <__aeabi_uidivmod>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	3e01      	subs	r6, #1
 800c3ce:	5c5b      	ldrb	r3, [r3, r1]
 800c3d0:	7033      	strb	r3, [r6, #0]
 800c3d2:	002b      	movs	r3, r5
 800c3d4:	0005      	movs	r5, r0
 800c3d6:	429f      	cmp	r7, r3
 800c3d8:	d9f3      	bls.n	800c3c2 <_printf_i+0x11e>
 800c3da:	2f08      	cmp	r7, #8
 800c3dc:	d109      	bne.n	800c3f2 <_printf_i+0x14e>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	07db      	lsls	r3, r3, #31
 800c3e2:	d506      	bpl.n	800c3f2 <_printf_i+0x14e>
 800c3e4:	6863      	ldr	r3, [r4, #4]
 800c3e6:	6922      	ldr	r2, [r4, #16]
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	dc02      	bgt.n	800c3f2 <_printf_i+0x14e>
 800c3ec:	2330      	movs	r3, #48	; 0x30
 800c3ee:	3e01      	subs	r6, #1
 800c3f0:	7033      	strb	r3, [r6, #0]
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	1b9b      	subs	r3, r3, r6
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	9b07      	ldr	r3, [sp, #28]
 800c3fa:	0021      	movs	r1, r4
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	9805      	ldr	r0, [sp, #20]
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	aa09      	add	r2, sp, #36	; 0x24
 800c404:	f7ff fede 	bl	800c1c4 <_printf_common>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d135      	bne.n	800c478 <_printf_i+0x1d4>
 800c40c:	2001      	movs	r0, #1
 800c40e:	4240      	negs	r0, r0
 800c410:	b00b      	add	sp, #44	; 0x2c
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c414:	2220      	movs	r2, #32
 800c416:	6809      	ldr	r1, [r1, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	6022      	str	r2, [r4, #0]
 800c41c:	0022      	movs	r2, r4
 800c41e:	2178      	movs	r1, #120	; 0x78
 800c420:	3245      	adds	r2, #69	; 0x45
 800c422:	7011      	strb	r1, [r2, #0]
 800c424:	4a27      	ldr	r2, [pc, #156]	; (800c4c4 <_printf_i+0x220>)
 800c426:	e7a7      	b.n	800c378 <_printf_i+0xd4>
 800c428:	0648      	lsls	r0, r1, #25
 800c42a:	d5ac      	bpl.n	800c386 <_printf_i+0xe2>
 800c42c:	b2ad      	uxth	r5, r5
 800c42e:	e7aa      	b.n	800c386 <_printf_i+0xe2>
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	680d      	ldr	r5, [r1, #0]
 800c434:	1d10      	adds	r0, r2, #4
 800c436:	6949      	ldr	r1, [r1, #20]
 800c438:	6018      	str	r0, [r3, #0]
 800c43a:	6813      	ldr	r3, [r2, #0]
 800c43c:	062e      	lsls	r6, r5, #24
 800c43e:	d501      	bpl.n	800c444 <_printf_i+0x1a0>
 800c440:	6019      	str	r1, [r3, #0]
 800c442:	e002      	b.n	800c44a <_printf_i+0x1a6>
 800c444:	066d      	lsls	r5, r5, #25
 800c446:	d5fb      	bpl.n	800c440 <_printf_i+0x19c>
 800c448:	8019      	strh	r1, [r3, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9e04      	ldr	r6, [sp, #16]
 800c44e:	6123      	str	r3, [r4, #16]
 800c450:	e7d2      	b.n	800c3f8 <_printf_i+0x154>
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	1d11      	adds	r1, r2, #4
 800c456:	6019      	str	r1, [r3, #0]
 800c458:	6816      	ldr	r6, [r2, #0]
 800c45a:	2100      	movs	r1, #0
 800c45c:	0030      	movs	r0, r6
 800c45e:	6862      	ldr	r2, [r4, #4]
 800c460:	f000 f834 	bl	800c4cc <memchr>
 800c464:	2800      	cmp	r0, #0
 800c466:	d001      	beq.n	800c46c <_printf_i+0x1c8>
 800c468:	1b80      	subs	r0, r0, r6
 800c46a:	6060      	str	r0, [r4, #4]
 800c46c:	6863      	ldr	r3, [r4, #4]
 800c46e:	6123      	str	r3, [r4, #16]
 800c470:	2300      	movs	r3, #0
 800c472:	9a04      	ldr	r2, [sp, #16]
 800c474:	7013      	strb	r3, [r2, #0]
 800c476:	e7bf      	b.n	800c3f8 <_printf_i+0x154>
 800c478:	6923      	ldr	r3, [r4, #16]
 800c47a:	0032      	movs	r2, r6
 800c47c:	9906      	ldr	r1, [sp, #24]
 800c47e:	9805      	ldr	r0, [sp, #20]
 800c480:	9d07      	ldr	r5, [sp, #28]
 800c482:	47a8      	blx	r5
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d0c1      	beq.n	800c40c <_printf_i+0x168>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	079b      	lsls	r3, r3, #30
 800c48c:	d415      	bmi.n	800c4ba <_printf_i+0x216>
 800c48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c490:	68e0      	ldr	r0, [r4, #12]
 800c492:	4298      	cmp	r0, r3
 800c494:	dabc      	bge.n	800c410 <_printf_i+0x16c>
 800c496:	0018      	movs	r0, r3
 800c498:	e7ba      	b.n	800c410 <_printf_i+0x16c>
 800c49a:	0022      	movs	r2, r4
 800c49c:	2301      	movs	r3, #1
 800c49e:	9906      	ldr	r1, [sp, #24]
 800c4a0:	9805      	ldr	r0, [sp, #20]
 800c4a2:	9e07      	ldr	r6, [sp, #28]
 800c4a4:	3219      	adds	r2, #25
 800c4a6:	47b0      	blx	r6
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d0af      	beq.n	800c40c <_printf_i+0x168>
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	68e3      	ldr	r3, [r4, #12]
 800c4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4b2:	1a9b      	subs	r3, r3, r2
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	dcf0      	bgt.n	800c49a <_printf_i+0x1f6>
 800c4b8:	e7e9      	b.n	800c48e <_printf_i+0x1ea>
 800c4ba:	2500      	movs	r5, #0
 800c4bc:	e7f7      	b.n	800c4ae <_printf_i+0x20a>
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	0800c75d 	.word	0x0800c75d
 800c4c4:	0800c76e 	.word	0x0800c76e

0800c4c8 <__retarget_lock_acquire_recursive>:
 800c4c8:	4770      	bx	lr

0800c4ca <__retarget_lock_release_recursive>:
 800c4ca:	4770      	bx	lr

0800c4cc <memchr>:
 800c4cc:	b2c9      	uxtb	r1, r1
 800c4ce:	1882      	adds	r2, r0, r2
 800c4d0:	4290      	cmp	r0, r2
 800c4d2:	d101      	bne.n	800c4d8 <memchr+0xc>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	4770      	bx	lr
 800c4d8:	7803      	ldrb	r3, [r0, #0]
 800c4da:	428b      	cmp	r3, r1
 800c4dc:	d0fb      	beq.n	800c4d6 <memchr+0xa>
 800c4de:	3001      	adds	r0, #1
 800c4e0:	e7f6      	b.n	800c4d0 <memchr+0x4>

0800c4e2 <memcpy>:
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	b510      	push	{r4, lr}
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d100      	bne.n	800c4ec <memcpy+0xa>
 800c4ea:	bd10      	pop	{r4, pc}
 800c4ec:	5ccc      	ldrb	r4, [r1, r3]
 800c4ee:	54c4      	strb	r4, [r0, r3]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	e7f8      	b.n	800c4e6 <memcpy+0x4>

0800c4f4 <memmove>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	4288      	cmp	r0, r1
 800c4f8:	d902      	bls.n	800c500 <memmove+0xc>
 800c4fa:	188b      	adds	r3, r1, r2
 800c4fc:	4298      	cmp	r0, r3
 800c4fe:	d303      	bcc.n	800c508 <memmove+0x14>
 800c500:	2300      	movs	r3, #0
 800c502:	e007      	b.n	800c514 <memmove+0x20>
 800c504:	5c8b      	ldrb	r3, [r1, r2]
 800c506:	5483      	strb	r3, [r0, r2]
 800c508:	3a01      	subs	r2, #1
 800c50a:	d2fb      	bcs.n	800c504 <memmove+0x10>
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	5ccc      	ldrb	r4, [r1, r3]
 800c510:	54c4      	strb	r4, [r0, r3]
 800c512:	3301      	adds	r3, #1
 800c514:	429a      	cmp	r2, r3
 800c516:	d1fa      	bne.n	800c50e <memmove+0x1a>
 800c518:	e7f8      	b.n	800c50c <memmove+0x18>

0800c51a <_realloc_r>:
 800c51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51c:	0007      	movs	r7, r0
 800c51e:	000d      	movs	r5, r1
 800c520:	0016      	movs	r6, r2
 800c522:	2900      	cmp	r1, #0
 800c524:	d105      	bne.n	800c532 <_realloc_r+0x18>
 800c526:	0011      	movs	r1, r2
 800c528:	f7ff fc4a 	bl	800bdc0 <_malloc_r>
 800c52c:	0004      	movs	r4, r0
 800c52e:	0020      	movs	r0, r4
 800c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c532:	2a00      	cmp	r2, #0
 800c534:	d103      	bne.n	800c53e <_realloc_r+0x24>
 800c536:	f7ff fbf9 	bl	800bd2c <_free_r>
 800c53a:	0034      	movs	r4, r6
 800c53c:	e7f7      	b.n	800c52e <_realloc_r+0x14>
 800c53e:	f000 f812 	bl	800c566 <_malloc_usable_size_r>
 800c542:	002c      	movs	r4, r5
 800c544:	42b0      	cmp	r0, r6
 800c546:	d2f2      	bcs.n	800c52e <_realloc_r+0x14>
 800c548:	0031      	movs	r1, r6
 800c54a:	0038      	movs	r0, r7
 800c54c:	f7ff fc38 	bl	800bdc0 <_malloc_r>
 800c550:	1e04      	subs	r4, r0, #0
 800c552:	d0ec      	beq.n	800c52e <_realloc_r+0x14>
 800c554:	0029      	movs	r1, r5
 800c556:	0032      	movs	r2, r6
 800c558:	f7ff ffc3 	bl	800c4e2 <memcpy>
 800c55c:	0029      	movs	r1, r5
 800c55e:	0038      	movs	r0, r7
 800c560:	f7ff fbe4 	bl	800bd2c <_free_r>
 800c564:	e7e3      	b.n	800c52e <_realloc_r+0x14>

0800c566 <_malloc_usable_size_r>:
 800c566:	1f0b      	subs	r3, r1, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	1f18      	subs	r0, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	da01      	bge.n	800c574 <_malloc_usable_size_r+0xe>
 800c570:	580b      	ldr	r3, [r1, r0]
 800c572:	18c0      	adds	r0, r0, r3
 800c574:	4770      	bx	lr
	...

0800c578 <_init>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57e:	bc08      	pop	{r3}
 800c580:	469e      	mov	lr, r3
 800c582:	4770      	bx	lr

0800c584 <_fini>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	46c0      	nop			; (mov r8, r8)
 800c588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58a:	bc08      	pop	{r3}
 800c58c:	469e      	mov	lr, r3
 800c58e:	4770      	bx	lr
